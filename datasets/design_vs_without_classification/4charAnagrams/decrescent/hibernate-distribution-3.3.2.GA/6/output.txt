//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999996696749896	WITHOUT_CLASSIFICATION	3.3032501040384075E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999805417704343	WITHOUT_CLASSIFICATION	1.9458229565738237E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999805417704343	WITHOUT_CLASSIFICATION	1.9458229565738237E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9996626828212688	WITHOUT_CLASSIFICATION	3.373171787311788E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999969015602419	WITHOUT_CLASSIFICATION	3.09843975809341E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999986839686477	WITHOUT_CLASSIFICATION	1.3160313522905583E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998474167427	WITHOUT_CLASSIFICATION	1.5258325723281626E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998474167427	WITHOUT_CLASSIFICATION	1.5258325723281626E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995934664765	WITHOUT_CLASSIFICATION	4.0653352355006076E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999538822283	WITHOUT_CLASSIFICATION	4.6117771760764726E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999980005438612	WITHOUT_CLASSIFICATION	1.999456138775777E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999624863900947	WITHOUT_CLASSIFICATION	3.7513609905370394E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999967750362018	WITHOUT_CLASSIFICATION	3.2249637982335213E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999967750362018	WITHOUT_CLASSIFICATION	3.2249637982335213E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999855979629667	WITHOUT_CLASSIFICATION	1.4402037033346672E-5	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997855128297789	WITHOUT_CLASSIFICATION	2.1448717022110928E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9994418211477669	WITHOUT_CLASSIFICATION	5.58178852233085E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.999989783396238	WITHOUT_CLASSIFICATION	1.0216603761980924E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999964099081	WITHOUT_CLASSIFICATION	3.59009187959305E-9	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999661656150755	WITHOUT_CLASSIFICATION	3.383438492457441E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999654434794515	WITHOUT_CLASSIFICATION	3.4556520548591285E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999992849568028	WITHOUT_CLASSIFICATION	7.15043197190063E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999881923433198	WITHOUT_CLASSIFICATION	1.1807656680127653E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8956575745028245	WITHOUT_CLASSIFICATION	0.10434242549717554	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999959314832094	WITHOUT_CLASSIFICATION	4.068516790598367E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957144133348	WITHOUT_CLASSIFICATION	4.285586665300102E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999863919946942	WITHOUT_CLASSIFICATION	1.3608005305905603E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999941477664284	WITHOUT_CLASSIFICATION	5.8522335715773635E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999941477664284	WITHOUT_CLASSIFICATION	5.8522335715773635E-6	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9998452627208372	WITHOUT_CLASSIFICATION	1.5473727916290927E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999972737447099	WITHOUT_CLASSIFICATION	2.726255290049489E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998907787277038	WITHOUT_CLASSIFICATION	1.0922127229609682E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998755933577681	WITHOUT_CLASSIFICATION	1.2440664223191451E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9911434208933381	DESIGN	0.008856579106661929	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8959150501416315	DESIGN	0.10408494985836846	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8959150501416315	DESIGN	0.10408494985836846	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999999890365	WITHOUT_CLASSIFICATION	1.0963495647108353E-10	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999867813021246	WITHOUT_CLASSIFICATION	1.3218697875386919E-5	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999997483972529	WITHOUT_CLASSIFICATION	2.5160274713021725E-7	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9993336424490019	WITHOUT_CLASSIFICATION	6.663575509980326E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999406258320531	WITHOUT_CLASSIFICATION	5.937416794701916E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989822071557	WITHOUT_CLASSIFICATION	1.0177928444255573E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955398915398	WITHOUT_CLASSIFICATION	4.460108460178586E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.99999411686904	WITHOUT_CLASSIFICATION	5.883130959914547E-6	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.999977149667133	WITHOUT_CLASSIFICATION	2.285033286693133E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999973793269853	WITHOUT_CLASSIFICATION	2.620673014801111E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999259956931539	WITHOUT_CLASSIFICATION	7.40043068461158E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.999977149667133	WITHOUT_CLASSIFICATION	2.285033286693133E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999259956931539	WITHOUT_CLASSIFICATION	7.40043068461158E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999998386886736	WITHOUT_CLASSIFICATION	1.613113263916798E-7	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9940234205807753	DESIGN	0.005976579419224685	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999997323502334	WITHOUT_CLASSIFICATION	2.676497665008872E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999519024444378	WITHOUT_CLASSIFICATION	4.809755556227143E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.7544608092164042	WITHOUT_CLASSIFICATION	0.24553919078359565	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999949578084493	WITHOUT_CLASSIFICATION	5.042191550728121E-6	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9720869799402989	WITHOUT_CLASSIFICATION	0.027913020059701064	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.8212253207485969	WITHOUT_CLASSIFICATION	0.1787746792514031	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999996722225393	WITHOUT_CLASSIFICATION	3.2777746072796593E-7	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9996278167190931	WITHOUT_CLASSIFICATION	3.7218328090696354E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999650852136548	WITHOUT_CLASSIFICATION	3.491478634521157E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999937172377348	WITHOUT_CLASSIFICATION	6.282762265200973E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999998951093	WITHOUT_CLASSIFICATION	1.048906489988299E-10	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999895859326042	WITHOUT_CLASSIFICATION	1.0414067395808124E-5	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9963370544537306	WITHOUT_CLASSIFICATION	0.0036629455462693695	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999842780565253	WITHOUT_CLASSIFICATION	1.572194347472324E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9997066408745577	WITHOUT_CLASSIFICATION	2.933591254422661E-4	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999892004456102	WITHOUT_CLASSIFICATION	1.0799554389859774E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999997626287878	WITHOUT_CLASSIFICATION	2.373712122010408E-6	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998902548345	WITHOUT_CLASSIFICATION	1.097451654995051E-7	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999976633946368	WITHOUT_CLASSIFICATION	2.3366053632151484E-6	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999670669023	WITHOUT_CLASSIFICATION	3.2933097695711215E-8	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999509537728142	WITHOUT_CLASSIFICATION	4.904622718581325E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999977462516696	WITHOUT_CLASSIFICATION	2.2537483304174067E-6	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6342658980915281	WITHOUT_CLASSIFICATION	0.36573410190847194	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999993380341458	WITHOUT_CLASSIFICATION	6.619658542606126E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999956174436	WITHOUT_CLASSIFICATION	4.382556406941023E-9	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.510656246015555	DESIGN	0.48934375398444496	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999999157188	WITHOUT_CLASSIFICATION	8.428118242573473E-11	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999571565	WITHOUT_CLASSIFICATION	4.284349990534171E-8	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999999289492	WITHOUT_CLASSIFICATION	7.105086477220546E-11	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999775738122	WITHOUT_CLASSIFICATION	2.2426187864180648E-8	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999294816049538	WITHOUT_CLASSIFICATION	7.051839504628033E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999853810077127	WITHOUT_CLASSIFICATION	1.4618992287375375E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999855865921	WITHOUT_CLASSIFICATION	1.4413407892095327E-8	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999996717	WITHOUT_CLASSIFICATION	3.2830026985507067E-13	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999853810077127	WITHOUT_CLASSIFICATION	1.4618992287375375E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999987401382	WITHOUT_CLASSIFICATION	1.25986180497208E-8	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999461469855	WITHOUT_CLASSIFICATION	5.385301445291728E-8	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999995709562183	WITHOUT_CLASSIFICATION	4.2904378166742293E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999995573040104	WITHOUT_CLASSIFICATION	4.4269598973848093E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999618770555526	WITHOUT_CLASSIFICATION	3.8122944447328515E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990606217822	WITHOUT_CLASSIFICATION	9.393782178146017E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990606217822	WITHOUT_CLASSIFICATION	9.393782178146017E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999907448430884	WITHOUT_CLASSIFICATION	9.25515691160145E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999759583380089	WITHOUT_CLASSIFICATION	2.4041661991132144E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999502114488247	WITHOUT_CLASSIFICATION	4.9788551175339614E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.999999997709334	WITHOUT_CLASSIFICATION	2.2906659196838457E-9	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999241295892	WITHOUT_CLASSIFICATION	7.587041085436641E-8	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999857425649584	WITHOUT_CLASSIFICATION	1.4257435041473678E-5	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999999978183375	WITHOUT_CLASSIFICATION	2.1816624916801538E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.999972805188539	WITHOUT_CLASSIFICATION	2.719481146102802E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999620923926007	WITHOUT_CLASSIFICATION	3.7907607399377006E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999774218911	WITHOUT_CLASSIFICATION	2.257810888893243E-8	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999974244552706	WITHOUT_CLASSIFICATION	2.5755447294556483E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999974244552706	WITHOUT_CLASSIFICATION	2.5755447294556483E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999463039272	WITHOUT_CLASSIFICATION	5.369607284538408E-8	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999849507654	WITHOUT_CLASSIFICATION	1.50492345600528E-8	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9995257741763646	WITHOUT_CLASSIFICATION	4.742258236353999E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999974244552706	WITHOUT_CLASSIFICATION	2.5755447294556483E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999463039272	WITHOUT_CLASSIFICATION	5.369607284538408E-8	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999463039272	WITHOUT_CLASSIFICATION	5.369607284538408E-8	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9996498315357919	WITHOUT_CLASSIFICATION	3.50168464208014E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9995659955268849	WITHOUT_CLASSIFICATION	4.3400447311515403E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999843242	WITHOUT_CLASSIFICATION	1.5675814791745337E-11	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999990257116184	WITHOUT_CLASSIFICATION	9.742883816563817E-7	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.998097286730027	WITHOUT_CLASSIFICATION	0.001902713269973053	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.998097286730027	WITHOUT_CLASSIFICATION	0.001902713269973053	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999971237138072	WITHOUT_CLASSIFICATION	2.876286192667634E-6	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9987740315191092	WITHOUT_CLASSIFICATION	0.0012259684808908185	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999952419199185	WITHOUT_CLASSIFICATION	4.758080081547297E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999797305602017	WITHOUT_CLASSIFICATION	2.0269439798252258E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999797305602017	WITHOUT_CLASSIFICATION	2.0269439798252258E-5	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999880939183721	WITHOUT_CLASSIFICATION	1.190608162793193E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9967936173865422	WITHOUT_CLASSIFICATION	0.0032063826134578273	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9921388909380607	WITHOUT_CLASSIFICATION	0.007861109061939238	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999970891863315	WITHOUT_CLASSIFICATION	2.9108136684669534E-6	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999611701681422	WITHOUT_CLASSIFICATION	3.882983185772832E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999952876668877	WITHOUT_CLASSIFICATION	4.712333112346597E-6	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999972572842536	WITHOUT_CLASSIFICATION	2.7427157464559796E-6	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9975961435613697	WITHOUT_CLASSIFICATION	0.002403856438630263	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999491197746381	WITHOUT_CLASSIFICATION	5.088022536197895E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9921388909380607	WITHOUT_CLASSIFICATION	0.007861109061939238	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9995056597833086	WITHOUT_CLASSIFICATION	4.943402166913723E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999825617597404	WITHOUT_CLASSIFICATION	1.7438240259646757E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999825617597404	WITHOUT_CLASSIFICATION	1.7438240259646757E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9983113437716049	WITHOUT_CLASSIFICATION	0.0016886562283950776	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9972380249276049	WITHOUT_CLASSIFICATION	0.0027619750723950048	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.6015794196206626	WITHOUT_CLASSIFICATION	0.39842058037933736	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999668218835565	WITHOUT_CLASSIFICATION	3.317811644361457E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999661362777036	WITHOUT_CLASSIFICATION	3.386372229639953E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9974409325971728	WITHOUT_CLASSIFICATION	0.0025590674028270607	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.999911279497	WITHOUT_CLASSIFICATION	8.872050299999593E-5	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9997088749216324	WITHOUT_CLASSIFICATION	2.911250783676152E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999996978828	WITHOUT_CLASSIFICATION	3.0211720156958874E-9	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999996978828	WITHOUT_CLASSIFICATION	3.0211720156958874E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998063819706707	WITHOUT_CLASSIFICATION	1.936180293291377E-4	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999996696749896	WITHOUT_CLASSIFICATION	3.3032501040384075E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999997387330025	WITHOUT_CLASSIFICATION	2.612669974968988E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998532923562	WITHOUT_CLASSIFICATION	1.4670764382092545E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999805417704343	WITHOUT_CLASSIFICATION	1.9458229565738237E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999974401556506	WITHOUT_CLASSIFICATION	2.5598443493739827E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999944775321589	WITHOUT_CLASSIFICATION	5.522467841068989E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999932541466702	WITHOUT_CLASSIFICATION	6.745853329865552E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.999999400849593	WITHOUT_CLASSIFICATION	5.991504069658249E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999971436376258	WITHOUT_CLASSIFICATION	2.856362374108446E-6	DESIGN
// new	WITHOUT_CLASSIFICATION	0.999745200147028	WITHOUT_CLASSIFICATION	2.547998529721028E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999140316011212	WITHOUT_CLASSIFICATION	8.596839887866836E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999989338724684	WITHOUT_CLASSIFICATION	1.0661275315942263E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999969015602419	WITHOUT_CLASSIFICATION	3.09843975809341E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997149664654	WITHOUT_CLASSIFICATION	2.850335345161991E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997149664654	WITHOUT_CLASSIFICATION	2.850335345161991E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999989979978046	WITHOUT_CLASSIFICATION	1.0020021954731311E-6	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9993716042490033	WITHOUT_CLASSIFICATION	6.283957509968401E-4	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999870719184606	WITHOUT_CLASSIFICATION	1.2928081539386106E-5	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999967725302501	WITHOUT_CLASSIFICATION	3.2274697499850433E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999969961618764	WITHOUT_CLASSIFICATION	3.003838123515864E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999273971828104	WITHOUT_CLASSIFICATION	7.260281718958688E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998474167427	WITHOUT_CLASSIFICATION	1.5258325723281626E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9986273169160986	WITHOUT_CLASSIFICATION	0.0013726830839013641	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999958320667431	WITHOUT_CLASSIFICATION	4.167933256829939E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999969673782652	WITHOUT_CLASSIFICATION	3.0326217348920085E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999995225134996	WITHOUT_CLASSIFICATION	4.774865004494772E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999202965465078	WITHOUT_CLASSIFICATION	7.970345349220735E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.99999264165263	WITHOUT_CLASSIFICATION	7.358347370045277E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999982105408878	WITHOUT_CLASSIFICATION	1.7894591121859234E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999965259975	WITHOUT_CLASSIFICATION	3.474002393846772E-9	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999984469973563	WITHOUT_CLASSIFICATION	1.5530026437058427E-6	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999996571661707	WITHOUT_CLASSIFICATION	3.428338293921757E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9685443517531673	WITHOUT_CLASSIFICATION	0.03145564824683265	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999825071483507	WITHOUT_CLASSIFICATION	1.749285164935326E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999991767437091	WITHOUT_CLASSIFICATION	8.232562908049254E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999805417704343	WITHOUT_CLASSIFICATION	1.9458229565738237E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999805417704343	WITHOUT_CLASSIFICATION	1.9458229565738237E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999140316011212	WITHOUT_CLASSIFICATION	8.596839887866836E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997149664654	WITHOUT_CLASSIFICATION	2.850335345161991E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999982105408878	WITHOUT_CLASSIFICATION	1.7894591121859234E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995934664765	WITHOUT_CLASSIFICATION	4.0653352355006076E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.999998246018575	WITHOUT_CLASSIFICATION	1.753981424918841E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999684203674641	WITHOUT_CLASSIFICATION	3.1579632535943E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999947733906593	WITHOUT_CLASSIFICATION	5.226609340620152E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999996738202791	WITHOUT_CLASSIFICATION	3.261797208189583E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999942678657	WITHOUT_CLASSIFICATION	5.7321343054709886E-9	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999880914438096	WITHOUT_CLASSIFICATION	1.1908556190336212E-5	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999967760797972	WITHOUT_CLASSIFICATION	3.22392020283875E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999790130992848	WITHOUT_CLASSIFICATION	2.0986900715249112E-5	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999780124934017	WITHOUT_CLASSIFICATION	2.1987506598348376E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999724984155155	WITHOUT_CLASSIFICATION	2.750158448449363E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999724984155155	WITHOUT_CLASSIFICATION	2.750158448449363E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999973726787199	WITHOUT_CLASSIFICATION	2.627321280073945E-6	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999983785760017	WITHOUT_CLASSIFICATION	1.6214239983717442E-6	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9996635467790157	WITHOUT_CLASSIFICATION	3.364532209842516E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999974331141891	WITHOUT_CLASSIFICATION	2.5668858109069E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999997034604078	WITHOUT_CLASSIFICATION	2.9653959221644824E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999984833521842	WITHOUT_CLASSIFICATION	1.516647815699117E-6	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999547511132226	WITHOUT_CLASSIFICATION	4.52488867774386E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999538822283	WITHOUT_CLASSIFICATION	4.6117771760764726E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.999998085855059	WITHOUT_CLASSIFICATION	1.914144940911723E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999986255866233	WITHOUT_CLASSIFICATION	1.3744133766602151E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999986255866233	WITHOUT_CLASSIFICATION	1.3744133766602151E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999023322599	WITHOUT_CLASSIFICATION	9.766774018909964E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9998976845882044	WITHOUT_CLASSIFICATION	1.0231541179564184E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.99999990407745	WITHOUT_CLASSIFICATION	9.592255004187473E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998679134926	WITHOUT_CLASSIFICATION	1.320865073043189E-7	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999888438972765	WITHOUT_CLASSIFICATION	1.1156102723633867E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999805417704343	WITHOUT_CLASSIFICATION	1.9458229565738237E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999140316011212	WITHOUT_CLASSIFICATION	8.596839887866836E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999969015602419	WITHOUT_CLASSIFICATION	3.09843975809341E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999982105408878	WITHOUT_CLASSIFICATION	1.7894591121859234E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999982105408878	WITHOUT_CLASSIFICATION	1.7894591121859234E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998995142952	WITHOUT_CLASSIFICATION	1.0048570478345202E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998995142952	WITHOUT_CLASSIFICATION	1.0048570478345202E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999987682459537	WITHOUT_CLASSIFICATION	1.2317540463703706E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999996366562717	WITHOUT_CLASSIFICATION	3.633437283502816E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999996366562717	WITHOUT_CLASSIFICATION	3.633437283502816E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.999991418878586	WITHOUT_CLASSIFICATION	8.58112141402461E-6	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999561304099263	WITHOUT_CLASSIFICATION	4.3869590073598297E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.99999850899439	WITHOUT_CLASSIFICATION	1.4910056099227102E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999969537312424	WITHOUT_CLASSIFICATION	3.046268757649458E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999819595955	WITHOUT_CLASSIFICATION	1.804040456443184E-8	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999624863900947	WITHOUT_CLASSIFICATION	3.7513609905370394E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999624863900947	WITHOUT_CLASSIFICATION	3.7513609905370394E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9998923654083999	WITHOUT_CLASSIFICATION	1.0763459160015239E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999977773667866	WITHOUT_CLASSIFICATION	2.2226332134124265E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.999999749010491	WITHOUT_CLASSIFICATION	2.5098950896835217E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999880602313824	WITHOUT_CLASSIFICATION	1.1939768617468238E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999998616926884	WITHOUT_CLASSIFICATION	1.383073115025234E-7	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9998806554705256	WITHOUT_CLASSIFICATION	1.1934452947439827E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999967750362018	WITHOUT_CLASSIFICATION	3.2249637982335213E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998469146004	WITHOUT_CLASSIFICATION	1.5308539959101165E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998469146004	WITHOUT_CLASSIFICATION	1.5308539959101165E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999855979629667	WITHOUT_CLASSIFICATION	1.4402037033346672E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999855979629667	WITHOUT_CLASSIFICATION	1.4402037033346672E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999966168359844	WITHOUT_CLASSIFICATION	3.3831640155575447E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999966168359844	WITHOUT_CLASSIFICATION	3.3831640155575447E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999905810673	WITHOUT_CLASSIFICATION	9.418932707188416E-9	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999905810673	WITHOUT_CLASSIFICATION	9.418932707188416E-9	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999624863900947	WITHOUT_CLASSIFICATION	3.7513609905370394E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999967750362018	WITHOUT_CLASSIFICATION	3.2249637982335213E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998469146004	WITHOUT_CLASSIFICATION	1.5308539959101165E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998469146004	WITHOUT_CLASSIFICATION	1.5308539959101165E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999855979629667	WITHOUT_CLASSIFICATION	1.4402037033346672E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999966168359844	WITHOUT_CLASSIFICATION	3.3831640155575447E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999966168359844	WITHOUT_CLASSIFICATION	3.3831640155575447E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999905810673	WITHOUT_CLASSIFICATION	9.418932707188416E-9	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999786567543438	WITHOUT_CLASSIFICATION	2.1343245656132926E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998091339443692	WITHOUT_CLASSIFICATION	1.9086605563073985E-4	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998465415198083	WITHOUT_CLASSIFICATION	1.5345848019164264E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999994075114474	WITHOUT_CLASSIFICATION	5.924885525751244E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9996977144627687	WITHOUT_CLASSIFICATION	3.0228553723134037E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999805769540391	WITHOUT_CLASSIFICATION	1.942304596091073E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9980099213514125	WITHOUT_CLASSIFICATION	0.0019900786485874903	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.6469680141661192	DESIGN	0.3530319858338808	WITHOUT_CLASSIFICATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9947653929508532	WITHOUT_CLASSIFICATION	0.005234607049146811	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999985819299	WITHOUT_CLASSIFICATION	1.4180701421148147E-9	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999675654483	WITHOUT_CLASSIFICATION	3.243455169109512E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999250579952	WITHOUT_CLASSIFICATION	7.494200486862159E-8	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999907448430884	WITHOUT_CLASSIFICATION	9.25515691160145E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999805769540391	WITHOUT_CLASSIFICATION	1.942304596091073E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.999917749820335	WITHOUT_CLASSIFICATION	8.225017966505206E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.999917749820335	WITHOUT_CLASSIFICATION	8.225017966505206E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999888065413335	WITHOUT_CLASSIFICATION	1.1193458666610488E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999959863897743	WITHOUT_CLASSIFICATION	4.013610225789605E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999959863897743	WITHOUT_CLASSIFICATION	4.013610225789605E-6	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.999997809356052	WITHOUT_CLASSIFICATION	2.1906439479680364E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995721026272202	WITHOUT_CLASSIFICATION	4.278973727797353E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999998274493352	WITHOUT_CLASSIFICATION	1.725506648026885E-7	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999858323012195	WITHOUT_CLASSIFICATION	1.4167698780502402E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999858323012195	WITHOUT_CLASSIFICATION	1.4167698780502402E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999964099081	WITHOUT_CLASSIFICATION	3.59009187959305E-9	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999976772145	WITHOUT_CLASSIFICATION	2.3227855049552856E-9	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999976772145	WITHOUT_CLASSIFICATION	2.3227855049552856E-9	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999279997808987	WITHOUT_CLASSIFICATION	7.20002191012706E-5	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999979183733388	WITHOUT_CLASSIFICATION	2.0816266611940853E-5	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999917612577085	WITHOUT_CLASSIFICATION	8.238742291458815E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999968817532814	WITHOUT_CLASSIFICATION	3.1182467185800608E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999966094649735	WITHOUT_CLASSIFICATION	3.3905350266242643E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999878285109974	WITHOUT_CLASSIFICATION	1.2171489002524982E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999661656150755	WITHOUT_CLASSIFICATION	3.383438492457441E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999916542537061	WITHOUT_CLASSIFICATION	8.34574629387336E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9927907811098132	WITHOUT_CLASSIFICATION	0.007209218890186733	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999938572034414	WITHOUT_CLASSIFICATION	6.142796558674171E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999983059636509	WITHOUT_CLASSIFICATION	1.69403634908287E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999881923433198	WITHOUT_CLASSIFICATION	1.1807656680127653E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996063033096	WITHOUT_CLASSIFICATION	3.9369669030365633E-7	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999993877870639	WITHOUT_CLASSIFICATION	6.122129362339194E-7	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999267446575	WITHOUT_CLASSIFICATION	7.325534247340344E-8	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999881923433198	WITHOUT_CLASSIFICATION	1.1807656680127653E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999950133361624	WITHOUT_CLASSIFICATION	4.986663837738778E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999999049622877	WITHOUT_CLASSIFICATION	9.503771224962641E-8	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999916238298341	WITHOUT_CLASSIFICATION	8.376170165934216E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999923643031331	WITHOUT_CLASSIFICATION	7.63569686699471E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999889978214596	WITHOUT_CLASSIFICATION	1.1002178540504425E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999988489007995	WITHOUT_CLASSIFICATION	1.151099200507021E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999978585333119	WITHOUT_CLASSIFICATION	2.1414666880564344E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957144133348	WITHOUT_CLASSIFICATION	4.285586665300102E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999979336276999	WITHOUT_CLASSIFICATION	2.066372300104912E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999863919946942	WITHOUT_CLASSIFICATION	1.3608005305905603E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999995064273145	WITHOUT_CLASSIFICATION	4.935726853750041E-7	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999624985815	WITHOUT_CLASSIFICATION	3.7501418496055024E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999774431643049	WITHOUT_CLASSIFICATION	2.2556835695029286E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999661656150755	WITHOUT_CLASSIFICATION	3.383438492457441E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999979336276999	WITHOUT_CLASSIFICATION	2.066372300104912E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999995064273145	WITHOUT_CLASSIFICATION	4.935726853750041E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999774431643049	WITHOUT_CLASSIFICATION	2.2556835695029286E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998734850324	WITHOUT_CLASSIFICATION	1.2651496764267318E-7	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999907607770547	WITHOUT_CLASSIFICATION	9.239222945335095E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999929283624	WITHOUT_CLASSIFICATION	7.071637629809055E-9	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999941477664284	WITHOUT_CLASSIFICATION	5.8522335715773635E-6	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999973271084239	WITHOUT_CLASSIFICATION	2.6728915761162364E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999989986213311	WITHOUT_CLASSIFICATION	1.0013786687966904E-6	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9998320338124175	WITHOUT_CLASSIFICATION	1.6796618758243924E-4	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9950433878373811	WITHOUT_CLASSIFICATION	0.00495661216261883	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999955162894588	WITHOUT_CLASSIFICATION	4.483710541146559E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999997195024	WITHOUT_CLASSIFICATION	2.804975997427924E-10	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999984497119744	WITHOUT_CLASSIFICATION	1.5502880255749159E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999845739728849	WITHOUT_CLASSIFICATION	1.542602711515753E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999158456	WITHOUT_CLASSIFICATION	8.41542928677895E-11	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999740825328	WITHOUT_CLASSIFICATION	2.591746719364257E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999865843361321	WITHOUT_CLASSIFICATION	1.3415663867947217E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999847987701685	WITHOUT_CLASSIFICATION	1.5201229831445104E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999972737447099	WITHOUT_CLASSIFICATION	2.726255290049489E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999869125285002	WITHOUT_CLASSIFICATION	1.3087471499731213E-5	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999889240817154	WITHOUT_CLASSIFICATION	1.1075918284608489E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.999979336276999	WITHOUT_CLASSIFICATION	2.066372300104912E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999799211608752	WITHOUT_CLASSIFICATION	2.0078839124781968E-5	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999923957690647	WITHOUT_CLASSIFICATION	7.604230935246991E-6	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999932882894361	WITHOUT_CLASSIFICATION	6.711710563927081E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998771489302812	WITHOUT_CLASSIFICATION	1.228510697188612E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999986519284587	WITHOUT_CLASSIFICATION	1.3480715412882418E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999687424763712	WITHOUT_CLASSIFICATION	3.1257523628747576E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999524684106	WITHOUT_CLASSIFICATION	4.753158935458977E-8	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998844726674	WITHOUT_CLASSIFICATION	1.1552733260626003E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999883771560919	WITHOUT_CLASSIFICATION	1.1622843908112924E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999903928250189	WITHOUT_CLASSIFICATION	9.60717498118019E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999927893367313	WITHOUT_CLASSIFICATION	7.21066326869603E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999984850776014	WITHOUT_CLASSIFICATION	1.5149223986933217E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9995294546115032	WITHOUT_CLASSIFICATION	4.705453884968066E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998755933577681	WITHOUT_CLASSIFICATION	1.2440664223191451E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999951121468855	WITHOUT_CLASSIFICATION	4.8878531144430975E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999747579835384	WITHOUT_CLASSIFICATION	2.5242016461621976E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9998980627927706	WITHOUT_CLASSIFICATION	1.0193720722946492E-4	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999988277231926	WITHOUT_CLASSIFICATION	1.1722768073968716E-5	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999933250719744	WITHOUT_CLASSIFICATION	6.674928025639894E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999915162629207	WITHOUT_CLASSIFICATION	8.483737079186247E-6	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999947964194	WITHOUT_CLASSIFICATION	5.203580644727766E-9	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9993979420289074	WITHOUT_CLASSIFICATION	6.020579710926264E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7502623959400032	WITHOUT_CLASSIFICATION	0.24973760405999668	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9951611717305123	WITHOUT_CLASSIFICATION	0.004838828269487654	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999964050454985	WITHOUT_CLASSIFICATION	3.5949545014944346E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999964050454985	WITHOUT_CLASSIFICATION	3.5949545014944346E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999802524508007	WITHOUT_CLASSIFICATION	1.9747549199337042E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999754692570912	WITHOUT_CLASSIFICATION	2.45307429088422E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999682611501464	WITHOUT_CLASSIFICATION	3.173884985365887E-5	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999802960901878	WITHOUT_CLASSIFICATION	1.9703909812166175E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996840821051844	WITHOUT_CLASSIFICATION	3.1591789481552813E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9982038026175388	WITHOUT_CLASSIFICATION	0.0017961973824610815	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999815708632588	WITHOUT_CLASSIFICATION	1.8429136741252997E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999985189725501	WITHOUT_CLASSIFICATION	1.4810274498586312E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999820916066571	WITHOUT_CLASSIFICATION	1.790839334289696E-5	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999835358562165	WITHOUT_CLASSIFICATION	1.6464143783544238E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9998834624168971	WITHOUT_CLASSIFICATION	1.1653758310293022E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9997926689177761	WITHOUT_CLASSIFICATION	2.0733108222388777E-4	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9969409339281003	WITHOUT_CLASSIFICATION	0.003059066071899702	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999995416812809	WITHOUT_CLASSIFICATION	4.5831871919603725E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965532086276	WITHOUT_CLASSIFICATION	3.446791372351654E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765951936544	WITHOUT_CLASSIFICATION	2.3404806345460676E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999727687257046	WITHOUT_CLASSIFICATION	2.72312742952974E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999987427456427	WITHOUT_CLASSIFICATION	1.2572543573387276E-6	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9676077617936096	WITHOUT_CLASSIFICATION	0.032392238206390346	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9984495471127449	WITHOUT_CLASSIFICATION	0.001550452887255148	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// found	WITHOUT_CLASSIFICATION	0.999900067437628	WITHOUT_CLASSIFICATION	9.993256237195634E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.999900067437628	WITHOUT_CLASSIFICATION	9.993256237195634E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9998876731488556	WITHOUT_CLASSIFICATION	1.1232685114437079E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9998876731488556	WITHOUT_CLASSIFICATION	1.1232685114437079E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7502623959400032	WITHOUT_CLASSIFICATION	0.24973760405999668	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999985730386691	WITHOUT_CLASSIFICATION	1.4269613309712594E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998378801633785	WITHOUT_CLASSIFICATION	1.6211983662162732E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998177783921	WITHOUT_CLASSIFICATION	1.8222160793697713E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998063819706707	WITHOUT_CLASSIFICATION	1.936180293291377E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998378801633785	WITHOUT_CLASSIFICATION	1.6211983662162732E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998177783921	WITHOUT_CLASSIFICATION	1.8222160793697713E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987231698239	WITHOUT_CLASSIFICATION	1.2768301761989555E-6	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999836842267549	WITHOUT_CLASSIFICATION	1.6315773245133754E-5	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999749532820202	WITHOUT_CLASSIFICATION	2.5046717979795982E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999776959740223	WITHOUT_CLASSIFICATION	2.230402597775211E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9990502431909163	WITHOUT_CLASSIFICATION	9.497568090838645E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.933836489383389	WITHOUT_CLASSIFICATION	0.06616351061661091	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999982472850438	WITHOUT_CLASSIFICATION	1.7527149561739253E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999827135437215	WITHOUT_CLASSIFICATION	1.728645627849213E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998770645949588	WITHOUT_CLASSIFICATION	1.2293540504116306E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999935229942	WITHOUT_CLASSIFICATION	6.477005762413798E-9	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999996952115977	WITHOUT_CLASSIFICATION	3.0478840225761977E-7	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999919837639203	WITHOUT_CLASSIFICATION	8.016236079690249E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999997646517996	WITHOUT_CLASSIFICATION	2.353482003776117E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999997126587397	WITHOUT_CLASSIFICATION	2.873412603555885E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998063819706707	WITHOUT_CLASSIFICATION	1.936180293291377E-4	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999971091924101	WITHOUT_CLASSIFICATION	2.8908075897862027E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999908783573497	WITHOUT_CLASSIFICATION	9.121642650258463E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999908783573497	WITHOUT_CLASSIFICATION	9.121642650258463E-6	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999796007823355	WITHOUT_CLASSIFICATION	2.0399217664443858E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987231698239	WITHOUT_CLASSIFICATION	1.2768301761989555E-6	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9996282521891305	WITHOUT_CLASSIFICATION	3.7174781086948854E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9984231931459866	DESIGN	0.001576806854013333	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9445151214060311	WITHOUT_CLASSIFICATION	0.0554848785939688	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999984502346533	WITHOUT_CLASSIFICATION	1.549765346728573E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9872174379110055	WITHOUT_CLASSIFICATION	0.012782562088994623	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987231698239	WITHOUT_CLASSIFICATION	1.2768301761989555E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999984502346533	WITHOUT_CLASSIFICATION	1.549765346728573E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9872174379110055	WITHOUT_CLASSIFICATION	0.012782562088994623	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9829658368193034	WITHOUT_CLASSIFICATION	0.0170341631806966	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999699142121	WITHOUT_CLASSIFICATION	3.008578783022511E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999990991898959	WITHOUT_CLASSIFICATION	9.008101040838727E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987231698239	WITHOUT_CLASSIFICATION	1.2768301761989555E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999987231698239	WITHOUT_CLASSIFICATION	1.2768301761989555E-6	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.999989433952646	WITHOUT_CLASSIFICATION	1.056604735410726E-5	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999752894920562	WITHOUT_CLASSIFICATION	2.4710507943922487E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9998955308492549	WITHOUT_CLASSIFICATION	1.0446915074520188E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999808981359491	WITHOUT_CLASSIFICATION	1.9101864050751784E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999993595902537	WITHOUT_CLASSIFICATION	6.404097462815576E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999952798457	WITHOUT_CLASSIFICATION	4.720154302239658E-9	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999616570994	WITHOUT_CLASSIFICATION	3.834290057346636E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999022461096675	WITHOUT_CLASSIFICATION	9.775389033247288E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999856594945533	WITHOUT_CLASSIFICATION	1.4340505446736506E-5	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999051284902142	WITHOUT_CLASSIFICATION	9.487150978583944E-5	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999967366436668	WITHOUT_CLASSIFICATION	3.2633563331028966E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999869752912967	WITHOUT_CLASSIFICATION	1.3024708703449073E-5	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999865362858792	WITHOUT_CLASSIFICATION	1.346371412079685E-5	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9983072179141342	WITHOUT_CLASSIFICATION	0.001692782085865876	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999332570586	WITHOUT_CLASSIFICATION	6.67429414062476E-8	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999850296432866	WITHOUT_CLASSIFICATION	1.4970356713419378E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9993336424490019	WITHOUT_CLASSIFICATION	6.663575509980326E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9958287837585368	WITHOUT_CLASSIFICATION	0.004171216241463189	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9988490528314067	WITHOUT_CLASSIFICATION	0.0011509471685933398	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998726696182	WITHOUT_CLASSIFICATION	1.2733038180857937E-7	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999614376732533	WITHOUT_CLASSIFICATION	3.8562326746661074E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.998884959204914	WITHOUT_CLASSIFICATION	0.0011150407950859858	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.998884959204914	WITHOUT_CLASSIFICATION	0.0011150407950859858	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9993336424490019	WITHOUT_CLASSIFICATION	6.663575509980326E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999992417756333	WITHOUT_CLASSIFICATION	7.582243666596115E-7	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999032642949931	WITHOUT_CLASSIFICATION	9.673570500693552E-5	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.6307270866183242	WITHOUT_CLASSIFICATION	0.3692729133816757	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999992165606095	WITHOUT_CLASSIFICATION	7.834393905468689E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558202801788	WITHOUT_CLASSIFICATION	4.4179719821118386E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998759140853	WITHOUT_CLASSIFICATION	1.2408591464453108E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9997011626303146	WITHOUT_CLASSIFICATION	2.988373696853698E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999470287904291	WITHOUT_CLASSIFICATION	5.297120957093475E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999301293	WITHOUT_CLASSIFICATION	6.987066347388623E-11	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999995641356153	WITHOUT_CLASSIFICATION	4.358643846683518E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994275418718	WITHOUT_CLASSIFICATION	5.72458128216027E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999769175017114	WITHOUT_CLASSIFICATION	2.308249828864309E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999765520228088	WITHOUT_CLASSIFICATION	2.344797719121832E-5	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999974313381	WITHOUT_CLASSIFICATION	2.5686619057056756E-8	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999853032795	WITHOUT_CLASSIFICATION	1.4696720441013404E-8	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999834805882667	WITHOUT_CLASSIFICATION	1.651941173330584E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999997104651157	WITHOUT_CLASSIFICATION	2.8953488430786854E-6	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999850597170702	WITHOUT_CLASSIFICATION	1.494028292977096E-5	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997072299790432	WITHOUT_CLASSIFICATION	2.9277002095690606E-4	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999969410675345	WITHOUT_CLASSIFICATION	3.058932465499897E-5	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9987581045792898	WITHOUT_CLASSIFICATION	0.0012418954207101764	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9979190248368914	WITHOUT_CLASSIFICATION	0.0020809751631084895	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969828718204	WITHOUT_CLASSIFICATION	3.0171281795408912E-6	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993885461246406	WITHOUT_CLASSIFICATION	6.114538753595019E-4	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929006390008	WITHOUT_CLASSIFICATION	7.099360999235102E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998563444654439	WITHOUT_CLASSIFICATION	1.4365553455603788E-4	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912305428459	WITHOUT_CLASSIFICATION	8.769457154033782E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999523806216397	WITHOUT_CLASSIFICATION	4.761937836019981E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999513845431971	WITHOUT_CLASSIFICATION	4.861545680299661E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982877288418	WITHOUT_CLASSIFICATION	1.7122711581973755E-6	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999144201656155	WITHOUT_CLASSIFICATION	8.557983438454652E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9849126386588848	WITHOUT_CLASSIFICATION	0.015087361341115194	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989266412772	WITHOUT_CLASSIFICATION	1.0733587228253804E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998833259139353	WITHOUT_CLASSIFICATION	1.1667408606474673E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864389773186	WITHOUT_CLASSIFICATION	1.356102268133706E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999896027844	WITHOUT_CLASSIFICATION	1.0397215593497946E-7	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999525809083318	WITHOUT_CLASSIFICATION	4.7419091668076844E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971274137317	WITHOUT_CLASSIFICATION	2.8725862682823512E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831299769151	WITHOUT_CLASSIFICATION	1.687002308493221E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900049603008	WITHOUT_CLASSIFICATION	9.995039699201583E-6	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996950190998	WITHOUT_CLASSIFICATION	3.04980900184073E-7	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981729828972	WITHOUT_CLASSIFICATION	1.82701710277705E-6	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9768404025283616	WITHOUT_CLASSIFICATION	0.02315959747163843	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999284869583479	WITHOUT_CLASSIFICATION	7.151304165211454E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999701421134	WITHOUT_CLASSIFICATION	2.98578866187875E-8	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998464208357433	WITHOUT_CLASSIFICATION	1.5357916425661822E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999107207991025	WITHOUT_CLASSIFICATION	8.927920089749394E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999998816560588	WITHOUT_CLASSIFICATION	1.183439411765892E-7	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.8544491403782838	WITHOUT_CLASSIFICATION	0.14555085962171618	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999982723557589	WITHOUT_CLASSIFICATION	1.7276442411388637E-6	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999989786382891	WITHOUT_CLASSIFICATION	1.021361710799002E-6	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999995269551073	WITHOUT_CLASSIFICATION	4.730448926960545E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998464623694123	WITHOUT_CLASSIFICATION	1.5353763058764642E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999941422399606	WITHOUT_CLASSIFICATION	5.857760039336099E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999357176781971	WITHOUT_CLASSIFICATION	6.428232180297502E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9995505304020021	WITHOUT_CLASSIFICATION	4.494695979979559E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9997330556797664	WITHOUT_CLASSIFICATION	2.669443202335474E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999407141634424	WITHOUT_CLASSIFICATION	5.9285836557499596E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9991136562352455	WITHOUT_CLASSIFICATION	8.863437647544707E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967956253332	WITHOUT_CLASSIFICATION	3.204374666812582E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957586293992	WITHOUT_CLASSIFICATION	4.24137060082628E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969723363238	WITHOUT_CLASSIFICATION	3.0276636761773706E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947383702018	WITHOUT_CLASSIFICATION	5.261629798249154E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9973733368138956	WITHOUT_CLASSIFICATION	0.0026266631861044786	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999998848628	WITHOUT_CLASSIFICATION	1.15137206906595E-9	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999967368203555	WITHOUT_CLASSIFICATION	3.2631796444479057E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999787685755	WITHOUT_CLASSIFICATION	2.1231424411088286E-8	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997542346685	WITHOUT_CLASSIFICATION	2.457653314896963E-6	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999854029640104	WITHOUT_CLASSIFICATION	1.4597035989641058E-5	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9231516520565796	WITHOUT_CLASSIFICATION	0.07684834794342049	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999818804086473	WITHOUT_CLASSIFICATION	1.811959135267577E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998379174406	WITHOUT_CLASSIFICATION	1.6208255931957298E-7	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999957363469484	WITHOUT_CLASSIFICATION	4.263653051682194E-6	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9974841762595893	WITHOUT_CLASSIFICATION	0.0025158237404106863	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998959016035663	WITHOUT_CLASSIFICATION	1.0409839643357288E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9930494289416967	WITHOUT_CLASSIFICATION	0.006950571058303375	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998464208357433	WITHOUT_CLASSIFICATION	1.5357916425661822E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998750716553383	WITHOUT_CLASSIFICATION	1.2492834466177463E-4	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998499375207	WITHOUT_CLASSIFICATION	1.5006247934985523E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999999981955449	WITHOUT_CLASSIFICATION	1.8044550949666572E-8	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999821616234631	WITHOUT_CLASSIFICATION	1.783837653681317E-5	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999994773716674	WITHOUT_CLASSIFICATION	5.226283326838142E-7	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999886281874862	WITHOUT_CLASSIFICATION	1.137181251382185E-5	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9954406333562406	WITHOUT_CLASSIFICATION	0.00455936664375945	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9994772891386471	WITHOUT_CLASSIFICATION	5.227108613529471E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999986589176014	WITHOUT_CLASSIFICATION	1.3410823986461306E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996132330434	WITHOUT_CLASSIFICATION	3.867669565640178E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999978362295342	WITHOUT_CLASSIFICATION	2.163770465745261E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999938472393	WITHOUT_CLASSIFICATION	6.152760700756561E-7	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999958045281494	WITHOUT_CLASSIFICATION	4.195471850637694E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9908305449121834	WITHOUT_CLASSIFICATION	0.009169455087816693	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999885806423988	WITHOUT_CLASSIFICATION	1.1419357601240801E-5	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998489420036122	WITHOUT_CLASSIFICATION	1.5105799638769974E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999044225397427	WITHOUT_CLASSIFICATION	9.557746025736167E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999886357253084	WITHOUT_CLASSIFICATION	1.136427469158618E-5	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999480344288	WITHOUT_CLASSIFICATION	5.1965571147002564E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999999163221914	WITHOUT_CLASSIFICATION	8.367780857441197E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999991199061502	WITHOUT_CLASSIFICATION	8.800938498075432E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.999949414731066	WITHOUT_CLASSIFICATION	5.0585268934010414E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999690713526549	WITHOUT_CLASSIFICATION	3.092864734509635E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999990419639752	WITHOUT_CLASSIFICATION	9.58036024903203E-7	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9990311325917788	WITHOUT_CLASSIFICATION	9.688674082212086E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999995714113274	WITHOUT_CLASSIFICATION	4.2858867263556133E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8956575745028245	WITHOUT_CLASSIFICATION	0.10434242549717554	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994443949775	WITHOUT_CLASSIFICATION	5.556050226318493E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999994614788614	WITHOUT_CLASSIFICATION	5.385211385296676E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999961604466161	WITHOUT_CLASSIFICATION	3.839553383880532E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998464208357433	WITHOUT_CLASSIFICATION	1.5357916425661822E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.99624362511487	WITHOUT_CLASSIFICATION	0.003756374885130172	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999984386697502	WITHOUT_CLASSIFICATION	1.5613302497507136E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9854644721567505	WITHOUT_CLASSIFICATION	0.014535527843249648	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998464208357433	WITHOUT_CLASSIFICATION	1.5357916425661822E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948319910869	WITHOUT_CLASSIFICATION	5.168008913125275E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999991199061502	WITHOUT_CLASSIFICATION	8.800938498075432E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9974586864201594	WITHOUT_CLASSIFICATION	0.0025413135798406598	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9908183848063689	WITHOUT_CLASSIFICATION	0.009181615193631159	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.6379777321244579	DESIGN	0.36202226787554226	WITHOUT_CLASSIFICATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999996132330434	WITHOUT_CLASSIFICATION	3.867669565640178E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999978362295342	WITHOUT_CLASSIFICATION	2.163770465745261E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.99999938472393	WITHOUT_CLASSIFICATION	6.152760700756561E-7	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999997969684	WITHOUT_CLASSIFICATION	2.0303159820968835E-10	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999819436334143	WITHOUT_CLASSIFICATION	1.805636658566251E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999995535156827	WITHOUT_CLASSIFICATION	4.464843172455469E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999623925573	WITHOUT_CLASSIFICATION	3.760744260750877E-8	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999935764976	WITHOUT_CLASSIFICATION	6.423502374468723E-9	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998464208357433	WITHOUT_CLASSIFICATION	1.5357916425661822E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999958045281494	WITHOUT_CLASSIFICATION	4.195471850637694E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9908305449121834	WITHOUT_CLASSIFICATION	0.009169455087816693	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998445455844863	WITHOUT_CLASSIFICATION	1.554544155136169E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992750525281	WITHOUT_CLASSIFICATION	7.249474719500554E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999891969641	WITHOUT_CLASSIFICATION	1.080303591439894E-8	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999998769041538	WITHOUT_CLASSIFICATION	1.2309584627865984E-7	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9976370198270197	WITHOUT_CLASSIFICATION	0.002362980172980245	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9968818048048671	WITHOUT_CLASSIFICATION	0.0031181951951329656	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900049603008	WITHOUT_CLASSIFICATION	9.995039699201583E-6	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9981775305762377	WITHOUT_CLASSIFICATION	0.0018224694237622462	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9998541564602769	WITHOUT_CLASSIFICATION	1.4584353972310252E-4	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998638891716218	WITHOUT_CLASSIFICATION	1.3611082837810114E-4	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999996292453073	WITHOUT_CLASSIFICATION	3.707546927495935E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998879280829	WITHOUT_CLASSIFICATION	1.120719171499002E-7	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912305428459	WITHOUT_CLASSIFICATION	8.769457154033782E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999523806216397	WITHOUT_CLASSIFICATION	4.761937836019981E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998833259139353	WITHOUT_CLASSIFICATION	1.1667408606474673E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999998879280829	WITHOUT_CLASSIFICATION	1.120719171499002E-7	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999886683510307	WITHOUT_CLASSIFICATION	1.1331648969162116E-5	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999993831384596	WITHOUT_CLASSIFICATION	6.168615404714047E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742119845499	WITHOUT_CLASSIFICATION	2.5788015449974604E-5	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987028754826	WITHOUT_CLASSIFICATION	1.2971245173073346E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999830117343862	WITHOUT_CLASSIFICATION	1.6988265613846907E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9994137930072304	WITHOUT_CLASSIFICATION	5.862069927696851E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864389773186	WITHOUT_CLASSIFICATION	1.356102268133706E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971274137317	WITHOUT_CLASSIFICATION	2.8725862682823512E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998379174406	WITHOUT_CLASSIFICATION	1.6208255931957298E-7	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9994584771394757	WITHOUT_CLASSIFICATION	5.415228605243626E-4	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9893128773101193	WITHOUT_CLASSIFICATION	0.010687122689880582	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999837063848	WITHOUT_CLASSIFICATION	1.6293615206831827E-8	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999931802302363	WITHOUT_CLASSIFICATION	6.819769763637087E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999190298042	WITHOUT_CLASSIFICATION	8.09701958161374E-8	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.999999921317436	WITHOUT_CLASSIFICATION	7.868256409065948E-8	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998947269967535	WITHOUT_CLASSIFICATION	1.0527300324644289E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999301293	WITHOUT_CLASSIFICATION	6.987066347388623E-11	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999950319692305	WITHOUT_CLASSIFICATION	4.968030769538766E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999979417597054	WITHOUT_CLASSIFICATION	2.058240294716869E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999969678767929	WITHOUT_CLASSIFICATION	3.0321232070527487E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999979617425715	WITHOUT_CLASSIFICATION	2.038257428574134E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999991513889134	WITHOUT_CLASSIFICATION	8.486110865761935E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9994423503315171	WITHOUT_CLASSIFICATION	5.576496684829562E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999857343023586	WITHOUT_CLASSIFICATION	1.4265697641338423E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800813502018	WITHOUT_CLASSIFICATION	1.991864979824426E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992596403419	WITHOUT_CLASSIFICATION	7.40359658002749E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998950632890399	WITHOUT_CLASSIFICATION	1.049367109602082E-4	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998620186810411	WITHOUT_CLASSIFICATION	1.3798131895883167E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999926482425557	WITHOUT_CLASSIFICATION	7.351757444382441E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987871194362	WITHOUT_CLASSIFICATION	1.2128805638567213E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995699720308	WITHOUT_CLASSIFICATION	4.300279691588857E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999021242238	WITHOUT_CLASSIFICATION	9.78757760690312E-8	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999818480887781	WITHOUT_CLASSIFICATION	1.8151911221950044E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999968417586466	WITHOUT_CLASSIFICATION	3.1582413534994505E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999094467326	WITHOUT_CLASSIFICATION	9.05532674919125E-8	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9995940606286208	WITHOUT_CLASSIFICATION	4.059393713792318E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999866228591332	WITHOUT_CLASSIFICATION	1.337714086679648E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893501978532	WITHOUT_CLASSIFICATION	1.0649802146774992E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9977926440186599	WITHOUT_CLASSIFICATION	0.002207355981340211	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999565274792	WITHOUT_CLASSIFICATION	4.347252082391501E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999957609030938	WITHOUT_CLASSIFICATION	4.239096906179245E-6	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.999997236579546	WITHOUT_CLASSIFICATION	2.763420453929077E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9987276214589583	WITHOUT_CLASSIFICATION	0.0012723785410416898	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9963873690831786	WITHOUT_CLASSIFICATION	0.0036126309168214047	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999996461064449	WITHOUT_CLASSIFICATION	3.5389355515604717E-7	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998903068424	WITHOUT_CLASSIFICATION	1.0969315759364086E-7	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998682336002163	WITHOUT_CLASSIFICATION	1.317663997836227E-4	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999965379282668	WITHOUT_CLASSIFICATION	3.4620717332594328E-6	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997775159400327	WITHOUT_CLASSIFICATION	2.224840599673175E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9919929913350716	WITHOUT_CLASSIFICATION	0.008007008664928407	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999998653608232	WITHOUT_CLASSIFICATION	1.3463917686844048E-7	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999861428738371	WITHOUT_CLASSIFICATION	1.3857126162970793E-5	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999985121137409	WITHOUT_CLASSIFICATION	1.4878862590825158E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999115185696	WITHOUT_CLASSIFICATION	8.848143040446237E-8	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.995051510302039	WITHOUT_CLASSIFICATION	0.004948489697961025	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999897999111	WITHOUT_CLASSIFICATION	1.0200088898274498E-7	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999205295608	WITHOUT_CLASSIFICATION	7.947043922336795E-8	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.6593554640444158	WITHOUT_CLASSIFICATION	0.3406445359555842	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999826155723575	WITHOUT_CLASSIFICATION	1.738442764250364E-5	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.8927526679597815	WITHOUT_CLASSIFICATION	0.10724733204021858	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998610555296	WITHOUT_CLASSIFICATION	1.3894447042927234E-7	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9991687468918041	WITHOUT_CLASSIFICATION	8.312531081958285E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9983110537125808	WITHOUT_CLASSIFICATION	0.0016889462874192446	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999998697793743	WITHOUT_CLASSIFICATION	1.3022062570910268E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999274773642	WITHOUT_CLASSIFICATION	7.252263575988786E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998359070058	WITHOUT_CLASSIFICATION	1.6409299428101177E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999998939083166	WITHOUT_CLASSIFICATION	1.060916833959078E-6	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999963205206689	WITHOUT_CLASSIFICATION	3.67947933116263E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999999944124514	WITHOUT_CLASSIFICATION	5.5875486067275974E-8	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999949193117703	WITHOUT_CLASSIFICATION	5.08068822976513E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999988875766	WITHOUT_CLASSIFICATION	1.1124234324244053E-9	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999995311348	WITHOUT_CLASSIFICATION	4.688651898064496E-10	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995376244593613	WITHOUT_CLASSIFICATION	4.623755406385871E-4	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9996530171665644	WITHOUT_CLASSIFICATION	3.469828334355429E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999919438555409	WITHOUT_CLASSIFICATION	8.056144459090756E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999365979824246	WITHOUT_CLASSIFICATION	6.340201757533682E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999992593949402	WITHOUT_CLASSIFICATION	7.406050599652504E-7	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9979214169343507	WITHOUT_CLASSIFICATION	0.002078583065649313	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999874173482088	WITHOUT_CLASSIFICATION	1.2582651791109576E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.999789441804539	WITHOUT_CLASSIFICATION	2.1055819546114912E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9031658974590773	WITHOUT_CLASSIFICATION	0.09683410254092277	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999093232390667	WITHOUT_CLASSIFICATION	9.067676093337895E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7399900222184878	WITHOUT_CLASSIFICATION	0.26000997778151236	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999856184133	WITHOUT_CLASSIFICATION	1.4381586772546706E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.8847917636302447	WITHOUT_CLASSIFICATION	0.11520823636975529	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999345568348892	WITHOUT_CLASSIFICATION	6.544316511083347E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998205687996112	WITHOUT_CLASSIFICATION	1.7943120038874306E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9976877886840718	WITHOUT_CLASSIFICATION	0.0023122113159281766	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9988493575530046	WITHOUT_CLASSIFICATION	0.0011506424469952853	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995453052184625	WITHOUT_CLASSIFICATION	4.546947815374743E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998728233366	WITHOUT_CLASSIFICATION	1.2717666338620345E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999996984066188	WITHOUT_CLASSIFICATION	3.015933811096439E-7	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.99958735359889	WITHOUT_CLASSIFICATION	4.1264640111005844E-4	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999889473986535	WITHOUT_CLASSIFICATION	1.1052601346496209E-5	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999994084257493	WITHOUT_CLASSIFICATION	5.915742506912484E-7	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999477276639	WITHOUT_CLASSIFICATION	5.227233618467294E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999694193867104	WITHOUT_CLASSIFICATION	3.058061328964407E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9985418242403834	WITHOUT_CLASSIFICATION	0.0014581757596166033	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999915784208285	WITHOUT_CLASSIFICATION	8.421579171452516E-6	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9968306348935013	WITHOUT_CLASSIFICATION	0.0031693651064986076	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999997385233607	WITHOUT_CLASSIFICATION	2.614766393391625E-7	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998487589489993	WITHOUT_CLASSIFICATION	1.5124105100071492E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998359688771529	WITHOUT_CLASSIFICATION	1.6403112284712107E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9988722033157169	WITHOUT_CLASSIFICATION	0.0011277966842831808	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9994356892878534	WITHOUT_CLASSIFICATION	5.643107121464765E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9998682656015299	WITHOUT_CLASSIFICATION	1.3173439847018157E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999989536018005	WITHOUT_CLASSIFICATION	1.046398199536083E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999675627638848	WITHOUT_CLASSIFICATION	3.2437236115197493E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999404852216817	WITHOUT_CLASSIFICATION	5.951477831831175E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999853577569987	WITHOUT_CLASSIFICATION	1.4642243001169845E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999675627638848	WITHOUT_CLASSIFICATION	3.2437236115197493E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999991258578659	WITHOUT_CLASSIFICATION	8.741421340318028E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999979364907946	WITHOUT_CLASSIFICATION	2.063509205386553E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999966233657662	WITHOUT_CLASSIFICATION	3.3766342336417265E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.999972797223349	WITHOUT_CLASSIFICATION	2.7202776651050642E-5	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999227601267	WITHOUT_CLASSIFICATION	7.7239873289879E-8	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999989886657452	WITHOUT_CLASSIFICATION	1.0113342547296396E-6	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996779397934044	WITHOUT_CLASSIFICATION	3.2206020659562325E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999980316446107	WITHOUT_CLASSIFICATION	1.968355389278287E-6	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9996848257424442	WITHOUT_CLASSIFICATION	3.151742575557938E-4	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999488882567305	WITHOUT_CLASSIFICATION	5.111174326956114E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999934759002439	WITHOUT_CLASSIFICATION	6.524099756043914E-6	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999955524149539	WITHOUT_CLASSIFICATION	4.447585046129502E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9992746819208311	WITHOUT_CLASSIFICATION	7.253180791688482E-4	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999997246213	WITHOUT_CLASSIFICATION	2.7537875277932696E-10	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999914091123314	WITHOUT_CLASSIFICATION	8.590887668582122E-6	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9813431374227265	WITHOUT_CLASSIFICATION	0.018656862577273472	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9995899072084734	WITHOUT_CLASSIFICATION	4.1009279152662693E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9995899072084734	WITHOUT_CLASSIFICATION	4.1009279152662693E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999993895934567	WITHOUT_CLASSIFICATION	6.104065433182773E-7	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999839854465237	WITHOUT_CLASSIFICATION	1.6014553476361547E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999994533887744	WITHOUT_CLASSIFICATION	5.466112255454441E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9985410540260663	WITHOUT_CLASSIFICATION	0.0014589459739337712	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999996591108401	WITHOUT_CLASSIFICATION	3.4088915993269376E-7	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6069626366347066	DESIGN	0.39303736336529344	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999976950518791	WITHOUT_CLASSIFICATION	2.304948120844285E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9997098775694654	WITHOUT_CLASSIFICATION	2.901224305347113E-4	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9998600016860547	WITHOUT_CLASSIFICATION	1.3999831394536128E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9995719860983613	WITHOUT_CLASSIFICATION	4.2801390163862025E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9989096688286072	WITHOUT_CLASSIFICATION	0.001090331171392754	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9993517536864847	WITHOUT_CLASSIFICATION	6.482463135153474E-4	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9996155837051575	WITHOUT_CLASSIFICATION	3.844162948425541E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9912729371571989	WITHOUT_CLASSIFICATION	0.008727062842801015	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999964873780328	WITHOUT_CLASSIFICATION	3.512621967319479E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9994423503315171	WITHOUT_CLASSIFICATION	5.576496684829562E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999972879446924	WITHOUT_CLASSIFICATION	2.7120553075167905E-6	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999997133500403	WITHOUT_CLASSIFICATION	2.8664995969771925E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999501192093746	WITHOUT_CLASSIFICATION	4.988079062533538E-5	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999965572544607	WITHOUT_CLASSIFICATION	3.4427455392786846E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999984717023318	WITHOUT_CLASSIFICATION	1.5282976681842532E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999533716161881	WITHOUT_CLASSIFICATION	4.662838381182688E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999971294686196	WITHOUT_CLASSIFICATION	2.8705313804034285E-5	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999990081180483	WITHOUT_CLASSIFICATION	9.918819516761197E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999042826998	WITHOUT_CLASSIFICATION	9.571730012423453E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999890192502426	WITHOUT_CLASSIFICATION	1.0980749757438487E-5	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999210803253	WITHOUT_CLASSIFICATION	7.891967464378272E-8	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.7768207737030236	DESIGN	0.2231792262969765	WITHOUT_CLASSIFICATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999724953248273	WITHOUT_CLASSIFICATION	2.7504675172599764E-5	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999580064194821	WITHOUT_CLASSIFICATION	4.199358051788416E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999866475783534	WITHOUT_CLASSIFICATION	1.3352421646554804E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999757095531095	WITHOUT_CLASSIFICATION	2.4290446890429057E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9995727993798694	WITHOUT_CLASSIFICATION	4.272006201305994E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999798332853583	WITHOUT_CLASSIFICATION	2.0166714641671205E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997813268881538	WITHOUT_CLASSIFICATION	2.186731118462325E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999987355172368	WITHOUT_CLASSIFICATION	1.2644827630926666E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999976801773565	WITHOUT_CLASSIFICATION	2.3198226436038463E-6	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9991710019668124	WITHOUT_CLASSIFICATION	8.28998033187638E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999967539683	WITHOUT_CLASSIFICATION	3.2460315734575943E-9	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999997236352975	WITHOUT_CLASSIFICATION	2.76364702509095E-6	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999592714742738	WITHOUT_CLASSIFICATION	4.07285257262225E-5	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999983064525236	WITHOUT_CLASSIFICATION	1.6935474764763963E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999999447230713	WITHOUT_CLASSIFICATION	5.527692870198139E-7	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999962693125716	WITHOUT_CLASSIFICATION	3.730687428401573E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999996666680057	WITHOUT_CLASSIFICATION	3.333319944016461E-7	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999949366486344	WITHOUT_CLASSIFICATION	5.063351365638433E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995476670695	WITHOUT_CLASSIFICATION	4.523329304998462E-5	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999909611578	WITHOUT_CLASSIFICATION	9.038842132619487E-9	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996644501565	WITHOUT_CLASSIFICATION	3.3554984343308606E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.5629998674518141	WITHOUT_CLASSIFICATION	0.43700013254818587	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999998320092359	WITHOUT_CLASSIFICATION	1.6799076418121098E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999584507252	WITHOUT_CLASSIFICATION	4.154927492823987E-8	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999446850516734	WITHOUT_CLASSIFICATION	5.5314948326500145E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999958069640364	WITHOUT_CLASSIFICATION	4.1930359635938136E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999779978991243	WITHOUT_CLASSIFICATION	2.2002100875630037E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999958069640364	WITHOUT_CLASSIFICATION	4.1930359635938136E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998564964536222	WITHOUT_CLASSIFICATION	1.4350354637777794E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9992532944079968	WITHOUT_CLASSIFICATION	7.467055920031692E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9989999118228956	WITHOUT_CLASSIFICATION	0.0010000881771044295	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9995922317343406	WITHOUT_CLASSIFICATION	4.0776826565940726E-4	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999695641031104	WITHOUT_CLASSIFICATION	3.0435896889482437E-5	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999945189811561	WITHOUT_CLASSIFICATION	5.481018843874357E-6	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999994776085789	WITHOUT_CLASSIFICATION	5.223914211822948E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999992521539233	WITHOUT_CLASSIFICATION	7.478460767069568E-7	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999984741221517	WITHOUT_CLASSIFICATION	1.5258778483488153E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999525218456803	WITHOUT_CLASSIFICATION	4.747815431981069E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999769722112666	WITHOUT_CLASSIFICATION	2.302778873339088E-5	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9966176466219417	WITHOUT_CLASSIFICATION	0.003382353378058316	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999990546743105	WITHOUT_CLASSIFICATION	9.453256894737275E-7	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999333914945586	WITHOUT_CLASSIFICATION	6.660850544138717E-5	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9997498251728686	WITHOUT_CLASSIFICATION	2.501748271314278E-4	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9988334525092629	WITHOUT_CLASSIFICATION	0.0011665474907371655	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999914978524521	WITHOUT_CLASSIFICATION	8.502147547804555E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999914978524521	WITHOUT_CLASSIFICATION	8.502147547804555E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9992987207937447	WITHOUT_CLASSIFICATION	7.012792062552203E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999872608448	WITHOUT_CLASSIFICATION	1.2739155108260082E-8	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999997941192618	WITHOUT_CLASSIFICATION	2.0588073811230028E-7	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999984689900422	WITHOUT_CLASSIFICATION	1.5310099578419089E-6	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9953096307542013	WITHOUT_CLASSIFICATION	0.0046903692457986555	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999296726333875	WITHOUT_CLASSIFICATION	7.0327366612489E-5	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999225434945798	WITHOUT_CLASSIFICATION	7.745650542027544E-5	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999676589273605	WITHOUT_CLASSIFICATION	3.2341072639451096E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999965110657565	WITHOUT_CLASSIFICATION	3.4889342435471E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999918204991	WITHOUT_CLASSIFICATION	8.179500861526998E-9	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999948957743506	WITHOUT_CLASSIFICATION	5.1042256493578066E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999954896270106	WITHOUT_CLASSIFICATION	4.510372989398476E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999902700014	WITHOUT_CLASSIFICATION	9.729998604590321E-9	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999993014098153	WITHOUT_CLASSIFICATION	6.985901847199978E-7	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9980820890324613	WITHOUT_CLASSIFICATION	0.0019179109675386218	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999989659990274	WITHOUT_CLASSIFICATION	1.0340009726783073E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9993738735614036	WITHOUT_CLASSIFICATION	6.261264385964188E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9813285398778714	WITHOUT_CLASSIFICATION	0.018671460122128596	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999145456289488	WITHOUT_CLASSIFICATION	8.545437105119355E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997703464981	WITHOUT_CLASSIFICATION	2.2965350197851617E-7	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999995943751276	WITHOUT_CLASSIFICATION	4.056248724050202E-7	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999996930085228	WITHOUT_CLASSIFICATION	3.0699147723484156E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999511497885109	WITHOUT_CLASSIFICATION	4.8850211489151056E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9986333140388127	WITHOUT_CLASSIFICATION	0.0013666859611872358	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999983564342947	WITHOUT_CLASSIFICATION	1.64356570532911E-6	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.999948745599415	WITHOUT_CLASSIFICATION	5.1254400584958434E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999766184115466	WITHOUT_CLASSIFICATION	2.3381588453428985E-5	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9913099167024887	WITHOUT_CLASSIFICATION	0.008690083297511303	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999957118892466	WITHOUT_CLASSIFICATION	4.288110753393638E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999643930587712	WITHOUT_CLASSIFICATION	3.560694122892131E-5	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9981729748765091	WITHOUT_CLASSIFICATION	0.0018270251234909515	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999850392339775	WITHOUT_CLASSIFICATION	1.4960766022509742E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999180980132283	WITHOUT_CLASSIFICATION	8.190198677180012E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999827690672757	WITHOUT_CLASSIFICATION	1.723093272426564E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9952311139179076	WITHOUT_CLASSIFICATION	0.004768886082092304	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.999999819526434	WITHOUT_CLASSIFICATION	1.804735660307946E-7	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999985323905061	WITHOUT_CLASSIFICATION	1.4676094939058428E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9986141147008591	WITHOUT_CLASSIFICATION	0.0013858852991408374	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999152714980092	WITHOUT_CLASSIFICATION	8.472850199078044E-5	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999775579697	WITHOUT_CLASSIFICATION	2.2442030246351082E-8	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999776481548	WITHOUT_CLASSIFICATION	2.2351845161358308E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998777031498	WITHOUT_CLASSIFICATION	1.2229685020255876E-7	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998660056552653	WITHOUT_CLASSIFICATION	1.339943447346248E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9996404918156183	WITHOUT_CLASSIFICATION	3.5950818438169825E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999995213503	WITHOUT_CLASSIFICATION	4.78649658683429E-10	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999628781162055	WITHOUT_CLASSIFICATION	3.712188379448602E-5	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9730033373597273	DESIGN	0.02699666264027266	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999975887668292	WITHOUT_CLASSIFICATION	2.4112331708263536E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998556823482	WITHOUT_CLASSIFICATION	1.443176518157858E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9994524214197352	WITHOUT_CLASSIFICATION	5.475785802648156E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999473310905	WITHOUT_CLASSIFICATION	5.2668909362068985E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999331599775	WITHOUT_CLASSIFICATION	6.684002252756981E-8	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999365626914	WITHOUT_CLASSIFICATION	6.343730858727021E-8	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998990265387404	WITHOUT_CLASSIFICATION	1.0097346125958292E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9997858794061038	WITHOUT_CLASSIFICATION	2.1412059389630615E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948319910869	WITHOUT_CLASSIFICATION	5.168008913125275E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948319910869	WITHOUT_CLASSIFICATION	5.168008913125275E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999394096797	WITHOUT_CLASSIFICATION	6.059032023906814E-8	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999874581492659	WITHOUT_CLASSIFICATION	1.254185073400968E-5	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997812232576011	WITHOUT_CLASSIFICATION	2.1877674239893183E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999998994107512	WITHOUT_CLASSIFICATION	1.0058924888180662E-7	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999994131615	WITHOUT_CLASSIFICATION	5.868384524224791E-10	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999999970656255	WITHOUT_CLASSIFICATION	2.9343744916112275E-8	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999933403856651	WITHOUT_CLASSIFICATION	6.659614334891786E-6	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999999193969869	WITHOUT_CLASSIFICATION	8.06030130867951E-7	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9989302369904848	WITHOUT_CLASSIFICATION	0.0010697630095152994	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999993208841542	WITHOUT_CLASSIFICATION	6.791158457919758E-7	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999993477391116	WITHOUT_CLASSIFICATION	6.522608883014122E-7	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9970994903652813	WITHOUT_CLASSIFICATION	0.0029005096347185406	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999930061549566	WITHOUT_CLASSIFICATION	6.993845043473468E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999905222761833	WITHOUT_CLASSIFICATION	9.477723816592965E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.976952301512331	DESIGN	0.023047698487668942	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9993987700833644	WITHOUT_CLASSIFICATION	6.01229916635539E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998516589645	WITHOUT_CLASSIFICATION	1.4834103552151666E-7	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9997620650572049	WITHOUT_CLASSIFICATION	2.3793494279511962E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9983516646362823	WITHOUT_CLASSIFICATION	0.0016483353637176605	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9995634620334405	WITHOUT_CLASSIFICATION	4.36537966559429E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999998075807311	WITHOUT_CLASSIFICATION	1.9241926890216114E-6	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999999492190392	WITHOUT_CLASSIFICATION	5.078096079961619E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999936939111558	WITHOUT_CLASSIFICATION	6.306088844198147E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9992851057350699	WITHOUT_CLASSIFICATION	7.148942649301276E-4	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.994675858999299	WITHOUT_CLASSIFICATION	0.005324141000701081	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9850144818858896	DESIGN	0.014985518114110393	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999518412505541	WITHOUT_CLASSIFICATION	4.815874944583963E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992930910307087	WITHOUT_CLASSIFICATION	7.069089692912466E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999665585172184	WITHOUT_CLASSIFICATION	3.344148278168855E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999936939111558	WITHOUT_CLASSIFICATION	6.306088844198147E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9995649442523621	WITHOUT_CLASSIFICATION	4.350557476378827E-4	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9996292468749575	WITHOUT_CLASSIFICATION	3.707531250424833E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9998477832823365	WITHOUT_CLASSIFICATION	1.5221671766341545E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999424688900911	WITHOUT_CLASSIFICATION	5.753110990882127E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999993174421631	WITHOUT_CLASSIFICATION	6.825578369190771E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.6072694939099839	DESIGN	0.3927305060900161	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9973069447735832	WITHOUT_CLASSIFICATION	0.002693055226416851	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999981613649659	WITHOUT_CLASSIFICATION	1.838635034107106E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999951838928147	WITHOUT_CLASSIFICATION	4.8161071852871396E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999424688900911	WITHOUT_CLASSIFICATION	5.753110990882127E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999931215566581	WITHOUT_CLASSIFICATION	6.8784433419499395E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999597577016432	WITHOUT_CLASSIFICATION	4.024229835681397E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9973666007295319	WITHOUT_CLASSIFICATION	0.002633399270468223	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999617345195804	WITHOUT_CLASSIFICATION	3.826548041965522E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999880175997524	WITHOUT_CLASSIFICATION	1.198240024762055E-5	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999948957743506	WITHOUT_CLASSIFICATION	5.1042256493578066E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999968680972	WITHOUT_CLASSIFICATION	3.131902794983445E-8	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999956978847968	WITHOUT_CLASSIFICATION	4.302115203121037E-6	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999002539673518	WITHOUT_CLASSIFICATION	9.974603264810788E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9995381072861078	WITHOUT_CLASSIFICATION	4.618927138921631E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999183848631228	WITHOUT_CLASSIFICATION	8.161513687723177E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9992741790464351	WITHOUT_CLASSIFICATION	7.258209535648332E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9996605156935973	WITHOUT_CLASSIFICATION	3.394843064026493E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999984302076114	WITHOUT_CLASSIFICATION	1.5697923885646263E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999685977782506	WITHOUT_CLASSIFICATION	3.140222174939837E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997949802822165	WITHOUT_CLASSIFICATION	2.0501971778364984E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998855839201769	WITHOUT_CLASSIFICATION	1.1441607982308674E-4	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999857267927417	WITHOUT_CLASSIFICATION	1.4273207258265494E-5	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999837554837033	WITHOUT_CLASSIFICATION	1.6244516296607696E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9940129652309052	WITHOUT_CLASSIFICATION	0.0059870347690948395	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999972782091109	WITHOUT_CLASSIFICATION	2.7217908890668824E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999840195712413	WITHOUT_CLASSIFICATION	1.5980428758708665E-5	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999993767299225	WITHOUT_CLASSIFICATION	6.232700774916968E-7	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999982918311949	WITHOUT_CLASSIFICATION	1.7081688050811837E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999924962146122	WITHOUT_CLASSIFICATION	7.503785387750058E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9991720237550972	WITHOUT_CLASSIFICATION	8.279762449027663E-4	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999959709887299	WITHOUT_CLASSIFICATION	4.029011270064449E-6	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998911506311	WITHOUT_CLASSIFICATION	1.0884936883831377E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999927224707531	WITHOUT_CLASSIFICATION	7.2775292468849595E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999919524809208	WITHOUT_CLASSIFICATION	8.047519079307342E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999956310752485	WITHOUT_CLASSIFICATION	4.368924751589436E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.997092566306806	WITHOUT_CLASSIFICATION	0.002907433693193992	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999981356153458	WITHOUT_CLASSIFICATION	1.8643846541579214E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971477459234	WITHOUT_CLASSIFICATION	2.852254076622207E-6	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981442380259159	WITHOUT_CLASSIFICATION	0.0018557619740840934	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.7615692941422356	DESIGN	0.23843070585776444	WITHOUT_CLASSIFICATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999245738788262	WITHOUT_CLASSIFICATION	7.542612117389018E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.999997179906055	WITHOUT_CLASSIFICATION	2.820093945031336E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996859446713	WITHOUT_CLASSIFICATION	3.1405532880425613E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996859446713	WITHOUT_CLASSIFICATION	3.1405532880425613E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999978917240545	WITHOUT_CLASSIFICATION	2.1082759454951803E-5	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9991879433174338	WITHOUT_CLASSIFICATION	8.120566825662521E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999994452029654	WITHOUT_CLASSIFICATION	5.547970345915842E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999991215081057	WITHOUT_CLASSIFICATION	8.784918943688495E-7	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999935587752857	WITHOUT_CLASSIFICATION	6.44122471428664E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.8006405449051053	WITHOUT_CLASSIFICATION	0.1993594550948947	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.998229189539591	WITHOUT_CLASSIFICATION	0.0017708104604088996	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999933447551014	WITHOUT_CLASSIFICATION	6.655244898608413E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999996200415552	WITHOUT_CLASSIFICATION	3.799584447501053E-7	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999998135913992	WITHOUT_CLASSIFICATION	1.8640860077726175E-7	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999991452202	WITHOUT_CLASSIFICATION	8.547798214656301E-10	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999993259865133	WITHOUT_CLASSIFICATION	6.740134866388229E-7	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999992643254272	WITHOUT_CLASSIFICATION	7.356745729476043E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996859446713	WITHOUT_CLASSIFICATION	3.1405532880425613E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999742114713305	WITHOUT_CLASSIFICATION	2.5788528669509274E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9992313126997191	WITHOUT_CLASSIFICATION	7.686873002808477E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9990757403641847	WITHOUT_CLASSIFICATION	9.242596358152137E-4	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.999983280219029	WITHOUT_CLASSIFICATION	1.67197809709636E-5	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999828779868556	WITHOUT_CLASSIFICATION	1.7122013144362707E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999687935544671	WITHOUT_CLASSIFICATION	3.120644553297789E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998505149823416	WITHOUT_CLASSIFICATION	1.4948501765833666E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999967992731928	WITHOUT_CLASSIFICATION	3.2007268072984276E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999848494678439	WITHOUT_CLASSIFICATION	1.515053215609428E-4	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998638345341496	WITHOUT_CLASSIFICATION	1.3616546585038574E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999622517839893	WITHOUT_CLASSIFICATION	3.774821601058851E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971477459234	WITHOUT_CLASSIFICATION	2.852254076622207E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996859446713	WITHOUT_CLASSIFICATION	3.1405532880425613E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999971187377	WITHOUT_CLASSIFICATION	2.881262405184891E-9	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999993400832767	WITHOUT_CLASSIFICATION	6.599167232072283E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999781797200379	WITHOUT_CLASSIFICATION	2.182027996217595E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999867473785806	WITHOUT_CLASSIFICATION	1.3252621419330825E-5	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.8187840045752085	WITHOUT_CLASSIFICATION	0.18121599542479155	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999996825025878	WITHOUT_CLASSIFICATION	3.174974122483472E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999511871568142	WITHOUT_CLASSIFICATION	4.881284318579674E-5	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999940504972	WITHOUT_CLASSIFICATION	5.94950281535904E-9	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999996585804001	WITHOUT_CLASSIFICATION	3.41419599934601E-7	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999952603765645	WITHOUT_CLASSIFICATION	4.739623435521296E-6	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999997913440773	WITHOUT_CLASSIFICATION	2.086559226980483E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996498054412545	WITHOUT_CLASSIFICATION	3.5019455874553624E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999878727446222	WITHOUT_CLASSIFICATION	1.2127255377903641E-5	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999878318644307	WITHOUT_CLASSIFICATION	1.216813556916299E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998564964536222	WITHOUT_CLASSIFICATION	1.4350354637777794E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999993395198828	WITHOUT_CLASSIFICATION	6.604801170741478E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999751817542	WITHOUT_CLASSIFICATION	2.4818245801502964E-8	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999984176333381	WITHOUT_CLASSIFICATION	1.582366662037505E-6	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999986720156328	WITHOUT_CLASSIFICATION	1.327984367245741E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999996991784587	WITHOUT_CLASSIFICATION	3.0082154131450396E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9995040108089698	WITHOUT_CLASSIFICATION	4.959891910302779E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9995040108089698	WITHOUT_CLASSIFICATION	4.959891910302779E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9953978228208896	WITHOUT_CLASSIFICATION	0.0046021771791104485	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9998341021345079	WITHOUT_CLASSIFICATION	1.6589786549216614E-4	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999465484608	WITHOUT_CLASSIFICATION	5.3451539320103E-8	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998709970551215	WITHOUT_CLASSIFICATION	1.2900294487849486E-4	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999801824026334	WITHOUT_CLASSIFICATION	1.981759736647821E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999949851239751	WITHOUT_CLASSIFICATION	5.014876024841569E-6	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9993135479104508	WITHOUT_CLASSIFICATION	6.864520895491536E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999933661191	WITHOUT_CLASSIFICATION	6.6338809167542175E-9	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999933661191	WITHOUT_CLASSIFICATION	6.6338809167542175E-9	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999969082436728	WITHOUT_CLASSIFICATION	3.091756327214718E-6	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999958837832014	WITHOUT_CLASSIFICATION	4.116216798640832E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999847587344243	WITHOUT_CLASSIFICATION	1.5241265575729058E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999965445182128	WITHOUT_CLASSIFICATION	3.4554817870845164E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999965445182128	WITHOUT_CLASSIFICATION	3.4554817870845164E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999965445182128	WITHOUT_CLASSIFICATION	3.4554817870845164E-6	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999590300308634	WITHOUT_CLASSIFICATION	4.0969969136665254E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9998478946083045	WITHOUT_CLASSIFICATION	1.5210539169550295E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999583433236	WITHOUT_CLASSIFICATION	4.165667635554502E-8	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9962125557894295	WITHOUT_CLASSIFICATION	0.003787444210570493	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998763203577634	WITHOUT_CLASSIFICATION	1.236796422366326E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996859446713	WITHOUT_CLASSIFICATION	3.1405532880425613E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996859446713	WITHOUT_CLASSIFICATION	3.1405532880425613E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999793395367877	WITHOUT_CLASSIFICATION	2.066046321225916E-5	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9995368424026706	WITHOUT_CLASSIFICATION	4.631575973293856E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9998778928869234	WITHOUT_CLASSIFICATION	1.2210711307651746E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999895089071865	WITHOUT_CLASSIFICATION	1.049109281356256E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999231002376311	WITHOUT_CLASSIFICATION	7.689976236894497E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999977496100009	WITHOUT_CLASSIFICATION	2.2503899992223943E-6	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9994939682500485	WITHOUT_CLASSIFICATION	5.060317499514188E-4	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9997579641544787	WITHOUT_CLASSIFICATION	2.420358455213489E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999995374182947	WITHOUT_CLASSIFICATION	4.625817052979112E-6	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999857873985	WITHOUT_CLASSIFICATION	1.421260156203599E-8	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999924009144232	WITHOUT_CLASSIFICATION	7.599085576764162E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999437845356194	WITHOUT_CLASSIFICATION	5.6215464380685466E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999437845356194	WITHOUT_CLASSIFICATION	5.6215464380685466E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999711033689853	WITHOUT_CLASSIFICATION	2.8896631014718633E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999711033689853	WITHOUT_CLASSIFICATION	2.8896631014718633E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999755661466878	WITHOUT_CLASSIFICATION	2.443385331211665E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999951793442311	WITHOUT_CLASSIFICATION	4.820655769004196E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999951793442311	WITHOUT_CLASSIFICATION	4.820655769004196E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999987829165098	WITHOUT_CLASSIFICATION	1.2170834902091275E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999841386866171	WITHOUT_CLASSIFICATION	1.5861313383003178E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999197050885	WITHOUT_CLASSIFICATION	8.029491153400859E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9995040108089698	WITHOUT_CLASSIFICATION	4.959891910302779E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999982332557233	WITHOUT_CLASSIFICATION	1.7667442767614515E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999841386866171	WITHOUT_CLASSIFICATION	1.5861313383003178E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9847777171119955	WITHOUT_CLASSIFICATION	0.015222282888004509	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.99990318110331	WITHOUT_CLASSIFICATION	9.68188966900534E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999992416443966	WITHOUT_CLASSIFICATION	7.583556033802747E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999983722071442	WITHOUT_CLASSIFICATION	1.627792855741327E-6	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999988094927342	WITHOUT_CLASSIFICATION	1.190507265729824E-6	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9997414859689764	WITHOUT_CLASSIFICATION	2.585140310235285E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998624803355	WITHOUT_CLASSIFICATION	1.3751966462526583E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.8885684773765115	WITHOUT_CLASSIFICATION	0.11143152262348846	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999999560207282	WITHOUT_CLASSIFICATION	4.3979271810545413E-7	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9310228338467048	WITHOUT_CLASSIFICATION	0.0689771661532952	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999841802776	WITHOUT_CLASSIFICATION	1.5819722497633242E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999468088897547	WITHOUT_CLASSIFICATION	5.31911102451649E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997086649229	WITHOUT_CLASSIFICATION	2.9133507716153717E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999762504483796	WITHOUT_CLASSIFICATION	2.374955162038722E-5	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9996560911264811	WITHOUT_CLASSIFICATION	3.4390887351893755E-4	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9998864049593631	WITHOUT_CLASSIFICATION	1.135950406369451E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999733935396	WITHOUT_CLASSIFICATION	2.660646037021683E-8	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998932054161238	WITHOUT_CLASSIFICATION	1.0679458387616021E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998932054161238	WITHOUT_CLASSIFICATION	1.0679458387616021E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999748135730328	WITHOUT_CLASSIFICATION	2.5186426967242258E-5	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999783045294	WITHOUT_CLASSIFICATION	2.1695470578711654E-8	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999931315847469	WITHOUT_CLASSIFICATION	6.868415253150109E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998236471268269	WITHOUT_CLASSIFICATION	1.7635287317309582E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999991449351088	WITHOUT_CLASSIFICATION	8.550648912731826E-7	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999995730351212	WITHOUT_CLASSIFICATION	4.269648787927199E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.999707314649192	WITHOUT_CLASSIFICATION	2.926853508079588E-4	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999999025466033	WITHOUT_CLASSIFICATION	9.74533967600817E-8	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999783706590468	WITHOUT_CLASSIFICATION	2.1629340953178284E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999089965138303	WITHOUT_CLASSIFICATION	9.10034861698008E-5	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999346121866687	WITHOUT_CLASSIFICATION	6.53878133312336E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996498054412545	WITHOUT_CLASSIFICATION	3.5019455874553624E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999913012241785	WITHOUT_CLASSIFICATION	8.698775821437287E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999994258822646	WITHOUT_CLASSIFICATION	5.74117735281102E-7	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999751087317046	WITHOUT_CLASSIFICATION	2.4891268295391227E-5	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999996249659052	WITHOUT_CLASSIFICATION	3.750340947581153E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999909884819	WITHOUT_CLASSIFICATION	9.011518101172837E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999909884819	WITHOUT_CLASSIFICATION	9.011518101172837E-8	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996523656383102	WITHOUT_CLASSIFICATION	3.476343616898194E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9993801393222003	WITHOUT_CLASSIFICATION	6.198606777997902E-4	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999990860204029	WITHOUT_CLASSIFICATION	9.139795971365681E-7	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999992971869669	WITHOUT_CLASSIFICATION	7.02813032988492E-7	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999981106299634	WITHOUT_CLASSIFICATION	1.8893700366266288E-6	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999959067212817	WITHOUT_CLASSIFICATION	4.0932787182896196E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9998405760952322	WITHOUT_CLASSIFICATION	1.5942390476770122E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999511646518929	WITHOUT_CLASSIFICATION	4.8835348107087754E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999867220979473	WITHOUT_CLASSIFICATION	1.327790205272249E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999992748814	WITHOUT_CLASSIFICATION	7.251185027008238E-10	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.996840308474843	WITHOUT_CLASSIFICATION	0.0031596915251569583	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999511646518929	WITHOUT_CLASSIFICATION	4.8835348107087754E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.7547429417833751	WITHOUT_CLASSIFICATION	0.24525705821662505	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9017818461965698	WITHOUT_CLASSIFICATION	0.09821815380343026	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999879215167228	WITHOUT_CLASSIFICATION	1.2078483277210292E-4	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999995724547123	WITHOUT_CLASSIFICATION	4.2754528775255626E-7	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999983022747608	WITHOUT_CLASSIFICATION	1.6977252391398397E-6	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999765572492	WITHOUT_CLASSIFICATION	2.34427507828874E-7	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999997598894438	WITHOUT_CLASSIFICATION	2.401105561938413E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999194980164	WITHOUT_CLASSIFICATION	8.050198363426353E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.995637480702175	WITHOUT_CLASSIFICATION	0.0043625192978250975	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9979661145962561	WITHOUT_CLASSIFICATION	0.0020338854037439107	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999177830063775	WITHOUT_CLASSIFICATION	8.221699362246102E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999999172082977	WITHOUT_CLASSIFICATION	8.279170223019156E-8	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999911787364534	WITHOUT_CLASSIFICATION	8.821263546628444E-6	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999964757070238	WITHOUT_CLASSIFICATION	3.524292976249914E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999914717759482	WITHOUT_CLASSIFICATION	8.52822405178996E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999991191371961	WITHOUT_CLASSIFICATION	8.808628038827672E-7	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999988014876344	WITHOUT_CLASSIFICATION	1.1985123655901966E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9970359225526906	WITHOUT_CLASSIFICATION	0.0029640774473094563	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996492021222145	WITHOUT_CLASSIFICATION	3.507978777854367E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999961093210838	WITHOUT_CLASSIFICATION	3.890678916195696E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999984676321373	WITHOUT_CLASSIFICATION	1.532367862696009E-5	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9829024989147144	DESIGN	0.017097501085285603	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998272215285032	WITHOUT_CLASSIFICATION	1.727784714967478E-4	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.999996126074151	WITHOUT_CLASSIFICATION	3.8739258489818866E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999617953605	WITHOUT_CLASSIFICATION	3.820463936220539E-8	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999825617597404	WITHOUT_CLASSIFICATION	1.7438240259646757E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.99999963020132	WITHOUT_CLASSIFICATION	3.697986799273706E-7	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999479565999	WITHOUT_CLASSIFICATION	5.20434001136975E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999994469044313	WITHOUT_CLASSIFICATION	5.530955686065708E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.957522781909396	WITHOUT_CLASSIFICATION	0.04247721809060408	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999886479485	WITHOUT_CLASSIFICATION	1.1352051392672688E-8	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999955131975521	WITHOUT_CLASSIFICATION	4.486802447884292E-6	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999919383189965	WITHOUT_CLASSIFICATION	8.061681003554483E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9997095829386188	WITHOUT_CLASSIFICATION	2.9041706138125463E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998821740686541	WITHOUT_CLASSIFICATION	1.1782593134588816E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999987401689325	WITHOUT_CLASSIFICATION	1.2598310675205364E-6	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9997781846898652	WITHOUT_CLASSIFICATION	2.2181531013482458E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999131085544	WITHOUT_CLASSIFICATION	8.689144562925732E-8	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998555744809	WITHOUT_CLASSIFICATION	1.4442551910241933E-7	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999952687841824	WITHOUT_CLASSIFICATION	4.731215817657094E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999111749679	WITHOUT_CLASSIFICATION	8.88250321489909E-8	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999972220276748	WITHOUT_CLASSIFICATION	2.7779723251303806E-6	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998865158185486	WITHOUT_CLASSIFICATION	1.1348418145151255E-4	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999543439712	WITHOUT_CLASSIFICATION	4.5656028864378876E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999960210992088	WITHOUT_CLASSIFICATION	3.978900791212179E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9985609075752544	WITHOUT_CLASSIFICATION	0.001439092424745584	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999996325930997	WITHOUT_CLASSIFICATION	3.6740690036426044E-7	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999993141223781	WITHOUT_CLASSIFICATION	6.858776219604819E-7	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999996134487175	WITHOUT_CLASSIFICATION	3.86551282545012E-7	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999798920317793	WITHOUT_CLASSIFICATION	2.010796822063375E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951472598122	WITHOUT_CLASSIFICATION	4.852740187830058E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999463664898287	WITHOUT_CLASSIFICATION	5.363351017125005E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999412209545648	WITHOUT_CLASSIFICATION	5.877904543509429E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999998195350078	WITHOUT_CLASSIFICATION	1.8046499217576293E-7	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999423624706	WITHOUT_CLASSIFICATION	5.7637529347885823E-8	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999953673791259	WITHOUT_CLASSIFICATION	4.632620874195363E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999040568319956	WITHOUT_CLASSIFICATION	9.594316800442587E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997765740525	WITHOUT_CLASSIFICATION	2.2342594748872853E-7	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999932260752196	WITHOUT_CLASSIFICATION	6.77392478051116E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999998349946225	WITHOUT_CLASSIFICATION	1.6500537754377263E-7	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998727641839583	WITHOUT_CLASSIFICATION	1.2723581604160613E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999904233671134	WITHOUT_CLASSIFICATION	9.576632886625386E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999772467083811	WITHOUT_CLASSIFICATION	2.2753291618901272E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8026703157589788	WITHOUT_CLASSIFICATION	0.19732968424102112	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9980507540077153	WITHOUT_CLASSIFICATION	0.0019492459922847189	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999632453117505	WITHOUT_CLASSIFICATION	3.6754688249495224E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951472598122	WITHOUT_CLASSIFICATION	4.852740187830058E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999948228403227	WITHOUT_CLASSIFICATION	5.177159677339474E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999975080354	WITHOUT_CLASSIFICATION	2.491964655256024E-9	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999991534274326	WITHOUT_CLASSIFICATION	8.465725674078756E-6	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999993437312567	WITHOUT_CLASSIFICATION	6.562687433391855E-7	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999994300535288	WITHOUT_CLASSIFICATION	5.699464713217905E-7	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999972390573251	WITHOUT_CLASSIFICATION	2.7609426749578783E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999867220979473	WITHOUT_CLASSIFICATION	1.327790205272249E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999344933906312	WITHOUT_CLASSIFICATION	6.55066093687991E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998821740686541	WITHOUT_CLASSIFICATION	1.1782593134588816E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9715177698363963	WITHOUT_CLASSIFICATION	0.028482230163603676	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999996431391405	WITHOUT_CLASSIFICATION	3.5686085957039164E-7	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999992273987277	WITHOUT_CLASSIFICATION	7.7260127225577E-7	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999972139197266	WITHOUT_CLASSIFICATION	2.786080273464921E-6	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9997354258549873	WITHOUT_CLASSIFICATION	2.645741450125888E-4	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9878446374393229	WITHOUT_CLASSIFICATION	0.012155362560677169	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9612315230273508	WITHOUT_CLASSIFICATION	0.038768476972649187	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9979825487827351	WITHOUT_CLASSIFICATION	0.002017451217264954	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9997436661398015	WITHOUT_CLASSIFICATION	2.563338601984812E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999285006376794	WITHOUT_CLASSIFICATION	7.149936232065696E-5	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999842537655314	WITHOUT_CLASSIFICATION	1.574623446864554E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9990304859808948	WITHOUT_CLASSIFICATION	9.695140191052159E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9942538618782374	WITHOUT_CLASSIFICATION	0.005746138121762658	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9942538618782374	WITHOUT_CLASSIFICATION	0.005746138121762658	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9995827586829704	WITHOUT_CLASSIFICATION	4.1724131702965085E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999957427334997	WITHOUT_CLASSIFICATION	4.257266500322703E-6	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999997824706161	WITHOUT_CLASSIFICATION	2.1752938389893066E-6	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.999987769375629	WITHOUT_CLASSIFICATION	1.2230624370989755E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999801356447521	WITHOUT_CLASSIFICATION	1.9864355247925262E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999393319555461	WITHOUT_CLASSIFICATION	6.066804445400517E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999995600427954	WITHOUT_CLASSIFICATION	4.3995720459863524E-7	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999896458853542	WITHOUT_CLASSIFICATION	1.0354114645810748E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999969462336	WITHOUT_CLASSIFICATION	3.053766393217986E-8	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999309163519486	WITHOUT_CLASSIFICATION	6.908364805131509E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999984178891275	WITHOUT_CLASSIFICATION	1.5821108725021441E-6	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999535539187	WITHOUT_CLASSIFICATION	4.6446081304138754E-8	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999998519160163	WITHOUT_CLASSIFICATION	1.4808398382544452E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999950198	WITHOUT_CLASSIFICATION	4.980225956854805E-12	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9994347378350791	WITHOUT_CLASSIFICATION	5.652621649210095E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999943474593764	WITHOUT_CLASSIFICATION	5.652540623587643E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9805883474463866	WITHOUT_CLASSIFICATION	0.01941165255361347	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999997395852	WITHOUT_CLASSIFICATION	2.604148135151172E-10	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999648079058	WITHOUT_CLASSIFICATION	3.519209426546226E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998837491000859	WITHOUT_CLASSIFICATION	1.162508999139942E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999995106639453	WITHOUT_CLASSIFICATION	4.893360547791232E-7	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999364227990417	WITHOUT_CLASSIFICATION	6.357720095838095E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999986012619002	WITHOUT_CLASSIFICATION	1.3987380997080682E-6	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.998390172084952	WITHOUT_CLASSIFICATION	0.0016098279150480105	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999992287202447	WITHOUT_CLASSIFICATION	7.712797553208501E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939984386089	WITHOUT_CLASSIFICATION	6.001561391050264E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999994275418718	WITHOUT_CLASSIFICATION	5.72458128216027E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999685312060839	WITHOUT_CLASSIFICATION	3.1468793916160506E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997690004991234	WITHOUT_CLASSIFICATION	2.3099950087652403E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999821847022173	WITHOUT_CLASSIFICATION	1.781529778269022E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8956575745028245	WITHOUT_CLASSIFICATION	0.10434242549717554	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.8360132690286365	WITHOUT_CLASSIFICATION	0.16398673097136357	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999953769059601	WITHOUT_CLASSIFICATION	4.623094039911296E-6	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9996736765648205	WITHOUT_CLASSIFICATION	3.263234351793675E-4	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999931422445991	WITHOUT_CLASSIFICATION	6.857755400861682E-6	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999995795779273	WITHOUT_CLASSIFICATION	4.2042207267829536E-7	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999978912201583	WITHOUT_CLASSIFICATION	2.1087798416998267E-6	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999856172106824	WITHOUT_CLASSIFICATION	1.4382789317677746E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999978522255043	WITHOUT_CLASSIFICATION	2.1477744956427696E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997576917583	WITHOUT_CLASSIFICATION	2.423082416414414E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999562498550483	WITHOUT_CLASSIFICATION	4.3750144951688517E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999972622038	WITHOUT_CLASSIFICATION	2.7377962581844764E-9	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999838439286464	WITHOUT_CLASSIFICATION	1.6156071353717062E-5	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999999647305309	WITHOUT_CLASSIFICATION	3.526946916228511E-8	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999755640575	WITHOUT_CLASSIFICATION	2.4435942537867698E-8	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999742119845499	WITHOUT_CLASSIFICATION	2.5788015449974604E-5	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9959551590353592	WITHOUT_CLASSIFICATION	0.004044840964640734	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999985337586111	WITHOUT_CLASSIFICATION	1.4662413889212185E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999921362434	WITHOUT_CLASSIFICATION	7.863756673119456E-9	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999798414463	WITHOUT_CLASSIFICATION	2.0158553753934453E-8	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998858299850105	WITHOUT_CLASSIFICATION	1.1417001498952427E-4	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999958933038642	WITHOUT_CLASSIFICATION	4.106696135882941E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999962314889783	WITHOUT_CLASSIFICATION	3.768511021714985E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999985119848677	WITHOUT_CLASSIFICATION	1.4880151323219664E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999997412565972	WITHOUT_CLASSIFICATION	2.587434028107649E-6	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9948442171252574	WITHOUT_CLASSIFICATION	0.005155782874742645	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998195001224	WITHOUT_CLASSIFICATION	1.804998775221815E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999445767166557	WITHOUT_CLASSIFICATION	5.54232833442221E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999972355772176	WITHOUT_CLASSIFICATION	2.764422782314466E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999947676060198	WITHOUT_CLASSIFICATION	5.232393980209159E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999994635275439	WITHOUT_CLASSIFICATION	5.3647245611012316E-6	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999995398283009	WITHOUT_CLASSIFICATION	4.601716990190793E-7	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9963205465739874	WITHOUT_CLASSIFICATION	0.003679453426012578	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999661208743307	WITHOUT_CLASSIFICATION	3.3879125669452016E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9998129676049127	WITHOUT_CLASSIFICATION	1.8703239508727893E-4	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999851116230412	WITHOUT_CLASSIFICATION	1.4888376958909825E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999465954249	WITHOUT_CLASSIFICATION	5.3404575095068855E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999230768458	WITHOUT_CLASSIFICATION	7.69231541835066E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999793477761	WITHOUT_CLASSIFICATION	2.0652223905155554E-8	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999853734604	WITHOUT_CLASSIFICATION	1.4626539710819737E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999793477761	WITHOUT_CLASSIFICATION	2.0652223905155554E-8	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.999999861238233	WITHOUT_CLASSIFICATION	1.3876176693972668E-7	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999870619691282	WITHOUT_CLASSIFICATION	1.2938030871722161E-5	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999877894431162	WITHOUT_CLASSIFICATION	1.2210556883722462E-5	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999460673812	WITHOUT_CLASSIFICATION	5.393261877378404E-8	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999984477765735	WITHOUT_CLASSIFICATION	1.5522234263802075E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999945429230066	WITHOUT_CLASSIFICATION	5.457076993395976E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999983187714222	WITHOUT_CLASSIFICATION	1.6812285777438526E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9988691903145019	WITHOUT_CLASSIFICATION	0.0011308096854980257	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999693984254676	WITHOUT_CLASSIFICATION	3.060157453239009E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999983661518709	WITHOUT_CLASSIFICATION	1.6338481291304106E-6	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999636359254	WITHOUT_CLASSIFICATION	3.63640746054106E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.999958663884896	WITHOUT_CLASSIFICATION	4.1336115104052285E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998521125072	WITHOUT_CLASSIFICATION	1.4788749268523535E-7	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999984695026	DESIGN	1.5304973477064908E-9	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999996671495565	WITHOUT_CLASSIFICATION	3.328504436063232E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999985333816	WITHOUT_CLASSIFICATION	1.4666183720555635E-9	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999985129991981	WITHOUT_CLASSIFICATION	1.4870008019562688E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999678794624933	WITHOUT_CLASSIFICATION	3.212053750662651E-5	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999048789857	WITHOUT_CLASSIFICATION	9.512101430517287E-8	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9978928990503683	WITHOUT_CLASSIFICATION	0.002107100949631749	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999708003991604	WITHOUT_CLASSIFICATION	2.9199600839625936E-5	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.99999151224979	WITHOUT_CLASSIFICATION	8.487750209985563E-6	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9863436188008805	WITHOUT_CLASSIFICATION	0.013656381199119496	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999954416084785	WITHOUT_CLASSIFICATION	4.558391521388624E-6	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999999319004981	WITHOUT_CLASSIFICATION	6.809950196108238E-8	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996495853856726	WITHOUT_CLASSIFICATION	3.5041461432740916E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9942596764413453	WITHOUT_CLASSIFICATION	0.005740323558654697	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999370106976732	WITHOUT_CLASSIFICATION	6.298930232678721E-5	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999986343419907	WITHOUT_CLASSIFICATION	1.3656580093750407E-6	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999966012457991	WITHOUT_CLASSIFICATION	3.3987542008031205E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999770021581196	WITHOUT_CLASSIFICATION	2.2997841880458908E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9993647236214689	WITHOUT_CLASSIFICATION	6.352763785311507E-4	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9982831858219146	WITHOUT_CLASSIFICATION	0.0017168141780854157	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999910559394795	WITHOUT_CLASSIFICATION	8.944060520629931E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999835145896335	WITHOUT_CLASSIFICATION	1.648541036645534E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999341148675546	WITHOUT_CLASSIFICATION	6.588513244541593E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9998451054161737	WITHOUT_CLASSIFICATION	1.5489458382641672E-4	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994013093524	WITHOUT_CLASSIFICATION	5.986906475383239E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9993807510835722	WITHOUT_CLASSIFICATION	6.192489164278612E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999984198296265	WITHOUT_CLASSIFICATION	1.5801703736139955E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999905622401184	WITHOUT_CLASSIFICATION	9.437759881566168E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999946266967856	WITHOUT_CLASSIFICATION	5.373303214348261E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9854644721567505	WITHOUT_CLASSIFICATION	0.014535527843249648	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996495853856726	WITHOUT_CLASSIFICATION	3.5041461432740916E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9992371760621137	WITHOUT_CLASSIFICATION	7.62823937886365E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999987409542879	WITHOUT_CLASSIFICATION	1.259045712033913E-6	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9989681272795908	WITHOUT_CLASSIFICATION	0.001031872720409117	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999663056776	WITHOUT_CLASSIFICATION	3.369432239338705E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999992694838357	WITHOUT_CLASSIFICATION	7.305161642699929E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.999987812665017	WITHOUT_CLASSIFICATION	1.2187334982931243E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9996018950332176	WITHOUT_CLASSIFICATION	3.981049667823625E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.998271005112074	DESIGN	0.0017289948879259454	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999999123005963	WITHOUT_CLASSIFICATION	8.769940368110139E-7	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9943973766311656	WITHOUT_CLASSIFICATION	0.005602623368834441	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999761360946191	WITHOUT_CLASSIFICATION	2.386390538088044E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999998516353362	WITHOUT_CLASSIFICATION	1.4836466373721387E-7	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999913725519797	WITHOUT_CLASSIFICATION	8.627448020282573E-6	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996498688260086	WITHOUT_CLASSIFICATION	3.501311739914461E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999995505793774	WITHOUT_CLASSIFICATION	4.494206225481891E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999906917130541	WITHOUT_CLASSIFICATION	9.308286945982286E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.999999948082083	WITHOUT_CLASSIFICATION	5.191791685903552E-8	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999598273017	WITHOUT_CLASSIFICATION	4.017269825783564E-8	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9998522282082046	WITHOUT_CLASSIFICATION	1.477717917953746E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9992371760621137	WITHOUT_CLASSIFICATION	7.62823937886365E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999980678260975	WITHOUT_CLASSIFICATION	1.932173902584E-6	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9997992109227964	WITHOUT_CLASSIFICATION	2.0078907720364492E-4	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999991371856526	WITHOUT_CLASSIFICATION	8.628143474660432E-7	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9751469827440823	WITHOUT_CLASSIFICATION	0.024853017255917688	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999745910316094	WITHOUT_CLASSIFICATION	2.5408968390719235E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962650711598858	WITHOUT_CLASSIFICATION	0.003734928840114221	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962650711598858	WITHOUT_CLASSIFICATION	0.003734928840114221	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998659095564	WITHOUT_CLASSIFICATION	1.3409044361301108E-7	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962650711598858	WITHOUT_CLASSIFICATION	0.003734928840114221	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962650711598858	WITHOUT_CLASSIFICATION	0.003734928840114221	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.7487197104804338	WITHOUT_CLASSIFICATION	0.2512802895195663	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999988968732244	WITHOUT_CLASSIFICATION	1.1031267756861766E-6	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998583739323798	WITHOUT_CLASSIFICATION	1.4162606762025686E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999914340461113	WITHOUT_CLASSIFICATION	8.565953888612111E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991062056741339	WITHOUT_CLASSIFICATION	8.937943258660818E-4	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9822527819541521	WITHOUT_CLASSIFICATION	0.017747218045847935	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9989131794919021	WITHOUT_CLASSIFICATION	0.0010868205080979383	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999079018415	WITHOUT_CLASSIFICATION	9.209815861377161E-8	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9994628434171721	WITHOUT_CLASSIFICATION	5.371565828279036E-4	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997437571109952	WITHOUT_CLASSIFICATION	2.5624288900487634E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9984239219661131	WITHOUT_CLASSIFICATION	0.0015760780338868617	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999610233606783	WITHOUT_CLASSIFICATION	3.8976639321688873E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999039972090266	WITHOUT_CLASSIFICATION	9.600279097344323E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999835271372729	WITHOUT_CLASSIFICATION	1.6472862727013348E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999841019806782	WITHOUT_CLASSIFICATION	1.589801932179536E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9990283570777595	WITHOUT_CLASSIFICATION	9.7164292224046E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999584507252	WITHOUT_CLASSIFICATION	4.154927492823987E-8	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999963255930371	WITHOUT_CLASSIFICATION	3.6744069629176636E-6	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9177952158580722	WITHOUT_CLASSIFICATION	0.08220478414192779	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999959590464805	WITHOUT_CLASSIFICATION	4.040953519503754E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999338937990245	WITHOUT_CLASSIFICATION	6.61062009755436E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.999998816168113	WITHOUT_CLASSIFICATION	1.1838318870517697E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999584507252	WITHOUT_CLASSIFICATION	4.154927492823987E-8	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9942596764413453	WITHOUT_CLASSIFICATION	0.005740323558654697	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999302946450173	WITHOUT_CLASSIFICATION	6.970535498274587E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999021242238	WITHOUT_CLASSIFICATION	9.78757760690312E-8	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999094467326	WITHOUT_CLASSIFICATION	9.05532674919125E-8	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999877183071122	WITHOUT_CLASSIFICATION	1.2281692887682227E-5	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999686419036296	WITHOUT_CLASSIFICATION	3.1358096370424296E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999540929046399	WITHOUT_CLASSIFICATION	4.59070953601662E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999158667172023	WITHOUT_CLASSIFICATION	8.41332827977406E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995581187784	WITHOUT_CLASSIFICATION	4.4188122155616365E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9594671819679134	WITHOUT_CLASSIFICATION	0.04053281803208656	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.999515960149463	WITHOUT_CLASSIFICATION	4.840398505370999E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999988402129817	WITHOUT_CLASSIFICATION	1.159787018318074E-6	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999496809399687	WITHOUT_CLASSIFICATION	5.031906003137936E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999984562464	WITHOUT_CLASSIFICATION	1.5437535803541675E-9	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999129731356835	WITHOUT_CLASSIFICATION	8.702686431651929E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999996287821187	WITHOUT_CLASSIFICATION	3.712178812756634E-7	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999988593246601	WITHOUT_CLASSIFICATION	1.1406753398914929E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999875670907531	WITHOUT_CLASSIFICATION	1.243290924701599E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999751506322718	WITHOUT_CLASSIFICATION	2.484936772820103E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999743982232584	WITHOUT_CLASSIFICATION	2.560177674154808E-5	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9969290183081773	WITHOUT_CLASSIFICATION	0.003070981691822809	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999938146103218	WITHOUT_CLASSIFICATION	6.185389678198293E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999701757221028	WITHOUT_CLASSIFICATION	2.98242778971634E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995581187784	WITHOUT_CLASSIFICATION	4.4188122155616365E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999964798319491	WITHOUT_CLASSIFICATION	3.5201680508570573E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9998094827674188	WITHOUT_CLASSIFICATION	1.9051723258127492E-4	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999804183025915	WITHOUT_CLASSIFICATION	1.9581697408493735E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.99942686607864	WITHOUT_CLASSIFICATION	5.731339213600016E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986431290192	WITHOUT_CLASSIFICATION	1.3568709807617902E-6	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999653075378722	WITHOUT_CLASSIFICATION	3.469246212776238E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999735060257815	WITHOUT_CLASSIFICATION	2.6493974218450742E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999841668604025	WITHOUT_CLASSIFICATION	1.5833139597556204E-5	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999941101216089	WITHOUT_CLASSIFICATION	5.889878391114338E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.999926806041796	WITHOUT_CLASSIFICATION	7.319395820398719E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999965480256252	WITHOUT_CLASSIFICATION	3.4519743749004783E-6	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999992386129952	WITHOUT_CLASSIFICATION	7.613870048413958E-7	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9080846152913522	WITHOUT_CLASSIFICATION	0.09191538470864784	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999999993122567	WITHOUT_CLASSIFICATION	6.87743300906171E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998063819706707	WITHOUT_CLASSIFICATION	1.936180293291377E-4	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999990349947545	WITHOUT_CLASSIFICATION	9.650052454664527E-7	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999869417218068	WITHOUT_CLASSIFICATION	1.305827819319426E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999965480256252	WITHOUT_CLASSIFICATION	3.4519743749004783E-6	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999982492832183	WITHOUT_CLASSIFICATION	1.750716781755782E-6	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.8564969679682888	WITHOUT_CLASSIFICATION	0.14350303203171125	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997156551244	WITHOUT_CLASSIFICATION	2.843448756735062E-7	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997589023851121	WITHOUT_CLASSIFICATION	2.4109761488796543E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999501257288728	WITHOUT_CLASSIFICATION	4.9874271127150865E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999454717471	WITHOUT_CLASSIFICATION	5.452825288892684E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998063819706707	WITHOUT_CLASSIFICATION	1.936180293291377E-4	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999965782049	WITHOUT_CLASSIFICATION	3.421795105168342E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988718281766	WITHOUT_CLASSIFICATION	1.1281718233543825E-6	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985024665478	WITHOUT_CLASSIFICATION	1.4975334522168934E-6	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956034994364	WITHOUT_CLASSIFICATION	4.396500563556314E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947573700011	WITHOUT_CLASSIFICATION	5.242629998966033E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995548516239	WITHOUT_CLASSIFICATION	4.451483761010737E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999641066	WITHOUT_CLASSIFICATION	3.589340008748255E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999641066	WITHOUT_CLASSIFICATION	3.589340008748255E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9925414298080723	WITHOUT_CLASSIFICATION	0.007458570191927784	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999990821044655	WITHOUT_CLASSIFICATION	9.178955344145297E-7	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999101697318243	WITHOUT_CLASSIFICATION	8.983026817566086E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.999987282898148	WITHOUT_CLASSIFICATION	1.2717101851990397E-5	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999970844106575	WITHOUT_CLASSIFICATION	2.9155893424544266E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804741667536	WITHOUT_CLASSIFICATION	1.9525833246387846E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998768880096	WITHOUT_CLASSIFICATION	1.2311199039884557E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989847774607	WITHOUT_CLASSIFICATION	1.01522253922694E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9913956160409034	WITHOUT_CLASSIFICATION	0.008604383959096478	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999844799703	WITHOUT_CLASSIFICATION	1.552002970578285E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804741667536	WITHOUT_CLASSIFICATION	1.9525833246387846E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998768880096	WITHOUT_CLASSIFICATION	1.2311199039884557E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989847774607	WITHOUT_CLASSIFICATION	1.01522253922694E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999917758730662	WITHOUT_CLASSIFICATION	8.224126933805746E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9970419035388952	WITHOUT_CLASSIFICATION	0.0029580964611047762	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999991564714763	WITHOUT_CLASSIFICATION	8.435285236384621E-7	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9970680818511157	WITHOUT_CLASSIFICATION	0.0029319181488843106	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999625075724154	WITHOUT_CLASSIFICATION	3.749242758449461E-5	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999741962849843	WITHOUT_CLASSIFICATION	2.5803715015704434E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999992704276657	WITHOUT_CLASSIFICATION	7.295723344119614E-7	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.8501796041280418	WITHOUT_CLASSIFICATION	0.14982039587195822	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.999806470837225	WITHOUT_CLASSIFICATION	1.9352916277506134E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999776916476542	WITHOUT_CLASSIFICATION	2.2308352345782112E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999964617956995	WITHOUT_CLASSIFICATION	3.5382043005007556E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9971488948508748	WITHOUT_CLASSIFICATION	0.002851105149125149	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9975578556297606	WITHOUT_CLASSIFICATION	0.0024421443702393694	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9996187287308222	WITHOUT_CLASSIFICATION	3.8127126917770625E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998330380760122	WITHOUT_CLASSIFICATION	1.6696192398773187E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9996575830767501	WITHOUT_CLASSIFICATION	3.4241692324987565E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9990627480793398	WITHOUT_CLASSIFICATION	9.372519206602535E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999930570678826	WITHOUT_CLASSIFICATION	6.942932117401874E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999909613884376	WITHOUT_CLASSIFICATION	9.038611562506732E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999999641452875	WITHOUT_CLASSIFICATION	3.585471250059883E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999983083631969	WITHOUT_CLASSIFICATION	1.6916368031432564E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6256211905784578	WITHOUT_CLASSIFICATION	0.37437880942154217	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999965821658	WITHOUT_CLASSIFICATION	3.4178342846921254E-9	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999428615618972	WITHOUT_CLASSIFICATION	5.713843810288358E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999989748981146	WITHOUT_CLASSIFICATION	1.0251018853651981E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9972232899114228	WITHOUT_CLASSIFICATION	0.0027767100885771564	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976508600266	WITHOUT_CLASSIFICATION	2.349139973453522E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974703155065	WITHOUT_CLASSIFICATION	2.5296844934469836E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999966727800073	WITHOUT_CLASSIFICATION	3.3272199927056112E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941502994498	WITHOUT_CLASSIFICATION	5.849700550139497E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999498586422	WITHOUT_CLASSIFICATION	5.0141357910218015E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999915784208285	WITHOUT_CLASSIFICATION	8.421579171452516E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999915784208285	WITHOUT_CLASSIFICATION	8.421579171452516E-6	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999937034700344	WITHOUT_CLASSIFICATION	6.296529965677542E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999999146656	WITHOUT_CLASSIFICATION	8.533443762195861E-11	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999947339941153	WITHOUT_CLASSIFICATION	5.266005884708861E-6	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996498054412545	WITHOUT_CLASSIFICATION	3.5019455874553624E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9995649357121574	WITHOUT_CLASSIFICATION	4.350642878424623E-4	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.997443569694323	WITHOUT_CLASSIFICATION	0.0025564303056770563	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9997523662106502	WITHOUT_CLASSIFICATION	2.4763378934978663E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999989647718868	WITHOUT_CLASSIFICATION	1.0352281133205288E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9998682656015299	WITHOUT_CLASSIFICATION	1.3173439847018157E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999227963324	WITHOUT_CLASSIFICATION	7.720366749747615E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993597793825	WITHOUT_CLASSIFICATION	6.402206174651413E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998121846629	WITHOUT_CLASSIFICATION	1.8781533708963511E-7	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999091091978	WITHOUT_CLASSIFICATION	9.089080222523098E-8	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999861145835	WITHOUT_CLASSIFICATION	1.388541651418789E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997886271482	WITHOUT_CLASSIFICATION	2.1137285189266842E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998213760486	WITHOUT_CLASSIFICATION	1.786239514122159E-7	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999988816544	WITHOUT_CLASSIFICATION	1.1183455998474573E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999854314052	WITHOUT_CLASSIFICATION	1.4568594733461531E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994135009559	WITHOUT_CLASSIFICATION	5.864990441859516E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998050741929	WITHOUT_CLASSIFICATION	1.949258070892164E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999543906194185	WITHOUT_CLASSIFICATION	4.560938058158969E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999876361557865	WITHOUT_CLASSIFICATION	1.2363844213514133E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996345412590821	WITHOUT_CLASSIFICATION	3.6545874091785987E-4	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.99999656185797	WITHOUT_CLASSIFICATION	3.4381420298772043E-6	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999408942755172	WITHOUT_CLASSIFICATION	5.9105724482785996E-5	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9961531450857886	WITHOUT_CLASSIFICATION	0.0038468549142115036	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999758650526	WITHOUT_CLASSIFICATION	2.4134947322198112E-8	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999837673598858	WITHOUT_CLASSIFICATION	1.623264011420315E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996345412590821	WITHOUT_CLASSIFICATION	3.6545874091785987E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996345412590821	WITHOUT_CLASSIFICATION	3.6545874091785987E-4	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.956905415100831	WITHOUT_CLASSIFICATION	0.043094584899168904	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999991559428882	WITHOUT_CLASSIFICATION	8.44057111682617E-7	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995981278838635	WITHOUT_CLASSIFICATION	4.018721161364928E-4	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999346658761044	WITHOUT_CLASSIFICATION	6.533412389564217E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997086649229	WITHOUT_CLASSIFICATION	2.9133507716153717E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999999641452875	WITHOUT_CLASSIFICATION	3.585471250059883E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999825737275942	WITHOUT_CLASSIFICATION	1.742627240575176E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999996910734685	WITHOUT_CLASSIFICATION	3.0892653143274253E-7	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999966799920061	WITHOUT_CLASSIFICATION	3.3200079937279813E-6	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999492104327642	WITHOUT_CLASSIFICATION	5.078956723586306E-5	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999995782686969	WITHOUT_CLASSIFICATION	4.217313031672208E-7	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927196029353	WITHOUT_CLASSIFICATION	7.28039706473039E-6	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997237944147224	WITHOUT_CLASSIFICATION	2.762055852775421E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997237944147224	WITHOUT_CLASSIFICATION	2.762055852775421E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999070148052666	WITHOUT_CLASSIFICATION	9.298519473347825E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999070148052666	WITHOUT_CLASSIFICATION	9.298519473347825E-5	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815037604749	WITHOUT_CLASSIFICATION	1.8496239525156427E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958357847163	WITHOUT_CLASSIFICATION	4.164215283681605E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999990195998949	WITHOUT_CLASSIFICATION	9.804001050997487E-7	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999907647005966	WITHOUT_CLASSIFICATION	9.235299403405219E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9998848130744787	WITHOUT_CLASSIFICATION	1.151869255213134E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.8832550782846084	DESIGN	0.11674492171539166	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998070487266	WITHOUT_CLASSIFICATION	1.9295127338351378E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980101116441	WITHOUT_CLASSIFICATION	1.9898883558735514E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.6684195592510787	DESIGN	0.33158044074892135	WITHOUT_CLASSIFICATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998668231859246	WITHOUT_CLASSIFICATION	1.331768140754657E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996316234525	WITHOUT_CLASSIFICATION	3.6837654753206977E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999942142794123	WITHOUT_CLASSIFICATION	5.7857205877980505E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9987681167664305	WITHOUT_CLASSIFICATION	0.0012318832335695249	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999981354653883	WITHOUT_CLASSIFICATION	1.864534611796286E-6	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999885761014171	WITHOUT_CLASSIFICATION	1.142389858288761E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999895293079951	WITHOUT_CLASSIFICATION	1.047069200489799E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999895293079951	WITHOUT_CLASSIFICATION	1.047069200489799E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999981460269232	WITHOUT_CLASSIFICATION	1.8539730768574247E-6	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999990048136912	WITHOUT_CLASSIFICATION	9.951863087785695E-7	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999997774675057	WITHOUT_CLASSIFICATION	2.2253249426799738E-7	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999865367040951	WITHOUT_CLASSIFICATION	1.3463295904882512E-5	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998147784050434	WITHOUT_CLASSIFICATION	1.8522159495651226E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999942830868481	WITHOUT_CLASSIFICATION	5.716913151905279E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999990247629802	WITHOUT_CLASSIFICATION	9.752370197619194E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999986845526292	WITHOUT_CLASSIFICATION	1.3154473707894733E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999994910502734	WITHOUT_CLASSIFICATION	5.089497264912508E-7	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999952823190356	WITHOUT_CLASSIFICATION	4.71768096435917E-6	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999356045326394	WITHOUT_CLASSIFICATION	6.439546736049004E-5	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999970257525458	WITHOUT_CLASSIFICATION	2.974247454269265E-6	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999332570586	WITHOUT_CLASSIFICATION	6.67429414062476E-8	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999779368443	WITHOUT_CLASSIFICATION	2.2063155683658103E-8	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999959293845249	WITHOUT_CLASSIFICATION	4.070615475047915E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9980834333346272	WITHOUT_CLASSIFICATION	0.0019165666653727666	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999878453806837	WITHOUT_CLASSIFICATION	1.2154619316360039E-5	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9997287548492151	WITHOUT_CLASSIFICATION	2.712451507848803E-4	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9993541113079943	WITHOUT_CLASSIFICATION	6.458886920057123E-4	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999978494104	WITHOUT_CLASSIFICATION	2.150589549641642E-9	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999965486397	WITHOUT_CLASSIFICATION	3.4513602958051777E-9	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999998399426	WITHOUT_CLASSIFICATION	1.600573975023949E-10	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999958064954534	WITHOUT_CLASSIFICATION	4.1935045466971055E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999932012483428	WITHOUT_CLASSIFICATION	6.798751657228911E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999883354709489	WITHOUT_CLASSIFICATION	1.1664529051026136E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999919153969457	WITHOUT_CLASSIFICATION	8.084603054263069E-6	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999617524280359	WITHOUT_CLASSIFICATION	3.8247571964119006E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9994760521851793	WITHOUT_CLASSIFICATION	5.239478148207724E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999336411819	WITHOUT_CLASSIFICATION	6.635881807025001E-8	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999798332853583	WITHOUT_CLASSIFICATION	2.0166714641671205E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999966307860029	WITHOUT_CLASSIFICATION	3.3692139970541997E-6	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999981704423122	WITHOUT_CLASSIFICATION	1.829557687774915E-6	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998744701177538	WITHOUT_CLASSIFICATION	1.255298822462533E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9993386260333179	WITHOUT_CLASSIFICATION	6.613739666821098E-4	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999992762268748	WITHOUT_CLASSIFICATION	7.2377312518248E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9957342045181931	WITHOUT_CLASSIFICATION	0.004265795481806907	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998516589645	WITHOUT_CLASSIFICATION	1.4834103552151666E-7	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.999675586401172	WITHOUT_CLASSIFICATION	3.2441359882796666E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999860236607	WITHOUT_CLASSIFICATION	1.3976339368929024E-8	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999885921145051	WITHOUT_CLASSIFICATION	1.1407885495005096E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999948717639587	WITHOUT_CLASSIFICATION	5.1282360413037766E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999994764939603	WITHOUT_CLASSIFICATION	5.235060398362412E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.8196369210341226	DESIGN	0.18036307896587753	WITHOUT_CLASSIFICATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999589992708416	WITHOUT_CLASSIFICATION	4.100072915827053E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999507011356856	WITHOUT_CLASSIFICATION	4.929886431439171E-4	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9979002757516516	WITHOUT_CLASSIFICATION	0.002099724248348313	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999971436806815	WITHOUT_CLASSIFICATION	2.856319318568181E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999914978524521	WITHOUT_CLASSIFICATION	8.502147547804555E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999963892945234	WITHOUT_CLASSIFICATION	3.6107054765494245E-6	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999865372154315	WITHOUT_CLASSIFICATION	1.3462784568479466E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998806866355033	WITHOUT_CLASSIFICATION	1.193133644967223E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999725083790387	WITHOUT_CLASSIFICATION	2.7491620961207765E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998309201291957	WITHOUT_CLASSIFICATION	1.6907987080421813E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.99999964546467	WITHOUT_CLASSIFICATION	3.545353299506219E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999964756663651	WITHOUT_CLASSIFICATION	3.524333634961098E-6	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999545019096776	WITHOUT_CLASSIFICATION	4.549809032235038E-5	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9594812724539842	WITHOUT_CLASSIFICATION	0.04051872754601584	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999978274402956	WITHOUT_CLASSIFICATION	2.1725597043472082E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999195569599526	WITHOUT_CLASSIFICATION	8.044304004734812E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9861791872465803	WITHOUT_CLASSIFICATION	0.013820812753419589	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999753442437128	WITHOUT_CLASSIFICATION	2.465575628713787E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998220411438	WITHOUT_CLASSIFICATION	1.77958856144834E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999988279569799	WITHOUT_CLASSIFICATION	1.1720430200582644E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9979044622919323	WITHOUT_CLASSIFICATION	0.0020955377080676177	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999996969381844	WITHOUT_CLASSIFICATION	3.030618156479479E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9997466930162036	WITHOUT_CLASSIFICATION	2.5330698379634036E-4	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999993500574595	WITHOUT_CLASSIFICATION	6.499425405348339E-7	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997221446403	WITHOUT_CLASSIFICATION	2.7785535973760976E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999936939111558	WITHOUT_CLASSIFICATION	6.306088844198147E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999936939111558	WITHOUT_CLASSIFICATION	6.306088844198147E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999257127415	WITHOUT_CLASSIFICATION	7.428725844765174E-8	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.998238639475867	WITHOUT_CLASSIFICATION	0.0017613605241330356	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999569144129272	WITHOUT_CLASSIFICATION	4.3085587072707164E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9969237400847258	WITHOUT_CLASSIFICATION	0.003076259915274088	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999933089868857	WITHOUT_CLASSIFICATION	6.691013114338458E-6	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9975582915910283	WITHOUT_CLASSIFICATION	0.0024417084089717396	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999982255278111	WITHOUT_CLASSIFICATION	1.774472188760082E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999971240031	WITHOUT_CLASSIFICATION	2.8759968152685826E-9	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999864617969057	WITHOUT_CLASSIFICATION	1.3538203094301136E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999997539259371	WITHOUT_CLASSIFICATION	2.46074062954308E-7	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996348290308	WITHOUT_CLASSIFICATION	3.6517096917981424E-7	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999999937392464	WITHOUT_CLASSIFICATION	6.260753595084624E-8	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999950933340865	WITHOUT_CLASSIFICATION	4.906665913461176E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999990121712349	WITHOUT_CLASSIFICATION	9.8782876509365E-6	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999753022122563	WITHOUT_CLASSIFICATION	2.4697787743732448E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8187306101542893	WITHOUT_CLASSIFICATION	0.18126938984571073	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999995258550354	WITHOUT_CLASSIFICATION	4.741449645933899E-6	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9994441300976805	WITHOUT_CLASSIFICATION	5.558699023194804E-4	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.998741922295626	WITHOUT_CLASSIFICATION	0.0012580777043740287	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999276894454887	WITHOUT_CLASSIFICATION	7.231055451134982E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9998642354546212	WITHOUT_CLASSIFICATION	1.357645453787135E-4	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999911747454684	WITHOUT_CLASSIFICATION	8.82525453156101E-6	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9966777270554645	WITHOUT_CLASSIFICATION	0.0033222729445354514	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9993316147992869	WITHOUT_CLASSIFICATION	6.683852007131606E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999988291711	WITHOUT_CLASSIFICATION	1.1708288323176481E-9	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997087206066961	WITHOUT_CLASSIFICATION	2.912793933037888E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999978263558662	WITHOUT_CLASSIFICATION	2.173644133894759E-6	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999712960929787	WITHOUT_CLASSIFICATION	2.870390702129261E-5	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999562065516319	WITHOUT_CLASSIFICATION	4.379344836819661E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999242517460207	WITHOUT_CLASSIFICATION	7.574825397925987E-5	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999990477813894	WITHOUT_CLASSIFICATION	9.52218610748472E-7	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999085954547505	WITHOUT_CLASSIFICATION	9.140454524947805E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999702741314207	WITHOUT_CLASSIFICATION	2.972586857926852E-5	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999641413475443	WITHOUT_CLASSIFICATION	3.585865245566431E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9975562731613724	WITHOUT_CLASSIFICATION	0.002443726838627574	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9975562731613724	WITHOUT_CLASSIFICATION	0.002443726838627574	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999980080401927	WITHOUT_CLASSIFICATION	1.99195980723188E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9995083401271939	WITHOUT_CLASSIFICATION	4.916598728061376E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999846943933799	WITHOUT_CLASSIFICATION	1.530560662018223E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999832293289483	WITHOUT_CLASSIFICATION	1.6770671051729125E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999972369275482	WITHOUT_CLASSIFICATION	2.7630724517837845E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998337532247585	WITHOUT_CLASSIFICATION	1.6624677524149493E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999962904938936	WITHOUT_CLASSIFICATION	3.7095061065015284E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999945411141653	WITHOUT_CLASSIFICATION	5.458885834724066E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.8532287371288942	WITHOUT_CLASSIFICATION	0.14677126287110578	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999846038573	WITHOUT_CLASSIFICATION	1.539614270201037E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999826120123	WITHOUT_CLASSIFICATION	1.738798777784239E-8	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9995233745674935	WITHOUT_CLASSIFICATION	4.7662543250643724E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999926784411735	WITHOUT_CLASSIFICATION	7.3215588265061046E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998897303230896	WITHOUT_CLASSIFICATION	1.1026967691039349E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999089783603	WITHOUT_CLASSIFICATION	9.102163968592858E-8	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999475480910435	WITHOUT_CLASSIFICATION	5.245190895655827E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999475480910435	WITHOUT_CLASSIFICATION	5.245190895655827E-5	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999986767418103	WITHOUT_CLASSIFICATION	1.3232581895887774E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999979118375546	WITHOUT_CLASSIFICATION	2.088162445375915E-6	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9940644564553014	WITHOUT_CLASSIFICATION	0.005935543544698683	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994542015835	WITHOUT_CLASSIFICATION	5.457984164882041E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9992930910307087	WITHOUT_CLASSIFICATION	7.069089692912466E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999977615267512	WITHOUT_CLASSIFICATION	2.2384732487050992E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999736633987132	WITHOUT_CLASSIFICATION	2.6336601286816507E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999736633987132	WITHOUT_CLASSIFICATION	2.6336601286816507E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999992842602684	WITHOUT_CLASSIFICATION	7.157397314823881E-7	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9974116830025496	WITHOUT_CLASSIFICATION	0.0025883169974504085	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999956077955023	WITHOUT_CLASSIFICATION	4.3922044976590464E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999470230434	WITHOUT_CLASSIFICATION	5.29769564883004E-8	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.6807362552268726	WITHOUT_CLASSIFICATION	0.3192637447731274	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999617345195804	WITHOUT_CLASSIFICATION	3.826548041965522E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999948351902742	WITHOUT_CLASSIFICATION	5.164809725789893E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999999197050885	WITHOUT_CLASSIFICATION	8.029491153400859E-8	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996859446713	WITHOUT_CLASSIFICATION	3.1405532880425613E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998929413143537	WITHOUT_CLASSIFICATION	1.0705868564629438E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9990757403641847	WITHOUT_CLASSIFICATION	9.242596358152137E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999867473785806	WITHOUT_CLASSIFICATION	1.3252621419330825E-5	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999385399306633	WITHOUT_CLASSIFICATION	6.146006933678635E-5	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999755661466878	WITHOUT_CLASSIFICATION	2.443385331211665E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9997690004991234	WITHOUT_CLASSIFICATION	2.3099950087652403E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999834453641169	WITHOUT_CLASSIFICATION	1.6554635883191433E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999818445344	WITHOUT_CLASSIFICATION	1.8155465550535925E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9998660154753549	WITHOUT_CLASSIFICATION	1.3398452464503856E-4	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9990952637446027	WITHOUT_CLASSIFICATION	9.047362553974276E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.999997789895591	WITHOUT_CLASSIFICATION	2.2101044090126848E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999300195698	WITHOUT_CLASSIFICATION	6.998043024062693E-8	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999987829165098	WITHOUT_CLASSIFICATION	1.2170834902091275E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999458940948361	WITHOUT_CLASSIFICATION	5.410590516397406E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9996632452835204	WITHOUT_CLASSIFICATION	3.367547164796845E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995831945001721	WITHOUT_CLASSIFICATION	4.168054998279585E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999761255287312	WITHOUT_CLASSIFICATION	2.38744712688469E-5	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996006878284656	WITHOUT_CLASSIFICATION	3.9931217153433933E-4	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9997897577418503	WITHOUT_CLASSIFICATION	2.1024225814973956E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999747046434607	WITHOUT_CLASSIFICATION	2.5295356539292916E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999909884819	WITHOUT_CLASSIFICATION	9.011518101172837E-8	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9965175175609203	WITHOUT_CLASSIFICATION	0.0034824824390796323	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9992332785123069	WITHOUT_CLASSIFICATION	7.66721487693063E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999191111999028	WITHOUT_CLASSIFICATION	8.088880009717035E-5	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999905137525	WITHOUT_CLASSIFICATION	9.486247357002507E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999954225525596	WITHOUT_CLASSIFICATION	4.577447440421754E-6	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9996688482267369	WITHOUT_CLASSIFICATION	3.3115177326321134E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9953344134353148	WITHOUT_CLASSIFICATION	0.004665586564685221	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9998309533345942	WITHOUT_CLASSIFICATION	1.6904666540594105E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.999974678344922	WITHOUT_CLASSIFICATION	2.5321655078066563E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999953991312369	WITHOUT_CLASSIFICATION	4.60086876313064E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997289333022	WITHOUT_CLASSIFICATION	2.710666978276407E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999920881194482	WITHOUT_CLASSIFICATION	7.911880551889865E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999766199356779	WITHOUT_CLASSIFICATION	2.338006432216617E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999837542777987	WITHOUT_CLASSIFICATION	1.6245722201330126E-5	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999998003976	WITHOUT_CLASSIFICATION	1.9960241596772218E-10	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999937977953637	WITHOUT_CLASSIFICATION	6.202204636339615E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.999974678344922	WITHOUT_CLASSIFICATION	2.5321655078066563E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999953991312369	WITHOUT_CLASSIFICATION	4.60086876313064E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999371539616204	WITHOUT_CLASSIFICATION	6.284603837959092E-5	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9988827727706702	WITHOUT_CLASSIFICATION	0.0011172272293297444	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9997986679123624	WITHOUT_CLASSIFICATION	2.0133208763770932E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999950893973155	WITHOUT_CLASSIFICATION	4.910602684481446E-6	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999952903322626	WITHOUT_CLASSIFICATION	4.709667737411572E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999921336845033	WITHOUT_CLASSIFICATION	7.866315496623043E-6	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999823788311	WITHOUT_CLASSIFICATION	1.7621168893108418E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999901765965289	WITHOUT_CLASSIFICATION	9.82340347116675E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999950011849169	WITHOUT_CLASSIFICATION	4.99881508306015E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.67687955026341	WITHOUT_CLASSIFICATION	0.32312044973659	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999945183355	WITHOUT_CLASSIFICATION	5.481664457446256E-9	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.67687955026341	WITHOUT_CLASSIFICATION	0.32312044973659	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999995468629	WITHOUT_CLASSIFICATION	4.531371402273909E-10	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999964969732377	WITHOUT_CLASSIFICATION	3.5030267622685544E-6	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999935629051	WITHOUT_CLASSIFICATION	6.437094952928416E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996290643085	WITHOUT_CLASSIFICATION	3.7093569155353984E-7	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999425358366304	WITHOUT_CLASSIFICATION	5.746416336947811E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998527158158895	WITHOUT_CLASSIFICATION	1.4728418411044357E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998527158158895	WITHOUT_CLASSIFICATION	1.4728418411044357E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999620417287477	WITHOUT_CLASSIFICATION	3.795827125234035E-5	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999581025844826	WITHOUT_CLASSIFICATION	4.189741551738686E-5	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999952473287363	WITHOUT_CLASSIFICATION	4.7526712636140115E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999770406645809	WITHOUT_CLASSIFICATION	2.295933541902005E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.998577204759025	WITHOUT_CLASSIFICATION	0.0014227952409749229	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8349364961450322	WITHOUT_CLASSIFICATION	0.16506350385496776	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999991056267192	WITHOUT_CLASSIFICATION	8.943732807956196E-7	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997172025855	WITHOUT_CLASSIFICATION	2.827974144215963E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999774431643049	WITHOUT_CLASSIFICATION	2.2556835695029286E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9997765297760497	WITHOUT_CLASSIFICATION	2.234702239504666E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999492711494085	WITHOUT_CLASSIFICATION	5.072885059145544E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999991676808778	WITHOUT_CLASSIFICATION	8.323191221193862E-7	DESIGN
//types	WITHOUT_CLASSIFICATION	0.999486198650737	WITHOUT_CLASSIFICATION	5.138013492630429E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999972508162672	WITHOUT_CLASSIFICATION	2.7491837328183327E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9998955824200141	WITHOUT_CLASSIFICATION	1.0441757998587833E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999972647597437	WITHOUT_CLASSIFICATION	2.7352402563076203E-6	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999997851262505	WITHOUT_CLASSIFICATION	2.1487374933128143E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999446333013062	WITHOUT_CLASSIFICATION	5.536669869384513E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998909305391	WITHOUT_CLASSIFICATION	1.0906946093314972E-7	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9996133350965125	WITHOUT_CLASSIFICATION	3.866649034875062E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997757129981768	WITHOUT_CLASSIFICATION	2.24287001823185E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999987865441788	WITHOUT_CLASSIFICATION	1.2134558212196573E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997931926386554	WITHOUT_CLASSIFICATION	2.0680736134448356E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999958052477362	WITHOUT_CLASSIFICATION	4.194752263762088E-6	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999898198998853	WITHOUT_CLASSIFICATION	1.0180100114668441E-5	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997501630500513	WITHOUT_CLASSIFICATION	2.4983694994870235E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999959434925058	WITHOUT_CLASSIFICATION	4.056507494300025E-6	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9983407594515875	WITHOUT_CLASSIFICATION	0.0016592405484124701	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9819587907010083	WITHOUT_CLASSIFICATION	0.018041209298991712	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9794737876312094	WITHOUT_CLASSIFICATION	0.020526212368790542	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9136977883936029	WITHOUT_CLASSIFICATION	0.08630221160639709	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9976496298128769	WITHOUT_CLASSIFICATION	0.0023503701871231504	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999991056267192	WITHOUT_CLASSIFICATION	8.943732807956196E-7	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999828709948222	WITHOUT_CLASSIFICATION	1.7129005177792475E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999520692538307	WITHOUT_CLASSIFICATION	4.793074616930266E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9903857721226373	WITHOUT_CLASSIFICATION	0.009614227877362578	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.999999539922544	WITHOUT_CLASSIFICATION	4.6007745596928157E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.999995722900234	WITHOUT_CLASSIFICATION	4.2770997660873514E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999987986320924	WITHOUT_CLASSIFICATION	1.2013679076241604E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999770406645809	WITHOUT_CLASSIFICATION	2.295933541902005E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999770406645809	WITHOUT_CLASSIFICATION	2.295933541902005E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.999999062839559	WITHOUT_CLASSIFICATION	9.371604410989333E-7	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999937267561316	WITHOUT_CLASSIFICATION	6.273243868376482E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9993214743985036	WITHOUT_CLASSIFICATION	6.7852560149652E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999779357525083	WITHOUT_CLASSIFICATION	2.2064247491849874E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999745912745627	WITHOUT_CLASSIFICATION	2.540872543732672E-5	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997800939430769	WITHOUT_CLASSIFICATION	2.1990605692303222E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9970092423930541	WITHOUT_CLASSIFICATION	0.002990757606945975	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999916909671019	WITHOUT_CLASSIFICATION	8.309032898128833E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999122122499647	WITHOUT_CLASSIFICATION	8.778775003520525E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999986981778876	WITHOUT_CLASSIFICATION	1.301822112423937E-6	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9996690405223547	WITHOUT_CLASSIFICATION	3.309594776453546E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999526031521967	WITHOUT_CLASSIFICATION	4.739684780334642E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9994093169598451	WITHOUT_CLASSIFICATION	5.906830401549116E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999986981778876	WITHOUT_CLASSIFICATION	1.301822112423937E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999965384549174	WITHOUT_CLASSIFICATION	3.4615450825686014E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9961907288935242	WITHOUT_CLASSIFICATION	0.0038092711064758727	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999967773427167	WITHOUT_CLASSIFICATION	3.2226572833587996E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8334974298641049	DESIGN	0.16650257013589498	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999526031521967	WITHOUT_CLASSIFICATION	4.739684780334642E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999993280387759	WITHOUT_CLASSIFICATION	6.719612242079907E-7	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999992564922179	WITHOUT_CLASSIFICATION	7.435077821772395E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997655450421	WITHOUT_CLASSIFICATION	2.344549578333254E-7	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999986476341208	WITHOUT_CLASSIFICATION	1.3523658791642818E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997214532352953	WITHOUT_CLASSIFICATION	2.785467647047611E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999958461193375	WITHOUT_CLASSIFICATION	4.153880662557747E-6	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999979861589892	WITHOUT_CLASSIFICATION	2.0138410108847357E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999959742367525	WITHOUT_CLASSIFICATION	4.02576324753682E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999075351449053	WITHOUT_CLASSIFICATION	9.246485509469913E-4	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999139565607139	WITHOUT_CLASSIFICATION	8.604343928602812E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9992221395224632	WITHOUT_CLASSIFICATION	7.778604775368485E-4	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999684357688471	WITHOUT_CLASSIFICATION	3.1564231152888224E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999986981778876	WITHOUT_CLASSIFICATION	1.301822112423937E-6	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999993280387759	WITHOUT_CLASSIFICATION	6.719612242079907E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997655450421	WITHOUT_CLASSIFICATION	2.344549578333254E-7	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999426704903553	WITHOUT_CLASSIFICATION	5.73295096445212E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9707332407696643	WITHOUT_CLASSIFICATION	0.029266759230335695	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999870270748291	WITHOUT_CLASSIFICATION	1.2972925170869846E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999526031521967	WITHOUT_CLASSIFICATION	4.739684780334642E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999189567098441	WITHOUT_CLASSIFICATION	8.10432901559392E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999334988326	WITHOUT_CLASSIFICATION	6.650116734526203E-8	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999881923433198	WITHOUT_CLASSIFICATION	1.1807656680127653E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999941477664284	WITHOUT_CLASSIFICATION	5.8522335715773635E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999959742367525	WITHOUT_CLASSIFICATION	4.02576324753682E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999965384549174	WITHOUT_CLASSIFICATION	3.4615450825686014E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999942728010327	WITHOUT_CLASSIFICATION	5.7271989672828185E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999984427722817	WITHOUT_CLASSIFICATION	1.5572277184067224E-6	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9995328741194848	WITHOUT_CLASSIFICATION	4.6712588051523563E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9974717946493256	WITHOUT_CLASSIFICATION	0.0025282053506744577	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9898251465974299	WITHOUT_CLASSIFICATION	0.01017485340257011	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9995960453788232	WITHOUT_CLASSIFICATION	4.0395462117688536E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9992475305784627	WITHOUT_CLASSIFICATION	7.524694215372066E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996290643085	WITHOUT_CLASSIFICATION	3.7093569155353984E-7	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994130028512334	WITHOUT_CLASSIFICATION	5.86997148766538E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996319429371	WITHOUT_CLASSIFICATION	3.6805706294395624E-7	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999846901102711	WITHOUT_CLASSIFICATION	1.530988972889094E-4	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999999322834478	WITHOUT_CLASSIFICATION	6.771655220220181E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999992933441426	WITHOUT_CLASSIFICATION	7.066558573790457E-7	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999995139378506	WITHOUT_CLASSIFICATION	4.860621493822719E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999983991478771	WITHOUT_CLASSIFICATION	1.6008521229287256E-6	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998747996858	WITHOUT_CLASSIFICATION	1.2520031417920868E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999941477664284	WITHOUT_CLASSIFICATION	5.8522335715773635E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999911042307105	WITHOUT_CLASSIFICATION	8.895769289603332E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999932835510965	WITHOUT_CLASSIFICATION	6.71644890341169E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999675374695925	WITHOUT_CLASSIFICATION	3.2462530407517504E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999993173232541	WITHOUT_CLASSIFICATION	6.826767460264346E-7	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9999450333638491	WITHOUT_CLASSIFICATION	5.49666361510295E-5	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9997800296309577	WITHOUT_CLASSIFICATION	2.1997036904228382E-4	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999996003144428	WITHOUT_CLASSIFICATION	3.996855571094112E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9956216614953897	WITHOUT_CLASSIFICATION	0.0043783385046103395	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999975358942464	WITHOUT_CLASSIFICATION	2.4641057535762342E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9873646930998106	WITHOUT_CLASSIFICATION	0.012635306900189436	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999994801408817	WITHOUT_CLASSIFICATION	5.198591183283721E-7	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999994337489705	WITHOUT_CLASSIFICATION	5.662510294997755E-7	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.745985869616112	WITHOUT_CLASSIFICATION	0.2540141303838878	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999147063436012	WITHOUT_CLASSIFICATION	8.529365639878665E-5	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998274517159486	WITHOUT_CLASSIFICATION	1.7254828405143812E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999946810702952	WITHOUT_CLASSIFICATION	5.31892970480428E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9944625942756002	WITHOUT_CLASSIFICATION	0.00553740572439977	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999838156209764	WITHOUT_CLASSIFICATION	1.618437902371662E-5	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999940304223911	WITHOUT_CLASSIFICATION	5.9695776089181325E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9976640296143011	WITHOUT_CLASSIFICATION	0.002335970385698798	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999956757871735	WITHOUT_CLASSIFICATION	4.324212826500487E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999943652945983	WITHOUT_CLASSIFICATION	5.6347054017047096E-5	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996797565719	WITHOUT_CLASSIFICATION	3.2024342807788167E-7	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999990902700784	WITHOUT_CLASSIFICATION	9.097299216690883E-7	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997922448692	WITHOUT_CLASSIFICATION	2.0775513071665014E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8830070999450481	DESIGN	0.11699290005495194	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999977122105124	WITHOUT_CLASSIFICATION	2.2877894876358613E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999999424708237	WITHOUT_CLASSIFICATION	5.752917632715021E-8	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999675538817736	WITHOUT_CLASSIFICATION	3.244611822639966E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9195158377079962	WITHOUT_CLASSIFICATION	0.08048416229200389	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999597242037462	WITHOUT_CLASSIFICATION	4.027579625373516E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9979661145962561	WITHOUT_CLASSIFICATION	0.0020338854037439107	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9993231829171931	WITHOUT_CLASSIFICATION	6.768170828067867E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.999344933906312	WITHOUT_CLASSIFICATION	6.55066093687991E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998495740367802	WITHOUT_CLASSIFICATION	1.5042596321989405E-4	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999528761171	WITHOUT_CLASSIFICATION	4.7123882880703434E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999651727831133	WITHOUT_CLASSIFICATION	3.4827216886752234E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9344850956460314	WITHOUT_CLASSIFICATION	0.06551490435396853	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999528761171	WITHOUT_CLASSIFICATION	4.7123882880703434E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998495740367802	WITHOUT_CLASSIFICATION	1.5042596321989405E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999651727831133	WITHOUT_CLASSIFICATION	3.4827216886752234E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999675976484027	WITHOUT_CLASSIFICATION	3.2402351597302236E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999853531686688	WITHOUT_CLASSIFICATION	1.4646831331332751E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999326950938	WITHOUT_CLASSIFICATION	6.730490618140692E-8	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9974089316080126	WITHOUT_CLASSIFICATION	0.0025910683919873508	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.998011427072409	WITHOUT_CLASSIFICATION	0.0019885729275910184	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998067457594526	DESIGN	1.9325424054729236E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.8043376044770753	DESIGN	0.19566239552292472	WITHOUT_CLASSIFICATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999395457054194	WITHOUT_CLASSIFICATION	6.045429458058192E-5	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998836177993305	WITHOUT_CLASSIFICATION	1.1638220066948142E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999915459701691	WITHOUT_CLASSIFICATION	8.454029830844184E-6	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999974221344107	WITHOUT_CLASSIFICATION	2.5778655892890245E-6	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.999529860784205	WITHOUT_CLASSIFICATION	4.701392157949907E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998291019900186	WITHOUT_CLASSIFICATION	1.7089800998147528E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9928098081515044	WITHOUT_CLASSIFICATION	0.007190191848495608	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999995979561924	WITHOUT_CLASSIFICATION	4.0204380759012527E-7	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999997640287219	WITHOUT_CLASSIFICATION	2.3597127821289757E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9973300512616191	WITHOUT_CLASSIFICATION	0.002669948738380901	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9995750040988415	WITHOUT_CLASSIFICATION	4.2499590115843645E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9993479407544743	WITHOUT_CLASSIFICATION	6.520592455256771E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999998670374913	WITHOUT_CLASSIFICATION	1.3296250870570333E-6	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.7267354033462043	WITHOUT_CLASSIFICATION	0.2732645966537957	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999045712059	WITHOUT_CLASSIFICATION	9.542879417852119E-8	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999954448350221	WITHOUT_CLASSIFICATION	4.555164977908119E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999934722197743	WITHOUT_CLASSIFICATION	6.527780225755231E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999964341731244	WITHOUT_CLASSIFICATION	3.565826875607737E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.999964341731244	WITHOUT_CLASSIFICATION	3.565826875607737E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999148246994	WITHOUT_CLASSIFICATION	8.517530057167288E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999148246994	WITHOUT_CLASSIFICATION	8.517530057167288E-8	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9985075369987417	WITHOUT_CLASSIFICATION	0.0014924630012581978	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9973300512616191	WITHOUT_CLASSIFICATION	0.002669948738380901	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998474532386802	WITHOUT_CLASSIFICATION	1.5254676131988556E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999979993341708	WITHOUT_CLASSIFICATION	2.0006658291806753E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9969955952646908	WITHOUT_CLASSIFICATION	0.003004404735309264	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9969955952646908	WITHOUT_CLASSIFICATION	0.003004404735309264	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999994218486941	WITHOUT_CLASSIFICATION	5.781513060089901E-7	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999942012535442	WITHOUT_CLASSIFICATION	5.798746455714698E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999361880244517	WITHOUT_CLASSIFICATION	6.381197554834328E-5	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999981068007894	WITHOUT_CLASSIFICATION	1.8931992106350674E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8516961277963782	WITHOUT_CLASSIFICATION	0.14830387220362184	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999950170865607	WITHOUT_CLASSIFICATION	4.982913439275423E-6	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999384889637075	WITHOUT_CLASSIFICATION	6.151103629251078E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9723301048328301	WITHOUT_CLASSIFICATION	0.027669895167169865	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9998664174278676	WITHOUT_CLASSIFICATION	1.335825721322619E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999981171682132	WITHOUT_CLASSIFICATION	1.8828317867773233E-6	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999994022128691	WITHOUT_CLASSIFICATION	5.977871309313355E-7	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999458079477594	WITHOUT_CLASSIFICATION	5.4192052240540004E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999877564399292	WITHOUT_CLASSIFICATION	1.2243560070751772E-5	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999526149948861	WITHOUT_CLASSIFICATION	4.738500511394893E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9989275411524602	WITHOUT_CLASSIFICATION	0.0010724588475399112	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998373628584257	WITHOUT_CLASSIFICATION	1.626371415744004E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992310513842387	WITHOUT_CLASSIFICATION	7.68948615761166E-4	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999990017601657	WITHOUT_CLASSIFICATION	9.982398343486753E-7	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998685771775643	WITHOUT_CLASSIFICATION	1.3142282243577429E-4	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999196637199	WITHOUT_CLASSIFICATION	8.033628001169988E-8	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999076685482644	WITHOUT_CLASSIFICATION	9.233145173559443E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999994999784837	WITHOUT_CLASSIFICATION	5.000215163490452E-7	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999933483826086	WITHOUT_CLASSIFICATION	6.651617391521052E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999933718697424	WITHOUT_CLASSIFICATION	6.628130257607869E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9996498054412545	WITHOUT_CLASSIFICATION	3.5019455874553624E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999996489240721	WITHOUT_CLASSIFICATION	3.510759279422248E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999994337489705	WITHOUT_CLASSIFICATION	5.662510294997755E-7	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999444874482	WITHOUT_CLASSIFICATION	5.551255181324191E-8	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999959037132844	WITHOUT_CLASSIFICATION	4.0962867155983545E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999850808169903	WITHOUT_CLASSIFICATION	1.4919183009669975E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990443836867	WITHOUT_CLASSIFICATION	9.55616313317561E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999748416236129	WITHOUT_CLASSIFICATION	2.515837638710893E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999748416236129	WITHOUT_CLASSIFICATION	2.515837638710893E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999986149246007	WITHOUT_CLASSIFICATION	1.3850753992678508E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999834667031169	WITHOUT_CLASSIFICATION	1.6533296883058968E-5	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9998536003493537	WITHOUT_CLASSIFICATION	1.4639965064630167E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9998536003493537	WITHOUT_CLASSIFICATION	1.4639965064630167E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999040568319956	WITHOUT_CLASSIFICATION	9.594316800442587E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996819864438009	WITHOUT_CLASSIFICATION	3.180135561990623E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999923060003634	WITHOUT_CLASSIFICATION	7.693999636577246E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997086649229	WITHOUT_CLASSIFICATION	2.9133507716153717E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9988851723461649	WITHOUT_CLASSIFICATION	0.0011148276538350435	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9995231290050745	WITHOUT_CLASSIFICATION	4.7687099492562995E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9975214107281034	WITHOUT_CLASSIFICATION	0.0024785892718965463	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999786567543438	WITHOUT_CLASSIFICATION	2.1343245656132926E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9610406014705233	WITHOUT_CLASSIFICATION	0.03895939852947679	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9610406014705233	WITHOUT_CLASSIFICATION	0.03895939852947679	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8594732014417352	WITHOUT_CLASSIFICATION	0.14052679855826486	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999918369526167	WITHOUT_CLASSIFICATION	8.163047383316774E-6	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999918369526167	WITHOUT_CLASSIFICATION	8.163047383316774E-6	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9699170544711551	WITHOUT_CLASSIFICATION	0.030082945528844912	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999957576276213	WITHOUT_CLASSIFICATION	4.242372378714945E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9702053168930885	WITHOUT_CLASSIFICATION	0.029794683106911427	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999995630722867	WITHOUT_CLASSIFICATION	4.369277134211979E-7	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999994805198873	WITHOUT_CLASSIFICATION	5.194801126898435E-7	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999948016934	WITHOUT_CLASSIFICATION	5.1983066106644175E-9	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999998077604714	WITHOUT_CLASSIFICATION	1.922395287183205E-7	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999000029589046	WITHOUT_CLASSIFICATION	9.999704109539915E-5	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999943194981735	WITHOUT_CLASSIFICATION	5.680501826448073E-6	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9994930825501288	WITHOUT_CLASSIFICATION	5.069174498711858E-4	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998324554695	WITHOUT_CLASSIFICATION	1.675445305140022E-7	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999979232791548	WITHOUT_CLASSIFICATION	2.076720845079714E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558202801788	WITHOUT_CLASSIFICATION	4.4179719821118386E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558202801788	WITHOUT_CLASSIFICATION	4.4179719821118386E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558202801788	WITHOUT_CLASSIFICATION	4.4179719821118386E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999558202801788	WITHOUT_CLASSIFICATION	4.4179719821118386E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999994984590209	WITHOUT_CLASSIFICATION	5.015409790440423E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.99999730687587	WITHOUT_CLASSIFICATION	2.6931241299481084E-6	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999911941230276	WITHOUT_CLASSIFICATION	8.805876972386823E-6	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.999381964748844	WITHOUT_CLASSIFICATION	6.180352511559826E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999980907340119	WITHOUT_CLASSIFICATION	1.909265988136762E-6	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9913297452335625	WITHOUT_CLASSIFICATION	0.008670254766437522	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9987638655046225	WITHOUT_CLASSIFICATION	0.0012361344953775574	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999734401425914	WITHOUT_CLASSIFICATION	2.655985740865347E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999992130588458	WITHOUT_CLASSIFICATION	7.869411542427965E-7	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998963623048	WITHOUT_CLASSIFICATION	1.0363769513781992E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9996636461870304	WITHOUT_CLASSIFICATION	3.3635381296958435E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999447213076899	WITHOUT_CLASSIFICATION	5.527869231013591E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9989270090386198	WITHOUT_CLASSIFICATION	0.001072990961380239	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999996698098782	WITHOUT_CLASSIFICATION	3.301901217636232E-7	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9996132576347033	WITHOUT_CLASSIFICATION	3.867423652965955E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999447213076899	WITHOUT_CLASSIFICATION	5.527869231013591E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999998349145215	WITHOUT_CLASSIFICATION	1.6508547850346343E-7	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999367281379398	WITHOUT_CLASSIFICATION	6.327186206024014E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999998347713538	WITHOUT_CLASSIFICATION	1.6522864618961795E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9990740793047954	WITHOUT_CLASSIFICATION	9.259206952044857E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.991080828091581	WITHOUT_CLASSIFICATION	0.008919171908418911	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999729970360066	WITHOUT_CLASSIFICATION	2.700296399340864E-5	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999991899870814	WITHOUT_CLASSIFICATION	8.1001291869323E-7	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999908721764547	WITHOUT_CLASSIFICATION	9.127823545265846E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986472415607	WITHOUT_CLASSIFICATION	1.352758439252485E-6	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999986177898766	WITHOUT_CLASSIFICATION	1.3822101233765837E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993548676622	WITHOUT_CLASSIFICATION	6.451323378375794E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999989077177268	WITHOUT_CLASSIFICATION	1.0922822731321815E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998465753310374	WITHOUT_CLASSIFICATION	1.5342466896257082E-4	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.718468064195802	WITHOUT_CLASSIFICATION	0.281531935804198	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.99999918362847	WITHOUT_CLASSIFICATION	8.16371530059263E-7	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9140299609949627	WITHOUT_CLASSIFICATION	0.08597003900503732	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.99994191899673	WITHOUT_CLASSIFICATION	5.8081003269949194E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999939070479006	WITHOUT_CLASSIFICATION	6.092952099414089E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997202602216161	WITHOUT_CLASSIFICATION	2.7973977838389286E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999939070479006	WITHOUT_CLASSIFICATION	6.092952099414089E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999734788697	WITHOUT_CLASSIFICATION	2.6521130311710902E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999984141958018	WITHOUT_CLASSIFICATION	1.585804198201176E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9992937980012392	WITHOUT_CLASSIFICATION	7.062019987607812E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9986819517700254	WITHOUT_CLASSIFICATION	0.0013180482299745453	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.99994191899673	WITHOUT_CLASSIFICATION	5.8081003269949194E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997202602216161	WITHOUT_CLASSIFICATION	2.7973977838389286E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999734788697	WITHOUT_CLASSIFICATION	2.6521130311710902E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995342934550464	WITHOUT_CLASSIFICATION	4.6570654495355215E-4	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999363325541702	WITHOUT_CLASSIFICATION	6.366744582978184E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9997485564151524	WITHOUT_CLASSIFICATION	2.514435848475578E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999452258826562	WITHOUT_CLASSIFICATION	5.477411734371127E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9981612494082458	WITHOUT_CLASSIFICATION	0.0018387505917542603	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999717612732	WITHOUT_CLASSIFICATION	2.8238726868567027E-8	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992310513842387	WITHOUT_CLASSIFICATION	7.68948615761166E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999984141958018	WITHOUT_CLASSIFICATION	1.585804198201176E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9738179729099935	WITHOUT_CLASSIFICATION	0.026182027090006464	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999499636428785	WITHOUT_CLASSIFICATION	5.0036357121474143E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999918304559694	WITHOUT_CLASSIFICATION	8.16954403055035E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992310513842387	WITHOUT_CLASSIFICATION	7.68948615761166E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999642515167961	WITHOUT_CLASSIFICATION	3.574848320378802E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992310513842387	WITHOUT_CLASSIFICATION	7.68948615761166E-4	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999992933623524	WITHOUT_CLASSIFICATION	7.066376476362232E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997576917583	WITHOUT_CLASSIFICATION	2.423082416414414E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998388424455479	WITHOUT_CLASSIFICATION	1.6115755445218955E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999947778011771	WITHOUT_CLASSIFICATION	5.2221988229216565E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999985337586111	WITHOUT_CLASSIFICATION	1.4662413889212185E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999967389204931	WITHOUT_CLASSIFICATION	3.2610795067997206E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999920971991574	WITHOUT_CLASSIFICATION	7.902800842664482E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999966587568351	WITHOUT_CLASSIFICATION	3.3412431648957054E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999993021720286	WITHOUT_CLASSIFICATION	6.978279713989483E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9995107118768191	WITHOUT_CLASSIFICATION	4.892881231809181E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999936939111558	WITHOUT_CLASSIFICATION	6.306088844198147E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9979924867682014	WITHOUT_CLASSIFICATION	0.0020075132317986136	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9702053168930885	WITHOUT_CLASSIFICATION	0.029794683106911427	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999367247686965	WITHOUT_CLASSIFICATION	6.327523130340154E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9996795476121317	WITHOUT_CLASSIFICATION	3.2045238786815506E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998875080159491	WITHOUT_CLASSIFICATION	1.124919840510146E-4	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999838439286464	WITHOUT_CLASSIFICATION	1.6156071353717062E-5	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999929337755057	WITHOUT_CLASSIFICATION	7.066224494212278E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999760007065835	WITHOUT_CLASSIFICATION	2.3999293416525846E-5	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999845534654405	WITHOUT_CLASSIFICATION	1.5446534559506073E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8479956342567122	WITHOUT_CLASSIFICATION	0.1520043657432879	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999877393311	WITHOUT_CLASSIFICATION	1.2260668908964961E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9996784138436603	WITHOUT_CLASSIFICATION	3.2158615633971527E-4	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.8223498742164925	WITHOUT_CLASSIFICATION	0.1776501257835074	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999482344765	WITHOUT_CLASSIFICATION	5.17655235813241E-8	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999994667176376	WITHOUT_CLASSIFICATION	5.332823622648139E-7	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998726523147	WITHOUT_CLASSIFICATION	1.2734768527761677E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999925681209499	WITHOUT_CLASSIFICATION	7.431879050102861E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.999917749820335	WITHOUT_CLASSIFICATION	8.225017966505206E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998416732748	WITHOUT_CLASSIFICATION	1.5832672517196716E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997653647666085	WITHOUT_CLASSIFICATION	2.3463523339150403E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999939900735767	WITHOUT_CLASSIFICATION	6.009926423350995E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9953608235594905	WITHOUT_CLASSIFICATION	0.004639176440509387	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999737318098352	WITHOUT_CLASSIFICATION	2.62681901648092E-5	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9989743321158788	WITHOUT_CLASSIFICATION	0.0010256678841210794	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999465954249	WITHOUT_CLASSIFICATION	5.3404575095068855E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999936015427858	WITHOUT_CLASSIFICATION	6.398457214197951E-5	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9980467949391311	WITHOUT_CLASSIFICATION	0.0019532050608688217	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999165728772357	WITHOUT_CLASSIFICATION	8.342712276430388E-5	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999645582441375	WITHOUT_CLASSIFICATION	3.544175586245621E-5	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8641028465929819	WITHOUT_CLASSIFICATION	0.13589715340701825	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998541617013	WITHOUT_CLASSIFICATION	1.4583829859195274E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9513256966918107	DESIGN	0.04867430330818931	WITHOUT_CLASSIFICATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999785987279133	WITHOUT_CLASSIFICATION	2.1401272086813425E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999785987279133	WITHOUT_CLASSIFICATION	2.1401272086813425E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999787298265	WITHOUT_CLASSIFICATION	2.1270173490231426E-8	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.999966587568351	WITHOUT_CLASSIFICATION	3.3412431648957054E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9269730465811877	WITHOUT_CLASSIFICATION	0.07302695341881228	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999998029494702	WITHOUT_CLASSIFICATION	1.9705052974001504E-7	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999590127275	WITHOUT_CLASSIFICATION	4.098727239772576E-8	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999996679713223	WITHOUT_CLASSIFICATION	3.3202867774656505E-7	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9997949948886843	WITHOUT_CLASSIFICATION	2.0500511131576622E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9995637197356791	WITHOUT_CLASSIFICATION	4.3628026432086494E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999994673054282	WITHOUT_CLASSIFICATION	5.326945717375246E-7	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9912946507963819	WITHOUT_CLASSIFICATION	0.008705349203618068	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998633354951728	WITHOUT_CLASSIFICATION	1.3666450482711012E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999610824268262	WITHOUT_CLASSIFICATION	3.8917573173786286E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9719207036074761	WITHOUT_CLASSIFICATION	0.028079296392523958	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999978751469717	WITHOUT_CLASSIFICATION	2.124853028303148E-6	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999928894842183	WITHOUT_CLASSIFICATION	7.110515781706033E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999502955111	WITHOUT_CLASSIFICATION	4.9704488814712985E-8	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999364001141	WITHOUT_CLASSIFICATION	6.35998858828817E-8	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999871097748	WITHOUT_CLASSIFICATION	1.2890225066925955E-8	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999992431193246	WITHOUT_CLASSIFICATION	7.568806752814767E-7	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.991727765342018	WITHOUT_CLASSIFICATION	0.008272234657981962	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999986265313181	WITHOUT_CLASSIFICATION	1.3734686819383535E-6	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999828866141157	WITHOUT_CLASSIFICATION	1.711338588426869E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999991612615152	WITHOUT_CLASSIFICATION	8.387384848338147E-7	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999924688378	WITHOUT_CLASSIFICATION	7.531162325267767E-9	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8641028465929819	WITHOUT_CLASSIFICATION	0.13589715340701825	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999968342876824	WITHOUT_CLASSIFICATION	3.1657123175761155E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999363643719074	WITHOUT_CLASSIFICATION	6.36356280926947E-5	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.99999993588745	WITHOUT_CLASSIFICATION	6.411255003506085E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999968076838511	WITHOUT_CLASSIFICATION	3.1923161487596446E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9992504304332211	WITHOUT_CLASSIFICATION	7.49569566778738E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999644031909163	WITHOUT_CLASSIFICATION	3.55968090837327E-5	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999989800661031	WITHOUT_CLASSIFICATION	1.0199338969329321E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999955566221252	WITHOUT_CLASSIFICATION	4.443377874669837E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.999999659270291	WITHOUT_CLASSIFICATION	3.4072970895139805E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.99995422439624	WITHOUT_CLASSIFICATION	4.577560375996677E-5	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998676813084	WITHOUT_CLASSIFICATION	1.3231869147924764E-7	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999933284652	WITHOUT_CLASSIFICATION	6.671534798517167E-9	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997064343055893	WITHOUT_CLASSIFICATION	2.935656944106765E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.986687747468287	WITHOUT_CLASSIFICATION	0.013312252531712953	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999798484281328	WITHOUT_CLASSIFICATION	2.015157186718259E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999798484281328	WITHOUT_CLASSIFICATION	2.015157186718259E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998273589079937	WITHOUT_CLASSIFICATION	1.7264109200633806E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999523221186788	WITHOUT_CLASSIFICATION	4.767788132119442E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998997563732517	WITHOUT_CLASSIFICATION	1.0024362674827404E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998997563732517	WITHOUT_CLASSIFICATION	1.0024362674827404E-4	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9998490649122168	WITHOUT_CLASSIFICATION	1.509350877831898E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.999610233606783	WITHOUT_CLASSIFICATION	3.8976639321688873E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7742290355144072	DESIGN	0.22577096448559275	WITHOUT_CLASSIFICATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999927021469673	WITHOUT_CLASSIFICATION	7.297853032625157E-6	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999996317438709	WITHOUT_CLASSIFICATION	3.68256129251002E-7	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999879226118	WITHOUT_CLASSIFICATION	1.2077388170903228E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999919192560842	WITHOUT_CLASSIFICATION	8.080743915705115E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999919192560842	WITHOUT_CLASSIFICATION	8.080743915705115E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999756251259	WITHOUT_CLASSIFICATION	2.437487411035343E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9581674745176655	WITHOUT_CLASSIFICATION	0.041832525482334564	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999969721082459	WITHOUT_CLASSIFICATION	3.0278917541536113E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999807736009434	WITHOUT_CLASSIFICATION	1.9226399056632996E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999807736009434	WITHOUT_CLASSIFICATION	1.9226399056632996E-5	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.999999127575537	WITHOUT_CLASSIFICATION	8.724244631295796E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999933489412894	WITHOUT_CLASSIFICATION	6.651058710658836E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9958108023423279	WITHOUT_CLASSIFICATION	0.004189197657672066	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999962018448089	WITHOUT_CLASSIFICATION	3.798155191147569E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9973461382127732	WITHOUT_CLASSIFICATION	0.00265386178722691	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999501054811287	WITHOUT_CLASSIFICATION	4.989451887128117E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998741584805021	WITHOUT_CLASSIFICATION	1.258415194979257E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9998763108091321	WITHOUT_CLASSIFICATION	1.2368919086799138E-4	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9987991301956444	WITHOUT_CLASSIFICATION	0.0012008698043557242	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998517751956585	WITHOUT_CLASSIFICATION	1.4822480434144514E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9938443013159273	WITHOUT_CLASSIFICATION	0.00615569868407275	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9990822898113868	WITHOUT_CLASSIFICATION	9.177101886132623E-4	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9996925818661327	WITHOUT_CLASSIFICATION	3.0741813386726786E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998202030621293	WITHOUT_CLASSIFICATION	1.797969378708452E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999717326836064	WITHOUT_CLASSIFICATION	2.8267316393593297E-5	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999965166089	WITHOUT_CLASSIFICATION	3.4833910812217157E-9	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999491253784886	WITHOUT_CLASSIFICATION	5.0874621511487716E-5	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999982288929	WITHOUT_CLASSIFICATION	1.7711071866287336E-9	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999997960925116	WITHOUT_CLASSIFICATION	2.039074884965851E-7	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999962887939546	WITHOUT_CLASSIFICATION	3.711206045323268E-6	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999987482163349	WITHOUT_CLASSIFICATION	1.251783665008706E-6	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9900728647641188	WITHOUT_CLASSIFICATION	0.009927135235881155	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9906400079190106	WITHOUT_CLASSIFICATION	0.009359992080989456	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999999763713322	WITHOUT_CLASSIFICATION	2.362866783292349E-8	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9840932969958345	WITHOUT_CLASSIFICATION	0.015906703004165502	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9998819949716244	WITHOUT_CLASSIFICATION	1.1800502837555826E-4	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999937691970404	WITHOUT_CLASSIFICATION	6.230802959656403E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999904394826158	WITHOUT_CLASSIFICATION	9.560517384274014E-6	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999996683590073	WITHOUT_CLASSIFICATION	3.316409926433172E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998330380760122	WITHOUT_CLASSIFICATION	1.6696192398773187E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6256211905784578	WITHOUT_CLASSIFICATION	0.37437880942154217	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999912962192397	WITHOUT_CLASSIFICATION	8.70378076026562E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999996326272478	WITHOUT_CLASSIFICATION	3.673727521420499E-7	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9995760632487148	WITHOUT_CLASSIFICATION	4.2393675128510555E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999792638916434	WITHOUT_CLASSIFICATION	2.073610835662575E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998646516494142	WITHOUT_CLASSIFICATION	1.3534835058587625E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.995082786189755	WITHOUT_CLASSIFICATION	0.004917213810245015	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999996628932047	WITHOUT_CLASSIFICATION	3.371067952652666E-7	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999979433097224	WITHOUT_CLASSIFICATION	2.0566902777563986E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999419482017072	WITHOUT_CLASSIFICATION	5.805179829277954E-5	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999446624815984	WITHOUT_CLASSIFICATION	5.533751840156059E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999982384254942	WITHOUT_CLASSIFICATION	1.7615745058028666E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9997942608250745	WITHOUT_CLASSIFICATION	2.057391749254895E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999216762066611	WITHOUT_CLASSIFICATION	7.832379333891292E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999995899531875	WITHOUT_CLASSIFICATION	4.100468125490388E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999774634707375	WITHOUT_CLASSIFICATION	2.253652926251474E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999943655292184	WITHOUT_CLASSIFICATION	5.634470781550634E-6	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9961226532529125	WITHOUT_CLASSIFICATION	0.0038773467470876234	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999850932576062	WITHOUT_CLASSIFICATION	1.4906742393874602E-5	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999993158162	WITHOUT_CLASSIFICATION	6.841837765667334E-10	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9997250191387613	WITHOUT_CLASSIFICATION	2.7498086123871584E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999961846220868	WITHOUT_CLASSIFICATION	3.81537791310919E-6	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999999999330289	WITHOUT_CLASSIFICATION	6.697109132433552E-10	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999998365329	WITHOUT_CLASSIFICATION	1.634670496821436E-10	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999983470122147	WITHOUT_CLASSIFICATION	1.652987785331241E-6	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999783740980354	WITHOUT_CLASSIFICATION	2.1625901964679222E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999363128377242	WITHOUT_CLASSIFICATION	6.368716227580608E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999718351700392	WITHOUT_CLASSIFICATION	2.8164829960846556E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999815111265853	WITHOUT_CLASSIFICATION	1.848887341475038E-5	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999978147570009	WITHOUT_CLASSIFICATION	2.1852429991003578E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999326668946	WITHOUT_CLASSIFICATION	6.733310537163706E-8	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999326668946	WITHOUT_CLASSIFICATION	6.733310537163706E-8	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999939231812	WITHOUT_CLASSIFICATION	6.076818803705295E-8	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.999842972965656	WITHOUT_CLASSIFICATION	1.5702703434390588E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999995315099511	WITHOUT_CLASSIFICATION	4.6849004893121886E-7	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999118633112698	WITHOUT_CLASSIFICATION	8.813668873022458E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999977110633	WITHOUT_CLASSIFICATION	2.288936571088915E-9	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999911561955438	WITHOUT_CLASSIFICATION	8.843804456182925E-6	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999998854345526	WITHOUT_CLASSIFICATION	1.1456544739519873E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999999926793	WITHOUT_CLASSIFICATION	7.320697697215652E-11	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999139490154	WITHOUT_CLASSIFICATION	8.605098460637171E-8	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999172103373	WITHOUT_CLASSIFICATION	8.278966269118053E-8	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9956349526323888	WITHOUT_CLASSIFICATION	0.00436504736761121	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999831123455719	WITHOUT_CLASSIFICATION	1.688765442802487E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999982622308	WITHOUT_CLASSIFICATION	1.7377691495634641E-9	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9956066964181448	WITHOUT_CLASSIFICATION	0.004393303581855259	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999869417218068	WITHOUT_CLASSIFICATION	1.305827819319426E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999869417218068	WITHOUT_CLASSIFICATION	1.305827819319426E-5	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999999887185119	WITHOUT_CLASSIFICATION	1.1281488103387451E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999966379701222	WITHOUT_CLASSIFICATION	3.3620298777556665E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999987636746	WITHOUT_CLASSIFICATION	1.2363253830508122E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999998859533449	WITHOUT_CLASSIFICATION	1.1404665514357246E-7	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999965480256252	WITHOUT_CLASSIFICATION	3.4519743749004783E-6	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926757623839	WITHOUT_CLASSIFICATION	7.324237616101435E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999976508140627	WITHOUT_CLASSIFICATION	2.349185937422555E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.8224834972956413	WITHOUT_CLASSIFICATION	0.17751650270435876	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9997150017520819	WITHOUT_CLASSIFICATION	2.8499824791808836E-4	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999998604073	WITHOUT_CLASSIFICATION	1.395927336585562E-10	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999986493757	WITHOUT_CLASSIFICATION	1.3506242492800236E-9	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999985513036401	WITHOUT_CLASSIFICATION	1.448696359893749E-6	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999997529883	WITHOUT_CLASSIFICATION	2.470118045328667E-10	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999991832144426	WITHOUT_CLASSIFICATION	8.167855573631391E-7	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.998958629512967	DESIGN	0.0010413704870329663	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998750716553383	WITHOUT_CLASSIFICATION	1.2492834466177463E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.6379777321244579	DESIGN	0.36202226787554226	WITHOUT_CLASSIFICATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999935367413073	WITHOUT_CLASSIFICATION	6.463258692597539E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999992343582118	WITHOUT_CLASSIFICATION	7.656417882031373E-6	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999998618524129	WITHOUT_CLASSIFICATION	1.3814758714545537E-7	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999898764730358	WITHOUT_CLASSIFICATION	1.01235269641661E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999999908388	WITHOUT_CLASSIFICATION	9.161198811740605E-11	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9987742231243671	WITHOUT_CLASSIFICATION	0.0012257768756329028	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9996401513017618	WITHOUT_CLASSIFICATION	3.5984869823830026E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9971488948508748	WITHOUT_CLASSIFICATION	0.002851105149125149	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9997302820150482	WITHOUT_CLASSIFICATION	2.697179849517586E-4	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999999999912288	WITHOUT_CLASSIFICATION	8.771198570841065E-11	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.998786620847996	WITHOUT_CLASSIFICATION	0.0012133791520039631	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999965463906665	WITHOUT_CLASSIFICATION	3.453609333416177E-6	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9990059367485935	WITHOUT_CLASSIFICATION	9.940632514065344E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996578051120747	WITHOUT_CLASSIFICATION	3.421948879252736E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999853640454	WITHOUT_CLASSIFICATION	1.463595457781855E-8	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999998768507774	WITHOUT_CLASSIFICATION	1.2314922258950625E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999989883253574	WITHOUT_CLASSIFICATION	1.0116746426131126E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.519644045848286	WITHOUT_CLASSIFICATION	0.48035595415171395	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998903076392184	WITHOUT_CLASSIFICATION	1.0969236078153355E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999620851441882	WITHOUT_CLASSIFICATION	3.7914855811836914E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999997679021736	WITHOUT_CLASSIFICATION	2.3209782642117966E-7	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999998129235339	WITHOUT_CLASSIFICATION	1.8707646613354718E-7	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.8944542676498697	WITHOUT_CLASSIFICATION	0.10554573235013032	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998214417976775	WITHOUT_CLASSIFICATION	1.7855820232253228E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998214417976775	WITHOUT_CLASSIFICATION	1.7855820232253228E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999773886107	WITHOUT_CLASSIFICATION	2.2611389345239848E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999032918281663	WITHOUT_CLASSIFICATION	9.67081718337387E-5	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.986510273423048	WITHOUT_CLASSIFICATION	0.013489726576951876	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9939592157776743	WITHOUT_CLASSIFICATION	0.006040784222325693	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999964809273248	WITHOUT_CLASSIFICATION	3.5190726751301047E-6	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999992670521989	WITHOUT_CLASSIFICATION	7.329478010354688E-7	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999718006394993	WITHOUT_CLASSIFICATION	2.8199360500618475E-5	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999581715153201	WITHOUT_CLASSIFICATION	4.182848467985937E-5	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9978686577451671	DESIGN	0.002131342254832967	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996539815145	WITHOUT_CLASSIFICATION	3.460184855521611E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994176480034	WITHOUT_CLASSIFICATION	5.823519966847145E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996345412590821	WITHOUT_CLASSIFICATION	3.6545874091785987E-4	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999973426157474	WITHOUT_CLASSIFICATION	2.6573842526015313E-6	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999952867563	WITHOUT_CLASSIFICATION	4.713243711873254E-9	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999657690800933	WITHOUT_CLASSIFICATION	3.423091990667145E-5	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9984594354453555	WITHOUT_CLASSIFICATION	0.0015405645546444405	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9510079597317317	WITHOUT_CLASSIFICATION	0.04899204026826826	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999517675237	WITHOUT_CLASSIFICATION	4.8232476310898736E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999988157975032	WITHOUT_CLASSIFICATION	1.1842024968003618E-6	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.999978511003992	WITHOUT_CLASSIFICATION	2.1488996007922844E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.7428454427634786	WITHOUT_CLASSIFICATION	0.25715455723652136	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999960590346573	WITHOUT_CLASSIFICATION	3.9409653427940204E-6	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.8412919027700281	WITHOUT_CLASSIFICATION	0.1587080972299719	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9819774185236622	WITHOUT_CLASSIFICATION	0.018022581476337826	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9995076899412305	WITHOUT_CLASSIFICATION	4.923100587694991E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9993485646257321	WITHOUT_CLASSIFICATION	6.51435374267814E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999995392413862	WITHOUT_CLASSIFICATION	4.607586139122638E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999999205007	WITHOUT_CLASSIFICATION	7.949927355990183E-11	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9967347136095726	WITHOUT_CLASSIFICATION	0.0032652863904273906	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9985958353627906	WITHOUT_CLASSIFICATION	0.0014041646372094253	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9998605769674839	WITHOUT_CLASSIFICATION	1.3942303251606857E-4	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9991588565205601	WITHOUT_CLASSIFICATION	8.411434794399545E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9996777935677094	WITHOUT_CLASSIFICATION	3.2220643229067516E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999285006376794	WITHOUT_CLASSIFICATION	7.149936232065696E-5	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999381734886533	WITHOUT_CLASSIFICATION	6.18265113466555E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999954416084785	WITHOUT_CLASSIFICATION	4.558391521388624E-6	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999950783545132	WITHOUT_CLASSIFICATION	4.921645486808334E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999998009316	WITHOUT_CLASSIFICATION	1.9906847750025723E-10	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9997880765129145	WITHOUT_CLASSIFICATION	2.119234870856138E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998319188086828	WITHOUT_CLASSIFICATION	1.68081191317104E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999923779762	WITHOUT_CLASSIFICATION	7.622023890229165E-9	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999826255272206	WITHOUT_CLASSIFICATION	1.737447277945059E-5	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999671076217	WITHOUT_CLASSIFICATION	3.2892378343995984E-8	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999981922604	WITHOUT_CLASSIFICATION	1.8077396176933866E-9	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9990318433888882	WITHOUT_CLASSIFICATION	9.681566111118312E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9994905930030512	WITHOUT_CLASSIFICATION	5.094069969488389E-4	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999975259312492	WITHOUT_CLASSIFICATION	2.4740687506767184E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999982622308	WITHOUT_CLASSIFICATION	1.7377691495634641E-9	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999981550433	WITHOUT_CLASSIFICATION	1.8449567098682078E-9	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999726744543	WITHOUT_CLASSIFICATION	2.7325545634429266E-8	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9994426637480724	WITHOUT_CLASSIFICATION	5.573362519276351E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9895065865262166	WITHOUT_CLASSIFICATION	0.010493413473783443	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999999384003	WITHOUT_CLASSIFICATION	6.159978654522835E-11	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999994448415608	WITHOUT_CLASSIFICATION	5.551584391860307E-6	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999944855446807	WITHOUT_CLASSIFICATION	5.5144553192102206E-6	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999772809748	WITHOUT_CLASSIFICATION	2.2719025173271374E-8	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996316234525	WITHOUT_CLASSIFICATION	3.6837654753206977E-7	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999994713702056	WITHOUT_CLASSIFICATION	5.286297944457186E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9993104159692994	WITHOUT_CLASSIFICATION	6.895840307007121E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9751469827440823	WITHOUT_CLASSIFICATION	0.024853017255917688	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999991576457653	WITHOUT_CLASSIFICATION	8.423542347235987E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999999433371216	WITHOUT_CLASSIFICATION	5.666287840125356E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999939168447	WITHOUT_CLASSIFICATION	6.08315529942163E-7	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999343500577	WITHOUT_CLASSIFICATION	6.564994224585989E-8	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999789334523	WITHOUT_CLASSIFICATION	2.1066547680902592E-8	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999846475740015	WITHOUT_CLASSIFICATION	1.535242599842391E-5	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998964907779149	WITHOUT_CLASSIFICATION	1.035092220850408E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999939168447	WITHOUT_CLASSIFICATION	6.08315529942163E-7	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999999192441654	WITHOUT_CLASSIFICATION	8.075583459527541E-7	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999988209786	WITHOUT_CLASSIFICATION	1.179021400559348E-9	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999641247207918	WITHOUT_CLASSIFICATION	3.587527920819341E-5	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999969592692951	WITHOUT_CLASSIFICATION	3.040730704807709E-6	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999938524973094	WITHOUT_CLASSIFICATION	6.147502690593965E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9801633395818629	WITHOUT_CLASSIFICATION	0.01983666041813723	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999534986576	WITHOUT_CLASSIFICATION	4.650134245391158E-8	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9648718834881769	DESIGN	0.03512811651182304	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999569947483	WITHOUT_CLASSIFICATION	4.300525178465706E-8	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999901624829	WITHOUT_CLASSIFICATION	9.837517111341128E-9	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999650760138775	WITHOUT_CLASSIFICATION	3.4923986122436215E-5	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9671769114934561	WITHOUT_CLASSIFICATION	0.03282308850654388	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999991619129394	WITHOUT_CLASSIFICATION	8.380870605529873E-7	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999874558911167	WITHOUT_CLASSIFICATION	1.2544108883297397E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999958717623155	WITHOUT_CLASSIFICATION	4.128237684474492E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999924688378	WITHOUT_CLASSIFICATION	7.531162325267767E-9	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999993925762006	WITHOUT_CLASSIFICATION	6.07423799412148E-6	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999997070537446	WITHOUT_CLASSIFICATION	2.9294625534796834E-7	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9985668315910815	WITHOUT_CLASSIFICATION	0.0014331684089184903	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9684371228698533	WITHOUT_CLASSIFICATION	0.031562877130146584	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999996809929005	WITHOUT_CLASSIFICATION	3.190070995284259E-7	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999879263354	WITHOUT_CLASSIFICATION	1.2073664613918125E-8	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999806926566941	WITHOUT_CLASSIFICATION	1.9307343305961025E-5	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999838921049	WITHOUT_CLASSIFICATION	1.6107895166732232E-8	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999997217457	WITHOUT_CLASSIFICATION	2.7825432270899764E-10	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999959852631	WITHOUT_CLASSIFICATION	4.014736928581445E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999460951149072	WITHOUT_CLASSIFICATION	5.3904885092823676E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999878453806837	WITHOUT_CLASSIFICATION	1.2154619316360039E-5	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.8344885335063978	DESIGN	0.16551146649360204	WITHOUT_CLASSIFICATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999570638590354	WITHOUT_CLASSIFICATION	4.2936140964565463E-5	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999928901395801	WITHOUT_CLASSIFICATION	7.1098604199041424E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.625703770502353	DESIGN	0.37429622949764696	WITHOUT_CLASSIFICATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.99993094257863	WITHOUT_CLASSIFICATION	6.9057421369963E-5	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999093000888087	WITHOUT_CLASSIFICATION	9.069991119125615E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999994432794	WITHOUT_CLASSIFICATION	5.567205527387301E-10	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999984433465	WITHOUT_CLASSIFICATION	1.5566535027957949E-9	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9997150934421152	WITHOUT_CLASSIFICATION	2.8490655788487434E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.815612423967562	WITHOUT_CLASSIFICATION	0.1843875760324381	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999561556536	WITHOUT_CLASSIFICATION	4.3844346363855705E-8	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999988291711	WITHOUT_CLASSIFICATION	1.1708288323176481E-9	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999902566353928	WITHOUT_CLASSIFICATION	9.743364607229382E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999902566353928	WITHOUT_CLASSIFICATION	9.743364607229382E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998337532247585	WITHOUT_CLASSIFICATION	1.6624677524149493E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999846038573	WITHOUT_CLASSIFICATION	1.539614270201037E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999994542015835	WITHOUT_CLASSIFICATION	5.457984164882041E-7	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8959150501416315	DESIGN	0.10408494985836846	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999997086649229	WITHOUT_CLASSIFICATION	2.9133507716153717E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997086649229	WITHOUT_CLASSIFICATION	2.9133507716153717E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999982885934299	WITHOUT_CLASSIFICATION	1.7114065702051827E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999834453641169	WITHOUT_CLASSIFICATION	1.6554635883191433E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9945979345678813	WITHOUT_CLASSIFICATION	0.005402065432118812	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999458940948361	WITHOUT_CLASSIFICATION	5.410590516397406E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999995930428372	WITHOUT_CLASSIFICATION	4.069571628022671E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999986049285694	WITHOUT_CLASSIFICATION	1.3950714305502556E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999836304492841	WITHOUT_CLASSIFICATION	1.6369550715937627E-5	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999993676123378	WITHOUT_CLASSIFICATION	6.323876622468433E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9996698303460109	WITHOUT_CLASSIFICATION	3.301696539890693E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997770783773	WITHOUT_CLASSIFICATION	2.2292162269747998E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997770783773	WITHOUT_CLASSIFICATION	2.2292162269747998E-7	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9994578508870456	WITHOUT_CLASSIFICATION	5.421491129543187E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999959742367525	WITHOUT_CLASSIFICATION	4.02576324753682E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999958461193375	WITHOUT_CLASSIFICATION	4.153880662557747E-6	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9849653745109079	WITHOUT_CLASSIFICATION	0.015034625489092068	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.5393969609550009	WITHOUT_CLASSIFICATION	0.46060303904499905	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994130028512334	WITHOUT_CLASSIFICATION	5.86997148766538E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971081977616	WITHOUT_CLASSIFICATION	2.891802238428096E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998462808599	WITHOUT_CLASSIFICATION	1.5371914014769714E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999471988004323	WITHOUT_CLASSIFICATION	5.2801199567845835E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.6604727504840383	DESIGN	0.33952724951596175	WITHOUT_CLASSIFICATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9891514444781462	WITHOUT_CLASSIFICATION	0.010848555521853867	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999901624829	WITHOUT_CLASSIFICATION	9.837517111341128E-9	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9376473323823787	DESIGN	0.06235266761762138	WITHOUT_CLASSIFICATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9997411598818342	WITHOUT_CLASSIFICATION	2.5884011816574003E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999885955081	WITHOUT_CLASSIFICATION	1.1404491798325168E-8	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.999968945912455	WITHOUT_CLASSIFICATION	3.105408754492224E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999997145145	WITHOUT_CLASSIFICATION	2.8548561283576234E-10	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999950002532894	WITHOUT_CLASSIFICATION	4.999746710649728E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.975561154563518	WITHOUT_CLASSIFICATION	0.024438845436481987	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9961584465634055	WITHOUT_CLASSIFICATION	0.0038415534365946148	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999997822264669	WITHOUT_CLASSIFICATION	2.1777353315484408E-7	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997429878940418	WITHOUT_CLASSIFICATION	2.570121059581227E-4	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997429878940418	WITHOUT_CLASSIFICATION	2.570121059581227E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999447213076899	WITHOUT_CLASSIFICATION	5.527869231013591E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999998507605	WITHOUT_CLASSIFICATION	1.4923949477304808E-10	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9988895624851927	WITHOUT_CLASSIFICATION	0.0011104375148073243	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999870299934256	WITHOUT_CLASSIFICATION	1.2970006574452741E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999995573040104	WITHOUT_CLASSIFICATION	4.4269598973848093E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999991015338006	WITHOUT_CLASSIFICATION	8.984661994392776E-7	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.99999918362847	WITHOUT_CLASSIFICATION	8.16371530059263E-7	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9881976344654543	WITHOUT_CLASSIFICATION	0.011802365534545686	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9995342934550464	WITHOUT_CLASSIFICATION	4.6570654495355215E-4	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999519024444378	WITHOUT_CLASSIFICATION	4.809755556227143E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992310513842387	WITHOUT_CLASSIFICATION	7.68948615761166E-4	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9995765546873874	DESIGN	4.2344531261251616E-4	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8229974134914034	DESIGN	0.17700258650859657	WITHOUT_CLASSIFICATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999998951093	WITHOUT_CLASSIFICATION	1.048906489988299E-10	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.6415876021360195	DESIGN	0.35841239786398066	WITHOUT_CLASSIFICATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999509537728142	WITHOUT_CLASSIFICATION	4.904622718581325E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.809401304681824	WITHOUT_CLASSIFICATION	0.19059869531817605	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999977462516696	WITHOUT_CLASSIFICATION	2.2537483304174067E-6	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999965321999648	WITHOUT_CLASSIFICATION	3.4678000353511022E-6	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9998268420990163	WITHOUT_CLASSIFICATION	1.7315790098375015E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999992566760535	WITHOUT_CLASSIFICATION	7.433239465466436E-7	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999965001192038	WITHOUT_CLASSIFICATION	3.4998807960497043E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9958108023423279	WITHOUT_CLASSIFICATION	0.004189197657672066	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999969727776	WITHOUT_CLASSIFICATION	3.027222400415312E-8	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990606217822	WITHOUT_CLASSIFICATION	9.393782178146017E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999990606217822	WITHOUT_CLASSIFICATION	9.393782178146017E-7	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9967936173865422	WITHOUT_CLASSIFICATION	0.0032063826134578273	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.6015794196206626	WITHOUT_CLASSIFICATION	0.39842058037933736	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9996241062353954	WITHOUT_CLASSIFICATION	3.758937646045086E-4	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.999949582663032	WITHOUT_CLASSIFICATION	5.041733696784397E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998063819706707	WITHOUT_CLASSIFICATION	1.936180293291377E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9944728868478615	WITHOUT_CLASSIFICATION	0.00552711315213842	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7926838735936839	DESIGN	0.20731612640631603	WITHOUT_CLASSIFICATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9893678791538728	WITHOUT_CLASSIFICATION	0.010632120846127174	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8437738319389964	DESIGN	0.15622616806100362	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8437738319389964	DESIGN	0.15622616806100362	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9987799475899971	WITHOUT_CLASSIFICATION	0.0012200524100028304	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999953673573532	WITHOUT_CLASSIFICATION	4.632642646751624E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.5791605638467869	DESIGN	0.4208394361532131	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999983308162149	DESIGN	1.669183785106746E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999983308162149	DESIGN	1.669183785106746E-5	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999725669694	DESIGN	2.743303060840851E-8	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999725669694	DESIGN	2.743303060840851E-8	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9967793542289543	DESIGN	0.0032206457710457583	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9939536028685313	DESIGN	0.006046397131468679	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9939536028685313	DESIGN	0.006046397131468679	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999999282560974	DESIGN	7.174390256032357E-8	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999953673573532	WITHOUT_CLASSIFICATION	4.632642646751624E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.5522571799732376	WITHOUT_CLASSIFICATION	0.4477428200267623	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999399620008019	WITHOUT_CLASSIFICATION	6.003799919809715E-5	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999348241761021	WITHOUT_CLASSIFICATION	6.517582389779015E-5	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.7553093607927669	WITHOUT_CLASSIFICATION	0.24469063920723308	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.8538425804112684	DESIGN	0.14615741958873163	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.99476318658293	WITHOUT_CLASSIFICATION	0.005236813417069954	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9998513204589703	WITHOUT_CLASSIFICATION	1.4867954102971824E-4	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.7505373939167459	WITHOUT_CLASSIFICATION	0.24946260608325396	DESIGN
// todo : what else to do here?	DESIGN	0.9944728868478615	WITHOUT_CLASSIFICATION	0.00552711315213842	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9973920753758874	WITHOUT_CLASSIFICATION	0.002607924624112666	DESIGN
// todo : what else to do here?	DESIGN	0.9944728868478615	WITHOUT_CLASSIFICATION	0.00552711315213842	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9492704285115615	WITHOUT_CLASSIFICATION	0.050729571488438485	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9597764564153853	WITHOUT_CLASSIFICATION	0.040223543584614635	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999423268213345	DESIGN	5.7673178665364535E-5	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7926838735936839	DESIGN	0.20731612640631603	WITHOUT_CLASSIFICATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.6363761506902952	WITHOUT_CLASSIFICATION	0.3636238493097048	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9999948307591545	WITHOUT_CLASSIFICATION	5.169240845414493E-6	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.8234651401146645	WITHOUT_CLASSIFICATION	0.17653485988533554	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8534012838052735	DESIGN	0.14659871619472656	WITHOUT_CLASSIFICATION
// todo : what is the implication of this?	DESIGN	0.8980455088830279	WITHOUT_CLASSIFICATION	0.10195449111697209	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9525967485414772	WITHOUT_CLASSIFICATION	0.04740325145852264	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9932730726893111	DESIGN	0.006726927310688918	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9989459837161206	DESIGN	0.0010540162838793459	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9987804279844109	WITHOUT_CLASSIFICATION	0.0012195720155891059	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.5325420431278951	WITHOUT_CLASSIFICATION	0.46745795687210484	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9516183764642877	DESIGN	0.048381623535712216	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9881811678981807	DESIGN	0.011818832101819316	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9630635328376638	DESIGN	0.036936467162336166	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9979871436401754	DESIGN	0.0020128563598246834	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997522330399895	DESIGN	2.4776696001052654E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999831975923	DESIGN	1.6802407605091354E-8	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.6981055846990135	DESIGN	0.30189441530098654	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.6981055846990135	DESIGN	0.30189441530098654	WITHOUT_CLASSIFICATION
//Icky workaround for MySQL bug:	DESIGN	0.9978841266523555	DESIGN	0.002115873347644388	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9973333295971627	WITHOUT_CLASSIFICATION	0.0026666704028373085	DESIGN
//TODO possibly relax that	DESIGN	0.5157895723292657	WITHOUT_CLASSIFICATION	0.4842104276707342	DESIGN
//TODO possibly relax that	DESIGN	0.5157895723292657	WITHOUT_CLASSIFICATION	0.4842104276707342	DESIGN
//TODO possibly relax that	DESIGN	0.5157895723292657	WITHOUT_CLASSIFICATION	0.4842104276707342	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9997522330399895	DESIGN	2.4776696001052654E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9910255353866206	WITHOUT_CLASSIFICATION	0.008974464613379418	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.779329671610217	DESIGN	0.22067032838978298	WITHOUT_CLASSIFICATION
//note that i parameter is now unused (delete it?)	DESIGN	0.980005652278232	DESIGN	0.019994347721768013	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9999197752745242	WITHOUT_CLASSIFICATION	8.022472547570266E-5	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9163573183515829	DESIGN	0.08364268164841711	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.6213765168077798	WITHOUT_CLASSIFICATION	0.3786234831922202	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8437738319389964	DESIGN	0.15622616806100362	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8437738319389964	DESIGN	0.15622616806100362	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9318270293402199	WITHOUT_CLASSIFICATION	0.0681729706597801	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8437738319389964	DESIGN	0.15622616806100362	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999998794234024	DESIGN	1.2057659754770392E-7	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9743459599981467	WITHOUT_CLASSIFICATION	0.025654040001853347	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9786486006373002	DESIGN	0.021351399362699718	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9996098629907869	WITHOUT_CLASSIFICATION	3.901370092131305E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9224598427721353	WITHOUT_CLASSIFICATION	0.07754015722786471	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9832161028804756	WITHOUT_CLASSIFICATION	0.01678389711952446	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9911672531922404	WITHOUT_CLASSIFICATION	0.008832746807759608	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999925159259135	WITHOUT_CLASSIFICATION	7.48407408652365E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9995460484481229	WITHOUT_CLASSIFICATION	4.5395155187716313E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9805942799788824	WITHOUT_CLASSIFICATION	0.019405720021117682	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9991486202062008	WITHOUT_CLASSIFICATION	8.513797937992098E-4	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9867075900407709	WITHOUT_CLASSIFICATION	0.013292409959229135	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9773939923009313	WITHOUT_CLASSIFICATION	0.02260600769906865	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9977845712597243	WITHOUT_CLASSIFICATION	0.0022154287402757467	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9965547602594745	WITHOUT_CLASSIFICATION	0.0034452397405254306	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9973255609648819	DESIGN	0.0026744390351181825	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9998616421141292	WITHOUT_CLASSIFICATION	1.383578858708941E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6993690460124689	DESIGN	0.3006309539875312	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9990386854305391	DESIGN	9.613145694609584E-4	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.5293882585475544	DESIGN	0.4706117414524455	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9922208757002516	DESIGN	0.007779124299748441	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9996650506366881	WITHOUT_CLASSIFICATION	3.349493633119275E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9997935102211228	WITHOUT_CLASSIFICATION	2.0648977887717426E-4	DESIGN
//I suppose?	DESIGN	0.9902899151999267	WITHOUT_CLASSIFICATION	0.009710084800073236	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9986205745655881	DESIGN	0.0013794254344119865	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9485296143352592	WITHOUT_CLASSIFICATION	0.05147038566474093	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9931673409869123	DESIGN	0.0068326590130877995	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9994656488420742	WITHOUT_CLASSIFICATION	5.343511579258664E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.999724727214688	DESIGN	2.752727853120152E-4	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.98830846878268	DESIGN	0.011691531217320063	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9918825373844298	WITHOUT_CLASSIFICATION	0.008117462615570298	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.999845777326463	DESIGN	1.542226735370165E-4	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.999845777326463	DESIGN	1.542226735370165E-4	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9958594162790609	DESIGN	0.004140583720939087	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.6413661124568626	WITHOUT_CLASSIFICATION	0.3586338875431376	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.6413661124568626	WITHOUT_CLASSIFICATION	0.3586338875431376	DESIGN
//TODO: ugly here:	DESIGN	0.9956552752487464	DESIGN	0.004344724751253538	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9855917606274013	WITHOUT_CLASSIFICATION	0.014408239372598745	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9183576868389073	DESIGN	0.08164231316109274	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9910439163702898	DESIGN	0.008956083629710225	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9977739902046799	WITHOUT_CLASSIFICATION	0.0022260097953199446	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9763296919189096	DESIGN	0.023670308081090434	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.7148180986271874	DESIGN	0.2851819013728127	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9978987106106173	DESIGN	0.002101289389382763	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.998580932296222	DESIGN	0.0014190677037780016	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9144731593949756	DESIGN	0.08552684060502434	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9242009523827376	DESIGN	0.0757990476172624	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.9994335375623622	DESIGN	5.664624376377556E-4	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.6355520155339016	WITHOUT_CLASSIFICATION	0.3644479844660984	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999987397212419	DESIGN	1.2602787580422304E-6	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999259823728315	DESIGN	7.401762716851239E-5	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.8448541239381522	DESIGN	0.15514587606184782	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999005790726051	WITHOUT_CLASSIFICATION	9.942092739488931E-5	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.8348881037783115	WITHOUT_CLASSIFICATION	0.16511189622168848	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.962882244004342	DESIGN	0.037117755995658044	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9937867614341829	WITHOUT_CLASSIFICATION	0.006213238565817113	DESIGN
//TODO: is this 100% correct?	DESIGN	0.990969625278935	DESIGN	0.009030374721064922	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9993383491416215	WITHOUT_CLASSIFICATION	6.616508583785486E-4	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9975394793575413	DESIGN	0.0024605206424586188	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9904362131809793	DESIGN	0.009563786819020663	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999998229169561	DESIGN	1.7708304386457388E-7	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9969396820997525	DESIGN	0.0030603179002474746	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9555490373228588	DESIGN	0.044450962677141326	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.8460020144029239	DESIGN	0.15399798559707614	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9829138503557211	DESIGN	0.01708614964427885	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999959831657325	DESIGN	4.016834267502416E-6	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9993732635061952	DESIGN	6.267364938048587E-4	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.902435443422393	WITHOUT_CLASSIFICATION	0.09756455657760701	DESIGN
// TODO : better way?!?	DESIGN	0.9999998923840959	DESIGN	1.0761590414334864E-7	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999998913916831	WITHOUT_CLASSIFICATION	1.086083168905961E-7	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9981120340686996	DESIGN	0.0018879659313004002	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999434052099	DESIGN	5.659479008037225E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999980593343	DESIGN	1.9406658548417433E-9	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.8685900987065177	DESIGN	0.13140990129348226	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9994737118940608	DESIGN	5.262881059392151E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999973969356157	WITHOUT_CLASSIFICATION	2.6030643842106318E-6	DESIGN
//yuck!	DESIGN	0.9318270293402199	WITHOUT_CLASSIFICATION	0.0681729706597801	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9991037937240226	WITHOUT_CLASSIFICATION	8.962062759774854E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9997225896773987	DESIGN	2.7741032260135314E-4	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9992980071576665	WITHOUT_CLASSIFICATION	7.019928423334616E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999967456269	DESIGN	3.254373029110273E-9	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999759318607304	DESIGN	2.4068139269570327E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999949645703078	DESIGN	5.035429692201772E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8437738319389964	DESIGN	0.15622616806100362	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9979711565598733	WITHOUT_CLASSIFICATION	0.0020288434401266485	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9996126024245235	WITHOUT_CLASSIFICATION	3.8739757547651035E-4	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999006826720424	DESIGN	9.931732795766413E-5	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9592582971828387	WITHOUT_CLASSIFICATION	0.040741702817161295	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5149895704006451	DESIGN	0.4850104295993549	WITHOUT_CLASSIFICATION
//TODO: is this a bit ugly?	DESIGN	0.9999675151977848	DESIGN	3.248480221524543E-5	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.6890831461501813	WITHOUT_CLASSIFICATION	0.3109168538498187	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999931730613162	DESIGN	6.8269386838396405E-6	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9861391694226938	DESIGN	0.013860830577306192	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999705192764873	DESIGN	2.9480723512719475E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.951322704812722	DESIGN	0.04867729518727813	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9999417786595592	WITHOUT_CLASSIFICATION	5.8221340440699466E-5	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.6911846269568616	DESIGN	0.3088153730431384	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999893827304497	DESIGN	1.06172695502958E-5	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.948269409216881	WITHOUT_CLASSIFICATION	0.05173059078311914	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.5812737204354228	WITHOUT_CLASSIFICATION	0.41872627956457725	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.7279334142587033	DESIGN	0.2720665857412966	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9955636751710242	WITHOUT_CLASSIFICATION	0.004436324828975897	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9999974480675718	DESIGN	2.5519324281472147E-6	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999493508285576	DESIGN	5.0649171442433976E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999997904411215	DESIGN	2.0955887855113142E-7	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.872572099887557	WITHOUT_CLASSIFICATION	0.12742790011244293	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9973097659036881	DESIGN	0.0026902340963118466	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9945000569233791	DESIGN	0.005499943076621049	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9845488601842253	DESIGN	0.015451139815774636	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9985686447483846	WITHOUT_CLASSIFICATION	0.0014313552516154317	DESIGN
// short-circuit for performance...	DESIGN	0.9984579732630144	WITHOUT_CLASSIFICATION	0.0015420267369854962	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9999487310040224	WITHOUT_CLASSIFICATION	5.12689959775648E-5	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.7373246081778358	DESIGN	0.2626753918221642	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.5886937052816001	WITHOUT_CLASSIFICATION	0.4113062947183998	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999999978774	DESIGN	2.1226798082216493E-12	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9824915126745439	DESIGN	0.017508487325455995	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9948353412444607	DESIGN	0.005164658755539268	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8959150501416315	DESIGN	0.10408494985836846	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.99897345401225	WITHOUT_CLASSIFICATION	0.001026545987749926	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9135997289880086	DESIGN	0.08640027101199137	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.997908901877707	WITHOUT_CLASSIFICATION	0.002091098122293025	DESIGN
//use of trim() here is ugly?	DESIGN	0.9730433620996146	WITHOUT_CLASSIFICATION	0.026956637900385393	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.7253443178599875	WITHOUT_CLASSIFICATION	0.27465568214001235	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9997015085334785	WITHOUT_CLASSIFICATION	2.9849146652145863E-4	DESIGN
//TODO: inefficient	DESIGN	0.9511477163119025	DESIGN	0.048852283688097464	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.5637203540134227	DESIGN	0.4362796459865772	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999989841072175	DESIGN	1.015892782417646E-6	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999768780973947	DESIGN	2.31219026053435E-5	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9967543094482039	DESIGN	0.003245690551796156	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999792740987116	DESIGN	2.0725901288433076E-5	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9994492419576813	WITHOUT_CLASSIFICATION	5.507580423187124E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.8338814273748363	DESIGN	0.16611857262516375	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9979709125646474	DESIGN	0.0020290874353524986	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9256082652641082	WITHOUT_CLASSIFICATION	0.07439173473589178	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9997791967303087	DESIGN	2.208032696912586E-4	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999990129692	DESIGN	9.870308471071264E-10	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.7192323844930881	DESIGN	0.2807676155069118	WITHOUT_CLASSIFICATION
// TODO should we just collect these like with the collections above?	DESIGN	0.9999968906788775	DESIGN	3.1093211225739718E-6	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8297569866460824	WITHOUT_CLASSIFICATION	0.1702430133539176	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.957773241940691	WITHOUT_CLASSIFICATION	0.04222675805930897	DESIGN
//create an index on the key columns??	DESIGN	0.9999845968830992	WITHOUT_CLASSIFICATION	1.5403116900812965E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.6254963758811779	DESIGN	0.37450362411882204	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999845968830992	WITHOUT_CLASSIFICATION	1.5403116900812965E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9999991613250051	DESIGN	8.386749950189399E-7	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999950038844017	WITHOUT_CLASSIFICATION	4.99611559827072E-6	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.7592448258499765	DESIGN	0.24075517415002332	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9989412404644582	WITHOUT_CLASSIFICATION	0.0010587595355417809	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9954839551659831	WITHOUT_CLASSIFICATION	0.004516044834016908	DESIGN
// create an index on the key columns??	DESIGN	0.999997969569921	WITHOUT_CLASSIFICATION	2.0304300788816704E-6	DESIGN
// todo : remove	DESIGN	0.9832964033588847	WITHOUT_CLASSIFICATION	0.01670359664111538	DESIGN
// todo : remove	DESIGN	0.9832964033588847	WITHOUT_CLASSIFICATION	0.01670359664111538	DESIGN
// todo : remove	DESIGN	0.9832964033588847	WITHOUT_CLASSIFICATION	0.01670359664111538	DESIGN
// todo : throw exception?	DESIGN	0.6520205361451253	WITHOUT_CLASSIFICATION	0.3479794638548747	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9210660382507359	DESIGN	0.07893396174926418	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9999150009057669	DESIGN	8.499909423301903E-5	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9998677909091567	DESIGN	1.322090908432545E-4	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.5431741763858823	WITHOUT_CLASSIFICATION	0.45682582361411767	DESIGN
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999997241016326	DESIGN	2.7589836739784416E-7	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.8940725565060892	WITHOUT_CLASSIFICATION	0.10592744349391084	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9482570443204946	WITHOUT_CLASSIFICATION	0.05174295567950547	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9855319251390061	DESIGN	0.0144680748609938	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9466002275913303	WITHOUT_CLASSIFICATION	0.05339977240866971	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9799333577962664	DESIGN	0.02006664220373352	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9937665301988712	DESIGN	0.006233469801128773	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999424044751	DESIGN	5.759552480040685E-8	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.7847881696788985	WITHOUT_CLASSIFICATION	0.21521183032110158	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9651907281756427	DESIGN	0.034809271824357405	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.5961072611052138	WITHOUT_CLASSIFICATION	0.4038927388947861	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.7281340596514172	DESIGN	0.27186594034858275	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.8968839091091113	DESIGN	0.10311609089088872	WITHOUT_CLASSIFICATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9991069003668087	DESIGN	8.930996331912564E-4	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.985072339399228	DESIGN	0.01492766060077205	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9999248712702834	DESIGN	7.512872971666505E-5	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.5110754035377786	WITHOUT_CLASSIFICATION	0.4889245964622214	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999851349512764	DESIGN	1.4865048723593916E-5	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9970049341794984	WITHOUT_CLASSIFICATION	0.0029950658205015906	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9667523488388572	DESIGN	0.033247651161142804	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9939308387009241	DESIGN	0.006069161299075926	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9982418820211001	DESIGN	0.0017581179788999307	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9992922752675868	DESIGN	7.077247324131231E-4	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999998304626798	DESIGN	1.6953732025184184E-7	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9142641507314059	WITHOUT_CLASSIFICATION	0.0857358492685941	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9831109975621081	WITHOUT_CLASSIFICATION	0.016889002437891952	DESIGN
//is this ok?	DESIGN	0.9441541144164389	WITHOUT_CLASSIFICATION	0.055845885583561176	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999997806868628	DESIGN	2.1931313723142088E-7	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9990053642596032	DESIGN	9.94635740396726E-4	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.8145358881082309	WITHOUT_CLASSIFICATION	0.18546411189176915	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999975287071418	DESIGN	2.471292858234415E-6	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8959150501416315	DESIGN	0.10408494985836846	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9995097581056027	DESIGN	4.902418943972397E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999945582185723	DESIGN	5.441781427636464E-6	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9687280272075919	DESIGN	0.03127197279240806	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9706313583737161	WITHOUT_CLASSIFICATION	0.029368641626283932	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9997655071600203	DESIGN	2.3449283997961277E-4	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9997993302090269	DESIGN	2.006697909731091E-4	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.7152217852773449	WITHOUT_CLASSIFICATION	0.2847782147226551	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9872990057268183	DESIGN	0.012700994273181663	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.5654816960057142	DESIGN	0.4345183039942858	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9990010749902339	DESIGN	9.989250097661362E-4	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.7096643628173197	DESIGN	0.29033563718268035	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9895243692021647	DESIGN	0.010475630797835268	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999313530968781	DESIGN	6.864690312192628E-5	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.5746070869212877	WITHOUT_CLASSIFICATION	0.42539291307871235	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.981105352364167	DESIGN	0.018894647635833026	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.7706778457003681	WITHOUT_CLASSIFICATION	0.22932215429963185	DESIGN
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9960200791006225	DESIGN	0.003979920899377515	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999968644	DESIGN	3.1355792070250375E-12	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999965947555288	DESIGN	3.4052444712190377E-6	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.8008801761778925	WITHOUT_CLASSIFICATION	0.1991198238221075	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999943256590429	DESIGN	5.674340957130868E-6	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.964631940591406	DESIGN	0.03536805940859392	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9998137601938754	DESIGN	1.8623980612465487E-4	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9992262092684506	WITHOUT_CLASSIFICATION	7.737907315493473E-4	DESIGN
// short cut check...	DESIGN	0.9983804814020678	WITHOUT_CLASSIFICATION	0.0016195185979321722	DESIGN
// todo : move to StringHelper?	DESIGN	0.9932475852775495	WITHOUT_CLASSIFICATION	0.006752414722450518	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9915717259810471	DESIGN	0.0084282740189528	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9887412368857038	DESIGN	0.011258763114296159	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999998717246262	DESIGN	1.2827537367558928E-7	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9992527280868412	DESIGN	7.472719131588002E-4	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.8239151229092152	WITHOUT_CLASSIFICATION	0.1760848770907847	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9586950314807057	WITHOUT_CLASSIFICATION	0.041304968519294265	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.503905547499596	WITHOUT_CLASSIFICATION	0.49609445250040385	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999553698162	DESIGN	4.4630183805763343E-8	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9764880466252496	WITHOUT_CLASSIFICATION	0.02351195337475043	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9988740539977795	DESIGN	0.0011259460022204687	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9999908672290932	WITHOUT_CLASSIFICATION	9.132770906779691E-6	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.999991404538014	DESIGN	8.595461985906253E-6	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999973804679616	WITHOUT_CLASSIFICATION	2.619532038361844E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.989847158239973	WITHOUT_CLASSIFICATION	0.010152841760026978	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999999686385	DESIGN	3.1361503728410295E-11	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999941864627125	DESIGN	5.8135372874625255E-6	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.8572797802362032	WITHOUT_CLASSIFICATION	0.1427202197637968	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9933453843666168	WITHOUT_CLASSIFICATION	0.006654615633383279	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9981136303770148	WITHOUT_CLASSIFICATION	0.0018863696229850875	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9980799450576378	DESIGN	0.0019200549423622636	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999871660350925	DESIGN	1.283396490747983E-5	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9945767875267458	DESIGN	0.0054232124732541374	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9832964033588847	WITHOUT_CLASSIFICATION	0.01670359664111538	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.997241121701239	DESIGN	0.0027588782987610166	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9986514325979807	DESIGN	0.001348567402019187	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9997507272852239	DESIGN	2.4927271477609496E-4	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9534490048701343	WITHOUT_CLASSIFICATION	0.04655099512986565	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999998752193892	DESIGN	1.2478061088856977E-7	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9545408052571176	WITHOUT_CLASSIFICATION	0.045459194742882424	DESIGN
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9818498249297302	DESIGN	0.018150175070269843	WITHOUT_CLASSIFICATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9987996785751139	DESIGN	0.0012003214248861023	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9999771967907677	DESIGN	2.2803209232335388E-5	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.7120555651827426	DESIGN	0.2879444348172574	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9939880797835975	DESIGN	0.0060119202164025266	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.805680643696454	WITHOUT_CLASSIFICATION	0.19431935630354594	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9978492625385494	DESIGN	0.002150737461450556	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999900934703229	WITHOUT_CLASSIFICATION	9.906529677209335E-6	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9997974906109185	DESIGN	2.0250938908142669E-4	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.5100640243127129	DESIGN	0.48993597568728714	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.999990951282299	DESIGN	9.048717701119828E-6	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.7835872006163282	WITHOUT_CLASSIFICATION	0.21641279938367178	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9994561749334073	DESIGN	5.43825066592769E-4	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9652898162632648	DESIGN	0.03471018373673513	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.954932003585698	DESIGN	0.045067996414302154	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999994634501	DESIGN	5.365498644374605E-10	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.999999999134574	DESIGN	8.654259627777022E-10	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9899285220237242	DESIGN	0.010071477976275865	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999995804409977	DESIGN	4.1955900232322027E-7	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.998002572814668	DESIGN	0.0019974271853319342	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999769982725458	WITHOUT_CLASSIFICATION	2.3001727454251617E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.999995083524374	WITHOUT_CLASSIFICATION	4.916475625912145E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999991678639	DESIGN	8.321361308875622E-10	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9996902194073761	DESIGN	3.097805926239018E-4	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999989035419781	DESIGN	1.0964580218800944E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9999990406661702	DESIGN	9.593338298791184E-7	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9996766629299039	DESIGN	3.233370700962388E-4	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9896921743284561	DESIGN	0.01030782567154389	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9982418820211001	DESIGN	0.0017581179788999307	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9046690613138082	DESIGN	0.09533093868619176	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999972258020671	DESIGN	2.7741979328452857E-6	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9142641507314059	WITHOUT_CLASSIFICATION	0.0857358492685941	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9990053642596032	DESIGN	9.94635740396726E-4	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8408901028313129	DESIGN	0.15910989716868706	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999983308162149	DESIGN	1.669183785106746E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999983308162149	DESIGN	1.669183785106746E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999983308162149	DESIGN	1.669183785106746E-5	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999998689971016	DESIGN	1.3100289845397345E-7	WITHOUT_CLASSIFICATION
