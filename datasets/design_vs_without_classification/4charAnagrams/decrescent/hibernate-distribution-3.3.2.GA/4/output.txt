//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999943562621405	WITHOUT_CLASSIFICATION	5.643737859472602E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999867043994246	WITHOUT_CLASSIFICATION	1.3295600575373284E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999867043994246	WITHOUT_CLASSIFICATION	1.3295600575373284E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999889153550107	WITHOUT_CLASSIFICATION	1.1084644989264752E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999996197396177	WITHOUT_CLASSIFICATION	3.8026038223227745E-7	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999847224069901	WITHOUT_CLASSIFICATION	1.5277593009872106E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998097355365	WITHOUT_CLASSIFICATION	1.902644634462741E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998097355365	WITHOUT_CLASSIFICATION	1.902644634462741E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999795930946	WITHOUT_CLASSIFICATION	2.0406905400969258E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998546360163	WITHOUT_CLASSIFICATION	1.4536398380040997E-7	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999983523161274	WITHOUT_CLASSIFICATION	1.6476838724842793E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999995471416178	WITHOUT_CLASSIFICATION	4.528583822492455E-7	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999988782386128	WITHOUT_CLASSIFICATION	1.1217613871611573E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999988782386128	WITHOUT_CLASSIFICATION	1.1217613871611573E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999797610396289	WITHOUT_CLASSIFICATION	2.0238960370991274E-5	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999337459515794	WITHOUT_CLASSIFICATION	6.625404842070793E-5	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9998368816791967	WITHOUT_CLASSIFICATION	1.631183208031756E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999297905639408	WITHOUT_CLASSIFICATION	7.02094360591818E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999621281793	WITHOUT_CLASSIFICATION	3.787182077486419E-8	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999620286937793	WITHOUT_CLASSIFICATION	3.7971306220724396E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999675341302149	WITHOUT_CLASSIFICATION	3.2465869785156844E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999972381982293	WITHOUT_CLASSIFICATION	2.761801770666349E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999834536145152	WITHOUT_CLASSIFICATION	1.654638548474786E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.973465097489989	WITHOUT_CLASSIFICATION	0.02653490251001097	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999922433383099	WITHOUT_CLASSIFICATION	7.756661690089764E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999962470517201	WITHOUT_CLASSIFICATION	3.7529482800659948E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999828920459957	WITHOUT_CLASSIFICATION	1.7107954004374505E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999962981481669	WITHOUT_CLASSIFICATION	3.7018518330595855E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999962981481669	WITHOUT_CLASSIFICATION	3.7018518330595855E-6	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999673664255743	WITHOUT_CLASSIFICATION	3.263357442572902E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999981229093501	WITHOUT_CLASSIFICATION	1.8770906499213104E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9980484287657501	WITHOUT_CLASSIFICATION	0.0019515712342499842	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999847507390325	WITHOUT_CLASSIFICATION	1.5249260967619551E-5	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9234798752606058	WITHOUT_CLASSIFICATION	0.07652012473939415	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8942818020620933	DESIGN	0.10571819793790672	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8942818020620933	DESIGN	0.10571819793790672	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999955319739	WITHOUT_CLASSIFICATION	4.468026091241394E-9	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999084578544524	WITHOUT_CLASSIFICATION	9.154214554762387E-5	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999997656935802	WITHOUT_CLASSIFICATION	2.3430641980274235E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994553461923612	WITHOUT_CLASSIFICATION	5.44653807638736E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999686390530641	WITHOUT_CLASSIFICATION	3.136094693589954E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982431648696	WITHOUT_CLASSIFICATION	1.756835130372285E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962320997267	WITHOUT_CLASSIFICATION	3.7679002733793242E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999932587209837	WITHOUT_CLASSIFICATION	6.7412790163620586E-6	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9998893302216502	WITHOUT_CLASSIFICATION	1.1066977834973631E-4	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9994658285285971	WITHOUT_CLASSIFICATION	5.34171471402937E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9997671563830033	WITHOUT_CLASSIFICATION	2.3284361699680198E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9998893302216502	WITHOUT_CLASSIFICATION	1.1066977834973631E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9997671563830033	WITHOUT_CLASSIFICATION	2.3284361699680198E-4	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999933183003336	WITHOUT_CLASSIFICATION	6.681699666429395E-6	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9319863049308692	DESIGN	0.06801369506913078	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999978225134201	WITHOUT_CLASSIFICATION	2.1774865799465894E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999886617542582	WITHOUT_CLASSIFICATION	1.1338245741955402E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.747603440406167	WITHOUT_CLASSIFICATION	0.252396559593833	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999947160171225	WITHOUT_CLASSIFICATION	5.28398287755473E-6	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9994804591029263	WITHOUT_CLASSIFICATION	5.195408970737473E-4	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9945468619820781	WITHOUT_CLASSIFICATION	0.005453138017921911	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999989955557195	WITHOUT_CLASSIFICATION	1.004444280506541E-6	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999727273243814	WITHOUT_CLASSIFICATION	2.7272675618634198E-5	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999959817600905	WITHOUT_CLASSIFICATION	4.018239909472009E-6	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999805612483221	WITHOUT_CLASSIFICATION	1.9438751677913692E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999992113562	WITHOUT_CLASSIFICATION	7.886437449495953E-10	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999797371142571	WITHOUT_CLASSIFICATION	2.0262885742923997E-5	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9998962925821215	WITHOUT_CLASSIFICATION	1.0370741787842155E-4	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999982902859019	WITHOUT_CLASSIFICATION	1.7097140981082085E-6	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999778244055992	WITHOUT_CLASSIFICATION	2.21755944006577E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9995099887536555	WITHOUT_CLASSIFICATION	4.90011246344561E-4	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999521175881839	WITHOUT_CLASSIFICATION	4.7882411816007775E-5	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999984080547648	WITHOUT_CLASSIFICATION	1.5919452351966608E-6	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9996096990464564	WITHOUT_CLASSIFICATION	3.903009535436827E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999382479788	WITHOUT_CLASSIFICATION	6.175202114262415E-8	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998377019889324	WITHOUT_CLASSIFICATION	1.6229801106754988E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999968559913888	WITHOUT_CLASSIFICATION	3.1440086112382957E-6	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9973245327699152	WITHOUT_CLASSIFICATION	0.0026754672300848955	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999979385992331	WITHOUT_CLASSIFICATION	2.0614007667722343E-6	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999981518010341	WITHOUT_CLASSIFICATION	1.8481989659187513E-6	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9024523308976625	WITHOUT_CLASSIFICATION	0.09754766910233752	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999535506441	WITHOUT_CLASSIFICATION	4.6449355861297636E-8	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999998458736578	WITHOUT_CLASSIFICATION	1.5412634228093866E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999996818548	WITHOUT_CLASSIFICATION	3.181451346564398E-10	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999954411235	WITHOUT_CLASSIFICATION	4.558876518350507E-9	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999861104883665	WITHOUT_CLASSIFICATION	1.3889511633542584E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997662812181338	WITHOUT_CLASSIFICATION	2.3371878186610355E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999794926635	WITHOUT_CLASSIFICATION	2.0507336589176372E-8	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999361973	WITHOUT_CLASSIFICATION	6.380274095128158E-11	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997662812181338	WITHOUT_CLASSIFICATION	2.3371878186610355E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999995016616902	WITHOUT_CLASSIFICATION	4.983383098685303E-7	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999999877445866	WITHOUT_CLASSIFICATION	1.2255413396862062E-7	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999990472290439	WITHOUT_CLASSIFICATION	9.527709561248571E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999995160714262	WITHOUT_CLASSIFICATION	4.839285738151527E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999965623568989	WITHOUT_CLASSIFICATION	3.4376431009750637E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985466636697	WITHOUT_CLASSIFICATION	1.453336330288931E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985466636697	WITHOUT_CLASSIFICATION	1.453336330288931E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999918895423437	WITHOUT_CLASSIFICATION	8.1104576563008E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9797113330234455	WITHOUT_CLASSIFICATION	0.020288666976554594	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998089928160483	WITHOUT_CLASSIFICATION	1.9100718395169983E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999256744254	WITHOUT_CLASSIFICATION	7.432557460007556E-8	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999831758787546	WITHOUT_CLASSIFICATION	1.6824121245417098E-5	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9997226370532345	WITHOUT_CLASSIFICATION	2.773629467655976E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999683047557	WITHOUT_CLASSIFICATION	3.16952443496586E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999927753618189	WITHOUT_CLASSIFICATION	7.22463818108949E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999739992968159	WITHOUT_CLASSIFICATION	2.600070318408531E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998395857623	WITHOUT_CLASSIFICATION	1.604142377484863E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999027926710711	WITHOUT_CLASSIFICATION	9.72073289289887E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999027926710711	WITHOUT_CLASSIFICATION	9.72073289289887E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999975255308318	WITHOUT_CLASSIFICATION	2.4744691682455427E-6	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998909489913	WITHOUT_CLASSIFICATION	1.0905100869050406E-7	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998395144410187	WITHOUT_CLASSIFICATION	1.6048555898126688E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999027926710711	WITHOUT_CLASSIFICATION	9.72073289289887E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999975255308318	WITHOUT_CLASSIFICATION	2.4744691682455427E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999975255308318	WITHOUT_CLASSIFICATION	2.4744691682455427E-6	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999102227189243	WITHOUT_CLASSIFICATION	8.977728107573062E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999609204144364	WITHOUT_CLASSIFICATION	3.9079585563591345E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999998923391	WITHOUT_CLASSIFICATION	1.0766087082034361E-10	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.999999315318834	WITHOUT_CLASSIFICATION	6.846811659546653E-7	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9995527635439152	WITHOUT_CLASSIFICATION	4.4723645608485944E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9995527635439152	WITHOUT_CLASSIFICATION	4.4723645608485944E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998389948480371	WITHOUT_CLASSIFICATION	1.610051519628595E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996051893554225	WITHOUT_CLASSIFICATION	3.9481064457744843E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999995195593419	WITHOUT_CLASSIFICATION	4.804406581092676E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999868782600833	WITHOUT_CLASSIFICATION	1.3121739916677108E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999868782600833	WITHOUT_CLASSIFICATION	1.3121739916677108E-5	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.99996315778989	WITHOUT_CLASSIFICATION	3.6842210109992675E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999261583395876	WITHOUT_CLASSIFICATION	7.384166041240613E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9913753274853031	WITHOUT_CLASSIFICATION	0.008624672514696919	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999205341042	WITHOUT_CLASSIFICATION	7.946589578817319E-8	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999971322217851	WITHOUT_CLASSIFICATION	2.8677782149997846E-6	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999989553779455	WITHOUT_CLASSIFICATION	1.044622054525027E-6	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9989423024046137	WITHOUT_CLASSIFICATION	0.0010576975953863043	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9985563297138187	WITHOUT_CLASSIFICATION	0.0014436702861813143	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999415629159093	WITHOUT_CLASSIFICATION	5.843708409063301E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9913753274853031	WITHOUT_CLASSIFICATION	0.008624672514696919	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9997537767387445	WITHOUT_CLASSIFICATION	2.462232612554102E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999721573604736	WITHOUT_CLASSIFICATION	2.7842639526401724E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999721573604736	WITHOUT_CLASSIFICATION	2.7842639526401724E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9991401169740901	WITHOUT_CLASSIFICATION	8.598830259098063E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9951325386299101	WITHOUT_CLASSIFICATION	0.004867461370089856	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9608824951939774	WITHOUT_CLASSIFICATION	0.039117504806022725	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997922958651068	WITHOUT_CLASSIFICATION	2.0770413489321234E-4	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999943421734979	WITHOUT_CLASSIFICATION	5.6578265021133016E-5	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9996896922189139	WITHOUT_CLASSIFICATION	3.10307781086143E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9999960074514339	WITHOUT_CLASSIFICATION	3.992548566147253E-6	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.99999656642052	WITHOUT_CLASSIFICATION	3.433579479882143E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999915188855	WITHOUT_CLASSIFICATION	8.481114545061822E-9	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999915188855	WITHOUT_CLASSIFICATION	8.481114545061822E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999835696903351	WITHOUT_CLASSIFICATION	1.643030966488417E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999943562621405	WITHOUT_CLASSIFICATION	5.643737859472602E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999918154571066	WITHOUT_CLASSIFICATION	8.184542893318626E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999999786713705	WITHOUT_CLASSIFICATION	2.13286294838427E-8	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999867043994246	WITHOUT_CLASSIFICATION	1.3295600575373284E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999857242375981	WITHOUT_CLASSIFICATION	1.4275762401803657E-5	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999900877005796	WITHOUT_CLASSIFICATION	9.912299420491921E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999918006042909	WITHOUT_CLASSIFICATION	8.199395709044801E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999995176386599	WITHOUT_CLASSIFICATION	4.823613400478384E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999950830332697	WITHOUT_CLASSIFICATION	4.9169667302357775E-6	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9993815655037827	WITHOUT_CLASSIFICATION	6.184344962173364E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999920381869385	WITHOUT_CLASSIFICATION	7.96181306140818E-6	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999853882953107	WITHOUT_CLASSIFICATION	1.461170468925883E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999996197396177	WITHOUT_CLASSIFICATION	3.8026038223227745E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996985469989	WITHOUT_CLASSIFICATION	3.0145300114189864E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996985469989	WITHOUT_CLASSIFICATION	3.0145300114189864E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999993718667216	WITHOUT_CLASSIFICATION	6.281332783858517E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999621713844862	WITHOUT_CLASSIFICATION	3.782861551376576E-5	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999757827385843	WITHOUT_CLASSIFICATION	2.4217261415625666E-5	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999997843200527	WITHOUT_CLASSIFICATION	2.1567994726231507E-7	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.999988143678608	WITHOUT_CLASSIFICATION	1.1856321392095323E-5	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9992311835979708	WITHOUT_CLASSIFICATION	7.688164020291424E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998097355365	WITHOUT_CLASSIFICATION	1.902644634462741E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9964270446300945	WITHOUT_CLASSIFICATION	0.003572955369905622	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999999484588031	WITHOUT_CLASSIFICATION	5.154119689844796E-7	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999413359451628	WITHOUT_CLASSIFICATION	5.8664054837340634E-5	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999999135735468	WITHOUT_CLASSIFICATION	8.642645321837084E-8	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999777765040277	WITHOUT_CLASSIFICATION	2.2223495972319476E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999954111433103	WITHOUT_CLASSIFICATION	4.5888566898166974E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999994218036236	WITHOUT_CLASSIFICATION	5.781963763598141E-7	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999023888507	WITHOUT_CLASSIFICATION	9.761114927345013E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999993908045623	WITHOUT_CLASSIFICATION	6.091954376750998E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999996217736866	WITHOUT_CLASSIFICATION	3.7822631339950477E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.5632633217323034	WITHOUT_CLASSIFICATION	0.4367366782676966	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999969724934918	WITHOUT_CLASSIFICATION	3.027506508060394E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999980991538582	WITHOUT_CLASSIFICATION	1.9008461418375134E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999867043994246	WITHOUT_CLASSIFICATION	1.3295600575373284E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999867043994246	WITHOUT_CLASSIFICATION	1.3295600575373284E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999920381869385	WITHOUT_CLASSIFICATION	7.96181306140818E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996985469989	WITHOUT_CLASSIFICATION	3.0145300114189864E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999994218036236	WITHOUT_CLASSIFICATION	5.781963763598141E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.999999795930946	WITHOUT_CLASSIFICATION	2.0406905400969258E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999992610109414	WITHOUT_CLASSIFICATION	7.389890585943136E-7	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9980931538680629	WITHOUT_CLASSIFICATION	0.001906846131937156	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999995328081505	WITHOUT_CLASSIFICATION	4.671918494961905E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999999369667386	WITHOUT_CLASSIFICATION	6.303326144737512E-8	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998972964766	WITHOUT_CLASSIFICATION	1.0270352336349053E-7	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999963579815832	WITHOUT_CLASSIFICATION	3.6420184169577337E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999970448465688	WITHOUT_CLASSIFICATION	2.9551534311512456E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9998607938348523	WITHOUT_CLASSIFICATION	1.3920616514782815E-4	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999974156594528	WITHOUT_CLASSIFICATION	2.584340547330486E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999942214116488	WITHOUT_CLASSIFICATION	5.778588351120115E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999942214116488	WITHOUT_CLASSIFICATION	5.778588351120115E-6	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999730293881954	WITHOUT_CLASSIFICATION	2.6970611804584944E-5	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999993525465746	WITHOUT_CLASSIFICATION	6.474534253844466E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998925589349478	WITHOUT_CLASSIFICATION	1.0744106505222552E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999906521006732	WITHOUT_CLASSIFICATION	9.347899326803525E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999987788452941	WITHOUT_CLASSIFICATION	1.2211547058974881E-6	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999349892538	WITHOUT_CLASSIFICATION	6.50107461542796E-8	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999938509404642	WITHOUT_CLASSIFICATION	6.14905953578804E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998546360163	WITHOUT_CLASSIFICATION	1.4536398380040997E-7	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999994757080308	WITHOUT_CLASSIFICATION	5.24291969218494E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993832483545	WITHOUT_CLASSIFICATION	6.167516454726442E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993832483545	WITHOUT_CLASSIFICATION	6.167516454726442E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999164921826	WITHOUT_CLASSIFICATION	8.350781746138695E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999794153133569	WITHOUT_CLASSIFICATION	2.0584686643140023E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999220734377	WITHOUT_CLASSIFICATION	7.792656234441808E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999821860615	WITHOUT_CLASSIFICATION	1.7813938489453753E-8	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999990052692428	WITHOUT_CLASSIFICATION	9.94730757225918E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999867043994246	WITHOUT_CLASSIFICATION	1.3295600575373284E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999920381869385	WITHOUT_CLASSIFICATION	7.96181306140818E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999996197396177	WITHOUT_CLASSIFICATION	3.8026038223227745E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999994218036236	WITHOUT_CLASSIFICATION	5.781963763598141E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999994218036236	WITHOUT_CLASSIFICATION	5.781963763598141E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998132268652	WITHOUT_CLASSIFICATION	1.8677313480449234E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998132268652	WITHOUT_CLASSIFICATION	1.8677313480449234E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999989701274448	WITHOUT_CLASSIFICATION	1.0298725551969573E-5	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999996661758899	WITHOUT_CLASSIFICATION	3.338241101287602E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999996661758899	WITHOUT_CLASSIFICATION	3.338241101287602E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999994866200422	WITHOUT_CLASSIFICATION	5.133799577187325E-7	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999887762855492	WITHOUT_CLASSIFICATION	1.122371445078772E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999989024957779	WITHOUT_CLASSIFICATION	1.0975042220151906E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999993344420307	WITHOUT_CLASSIFICATION	6.655579691632587E-7	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999569499863	WITHOUT_CLASSIFICATION	4.305001366313287E-8	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999995471416178	WITHOUT_CLASSIFICATION	4.528583822492455E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999995471416178	WITHOUT_CLASSIFICATION	4.528583822492455E-7	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9997748958231824	WITHOUT_CLASSIFICATION	2.251041768176996E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999998264085875	WITHOUT_CLASSIFICATION	1.7359141236208715E-7	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999953596461463	WITHOUT_CLASSIFICATION	4.640353853700239E-6	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999892053108804	WITHOUT_CLASSIFICATION	1.0794689119622528E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999999718861362	WITHOUT_CLASSIFICATION	2.8113863771291336E-8	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999894078906109	WITHOUT_CLASSIFICATION	1.0592109389208796E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999988782386128	WITHOUT_CLASSIFICATION	1.1217613871611573E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996565678007	WITHOUT_CLASSIFICATION	3.4343219932706815E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996565678007	WITHOUT_CLASSIFICATION	3.4343219932706815E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999797610396289	WITHOUT_CLASSIFICATION	2.0238960370991274E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999797610396289	WITHOUT_CLASSIFICATION	2.0238960370991274E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991346401254	WITHOUT_CLASSIFICATION	8.653598746653436E-7	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991346401254	WITHOUT_CLASSIFICATION	8.653598746653436E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998589190452	WITHOUT_CLASSIFICATION	1.410809549026259E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998589190452	WITHOUT_CLASSIFICATION	1.410809549026259E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999995471416178	WITHOUT_CLASSIFICATION	4.528583822492455E-7	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999988782386128	WITHOUT_CLASSIFICATION	1.1217613871611573E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996565678007	WITHOUT_CLASSIFICATION	3.4343219932706815E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996565678007	WITHOUT_CLASSIFICATION	3.4343219932706815E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999797610396289	WITHOUT_CLASSIFICATION	2.0238960370991274E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991346401254	WITHOUT_CLASSIFICATION	8.653598746653436E-7	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991346401254	WITHOUT_CLASSIFICATION	8.653598746653436E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998589190452	WITHOUT_CLASSIFICATION	1.410809549026259E-7	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999837361732502	WITHOUT_CLASSIFICATION	1.6263826749734943E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998906731603888	WITHOUT_CLASSIFICATION	1.093268396111643E-4	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9994194966113477	WITHOUT_CLASSIFICATION	5.805033886524698E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999993705885062	WITHOUT_CLASSIFICATION	6.294114938004068E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999967473644128	WITHOUT_CLASSIFICATION	3.2526355871822044E-6	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999322114585443	WITHOUT_CLASSIFICATION	6.778854145570008E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9990910915168276	WITHOUT_CLASSIFICATION	9.089084831723869E-4	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9990416130785356	WITHOUT_CLASSIFICATION	9.583869214643378E-4	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9975590498480853	WITHOUT_CLASSIFICATION	0.002440950151914672	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999917784186	WITHOUT_CLASSIFICATION	8.221581409838875E-9	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999989915932561	WITHOUT_CLASSIFICATION	1.0084067439396805E-6	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999995256542707	WITHOUT_CLASSIFICATION	4.743457292405471E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.999918895423437	WITHOUT_CLASSIFICATION	8.1104576563008E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999322114585443	WITHOUT_CLASSIFICATION	6.778854145570008E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993577016249868	WITHOUT_CLASSIFICATION	6.422983750131754E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993577016249868	WITHOUT_CLASSIFICATION	6.422983750131754E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999991945060035	WITHOUT_CLASSIFICATION	8.054939965528627E-7	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999981617250789	WITHOUT_CLASSIFICATION	1.8382749210898431E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999981617250789	WITHOUT_CLASSIFICATION	1.8382749210898431E-6	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999949462203533	WITHOUT_CLASSIFICATION	5.053779646699451E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.998869099370178	WITHOUT_CLASSIFICATION	0.001130900629821955	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999977299310603	WITHOUT_CLASSIFICATION	2.2700689397206884E-6	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999941427792228	WITHOUT_CLASSIFICATION	5.8572207771939655E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999941427792228	WITHOUT_CLASSIFICATION	5.8572207771939655E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999621281793	WITHOUT_CLASSIFICATION	3.787182077486419E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999995086640231	WITHOUT_CLASSIFICATION	4.913359769748614E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999995086640231	WITHOUT_CLASSIFICATION	4.913359769748614E-7	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999339489441185	WITHOUT_CLASSIFICATION	6.605105588161708E-5	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999918301360753	WITHOUT_CLASSIFICATION	8.169863924754107E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.999985162473066	WITHOUT_CLASSIFICATION	1.4837526933907964E-5	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999880374146554	WITHOUT_CLASSIFICATION	1.1962585344569773E-5	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999963042985828	WITHOUT_CLASSIFICATION	3.6957014171486246E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999967125044256	WITHOUT_CLASSIFICATION	3.287495574357009E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999620286937793	WITHOUT_CLASSIFICATION	3.7971306220724396E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999952202270076	WITHOUT_CLASSIFICATION	4.77977299246823E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9927512021068147	WITHOUT_CLASSIFICATION	0.007248797893185261	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999907183435993	WITHOUT_CLASSIFICATION	9.28165640071581E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.999997558253356	WITHOUT_CLASSIFICATION	2.4417466439549616E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999834536145152	WITHOUT_CLASSIFICATION	1.654638548474786E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999418489531	WITHOUT_CLASSIFICATION	5.815104682258601E-8	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999999902288836	WITHOUT_CLASSIFICATION	9.771116359176346E-9	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999498380616736	WITHOUT_CLASSIFICATION	5.016193832649984E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999834536145152	WITHOUT_CLASSIFICATION	1.654638548474786E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999906349700936	WITHOUT_CLASSIFICATION	9.365029906524452E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999975382692704	WITHOUT_CLASSIFICATION	2.4617307296026115E-6	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999877857284988	WITHOUT_CLASSIFICATION	1.2214271501193947E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999946821300711	WITHOUT_CLASSIFICATION	5.317869928909443E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.99998489148066	WITHOUT_CLASSIFICATION	1.510851933992335E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999980713296248	WITHOUT_CLASSIFICATION	1.928670375188384E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999969664266326	WITHOUT_CLASSIFICATION	3.0335733674487052E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999962470517201	WITHOUT_CLASSIFICATION	3.7529482800659948E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999931852955228	WITHOUT_CLASSIFICATION	6.814704477185357E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999828920459957	WITHOUT_CLASSIFICATION	1.7107954004374505E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999993349183687	WITHOUT_CLASSIFICATION	6.6508163138111E-7	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999996831860528	WITHOUT_CLASSIFICATION	3.168139471859769E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999879278555326	WITHOUT_CLASSIFICATION	1.2072144467394559E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999620286937793	WITHOUT_CLASSIFICATION	3.7971306220724396E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999931852955228	WITHOUT_CLASSIFICATION	6.814704477185357E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999993349183687	WITHOUT_CLASSIFICATION	6.6508163138111E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999879278555326	WITHOUT_CLASSIFICATION	1.2072144467394559E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999992709771153	WITHOUT_CLASSIFICATION	7.290228846154996E-7	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999946473332578	WITHOUT_CLASSIFICATION	5.3526667421737725E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999695574785	WITHOUT_CLASSIFICATION	3.044252147364618E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999962981481669	WITHOUT_CLASSIFICATION	3.7018518330595855E-6	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.999998241886179	WITHOUT_CLASSIFICATION	1.7581138210814094E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999969298149579	WITHOUT_CLASSIFICATION	3.070185042026806E-6	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9998819764985938	WITHOUT_CLASSIFICATION	1.1802350140619677E-4	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9988709917082087	WITHOUT_CLASSIFICATION	0.0011290082917912992	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999973115779224	WITHOUT_CLASSIFICATION	2.6884220776472284E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999983234342	WITHOUT_CLASSIFICATION	1.6765657348318861E-9	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999881634203	WITHOUT_CLASSIFICATION	1.1836579714567026E-7	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999971638168695	WITHOUT_CLASSIFICATION	2.8361831304403543E-6	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999988749452	WITHOUT_CLASSIFICATION	1.1250548572149698E-9	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999619333402	WITHOUT_CLASSIFICATION	3.806665982762852E-8	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.99998881237212	WITHOUT_CLASSIFICATION	1.1187627880012241E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999844711887877	WITHOUT_CLASSIFICATION	1.5528811212264308E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999981229093501	WITHOUT_CLASSIFICATION	1.8770906499213104E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999946544264879	WITHOUT_CLASSIFICATION	5.345573512066811E-6	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999945124750969	WITHOUT_CLASSIFICATION	5.4875249031472505E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999931852955228	WITHOUT_CLASSIFICATION	6.814704477185357E-6	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999494701406821	WITHOUT_CLASSIFICATION	5.052985931794488E-5	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9997357684457534	WITHOUT_CLASSIFICATION	2.6423155424658344E-4	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.99997865715471	WITHOUT_CLASSIFICATION	2.13428452900124E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998488677206605	WITHOUT_CLASSIFICATION	1.5113227933952794E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999994965150258	WITHOUT_CLASSIFICATION	5.034849741368497E-7	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999784333046029	WITHOUT_CLASSIFICATION	2.156669539713267E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999999180705956	WITHOUT_CLASSIFICATION	8.192940439408854E-7	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998246265954	WITHOUT_CLASSIFICATION	1.7537340460773005E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999976987088158	WITHOUT_CLASSIFICATION	2.301291184069744E-6	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999932570197764	WITHOUT_CLASSIFICATION	6.7429802235764606E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999827681649703	WITHOUT_CLASSIFICATION	1.7231835029670296E-5	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999969160550304	WITHOUT_CLASSIFICATION	3.0839449695714603E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999944983567086	WITHOUT_CLASSIFICATION	5.501643291281807E-6	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999847507390325	WITHOUT_CLASSIFICATION	1.5249260967619551E-5	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999952486503711	WITHOUT_CLASSIFICATION	4.751349628900806E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9996787774447469	WITHOUT_CLASSIFICATION	3.2122255525315023E-4	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999816812593008	WITHOUT_CLASSIFICATION	1.831874069932123E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.999989354405385	WITHOUT_CLASSIFICATION	1.0645594615053404E-5	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999959176530991	WITHOUT_CLASSIFICATION	4.08234690088689E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999949584710999	WITHOUT_CLASSIFICATION	5.041528900098996E-6	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999997357081	WITHOUT_CLASSIFICATION	2.6429181791320035E-10	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9980206177856222	WITHOUT_CLASSIFICATION	0.0019793822143777807	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9791539782502072	WITHOUT_CLASSIFICATION	0.0208460217497928	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9979686098366982	WITHOUT_CLASSIFICATION	0.0020313901633016982	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999981234302506	WITHOUT_CLASSIFICATION	1.8765697493968267E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.999981234302506	WITHOUT_CLASSIFICATION	1.8765697493968267E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998314206599997	WITHOUT_CLASSIFICATION	1.6857934000022936E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999922520312642	WITHOUT_CLASSIFICATION	7.747968735746196E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999023917081122	WITHOUT_CLASSIFICATION	9.760829188771917E-5	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999951179425743	WITHOUT_CLASSIFICATION	4.882057425701583E-6	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999874095455465	WITHOUT_CLASSIFICATION	1.259045445343694E-5	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999770703865327	WITHOUT_CLASSIFICATION	2.2929613467296856E-5	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999854520931741	WITHOUT_CLASSIFICATION	1.4547906825912205E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999901267849056	WITHOUT_CLASSIFICATION	9.87321509446926E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999500587099421	WITHOUT_CLASSIFICATION	4.994129005788145E-5	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999960005428364	WITHOUT_CLASSIFICATION	3.999457163549997E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9997720301913566	WITHOUT_CLASSIFICATION	2.2796980864343616E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9977674693272675	WITHOUT_CLASSIFICATION	0.00223253067273252	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9852523068954961	WITHOUT_CLASSIFICATION	0.014747693104503782	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999992875085185	WITHOUT_CLASSIFICATION	7.12491481405078E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929745901308	WITHOUT_CLASSIFICATION	7.025409869229591E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998464268976767	WITHOUT_CLASSIFICATION	1.5357310232325504E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999693810097556	WITHOUT_CLASSIFICATION	3.061899024428024E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999871603337032	WITHOUT_CLASSIFICATION	1.2839666296910405E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9671068507112626	WITHOUT_CLASSIFICATION	0.03289314928873738	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999356153493602	WITHOUT_CLASSIFICATION	6.438465063986661E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999918735812392	WITHOUT_CLASSIFICATION	8.12641876074838E-6	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999918735812392	WITHOUT_CLASSIFICATION	8.12641876074838E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999905519667331	WITHOUT_CLASSIFICATION	9.448033266902713E-6	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999905519667331	WITHOUT_CLASSIFICATION	9.448033266902713E-6	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9791539782502072	WITHOUT_CLASSIFICATION	0.0208460217497928	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999901521401703	WITHOUT_CLASSIFICATION	9.847859829719076E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.981062207323821	WITHOUT_CLASSIFICATION	0.01893779267617904	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999968100116781	WITHOUT_CLASSIFICATION	3.189988321897726E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999835696903351	WITHOUT_CLASSIFICATION	1.643030966488417E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.981062207323821	WITHOUT_CLASSIFICATION	0.01893779267617904	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999968100116781	WITHOUT_CLASSIFICATION	3.189988321897726E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999847942904052	WITHOUT_CLASSIFICATION	1.5205709594842938E-5	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9994773119929221	WITHOUT_CLASSIFICATION	5.226880070778411E-4	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999915287648041	WITHOUT_CLASSIFICATION	8.471235195803086E-6	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999946670858412	WITHOUT_CLASSIFICATION	5.332914158887704E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997071137668578	WITHOUT_CLASSIFICATION	2.9288623314209923E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.7878622845836699	WITHOUT_CLASSIFICATION	0.21213771541633014	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999992891694689	WITHOUT_CLASSIFICATION	7.108305311835369E-7	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999916805631573	WITHOUT_CLASSIFICATION	8.319436842612383E-6	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999783136528669	WITHOUT_CLASSIFICATION	2.1686347133060004E-5	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999835716588	WITHOUT_CLASSIFICATION	1.6428341298568516E-8	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999984154224996	WITHOUT_CLASSIFICATION	1.584577500408769E-6	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999739073512278	WITHOUT_CLASSIFICATION	2.6092648772154228E-5	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999999986600875	WITHOUT_CLASSIFICATION	1.339912514546126E-8	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999985198314524	WITHOUT_CLASSIFICATION	1.4801685475720852E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999835696903351	WITHOUT_CLASSIFICATION	1.643030966488417E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999958612154322	WITHOUT_CLASSIFICATION	4.138784567799573E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999962133728331	WITHOUT_CLASSIFICATION	3.7866271669205935E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999962133728331	WITHOUT_CLASSIFICATION	3.7866271669205935E-6	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999994566488297	WITHOUT_CLASSIFICATION	5.433511702834846E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999847942904052	WITHOUT_CLASSIFICATION	1.5205709594842938E-5	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9998879525672958	WITHOUT_CLASSIFICATION	1.1204743270427915E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.958250633837078	DESIGN	0.041749366162922116	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9351649198236198	WITHOUT_CLASSIFICATION	0.06483508017638027	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999979925598922	WITHOUT_CLASSIFICATION	2.00744010780316E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7083724801755305	DESIGN	0.29162751982446955	WITHOUT_CLASSIFICATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999847942904052	WITHOUT_CLASSIFICATION	1.5205709594842938E-5	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999979925598922	WITHOUT_CLASSIFICATION	2.00744010780316E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7083724801755305	DESIGN	0.29162751982446955	WITHOUT_CLASSIFICATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9254202661713173	WITHOUT_CLASSIFICATION	0.07457973382868271	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999300399045	WITHOUT_CLASSIFICATION	6.996009555998443E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999994235878147	WITHOUT_CLASSIFICATION	5.764121853253693E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999847942904052	WITHOUT_CLASSIFICATION	1.5205709594842938E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999847942904052	WITHOUT_CLASSIFICATION	1.5205709594842938E-5	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999961938651251	WITHOUT_CLASSIFICATION	3.806134874964355E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999748925784798	WITHOUT_CLASSIFICATION	2.5107421520234016E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999009465244355	WITHOUT_CLASSIFICATION	9.905347556446223E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999989806687274	WITHOUT_CLASSIFICATION	1.0193312726074356E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.999991290740273	WITHOUT_CLASSIFICATION	8.70925972696312E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999848970339	WITHOUT_CLASSIFICATION	1.510296619443774E-8	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999996884274462	WITHOUT_CLASSIFICATION	3.1157255384987085E-7	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999878667721409	WITHOUT_CLASSIFICATION	1.2133227859016986E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999202285567317	WITHOUT_CLASSIFICATION	7.977144326838727E-5	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999923367894958	WITHOUT_CLASSIFICATION	7.663210504151344E-6	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999890126312284	WITHOUT_CLASSIFICATION	1.0987368771559738E-5	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999750793470452	WITHOUT_CLASSIFICATION	2.4920652954828876E-5	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999963542489695	WITHOUT_CLASSIFICATION	3.645751030578198E-6	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9821555881245279	WITHOUT_CLASSIFICATION	0.017844411875472158	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998857435335	WITHOUT_CLASSIFICATION	1.1425646647854766E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9995760817370176	WITHOUT_CLASSIFICATION	4.239182629824272E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994553461923612	WITHOUT_CLASSIFICATION	5.44653807638736E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.995481196088308	WITHOUT_CLASSIFICATION	0.004518803911692017	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9931921591952603	WITHOUT_CLASSIFICATION	0.006807840804739738	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999998127339805	WITHOUT_CLASSIFICATION	1.8726601949468127E-6	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9998325855302213	WITHOUT_CLASSIFICATION	1.6741446977865487E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9847843493968504	WITHOUT_CLASSIFICATION	0.015215650603149666	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9847843493968504	WITHOUT_CLASSIFICATION	0.015215650603149666	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994553461923612	WITHOUT_CLASSIFICATION	5.44653807638736E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999957521046748	WITHOUT_CLASSIFICATION	4.247895325205618E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999608868304408	WITHOUT_CLASSIFICATION	3.911316955916891E-5	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.8204571344190769	DESIGN	0.1795428655809231	WITHOUT_CLASSIFICATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999979069581361	WITHOUT_CLASSIFICATION	2.093041863955929E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999559982237973	WITHOUT_CLASSIFICATION	4.4001776202702435E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999977263925892	WITHOUT_CLASSIFICATION	2.27360741075617E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9997123817822786	WITHOUT_CLASSIFICATION	2.87618217721405E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999075935646348	WITHOUT_CLASSIFICATION	9.24064353652691E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999978568	WITHOUT_CLASSIFICATION	2.1431997482569912E-11	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999988239467487	WITHOUT_CLASSIFICATION	1.1760532513589222E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999802995043	WITHOUT_CLASSIFICATION	1.970049563662192E-8	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999386292780408	WITHOUT_CLASSIFICATION	6.137072195932281E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999888180773848	WITHOUT_CLASSIFICATION	1.1181922615198374E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999397572262	WITHOUT_CLASSIFICATION	6.024277380870095E-8	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999964233333	WITHOUT_CLASSIFICATION	3.57666670282788E-8	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9981722581569403	WITHOUT_CLASSIFICATION	0.001827741843059565	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999849746148971	WITHOUT_CLASSIFICATION	1.5025385102891722E-5	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999961032623516	WITHOUT_CLASSIFICATION	3.896737648449642E-6	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952343623134	WITHOUT_CLASSIFICATION	4.76563768668118E-6	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9996792165035409	WITHOUT_CLASSIFICATION	3.2078349645907946E-4	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9929552145677372	WITHOUT_CLASSIFICATION	0.007044785432262899	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9566985961116377	WITHOUT_CLASSIFICATION	0.04330140388836239	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999847777318848	WITHOUT_CLASSIFICATION	1.5222268115258371E-5	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9931946669935181	WITHOUT_CLASSIFICATION	0.006805333006481823	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999707612126931	WITHOUT_CLASSIFICATION	2.9238787306830065E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943527454376	WITHOUT_CLASSIFICATION	5.64725456234852E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999352094265942	WITHOUT_CLASSIFICATION	6.479057340582489E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998597417144137	WITHOUT_CLASSIFICATION	1.4025828558631597E-4	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999292034608301	WITHOUT_CLASSIFICATION	7.079653916989721E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999639749410393	WITHOUT_CLASSIFICATION	3.602505896079104E-5	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999079356666765	WITHOUT_CLASSIFICATION	9.206433332356428E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9880108244843862	WITHOUT_CLASSIFICATION	0.011989175515613784	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975765070394	WITHOUT_CLASSIFICATION	2.4234929606123617E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998146264845105	WITHOUT_CLASSIFICATION	1.853735154896002E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931059214071	WITHOUT_CLASSIFICATION	6.894078592868299E-6	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999022973243	WITHOUT_CLASSIFICATION	9.770267564096822E-8	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999188548545972	WITHOUT_CLASSIFICATION	8.114514540279633E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999012825385847	WITHOUT_CLASSIFICATION	9.871746141531052E-5	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999838596287085	WITHOUT_CLASSIFICATION	1.61403712915004E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783741636717	WITHOUT_CLASSIFICATION	2.16258363282208E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999990917011877	WITHOUT_CLASSIFICATION	9.082988122900756E-7	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631908235874	WITHOUT_CLASSIFICATION	3.680917641256298E-5	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9978599195256848	WITHOUT_CLASSIFICATION	0.0021400804743151682	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993742168025794	WITHOUT_CLASSIFICATION	6.257831974206185E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999956031050938	WITHOUT_CLASSIFICATION	4.396894906125161E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999930906295313	WITHOUT_CLASSIFICATION	6.9093704685881105E-6	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999346676519216	WITHOUT_CLASSIFICATION	6.533234807832619E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999996979784266	WITHOUT_CLASSIFICATION	3.02021573375473E-7	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.8346077135659076	WITHOUT_CLASSIFICATION	0.16539228643409246	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.999999023600298	WITHOUT_CLASSIFICATION	9.763997020159076E-7	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999994808856434	WITHOUT_CLASSIFICATION	5.191143565012306E-7	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999969253291826	WITHOUT_CLASSIFICATION	3.074670817473815E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999989714085782	WITHOUT_CLASSIFICATION	1.0285914217974682E-5	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999980932427972	WITHOUT_CLASSIFICATION	1.9067572027615422E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9996746981542758	WITHOUT_CLASSIFICATION	3.253018457241305E-4	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999874485801821	WITHOUT_CLASSIFICATION	1.2551419817894097E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9997492686441317	WITHOUT_CLASSIFICATION	2.5073135586829086E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.999948408994783	WITHOUT_CLASSIFICATION	5.159100521701895E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999943785832768	WITHOUT_CLASSIFICATION	5.621416723197489E-5	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999844557855295	WITHOUT_CLASSIFICATION	1.554421447038582E-5	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999982165881932	WITHOUT_CLASSIFICATION	1.7834118067989585E-5	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99995091281909	WITHOUT_CLASSIFICATION	4.9087180909956476E-5	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999938214174438	WITHOUT_CLASSIFICATION	6.178582556206748E-5	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9992495425956125	WITHOUT_CLASSIFICATION	7.504574043875873E-4	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999946407274	WITHOUT_CLASSIFICATION	5.359272591687093E-9	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999879101322722	WITHOUT_CLASSIFICATION	1.2089867727901967E-5	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999972541982727	WITHOUT_CLASSIFICATION	2.7458017273411523E-6	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952677632157	WITHOUT_CLASSIFICATION	4.732236784372957E-6	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999946012175747	WITHOUT_CLASSIFICATION	5.398782425315946E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.99809170386214	WITHOUT_CLASSIFICATION	0.0019082961378600863	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999944119914498	WITHOUT_CLASSIFICATION	5.588008550310609E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999991668587357	WITHOUT_CLASSIFICATION	8.331412643907398E-7	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999973856053402	WITHOUT_CLASSIFICATION	2.6143946598173463E-6	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999035968958362	WITHOUT_CLASSIFICATION	9.640310416376722E-5	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999305150912359	WITHOUT_CLASSIFICATION	6.948490876416747E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9989463110612173	WITHOUT_CLASSIFICATION	0.0010536889387826424	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999930906295313	WITHOUT_CLASSIFICATION	6.9093704685881105E-6	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9987836208239723	WITHOUT_CLASSIFICATION	0.0012163791760277014	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999985745036155	WITHOUT_CLASSIFICATION	1.4254963845679893E-6	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999993570559412	WITHOUT_CLASSIFICATION	6.429440588234188E-7	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998779096694232	WITHOUT_CLASSIFICATION	1.220903305767837E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999924923531287	WITHOUT_CLASSIFICATION	7.507646871305704E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999987560014361	WITHOUT_CLASSIFICATION	1.2439985639011772E-6	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.998580995429773	WITHOUT_CLASSIFICATION	0.0014190045702269945	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9975893257227795	WITHOUT_CLASSIFICATION	0.002410674277220584	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9998938820041381	WITHOUT_CLASSIFICATION	1.0611799586181624E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999932515872825	WITHOUT_CLASSIFICATION	6.748412717614619E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999787667290886	WITHOUT_CLASSIFICATION	2.123327091141369E-5	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999795449625333	WITHOUT_CLASSIFICATION	2.045503746672381E-5	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999641947384	WITHOUT_CLASSIFICATION	3.580526169559518E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9717065878748865	WITHOUT_CLASSIFICATION	0.02829341212511362	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999996851434759	WITHOUT_CLASSIFICATION	3.1485652416119767E-7	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999159560452073	WITHOUT_CLASSIFICATION	8.404395479267396E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9988228423549095	WITHOUT_CLASSIFICATION	0.001177157645090439	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999136337303873	WITHOUT_CLASSIFICATION	8.636626961257298E-5	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999996768329336	WITHOUT_CLASSIFICATION	3.231670663519322E-7	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999986292058193	WITHOUT_CLASSIFICATION	1.3707941807718307E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999948607031891	WITHOUT_CLASSIFICATION	5.139296810966793E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9994120662161149	WITHOUT_CLASSIFICATION	5.879337838851472E-4	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.997485539933406	WITHOUT_CLASSIFICATION	0.0025144600665939335	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999985378425216	WITHOUT_CLASSIFICATION	1.4621574784157577E-6	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9987623848979805	WITHOUT_CLASSIFICATION	0.001237615102019566	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999632818959	WITHOUT_CLASSIFICATION	3.67181040967102E-8	DESIGN
/*	WITHOUT_CLASSIFICATION	0.973465097489989	WITHOUT_CLASSIFICATION	0.02653490251001097	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999991861941409	WITHOUT_CLASSIFICATION	8.138058591594593E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999999061491016	WITHOUT_CLASSIFICATION	9.385089839445656E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999520918925741	WITHOUT_CLASSIFICATION	4.7908107425903496E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999930906295313	WITHOUT_CLASSIFICATION	6.9093704685881105E-6	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.999962775777524	WITHOUT_CLASSIFICATION	3.7224222475853916E-5	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999992930799564	WITHOUT_CLASSIFICATION	7.069200436197234E-7	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9945233413699301	WITHOUT_CLASSIFICATION	0.0054766586300699594	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999930906295313	WITHOUT_CLASSIFICATION	6.9093704685881105E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999981036474369	WITHOUT_CLASSIFICATION	1.896352563061755E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999948607031891	WITHOUT_CLASSIFICATION	5.139296810966793E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9982064466638227	WITHOUT_CLASSIFICATION	0.0017935533361773308	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.99952863078606	WITHOUT_CLASSIFICATION	4.7136921394001096E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.8077197603226669	WITHOUT_CLASSIFICATION	0.19228023967733307	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999932515872825	WITHOUT_CLASSIFICATION	6.748412717614619E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999787667290886	WITHOUT_CLASSIFICATION	2.123327091141369E-5	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999795449625333	WITHOUT_CLASSIFICATION	2.045503746672381E-5	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999990543547	WITHOUT_CLASSIFICATION	9.456453496678302E-10	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999917598263449	WITHOUT_CLASSIFICATION	8.240173654985535E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999988433083306	WITHOUT_CLASSIFICATION	1.1566916694139414E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999741515795	WITHOUT_CLASSIFICATION	2.5848420581726058E-8	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999777845232	WITHOUT_CLASSIFICATION	2.2215476771370383E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999930906295313	WITHOUT_CLASSIFICATION	6.9093704685881105E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999641947384	WITHOUT_CLASSIFICATION	3.580526169559518E-8	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9717065878748865	WITHOUT_CLASSIFICATION	0.02829341212511362	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886736587997	WITHOUT_CLASSIFICATION	1.1326341200245772E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998800439462	WITHOUT_CLASSIFICATION	1.1995605380225725E-6	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999721733327	WITHOUT_CLASSIFICATION	2.7826667308043574E-8	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999979759177352	WITHOUT_CLASSIFICATION	2.024082264692616E-6	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.999548113692663	WITHOUT_CLASSIFICATION	4.5188630733695935E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9998773556963247	WITHOUT_CLASSIFICATION	1.2264430367532538E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783741636717	WITHOUT_CLASSIFICATION	2.16258363282208E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9997288597877952	WITHOUT_CLASSIFICATION	2.7114021220468856E-4	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9986170386546493	WITHOUT_CLASSIFICATION	0.001382961345350649	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999438687853089	WITHOUT_CLASSIFICATION	5.6131214691036984E-5	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999989414611373	WITHOUT_CLASSIFICATION	1.058538862671843E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999949969803	WITHOUT_CLASSIFICATION	5.003019662574436E-9	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999352094265942	WITHOUT_CLASSIFICATION	6.479057340582489E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998597417144137	WITHOUT_CLASSIFICATION	1.4025828558631597E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998146264845105	WITHOUT_CLASSIFICATION	1.853735154896002E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999949969803	WITHOUT_CLASSIFICATION	5.003019662574436E-9	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998976062896688	WITHOUT_CLASSIFICATION	1.023937103311062E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999807425855195	WITHOUT_CLASSIFICATION	1.9257414480548538E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999682547366495	WITHOUT_CLASSIFICATION	3.174526335040742E-5	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885297417413	WITHOUT_CLASSIFICATION	1.1470258258686055E-5	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999560643519197	WITHOUT_CLASSIFICATION	4.393564808015176E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9995251278314123	WITHOUT_CLASSIFICATION	4.7487216858768715E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931059214071	WITHOUT_CLASSIFICATION	6.894078592868299E-6	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999012825385847	WITHOUT_CLASSIFICATION	9.871746141531052E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999991668587357	WITHOUT_CLASSIFICATION	8.331412643907398E-7	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9992418471088642	WITHOUT_CLASSIFICATION	7.581528911357673E-4	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9992553058390674	WITHOUT_CLASSIFICATION	7.446941609325077E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999997989936156	WITHOUT_CLASSIFICATION	2.0100638432201713E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999969514802082	WITHOUT_CLASSIFICATION	3.0485197918487025E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.999999994736324	WITHOUT_CLASSIFICATION	5.263675961795334E-9	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999980952879893	WITHOUT_CLASSIFICATION	1.90471201064264E-6	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998911354572887	WITHOUT_CLASSIFICATION	1.0886454271131543E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999978568	WITHOUT_CLASSIFICATION	2.1431997482569912E-11	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999962550876691	WITHOUT_CLASSIFICATION	3.7449123309435125E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999989896758547	WITHOUT_CLASSIFICATION	1.0103241452495483E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999990879875387	WITHOUT_CLASSIFICATION	9.120124612060951E-7	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999919136303308	WITHOUT_CLASSIFICATION	8.086369669260155E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999973628066354	WITHOUT_CLASSIFICATION	2.6371933645956895E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999406716199965	WITHOUT_CLASSIFICATION	5.93283800035021E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902676809779	WITHOUT_CLASSIFICATION	9.732319022112512E-6	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942792651135	WITHOUT_CLASSIFICATION	5.720734886479307E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997981899964	WITHOUT_CLASSIFICATION	2.0181000364786222E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9995565095402885	WITHOUT_CLASSIFICATION	4.4349045971152996E-4	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999038927147337	WITHOUT_CLASSIFICATION	9.610728526631932E-5	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999980637080287	WITHOUT_CLASSIFICATION	1.9362919712668084E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998606877822	WITHOUT_CLASSIFICATION	1.3931221779171967E-7	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992566847524	WITHOUT_CLASSIFICATION	7.433152474809946E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999770847008	WITHOUT_CLASSIFICATION	2.2915299279955056E-8	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999328089869659	WITHOUT_CLASSIFICATION	6.719101303406958E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998881253019722	WITHOUT_CLASSIFICATION	1.118746980277175E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999489211856	WITHOUT_CLASSIFICATION	5.1078814353165984E-8	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999431559492484	WITHOUT_CLASSIFICATION	5.684405075158085E-5	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999907146531225	WITHOUT_CLASSIFICATION	9.285346877505615E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993535767445	WITHOUT_CLASSIFICATION	6.464232554061462E-7	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9870053999794541	WITHOUT_CLASSIFICATION	0.012994600020545925	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999989381189117	WITHOUT_CLASSIFICATION	1.0618810882916887E-6	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999962253260575	WITHOUT_CLASSIFICATION	3.774673942456939E-6	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999979284171073	WITHOUT_CLASSIFICATION	2.0715828927047932E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999517865295721	WITHOUT_CLASSIFICATION	4.8213470427931934E-5	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999482931966099	WITHOUT_CLASSIFICATION	5.1706803389964325E-5	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999988163848409	WITHOUT_CLASSIFICATION	1.1836151591345065E-6	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999999829892443	WITHOUT_CLASSIFICATION	1.7010755694462306E-7	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9985421330980775	WITHOUT_CLASSIFICATION	0.0014578669019225674	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999950816691036	WITHOUT_CLASSIFICATION	4.918330896396369E-6	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998931649770944	WITHOUT_CLASSIFICATION	1.0683502290565337E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9998210946396918	WITHOUT_CLASSIFICATION	1.7890536030819984E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999988087841316	WITHOUT_CLASSIFICATION	1.1912158684056183E-5	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999988996679893	WITHOUT_CLASSIFICATION	1.1003320107052686E-6	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999978608606207	WITHOUT_CLASSIFICATION	2.1391393793458256E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999376010896	WITHOUT_CLASSIFICATION	6.239891030105805E-8	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9995131989205874	WITHOUT_CLASSIFICATION	4.868010794125827E-4	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999996856479605	WITHOUT_CLASSIFICATION	3.143520395040356E-7	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999992309433107	WITHOUT_CLASSIFICATION	7.690566894096753E-7	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9993485183014359	WITHOUT_CLASSIFICATION	6.51481698564019E-4	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999949624151381	WITHOUT_CLASSIFICATION	5.037584861904174E-5	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.8576071957769064	WITHOUT_CLASSIFICATION	0.14239280422309375	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999997887821203	WITHOUT_CLASSIFICATION	2.11217879756522E-7	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9969615448388323	WITHOUT_CLASSIFICATION	0.003038455161167852	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9992129766405222	WITHOUT_CLASSIFICATION	7.870233594776465E-4	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999993692591583	WITHOUT_CLASSIFICATION	6.307408417651158E-7	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999481434372	WITHOUT_CLASSIFICATION	5.185656295712723E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999996838554917	WITHOUT_CLASSIFICATION	3.1614450836742713E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999999205149576	WITHOUT_CLASSIFICATION	7.948504243898744E-8	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999996737574223	WITHOUT_CLASSIFICATION	3.262425777546506E-7	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999984259412075	WITHOUT_CLASSIFICATION	1.574058792539701E-6	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999964804983388	WITHOUT_CLASSIFICATION	3.519501661224204E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999547438319	WITHOUT_CLASSIFICATION	4.525616814992752E-8	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999666168208	WITHOUT_CLASSIFICATION	3.33831792908898E-8	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9997281736463368	WITHOUT_CLASSIFICATION	2.7182635366317304E-4	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999514028535911	WITHOUT_CLASSIFICATION	4.859714640880244E-5	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999972066918019	WITHOUT_CLASSIFICATION	2.793308198005303E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999918037584759	WITHOUT_CLASSIFICATION	8.196241524108656E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999996576807902	WITHOUT_CLASSIFICATION	3.423192097713658E-7	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998881614064467	WITHOUT_CLASSIFICATION	1.1183859355339203E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999931158735686	WITHOUT_CLASSIFICATION	6.884126431302902E-6	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999874659916358	WITHOUT_CLASSIFICATION	1.253400836422156E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9669487543278981	WITHOUT_CLASSIFICATION	0.03305124567210187	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9993600226613697	WITHOUT_CLASSIFICATION	6.399773386303793E-4	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9938627447239476	WITHOUT_CLASSIFICATION	0.006137255276052317	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999996017657918	WITHOUT_CLASSIFICATION	3.9823420825832525E-7	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.999118737944291	WITHOUT_CLASSIFICATION	8.812620557090071E-4	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9997637428235274	WITHOUT_CLASSIFICATION	2.3625717647260172E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9996069799740566	WITHOUT_CLASSIFICATION	3.9302002594352077E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9986847971534715	WITHOUT_CLASSIFICATION	0.0013152028465284776	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999975596939222	WITHOUT_CLASSIFICATION	2.4403060777337555E-6	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.999997362053051	WITHOUT_CLASSIFICATION	2.6379469490811256E-6	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998483305298	WITHOUT_CLASSIFICATION	1.5166947020618282E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999987677390167	WITHOUT_CLASSIFICATION	1.2322609832402737E-6	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9999756901435993	WITHOUT_CLASSIFICATION	2.4309856400723727E-5	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999893704714616	WITHOUT_CLASSIFICATION	1.0629528538391714E-4	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9995775551718932	WITHOUT_CLASSIFICATION	4.2244482810678785E-4	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999680096847	WITHOUT_CLASSIFICATION	3.199031529513133E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999294311852484	WITHOUT_CLASSIFICATION	7.056881475166271E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9992912837688004	WITHOUT_CLASSIFICATION	7.087162311996465E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999976724352471	WITHOUT_CLASSIFICATION	2.327564752905094E-5	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9960446783124984	WITHOUT_CLASSIFICATION	0.003955321687501636	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999998286898069	WITHOUT_CLASSIFICATION	1.7131019317268043E-7	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998386570130102	WITHOUT_CLASSIFICATION	1.6134298698981296E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9998939495508772	WITHOUT_CLASSIFICATION	1.0605044912284718E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998748640110243	WITHOUT_CLASSIFICATION	1.2513598897566825E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9997846383167024	WITHOUT_CLASSIFICATION	2.15361683297528E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9996666202308241	WITHOUT_CLASSIFICATION	3.3337976917598465E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999999715301858	WITHOUT_CLASSIFICATION	2.8469814164734905E-8	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999269890744347	WITHOUT_CLASSIFICATION	7.301092556543635E-5	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999855295056778	WITHOUT_CLASSIFICATION	1.4470494322124714E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999997461737088	WITHOUT_CLASSIFICATION	2.538262911377233E-7	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999269890744347	WITHOUT_CLASSIFICATION	7.301092556543635E-5	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999994094410533	WITHOUT_CLASSIFICATION	5.90558946682963E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.99999842578551	WITHOUT_CLASSIFICATION	1.5742144899927788E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999845469561074	WITHOUT_CLASSIFICATION	1.545304389261766E-5	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9997755596870472	WITHOUT_CLASSIFICATION	2.244403129527314E-4	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999476378685	WITHOUT_CLASSIFICATION	5.236213158137344E-8	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999976093697929	WITHOUT_CLASSIFICATION	2.3906302071505525E-6	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9980593261715467	WITHOUT_CLASSIFICATION	0.001940673828453229	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999994802923466	WITHOUT_CLASSIFICATION	5.197076533972419E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9995932369988142	WITHOUT_CLASSIFICATION	4.0676300118581624E-4	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9998592058739801	WITHOUT_CLASSIFICATION	1.407941260197825E-4	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999996845605024	WITHOUT_CLASSIFICATION	3.1543949763784064E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999996200232338	WITHOUT_CLASSIFICATION	3.799767661507112E-7	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9986846256939326	WITHOUT_CLASSIFICATION	0.0013153743060674134	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999996579322594	WITHOUT_CLASSIFICATION	3.420677406723485E-7	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999846300785655	WITHOUT_CLASSIFICATION	1.5369921434463403E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9978777186432244	WITHOUT_CLASSIFICATION	0.002122281356775576	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9984434118916602	WITHOUT_CLASSIFICATION	0.001556588108339771	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9984434118916602	WITHOUT_CLASSIFICATION	0.001556588108339771	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999179920971	WITHOUT_CLASSIFICATION	8.20079029952766E-8	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999838308592719	WITHOUT_CLASSIFICATION	1.616914072818229E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999996937624241	WITHOUT_CLASSIFICATION	3.0623757592531246E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9993839553784003	WITHOUT_CLASSIFICATION	6.160446215996098E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999998132199561	WITHOUT_CLASSIFICATION	1.867800438647809E-7	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6432185625988593	DESIGN	0.35678143740114066	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999957381095509	WITHOUT_CLASSIFICATION	4.261890449125672E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999829844447843	WITHOUT_CLASSIFICATION	1.7015555215755748E-5	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999955542349389	WITHOUT_CLASSIFICATION	4.4457650611280765E-6	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9996124431340347	WITHOUT_CLASSIFICATION	3.875568659652203E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9996363941403131	WITHOUT_CLASSIFICATION	3.6360585968689245E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999660179485036	WITHOUT_CLASSIFICATION	3.398205149630934E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9990173349141444	WITHOUT_CLASSIFICATION	9.826650858556244E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9994767976738355	WITHOUT_CLASSIFICATION	5.232023261645016E-4	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999658058843759	WITHOUT_CLASSIFICATION	3.4194115624180875E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999406716199965	WITHOUT_CLASSIFICATION	5.93283800035021E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999812596585675	WITHOUT_CLASSIFICATION	1.874034143249238E-5	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999990252512368	WITHOUT_CLASSIFICATION	9.747487632067007E-6	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999986237902763	WITHOUT_CLASSIFICATION	1.3762097237356687E-6	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999944464082103	WITHOUT_CLASSIFICATION	5.55359178967219E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999853906162	WITHOUT_CLASSIFICATION	1.4609383862452059E-8	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999936331834361	WITHOUT_CLASSIFICATION	6.366816563747327E-6	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999998932334085	WITHOUT_CLASSIFICATION	1.0676659138487653E-7	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998254881741	WITHOUT_CLASSIFICATION	1.745118258979126E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999974009384395	WITHOUT_CLASSIFICATION	2.5990615605568697E-6	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999762363176345	WITHOUT_CLASSIFICATION	2.3763682365404567E-5	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999882915591	WITHOUT_CLASSIFICATION	1.1708440946342372E-8	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.963323166692512	WITHOUT_CLASSIFICATION	0.0366768333074881	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999938611086244	WITHOUT_CLASSIFICATION	6.138891375530679E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999902741940867	WITHOUT_CLASSIFICATION	9.725805913315008E-6	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999938697788728	WITHOUT_CLASSIFICATION	6.130221127204972E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999658594570144	WITHOUT_CLASSIFICATION	3.414054298554561E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.998682927136129	WITHOUT_CLASSIFICATION	0.0013170728638708896	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998256349474629	WITHOUT_CLASSIFICATION	1.743650525371672E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997938594846987	WITHOUT_CLASSIFICATION	2.0614051530123474E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999998183558657	WITHOUT_CLASSIFICATION	1.8164413433997196E-7	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.999986795429873	WITHOUT_CLASSIFICATION	1.3204570127057932E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997231189782974	WITHOUT_CLASSIFICATION	2.7688102170270493E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999887283019	WITHOUT_CLASSIFICATION	1.1271698079415996E-8	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999992642878409	WITHOUT_CLASSIFICATION	7.357121590765278E-7	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999911146241661	WITHOUT_CLASSIFICATION	8.885375833833006E-6	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999992026299823	WITHOUT_CLASSIFICATION	7.973700177523176E-7	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999996825349945	WITHOUT_CLASSIFICATION	3.174650054942118E-6	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999740498341659	WITHOUT_CLASSIFICATION	2.5950165834101124E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999989119737964	WITHOUT_CLASSIFICATION	1.0880262035833176E-6	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999903300772506	WITHOUT_CLASSIFICATION	9.669922749447271E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999206421218304	WITHOUT_CLASSIFICATION	7.935787816961346E-5	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998184375204	WITHOUT_CLASSIFICATION	1.815624795318131E-7	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967139971034	WITHOUT_CLASSIFICATION	3.2860028966452E-6	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9691900670953955	WITHOUT_CLASSIFICATION	0.030809932904604483	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999990657691724	WITHOUT_CLASSIFICATION	9.342308276968562E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998682341111	WITHOUT_CLASSIFICATION	1.3176588884525765E-7	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9994301485684896	WITHOUT_CLASSIFICATION	5.69851431510369E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999942535999478	WITHOUT_CLASSIFICATION	5.74640005228409E-6	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998988654317603	WITHOUT_CLASSIFICATION	1.0113456823966624E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999942535999478	WITHOUT_CLASSIFICATION	5.74640005228409E-6	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993831952568278	WITHOUT_CLASSIFICATION	6.168047431721101E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999992819608887	WITHOUT_CLASSIFICATION	7.180391113574074E-7	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9995655674855766	WITHOUT_CLASSIFICATION	4.3443251442348195E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998689927354706	WITHOUT_CLASSIFICATION	1.3100726452941526E-4	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999509831340315	WITHOUT_CLASSIFICATION	4.9016865968485436E-5	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999918578683084	WITHOUT_CLASSIFICATION	8.142131691583632E-6	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999996993379336	WITHOUT_CLASSIFICATION	3.0066206639382137E-6	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999968042994701	WITHOUT_CLASSIFICATION	3.1957005299117385E-6	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999998394036679	WITHOUT_CLASSIFICATION	1.6059633217521271E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998429254482302	WITHOUT_CLASSIFICATION	1.5707455176975783E-4	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999974324656146	WITHOUT_CLASSIFICATION	2.5675343853292723E-6	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9963152674217313	WITHOUT_CLASSIFICATION	0.0036847325782686613	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999434240831833	WITHOUT_CLASSIFICATION	5.657591681674266E-5	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999064954493693	WITHOUT_CLASSIFICATION	9.350455063078995E-5	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.974206700708326	WITHOUT_CLASSIFICATION	0.025793299291673913	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9995428392883867	WITHOUT_CLASSIFICATION	4.571607116133276E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999988925143285	WITHOUT_CLASSIFICATION	1.1074856714162906E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999988925143285	WITHOUT_CLASSIFICATION	1.1074856714162906E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999725033423943	WITHOUT_CLASSIFICATION	2.7496657605697135E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999964392291221	WITHOUT_CLASSIFICATION	3.5607708780347172E-6	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999229837889	WITHOUT_CLASSIFICATION	7.701621117455694E-8	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999961579228276	WITHOUT_CLASSIFICATION	3.842077172472145E-6	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999752801363164	WITHOUT_CLASSIFICATION	2.471986368349746E-5	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999965888441812	WITHOUT_CLASSIFICATION	3.411155818728374E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9814704004769322	WITHOUT_CLASSIFICATION	0.018529599523067732	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998287812242362	WITHOUT_CLASSIFICATION	1.712187757638447E-4	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.999999887214096	WITHOUT_CLASSIFICATION	1.1278590393726526E-7	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999999992179102	WITHOUT_CLASSIFICATION	7.82089797742093E-9	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999969094974395	WITHOUT_CLASSIFICATION	3.0905025606554687E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999321666226623	WITHOUT_CLASSIFICATION	6.783337733775647E-5	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999998584545143	WITHOUT_CLASSIFICATION	1.4154548573949317E-7	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999980058406622	WITHOUT_CLASSIFICATION	1.994159337821779E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999387947131028	WITHOUT_CLASSIFICATION	6.120528689720374E-5	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999998583574088	WITHOUT_CLASSIFICATION	1.4164259114444915E-7	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.998869679131878	WITHOUT_CLASSIFICATION	0.0011303208681220545	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9488313555216359	WITHOUT_CLASSIFICATION	0.05116864447836408	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999929549166681	WITHOUT_CLASSIFICATION	7.045083331933831E-6	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999984408840495	WITHOUT_CLASSIFICATION	1.5591159504858402E-6	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999999622705911	WITHOUT_CLASSIFICATION	3.7729408923462395E-8	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999986473982931	WITHOUT_CLASSIFICATION	1.3526017068938269E-6	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999894799475227	WITHOUT_CLASSIFICATION	1.052005247728261E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999996006583814	WITHOUT_CLASSIFICATION	3.9934161864270623E-7	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.99998190654251	WITHOUT_CLASSIFICATION	1.809345749005704E-5	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999948863592734	WITHOUT_CLASSIFICATION	5.113640726726994E-6	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997705021599828	WITHOUT_CLASSIFICATION	2.2949784001728837E-4	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9883768924369748	WITHOUT_CLASSIFICATION	0.011623107563025205	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999800156381033	WITHOUT_CLASSIFICATION	1.998436189659613E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999090027501417	WITHOUT_CLASSIFICATION	9.09972498581953E-5	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9994951110238983	WITHOUT_CLASSIFICATION	5.048889761016569E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9998312480139984	WITHOUT_CLASSIFICATION	1.6875198600158927E-4	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999512767072507	WITHOUT_CLASSIFICATION	4.872329274935223E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999979595539585	WITHOUT_CLASSIFICATION	2.0404460414911586E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9957572847751566	WITHOUT_CLASSIFICATION	0.004242715224843409	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999031259368	WITHOUT_CLASSIFICATION	9.687406320067202E-8	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999992881501565	WITHOUT_CLASSIFICATION	7.118498434352808E-7	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999933502217565	WITHOUT_CLASSIFICATION	6.649778243516771E-6	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999908375676113	WITHOUT_CLASSIFICATION	9.162432388778658E-6	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999485287627	WITHOUT_CLASSIFICATION	5.147123714867026E-8	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999930224923	WITHOUT_CLASSIFICATION	6.977507700589069E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989673908183	WITHOUT_CLASSIFICATION	1.0326091817909632E-6	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9999861347267628	WITHOUT_CLASSIFICATION	1.3865273237301336E-5	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999874986026702	WITHOUT_CLASSIFICATION	1.2501397329803013E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999999757175	WITHOUT_CLASSIFICATION	2.4282497967799465E-11	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.99990098035859	WITHOUT_CLASSIFICATION	9.901964141004093E-5	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.7283287301721927	WITHOUT_CLASSIFICATION	0.2716712698278072	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999465109952	WITHOUT_CLASSIFICATION	5.348900480857409E-8	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999993142937714	WITHOUT_CLASSIFICATION	6.857062286440234E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999504676228256	WITHOUT_CLASSIFICATION	4.953237717438244E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995001612406	WITHOUT_CLASSIFICATION	4.998387593392768E-7	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999973645584099	WITHOUT_CLASSIFICATION	2.6354415900563113E-6	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999708165367	WITHOUT_CLASSIFICATION	2.9183463307632393E-7	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.997006870393355	WITHOUT_CLASSIFICATION	0.0029931296066450126	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998359168379433	WITHOUT_CLASSIFICATION	1.6408316205673056E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999981036474369	WITHOUT_CLASSIFICATION	1.896352563061755E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999981036474369	WITHOUT_CLASSIFICATION	1.896352563061755E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999970472152	WITHOUT_CLASSIFICATION	2.9527848611542734E-9	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999989287419612	WITHOUT_CLASSIFICATION	1.0712580387822024E-6	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999685849628849	WITHOUT_CLASSIFICATION	3.141503711506752E-5	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999960283024203	WITHOUT_CLASSIFICATION	3.971697579767408E-6	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999809744599	WITHOUT_CLASSIFICATION	1.9025540059393375E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999990413629347	WITHOUT_CLASSIFICATION	9.586370652745747E-7	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999887323706358	WITHOUT_CLASSIFICATION	1.126762936414258E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999932387501441	WITHOUT_CLASSIFICATION	6.761249855832865E-6	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999710731513979	WITHOUT_CLASSIFICATION	2.892684860209429E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999993841958791	WITHOUT_CLASSIFICATION	6.158041209612098E-7	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999987247219606	WITHOUT_CLASSIFICATION	1.2752780394015478E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9998960613638158	WITHOUT_CLASSIFICATION	1.0393863618416765E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999824081742107	WITHOUT_CLASSIFICATION	1.7591825789271573E-5	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999980173778037	WITHOUT_CLASSIFICATION	1.9826221962727327E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5032464499932188	DESIGN	0.4967535500067812	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999455378091612	WITHOUT_CLASSIFICATION	5.446219083886577E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999678686743	WITHOUT_CLASSIFICATION	3.2131325634443857E-8	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9998302447961348	WITHOUT_CLASSIFICATION	1.6975520386530566E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999031340756616	WITHOUT_CLASSIFICATION	9.68659243384139E-5	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9991945521225897	WITHOUT_CLASSIFICATION	8.054478774103539E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999991785382505	WITHOUT_CLASSIFICATION	8.214617495653898E-7	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999950751298228	WITHOUT_CLASSIFICATION	4.924870177261011E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987363322162	WITHOUT_CLASSIFICATION	1.2636677837971737E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9931080689536445	WITHOUT_CLASSIFICATION	0.0068919310463556056	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9942630039949346	WITHOUT_CLASSIFICATION	0.005736996005065438	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9893993842520821	DESIGN	0.01060061574791796	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9996342259482492	WITHOUT_CLASSIFICATION	3.657740517507991E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998271700601931	WITHOUT_CLASSIFICATION	1.7282993980696136E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999907021826239	WITHOUT_CLASSIFICATION	9.297817376006715E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987363322162	WITHOUT_CLASSIFICATION	1.2636677837971737E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9998203976273331	WITHOUT_CLASSIFICATION	1.7960237266702602E-4	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999098884582	WITHOUT_CLASSIFICATION	9.011154185610103E-8	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9996017100598246	WITHOUT_CLASSIFICATION	3.9828994017536044E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999685690015807	WITHOUT_CLASSIFICATION	3.143099841935464E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999972920106327	WITHOUT_CLASSIFICATION	2.7079893674009026E-6	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8156379850134902	DESIGN	0.18436201498650986	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9841057419904304	WITHOUT_CLASSIFICATION	0.015894258009569538	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998921266510762	WITHOUT_CLASSIFICATION	1.0787334892379551E-4	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999998556328504	WITHOUT_CLASSIFICATION	1.4436714963979172E-7	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999685690015807	WITHOUT_CLASSIFICATION	3.143099841935464E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999992098108619	WITHOUT_CLASSIFICATION	7.901891381307443E-7	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9998064969215774	WITHOUT_CLASSIFICATION	1.9350307842272408E-4	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999284727695774	WITHOUT_CLASSIFICATION	7.152723042258735E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999866645990644	WITHOUT_CLASSIFICATION	1.3335400935634104E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9997725693663789	WITHOUT_CLASSIFICATION	2.274306336209906E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999969094974395	WITHOUT_CLASSIFICATION	3.0905025606554687E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999998897881279	WITHOUT_CLASSIFICATION	1.1021187207806042E-7	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999464270201222	WITHOUT_CLASSIFICATION	5.357297987786295E-5	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999943694890375	WITHOUT_CLASSIFICATION	5.630510962414316E-6	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9993200796036477	WITHOUT_CLASSIFICATION	6.799203963524602E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999444050163	WITHOUT_CLASSIFICATION	5.5594983706113645E-8	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999957959622333	WITHOUT_CLASSIFICATION	4.2040377666101E-6	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.999995111047807	WITHOUT_CLASSIFICATION	4.888952192987732E-6	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999999108295844	WITHOUT_CLASSIFICATION	8.917041559905484E-7	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999930426345482	WITHOUT_CLASSIFICATION	6.9573654518152716E-6	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999539100036594	WITHOUT_CLASSIFICATION	4.608999634051808E-5	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999979151547552	WITHOUT_CLASSIFICATION	2.0848452447955347E-5	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9996644389644711	WITHOUT_CLASSIFICATION	3.355610355289877E-4	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999868477654345	WITHOUT_CLASSIFICATION	1.315223456558165E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999755939447175	WITHOUT_CLASSIFICATION	2.440605528257971E-5	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999621565189	WITHOUT_CLASSIFICATION	3.784348109611872E-8	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999663800303668	WITHOUT_CLASSIFICATION	3.3619969633298544E-5	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999990240304038	WITHOUT_CLASSIFICATION	9.759695961838675E-6	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999983071060281	WITHOUT_CLASSIFICATION	1.6928939719816032E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999931752347595	WITHOUT_CLASSIFICATION	6.824765240500757E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9986631112261197	WITHOUT_CLASSIFICATION	0.0013368887738803381	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999604713744024	WITHOUT_CLASSIFICATION	3.95286255976273E-5	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999532536762	WITHOUT_CLASSIFICATION	4.674632374688711E-8	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999981203752167	WITHOUT_CLASSIFICATION	1.879624783286639E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999996707141773	WITHOUT_CLASSIFICATION	3.2928582269388036E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999975259266074	WITHOUT_CLASSIFICATION	2.4740733926477687E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9995230291477759	WITHOUT_CLASSIFICATION	4.769708522240943E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999942719717269	WITHOUT_CLASSIFICATION	5.728028273122265E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765305638646	WITHOUT_CLASSIFICATION	2.34694361353448E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9794097575159691	WITHOUT_CLASSIFICATION	0.020590242484030817	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.8848815644698209	DESIGN	0.11511843553017903	WITHOUT_CLASSIFICATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999797733354182	WITHOUT_CLASSIFICATION	2.0226664581817694E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999725795033088	WITHOUT_CLASSIFICATION	2.7420496691298457E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997639184981	WITHOUT_CLASSIFICATION	2.3608150195791872E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997639184981	WITHOUT_CLASSIFICATION	2.3608150195791872E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999996651205558	WITHOUT_CLASSIFICATION	3.348794441902509E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9629874094948039	WITHOUT_CLASSIFICATION	0.03701259050519608	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999984836251263	WITHOUT_CLASSIFICATION	1.5163748736207515E-6	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999771497633265	WITHOUT_CLASSIFICATION	2.2850236673478992E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999411315423	WITHOUT_CLASSIFICATION	5.886845766319753E-8	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9875987923828214	WITHOUT_CLASSIFICATION	0.012401207617178568	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999890215323928	WITHOUT_CLASSIFICATION	1.0978467607245678E-5	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998710869999708	WITHOUT_CLASSIFICATION	1.2891300002916992E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999947190106897	WITHOUT_CLASSIFICATION	5.280989310332436E-6	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999996198591163	WITHOUT_CLASSIFICATION	3.8014088371309013E-7	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999997820877785	WITHOUT_CLASSIFICATION	2.1791222149501117E-6	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999928551565263	WITHOUT_CLASSIFICATION	7.144843473735731E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999997376369654	WITHOUT_CLASSIFICATION	2.6236303463148325E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997639184981	WITHOUT_CLASSIFICATION	2.3608150195791872E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999996143775063	WITHOUT_CLASSIFICATION	3.8562249366244464E-7	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9976866000626953	WITHOUT_CLASSIFICATION	0.0023133999373047952	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999866971528892	WITHOUT_CLASSIFICATION	1.330284711079747E-4	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999943898404262	WITHOUT_CLASSIFICATION	5.610159573775944E-6	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999971444349915	WITHOUT_CLASSIFICATION	2.8555650085013016E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999487404431886	WITHOUT_CLASSIFICATION	5.125955681139908E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999907372519775	WITHOUT_CLASSIFICATION	9.262748022473578E-6	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999624579557	WITHOUT_CLASSIFICATION	3.75420442268396E-8	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999995407541304	WITHOUT_CLASSIFICATION	4.5924586950593244E-7	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.998069919589561	WITHOUT_CLASSIFICATION	0.0019300804104389043	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999805549895763	WITHOUT_CLASSIFICATION	1.9445010423785933E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765305638646	WITHOUT_CLASSIFICATION	2.34694361353448E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997639184981	WITHOUT_CLASSIFICATION	2.3608150195791872E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999988025016262	WITHOUT_CLASSIFICATION	1.197498373778068E-6	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999943932517	WITHOUT_CLASSIFICATION	5.606748291447482E-8	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999993793739338	WITHOUT_CLASSIFICATION	6.2062606617834E-7	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999390430391986	WITHOUT_CLASSIFICATION	6.095696080142894E-5	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.7609522955552978	WITHOUT_CLASSIFICATION	0.2390477044447022	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999998532074214	WITHOUT_CLASSIFICATION	1.4679257863116045E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991748367372739	WITHOUT_CLASSIFICATION	8.25163262726142E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999731141125	WITHOUT_CLASSIFICATION	2.6885887543923028E-8	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.99999999495496	WITHOUT_CLASSIFICATION	5.045040066400115E-9	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999781580725101	WITHOUT_CLASSIFICATION	2.1841927489963907E-5	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999595193018	WITHOUT_CLASSIFICATION	4.04806982421647E-8	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990451257030779	WITHOUT_CLASSIFICATION	9.548742969220934E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999998704659789	WITHOUT_CLASSIFICATION	1.2953402116678817E-7	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9998823626932355	WITHOUT_CLASSIFICATION	1.1763730676455535E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9993831952568278	WITHOUT_CLASSIFICATION	6.168047431721101E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997719843471	WITHOUT_CLASSIFICATION	2.2801565295891944E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999315723129	WITHOUT_CLASSIFICATION	6.842768712485275E-8	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999990806889346	WITHOUT_CLASSIFICATION	9.193110653922343E-7	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999987218440908	WITHOUT_CLASSIFICATION	1.2781559093286212E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999940899231284	WITHOUT_CLASSIFICATION	5.910076871551679E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9990700568874002	WITHOUT_CLASSIFICATION	9.299431125998464E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9990700568874002	WITHOUT_CLASSIFICATION	9.299431125998464E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9992699562486513	WITHOUT_CLASSIFICATION	7.300437513486738E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9990102688985536	WITHOUT_CLASSIFICATION	9.89731101446385E-4	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999981998339408	WITHOUT_CLASSIFICATION	1.8001660592751135E-6	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9994779479226681	WITHOUT_CLASSIFICATION	5.220520773319495E-4	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9998646740364141	WITHOUT_CLASSIFICATION	1.3532596358584834E-4	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998789925054645	WITHOUT_CLASSIFICATION	1.2100749453551677E-4	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9983850529112808	WITHOUT_CLASSIFICATION	0.0016149470887192256	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999995875031249	WITHOUT_CLASSIFICATION	4.12496875108136E-7	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999995875031249	WITHOUT_CLASSIFICATION	4.12496875108136E-7	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999852473551014	WITHOUT_CLASSIFICATION	1.4752644898567837E-5	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999940386976147	WITHOUT_CLASSIFICATION	5.961302385314583E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999093883379183	WITHOUT_CLASSIFICATION	9.061166208176406E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999005904254794	WITHOUT_CLASSIFICATION	9.940957452065419E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999005904254794	WITHOUT_CLASSIFICATION	9.940957452065419E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999005904254794	WITHOUT_CLASSIFICATION	9.940957452065419E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9997911525841279	WITHOUT_CLASSIFICATION	2.0884741587211763E-4	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9989041132191081	WITHOUT_CLASSIFICATION	0.0010958867808918205	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999589517601	WITHOUT_CLASSIFICATION	4.104823983054354E-8	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999471118679417	WITHOUT_CLASSIFICATION	5.2888132058250077E-5	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999973207050941	WITHOUT_CLASSIFICATION	2.679294905906105E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997639184981	WITHOUT_CLASSIFICATION	2.3608150195791872E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997639184981	WITHOUT_CLASSIFICATION	2.3608150195791872E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999891090226237	WITHOUT_CLASSIFICATION	1.0890977376207375E-5	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999984251893663	WITHOUT_CLASSIFICATION	1.5748106336870679E-6	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996132708649674	WITHOUT_CLASSIFICATION	3.867291350325333E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999855937820072	WITHOUT_CLASSIFICATION	1.4406217992818018E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999659526455522	WITHOUT_CLASSIFICATION	3.404735444774159E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999982055925191	WITHOUT_CLASSIFICATION	1.7944074808561565E-6	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9991221711165905	WITHOUT_CLASSIFICATION	8.778288834094442E-4	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998544833663269	WITHOUT_CLASSIFICATION	1.455166336730963E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999993060609526	WITHOUT_CLASSIFICATION	6.939390475669877E-7	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999930340605	WITHOUT_CLASSIFICATION	6.965939422389579E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999994010616271	WITHOUT_CLASSIFICATION	5.989383728962262E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999927779255627	WITHOUT_CLASSIFICATION	7.2220744372426345E-6	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999927779255627	WITHOUT_CLASSIFICATION	7.2220744372426345E-6	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999967179201688	WITHOUT_CLASSIFICATION	3.282079831370876E-6	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999967179201688	WITHOUT_CLASSIFICATION	3.282079831370876E-6	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999983732706096	WITHOUT_CLASSIFICATION	1.6267293903330505E-6	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974280874517	WITHOUT_CLASSIFICATION	2.571912548288631E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974280874517	WITHOUT_CLASSIFICATION	2.571912548288631E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999967090044759	WITHOUT_CLASSIFICATION	3.290995524183832E-6	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999900615042967	WITHOUT_CLASSIFICATION	9.938495703302035E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999895090062708	WITHOUT_CLASSIFICATION	1.0490993729117285E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9990700568874002	WITHOUT_CLASSIFICATION	9.299431125998464E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999957377430868	WITHOUT_CLASSIFICATION	4.262256913216617E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999900615042967	WITHOUT_CLASSIFICATION	9.938495703302035E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9990097638582844	WITHOUT_CLASSIFICATION	9.90236141715658E-4	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999938459534059	WITHOUT_CLASSIFICATION	6.154046594143513E-6	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999998356772019	WITHOUT_CLASSIFICATION	1.6432279819856122E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999996503837805	WITHOUT_CLASSIFICATION	3.496162196148136E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999996457734431	WITHOUT_CLASSIFICATION	3.5422655687013605E-7	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999890250586356	WITHOUT_CLASSIFICATION	1.0974941364294923E-5	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999990900851105	WITHOUT_CLASSIFICATION	9.099148895455541E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9896028924715381	WITHOUT_CLASSIFICATION	0.0103971075284619	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999961940302721	WITHOUT_CLASSIFICATION	3.8059697280815807E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9964915027858091	WITHOUT_CLASSIFICATION	0.0035084972141909373	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999533139731	WITHOUT_CLASSIFICATION	4.668602705819076E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999893244359359	WITHOUT_CLASSIFICATION	1.0675564064090306E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999993489663114	WITHOUT_CLASSIFICATION	6.510336887307918E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999990359732868	WITHOUT_CLASSIFICATION	9.640267131431994E-7	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9996395322595446	WITHOUT_CLASSIFICATION	3.60467740455318E-4	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.99986700133436	WITHOUT_CLASSIFICATION	1.3299866563992532E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.99999987193244	WITHOUT_CLASSIFICATION	1.2806755993824944E-7	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999269752455505	WITHOUT_CLASSIFICATION	7.302475444949281E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999269752455505	WITHOUT_CLASSIFICATION	7.302475444949281E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999933613988062	WITHOUT_CLASSIFICATION	6.638601193751911E-6	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999200235767	WITHOUT_CLASSIFICATION	7.997642318908445E-8	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999946388143744	WITHOUT_CLASSIFICATION	5.361185625526346E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998443876862573	WITHOUT_CLASSIFICATION	1.5561231374273428E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999983276054261	WITHOUT_CLASSIFICATION	1.6723945738494137E-6	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999996171916421	WITHOUT_CLASSIFICATION	3.8280835794149257E-7	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.998952205292675	WITHOUT_CLASSIFICATION	0.001047794707325021	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999997390213653	WITHOUT_CLASSIFICATION	2.609786346576874E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999995095477434	WITHOUT_CLASSIFICATION	4.90452256495922E-7	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999953581893587	WITHOUT_CLASSIFICATION	4.641810641332642E-6	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999552386352111	WITHOUT_CLASSIFICATION	4.4761364788878595E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990451257030779	WITHOUT_CLASSIFICATION	9.548742969220934E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999995721446456	WITHOUT_CLASSIFICATION	4.278553542973848E-7	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999863200892	WITHOUT_CLASSIFICATION	1.3679910842281058E-8	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999971265910099	WITHOUT_CLASSIFICATION	2.873408990148566E-6	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999999918111876	WITHOUT_CLASSIFICATION	8.188812393085461E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999828137238405	WITHOUT_CLASSIFICATION	1.7186276159514972E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999828137238405	WITHOUT_CLASSIFICATION	1.7186276159514972E-5	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999744894667739	WITHOUT_CLASSIFICATION	2.5510533225991622E-5	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9986442492704175	WITHOUT_CLASSIFICATION	0.0013557507295824808	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999966016877339	WITHOUT_CLASSIFICATION	3.3983122661009294E-6	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999958760129863	WITHOUT_CLASSIFICATION	4.123987013644154E-6	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999969381217413	WITHOUT_CLASSIFICATION	3.061878258677936E-6	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999979789910474	WITHOUT_CLASSIFICATION	2.021008952622712E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9959816200836431	WITHOUT_CLASSIFICATION	0.004018379916356977	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999934982329292	WITHOUT_CLASSIFICATION	6.501767070781018E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997835367578288	WITHOUT_CLASSIFICATION	2.164632421712067E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999978976034	WITHOUT_CLASSIFICATION	2.1023964916012446E-9	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999583304448104	WITHOUT_CLASSIFICATION	4.16695551895556E-5	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999934982329292	WITHOUT_CLASSIFICATION	6.501767070781018E-6	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.995801317467732	WITHOUT_CLASSIFICATION	0.00419868253226792	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.787554650070486	WITHOUT_CLASSIFICATION	0.212445349929514	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9998910444242923	WITHOUT_CLASSIFICATION	1.0895557570763393E-4	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999985521488627	WITHOUT_CLASSIFICATION	1.447851137344951E-6	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999984351706643	WITHOUT_CLASSIFICATION	1.5648293357377693E-6	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999653133557019	WITHOUT_CLASSIFICATION	3.468664429801817E-5	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999941802858875	WITHOUT_CLASSIFICATION	5.81971411254104E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999835788885	WITHOUT_CLASSIFICATION	1.642111151824994E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999856228864711	WITHOUT_CLASSIFICATION	1.4377113528877374E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999787438086185	WITHOUT_CLASSIFICATION	2.125619138156225E-5	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999459742652453	WITHOUT_CLASSIFICATION	5.4025734754603994E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999990631880559	WITHOUT_CLASSIFICATION	9.368119441801966E-7	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999802490297582	WITHOUT_CLASSIFICATION	1.9750970241695904E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999993124579066	WITHOUT_CLASSIFICATION	6.875420933010947E-7	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999950091311133	WITHOUT_CLASSIFICATION	4.990868886701882E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999990097634526	WITHOUT_CLASSIFICATION	9.902365474199653E-7	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999999264208323	WITHOUT_CLASSIFICATION	7.357916770693769E-7	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9966805788749498	WITHOUT_CLASSIFICATION	0.0033194211250502227	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9993384779104619	WITHOUT_CLASSIFICATION	6.615220895379902E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999914009865581	WITHOUT_CLASSIFICATION	8.599013441777371E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998753865163517	WITHOUT_CLASSIFICATION	1.2461348364828435E-4	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9452035080989486	DESIGN	0.05479649190105134	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9963335406163435	WITHOUT_CLASSIFICATION	0.003666459383656495	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999973912337142	WITHOUT_CLASSIFICATION	2.6087662857256983E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998979243152	WITHOUT_CLASSIFICATION	1.0207568470035409E-7	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999721573604736	WITHOUT_CLASSIFICATION	2.7842639526401724E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999998239631562	WITHOUT_CLASSIFICATION	1.7603684371421619E-7	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999695799942	WITHOUT_CLASSIFICATION	3.042000589937033E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999931568742775	WITHOUT_CLASSIFICATION	6.843125722527835E-6	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9930908325915065	WITHOUT_CLASSIFICATION	0.006909167408493379	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999982502945	WITHOUT_CLASSIFICATION	1.749705479020876E-9	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999979553234523	WITHOUT_CLASSIFICATION	2.0446765477266304E-6	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999803267890532	WITHOUT_CLASSIFICATION	1.9673210946767398E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9974680432609788	WITHOUT_CLASSIFICATION	0.0025319567390211374	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999946229182942	WITHOUT_CLASSIFICATION	5.377081705768088E-6	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999979206102744	WITHOUT_CLASSIFICATION	2.0793897256994127E-6	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999986960809776	WITHOUT_CLASSIFICATION	1.3039190224456561E-6	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999653878282	WITHOUT_CLASSIFICATION	3.461217186632343E-8	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999994346518802	WITHOUT_CLASSIFICATION	5.653481196439316E-7	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999996171968398	WITHOUT_CLASSIFICATION	3.828031601451574E-7	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998346136045	WITHOUT_CLASSIFICATION	1.6538639547576443E-7	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999872773305186	WITHOUT_CLASSIFICATION	1.2722669481474113E-5	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999991541477711	WITHOUT_CLASSIFICATION	8.458522290528262E-7	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997328842465	WITHOUT_CLASSIFICATION	2.6711575359567796E-7	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999989927680695	WITHOUT_CLASSIFICATION	1.0072319304951265E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9992739970623972	WITHOUT_CLASSIFICATION	7.260029376028751E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999997371049858	WITHOUT_CLASSIFICATION	2.628950141750202E-7	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999996140394919	WITHOUT_CLASSIFICATION	3.859605081148743E-7	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999932598320472	WITHOUT_CLASSIFICATION	6.740167952842239E-6	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999484564653223	WITHOUT_CLASSIFICATION	5.154353467763613E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877301991413	WITHOUT_CLASSIFICATION	1.2269800858614297E-5	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999993280695668	WITHOUT_CLASSIFICATION	6.719304331981474E-6	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999970407354401	WITHOUT_CLASSIFICATION	2.959264559903254E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999997655277138	WITHOUT_CLASSIFICATION	2.3447228619817006E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999928373676934	WITHOUT_CLASSIFICATION	7.16263230664595E-6	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999969827461148	WITHOUT_CLASSIFICATION	3.017253885192741E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999986229570054	WITHOUT_CLASSIFICATION	1.377042994685481E-6	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999999884251248	WITHOUT_CLASSIFICATION	1.1574875202771542E-7	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999674820941372	WITHOUT_CLASSIFICATION	3.251790586274478E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999993617222929	WITHOUT_CLASSIFICATION	6.382777071015224E-6	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999984745795424	WITHOUT_CLASSIFICATION	1.5254204576437726E-6	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999939907612644	WITHOUT_CLASSIFICATION	6.009238735554397E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.999956578443525	WITHOUT_CLASSIFICATION	4.342155647490072E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9184633389917198	WITHOUT_CLASSIFICATION	0.08153666100828016	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.995273734412734	WITHOUT_CLASSIFICATION	0.004726265587265924	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998874726076603	WITHOUT_CLASSIFICATION	1.1252739233961184E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877301991413	WITHOUT_CLASSIFICATION	1.2269800858614297E-5	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999926115321809	WITHOUT_CLASSIFICATION	7.388467819215835E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999890822856	WITHOUT_CLASSIFICATION	1.0917714384973307E-8	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999991827776497	WITHOUT_CLASSIFICATION	8.172223503793292E-7	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999992776138542	WITHOUT_CLASSIFICATION	7.223861458223051E-7	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999994495471745	WITHOUT_CLASSIFICATION	5.504528255042542E-7	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999982668507472	WITHOUT_CLASSIFICATION	1.7331492527755975E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997835367578288	WITHOUT_CLASSIFICATION	2.164632421712067E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999612101325475	WITHOUT_CLASSIFICATION	3.878986745256949E-5	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999946229182942	WITHOUT_CLASSIFICATION	5.377081705768088E-6	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9430774815040578	WITHOUT_CLASSIFICATION	0.05692251849594222	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999986560355163	WITHOUT_CLASSIFICATION	1.343964483701749E-6	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999990346605041	WITHOUT_CLASSIFICATION	9.653394959210362E-7	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999975450091239	WITHOUT_CLASSIFICATION	2.4549908761260526E-6	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999743344420601	WITHOUT_CLASSIFICATION	2.566555793982989E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9922498972122379	WITHOUT_CLASSIFICATION	0.007750102787762156	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994803670192272	WITHOUT_CLASSIFICATION	5.196329807728744E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9838338389092782	WITHOUT_CLASSIFICATION	0.016166161090721744	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9997830282581937	WITHOUT_CLASSIFICATION	2.1697174180626322E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999765714290315	WITHOUT_CLASSIFICATION	2.3428570968514324E-5	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999994627191321	WITHOUT_CLASSIFICATION	5.372808678866634E-7	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9996665788340361	WITHOUT_CLASSIFICATION	3.334211659638926E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999857833583363	WITHOUT_CLASSIFICATION	1.4216641663604902E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999857833583363	WITHOUT_CLASSIFICATION	1.4216641663604902E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998388879638873	WITHOUT_CLASSIFICATION	1.6111203611260017E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999992027211626	WITHOUT_CLASSIFICATION	7.972788373251342E-7	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998760040857	WITHOUT_CLASSIFICATION	1.2399591430632208E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999959482167381	WITHOUT_CLASSIFICATION	4.05178326187952E-6	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998280058882	WITHOUT_CLASSIFICATION	1.7199411185082763E-7	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999693384787152	WITHOUT_CLASSIFICATION	3.066152128479652E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999989063005047	WITHOUT_CLASSIFICATION	1.0936994952093863E-6	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999972058555489	WITHOUT_CLASSIFICATION	2.794144451103835E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999999254606734	WITHOUT_CLASSIFICATION	7.453932662793395E-8	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999990429366514	WITHOUT_CLASSIFICATION	9.570633486070312E-6	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999968131579888	WITHOUT_CLASSIFICATION	3.1868420111791718E-6	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999978912949389	WITHOUT_CLASSIFICATION	2.108705061045248E-6	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999977095984909	WITHOUT_CLASSIFICATION	2.2904015090825065E-6	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999994944937	WITHOUT_CLASSIFICATION	5.055063415667965E-10	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998198617749201	WITHOUT_CLASSIFICATION	1.8013822507987885E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999678984120947	WITHOUT_CLASSIFICATION	3.210158790542848E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9847759800230875	WITHOUT_CLASSIFICATION	0.015224019976912452	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999978713992	WITHOUT_CLASSIFICATION	2.1286007988032608E-8	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999097547209	WITHOUT_CLASSIFICATION	9.024527904715159E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999966990277652	WITHOUT_CLASSIFICATION	3.300972234716286E-6	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999987271372464	WITHOUT_CLASSIFICATION	1.2728627537074282E-6	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999971003989071	WITHOUT_CLASSIFICATION	2.8996010929341713E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999979772770822	WITHOUT_CLASSIFICATION	2.0227229178832315E-6	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9996752331561142	WITHOUT_CLASSIFICATION	3.247668438858649E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999956772431533	WITHOUT_CLASSIFICATION	4.3227568466568E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549444146446	WITHOUT_CLASSIFICATION	1.450555853554268E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999802995043	WITHOUT_CLASSIFICATION	1.970049563662192E-8	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999428086444002	WITHOUT_CLASSIFICATION	5.7191355599787235E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995779815986855	WITHOUT_CLASSIFICATION	4.220184013145575E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998232607454917	WITHOUT_CLASSIFICATION	1.7673925450836903E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.973465097489989	WITHOUT_CLASSIFICATION	0.02653490251001097	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9671098529605026	WITHOUT_CLASSIFICATION	0.03289014703949742	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999965114560234	WITHOUT_CLASSIFICATION	3.4885439764583918E-6	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999108183509726	WITHOUT_CLASSIFICATION	8.918164902734926E-5	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999964401856063	WITHOUT_CLASSIFICATION	3.5598143938522128E-6	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.999996712489467	WITHOUT_CLASSIFICATION	3.2875105330594328E-6	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999970260238203	WITHOUT_CLASSIFICATION	2.97397617957406E-6	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.99996139090793	WITHOUT_CLASSIFICATION	3.860909207001494E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.999999891346645	WITHOUT_CLASSIFICATION	1.0865335497661521E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999999804640279	WITHOUT_CLASSIFICATION	1.95359720818738E-8	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999841048727592	WITHOUT_CLASSIFICATION	1.5895127240662277E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999589993552	WITHOUT_CLASSIFICATION	4.1000644836722713E-8	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999560375282319	WITHOUT_CLASSIFICATION	4.396247176810141E-5	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999989269975055	WITHOUT_CLASSIFICATION	1.0730024945323853E-6	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999994914309994	WITHOUT_CLASSIFICATION	5.085690006073085E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999682547366495	WITHOUT_CLASSIFICATION	3.174526335040742E-5	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9953175587602086	WITHOUT_CLASSIFICATION	0.004682441239791496	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999988798789033	WITHOUT_CLASSIFICATION	1.1201210967274253E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999937102267	WITHOUT_CLASSIFICATION	6.289773226432561E-9	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998136425471	WITHOUT_CLASSIFICATION	1.86357452994635E-7	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922706903591	WITHOUT_CLASSIFICATION	7.729309640860864E-6	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999975368800326	WITHOUT_CLASSIFICATION	2.4631199675172922E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999938428382608	WITHOUT_CLASSIFICATION	6.157161739298161E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999994670054411	WITHOUT_CLASSIFICATION	5.329945589053996E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999999808046515	WITHOUT_CLASSIFICATION	1.9195348488081517E-7	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.8028105532148738	WITHOUT_CLASSIFICATION	0.19718944678512615	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999993546448774	WITHOUT_CLASSIFICATION	6.453551225602536E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9998297041314996	WITHOUT_CLASSIFICATION	1.7029586850033943E-4	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999970984283177	WITHOUT_CLASSIFICATION	2.9015716822700556E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999942679624477	WITHOUT_CLASSIFICATION	5.732037552258003E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998835530275088	WITHOUT_CLASSIFICATION	1.1644697249120161E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999948634841986	WITHOUT_CLASSIFICATION	5.1365158013068435E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9992953836610874	WITHOUT_CLASSIFICATION	7.046163389125724E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999978721952729	WITHOUT_CLASSIFICATION	2.1278047270225155E-6	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999879605468907	WITHOUT_CLASSIFICATION	1.2039453109276068E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999773209055529	WITHOUT_CLASSIFICATION	2.2679094447080366E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995347276939	WITHOUT_CLASSIFICATION	4.6527230609577135E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999979603510104	WITHOUT_CLASSIFICATION	2.0396489895249737E-6	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999995777150009	WITHOUT_CLASSIFICATION	4.222849990040151E-7	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999984904263	WITHOUT_CLASSIFICATION	1.5095737173680302E-9	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999995777150009	WITHOUT_CLASSIFICATION	4.222849990040151E-7	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999997748671662	WITHOUT_CLASSIFICATION	2.251328337467804E-7	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999931881468364	WITHOUT_CLASSIFICATION	6.811853163654087E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999313062826654	WITHOUT_CLASSIFICATION	6.869371733459185E-5	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999989686504513	WITHOUT_CLASSIFICATION	1.0313495486438326E-6	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999987628662294	WITHOUT_CLASSIFICATION	1.2371337705993207E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998544412283636	WITHOUT_CLASSIFICATION	1.4555877163639088E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999995155058701	WITHOUT_CLASSIFICATION	4.844941299206484E-7	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999575578740734	WITHOUT_CLASSIFICATION	4.2442125926767885E-5	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999890315796103	WITHOUT_CLASSIFICATION	1.0968420389767579E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999992611075657	WITHOUT_CLASSIFICATION	7.388924343586111E-7	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999998328269608	WITHOUT_CLASSIFICATION	1.671730392640273E-7	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999965162896646	WITHOUT_CLASSIFICATION	3.483710335395027E-6	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999998247054316	WITHOUT_CLASSIFICATION	1.7529456835441677E-7	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999983759732874	DESIGN	1.624026712529595E-6	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999975581536861	WITHOUT_CLASSIFICATION	2.441846313949931E-6	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999996951118	WITHOUT_CLASSIFICATION	3.0488820217875326E-9	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999997242816686	WITHOUT_CLASSIFICATION	2.757183313030536E-7	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999991979868147	WITHOUT_CLASSIFICATION	8.020131852886205E-7	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999994606030682	WITHOUT_CLASSIFICATION	5.393969316610664E-7	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9984727268880741	WITHOUT_CLASSIFICATION	0.0015272731119258783	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999666762328019	WITHOUT_CLASSIFICATION	3.332376719810528E-4	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9997290949298072	WITHOUT_CLASSIFICATION	2.7090507019278637E-4	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9829952652072341	WITHOUT_CLASSIFICATION	0.017004734792765812	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999613694824717	WITHOUT_CLASSIFICATION	3.8630517528317484E-5	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999973621553269	WITHOUT_CLASSIFICATION	2.637844673042043E-6	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999347847932368	WITHOUT_CLASSIFICATION	6.5215206763164E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9984779812987391	WITHOUT_CLASSIFICATION	0.0015220187012608612	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9998452414401261	WITHOUT_CLASSIFICATION	1.5475855987390422E-4	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999888253416296	WITHOUT_CLASSIFICATION	1.1174658370415787E-5	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999991272249775	WITHOUT_CLASSIFICATION	8.727750224791878E-7	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999972521718612	WITHOUT_CLASSIFICATION	2.7478281388401025E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999943314035115	WITHOUT_CLASSIFICATION	5.668596488635779E-6	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999954476045674	WITHOUT_CLASSIFICATION	4.552395432654863E-6	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999970688968731	WITHOUT_CLASSIFICATION	2.9311031268240317E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999861539571189	WITHOUT_CLASSIFICATION	1.3846042881228558E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999855533516334	WITHOUT_CLASSIFICATION	1.4446648366511327E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999861437013172	WITHOUT_CLASSIFICATION	1.3856298682771459E-5	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999957797665532	WITHOUT_CLASSIFICATION	4.2202334468674975E-6	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9997127593613756	WITHOUT_CLASSIFICATION	2.8724063862431453E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999996126573281	WITHOUT_CLASSIFICATION	3.873426718951893E-7	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999968910769956	WITHOUT_CLASSIFICATION	3.108923004398733E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999887611714521	WITHOUT_CLASSIFICATION	1.1238828548005997E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9945233413699301	WITHOUT_CLASSIFICATION	0.0054766586300699594	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999347847932368	WITHOUT_CLASSIFICATION	6.5215206763164E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9989393224354901	WITHOUT_CLASSIFICATION	0.001060677564509906	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999998587640464	WITHOUT_CLASSIFICATION	1.4123595360401601E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.998304804481706	WITHOUT_CLASSIFICATION	0.0016951955182939206	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999996763509651	WITHOUT_CLASSIFICATION	3.236490348672836E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999991339755931	WITHOUT_CLASSIFICATION	8.660244068905921E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999994681455288	WITHOUT_CLASSIFICATION	5.318544712229245E-7	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999592386255396	WITHOUT_CLASSIFICATION	4.076137446052949E-5	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7809962659186106	DESIGN	0.21900373408138946	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999826374290247	WITHOUT_CLASSIFICATION	1.7362570975334495E-5	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9982553894272256	WITHOUT_CLASSIFICATION	0.0017446105727745138	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9998891228597553	WITHOUT_CLASSIFICATION	1.1087714024479649E-4	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999998918182556	WITHOUT_CLASSIFICATION	1.081817443973333E-6	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999600048721834	WITHOUT_CLASSIFICATION	3.999512781657246E-5	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996939614269504	WITHOUT_CLASSIFICATION	3.060385730495086E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999993438902719	WITHOUT_CLASSIFICATION	6.561097280733867E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999989792664936	WITHOUT_CLASSIFICATION	1.0207335063943152E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998807409063	WITHOUT_CLASSIFICATION	1.1925909363397326E-7	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999998201996059	WITHOUT_CLASSIFICATION	1.79800394180205E-7	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999984000185901	WITHOUT_CLASSIFICATION	1.599981409908804E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9989393224354901	WITHOUT_CLASSIFICATION	0.001060677564509906	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.99998212924957	WITHOUT_CLASSIFICATION	1.7870750429983446E-5	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999573325151602	WITHOUT_CLASSIFICATION	4.26674848398891E-5	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999990868565357	WITHOUT_CLASSIFICATION	9.131434643761903E-7	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999679689903326	WITHOUT_CLASSIFICATION	3.203100966742744E-5	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999168622294492	WITHOUT_CLASSIFICATION	8.313777055072516E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9991582997991453	WITHOUT_CLASSIFICATION	8.417002008547462E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9991582997991453	WITHOUT_CLASSIFICATION	8.417002008547462E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999999105615488	WITHOUT_CLASSIFICATION	8.943845120016573E-7	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9991582997991453	WITHOUT_CLASSIFICATION	8.417002008547462E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9991582997991453	WITHOUT_CLASSIFICATION	8.417002008547462E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9445746369577901	WITHOUT_CLASSIFICATION	0.05542536304221005	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999954515164776	WITHOUT_CLASSIFICATION	4.548483522333136E-6	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999976683769672	WITHOUT_CLASSIFICATION	2.331623032744055E-6	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999970641037793	WITHOUT_CLASSIFICATION	2.935896220769081E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998990352544537	WITHOUT_CLASSIFICATION	1.0096474554640013E-4	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.5738019905888412	WITHOUT_CLASSIFICATION	0.4261980094111589	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9812655474199394	WITHOUT_CLASSIFICATION	0.01873445258006058	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999999890296515	WITHOUT_CLASSIFICATION	1.0970348499202987E-7	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9997976156734825	WITHOUT_CLASSIFICATION	2.0238432651756343E-4	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998128521530747	WITHOUT_CLASSIFICATION	1.871478469253777E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9975133223251164	WITHOUT_CLASSIFICATION	0.0024866776748837514	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989792113724891	WITHOUT_CLASSIFICATION	0.0010207886275109136	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999204339066655	WITHOUT_CLASSIFICATION	7.95660933345648E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999788937157141	WITHOUT_CLASSIFICATION	2.1106284285819116E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999852118094689	WITHOUT_CLASSIFICATION	1.4788190531113865E-4	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9880752380547891	WITHOUT_CLASSIFICATION	0.011924761945210834	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998682341111	WITHOUT_CLASSIFICATION	1.3176588884525765E-7	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999991736839463	WITHOUT_CLASSIFICATION	8.263160537231284E-7	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.8932309776569471	WITHOUT_CLASSIFICATION	0.10676902234305283	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999648470600269	WITHOUT_CLASSIFICATION	3.515293997321098E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999786804728545	WITHOUT_CLASSIFICATION	2.131952714539168E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999997270940623	WITHOUT_CLASSIFICATION	2.729059376693633E-7	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998682341111	WITHOUT_CLASSIFICATION	1.3176588884525765E-7	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9984779812987391	WITHOUT_CLASSIFICATION	0.0015220187012608612	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999858243705084	WITHOUT_CLASSIFICATION	1.4175629491537115E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999770847008	WITHOUT_CLASSIFICATION	2.2915299279955056E-8	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999489211856	WITHOUT_CLASSIFICATION	5.1078814353165984E-8	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999879156789238	WITHOUT_CLASSIFICATION	1.2084321076273506E-5	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999980365243842	WITHOUT_CLASSIFICATION	1.963475615778765E-6	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999979006916565	WITHOUT_CLASSIFICATION	2.0993083435942917E-6	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999976268049223	WITHOUT_CLASSIFICATION	2.373195077681142E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999996007312609	WITHOUT_CLASSIFICATION	3.9926873917129646E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.998618742851688	WITHOUT_CLASSIFICATION	0.0013812571483120463	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997468334816845	WITHOUT_CLASSIFICATION	2.53166518315525E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999696671474	WITHOUT_CLASSIFICATION	3.033285258693128E-8	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999871325584521	WITHOUT_CLASSIFICATION	1.2867441547837078E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999841613473	WITHOUT_CLASSIFICATION	1.5838652687359473E-8	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999471015544161	WITHOUT_CLASSIFICATION	5.289844558382408E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999995989706121	WITHOUT_CLASSIFICATION	4.010293878850131E-7	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999988203961643	WITHOUT_CLASSIFICATION	1.1796038356456777E-6	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999998839369642	WITHOUT_CLASSIFICATION	1.1606303581139348E-6	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999864744242316	WITHOUT_CLASSIFICATION	1.3525575768367537E-5	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999991097670932	WITHOUT_CLASSIFICATION	8.90232906801854E-6	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9987882346831564	WITHOUT_CLASSIFICATION	0.0012117653168435972	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999792513420415	WITHOUT_CLASSIFICATION	2.0748657958611915E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999996375112566	WITHOUT_CLASSIFICATION	3.624887433854097E-7	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999996007312609	WITHOUT_CLASSIFICATION	3.9926873917129646E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999988724051011	WITHOUT_CLASSIFICATION	1.1275948989243452E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9997598678711884	WITHOUT_CLASSIFICATION	2.401321288115827E-4	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998170190712329	WITHOUT_CLASSIFICATION	1.8298092876712821E-4	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998297182874839	WITHOUT_CLASSIFICATION	1.702817125161516E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932538472238	WITHOUT_CLASSIFICATION	6.7461527762277685E-6	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999921194224383	WITHOUT_CLASSIFICATION	7.880577561757203E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999037734262385	WITHOUT_CLASSIFICATION	9.62265737614604E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999914127491857	WITHOUT_CLASSIFICATION	8.587250814412961E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999897196115629	WITHOUT_CLASSIFICATION	1.0280388437063249E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.999980031708626	WITHOUT_CLASSIFICATION	1.996829137403908E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999979691312808	WITHOUT_CLASSIFICATION	2.030868719234833E-6	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999893964792	WITHOUT_CLASSIFICATION	1.0603520766756112E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.964589018655169	WITHOUT_CLASSIFICATION	0.035410981344831005	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999686262969	WITHOUT_CLASSIFICATION	3.137370304824662E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999835696903351	WITHOUT_CLASSIFICATION	1.643030966488417E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999992675918727	WITHOUT_CLASSIFICATION	7.324081273099134E-7	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999577115116108	WITHOUT_CLASSIFICATION	4.228848838914059E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999979691312808	WITHOUT_CLASSIFICATION	2.030868719234833E-6	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999976895557838	WITHOUT_CLASSIFICATION	2.3104442162621735E-6	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9987872429029634	WITHOUT_CLASSIFICATION	0.0012127570970365791	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999997462070674	WITHOUT_CLASSIFICATION	2.537929325194376E-7	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999899794953206	WITHOUT_CLASSIFICATION	1.0020504679332829E-5	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999912570633132	WITHOUT_CLASSIFICATION	8.742936686916069E-6	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999789047426	WITHOUT_CLASSIFICATION	2.10952573888876E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999835696903351	WITHOUT_CLASSIFICATION	1.643030966488417E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999997466539412	WITHOUT_CLASSIFICATION	2.5334605880261726E-7	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999370000752618	WITHOUT_CLASSIFICATION	6.299992473819925E-5	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999283258307	WITHOUT_CLASSIFICATION	7.167416929546626E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852629187456	WITHOUT_CLASSIFICATION	1.473708125448747E-5	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966204539967	WITHOUT_CLASSIFICATION	3.379546003249604E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964190747503	WITHOUT_CLASSIFICATION	3.5809252495872084E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999823501636	WITHOUT_CLASSIFICATION	1.7649836408142733E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999823501636	WITHOUT_CLASSIFICATION	1.7649836408142733E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9970481752729683	WITHOUT_CLASSIFICATION	0.0029518247270316905	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999920303796712	WITHOUT_CLASSIFICATION	7.969620328802361E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999867653378824	WITHOUT_CLASSIFICATION	1.323466211763237E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999893347848287	WITHOUT_CLASSIFICATION	1.0665215171310611E-5	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999974449171268	WITHOUT_CLASSIFICATION	2.5550828731531096E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935355943711	WITHOUT_CLASSIFICATION	6.464405628883522E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968883615904	WITHOUT_CLASSIFICATION	3.1116384097168506E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997966273399	WITHOUT_CLASSIFICATION	2.0337266010401823E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9955273895570647	WITHOUT_CLASSIFICATION	0.004472610442935384	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999551668326	WITHOUT_CLASSIFICATION	4.483316742356449E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935355943711	WITHOUT_CLASSIFICATION	6.464405628883522E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968883615904	WITHOUT_CLASSIFICATION	3.1116384097168506E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997966273399	WITHOUT_CLASSIFICATION	2.0337266010401823E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999951618916317	WITHOUT_CLASSIFICATION	4.838108368219745E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9963212855083797	WITHOUT_CLASSIFICATION	0.0036787144916203994	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999859589312087	WITHOUT_CLASSIFICATION	1.4041068791352877E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999876970756839	WITHOUT_CLASSIFICATION	1.230292431602008E-5	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999519645839422	WITHOUT_CLASSIFICATION	4.8035416057708356E-5	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.999997724130416	WITHOUT_CLASSIFICATION	2.275869584012028E-6	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999975219704618	WITHOUT_CLASSIFICATION	2.478029538153375E-6	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9994116058876833	WITHOUT_CLASSIFICATION	5.883941123167282E-4	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9999221082485927	WITHOUT_CLASSIFICATION	7.789175140722963E-5	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999889168208857	WITHOUT_CLASSIFICATION	1.1083179114293468E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999934453629303	WITHOUT_CLASSIFICATION	6.554637069570988E-6	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9954909715205627	WITHOUT_CLASSIFICATION	0.00450902847943733	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9993174440531659	WITHOUT_CLASSIFICATION	6.825559468341343E-4	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999879784325606	WITHOUT_CLASSIFICATION	1.202156743939147E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999594159063349	WITHOUT_CLASSIFICATION	4.058409366518303E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997779705519552	WITHOUT_CLASSIFICATION	2.2202944804473589E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995254662601037	WITHOUT_CLASSIFICATION	4.74533739896199E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999779987786659	WITHOUT_CLASSIFICATION	2.2001221334163794E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999982817591377	WITHOUT_CLASSIFICATION	1.7182408622343348E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998245781909	WITHOUT_CLASSIFICATION	1.754218091150526E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999999186183139	WITHOUT_CLASSIFICATION	8.138168608954663E-7	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999207689545917	WITHOUT_CLASSIFICATION	7.923104540829854E-4	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999994715418439	WITHOUT_CLASSIFICATION	5.284581560564978E-7	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999651485370941	WITHOUT_CLASSIFICATION	3.4851462905931023E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999991846524813	WITHOUT_CLASSIFICATION	8.153475187733392E-7	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9985419890843446	WITHOUT_CLASSIFICATION	0.0014580109156554105	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985082889439	WITHOUT_CLASSIFICATION	1.4917110561522704E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989605665613	WITHOUT_CLASSIFICATION	1.0394334387067555E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999997233239721	WITHOUT_CLASSIFICATION	2.766760279136031E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994262530063	WITHOUT_CLASSIFICATION	5.737469936320928E-7	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996686236167	WITHOUT_CLASSIFICATION	3.313763833127145E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999976724352471	WITHOUT_CLASSIFICATION	2.327564752905094E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999976724352471	WITHOUT_CLASSIFICATION	2.327564752905094E-5	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999998344624334	WITHOUT_CLASSIFICATION	1.6553756660114528E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999994791888	WITHOUT_CLASSIFICATION	5.208111101333201E-10	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999432483399396	WITHOUT_CLASSIFICATION	5.675166006034558E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990451257030779	WITHOUT_CLASSIFICATION	9.548742969220934E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9997796350825163	WITHOUT_CLASSIFICATION	2.2036491748366464E-4	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9997845548554123	WITHOUT_CLASSIFICATION	2.1544514458764717E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9997039302429345	WITHOUT_CLASSIFICATION	2.960697570655028E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.999995550156916	WITHOUT_CLASSIFICATION	4.44984308393649E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9996666202308241	WITHOUT_CLASSIFICATION	3.3337976917598465E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998689535377	WITHOUT_CLASSIFICATION	1.310464622746367E-7	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999156123784	WITHOUT_CLASSIFICATION	8.438762155845604E-8	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995397608011	WITHOUT_CLASSIFICATION	4.602391989086597E-7	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998685263877	WITHOUT_CLASSIFICATION	1.3147361223057187E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997976954216	WITHOUT_CLASSIFICATION	2.0230457836819476E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996341826692	WITHOUT_CLASSIFICATION	3.6581733077364504E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993732208604	WITHOUT_CLASSIFICATION	6.267791395718838E-7	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999641635688	WITHOUT_CLASSIFICATION	3.5836431152070875E-8	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998356001446	WITHOUT_CLASSIFICATION	1.6439985547325538E-7	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998937230469	WITHOUT_CLASSIFICATION	1.0627695314210426E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980041262856	WITHOUT_CLASSIFICATION	1.9958737144755577E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999953135022176	WITHOUT_CLASSIFICATION	4.686497782301762E-6	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999912798174391	WITHOUT_CLASSIFICATION	8.72018256101192E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9983251267148627	WITHOUT_CLASSIFICATION	0.0016748732851372301	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999813444110669	WITHOUT_CLASSIFICATION	1.865558893314494E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999272195875419	WITHOUT_CLASSIFICATION	7.278041245810228E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9821082992438885	WITHOUT_CLASSIFICATION	0.017891700756111475	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999993976747837	WITHOUT_CLASSIFICATION	6.023252162747576E-7	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9989758112956424	WITHOUT_CLASSIFICATION	0.0010241887043576222	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9983251267148627	WITHOUT_CLASSIFICATION	0.0016748732851372301	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9983251267148627	WITHOUT_CLASSIFICATION	0.0016748732851372301	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.8556336659679301	WITHOUT_CLASSIFICATION	0.14436633403206986	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999997088126235	WITHOUT_CLASSIFICATION	2.9118737650852166E-6	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999801468191123	WITHOUT_CLASSIFICATION	1.9853180887633097E-5	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9997186625960459	WITHOUT_CLASSIFICATION	2.813374039541203E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999993489663114	WITHOUT_CLASSIFICATION	6.510336887307918E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998245781909	WITHOUT_CLASSIFICATION	1.754218091150526E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999621588517169	WITHOUT_CLASSIFICATION	3.784114828309821E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999997688430393	WITHOUT_CLASSIFICATION	2.311569606037971E-7	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999992565272897	WITHOUT_CLASSIFICATION	7.434727103247701E-7	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986428067104943	WITHOUT_CLASSIFICATION	0.0013571932895056317	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999978178024356	WITHOUT_CLASSIFICATION	2.182197564496298E-6	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999976142167476	WITHOUT_CLASSIFICATION	2.385783252403348E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999012336957539	WITHOUT_CLASSIFICATION	9.876630424607172E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999012336957539	WITHOUT_CLASSIFICATION	9.876630424607172E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999037124590493	WITHOUT_CLASSIFICATION	9.628754095071334E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999037124590493	WITHOUT_CLASSIFICATION	9.628754095071334E-5	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998548615615517	WITHOUT_CLASSIFICATION	1.451384384482921E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977869253679	WITHOUT_CLASSIFICATION	2.2130746320455178E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999796934704	WITHOUT_CLASSIFICATION	2.030652956747315E-8	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999579541660819	WITHOUT_CLASSIFICATION	4.2045833918177427E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999920260823378	WITHOUT_CLASSIFICATION	7.973917662181437E-6	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9678069289763513	WITHOUT_CLASSIFICATION	0.03219307102364863	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999009117553	WITHOUT_CLASSIFICATION	9.90882447038697E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885522352302	WITHOUT_CLASSIFICATION	1.144776476988302E-5	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9959307781359044	WITHOUT_CLASSIFICATION	0.004069221864095658	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999966330655157	WITHOUT_CLASSIFICATION	3.3669344843713986E-6	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999752396751	WITHOUT_CLASSIFICATION	2.476032483705647E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999997332776307	WITHOUT_CLASSIFICATION	2.6672236930196096E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9839787729306422	WITHOUT_CLASSIFICATION	0.016021227069357883	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999997237462165	WITHOUT_CLASSIFICATION	2.762537835435297E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.999983730317702	WITHOUT_CLASSIFICATION	1.626968229802695E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999863429209406	WITHOUT_CLASSIFICATION	1.3657079059406974E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999863429209406	WITHOUT_CLASSIFICATION	1.3657079059406974E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999955900573331	WITHOUT_CLASSIFICATION	4.409942666930213E-6	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999990249484335	WITHOUT_CLASSIFICATION	9.750515664694492E-7	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999993705622	WITHOUT_CLASSIFICATION	6.294377365826668E-10	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999998844642342	WITHOUT_CLASSIFICATION	1.1553576580788718E-6	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978163855466323	WITHOUT_CLASSIFICATION	0.0021836144533676706	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999637441891739	WITHOUT_CLASSIFICATION	3.625581082610799E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999991946929783	WITHOUT_CLASSIFICATION	8.053070217522822E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783643046923	WITHOUT_CLASSIFICATION	2.1635695307661936E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999993060204138	WITHOUT_CLASSIFICATION	6.939795861999068E-7	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999988645685999	WITHOUT_CLASSIFICATION	1.1354314001084231E-6	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999446399296095	WITHOUT_CLASSIFICATION	5.536007039041699E-5	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999996210577679	WITHOUT_CLASSIFICATION	3.7894223217616726E-7	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998857435335	WITHOUT_CLASSIFICATION	1.1425646647854766E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999660688708	WITHOUT_CLASSIFICATION	3.393112928698765E-8	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999996319216286	WITHOUT_CLASSIFICATION	3.680783714321857E-7	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9991271126760083	WITHOUT_CLASSIFICATION	8.72887323991629E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999315043462839	WITHOUT_CLASSIFICATION	6.849565371615146E-5	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999902107317922	WITHOUT_CLASSIFICATION	9.789268207885504E-6	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999839892378225	WITHOUT_CLASSIFICATION	1.6010762177533612E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999715689669	WITHOUT_CLASSIFICATION	2.8431033129770515E-8	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999868281407	WITHOUT_CLASSIFICATION	1.3171859159533309E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999976605529	WITHOUT_CLASSIFICATION	2.3394471457638614E-9	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999927696223466	WITHOUT_CLASSIFICATION	7.230377653314841E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999969542860121	WITHOUT_CLASSIFICATION	3.0457139879055028E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999963661340407	WITHOUT_CLASSIFICATION	3.63386595926041E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999463155906766	WITHOUT_CLASSIFICATION	5.3684409323439946E-5	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999294281678784	WITHOUT_CLASSIFICATION	7.057183212153368E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999687965520011	WITHOUT_CLASSIFICATION	3.1203447998873634E-5	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.99999999994107	WITHOUT_CLASSIFICATION	5.89300327588037E-11	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998256349474629	WITHOUT_CLASSIFICATION	1.743650525371672E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999949413871033	WITHOUT_CLASSIFICATION	5.058612896667245E-6	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999957258466001	WITHOUT_CLASSIFICATION	4.2741533998497084E-6	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999926569039049	WITHOUT_CLASSIFICATION	7.343096094994418E-6	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9953579108993821	WITHOUT_CLASSIFICATION	0.004642089100618	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999998254425884	WITHOUT_CLASSIFICATION	1.7455741160510909E-6	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9993621915516243	WITHOUT_CLASSIFICATION	6.378084483756112E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999678686743	WITHOUT_CLASSIFICATION	3.2131325634443857E-8	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9988074991801111	WITHOUT_CLASSIFICATION	0.0011925008198887914	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999997603842075	WITHOUT_CLASSIFICATION	2.396157925578611E-7	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.999980538501484	WITHOUT_CLASSIFICATION	1.9461498515913095E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999986889681796	WITHOUT_CLASSIFICATION	1.3110318205195053E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999970771430561	WITHOUT_CLASSIFICATION	2.922856943952248E-6	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6798652400161564	WITHOUT_CLASSIFICATION	0.3201347599838436	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.999992446339039	WITHOUT_CLASSIFICATION	7.55366096093083E-6	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999420993138423	WITHOUT_CLASSIFICATION	5.790068615779868E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9964898985274092	WITHOUT_CLASSIFICATION	0.0035101014725906748	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999994131881753	WITHOUT_CLASSIFICATION	5.868118247093183E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999988925143285	WITHOUT_CLASSIFICATION	1.1074856714162906E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999999526676671	WITHOUT_CLASSIFICATION	4.733233288213752E-8	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998797217353482	WITHOUT_CLASSIFICATION	1.2027826465184116E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999941912717576	WITHOUT_CLASSIFICATION	5.808728242348579E-6	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999930662876858	WITHOUT_CLASSIFICATION	6.933712314212926E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999671478769446	WITHOUT_CLASSIFICATION	3.285212305529527E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999976983565718	WITHOUT_CLASSIFICATION	2.301643428268342E-6	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999998044374339	WITHOUT_CLASSIFICATION	1.9556256625348004E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999952534090649	WITHOUT_CLASSIFICATION	4.74659093507369E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9929221398858125	WITHOUT_CLASSIFICATION	0.007077860114187503	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.999997815796132	WITHOUT_CLASSIFICATION	2.184203868043209E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999874338122556	WITHOUT_CLASSIFICATION	1.2566187744334105E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9812233007662821	WITHOUT_CLASSIFICATION	0.018776699233717924	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999957387912081	WITHOUT_CLASSIFICATION	4.261208791968115E-6	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999997348673739	WITHOUT_CLASSIFICATION	2.651326261666122E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999291013807	WITHOUT_CLASSIFICATION	7.089861927338105E-8	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999147946415452	WITHOUT_CLASSIFICATION	8.520535845479283E-4	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999720378613	WITHOUT_CLASSIFICATION	2.796213870793296E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9987639188591562	WITHOUT_CLASSIFICATION	0.001236081140843903	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9986986623689825	WITHOUT_CLASSIFICATION	0.0013013376310174601	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999967997564654	WITHOUT_CLASSIFICATION	3.2002435345839445E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987363322162	WITHOUT_CLASSIFICATION	1.2636677837971737E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987363322162	WITHOUT_CLASSIFICATION	1.2636677837971737E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999996216231087	WITHOUT_CLASSIFICATION	3.7837689132874013E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9976936507055781	WITHOUT_CLASSIFICATION	0.0023063492944218546	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999010477447997	WITHOUT_CLASSIFICATION	9.895225520025008E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9941932097447045	WITHOUT_CLASSIFICATION	0.005806790255295494	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999930139220813	WITHOUT_CLASSIFICATION	6.986077918607411E-6	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999881562244188	WITHOUT_CLASSIFICATION	1.1843775581207057E-4	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999981842919629	WITHOUT_CLASSIFICATION	1.815708037097845E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999737882033	WITHOUT_CLASSIFICATION	2.6211796684272745E-8	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999218493572442	WITHOUT_CLASSIFICATION	7.815064275591397E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999999639646598	WITHOUT_CLASSIFICATION	3.6035340057089915E-8	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999989584645094	WITHOUT_CLASSIFICATION	1.0415354905891102E-6	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996437305307	WITHOUT_CLASSIFICATION	3.562694692756631E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999944324785162	WITHOUT_CLASSIFICATION	5.567521483796639E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999823164372135	WITHOUT_CLASSIFICATION	1.7683562786526613E-5	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998886699830953	WITHOUT_CLASSIFICATION	1.113300169046956E-4	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.5661107314171796	WITHOUT_CLASSIFICATION	0.4338892685828204	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999954185162726	WITHOUT_CLASSIFICATION	4.5814837274328415E-6	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8998013301638745	WITHOUT_CLASSIFICATION	0.10019866983612545	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9971380025985628	WITHOUT_CLASSIFICATION	0.002861997401437328	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.998798354963819	WITHOUT_CLASSIFICATION	0.001201645036181024	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999825947392273	WITHOUT_CLASSIFICATION	1.7405260772609066E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999916589346288	WITHOUT_CLASSIFICATION	8.341065371198223E-6	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9934273357684471	WITHOUT_CLASSIFICATION	0.006572664231552926	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9997374878311373	WITHOUT_CLASSIFICATION	2.6251216886268985E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999993523098659	WITHOUT_CLASSIFICATION	6.476901341495053E-7	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999081558766529	WITHOUT_CLASSIFICATION	9.184412334705856E-5	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999790328280651	WITHOUT_CLASSIFICATION	2.0967171934930832E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999629684157912	WITHOUT_CLASSIFICATION	3.703158420886319E-5	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999940466677835	WITHOUT_CLASSIFICATION	5.953332216534439E-6	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999977159626494	WITHOUT_CLASSIFICATION	2.2840373505247325E-6	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999990496776124	WITHOUT_CLASSIFICATION	9.503223874715462E-7	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999530803167082	WITHOUT_CLASSIFICATION	4.6919683291786165E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999977224114079	WITHOUT_CLASSIFICATION	2.2775885920545037E-6	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999986363339779	WITHOUT_CLASSIFICATION	1.3636660220651912E-6	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996735262527701	WITHOUT_CLASSIFICATION	3.264737472300192E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996735262527701	WITHOUT_CLASSIFICATION	3.264737472300192E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999994844032037	WITHOUT_CLASSIFICATION	5.155967963031185E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9991894809064251	WITHOUT_CLASSIFICATION	8.105190935747713E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999106703224192	WITHOUT_CLASSIFICATION	8.932967758072991E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999621590757478	WITHOUT_CLASSIFICATION	3.784092425220852E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999522108944091	WITHOUT_CLASSIFICATION	4.7789105590939644E-5	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999788559390422	WITHOUT_CLASSIFICATION	2.1144060957732378E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999988610715298	WITHOUT_CLASSIFICATION	1.138928470287988E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9998697769137329	WITHOUT_CLASSIFICATION	1.3022308626706294E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9961012240171059	WITHOUT_CLASSIFICATION	0.003898775982894088	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998554087761	WITHOUT_CLASSIFICATION	1.4459122375315466E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999931939958456	WITHOUT_CLASSIFICATION	6.8060041543924636E-6	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999188498684648	WITHOUT_CLASSIFICATION	8.115013153517938E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999997390117725	WITHOUT_CLASSIFICATION	2.60988227403207E-7	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998122393965938	WITHOUT_CLASSIFICATION	1.8776060340618077E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999527710551	WITHOUT_CLASSIFICATION	4.722894493428101E-8	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9990255658190896	WITHOUT_CLASSIFICATION	9.744341809102898E-4	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9990255658190896	WITHOUT_CLASSIFICATION	9.744341809102898E-4	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999998811376029	WITHOUT_CLASSIFICATION	1.1886239720202116E-7	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999999822999795	WITHOUT_CLASSIFICATION	1.7700020504145174E-7	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.98730800297926	WITHOUT_CLASSIFICATION	0.012691997020739957	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999998548549573	WITHOUT_CLASSIFICATION	1.4514504269320974E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998271700601931	WITHOUT_CLASSIFICATION	1.7282993980696136E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.999997916932399	WITHOUT_CLASSIFICATION	2.0830676009916386E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9998486691186227	WITHOUT_CLASSIFICATION	1.5133088137723284E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9998486691186227	WITHOUT_CLASSIFICATION	1.5133088137723284E-4	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999974200912829	WITHOUT_CLASSIFICATION	2.5799087172440567E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9980033062268352	WITHOUT_CLASSIFICATION	0.0019966937731648784	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999783683928878	WITHOUT_CLASSIFICATION	2.1631607112241756E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999999868285911	WITHOUT_CLASSIFICATION	1.3171408780178248E-8	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.8154939104305794	WITHOUT_CLASSIFICATION	0.1845060895694206	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999866645990644	WITHOUT_CLASSIFICATION	1.3335400935634104E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999791822897237	WITHOUT_CLASSIFICATION	2.081771027638046E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999895090062708	WITHOUT_CLASSIFICATION	1.0490993729117285E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997639184981	WITHOUT_CLASSIFICATION	2.3608150195791872E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999184058295975	WITHOUT_CLASSIFICATION	8.159417040252151E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.999866971528892	WITHOUT_CLASSIFICATION	1.330284711079747E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999390430391986	WITHOUT_CLASSIFICATION	6.095696080142894E-5	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997462309434599	WITHOUT_CLASSIFICATION	2.537690565401254E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999983732706096	WITHOUT_CLASSIFICATION	1.6267293903330505E-6	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995779815986855	WITHOUT_CLASSIFICATION	4.220184013145575E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999942315466209	WITHOUT_CLASSIFICATION	5.768453379016066E-6	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999705327718	WITHOUT_CLASSIFICATION	2.9467228237896332E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999674097173216	WITHOUT_CLASSIFICATION	3.259028267843234E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998900127523795	WITHOUT_CLASSIFICATION	1.099872476205152E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999982572997906	WITHOUT_CLASSIFICATION	1.7427002093419128E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998642198675	WITHOUT_CLASSIFICATION	1.3578013244826285E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999967090044759	WITHOUT_CLASSIFICATION	3.290995524183832E-6	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999924835245741	WITHOUT_CLASSIFICATION	7.516475425860242E-6	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9980186776127328	WITHOUT_CLASSIFICATION	0.001981322387267207	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998939290926531	WITHOUT_CLASSIFICATION	1.0607090734697294E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999703249728974	WITHOUT_CLASSIFICATION	2.967502710250754E-5	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999817144988853	WITHOUT_CLASSIFICATION	1.8285501114671147E-5	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9980962573700713	WITHOUT_CLASSIFICATION	0.0019037426299286563	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999357402100041	WITHOUT_CLASSIFICATION	6.425978999591192E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999828137238405	WITHOUT_CLASSIFICATION	1.7186276159514972E-5	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9992611443431968	WITHOUT_CLASSIFICATION	7.388556568032219E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9991086522269502	WITHOUT_CLASSIFICATION	8.913477730498542E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9993863690197785	WITHOUT_CLASSIFICATION	6.136309802216232E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999997887615694	WITHOUT_CLASSIFICATION	2.112384307418924E-7	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999970408338094	WITHOUT_CLASSIFICATION	2.959166190680346E-6	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999120459138358	WITHOUT_CLASSIFICATION	8.795408616424358E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9999443461152754	WITHOUT_CLASSIFICATION	5.565388472454179E-5	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999922090019168	WITHOUT_CLASSIFICATION	7.790998083310847E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999761330014626	WITHOUT_CLASSIFICATION	2.386699853748486E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999603687613	WITHOUT_CLASSIFICATION	3.9631238702866853E-7	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999656952814	WITHOUT_CLASSIFICATION	3.4304718530289746E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999911163480246	WITHOUT_CLASSIFICATION	8.88365197534995E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999966935706437	WITHOUT_CLASSIFICATION	3.3064293561844698E-6	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999916536371446	WITHOUT_CLASSIFICATION	8.34636285535559E-6	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999959926109	WITHOUT_CLASSIFICATION	4.007389133563976E-9	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999617768395908	WITHOUT_CLASSIFICATION	3.8223160409341066E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999761330014626	WITHOUT_CLASSIFICATION	2.386699853748486E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999999603687613	WITHOUT_CLASSIFICATION	3.9631238702866853E-7	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999800050969048	WITHOUT_CLASSIFICATION	1.9994903095235755E-5	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996926605512925	WITHOUT_CLASSIFICATION	3.0733944870756124E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999944026974152	WITHOUT_CLASSIFICATION	5.59730258473194E-6	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999875694982584	WITHOUT_CLASSIFICATION	1.2430501741637444E-5	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999985432008728	WITHOUT_CLASSIFICATION	1.4567991271930779E-5	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999998097257558	WITHOUT_CLASSIFICATION	1.9027424425628468E-7	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999622274369	WITHOUT_CLASSIFICATION	3.777256310497941E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999928899302957	WITHOUT_CLASSIFICATION	7.110069704316943E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999675165302083	WITHOUT_CLASSIFICATION	3.248346979177447E-5	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9554416829690375	WITHOUT_CLASSIFICATION	0.04455831703096247	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999872025829	WITHOUT_CLASSIFICATION	1.2797417157593965E-8	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9554416829690375	WITHOUT_CLASSIFICATION	0.04455831703096247	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999912588422	WITHOUT_CLASSIFICATION	8.741157822045628E-9	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999897948674965	WITHOUT_CLASSIFICATION	1.0205132503455124E-5	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999998208966082	WITHOUT_CLASSIFICATION	1.7910339189398976E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998844780309	WITHOUT_CLASSIFICATION	1.1552196915985287E-7	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9998963913699042	WITHOUT_CLASSIFICATION	1.0360863009584998E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9994546343324194	WITHOUT_CLASSIFICATION	5.453656675805853E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9994546343324194	WITHOUT_CLASSIFICATION	5.453656675805853E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9991431343307846	WITHOUT_CLASSIFICATION	8.568656692154225E-4	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9978324831828782	WITHOUT_CLASSIFICATION	0.0021675168171217322	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999669227559447	WITHOUT_CLASSIFICATION	3.307724405524158E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999949699578812	WITHOUT_CLASSIFICATION	5.030042118799893E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9992056689093897	WITHOUT_CLASSIFICATION	7.943310906103956E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9654120272837124	WITHOUT_CLASSIFICATION	0.034587972716287635	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999989272779564	WITHOUT_CLASSIFICATION	1.0727220436277934E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999988919590959	WITHOUT_CLASSIFICATION	1.1080409041642943E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999879278555326	WITHOUT_CLASSIFICATION	1.2072144467394559E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9995735357512214	WITHOUT_CLASSIFICATION	4.264642487786635E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999981303991231	WITHOUT_CLASSIFICATION	1.8696008769262088E-6	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999851504173878	WITHOUT_CLASSIFICATION	1.4849582612339332E-5	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9994193491087491	WITHOUT_CLASSIFICATION	5.806508912509181E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999984535540647	WITHOUT_CLASSIFICATION	1.546445935310013E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9997450131497613	WITHOUT_CLASSIFICATION	2.549868502388173E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999974452118076	WITHOUT_CLASSIFICATION	2.554788192367668E-6	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999995897640535	WITHOUT_CLASSIFICATION	4.1023594647363235E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999641393218579	WITHOUT_CLASSIFICATION	3.586067814213657E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999988984583763	WITHOUT_CLASSIFICATION	1.1015416237626543E-6	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9994605336948813	WITHOUT_CLASSIFICATION	5.394663051187464E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999357121090119	WITHOUT_CLASSIFICATION	6.428789098819473E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999982690577299	WITHOUT_CLASSIFICATION	1.7309422701072096E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998073844077805	WITHOUT_CLASSIFICATION	1.926155922196129E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999878599415816	WITHOUT_CLASSIFICATION	1.2140058418396753E-5	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999988046125772	WITHOUT_CLASSIFICATION	1.1953874228087632E-5	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997404646047163	WITHOUT_CLASSIFICATION	2.5953539528369827E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999953029457856	WITHOUT_CLASSIFICATION	4.697054214322086E-6	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9955605783594156	WITHOUT_CLASSIFICATION	0.004439421640584431	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.998511990372415	WITHOUT_CLASSIFICATION	0.0014880096275849087	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9983697722966148	WITHOUT_CLASSIFICATION	0.0016302277033850535	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9912022792594145	WITHOUT_CLASSIFICATION	0.008797720740585425	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9998970178309027	WITHOUT_CLASSIFICATION	1.029821690973306E-4	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999989272779564	WITHOUT_CLASSIFICATION	1.0727220436277934E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999753416612133	WITHOUT_CLASSIFICATION	2.4658338786753795E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998736566589097	WITHOUT_CLASSIFICATION	1.263433410903301E-4	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.990481766357005	WITHOUT_CLASSIFICATION	0.009518233642995049	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999994869466224	WITHOUT_CLASSIFICATION	5.130533776311952E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999927131965645	WITHOUT_CLASSIFICATION	7.286803435497841E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999957660399919	WITHOUT_CLASSIFICATION	4.233960008185685E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999949699578812	WITHOUT_CLASSIFICATION	5.030042118799893E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.999949699578812	WITHOUT_CLASSIFICATION	5.030042118799893E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999953240434885	WITHOUT_CLASSIFICATION	4.675956511535031E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999991121583401	WITHOUT_CLASSIFICATION	8.87841659765605E-7	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9992362635765663	WITHOUT_CLASSIFICATION	7.637364234336855E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999802475035073	WITHOUT_CLASSIFICATION	1.97524964926868E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9998518135542416	WITHOUT_CLASSIFICATION	1.4818644575843358E-4	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999623311375672	WITHOUT_CLASSIFICATION	3.766886243281061E-5	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9990488336578528	WITHOUT_CLASSIFICATION	9.511663421471986E-4	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999816671646273	WITHOUT_CLASSIFICATION	1.833283537264624E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999550225081935	WITHOUT_CLASSIFICATION	4.4977491806511145E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998581382727	WITHOUT_CLASSIFICATION	1.4186172713666902E-7	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9984498961899044	WITHOUT_CLASSIFICATION	0.0015501038100955503	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999035019465587	WITHOUT_CLASSIFICATION	9.649805344119778E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998272658753924	WITHOUT_CLASSIFICATION	1.7273412460755278E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998581382727	WITHOUT_CLASSIFICATION	1.4186172713666902E-7	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999958418797696	WITHOUT_CLASSIFICATION	4.158120230351924E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9994139107982171	WITHOUT_CLASSIFICATION	5.860892017829459E-4	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999912709434593	WITHOUT_CLASSIFICATION	8.729056540672828E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.8939171618788624	WITHOUT_CLASSIFICATION	0.10608283812113763	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999035019465587	WITHOUT_CLASSIFICATION	9.649805344119778E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999983931940866	WITHOUT_CLASSIFICATION	1.6068059134549968E-6	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999967588086157	WITHOUT_CLASSIFICATION	3.2411913843202836E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999941696614865	WITHOUT_CLASSIFICATION	5.830338513423294E-6	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999917974515332	WITHOUT_CLASSIFICATION	8.202548466736199E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997581849671027	WITHOUT_CLASSIFICATION	2.4181503289731133E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999895371945362	WITHOUT_CLASSIFICATION	1.0462805463840476E-5	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999989733688216	WITHOUT_CLASSIFICATION	1.0266311784275999E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999966910974194	WITHOUT_CLASSIFICATION	3.3089025806916933E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9988765706131084	WITHOUT_CLASSIFICATION	0.0011234293868916238	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999372365120278	WITHOUT_CLASSIFICATION	6.276348797218384E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9995414953755395	WITHOUT_CLASSIFICATION	4.5850462446053145E-4	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999940923682472	WITHOUT_CLASSIFICATION	5.907631752714911E-6	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999998581382727	WITHOUT_CLASSIFICATION	1.4186172713666902E-7	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999983931940866	WITHOUT_CLASSIFICATION	1.6068059134549968E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999941696614865	WITHOUT_CLASSIFICATION	5.830338513423294E-6	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.99986494530627	WITHOUT_CLASSIFICATION	1.3505469372998411E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9996912479153527	WITHOUT_CLASSIFICATION	3.087520846473119E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999981245165804	WITHOUT_CLASSIFICATION	1.8754834195886442E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999035019465587	WITHOUT_CLASSIFICATION	9.649805344119778E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9988785418954667	WITHOUT_CLASSIFICATION	0.0011214581045333749	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999998627717667	WITHOUT_CLASSIFICATION	1.3722823332985135E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999834536145152	WITHOUT_CLASSIFICATION	1.654638548474786E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999962981481669	WITHOUT_CLASSIFICATION	3.7018518330595855E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999966910974194	WITHOUT_CLASSIFICATION	3.3089025806916933E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999958418797696	WITHOUT_CLASSIFICATION	4.158120230351924E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.999992421722203	WITHOUT_CLASSIFICATION	7.578277796971503E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999969659364798	WITHOUT_CLASSIFICATION	3.0340635201749654E-6	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999212136728222	WITHOUT_CLASSIFICATION	7.878632717780772E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9977969920337715	WITHOUT_CLASSIFICATION	0.0022030079662284535	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9967275780576915	WITHOUT_CLASSIFICATION	0.0032724219423085287	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9969517442514878	WITHOUT_CLASSIFICATION	0.0030482557485121673	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9997016946251417	WITHOUT_CLASSIFICATION	2.983053748583894E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998844780309	WITHOUT_CLASSIFICATION	1.1552196915985287E-7	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994327303850654	WITHOUT_CLASSIFICATION	5.672696149344907E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999531574162	WITHOUT_CLASSIFICATION	4.6842583727214314E-8	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9996646430265255	WITHOUT_CLASSIFICATION	3.353569734745002E-4	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999802277934107	WITHOUT_CLASSIFICATION	1.9772206589270874E-5	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999923943086685	WITHOUT_CLASSIFICATION	7.605691331518231E-6	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999999737243496	WITHOUT_CLASSIFICATION	2.6275650487485114E-8	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.999999829186614	WITHOUT_CLASSIFICATION	1.7081338607470024E-7	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999316360539	WITHOUT_CLASSIFICATION	6.836394600263518E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999962981481669	WITHOUT_CLASSIFICATION	3.7018518330595855E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999901681529605	WITHOUT_CLASSIFICATION	9.83184703960387E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999928120272941	WITHOUT_CLASSIFICATION	7.1879727059201954E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999811471408022	WITHOUT_CLASSIFICATION	1.8852859197826752E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999994498293197	WITHOUT_CLASSIFICATION	5.501706803723105E-7	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9999194750326409	WITHOUT_CLASSIFICATION	8.052496735913206E-5	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999895563241531	WITHOUT_CLASSIFICATION	1.044367584683619E-5	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999994345989678	WITHOUT_CLASSIFICATION	5.654010321857446E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9936344039079453	WITHOUT_CLASSIFICATION	0.006365596092054758	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999901454407072	WITHOUT_CLASSIFICATION	9.854559292835714E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9757298159837716	WITHOUT_CLASSIFICATION	0.024270184016228293	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999986535110299	WITHOUT_CLASSIFICATION	1.3464889700374835E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999991677016355	WITHOUT_CLASSIFICATION	8.322983644893021E-7	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.981939286178871	WITHOUT_CLASSIFICATION	0.018060713821128938	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9996697767020639	WITHOUT_CLASSIFICATION	3.30223297936081E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.995280258850477	WITHOUT_CLASSIFICATION	0.004719741149522906	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999940238478748	WITHOUT_CLASSIFICATION	5.976152125153293E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999289668744892	WITHOUT_CLASSIFICATION	7.103312551090128E-5	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999832640985264	WITHOUT_CLASSIFICATION	1.673590147353335E-5	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999988415697465	WITHOUT_CLASSIFICATION	1.1584302534825667E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9977200874814937	WITHOUT_CLASSIFICATION	0.0022799125185063974	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999958072546001	WITHOUT_CLASSIFICATION	4.192745399875909E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999917346178827	WITHOUT_CLASSIFICATION	8.265382117258336E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999997022487107	WITHOUT_CLASSIFICATION	2.977512893111472E-7	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999946585272237	WITHOUT_CLASSIFICATION	5.341472776210735E-6	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999930060161311	WITHOUT_CLASSIFICATION	6.993983868936216E-6	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7292793649949111	DESIGN	0.2707206350050889	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999987828057124	WITHOUT_CLASSIFICATION	1.2171942876148492E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999995058538783	WITHOUT_CLASSIFICATION	4.941461217296698E-7	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999904090885393	WITHOUT_CLASSIFICATION	9.590911460607911E-6	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5306247430347518	WITHOUT_CLASSIFICATION	0.46937525696524823	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999995906116157	WITHOUT_CLASSIFICATION	4.093883842365474E-7	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999787438086185	WITHOUT_CLASSIFICATION	2.125619138156225E-5	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999968964501884	WITHOUT_CLASSIFICATION	3.1035498115720403E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999612101325475	WITHOUT_CLASSIFICATION	3.878986745256949E-5	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999444460638863	WITHOUT_CLASSIFICATION	5.555393611365037E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999995421634752	WITHOUT_CLASSIFICATION	4.5783652476260755E-7	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999932745828509	WITHOUT_CLASSIFICATION	6.72541714915939E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.8852416985684839	WITHOUT_CLASSIFICATION	0.11475830143151608	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999995421634752	WITHOUT_CLASSIFICATION	4.5783652476260755E-7	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999444460638863	WITHOUT_CLASSIFICATION	5.555393611365037E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999932745828509	WITHOUT_CLASSIFICATION	6.72541714915939E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999979395831802	WITHOUT_CLASSIFICATION	2.060416819940396E-6	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999955261788591	WITHOUT_CLASSIFICATION	4.473821140869005E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999963225505	WITHOUT_CLASSIFICATION	3.677449333885202E-9	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9989809149809165	WITHOUT_CLASSIFICATION	0.0010190850190835655	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999998968818874	WITHOUT_CLASSIFICATION	1.0311811270884854E-7	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9993294791033823	DESIGN	6.705208966176868E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9622168593831653	WITHOUT_CLASSIFICATION	0.03778314061683475	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9984537475455296	WITHOUT_CLASSIFICATION	0.0015462524544703536	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999957124159349	WITHOUT_CLASSIFICATION	4.287584065026187E-6	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9997827268331142	WITHOUT_CLASSIFICATION	2.1727316688580843E-4	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999991923539634	WITHOUT_CLASSIFICATION	8.076460366151288E-7	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999991850518151	WITHOUT_CLASSIFICATION	8.149481849772669E-7	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998007262958877	WITHOUT_CLASSIFICATION	1.992737041123448E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9964605229660906	WITHOUT_CLASSIFICATION	0.003539477033909342	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999351196739	WITHOUT_CLASSIFICATION	6.488032613015868E-8	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999951934516	WITHOUT_CLASSIFICATION	4.806548438314832E-9	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999168713592899	WITHOUT_CLASSIFICATION	8.312864071003788E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9992282711013292	WITHOUT_CLASSIFICATION	7.71728898670786E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.992208168482707	WITHOUT_CLASSIFICATION	0.00779183151729307	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999898047130802	WITHOUT_CLASSIFICATION	1.0195286919684368E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.998843968195372	WITHOUT_CLASSIFICATION	0.0011560318046279366	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998480902235	WITHOUT_CLASSIFICATION	1.519097765690615E-7	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999925021351643	WITHOUT_CLASSIFICATION	7.49786483568939E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999992715012612	WITHOUT_CLASSIFICATION	7.28498738659432E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998948149284015	WITHOUT_CLASSIFICATION	1.0518507159840536E-4	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9998948149284015	WITHOUT_CLASSIFICATION	1.0518507159840536E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999729973363	WITHOUT_CLASSIFICATION	2.700266359444287E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999729973363	WITHOUT_CLASSIFICATION	2.700266359444287E-8	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9834763091063792	WITHOUT_CLASSIFICATION	0.01652369089362084	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999168713592899	WITHOUT_CLASSIFICATION	8.312864071003788E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999886349005188	WITHOUT_CLASSIFICATION	1.1365099481124404E-5	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999995896968704	WITHOUT_CLASSIFICATION	4.1030312954080887E-7	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9991774678005664	WITHOUT_CLASSIFICATION	8.225321994334966E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9991774678005664	WITHOUT_CLASSIFICATION	8.225321994334966E-4	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999965100402547	WITHOUT_CLASSIFICATION	3.4899597453182007E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9996693714283017	WITHOUT_CLASSIFICATION	3.306285716983006E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9997137808018965	WITHOUT_CLASSIFICATION	2.8621919810337E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999805690566286	WITHOUT_CLASSIFICATION	1.9430943371425318E-5	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8603036375993395	WITHOUT_CLASSIFICATION	0.13969636240066063	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999659084535412	WITHOUT_CLASSIFICATION	3.4091546458799404E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998076712656401	WITHOUT_CLASSIFICATION	1.9232873436006055E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9973883927674538	WITHOUT_CLASSIFICATION	0.002611607232546195	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9999067077967405	WITHOUT_CLASSIFICATION	9.329220325951016E-5	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999943988919228	WITHOUT_CLASSIFICATION	5.601108077256456E-6	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999972462806848	WITHOUT_CLASSIFICATION	2.7537193151483907E-6	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9997305965982134	WITHOUT_CLASSIFICATION	2.6940340178662397E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999970515508556	WITHOUT_CLASSIFICATION	2.948449144337237E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999553051530629	WITHOUT_CLASSIFICATION	4.469484693705806E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999889773808229	WITHOUT_CLASSIFICATION	1.1022619177100497E-5	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999989187724937	WITHOUT_CLASSIFICATION	1.0812275063600235E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993689524718579	WITHOUT_CLASSIFICATION	6.310475281421889E-4	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999962649513906	WITHOUT_CLASSIFICATION	3.735048609475308E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999272733015276	WITHOUT_CLASSIFICATION	7.272669847232744E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999863236955	WITHOUT_CLASSIFICATION	1.3676304670410086E-8	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999896977282003	WITHOUT_CLASSIFICATION	1.0302271799748692E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999917606682387	WITHOUT_CLASSIFICATION	8.239331761309388E-6	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999995998643229	WITHOUT_CLASSIFICATION	4.001356770807109E-7	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999915801145051	WITHOUT_CLASSIFICATION	8.419885494950675E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9990451257030779	WITHOUT_CLASSIFICATION	9.548742969220934E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999987018426013	WITHOUT_CLASSIFICATION	1.2981573986991892E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999991677016355	WITHOUT_CLASSIFICATION	8.322983644893021E-7	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999996923937186	WITHOUT_CLASSIFICATION	3.07606281418961E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9998552982711302	WITHOUT_CLASSIFICATION	1.447017288697103E-4	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898620420353	WITHOUT_CLASSIFICATION	1.0137957964618557E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947461626845	WITHOUT_CLASSIFICATION	5.25383731549945E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999616340082849	WITHOUT_CLASSIFICATION	3.8365991715180824E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999616340082849	WITHOUT_CLASSIFICATION	3.8365991715180824E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999296802035399	WITHOUT_CLASSIFICATION	7.031979646009722E-5	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999977021053659	WITHOUT_CLASSIFICATION	2.2978946341697703E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999976504251101	WITHOUT_CLASSIFICATION	2.349574889811768E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999976504251101	WITHOUT_CLASSIFICATION	2.349574889811768E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999986229570054	WITHOUT_CLASSIFICATION	1.377042994685481E-6	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999985483618096	WITHOUT_CLASSIFICATION	1.4516381903951005E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999994320066254	WITHOUT_CLASSIFICATION	5.679933745162754E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999993489663114	WITHOUT_CLASSIFICATION	6.510336887307918E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9995148450325411	WITHOUT_CLASSIFICATION	4.851549674589912E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999145463972454	WITHOUT_CLASSIFICATION	8.545360275448591E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9979645764013797	WITHOUT_CLASSIFICATION	0.0020354235986202772	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999837361732502	WITHOUT_CLASSIFICATION	1.6263826749734943E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9892414588816852	WITHOUT_CLASSIFICATION	0.010758541118314658	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9892414588816852	WITHOUT_CLASSIFICATION	0.010758541118314658	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.5725078769215297	WITHOUT_CLASSIFICATION	0.4274921230784701	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999997899523038	WITHOUT_CLASSIFICATION	2.1004769629292918E-7	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999997899523038	WITHOUT_CLASSIFICATION	2.1004769629292918E-7	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9933284149902067	WITHOUT_CLASSIFICATION	0.006671585009793349	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999482705979	WITHOUT_CLASSIFICATION	5.1729402011879646E-8	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9870783155514142	WITHOUT_CLASSIFICATION	0.012921684448585742	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999545049069	WITHOUT_CLASSIFICATION	4.549509327955736E-8	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999010881006	WITHOUT_CLASSIFICATION	9.891189950224832E-8	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999707689374	WITHOUT_CLASSIFICATION	2.9231062600424303E-8	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999918349285	WITHOUT_CLASSIFICATION	8.165071489602414E-9	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999539655309323	WITHOUT_CLASSIFICATION	4.6034469067634E-5	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999901228062601	WITHOUT_CLASSIFICATION	9.877193739800043E-6	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9941176367745873	WITHOUT_CLASSIFICATION	0.005882363225412664	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999102372008385	WITHOUT_CLASSIFICATION	8.976279916155785E-5	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999957910189098	WITHOUT_CLASSIFICATION	4.208981090257248E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999559982237973	WITHOUT_CLASSIFICATION	4.4001776202702435E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999559982237973	WITHOUT_CLASSIFICATION	4.4001776202702435E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999559982237973	WITHOUT_CLASSIFICATION	4.4001776202702435E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999559982237973	WITHOUT_CLASSIFICATION	4.4001776202702435E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999999365351739	WITHOUT_CLASSIFICATION	6.346482606545985E-8	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.999998618682731	WITHOUT_CLASSIFICATION	1.3813172690450925E-6	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999718714212952	WITHOUT_CLASSIFICATION	2.8128578704762102E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9997143441418104	WITHOUT_CLASSIFICATION	2.856558581896326E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999963062298864	WITHOUT_CLASSIFICATION	3.6937701135841156E-6	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9835476073096596	WITHOUT_CLASSIFICATION	0.016452392690340316	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9993841296374405	WITHOUT_CLASSIFICATION	6.158703625594305E-4	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999482138773871	WITHOUT_CLASSIFICATION	5.178612261298747E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999946796951259	WITHOUT_CLASSIFICATION	5.320304874118812E-6	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999994229405936	WITHOUT_CLASSIFICATION	5.770594064786331E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998478977704716	WITHOUT_CLASSIFICATION	1.5210222952842428E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999536858774276	WITHOUT_CLASSIFICATION	4.63141225724218E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9942136950014296	WITHOUT_CLASSIFICATION	0.005786304998570462	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999940266900256	WITHOUT_CLASSIFICATION	5.973309974382083E-6	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9995616560085083	WITHOUT_CLASSIFICATION	4.383439914916716E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999536858774276	WITHOUT_CLASSIFICATION	4.63141225724218E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9998880532290988	WITHOUT_CLASSIFICATION	1.11946770901113E-4	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9997611486118261	WITHOUT_CLASSIFICATION	2.3885138817389984E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999955175193884	WITHOUT_CLASSIFICATION	4.482480611614527E-6	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999917370283901	WITHOUT_CLASSIFICATION	8.262971609889256E-6	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.773017489839042	WITHOUT_CLASSIFICATION	0.22698251016095805	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999468397422033	WITHOUT_CLASSIFICATION	5.316025779665704E-5	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999983238642741	WITHOUT_CLASSIFICATION	1.676135725856855E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999645175232935	WITHOUT_CLASSIFICATION	3.54824767063876E-5	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999057126221275	WITHOUT_CLASSIFICATION	9.428737787246917E-5	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999970295387942	WITHOUT_CLASSIFICATION	2.9704612057860635E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999329455866421	WITHOUT_CLASSIFICATION	6.705441335781166E-5	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999886768367017	WITHOUT_CLASSIFICATION	1.1323163298430438E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9996343821387386	WITHOUT_CLASSIFICATION	3.6561786126144394E-4	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9938623013668377	WITHOUT_CLASSIFICATION	0.00613769863316228	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997900627151	WITHOUT_CLASSIFICATION	2.099372849487953E-7	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9712654760417371	WITHOUT_CLASSIFICATION	0.028734523958262988	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999949236164791	WITHOUT_CLASSIFICATION	5.0763835208454496E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999971981036958	WITHOUT_CLASSIFICATION	2.8018963041792923E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999587385142836	WITHOUT_CLASSIFICATION	4.126148571636559E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999971981036958	WITHOUT_CLASSIFICATION	2.8018963041792923E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998514182653	WITHOUT_CLASSIFICATION	1.4858173478159247E-7	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999963953365265	WITHOUT_CLASSIFICATION	3.6046634734297993E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9993062851514535	WITHOUT_CLASSIFICATION	6.93714848546457E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999012476931651	WITHOUT_CLASSIFICATION	9.87523068348777E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999949236164791	WITHOUT_CLASSIFICATION	5.0763835208454496E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999587385142836	WITHOUT_CLASSIFICATION	4.126148571636559E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999998514182653	WITHOUT_CLASSIFICATION	1.4858173478159247E-7	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998641816058617	WITHOUT_CLASSIFICATION	1.3581839413836968E-4	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999721781130514	WITHOUT_CLASSIFICATION	2.7821886948488464E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999718201560289	WITHOUT_CLASSIFICATION	2.8179843971119495E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999842908008222	WITHOUT_CLASSIFICATION	1.5709199177865907E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9994176768640911	WITHOUT_CLASSIFICATION	5.823231359089413E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999680150017	WITHOUT_CLASSIFICATION	3.198499833447017E-8	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993689524718579	WITHOUT_CLASSIFICATION	6.310475281421889E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999963953365265	WITHOUT_CLASSIFICATION	3.6046634734297993E-6	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9996632378429798	WITHOUT_CLASSIFICATION	3.3676215702015187E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999738284931304	WITHOUT_CLASSIFICATION	2.617150686959644E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999957632342784	WITHOUT_CLASSIFICATION	4.236765721627264E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993689524718579	WITHOUT_CLASSIFICATION	6.310475281421889E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999931343365636	WITHOUT_CLASSIFICATION	6.86566343633943E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993689524718579	WITHOUT_CLASSIFICATION	6.310475281421889E-4	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999988782786805	WITHOUT_CLASSIFICATION	1.1217213195090172E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999999804640279	WITHOUT_CLASSIFICATION	1.95359720818738E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997516804371924	WITHOUT_CLASSIFICATION	2.483195628074699E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999960696742558	WITHOUT_CLASSIFICATION	3.930325744184318E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999988798789033	WITHOUT_CLASSIFICATION	1.1201210967274253E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999679729407879	WITHOUT_CLASSIFICATION	3.2027059212114816E-5	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999941390868856	WITHOUT_CLASSIFICATION	5.860913114449898E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.99997913827714	WITHOUT_CLASSIFICATION	2.086172285989677E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997001630979	WITHOUT_CLASSIFICATION	2.9983690213635394E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999832740734111	WITHOUT_CLASSIFICATION	1.672592658888106E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999987363322162	WITHOUT_CLASSIFICATION	1.2636677837971737E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9928171476771089	WITHOUT_CLASSIFICATION	0.007182852322891091	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9870783155514142	WITHOUT_CLASSIFICATION	0.012921684448585742	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999893203703489	WITHOUT_CLASSIFICATION	1.0679629651050243E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9983937689824565	WITHOUT_CLASSIFICATION	0.0016062310175435112	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999633339464469	WITHOUT_CLASSIFICATION	3.666605355309943E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999560375282319	WITHOUT_CLASSIFICATION	4.396247176810141E-5	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999998837198655	WITHOUT_CLASSIFICATION	1.1628013451014344E-7	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998906874906421	WITHOUT_CLASSIFICATION	1.0931250935782786E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.999997638096947	WITHOUT_CLASSIFICATION	2.361903053102681E-6	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9601671812766063	WITHOUT_CLASSIFICATION	0.03983281872339376	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999998586122713	WITHOUT_CLASSIFICATION	1.413877286838312E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9990460368295814	WITHOUT_CLASSIFICATION	9.539631704186509E-4	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9693239638923103	WITHOUT_CLASSIFICATION	0.030676036107689604	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999987200822315	WITHOUT_CLASSIFICATION	1.2799177685712696E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999861140626994	WITHOUT_CLASSIFICATION	1.3885937300541933E-5	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996532194672	WITHOUT_CLASSIFICATION	3.4678053279305377E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9998996543426094	WITHOUT_CLASSIFICATION	1.0034565739064787E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9993577016249868	WITHOUT_CLASSIFICATION	6.422983750131754E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999497279651	WITHOUT_CLASSIFICATION	5.027203500448534E-8	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9996093361769599	WITHOUT_CLASSIFICATION	3.906638230401425E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999992047390479	WITHOUT_CLASSIFICATION	7.952609521293267E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9984719271226071	WITHOUT_CLASSIFICATION	0.0015280728773929791	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9995742075741381	WITHOUT_CLASSIFICATION	4.2579242586203913E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.998894824061862	WITHOUT_CLASSIFICATION	0.00110517593813791	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995347276939	WITHOUT_CLASSIFICATION	4.6527230609577135E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999598039921653	WITHOUT_CLASSIFICATION	4.019600783463798E-5	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9995797131496061	WITHOUT_CLASSIFICATION	4.2028685039382325E-4	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9994431621644704	WITHOUT_CLASSIFICATION	5.56837835529567E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9995446017525031	WITHOUT_CLASSIFICATION	4.553982474968107E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9840260340883132	WITHOUT_CLASSIFICATION	0.015973965911686788	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999994213313478	WITHOUT_CLASSIFICATION	5.786686521634061E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9173187081714599	WITHOUT_CLASSIFICATION	0.08268129182854014	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999560209827898	WITHOUT_CLASSIFICATION	4.397901721017282E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999560209827898	WITHOUT_CLASSIFICATION	4.397901721017282E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999965800492144	WITHOUT_CLASSIFICATION	3.419950785534959E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.99997913827714	WITHOUT_CLASSIFICATION	2.086172285989677E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9854549656045932	WITHOUT_CLASSIFICATION	0.014545034395406872	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999648629501	WITHOUT_CLASSIFICATION	3.5137049916038695E-8	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999998255783163	WITHOUT_CLASSIFICATION	1.7442168366752598E-7	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999975896524623	WITHOUT_CLASSIFICATION	2.4103475376973254E-6	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999598644432718	WITHOUT_CLASSIFICATION	4.01355567282182E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9995296763612637	WITHOUT_CLASSIFICATION	4.703236387363167E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999926795190097	WITHOUT_CLASSIFICATION	7.320480990270158E-6	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9751090627974632	WITHOUT_CLASSIFICATION	0.024890937202536805	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.999999739753937	WITHOUT_CLASSIFICATION	2.6024606311035863E-7	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999931449497836	WITHOUT_CLASSIFICATION	6.855050216335222E-6	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.8021344382616282	WITHOUT_CLASSIFICATION	0.19786556173837175	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999971201846899	WITHOUT_CLASSIFICATION	2.879815310004501E-6	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999640609707988	WITHOUT_CLASSIFICATION	3.5939029201209406E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999998298027	WITHOUT_CLASSIFICATION	1.7019740302441286E-10	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999998499076602	WITHOUT_CLASSIFICATION	1.5009233977149312E-7	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999750012575	WITHOUT_CLASSIFICATION	2.499874251080288E-8	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999777026604506	WITHOUT_CLASSIFICATION	2.2297339549378232E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9758217642279087	WITHOUT_CLASSIFICATION	0.024178235772091314	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999990597527307	WITHOUT_CLASSIFICATION	9.402472693648727E-7	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999856655154602	WITHOUT_CLASSIFICATION	1.4334484539772328E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999968934419183	WITHOUT_CLASSIFICATION	3.106558081696199E-6	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999981953205	WITHOUT_CLASSIFICATION	1.8046795010593258E-9	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9840260340883132	WITHOUT_CLASSIFICATION	0.015973965911686788	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999697504306891	WITHOUT_CLASSIFICATION	3.024956931087888E-5	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9983059372832969	WITHOUT_CLASSIFICATION	0.0016940627167031715	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999860080258	WITHOUT_CLASSIFICATION	1.3991974199191671E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999985151100097	WITHOUT_CLASSIFICATION	1.4848899902883696E-5	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999603526632543	WITHOUT_CLASSIFICATION	3.964733674564463E-5	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999992305426608	WITHOUT_CLASSIFICATION	7.694573391588583E-7	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999999037849603	WITHOUT_CLASSIFICATION	9.621503959949744E-8	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999964635922783	WITHOUT_CLASSIFICATION	3.5364077215476285E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999864701616423	WITHOUT_CLASSIFICATION	1.3529838357735063E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997819148127332	WITHOUT_CLASSIFICATION	2.1808518726684143E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999979288698717	WITHOUT_CLASSIFICATION	2.071130128347634E-6	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999637732742	WITHOUT_CLASSIFICATION	3.622672587488827E-8	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9982670907772888	WITHOUT_CLASSIFICATION	0.0017329092227111745	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9822628928716597	WITHOUT_CLASSIFICATION	0.017737107128340295	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999720376364597	WITHOUT_CLASSIFICATION	2.7962363540252265E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999720376364597	WITHOUT_CLASSIFICATION	2.7962363540252265E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999985758041569	WITHOUT_CLASSIFICATION	1.424195843116478E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998052416935743	WITHOUT_CLASSIFICATION	1.9475830642569648E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999975845324204	WITHOUT_CLASSIFICATION	2.415467579622885E-6	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999975845324204	WITHOUT_CLASSIFICATION	2.415467579622885E-6	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999822249911433	WITHOUT_CLASSIFICATION	1.777500885675508E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9989792113724891	WITHOUT_CLASSIFICATION	0.0010207886275109136	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8891500678129839	WITHOUT_CLASSIFICATION	0.1108499321870161	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9996070399706428	WITHOUT_CLASSIFICATION	3.9296002935718317E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992780508402	WITHOUT_CLASSIFICATION	7.219491597674548E-7	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999921140458	WITHOUT_CLASSIFICATION	7.885954198824457E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998878456225	WITHOUT_CLASSIFICATION	1.1215437738532921E-7	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998878456225	WITHOUT_CLASSIFICATION	1.1215437738532921E-7	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999349107438	WITHOUT_CLASSIFICATION	6.508925615047683E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999621706530036	WITHOUT_CLASSIFICATION	3.7829346996432123E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.99999817354662	WITHOUT_CLASSIFICATION	1.826453380004276E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999977422276864	WITHOUT_CLASSIFICATION	2.257772313500243E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999977422276864	WITHOUT_CLASSIFICATION	2.257772313500243E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998221649271	WITHOUT_CLASSIFICATION	1.7783507288251577E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999865968377738	WITHOUT_CLASSIFICATION	1.3403162226145732E-5	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9995446478212844	WITHOUT_CLASSIFICATION	4.553521787155989E-4	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.999999648615442	WITHOUT_CLASSIFICATION	3.5138455799522764E-7	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997458280366883	WITHOUT_CLASSIFICATION	2.541719633116156E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999890251584207	WITHOUT_CLASSIFICATION	1.0974841579341458E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999829226247069	WITHOUT_CLASSIFICATION	1.707737529305062E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999981551686767	WITHOUT_CLASSIFICATION	1.8448313231849182E-6	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999794701636806	WITHOUT_CLASSIFICATION	2.052983631937764E-5	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9997350965578372	WITHOUT_CLASSIFICATION	2.649034421627007E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999742323943439	WITHOUT_CLASSIFICATION	2.5767605656044992E-5	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9990265209814255	WITHOUT_CLASSIFICATION	9.734790185744761E-4	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9991575079148182	WITHOUT_CLASSIFICATION	8.424920851819624E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999900275527699	WITHOUT_CLASSIFICATION	9.972447230223873E-6	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999969483726499	WITHOUT_CLASSIFICATION	3.051627350148825E-6	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999876355753	WITHOUT_CLASSIFICATION	1.2364424661123817E-8	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9988760880328699	WITHOUT_CLASSIFICATION	0.0011239119671300575	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999952322555302	WITHOUT_CLASSIFICATION	4.7677444697238874E-6	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999992410679551	WITHOUT_CLASSIFICATION	7.589320449267666E-7	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999982761126155	WITHOUT_CLASSIFICATION	1.7238873844958028E-6	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999991850601264	WITHOUT_CLASSIFICATION	8.149398735667571E-7	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9949768013553327	WITHOUT_CLASSIFICATION	0.005023198644667248	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9969083699000837	WITHOUT_CLASSIFICATION	0.0030916300999162447	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999988466646554	WITHOUT_CLASSIFICATION	1.1533353445531728E-6	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9838331168573394	WITHOUT_CLASSIFICATION	0.01616688314266065	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999533760704408	WITHOUT_CLASSIFICATION	4.6623929559256734E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999990959951333	WITHOUT_CLASSIFICATION	9.040048666929493E-7	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999839363949284	WITHOUT_CLASSIFICATION	1.6063605071562077E-5	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999995558578334	WITHOUT_CLASSIFICATION	4.441421665909474E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999594159063349	WITHOUT_CLASSIFICATION	4.058409366518303E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999207689545917	WITHOUT_CLASSIFICATION	7.923104540829854E-4	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.999921721544858	WITHOUT_CLASSIFICATION	7.827845514190264E-5	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999953170854519	WITHOUT_CLASSIFICATION	4.682914548110132E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998583751920406	WITHOUT_CLASSIFICATION	1.4162480795938706E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999333253417595	WITHOUT_CLASSIFICATION	6.66746582404871E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996144349205758	WITHOUT_CLASSIFICATION	3.855650794241743E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.999249728852317	WITHOUT_CLASSIFICATION	7.502711476828969E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999988479409255	WITHOUT_CLASSIFICATION	1.1520590744599073E-6	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999990265980067	WITHOUT_CLASSIFICATION	9.734019933479724E-7	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999974719125222	WITHOUT_CLASSIFICATION	2.5280874778067056E-5	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999799279052314	WITHOUT_CLASSIFICATION	2.0072094768666666E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999733328422027	WITHOUT_CLASSIFICATION	2.6667157797417308E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999954597045259	WITHOUT_CLASSIFICATION	4.540295474139792E-6	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9998715956423925	WITHOUT_CLASSIFICATION	1.2840435760743226E-4	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999989070961863	WITHOUT_CLASSIFICATION	1.092903813679654E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999985657230432	WITHOUT_CLASSIFICATION	1.4342769567871742E-6	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999942169266214	WITHOUT_CLASSIFICATION	5.78307337855919E-6	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9998824859983994	WITHOUT_CLASSIFICATION	1.1751400160067782E-4	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999545204718251	WITHOUT_CLASSIFICATION	4.547952817481672E-5	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999185026844	WITHOUT_CLASSIFICATION	8.14973155838339E-8	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999751953236071	WITHOUT_CLASSIFICATION	2.4804676392900315E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999739368113161	WITHOUT_CLASSIFICATION	2.606318868395752E-5	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999994193345177	WITHOUT_CLASSIFICATION	5.806654821551252E-7	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999934185405	WITHOUT_CLASSIFICATION	6.581459509700488E-9	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999960370437002	WITHOUT_CLASSIFICATION	3.962956299829092E-6	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999980642516001	WITHOUT_CLASSIFICATION	1.9357483998974435E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998711967087929	WITHOUT_CLASSIFICATION	1.2880329120703964E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999858514717329	WITHOUT_CLASSIFICATION	1.4148528267159823E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999986911346367	WITHOUT_CLASSIFICATION	1.3088653633019995E-6	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999972675971017	WITHOUT_CLASSIFICATION	2.7324028983344963E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999050408854	WITHOUT_CLASSIFICATION	9.495911459024689E-8	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999050408854	WITHOUT_CLASSIFICATION	9.495911459024689E-8	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999531823776	WITHOUT_CLASSIFICATION	4.681762249950113E-8	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9997097822215008	WITHOUT_CLASSIFICATION	2.902177784992492E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999991622350693	WITHOUT_CLASSIFICATION	8.377649307336955E-7	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.994696629024287	WITHOUT_CLASSIFICATION	0.005303370975712993	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999936174286	WITHOUT_CLASSIFICATION	6.382571351570491E-9	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999658652245033	WITHOUT_CLASSIFICATION	3.4134775496688745E-5	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999998591153326	WITHOUT_CLASSIFICATION	1.4088466734836458E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999967459479	WITHOUT_CLASSIFICATION	3.254052094895123E-9	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.99999999552258	WITHOUT_CLASSIFICATION	4.4774200678463275E-9	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999714909351	WITHOUT_CLASSIFICATION	2.8509064921444813E-8	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999311874154958	WITHOUT_CLASSIFICATION	6.881258450421142E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.999870568628831	WITHOUT_CLASSIFICATION	1.2943137116901404E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999998586284	WITHOUT_CLASSIFICATION	1.4137150216186782E-10	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999894809988186	WITHOUT_CLASSIFICATION	1.0519001181473776E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999577115116108	WITHOUT_CLASSIFICATION	4.228848838914059E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999577115116108	WITHOUT_CLASSIFICATION	4.228848838914059E-5	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999986480096748	WITHOUT_CLASSIFICATION	1.3519903253518057E-6	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999650813470494	WITHOUT_CLASSIFICATION	3.4918652950526445E-5	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999998559848476	WITHOUT_CLASSIFICATION	1.4401515240071208E-7	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999986236086996	WITHOUT_CLASSIFICATION	1.3763913003215907E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999979691312808	WITHOUT_CLASSIFICATION	2.030868719234833E-6	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998330079276	WITHOUT_CLASSIFICATION	1.6699207240278599E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999890863923098	WITHOUT_CLASSIFICATION	1.091360769030052E-5	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.8404134594030318	WITHOUT_CLASSIFICATION	0.15958654059696814	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999990869976692	WITHOUT_CLASSIFICATION	9.130023308878849E-7	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999912206267347	WITHOUT_CLASSIFICATION	8.779373265291551E-6	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999995447808994	WITHOUT_CLASSIFICATION	4.552191006795225E-7	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999464190303	WITHOUT_CLASSIFICATION	5.358096970906991E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999974790325	WITHOUT_CLASSIFICATION	2.520967603224181E-9	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999967340758498	WITHOUT_CLASSIFICATION	3.265924150187655E-5	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.8568548089056489	WITHOUT_CLASSIFICATION	0.14314519109435114	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9987836208239723	WITHOUT_CLASSIFICATION	0.0012163791760277014	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.8077197603226669	WITHOUT_CLASSIFICATION	0.19228023967733307	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999446964176142	WITHOUT_CLASSIFICATION	5.530358238571188E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9998340262965676	WITHOUT_CLASSIFICATION	1.6597370343233222E-4	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999141867073	WITHOUT_CLASSIFICATION	8.581329270624465E-8	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999981336449911	WITHOUT_CLASSIFICATION	1.8663550088522497E-6	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.99999997005085	WITHOUT_CLASSIFICATION	2.994915000026647E-8	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999652079514456	WITHOUT_CLASSIFICATION	3.479204855446526E-5	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999240678007707	WITHOUT_CLASSIFICATION	7.593219922938922E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9954909715205627	WITHOUT_CLASSIFICATION	0.00450902847943733	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.999455337149251	WITHOUT_CLASSIFICATION	5.446628507489907E-4	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999999672253	WITHOUT_CLASSIFICATION	3.277466016906973E-11	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.983219196100269	WITHOUT_CLASSIFICATION	0.016780803899730985	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999993891004568	WITHOUT_CLASSIFICATION	6.108995432016715E-6	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999970145813008	WITHOUT_CLASSIFICATION	2.9854186991991196E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9956551417718411	WITHOUT_CLASSIFICATION	0.00434485822815884	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999654244052	WITHOUT_CLASSIFICATION	3.457559483592762E-8	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999980785565717	WITHOUT_CLASSIFICATION	1.9214434283380258E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996409822677	WITHOUT_CLASSIFICATION	3.5901773225397047E-7	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9537904950370735	WITHOUT_CLASSIFICATION	0.04620950496292648	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999948940770481	WITHOUT_CLASSIFICATION	5.105922951862858E-6	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997251825263	WITHOUT_CLASSIFICATION	2.748174736152266E-7	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999997608497423	WITHOUT_CLASSIFICATION	2.391502577316045E-7	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.999999920724172	WITHOUT_CLASSIFICATION	7.927582796638453E-8	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.978294858036304	WITHOUT_CLASSIFICATION	0.021705141963696058	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998982005684915	WITHOUT_CLASSIFICATION	1.0179943150850066E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998982005684915	WITHOUT_CLASSIFICATION	1.0179943150850066E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999266833932	WITHOUT_CLASSIFICATION	7.331660679444416E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998633981823357	WITHOUT_CLASSIFICATION	1.3660181766430562E-4	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9443262215541379	WITHOUT_CLASSIFICATION	0.055673778445862195	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998821010095625	WITHOUT_CLASSIFICATION	1.1789899043756516E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999567053137752	WITHOUT_CLASSIFICATION	4.329468622489833E-5	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999651149810221	WITHOUT_CLASSIFICATION	3.4885018977862036E-5	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997912268575104	WITHOUT_CLASSIFICATION	2.0877314248953811E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999911220749192	WITHOUT_CLASSIFICATION	8.877925080628817E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9982008993511592	DESIGN	0.0017991006488407633	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997708765817	WITHOUT_CLASSIFICATION	2.2912341826569763E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989231472026	WITHOUT_CLASSIFICATION	1.0768527974275263E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9983251267148627	WITHOUT_CLASSIFICATION	0.0016748732851372301	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999924835692687	WITHOUT_CLASSIFICATION	7.516430731364314E-6	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999961002187	WITHOUT_CLASSIFICATION	3.899781223493275E-9	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999106462662674	WITHOUT_CLASSIFICATION	8.935373373262874E-5	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.994001547916426	WITHOUT_CLASSIFICATION	0.005998452083573932	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999226952864516	WITHOUT_CLASSIFICATION	7.730471354848578E-5	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999935586068	WITHOUT_CLASSIFICATION	6.4413931014245895E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999642557880781	WITHOUT_CLASSIFICATION	3.574421192196348E-5	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999991654770971	WITHOUT_CLASSIFICATION	8.345229029874447E-7	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9886453739724281	WITHOUT_CLASSIFICATION	0.01135462602757187	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999990319765112	WITHOUT_CLASSIFICATION	9.680234888748253E-7	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999835192728125	WITHOUT_CLASSIFICATION	1.6480727187574606E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9969062515069604	WITHOUT_CLASSIFICATION	0.0030937484930395626	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999419700737372	WITHOUT_CLASSIFICATION	5.8029926262956434E-5	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999883596158421	WITHOUT_CLASSIFICATION	1.1640384157842483E-5	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999750822892515	WITHOUT_CLASSIFICATION	2.491771074863927E-5	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999999997938951	WITHOUT_CLASSIFICATION	2.0610489202789375E-9	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9733587791609954	WITHOUT_CLASSIFICATION	0.026641220839004505	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9947977293459619	WITHOUT_CLASSIFICATION	0.005202270654038094	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999667953531263	WITHOUT_CLASSIFICATION	3.3204646873712476E-5	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999653004807698	WITHOUT_CLASSIFICATION	3.4699519230146076E-5	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999866109995738	WITHOUT_CLASSIFICATION	1.3389000426211533E-5	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999765714290315	WITHOUT_CLASSIFICATION	2.3428570968514324E-5	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999879193488532	WITHOUT_CLASSIFICATION	1.2080651146916915E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999613694824717	WITHOUT_CLASSIFICATION	3.8630517528317484E-5	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999989874677607	WITHOUT_CLASSIFICATION	1.0125322392756512E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999949117424	WITHOUT_CLASSIFICATION	5.088257623750672E-9	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9826885171517362	WITHOUT_CLASSIFICATION	0.017311482848263803	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999482556468822	WITHOUT_CLASSIFICATION	5.17443531178066E-5	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998126867744	WITHOUT_CLASSIFICATION	1.873132256235755E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999840553125681	WITHOUT_CLASSIFICATION	1.5944687431959313E-5	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999923358102	WITHOUT_CLASSIFICATION	7.6641898101411E-9	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.999999014475138	WITHOUT_CLASSIFICATION	9.855248620626126E-7	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9993455742035223	WITHOUT_CLASSIFICATION	6.544257964776852E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9976483651234475	WITHOUT_CLASSIFICATION	0.0023516348765525233	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999988808157264	WITHOUT_CLASSIFICATION	1.1191842735856763E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999998586284	WITHOUT_CLASSIFICATION	1.4137150216186782E-10	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999975977558	WITHOUT_CLASSIFICATION	2.402244166138746E-9	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999031935057	WITHOUT_CLASSIFICATION	9.680649430035455E-8	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.997868413500691	WITHOUT_CLASSIFICATION	0.0021315864993090225	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.5194579404549438	WITHOUT_CLASSIFICATION	0.4805420595450563	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.999999855460483	WITHOUT_CLASSIFICATION	1.445395171450676E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999978223804402	WITHOUT_CLASSIFICATION	2.177619559797586E-6	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999994484405657	WITHOUT_CLASSIFICATION	5.515594343083951E-6	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999919818313	WITHOUT_CLASSIFICATION	8.018168730144877E-9	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999752396751	WITHOUT_CLASSIFICATION	2.476032483705647E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999985761262704	WITHOUT_CLASSIFICATION	1.423873729682435E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999979861666073	WITHOUT_CLASSIFICATION	2.013833392691885E-5	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999679689903326	WITHOUT_CLASSIFICATION	3.203100966742744E-5	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.999995394406484	WITHOUT_CLASSIFICATION	4.605593516019204E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999983361307	WITHOUT_CLASSIFICATION	1.6638692999479622E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992515330436	WITHOUT_CLASSIFICATION	7.48466956505862E-7	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999985852497796	WITHOUT_CLASSIFICATION	1.4147502204552174E-6	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999992875036813	WITHOUT_CLASSIFICATION	7.124963186787141E-7	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999946690946911	WITHOUT_CLASSIFICATION	5.330905308863318E-6	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9996133436321478	WITHOUT_CLASSIFICATION	3.8665636785214385E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992515330436	WITHOUT_CLASSIFICATION	7.48466956505862E-7	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999942911891573	WITHOUT_CLASSIFICATION	5.708810842688386E-5	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999989090587111	WITHOUT_CLASSIFICATION	1.0909412888880961E-6	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9991776353259125	WITHOUT_CLASSIFICATION	8.223646740875039E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999011385184	WITHOUT_CLASSIFICATION	9.88614815124324E-8	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999682970600104	WITHOUT_CLASSIFICATION	3.1702939989447664E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9995427219484563	WITHOUT_CLASSIFICATION	4.5727805154374007E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9998224709373006	WITHOUT_CLASSIFICATION	1.7752906269930785E-4	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.7088989478677599	DESIGN	0.29110105213224013	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999959421386	WITHOUT_CLASSIFICATION	4.057861422388104E-9	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999138164883	WITHOUT_CLASSIFICATION	8.618351167332692E-8	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996178106752743	WITHOUT_CLASSIFICATION	3.821893247256186E-4	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9943153161329742	WITHOUT_CLASSIFICATION	0.005684683867025885	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999963128407763	WITHOUT_CLASSIFICATION	3.6871592236470155E-6	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999988161949669	WITHOUT_CLASSIFICATION	1.1838050331088411E-6	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999812384465168	WITHOUT_CLASSIFICATION	1.8761553483208347E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999981953205	WITHOUT_CLASSIFICATION	1.8046795010593258E-9	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999925116517	WITHOUT_CLASSIFICATION	7.488348356146003E-9	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999741688976	WITHOUT_CLASSIFICATION	2.5831102395461883E-8	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9998486994462082	WITHOUT_CLASSIFICATION	1.51300553791688E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998567141221831	WITHOUT_CLASSIFICATION	1.4328587781697768E-4	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999954044195201	WITHOUT_CLASSIFICATION	4.59558047989013E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999672875483	WITHOUT_CLASSIFICATION	3.271245175416617E-8	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999996629675287	WITHOUT_CLASSIFICATION	3.3703247120064285E-7	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999996032639928	WITHOUT_CLASSIFICATION	3.9673600714612447E-7	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999922654579	WITHOUT_CLASSIFICATION	7.73454210081302E-9	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999965219722	WITHOUT_CLASSIFICATION	3.478027797479639E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9996271157306087	WITHOUT_CLASSIFICATION	3.7288426939131056E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999315043462839	WITHOUT_CLASSIFICATION	6.849565371615146E-5	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.6038426816103422	WITHOUT_CLASSIFICATION	0.39615731838965784	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9595600763592537	WITHOUT_CLASSIFICATION	0.04043992364074624	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999925555563274	WITHOUT_CLASSIFICATION	7.444443672694676E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9183671027323949	WITHOUT_CLASSIFICATION	0.08163289726760513	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999279962202253	WITHOUT_CLASSIFICATION	7.200377977463128E-5	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999897034078088	WITHOUT_CLASSIFICATION	1.029659219117284E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999892050574	WITHOUT_CLASSIFICATION	1.0794942466539907E-8	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999919320808	WITHOUT_CLASSIFICATION	8.067919228775467E-9	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999720847697179	WITHOUT_CLASSIFICATION	2.7915230282236144E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9792195864078613	WITHOUT_CLASSIFICATION	0.020780413592138742	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999986447848863	WITHOUT_CLASSIFICATION	1.355215113739311E-6	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999993523098659	WITHOUT_CLASSIFICATION	6.476901341495053E-7	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999902713244484	WITHOUT_CLASSIFICATION	9.728675551567225E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999902713244484	WITHOUT_CLASSIFICATION	9.728675551567225E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999788559390422	WITHOUT_CLASSIFICATION	2.1144060957732378E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998554087761	WITHOUT_CLASSIFICATION	1.4459122375315466E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999998548549573	WITHOUT_CLASSIFICATION	1.4514504269320974E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8942818020620933	DESIGN	0.10571819793790672	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999993489663114	WITHOUT_CLASSIFICATION	6.510336887307918E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999993489663114	WITHOUT_CLASSIFICATION	6.510336887307918E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.999998553972888	WITHOUT_CLASSIFICATION	1.4460271120691553E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999942315466209	WITHOUT_CLASSIFICATION	5.768453379016066E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9944807926181358	WITHOUT_CLASSIFICATION	0.005519207381864107	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999924835245741	WITHOUT_CLASSIFICATION	7.516475425860242E-6	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9994716535810493	WITHOUT_CLASSIFICATION	5.283464189507408E-4	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999993515905731	WITHOUT_CLASSIFICATION	6.484094269688653E-7	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999993871584418	WITHOUT_CLASSIFICATION	6.128415582016236E-7	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999996098372061	WITHOUT_CLASSIFICATION	3.9016279392075193E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999996488836015	WITHOUT_CLASSIFICATION	3.5111639857808886E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999588108772	WITHOUT_CLASSIFICATION	4.118912270346527E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999588108772	WITHOUT_CLASSIFICATION	4.118912270346527E-8	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999697723019882	WITHOUT_CLASSIFICATION	3.022769801178641E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999966910974194	WITHOUT_CLASSIFICATION	3.3089025806916933E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999895371945362	WITHOUT_CLASSIFICATION	1.0462805463840476E-5	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9959841695495003	WITHOUT_CLASSIFICATION	0.004015830450499724	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9901469573091742	WITHOUT_CLASSIFICATION	0.009853042690825787	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994327303850654	WITHOUT_CLASSIFICATION	5.672696149344907E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996293079329	WITHOUT_CLASSIFICATION	3.7069206709424104E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999993752384204	WITHOUT_CLASSIFICATION	6.247615795964545E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9997248417950781	WITHOUT_CLASSIFICATION	2.7515820492193295E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.601257287301004	WITHOUT_CLASSIFICATION	0.3987427126989959	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9417694930740067	WITHOUT_CLASSIFICATION	0.058230506925993374	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999138164883	WITHOUT_CLASSIFICATION	8.618351167332692E-8	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999401922806116	WITHOUT_CLASSIFICATION	5.980771938839314E-4	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998325786353878	WITHOUT_CLASSIFICATION	1.6742136461229948E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999988004670041	WITHOUT_CLASSIFICATION	1.1995329959012559E-5	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999945119499944	WITHOUT_CLASSIFICATION	5.488050005502602E-6	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999949795593	WITHOUT_CLASSIFICATION	5.020440633666384E-9	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999574167507939	WITHOUT_CLASSIFICATION	4.258324920605273E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9842937391325254	WITHOUT_CLASSIFICATION	0.01570626086747467	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999724260252505	WITHOUT_CLASSIFICATION	2.7573974749479627E-5	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999978179008566	WITHOUT_CLASSIFICATION	2.1820991433660904E-6	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.998326119874791	WITHOUT_CLASSIFICATION	0.0016738801252089905	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.998326119874791	WITHOUT_CLASSIFICATION	0.0016738801252089905	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999536858774276	WITHOUT_CLASSIFICATION	4.63141225724218E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999998718644	WITHOUT_CLASSIFICATION	1.2813563270757916E-10	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.998432734027267	WITHOUT_CLASSIFICATION	0.0015672659727331312	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9995117089240585	WITHOUT_CLASSIFICATION	4.882910759415794E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999995160714262	WITHOUT_CLASSIFICATION	4.839285738151527E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999961603920716	WITHOUT_CLASSIFICATION	3.839607928370161E-6	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999997900627151	WITHOUT_CLASSIFICATION	2.099372849487953E-7	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9943481649331343	WITHOUT_CLASSIFICATION	0.005651835066865797	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998641816058617	WITHOUT_CLASSIFICATION	1.3581839413836968E-4	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999886617542582	WITHOUT_CLASSIFICATION	1.1338245741955402E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993689524718579	WITHOUT_CLASSIFICATION	6.310475281421889E-4	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999848612923455	DESIGN	1.5138707654610401E-5	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9858471575953524	DESIGN	0.01415284240464756	WITHOUT_CLASSIFICATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999992113562	WITHOUT_CLASSIFICATION	7.886437449495953E-10	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9815635806866594	DESIGN	0.018436419313340613	WITHOUT_CLASSIFICATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998377019889324	WITHOUT_CLASSIFICATION	1.6229801106754988E-4	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9433530081366789	DESIGN	0.05664699186332124	WITHOUT_CLASSIFICATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999968559913888	WITHOUT_CLASSIFICATION	3.1440086112382957E-6	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999420685411888	WITHOUT_CLASSIFICATION	5.79314588111608E-5	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9967469826442105	WITHOUT_CLASSIFICATION	0.0032530173557895436	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999923705529	WITHOUT_CLASSIFICATION	7.629447055202037E-9	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999609386969087	WITHOUT_CLASSIFICATION	3.90613030913661E-5	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9995446478212844	WITHOUT_CLASSIFICATION	4.553521787155989E-4	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999897055	WITHOUT_CLASSIFICATION	1.029446268742683E-11	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985466636697	WITHOUT_CLASSIFICATION	1.453336330288931E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999985466636697	WITHOUT_CLASSIFICATION	1.453336330288931E-6	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.999261583395876	WITHOUT_CLASSIFICATION	7.384166041240613E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9608824951939774	WITHOUT_CLASSIFICATION	0.039117504806022725	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999901862978632	WITHOUT_CLASSIFICATION	9.813702136843205E-6	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9977282231188934	WITHOUT_CLASSIFICATION	0.002271776881106556	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999835696903351	WITHOUT_CLASSIFICATION	1.643030966488417E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9659818596841193	WITHOUT_CLASSIFICATION	0.03401814031588074	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.505775900478245	DESIGN	0.4942240995217549	WITHOUT_CLASSIFICATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9994831299957364	WITHOUT_CLASSIFICATION	5.168700042635038E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6420822383955521	DESIGN	0.3579177616044479	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6420822383955521	DESIGN	0.3579177616044479	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.999462955318018	WITHOUT_CLASSIFICATION	5.370446819819908E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999969567755821	WITHOUT_CLASSIFICATION	3.043224418044833E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9983045052213839	WITHOUT_CLASSIFICATION	0.0016954947786160018	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9996891150180512	DESIGN	3.10884981948828E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9996891150180512	DESIGN	3.10884981948828E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999998181057516	DESIGN	1.8189424844364177E-7	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999998181057516	DESIGN	1.8189424844364177E-7	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.939881894273443	DESIGN	0.060118105726556896	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9998422934699494	DESIGN	1.5770653005051796E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9998422934699494	DESIGN	1.5770653005051796E-4	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999984233816114	DESIGN	1.5766183886543326E-6	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999969567755821	WITHOUT_CLASSIFICATION	3.043224418044833E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9987335034690676	WITHOUT_CLASSIFICATION	0.0012664965309323868	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.986388604228201	WITHOUT_CLASSIFICATION	0.01361139577179907	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9998743450516538	WITHOUT_CLASSIFICATION	1.2565494834620032E-4	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9862655334881144	WITHOUT_CLASSIFICATION	0.013734466511885618	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.6072341480531002	WITHOUT_CLASSIFICATION	0.39276585194689995	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9687416576478698	WITHOUT_CLASSIFICATION	0.03125834235213026	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999938641504877	WITHOUT_CLASSIFICATION	6.135849512237111E-6	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.5036263725953147	WITHOUT_CLASSIFICATION	0.49637362740468527	DESIGN
// todo : what else to do here?	DESIGN	0.9659818596841193	WITHOUT_CLASSIFICATION	0.03401814031588074	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9755186786418304	WITHOUT_CLASSIFICATION	0.024481321358169605	DESIGN
// todo : what else to do here?	DESIGN	0.9659818596841193	WITHOUT_CLASSIFICATION	0.03401814031588074	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.983430958730952	WITHOUT_CLASSIFICATION	0.01656904126904806	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9773043847134983	WITHOUT_CLASSIFICATION	0.022695615286501717	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9987484972900539	DESIGN	0.0012515027099461041	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.505775900478245	DESIGN	0.4942240995217549	WITHOUT_CLASSIFICATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9250770565412187	DESIGN	0.07492294345878124	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9998888596719334	WITHOUT_CLASSIFICATION	1.1114032806654935E-4	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9762063705799853	WITHOUT_CLASSIFICATION	0.02379362942001479	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.7571903439491309	DESIGN	0.2428096560508692	WITHOUT_CLASSIFICATION
// todo : what is the implication of this?	DESIGN	0.9967783532521396	WITHOUT_CLASSIFICATION	0.003221646747860466	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9059744866035707	WITHOUT_CLASSIFICATION	0.09402551339642934	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.7043932593394712	DESIGN	0.29560674066052894	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.6657139291913073	DESIGN	0.3342860708086926	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9987883910294071	WITHOUT_CLASSIFICATION	0.001211608970592886	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7463064835251705	DESIGN	0.2536935164748295	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.8466617553815329	WITHOUT_CLASSIFICATION	0.15333824461846715	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9959869920252806	DESIGN	0.004013007974719379	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.5980787301634081	DESIGN	0.4019212698365921	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9999331717713069	DESIGN	6.682822869309923E-5	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6879268639859549	DESIGN	0.3120731360140451	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999995234865428	DESIGN	4.765134572135055E-7	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7235158924380338	DESIGN	0.2764841075619662	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7235158924380338	DESIGN	0.2764841075619662	WITHOUT_CLASSIFICATION
//Icky workaround for MySQL bug:	DESIGN	0.8700645072653009	DESIGN	0.12993549273469898	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9745259143507754	WITHOUT_CLASSIFICATION	0.025474085649224525	DESIGN
//TODO possibly relax that	DESIGN	0.9586009759932218	WITHOUT_CLASSIFICATION	0.04139902400677822	DESIGN
//TODO possibly relax that	DESIGN	0.9586009759932218	WITHOUT_CLASSIFICATION	0.04139902400677822	DESIGN
//TODO possibly relax that	DESIGN	0.9586009759932218	WITHOUT_CLASSIFICATION	0.04139902400677822	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6879268639859549	DESIGN	0.3120731360140451	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9998267907508595	WITHOUT_CLASSIFICATION	1.732092491406209E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9997660351490308	WITHOUT_CLASSIFICATION	2.3396485096911432E-4	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.8799504963682984	WITHOUT_CLASSIFICATION	0.12004950363170154	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9928536340236033	WITHOUT_CLASSIFICATION	0.007146365976396803	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8783076598269451	DESIGN	0.1216923401730548	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9911911933929554	WITHOUT_CLASSIFICATION	0.00880880660704475	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6420822383955521	DESIGN	0.3579177616044479	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6420822383955521	DESIGN	0.3579177616044479	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9912472542747286	WITHOUT_CLASSIFICATION	0.00875274572527136	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6420822383955521	DESIGN	0.3579177616044479	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999999455257904	DESIGN	5.447420963051797E-8	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9997641096569008	WITHOUT_CLASSIFICATION	2.3589034309915455E-4	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.566356423905841	DESIGN	0.43364357609415916	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9996316171995696	WITHOUT_CLASSIFICATION	3.683828004304017E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9891682562251802	WITHOUT_CLASSIFICATION	0.010831743774819817	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9479473883554944	WITHOUT_CLASSIFICATION	0.0520526116445056	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9333045470705287	WITHOUT_CLASSIFICATION	0.06669545292947117	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999985716491934	WITHOUT_CLASSIFICATION	1.4283508066797404E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.999714526673839	WITHOUT_CLASSIFICATION	2.8547332616100484E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.7136718417367626	WITHOUT_CLASSIFICATION	0.2863281582632373	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9991707482534438	WITHOUT_CLASSIFICATION	8.292517465563057E-4	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9998255851908485	WITHOUT_CLASSIFICATION	1.7441480915159004E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9990835517397051	WITHOUT_CLASSIFICATION	9.164482602950139E-4	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9952307060563278	WITHOUT_CLASSIFICATION	0.004769293943672244	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.998783691893847	WITHOUT_CLASSIFICATION	0.001216308106153072	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9907499133192048	DESIGN	0.009250086680795255	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999478384060589	WITHOUT_CLASSIFICATION	5.2161593941079516E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.834247850853174	WITHOUT_CLASSIFICATION	0.16575214914682607	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9402500799085332	DESIGN	0.05974992009146676	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.8964438471905272	DESIGN	0.1035561528094729	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9071257546300532	DESIGN	0.09287424536994687	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9968744524001569	WITHOUT_CLASSIFICATION	0.0031255475998431927	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9982825164909201	WITHOUT_CLASSIFICATION	0.0017174835090798992	DESIGN
//I suppose?	DESIGN	0.96521509444043	WITHOUT_CLASSIFICATION	0.03478490555957003	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.6462678596001216	DESIGN	0.3537321403998783	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.7065111959476208	WITHOUT_CLASSIFICATION	0.2934888040523792	DESIGN
//TODO:refactor + make this method private	DESIGN	0.703945044442147	DESIGN	0.296054955557853	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9975120295492218	WITHOUT_CLASSIFICATION	0.0024879704507782736	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9995151653686452	DESIGN	4.848346313549235E-4	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.8534459820810865	DESIGN	0.14655401791891354	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.999991309299073	WITHOUT_CLASSIFICATION	8.690700927044458E-6	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9667386721630723	WITHOUT_CLASSIFICATION	0.033261327836927826	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9667386721630723	WITHOUT_CLASSIFICATION	0.033261327836927826	DESIGN
//TODO: temporary	DESIGN	0.9810800429912944	DESIGN	0.01891995700870569	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5659737120344654	WITHOUT_CLASSIFICATION	0.43402628796553466	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.5659737120344654	WITHOUT_CLASSIFICATION	0.43402628796553466	DESIGN
//TODO: ugly here:	DESIGN	0.9018775927050039	DESIGN	0.09812240729499616	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9901201664082537	WITHOUT_CLASSIFICATION	0.009879833591746368	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.5750835847374471	DESIGN	0.4249164152625529	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.7716567762652485	WITHOUT_CLASSIFICATION	0.22834322373475152	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9980296388661053	WITHOUT_CLASSIFICATION	0.0019703611338947424	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9203993907028474	DESIGN	0.0796006092971526	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9511366533856878	WITHOUT_CLASSIFICATION	0.04886334661431225	DESIGN
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9978862856620296	DESIGN	0.002113714337970233	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9991368157740858	DESIGN	8.631842259143554E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.914322956275056	DESIGN	0.08567704372494397	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.5810397124012225	DESIGN	0.4189602875987775	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.9141203070825619	DESIGN	0.0858796929174381	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.6958716961139096	DESIGN	0.3041283038860903	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9998916967749822	DESIGN	1.083032250176993E-4	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9994853725400599	DESIGN	5.146274599401096E-4	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.6545367397164374	WITHOUT_CLASSIFICATION	0.3454632602835626	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9997246126764424	WITHOUT_CLASSIFICATION	2.7538732355755806E-4	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.6564028607126057	WITHOUT_CLASSIFICATION	0.3435971392873944	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9941977118372599	DESIGN	0.005802288162740027	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9807703173697263	WITHOUT_CLASSIFICATION	0.01922968263027376	DESIGN
//TODO: is this 100% correct?	DESIGN	0.8774138894592255	DESIGN	0.12258611054077456	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9972980806951586	WITHOUT_CLASSIFICATION	0.002701919304841528	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9727077053710739	DESIGN	0.02729229462892614	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.6636814983224906	DESIGN	0.3363185016775095	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999999282539372	DESIGN	7.174606276634095E-8	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.8887844388971838	DESIGN	0.11121556110281619	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.5439573225580112	WITHOUT_CLASSIFICATION	0.4560426774419887	DESIGN
//TODO: merge into one method!	DESIGN	0.8009527871118503	DESIGN	0.19904721288814986	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9616067217782188	DESIGN	0.03839327822178121	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.999647723880928	DESIGN	3.522761190720136E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9954534326210394	DESIGN	0.004546567378960649	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9576646502494556	WITHOUT_CLASSIFICATION	0.042335349750544475	DESIGN
// TODO : better way?!?	DESIGN	0.9999984658656859	DESIGN	1.5341343141779104E-6	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999998386186177	WITHOUT_CLASSIFICATION	1.613813821847611E-7	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9993678606854104	DESIGN	6.321393145896438E-4	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999362465605	DESIGN	6.375343944260453E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999996262715969	DESIGN	3.737284031776569E-7	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9426237998678751	WITHOUT_CLASSIFICATION	0.05737620013212482	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9979924766173852	DESIGN	0.002007523382614834	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999579777871811	WITHOUT_CLASSIFICATION	4.202221281880847E-5	DESIGN
//yuck!	DESIGN	0.9912472542747286	WITHOUT_CLASSIFICATION	0.00875274572527136	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9980518778876285	WITHOUT_CLASSIFICATION	0.001948122112371523	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9905844299936358	DESIGN	0.00941557000636408	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9995560570936164	WITHOUT_CLASSIFICATION	4.439429063836137E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999423638138	DESIGN	5.763618612397011E-8	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999971647919426	DESIGN	2.8352080574300537E-6	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999931116172636	DESIGN	6.888382736500939E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6420822383955521	DESIGN	0.3579177616044479	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9998635656013606	WITHOUT_CLASSIFICATION	1.3643439863932451E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9999870436128296	WITHOUT_CLASSIFICATION	1.2956387170378752E-5	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999950472825176	DESIGN	4.952717482370804E-6	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.6753902562283987	DESIGN	0.32460974377160134	WITHOUT_CLASSIFICATION
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9438661205626735	WITHOUT_CLASSIFICATION	0.05613387943732649	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9985425387284438	DESIGN	0.0014574612715562492	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.8953407858462218	WITHOUT_CLASSIFICATION	0.10465921415377816	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999054849985469	DESIGN	9.451500145314492E-5	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9999950932988861	DESIGN	4.906701113863864E-6	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999885052411979	DESIGN	1.1494758802143742E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9894495309597867	DESIGN	0.010550469040213315	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9998286403507259	WITHOUT_CLASSIFICATION	1.7135964927396169E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.8771846279804218	DESIGN	0.12281537201957816	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9998459118415659	DESIGN	1.5408815843407094E-4	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9843533017077629	WITHOUT_CLASSIFICATION	0.015646698292236985	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.5161371705291943	WITHOUT_CLASSIFICATION	0.48386282947080567	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9906966890058777	DESIGN	0.00930331099412238	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9997497773687889	WITHOUT_CLASSIFICATION	2.5022263121107075E-4	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9986572996322067	DESIGN	0.0013427003677933722	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999594205896929	DESIGN	4.057941030711571E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999998762114704	DESIGN	1.2378852959357735E-7	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5755190514500835	WITHOUT_CLASSIFICATION	0.42448094854991647	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9978596879260745	DESIGN	0.0021403120739255654	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9699603855555002	DESIGN	0.03003961444449968	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.982327478212192	DESIGN	0.017672521787808055	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9911915774018825	WITHOUT_CLASSIFICATION	0.008808422598117585	DESIGN
// short-circuit for performance...	DESIGN	0.9998878264260798	WITHOUT_CLASSIFICATION	1.1217357392021044E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9968060514290429	WITHOUT_CLASSIFICATION	0.0031939485709570107	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.7222501204447414	WITHOUT_CLASSIFICATION	0.27774987955525865	DESIGN
//work around a bug in all known connection pools....	DESIGN	0.6987718053651294	WITHOUT_CLASSIFICATION	0.3012281946348706	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999997314637	DESIGN	2.68536266710488E-10	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.8990951979335708	DESIGN	0.10090480206642916	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9966222295771376	DESIGN	0.0033777704228624707	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8942818020620933	DESIGN	0.10571819793790672	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9998065478518091	WITHOUT_CLASSIFICATION	1.9345214819076534E-4	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.6044307189376649	DESIGN	0.395569281062335	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.9692670635124533	WITHOUT_CLASSIFICATION	0.0307329364875467	DESIGN
//use of trim() here is ugly?	DESIGN	0.9980465063964313	WITHOUT_CLASSIFICATION	0.001953493603568658	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.8925453060477512	WITHOUT_CLASSIFICATION	0.10745469395224871	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9999887358742552	WITHOUT_CLASSIFICATION	1.1264125744755114E-5	DESIGN
//TODO: inefficient	DESIGN	0.6102427818340156	DESIGN	0.3897572181659844	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.9637215938092195	WITHOUT_CLASSIFICATION	0.03627840619078053	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999996361037129	DESIGN	3.6389628713838994E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9997682947023119	DESIGN	2.3170529768818228E-4	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9903704014103104	DESIGN	0.009629598589689533	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999991448468211	DESIGN	8.551531788012557E-7	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9992205095738691	WITHOUT_CLASSIFICATION	7.794904261310072E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.8074867696342282	DESIGN	0.1925132303657718	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9892215148469933	DESIGN	0.010778485153006716	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.514554422305441	WITHOUT_CLASSIFICATION	0.4854455776945589	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9994211215546993	DESIGN	5.788784453007619E-4	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9990694834237216	DESIGN	9.305165762783326E-4	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9292445336791707	DESIGN	0.07075546632082928	WITHOUT_CLASSIFICATION
// TODO should we just collect these like with the collections above?	DESIGN	0.9999790908032581	DESIGN	2.090919674197803E-5	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.6516977153646332	DESIGN	0.3483022846353669	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9859625066779716	WITHOUT_CLASSIFICATION	0.014037493322028404	DESIGN
//create an index on the key columns??	DESIGN	0.9997903238315482	WITHOUT_CLASSIFICATION	2.096761684517563E-4	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9935404665549861	DESIGN	0.006459533445013978	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9997903238315482	WITHOUT_CLASSIFICATION	2.096761684517563E-4	DESIGN
//TODO: improve this hack!	DESIGN	0.9998883829446574	DESIGN	1.1161705534248656E-4	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9998908011605131	WITHOUT_CLASSIFICATION	1.0919883948685306E-4	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9065941484331921	DESIGN	0.09340585156680796	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.998932456055212	WITHOUT_CLASSIFICATION	0.0010675439447880818	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.883189901750234	WITHOUT_CLASSIFICATION	0.11681009824976595	DESIGN
// create an index on the key columns??	DESIGN	0.9999907937868382	WITHOUT_CLASSIFICATION	9.206213161782657E-6	DESIGN
// todo : remove	DESIGN	0.9959053217380838	WITHOUT_CLASSIFICATION	0.004094678261916188	DESIGN
// todo : remove	DESIGN	0.9959053217380838	WITHOUT_CLASSIFICATION	0.004094678261916188	DESIGN
// todo : remove	DESIGN	0.9959053217380838	WITHOUT_CLASSIFICATION	0.004094678261916188	DESIGN
// todo : throw exception?	DESIGN	0.8557886505235414	WITHOUT_CLASSIFICATION	0.14421134947645864	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9956672674900106	DESIGN	0.004332732509989525	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9964117238291594	DESIGN	0.003588276170840545	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999798437563706	DESIGN	2.0156243629381326E-5	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9962227494444235	DESIGN	0.003777250555576615	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999990794259782	DESIGN	9.205740218229161E-7	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9820026426064251	WITHOUT_CLASSIFICATION	0.017997357393574803	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9800464289528429	WITHOUT_CLASSIFICATION	0.019953571047157097	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9935778661294538	DESIGN	0.006422133870546239	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9993259281976526	WITHOUT_CLASSIFICATION	6.740718023473848E-4	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9493453525044443	DESIGN	0.050654647495555774	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9648052101644511	DESIGN	0.035194789835548926	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.999997887449647	DESIGN	2.1125503530588172E-6	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.95561136204572	WITHOUT_CLASSIFICATION	0.04438863795428002	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9755537044068979	DESIGN	0.024446295593102026	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.637729116718346	WITHOUT_CLASSIFICATION	0.36227088328165397	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.8932599188847293	DESIGN	0.10674008111527071	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9472934843867189	DESIGN	0.05270651561328116	WITHOUT_CLASSIFICATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.997651120471637	DESIGN	0.002348879528362947	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.8916622904837648	DESIGN	0.10833770951623523	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9690432138538626	DESIGN	0.030956786146137328	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9252074774284321	WITHOUT_CLASSIFICATION	0.07479252257156785	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9876395049867558	DESIGN	0.012360495013244092	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9111887383726488	WITHOUT_CLASSIFICATION	0.08881126162735122	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9240105908990249	WITHOUT_CLASSIFICATION	0.075989409100975	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9960829256762059	DESIGN	0.003917074323794082	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9176139451587632	DESIGN	0.08238605484123691	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9604027182624297	DESIGN	0.0395972817375703	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999944235655052	DESIGN	5.576434494800687E-6	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9184385396646836	WITHOUT_CLASSIFICATION	0.08156146033531646	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9907607924673908	WITHOUT_CLASSIFICATION	0.009239207532609156	DESIGN
//is this ok?	DESIGN	0.9987792411463575	WITHOUT_CLASSIFICATION	0.0012207588536424915	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999980288111157	DESIGN	1.9711888842356808E-6	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.946572442440404	DESIGN	0.05342755755959614	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9638498829744064	WITHOUT_CLASSIFICATION	0.03615011702559345	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9987881718101341	DESIGN	0.0012118281898658657	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8942818020620933	DESIGN	0.10571819793790672	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9901462680119868	DESIGN	0.009853731988013125	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9998611141963308	DESIGN	1.3888580366921958E-4	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9989876618060497	DESIGN	0.0010123381939503258	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9990359218980366	WITHOUT_CLASSIFICATION	9.640781019634606E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9996584360874173	DESIGN	3.4156391258261746E-4	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9976874923350766	DESIGN	0.002312507664923414	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.5902279543282358	WITHOUT_CLASSIFICATION	0.4097720456717642	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9865246809871616	DESIGN	0.013475319012838376	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.6876871992980851	DESIGN	0.31231280070191497	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.997190091153295	DESIGN	0.002809908846704976	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9839955320003649	DESIGN	0.016004467999635057	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.8336485060980974	DESIGN	0.16635149390190251	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9255495929401933	DESIGN	0.07445040705980674	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.999417312091047	WITHOUT_CLASSIFICATION	5.826879089530685E-4	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9783480187933459	DESIGN	0.021651981206654087	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9373940846406758	DESIGN	0.06260591535932421	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.977642032441084	DESIGN	0.022357967558915903	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999998741602	DESIGN	1.2583975372715595E-10	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999755932992077	DESIGN	2.440670079236048E-5	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9973077893612269	WITHOUT_CLASSIFICATION	0.0026922106387731117	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999325396550535	DESIGN	6.746034494654393E-5	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.8826099184450793	WITHOUT_CLASSIFICATION	0.11739008155492073	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9972209947206901	DESIGN	0.0027790052793097795	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9993673357609016	WITHOUT_CLASSIFICATION	6.32664239098261E-4	DESIGN
// short cut check...	DESIGN	0.9999042443023722	WITHOUT_CLASSIFICATION	9.5755697627797E-5	DESIGN
// todo : move to StringHelper?	DESIGN	0.9706687767442349	WITHOUT_CLASSIFICATION	0.029331223255765093	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.910996811246767	DESIGN	0.089003188753233	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.997158769314878	DESIGN	0.0028412306851220122	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999668708646408	DESIGN	3.31291353593012E-5	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9619916615319479	DESIGN	0.03800833846805206	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.7022287181562714	DESIGN	0.29777128184372864	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9967498704230086	WITHOUT_CLASSIFICATION	0.003250129576991552	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9958316691653539	WITHOUT_CLASSIFICATION	0.004168330834646041	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.999993714832282	DESIGN	6.2851677179008366E-6	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9964753772509568	WITHOUT_CLASSIFICATION	0.003524622749043202	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9998555122106129	DESIGN	1.4448778938717192E-4	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9999750909772741	WITHOUT_CLASSIFICATION	2.4909022725848877E-5	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9888482533805665	DESIGN	0.011151746619433476	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999884214106248	WITHOUT_CLASSIFICATION	1.1578589375115745E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9832473523484748	WITHOUT_CLASSIFICATION	0.016752647651525253	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999873718434	DESIGN	1.2628156672182484E-8	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9997985707612765	DESIGN	2.0142923872341095E-4	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9460096682058419	WITHOUT_CLASSIFICATION	0.053990331794158054	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9884132705213503	WITHOUT_CLASSIFICATION	0.011586729478649752	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9998784630920718	WITHOUT_CLASSIFICATION	1.2153690792812008E-4	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9923646610034794	DESIGN	0.0076353389965205165	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.999995573683764	DESIGN	4.426316235942337E-6	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9987067371448092	DESIGN	0.0012932628551908078	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9959053217380838	WITHOUT_CLASSIFICATION	0.004094678261916188	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9969920658309768	DESIGN	0.0030079341690232653	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.988601300334379	DESIGN	0.01139869966562111	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9994401313403909	DESIGN	5.598686596091721E-4	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.818314489989673	WITHOUT_CLASSIFICATION	0.181685510010327	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999928089502839	DESIGN	7.191049716119621E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.7480676860444414	DESIGN	0.2519323139555586	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9299363379730433	DESIGN	0.07006366202695664	WITHOUT_CLASSIFICATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9977993898770646	DESIGN	0.0022006101229353763	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9471828513803332	DESIGN	0.05281714861966668	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.5656995286657632	WITHOUT_CLASSIFICATION	0.4343004713342368	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9917982327289713	DESIGN	0.008201767271028676	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9863819582064922	WITHOUT_CLASSIFICATION	0.013618041793507738	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9980641371862092	DESIGN	0.001935862813790683	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9995852733045331	WITHOUT_CLASSIFICATION	4.147266954669022E-4	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9997483981161543	DESIGN	2.516018838456439E-4	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.8765557353685938	WITHOUT_CLASSIFICATION	0.12344426463140629	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.999965798263528	DESIGN	3.420173647187116E-5	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9991296473963958	WITHOUT_CLASSIFICATION	8.703526036042817E-4	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9868765822313837	DESIGN	0.013123417768616303	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9856929058369386	DESIGN	0.014307094163061366	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9936025745505008	DESIGN	0.0063974254494991	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.999999999921377	DESIGN	7.86230850472757E-11	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999903866073	DESIGN	9.613392700392472E-9	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9924558040373815	DESIGN	0.007544195962618366	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9998624352086212	DESIGN	1.375647913787762E-4	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9997476653061468	DESIGN	2.5233469385322157E-4	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999953467835679	WITHOUT_CLASSIFICATION	4.653216432091928E-6	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999523775547	WITHOUT_CLASSIFICATION	4.762244538892528E-8	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999997868734372	DESIGN	2.1312656284273698E-7	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.663997831991953	DESIGN	0.33600216800804694	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9665999732678295	DESIGN	0.03340002673217037	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9991876104607308	DESIGN	8.123895392691406E-4	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.7329403926175686	DESIGN	0.26705960738243134	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9836635736683017	DESIGN	0.016336426331698333	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9176139451587632	DESIGN	0.08238605484123691	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.8820623146799726	DESIGN	0.11793768532002738	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9988815596839247	DESIGN	0.001118440316075277	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9184385396646836	WITHOUT_CLASSIFICATION	0.08156146033531646	DESIGN
//TODO: make this a bit nicer	DESIGN	0.946572442440404	DESIGN	0.05342755755959614	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7634951895162627	DESIGN	0.23650481048373734	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9996891150180512	DESIGN	3.10884981948828E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9996891150180512	DESIGN	3.10884981948828E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9996891150180512	DESIGN	3.10884981948828E-4	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999976145818884	DESIGN	2.3854181115521293E-6	WITHOUT_CLASSIFICATION
