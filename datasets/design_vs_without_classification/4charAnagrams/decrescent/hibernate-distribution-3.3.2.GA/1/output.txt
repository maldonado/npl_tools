//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999656167673	WITHOUT_CLASSIFICATION	3.4383232660702E-8	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999925984999014	WITHOUT_CLASSIFICATION	7.401500098531593E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999925984999014	WITHOUT_CLASSIFICATION	7.401500098531593E-6	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999801153977993	WITHOUT_CLASSIFICATION	1.9884602200671285E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999986350286307	WITHOUT_CLASSIFICATION	1.364971369262077E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.999996357897274	WITHOUT_CLASSIFICATION	3.6421027260266483E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998147525827	WITHOUT_CLASSIFICATION	1.8524741726059593E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998147525827	WITHOUT_CLASSIFICATION	1.8524741726059593E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999900070853471	WITHOUT_CLASSIFICATION	9.992914652800441E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984217752885	WITHOUT_CLASSIFICATION	1.5782247115037385E-6	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999970801595568	WITHOUT_CLASSIFICATION	2.9198404432273223E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999964116972001	WITHOUT_CLASSIFICATION	3.588302799948048E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999999798064587	WITHOUT_CLASSIFICATION	2.0193541287771065E-7	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999999798064587	WITHOUT_CLASSIFICATION	2.0193541287771065E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999813759927392	WITHOUT_CLASSIFICATION	1.8624007260828647E-5	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998813823259999	WITHOUT_CLASSIFICATION	1.1861767400014352E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.999971017630795	WITHOUT_CLASSIFICATION	2.8982369205085434E-5	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999986868658403	WITHOUT_CLASSIFICATION	1.3131341596989234E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999980705487	WITHOUT_CLASSIFICATION	1.929451277314684E-9	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999916076356529	WITHOUT_CLASSIFICATION	8.392364347082298E-6	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999864057490281	WITHOUT_CLASSIFICATION	1.3594250971964713E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999951226648647	WITHOUT_CLASSIFICATION	4.877335135338708E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950888005902	WITHOUT_CLASSIFICATION	4.911199409902468E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9967998224639499	WITHOUT_CLASSIFICATION	0.0032001775360501372	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999966978513939	WITHOUT_CLASSIFICATION	3.3021486062009726E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999963920886704	WITHOUT_CLASSIFICATION	3.6079113295078536E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999750589362	WITHOUT_CLASSIFICATION	2.494106380524994E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999961834750195	WITHOUT_CLASSIFICATION	3.816524980513842E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999961834750195	WITHOUT_CLASSIFICATION	3.816524980513842E-6	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999996071538656	WITHOUT_CLASSIFICATION	3.9284613437833757E-7	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999826199850725	WITHOUT_CLASSIFICATION	1.7380014927461634E-5	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997165731504651	WITHOUT_CLASSIFICATION	2.834268495348174E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998019110663393	WITHOUT_CLASSIFICATION	1.980889336606083E-4	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9710755406437276	WITHOUT_CLASSIFICATION	0.028924459356272407	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9550430374438167	DESIGN	0.04495696255618327	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9550430374438167	DESIGN	0.04495696255618327	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999998556139175	WITHOUT_CLASSIFICATION	1.443860825126081E-6	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9941621870968136	WITHOUT_CLASSIFICATION	0.0058378129031863854	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9737567031324149	WITHOUT_CLASSIFICATION	0.026243296867585	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998828989658335	WITHOUT_CLASSIFICATION	1.1710103416640361E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999944289808017	WITHOUT_CLASSIFICATION	5.571019198172376E-6	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912189936753	WITHOUT_CLASSIFICATION	8.781006324769031E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871990491023	WITHOUT_CLASSIFICATION	1.2800950897796623E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999969820459691	WITHOUT_CLASSIFICATION	3.017954030857798E-6	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.999973563265922	WITHOUT_CLASSIFICATION	2.643673407793281E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9996939877085294	WITHOUT_CLASSIFICATION	3.0601229147070324E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.999962464886647	WITHOUT_CLASSIFICATION	3.7535113353090896E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.999973563265922	WITHOUT_CLASSIFICATION	2.643673407793281E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.999962464886647	WITHOUT_CLASSIFICATION	3.7535113353090896E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999962394009329	WITHOUT_CLASSIFICATION	3.7605990672206603E-6	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9908600339801862	DESIGN	0.00913996601981384	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999835796650418	WITHOUT_CLASSIFICATION	1.6420334958134833E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999809286001073	WITHOUT_CLASSIFICATION	1.9071399892629553E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998736911411922	WITHOUT_CLASSIFICATION	1.2630885880776738E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999698752655367	WITHOUT_CLASSIFICATION	3.0124734463223697E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9284776391680903	WITHOUT_CLASSIFICATION	0.07152236083190971	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9211770488582696	WITHOUT_CLASSIFICATION	0.07882295114173046	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9986642033943844	WITHOUT_CLASSIFICATION	0.0013357966056156468	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999990606751396	WITHOUT_CLASSIFICATION	9.393248603702043E-7	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999999563689331	WITHOUT_CLASSIFICATION	4.3631066901146196E-7	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999965150321919	WITHOUT_CLASSIFICATION	3.4849678080644895E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999960941817565	WITHOUT_CLASSIFICATION	3.905818243436379E-6	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999957601515616	WITHOUT_CLASSIFICATION	4.2398484385171325E-6	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9999094248066452	WITHOUT_CLASSIFICATION	9.057519335479458E-5	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999995809041898	WITHOUT_CLASSIFICATION	4.1909581018036887E-7	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999999363670888	WITHOUT_CLASSIFICATION	6.363291116554529E-8	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9997883832191711	WITHOUT_CLASSIFICATION	2.116167808289869E-4	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9995845949493695	WITHOUT_CLASSIFICATION	4.154050506304299E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999549987665415	WITHOUT_CLASSIFICATION	4.500123345841134E-5	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9990716739434102	WITHOUT_CLASSIFICATION	9.283260565898139E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999453657687	WITHOUT_CLASSIFICATION	5.463423139312367E-8	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999828887556867	WITHOUT_CLASSIFICATION	1.711124431321504E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962129421033	WITHOUT_CLASSIFICATION	3.7870578967320066E-6	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9940637212683359	WITHOUT_CLASSIFICATION	0.005936278731664256	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999750218813621	WITHOUT_CLASSIFICATION	2.4978118637818598E-5	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999881816652392	WITHOUT_CLASSIFICATION	1.1818334760861444E-5	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9971436209688294	WITHOUT_CLASSIFICATION	0.0028563790311706997	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999827086448491	WITHOUT_CLASSIFICATION	1.7291355150963584E-5	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9992025117228526	WITHOUT_CLASSIFICATION	7.974882771475469E-4	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999996548533151	WITHOUT_CLASSIFICATION	3.451466849200467E-7	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999920977806	WITHOUT_CLASSIFICATION	7.90221938000834E-9	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998414766645145	WITHOUT_CLASSIFICATION	1.5852333548554818E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997105637716536	WITHOUT_CLASSIFICATION	2.894362283464611E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999960449577522	WITHOUT_CLASSIFICATION	3.955042247822347E-6	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999964440630312	WITHOUT_CLASSIFICATION	3.5559369686327764E-6	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997105637716536	WITHOUT_CLASSIFICATION	2.894362283464611E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9994324079702749	WITHOUT_CLASSIFICATION	5.67592029725092E-4	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999636240733781	WITHOUT_CLASSIFICATION	3.6375926621768604E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999998322263104	WITHOUT_CLASSIFICATION	1.6777368954874914E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998811403852	WITHOUT_CLASSIFICATION	1.1885961482768506E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999999143350214	WITHOUT_CLASSIFICATION	8.566497854867026E-8	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999538174281484	WITHOUT_CLASSIFICATION	4.618257185159821E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999538174281484	WITHOUT_CLASSIFICATION	4.618257185159821E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999886865756238	WITHOUT_CLASSIFICATION	1.1313424376238654E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.8958617368322934	WITHOUT_CLASSIFICATION	0.10413826316770654	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999864407128307	WITHOUT_CLASSIFICATION	1.3559287169325786E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999993857355668	WITHOUT_CLASSIFICATION	6.142644331503916E-7	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999921923717761	WITHOUT_CLASSIFICATION	7.80762822401396E-6	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999430887618741	WITHOUT_CLASSIFICATION	5.69112381259525E-5	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999872075460743	WITHOUT_CLASSIFICATION	1.2792453925659814E-5	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999975346670429	WITHOUT_CLASSIFICATION	2.4653329570060384E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999970082875029	WITHOUT_CLASSIFICATION	2.99171249717401E-6	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999991172118459	WITHOUT_CLASSIFICATION	8.827881541591845E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9991931159161452	WITHOUT_CLASSIFICATION	8.068840838547215E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9991931159161452	WITHOUT_CLASSIFICATION	8.068840838547215E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999934966430973	WITHOUT_CLASSIFICATION	6.5033569025848856E-6	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999989127129125	WITHOUT_CLASSIFICATION	1.0872870875251043E-6	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.999972843691976	WITHOUT_CLASSIFICATION	2.715630802401016E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9991931159161452	WITHOUT_CLASSIFICATION	8.068840838547215E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999934966430973	WITHOUT_CLASSIFICATION	6.5033569025848856E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999934966430973	WITHOUT_CLASSIFICATION	6.5033569025848856E-6	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999587879153803	WITHOUT_CLASSIFICATION	4.121208461961989E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999994058703858	WITHOUT_CLASSIFICATION	5.941296141940946E-6	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997774892687	WITHOUT_CLASSIFICATION	2.2251073142420085E-7	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999997866113733	WITHOUT_CLASSIFICATION	2.133886266996457E-7	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9990364421583288	WITHOUT_CLASSIFICATION	9.635578416712071E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9990364421583288	WITHOUT_CLASSIFICATION	9.635578416712071E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998242662423599	WITHOUT_CLASSIFICATION	1.757337576400732E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9971934903050744	WITHOUT_CLASSIFICATION	0.0028065096949256227	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999971211797014	WITHOUT_CLASSIFICATION	2.878820298513425E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999957206382111	WITHOUT_CLASSIFICATION	4.279361788926439E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999957206382111	WITHOUT_CLASSIFICATION	4.279361788926439E-6	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999234458954811	WITHOUT_CLASSIFICATION	7.655410451880961E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999173403708996	WITHOUT_CLASSIFICATION	8.26596291004094E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.6104967491481033	WITHOUT_CLASSIFICATION	0.38950325085189663	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999993201866484	WITHOUT_CLASSIFICATION	6.798133516550709E-7	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9933557909125779	WITHOUT_CLASSIFICATION	0.006644209087422224	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999979960556715	WITHOUT_CLASSIFICATION	2.0039443284492416E-6	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9960448729249355	WITHOUT_CLASSIFICATION	0.0039551270750644955	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9982760297450185	WITHOUT_CLASSIFICATION	0.0017239702549814427	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999901793485559	WITHOUT_CLASSIFICATION	9.820651444173557E-6	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.6104967491481033	WITHOUT_CLASSIFICATION	0.38950325085189663	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9999824351728255	WITHOUT_CLASSIFICATION	1.7564827174536406E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999961327328939	WITHOUT_CLASSIFICATION	3.867267106056786E-6	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999961327328939	WITHOUT_CLASSIFICATION	3.867267106056786E-6	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9981803367850918	WITHOUT_CLASSIFICATION	0.001819663214908121	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9789095504161811	WITHOUT_CLASSIFICATION	0.021090449583818872	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.880512532549862	WITHOUT_CLASSIFICATION	0.119487467450138	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999907045256172	WITHOUT_CLASSIFICATION	9.295474382805248E-6	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999939242642937	WITHOUT_CLASSIFICATION	6.075735706319451E-6	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9999934705778165	WITHOUT_CLASSIFICATION	6.529422183512491E-6	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9999658660117692	WITHOUT_CLASSIFICATION	3.4133988230889095E-5	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9998766609135095	WITHOUT_CLASSIFICATION	1.233390864905526E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999995061446556	WITHOUT_CLASSIFICATION	4.938553443752082E-7	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999995061446556	WITHOUT_CLASSIFICATION	4.938553443752082E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999790857006743	WITHOUT_CLASSIFICATION	2.0914299325654147E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999999656167673	WITHOUT_CLASSIFICATION	3.4383232660702E-8	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999968204058164	WITHOUT_CLASSIFICATION	3.1795941836528995E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.99999992940695	WITHOUT_CLASSIFICATION	7.059304985732709E-8	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999925984999014	WITHOUT_CLASSIFICATION	7.401500098531593E-6	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999956000958716	WITHOUT_CLASSIFICATION	4.399904128423297E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999997983833908	WITHOUT_CLASSIFICATION	2.0161660927547966E-7	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999990507328842	WITHOUT_CLASSIFICATION	9.492671157126265E-7	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999982995318258	WITHOUT_CLASSIFICATION	1.7004681742488255E-6	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9998961855406739	WITHOUT_CLASSIFICATION	1.0381445932605781E-4	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999270583944869	WITHOUT_CLASSIFICATION	7.294160551315172E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999793394215402	WITHOUT_CLASSIFICATION	2.0660578459805516E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999748013279124	WITHOUT_CLASSIFICATION	2.5198672087603837E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999986350286307	WITHOUT_CLASSIFICATION	1.364971369262077E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999032784584	WITHOUT_CLASSIFICATION	9.67215414750915E-8	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999032784584	WITHOUT_CLASSIFICATION	9.67215414750915E-8	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998698161332	WITHOUT_CLASSIFICATION	1.301838666883733E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999897676486381	WITHOUT_CLASSIFICATION	1.0232351361961745E-5	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999983354530193	WITHOUT_CLASSIFICATION	1.6645469807162268E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999997388374301	WITHOUT_CLASSIFICATION	2.6116256996795626E-7	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999989526084025	WITHOUT_CLASSIFICATION	1.0473915974806508E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999755333379498	WITHOUT_CLASSIFICATION	2.4466662050174298E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998147525827	WITHOUT_CLASSIFICATION	1.8524741726059593E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9999774936103115	WITHOUT_CLASSIFICATION	2.2506389688503706E-5	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999982953655149	WITHOUT_CLASSIFICATION	1.7046344850437736E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999970340562402	WITHOUT_CLASSIFICATION	2.9659437597975446E-5	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998184243827	WITHOUT_CLASSIFICATION	1.815756173404247E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999989789235979	WITHOUT_CLASSIFICATION	1.0210764021041743E-6	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999966787112502	WITHOUT_CLASSIFICATION	3.3212887498578525E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999997950684609	WITHOUT_CLASSIFICATION	2.0493153906771535E-7	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999202340092	WITHOUT_CLASSIFICATION	7.976599075188234E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999995885611743	WITHOUT_CLASSIFICATION	4.114388256424983E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999997109272408	WITHOUT_CLASSIFICATION	2.890727592238774E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9993899139718104	WITHOUT_CLASSIFICATION	6.10086028189538E-4	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999992146822451	WITHOUT_CLASSIFICATION	7.853177549836401E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964713113372	WITHOUT_CLASSIFICATION	3.5286886626932485E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999925984999014	WITHOUT_CLASSIFICATION	7.401500098531593E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999925984999014	WITHOUT_CLASSIFICATION	7.401500098531593E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999793394215402	WITHOUT_CLASSIFICATION	2.0660578459805516E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999032784584	WITHOUT_CLASSIFICATION	9.67215414750915E-8	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999997950684609	WITHOUT_CLASSIFICATION	2.0493153906771535E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999900070853471	WITHOUT_CLASSIFICATION	9.992914652800441E-6	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999998361718223	WITHOUT_CLASSIFICATION	1.6382817764564757E-7	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999042377580709	WITHOUT_CLASSIFICATION	9.57622419291123E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999987937318383	WITHOUT_CLASSIFICATION	1.2062681616331906E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999995474861751	WITHOUT_CLASSIFICATION	4.525138247585955E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999998609277225	WITHOUT_CLASSIFICATION	1.3907227751010127E-6	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999976241090087	WITHOUT_CLASSIFICATION	2.375890991239773E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999996400920016	WITHOUT_CLASSIFICATION	3.59907998379882E-7	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999214928104186	WITHOUT_CLASSIFICATION	7.850718958135052E-5	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9998501142806948	WITHOUT_CLASSIFICATION	1.4988571930520423E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999968450914098	WITHOUT_CLASSIFICATION	3.1549085900322403E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999968450914098	WITHOUT_CLASSIFICATION	3.1549085900322403E-6	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999986977323958	WITHOUT_CLASSIFICATION	1.3022676042078348E-5	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999968911652173	WITHOUT_CLASSIFICATION	3.1088347827372883E-6	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.99820855422881	WITHOUT_CLASSIFICATION	0.0017914457711900146	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999946084989232	WITHOUT_CLASSIFICATION	5.3915010767380554E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999937356694084	WITHOUT_CLASSIFICATION	6.264330591580103E-6	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999861701567	WITHOUT_CLASSIFICATION	1.3829843252605681E-8	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999999526765727	WITHOUT_CLASSIFICATION	4.7323427346858364E-8	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999984217752885	WITHOUT_CLASSIFICATION	1.5782247115037385E-6	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999998896007716	WITHOUT_CLASSIFICATION	1.103992283989565E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.999999444688409	WITHOUT_CLASSIFICATION	5.553115909856835E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.999999444688409	WITHOUT_CLASSIFICATION	5.553115909856835E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999551127512	WITHOUT_CLASSIFICATION	4.4887248847382815E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999983561561498	WITHOUT_CLASSIFICATION	1.643843850192188E-6	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999638082042	WITHOUT_CLASSIFICATION	3.619179587117465E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999990999314693	WITHOUT_CLASSIFICATION	9.000685306166157E-7	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999984832864639	WITHOUT_CLASSIFICATION	1.5167135361584293E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999925984999014	WITHOUT_CLASSIFICATION	7.401500098531593E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999793394215402	WITHOUT_CLASSIFICATION	2.0660578459805516E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999986350286307	WITHOUT_CLASSIFICATION	1.364971369262077E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999997950684609	WITHOUT_CLASSIFICATION	2.0493153906771535E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999997950684609	WITHOUT_CLASSIFICATION	2.0493153906771535E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993721701208	WITHOUT_CLASSIFICATION	6.278298792244934E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993721701208	WITHOUT_CLASSIFICATION	6.278298792244934E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999998956482493	WITHOUT_CLASSIFICATION	1.0435175077711578E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999992921557713	WITHOUT_CLASSIFICATION	7.078442286241993E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999992921557713	WITHOUT_CLASSIFICATION	7.078442286241993E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999997663985906	WITHOUT_CLASSIFICATION	2.33601409501022E-7	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999907660257672	WITHOUT_CLASSIFICATION	9.233974232813352E-6	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999902928575295	WITHOUT_CLASSIFICATION	9.70714247057315E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999993445399445	WITHOUT_CLASSIFICATION	6.554600554645481E-7	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999997097480364	WITHOUT_CLASSIFICATION	2.902519635558102E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999964116972001	WITHOUT_CLASSIFICATION	3.588302799948048E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999964116972001	WITHOUT_CLASSIFICATION	3.588302799948048E-6	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.999996295956671	WITHOUT_CLASSIFICATION	3.7040433289729966E-6	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.999999743672911	WITHOUT_CLASSIFICATION	2.563270889684734E-7	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999992486519085	WITHOUT_CLASSIFICATION	7.513480915271666E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999982184785592	WITHOUT_CLASSIFICATION	1.781521440831417E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999989405825145	WITHOUT_CLASSIFICATION	1.059417485492349E-6	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999979821008416	WITHOUT_CLASSIFICATION	2.0178991584424476E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999999798064587	WITHOUT_CLASSIFICATION	2.0193541287771065E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999995122919275	WITHOUT_CLASSIFICATION	4.877080725088151E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999995122919275	WITHOUT_CLASSIFICATION	4.877080725088151E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999813759927392	WITHOUT_CLASSIFICATION	1.8624007260828647E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999813759927392	WITHOUT_CLASSIFICATION	1.8624007260828647E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999971371009938	WITHOUT_CLASSIFICATION	2.8628990062251953E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999971371009938	WITHOUT_CLASSIFICATION	2.8628990062251953E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989686530119	WITHOUT_CLASSIFICATION	1.031346988167171E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989686530119	WITHOUT_CLASSIFICATION	1.031346988167171E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999964116972001	WITHOUT_CLASSIFICATION	3.588302799948048E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999999798064587	WITHOUT_CLASSIFICATION	2.0193541287771065E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999995122919275	WITHOUT_CLASSIFICATION	4.877080725088151E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999995122919275	WITHOUT_CLASSIFICATION	4.877080725088151E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999813759927392	WITHOUT_CLASSIFICATION	1.8624007260828647E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999971371009938	WITHOUT_CLASSIFICATION	2.8628990062251953E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999971371009938	WITHOUT_CLASSIFICATION	2.8628990062251953E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999989686530119	WITHOUT_CLASSIFICATION	1.031346988167171E-6	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998824653535	WITHOUT_CLASSIFICATION	1.1753464641109466E-7	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999927773274724	WITHOUT_CLASSIFICATION	7.222672527616164E-6	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998685871842699	WITHOUT_CLASSIFICATION	1.3141281573013215E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999844487869876	WITHOUT_CLASSIFICATION	1.5551213012393847E-5	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999993658132125	WITHOUT_CLASSIFICATION	6.341867876260512E-7	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999954183189909	WITHOUT_CLASSIFICATION	4.58168100920775E-6	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999128081656945	WITHOUT_CLASSIFICATION	8.719183430551095E-5	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9995705701490601	WITHOUT_CLASSIFICATION	4.2942985093990057E-4	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997681520771592	WITHOUT_CLASSIFICATION	2.318479228407521E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999997813501662	WITHOUT_CLASSIFICATION	2.1864983369909914E-7	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999683246829181	WITHOUT_CLASSIFICATION	3.167531708190106E-5	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999811100944707	WITHOUT_CLASSIFICATION	1.888990552933269E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999886865756238	WITHOUT_CLASSIFICATION	1.1313424376238654E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999954183189909	WITHOUT_CLASSIFICATION	4.58168100920775E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999240779788039	WITHOUT_CLASSIFICATION	7.59220211960964E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999240779788039	WITHOUT_CLASSIFICATION	7.59220211960964E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9998650784160596	WITHOUT_CLASSIFICATION	1.3492158394042363E-4	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994899467248	WITHOUT_CLASSIFICATION	5.100532750701403E-7	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999994899467248	WITHOUT_CLASSIFICATION	5.100532750701403E-7	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.996062165981171	WITHOUT_CLASSIFICATION	0.003937834018828932	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999956064334657	WITHOUT_CLASSIFICATION	4.393566534249378E-6	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999038495525993	WITHOUT_CLASSIFICATION	9.615044740073134E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999962223113165	WITHOUT_CLASSIFICATION	3.7776886834681513E-6	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999962223113165	WITHOUT_CLASSIFICATION	3.7776886834681513E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999980705487	WITHOUT_CLASSIFICATION	1.929451277314684E-9	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999992933447	WITHOUT_CLASSIFICATION	7.066553983421342E-10	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999992933447	WITHOUT_CLASSIFICATION	7.066553983421342E-10	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9990595853429769	WITHOUT_CLASSIFICATION	9.404146570230629E-4	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999986575541486	WITHOUT_CLASSIFICATION	1.342445851267683E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999997905329308	WITHOUT_CLASSIFICATION	2.094670692681139E-7	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999965359225986	WITHOUT_CLASSIFICATION	3.4640774013760086E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999952829511274	WITHOUT_CLASSIFICATION	4.7170488725960174E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999955917303293	WITHOUT_CLASSIFICATION	4.408269670707337E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999916076356529	WITHOUT_CLASSIFICATION	8.392364347082298E-6	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999949207173181	WITHOUT_CLASSIFICATION	5.0792826818478656E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.992980395978778	WITHOUT_CLASSIFICATION	0.007019604021221974	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999902505383356	WITHOUT_CLASSIFICATION	9.74946166430483E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999993739554676	WITHOUT_CLASSIFICATION	6.26044532377313E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950888005902	WITHOUT_CLASSIFICATION	4.911199409902468E-6	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999423322292	WITHOUT_CLASSIFICATION	5.766777073194593E-8	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999850238465108	WITHOUT_CLASSIFICATION	1.4976153489171402E-5	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9995688410379219	WITHOUT_CLASSIFICATION	4.311589620781305E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950888005902	WITHOUT_CLASSIFICATION	4.911199409902468E-6	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999832424921118	WITHOUT_CLASSIFICATION	1.675750788825502E-5	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.99999663398786	WITHOUT_CLASSIFICATION	3.366012140000667E-6	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999982197587883	WITHOUT_CLASSIFICATION	1.7802412116354452E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.999996108826203	WITHOUT_CLASSIFICATION	3.891173796944687E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999953685082998	WITHOUT_CLASSIFICATION	4.631491700085317E-6	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999994105910469	WITHOUT_CLASSIFICATION	5.89408953009053E-7	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999996339975853	WITHOUT_CLASSIFICATION	3.6600241468992303E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999963920886704	WITHOUT_CLASSIFICATION	3.6079113295078536E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999966445710297	WITHOUT_CLASSIFICATION	3.3554289704181043E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999999750589362	WITHOUT_CLASSIFICATION	2.494106380524994E-7	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999999218218255	WITHOUT_CLASSIFICATION	7.817817458004187E-8	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999996198558805	WITHOUT_CLASSIFICATION	3.801441195031244E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999940208372742	WITHOUT_CLASSIFICATION	5.979162725773868E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999916076356529	WITHOUT_CLASSIFICATION	8.392364347082298E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999966445710297	WITHOUT_CLASSIFICATION	3.3554289704181043E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999999218218255	WITHOUT_CLASSIFICATION	7.817817458004187E-8	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999940208372742	WITHOUT_CLASSIFICATION	5.979162725773868E-6	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.99999686864443	WITHOUT_CLASSIFICATION	3.13135556989467E-6	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999911129316199	WITHOUT_CLASSIFICATION	8.887068380018712E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997627651261	WITHOUT_CLASSIFICATION	2.3723487396868475E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999961834750195	WITHOUT_CLASSIFICATION	3.816524980513842E-6	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999986169027251	WITHOUT_CLASSIFICATION	1.3830972749877393E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999701887744074	WITHOUT_CLASSIFICATION	2.9811225592614393E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9998543084887878	WITHOUT_CLASSIFICATION	1.4569151121225535E-4	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999817931194206	WITHOUT_CLASSIFICATION	1.8206880579391834E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999985654016696	WITHOUT_CLASSIFICATION	1.434598330406244E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999984893616	WITHOUT_CLASSIFICATION	1.5106384082206314E-8	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999928697646612	WITHOUT_CLASSIFICATION	7.130235338788019E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999995470100076	WITHOUT_CLASSIFICATION	4.5298999242411835E-7	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999989568745	WITHOUT_CLASSIFICATION	1.0431254915744002E-9	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999987548443608	WITHOUT_CLASSIFICATION	1.2451556391745664E-6	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999975601094506	WITHOUT_CLASSIFICATION	2.439890549320108E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999976796662512	WITHOUT_CLASSIFICATION	2.320333748862395E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999826199850725	WITHOUT_CLASSIFICATION	1.7380014927461634E-5	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999997729326671	WITHOUT_CLASSIFICATION	2.2706733297233812E-7	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999985695787278	WITHOUT_CLASSIFICATION	1.4304212721289796E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999966445710297	WITHOUT_CLASSIFICATION	3.3554289704181043E-6	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999974698648951	WITHOUT_CLASSIFICATION	2.5301351048841435E-5	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999758918631978	WITHOUT_CLASSIFICATION	2.4108136802149297E-5	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999999322659667	WITHOUT_CLASSIFICATION	6.773403329501503E-8	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998881143484277	WITHOUT_CLASSIFICATION	1.1188565157229193E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999996634385808	WITHOUT_CLASSIFICATION	3.3656141907645066E-7	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999864085596637	WITHOUT_CLASSIFICATION	1.3591440336344585E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999977284109253	WITHOUT_CLASSIFICATION	2.271589074751924E-6	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999575465282	WITHOUT_CLASSIFICATION	4.245347184843029E-8	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.999999154198511	WITHOUT_CLASSIFICATION	8.458014889071481E-7	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999928190280294	WITHOUT_CLASSIFICATION	7.180971970612178E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999967643459243	WITHOUT_CLASSIFICATION	3.2356540757475825E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999993948026071	WITHOUT_CLASSIFICATION	6.051973928976955E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999895259173384	WITHOUT_CLASSIFICATION	1.0474082661561276E-5	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9998019110663393	WITHOUT_CLASSIFICATION	1.980889336606083E-4	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.999999801540416	WITHOUT_CLASSIFICATION	1.9845958405279452E-7	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999838537477282	WITHOUT_CLASSIFICATION	1.6146252271751497E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999593309477671	WITHOUT_CLASSIFICATION	4.0669052232817924E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999963245664121	WITHOUT_CLASSIFICATION	3.675433588049067E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999957397357554	WITHOUT_CLASSIFICATION	4.260264244684037E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999804374100669	WITHOUT_CLASSIFICATION	1.956258993303345E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999995477624388	WITHOUT_CLASSIFICATION	4.5223756118618237E-7	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9977819057212309	WITHOUT_CLASSIFICATION	0.002218094278769028	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9976108706463017	WITHOUT_CLASSIFICATION	0.0023891293536983252	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999825046742273	WITHOUT_CLASSIFICATION	1.7495325772706582E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997889631798123	WITHOUT_CLASSIFICATION	2.1103682018778683E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997889631798123	WITHOUT_CLASSIFICATION	2.1103682018778683E-4	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999491455249351	WITHOUT_CLASSIFICATION	5.0854475064806874E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998596305478993	WITHOUT_CLASSIFICATION	1.403694521008166E-4	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999919752533526	WITHOUT_CLASSIFICATION	8.024746647346514E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999928626302432	WITHOUT_CLASSIFICATION	7.137369756646914E-6	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.99999222790091	WITHOUT_CLASSIFICATION	7.772099090031491E-6	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999910752641973	WITHOUT_CLASSIFICATION	8.92473580271903E-6	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999989769998991	WITHOUT_CLASSIFICATION	1.0230001008641925E-6	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998467878590767	WITHOUT_CLASSIFICATION	1.5321214092336172E-4	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999982878027709	WITHOUT_CLASSIFICATION	1.7121972291204363E-6	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999983253183043	WITHOUT_CLASSIFICATION	1.6746816955914694E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999712675135077	WITHOUT_CLASSIFICATION	2.873248649228008E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999506845967591	WITHOUT_CLASSIFICATION	4.931540324099723E-5	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9917728048166008	WITHOUT_CLASSIFICATION	0.00822719518339923	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9997772323145707	WITHOUT_CLASSIFICATION	2.2276768542916486E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999582049287693	WITHOUT_CLASSIFICATION	4.179507123075307E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999924115157556	WITHOUT_CLASSIFICATION	7.588484244402785E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9990470329098451	WITHOUT_CLASSIFICATION	9.529670901548024E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999867758938695	WITHOUT_CLASSIFICATION	1.3224106130455423E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9937681999816894	WITHOUT_CLASSIFICATION	0.00623180001831054	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9983613318320084	WITHOUT_CLASSIFICATION	0.0016386681679916033	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999978653958028	WITHOUT_CLASSIFICATION	2.13460419720651E-6	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999978653958028	WITHOUT_CLASSIFICATION	2.13460419720651E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999972245057972	WITHOUT_CLASSIFICATION	2.7754942028130685E-6	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999972245057972	WITHOUT_CLASSIFICATION	2.7754942028130685E-6	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9976108706463017	WITHOUT_CLASSIFICATION	0.0023891293536983252	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999676532189932	WITHOUT_CLASSIFICATION	3.2346781006863055E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9917065963018609	WITHOUT_CLASSIFICATION	0.008293403698139247	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999955438618947	WITHOUT_CLASSIFICATION	4.456138105302552E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999790857006743	WITHOUT_CLASSIFICATION	2.0914299325654147E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9917065963018609	WITHOUT_CLASSIFICATION	0.008293403698139247	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999955438618947	WITHOUT_CLASSIFICATION	4.456138105302552E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994278096874857	WITHOUT_CLASSIFICATION	5.721903125144352E-4	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9382163849477708	WITHOUT_CLASSIFICATION	0.061783615052229145	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999876307688709	WITHOUT_CLASSIFICATION	1.2369231129086357E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999998566296104	WITHOUT_CLASSIFICATION	1.4337038956297473E-7	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9990426668481185	WITHOUT_CLASSIFICATION	9.573331518814172E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.7245302319268566	WITHOUT_CLASSIFICATION	0.2754697680731435	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999988096400894	WITHOUT_CLASSIFICATION	1.1903599106960581E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999798868361159	WITHOUT_CLASSIFICATION	2.0113163883971866E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997573106812938	WITHOUT_CLASSIFICATION	2.4268931870612056E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999031123744	WITHOUT_CLASSIFICATION	9.688762561628877E-8	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999851860822295	WITHOUT_CLASSIFICATION	1.4813917770506562E-5	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999984645777956	WITHOUT_CLASSIFICATION	1.5354222044333459E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999847085266	WITHOUT_CLASSIFICATION	1.5291473428689684E-8	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999819617071098	WITHOUT_CLASSIFICATION	1.8038292890192764E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999790857006743	WITHOUT_CLASSIFICATION	2.0914299325654147E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999042983484026	WITHOUT_CLASSIFICATION	9.57016515974021E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999288793765	WITHOUT_CLASSIFICATION	7.112062347497484E-8	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999999288793765	WITHOUT_CLASSIFICATION	7.112062347497484E-8	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999988597137531	WITHOUT_CLASSIFICATION	1.1402862468633248E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994278096874857	WITHOUT_CLASSIFICATION	5.721903125144352E-4	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9999983107535539	WITHOUT_CLASSIFICATION	1.6892464460266813E-6	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.7597853100541454	DESIGN	0.24021468994585463	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9938481604625485	WITHOUT_CLASSIFICATION	0.0061518395374514446	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999904454989872	WITHOUT_CLASSIFICATION	9.55450101280908E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8243019166771881	WITHOUT_CLASSIFICATION	0.1756980833228119	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994278096874857	WITHOUT_CLASSIFICATION	5.721903125144352E-4	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999904454989872	WITHOUT_CLASSIFICATION	9.55450101280908E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8243019166771881	WITHOUT_CLASSIFICATION	0.1756980833228119	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9983905276708852	WITHOUT_CLASSIFICATION	0.0016094723291148066	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999998305960562	WITHOUT_CLASSIFICATION	1.694039437873539E-7	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999947688945773	WITHOUT_CLASSIFICATION	5.231105422686173E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994278096874857	WITHOUT_CLASSIFICATION	5.721903125144352E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9994278096874857	WITHOUT_CLASSIFICATION	5.721903125144352E-4	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999927479534919	WITHOUT_CLASSIFICATION	7.252046508013288E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999972766755791	WITHOUT_CLASSIFICATION	2.723324420879056E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999957415003121	WITHOUT_CLASSIFICATION	4.258499687948473E-6	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999927919380338	WITHOUT_CLASSIFICATION	7.208061966251782E-6	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999992033087304	WITHOUT_CLASSIFICATION	7.96691269624707E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999938728998176	WITHOUT_CLASSIFICATION	6.127100182395128E-6	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999941413284947	WITHOUT_CLASSIFICATION	5.85867150523648E-6	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999989639083592	WITHOUT_CLASSIFICATION	1.0360916407736745E-6	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999766238080542	WITHOUT_CLASSIFICATION	2.337619194573322E-5	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999935806240732	WITHOUT_CLASSIFICATION	6.419375926783227E-6	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9991899152413517	WITHOUT_CLASSIFICATION	8.100847586482292E-4	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998782544060276	WITHOUT_CLASSIFICATION	1.2174559397243907E-4	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9997504922075163	WITHOUT_CLASSIFICATION	2.49507792483725E-4	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9944272051103785	WITHOUT_CLASSIFICATION	0.005572794889621531	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160907499	WITHOUT_CLASSIFICATION	6.839092500866932E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9997677585851993	WITHOUT_CLASSIFICATION	2.3224141480072082E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998828989658335	WITHOUT_CLASSIFICATION	1.1710103416640361E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999972039905726	WITHOUT_CLASSIFICATION	2.7960094274709994E-6	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9931647011509477	WITHOUT_CLASSIFICATION	0.0068352988490523025	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999940180543558	WITHOUT_CLASSIFICATION	5.981945644168296E-6	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9997811726024844	WITHOUT_CLASSIFICATION	2.188273975154211E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9990635981398963	WITHOUT_CLASSIFICATION	9.36401860103759E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9990635981398963	WITHOUT_CLASSIFICATION	9.36401860103759E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998828989658335	WITHOUT_CLASSIFICATION	1.1710103416640361E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999968589906029	WITHOUT_CLASSIFICATION	3.1410093970171285E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9824394648677932	WITHOUT_CLASSIFICATION	0.017560535132206827	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.5689673203640263	WITHOUT_CLASSIFICATION	0.4310326796359737	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999997153523922	WITHOUT_CLASSIFICATION	2.846476079117004E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999465065487947	WITHOUT_CLASSIFICATION	5.349345120532366E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998461782071	WITHOUT_CLASSIFICATION	1.5382179286055517E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999651909668993	WITHOUT_CLASSIFICATION	3.48090331006875E-5	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999984792373264	WITHOUT_CLASSIFICATION	1.5207626735938831E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999932089265146	WITHOUT_CLASSIFICATION	6.791073485403388E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999896650555354	WITHOUT_CLASSIFICATION	1.0334944464473751E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997187656212938	WITHOUT_CLASSIFICATION	2.8123437870619753E-4	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999966023540336	WITHOUT_CLASSIFICATION	3.397645966287498E-6	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999631133778264	WITHOUT_CLASSIFICATION	3.68866221736489E-5	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999993581152914	WITHOUT_CLASSIFICATION	6.418847085953662E-7	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988214397182	WITHOUT_CLASSIFICATION	1.1785602817930382E-5	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9990777977305816	WITHOUT_CLASSIFICATION	9.222022694183534E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999899179958627	WITHOUT_CLASSIFICATION	1.0082004137319496E-5	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9998219005259812	WITHOUT_CLASSIFICATION	1.7809947401881346E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999963384131086	WITHOUT_CLASSIFICATION	3.6615868914111664E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9996740779905131	WITHOUT_CLASSIFICATION	3.2592200948698653E-4	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9982671902469683	WITHOUT_CLASSIFICATION	0.0017328097530316434	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.990166752804671	WITHOUT_CLASSIFICATION	0.009833247195328952	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99905913390907	WITHOUT_CLASSIFICATION	9.408660909300291E-4	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9960717823511207	WITHOUT_CLASSIFICATION	0.003928217648879318	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999076584964413	WITHOUT_CLASSIFICATION	9.234150355866882E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909860226087	WITHOUT_CLASSIFICATION	9.01397739119811E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998921679640898	WITHOUT_CLASSIFICATION	1.0783203591025977E-4	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999565187342309	WITHOUT_CLASSIFICATION	4.348126576917496E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996948781584412	WITHOUT_CLASSIFICATION	3.051218415588022E-4	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999098848164873	WITHOUT_CLASSIFICATION	9.011518351269874E-5	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9998716084837216	WITHOUT_CLASSIFICATION	1.283915162784931E-4	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9861140848888746	WITHOUT_CLASSIFICATION	0.013885915111125397	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695935414877	WITHOUT_CLASSIFICATION	3.0406458512301315E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9945493038846258	WITHOUT_CLASSIFICATION	0.005450696115374284	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999748036772367	WITHOUT_CLASSIFICATION	2.5196322763266052E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999471970579639	WITHOUT_CLASSIFICATION	5.280294203628272E-5	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999505902443794	WITHOUT_CLASSIFICATION	4.940975562057605E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998044475670976	WITHOUT_CLASSIFICATION	1.9555243290224705E-4	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999635367266639	WITHOUT_CLASSIFICATION	3.646327333604713E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021493294522	WITHOUT_CLASSIFICATION	9.785067054772618E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998555915682694	WITHOUT_CLASSIFICATION	1.4440843173059293E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996427254436209	WITHOUT_CLASSIFICATION	3.57274556379052E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9920195607729194	WITHOUT_CLASSIFICATION	0.007980439227080648	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996733893492422	WITHOUT_CLASSIFICATION	3.266106507577678E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9998694032141747	WITHOUT_CLASSIFICATION	1.3059678582524704E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985223508427	WITHOUT_CLASSIFICATION	1.4776491571749775E-6	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999409628565881	WITHOUT_CLASSIFICATION	5.9037143411936885E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999712390880028	WITHOUT_CLASSIFICATION	2.8760911997278765E-5	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.8443365893501859	WITHOUT_CLASSIFICATION	0.15566341064981407	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999967740087766	WITHOUT_CLASSIFICATION	3.2259912233720784E-6	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999983438916933	WITHOUT_CLASSIFICATION	1.6561083067865207E-6	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999994808335436	WITHOUT_CLASSIFICATION	5.191664563572704E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999992273447306	WITHOUT_CLASSIFICATION	7.726552694270475E-7	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999983149186368	WITHOUT_CLASSIFICATION	1.685081363169458E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999272274891852	WITHOUT_CLASSIFICATION	7.277251081478357E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999996143268506	WITHOUT_CLASSIFICATION	3.8567314933993886E-7	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998131391935278	WITHOUT_CLASSIFICATION	1.8686080647213079E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.999994305995311	WITHOUT_CLASSIFICATION	5.694004688934053E-6	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999996401942235	WITHOUT_CLASSIFICATION	3.5980577660107683E-7	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999925967646427	WITHOUT_CLASSIFICATION	7.403235357289295E-5	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880575783162	WITHOUT_CLASSIFICATION	1.194242168368534E-5	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998237915500372	WITHOUT_CLASSIFICATION	1.762084499628606E-4	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999842262536273	WITHOUT_CLASSIFICATION	1.57737463727827E-5	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999964895755461	WITHOUT_CLASSIFICATION	3.510424453973674E-6	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999441352111105	WITHOUT_CLASSIFICATION	5.5864788889430376E-5	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999897881244683	WITHOUT_CLASSIFICATION	1.0211875531665265E-5	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9998535774154876	WITHOUT_CLASSIFICATION	1.4642258451234838E-4	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578607983529	WITHOUT_CLASSIFICATION	4.213920164698826E-5	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999670444356216	WITHOUT_CLASSIFICATION	3.295556437838966E-5	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999625931482791	WITHOUT_CLASSIFICATION	3.7406851720945976E-5	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999203933051819	WITHOUT_CLASSIFICATION	7.960669481813036E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999937230326108	WITHOUT_CLASSIFICATION	6.2769673891600185E-6	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999545743356795	WITHOUT_CLASSIFICATION	4.542566432051433E-5	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999735844736888	WITHOUT_CLASSIFICATION	2.6415526311214717E-5	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999702384001681	WITHOUT_CLASSIFICATION	2.9761599831897963E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9999728922191421	WITHOUT_CLASSIFICATION	2.710778085794273E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985223508427	WITHOUT_CLASSIFICATION	1.4776491571749775E-6	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.994533836555069	WITHOUT_CLASSIFICATION	0.005466163444930975	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999989002491018	WITHOUT_CLASSIFICATION	1.0997508982046787E-6	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999986615027892	WITHOUT_CLASSIFICATION	1.3384972107851166E-6	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996830329430446	WITHOUT_CLASSIFICATION	3.1696705695542847E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999928910459646	WITHOUT_CLASSIFICATION	7.108954035527049E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999949450864614	WITHOUT_CLASSIFICATION	5.054913538630722E-6	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999897064051513	WITHOUT_CLASSIFICATION	1.0293594848730216E-5	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9824572139399695	WITHOUT_CLASSIFICATION	0.01754278606003047	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996190519081307	WITHOUT_CLASSIFICATION	3.809480918693767E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999970740886877	WITHOUT_CLASSIFICATION	2.9259113123785163E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999558024921759	WITHOUT_CLASSIFICATION	4.4197507824184936E-5	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999874973842214	WITHOUT_CLASSIFICATION	1.2502615778623394E-5	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999988835094453	WITHOUT_CLASSIFICATION	1.1164905546615796E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998222490634358	WITHOUT_CLASSIFICATION	1.777509365643156E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999814771092543	WITHOUT_CLASSIFICATION	1.8522890745708637E-4	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999454686202992	WITHOUT_CLASSIFICATION	5.453137970086475E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9994694354575137	WITHOUT_CLASSIFICATION	5.305645424863725E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999736106546212	WITHOUT_CLASSIFICATION	2.6389345378798003E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999928868672995	WITHOUT_CLASSIFICATION	7.113132700463442E-6	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.999992101499954	WITHOUT_CLASSIFICATION	7.89850004604035E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999946810978805	WITHOUT_CLASSIFICATION	5.318902119476924E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.988366744543298	WITHOUT_CLASSIFICATION	0.011633255456701944	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999466394618052	WITHOUT_CLASSIFICATION	5.336053819490056E-5	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999653960675282	WITHOUT_CLASSIFICATION	3.460393247183743E-5	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9995065863535177	WITHOUT_CLASSIFICATION	4.934136464822321E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999982455767	WITHOUT_CLASSIFICATION	1.754423256554401E-9	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9967998224639499	WITHOUT_CLASSIFICATION	0.0032001775360501372	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999977426311579	WITHOUT_CLASSIFICATION	2.2573688421285894E-6	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996841601422	WITHOUT_CLASSIFICATION	3.158398578703476E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998799148577874	WITHOUT_CLASSIFICATION	1.2008514221260073E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985223508427	WITHOUT_CLASSIFICATION	1.4776491571749775E-6	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9998122855395633	WITHOUT_CLASSIFICATION	1.8771446043676447E-4	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999994498356222	WITHOUT_CLASSIFICATION	5.501643777747216E-7	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999862732282539	WITHOUT_CLASSIFICATION	1.3726771746100857E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985223508427	WITHOUT_CLASSIFICATION	1.4776491571749775E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992094037692	WITHOUT_CLASSIFICATION	7.905962308569658E-7	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999946810978805	WITHOUT_CLASSIFICATION	5.318902119476924E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.998466939660336	WITHOUT_CLASSIFICATION	0.0015330603396640232	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9999500743921016	WITHOUT_CLASSIFICATION	4.9925607898331595E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.8930321001072277	WITHOUT_CLASSIFICATION	0.10696789989277233	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999970740886877	WITHOUT_CLASSIFICATION	2.9259113123785163E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999558024921759	WITHOUT_CLASSIFICATION	4.4197507824184936E-5	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999874973842214	WITHOUT_CLASSIFICATION	1.2502615778623394E-5	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999816292536	WITHOUT_CLASSIFICATION	1.837074636831212E-8	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.999999324489969	WITHOUT_CLASSIFICATION	6.755100309254017E-7	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999989743022452	WITHOUT_CLASSIFICATION	1.0256977548827842E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999973798321498	WITHOUT_CLASSIFICATION	2.620167850323297E-6	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999986918349841	WITHOUT_CLASSIFICATION	1.3081650157997557E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999985223508427	WITHOUT_CLASSIFICATION	1.4776491571749775E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999988835094453	WITHOUT_CLASSIFICATION	1.1164905546615796E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9998222490634358	WITHOUT_CLASSIFICATION	1.777509365643156E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999237347340196	WITHOUT_CLASSIFICATION	7.626526598042706E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893131314898	WITHOUT_CLASSIFICATION	1.0686868510250654E-5	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999987578827515	WITHOUT_CLASSIFICATION	1.2421172485497502E-6	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999994824361159	WITHOUT_CLASSIFICATION	5.175638840724133E-7	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999931267885515	WITHOUT_CLASSIFICATION	6.873211448602126E-6	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9996815514889777	WITHOUT_CLASSIFICATION	3.1844851102225575E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999021493294522	WITHOUT_CLASSIFICATION	9.785067054772618E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9987908363130059	WITHOUT_CLASSIFICATION	0.0012091636869939765	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9971655868874009	WITHOUT_CLASSIFICATION	0.0028344131125990334	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999582310977806	WITHOUT_CLASSIFICATION	4.176890221952925E-5	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999995338364116	WITHOUT_CLASSIFICATION	4.6616358842495736E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999699225365	WITHOUT_CLASSIFICATION	3.007746360464939E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998921679640898	WITHOUT_CLASSIFICATION	1.0783203591025977E-4	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999565187342309	WITHOUT_CLASSIFICATION	4.348126576917496E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9945493038846258	WITHOUT_CLASSIFICATION	0.005450696115374284	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999699225365	WITHOUT_CLASSIFICATION	3.007746360464939E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999506425272788	WITHOUT_CLASSIFICATION	4.935747272119324E-5	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999874589403172	WITHOUT_CLASSIFICATION	1.254105968282059E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995777701091958	WITHOUT_CLASSIFICATION	0.004222298908042118	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999334563082938	WITHOUT_CLASSIFICATION	6.654369170621028E-4	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9742704857013142	WITHOUT_CLASSIFICATION	0.025729514298685748	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999342356558479	WITHOUT_CLASSIFICATION	6.576434415210971E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999748036772367	WITHOUT_CLASSIFICATION	2.5196322763266052E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998044475670976	WITHOUT_CLASSIFICATION	1.9555243290224705E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999937230326108	WITHOUT_CLASSIFICATION	6.2769673891600185E-6	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999944993880071	WITHOUT_CLASSIFICATION	5.5006119929033155E-6	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.998996575194911	WITHOUT_CLASSIFICATION	0.0010034248050889234	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999889451132593	WITHOUT_CLASSIFICATION	1.1054886740620537E-5	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999606864356536	WITHOUT_CLASSIFICATION	3.93135643464269E-5	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999990458759769	WITHOUT_CLASSIFICATION	9.5412402318074E-7	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999370287993492	WITHOUT_CLASSIFICATION	6.297120065088678E-5	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999022574959631	WITHOUT_CLASSIFICATION	9.77425040369262E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999932089265146	WITHOUT_CLASSIFICATION	6.791073485403388E-5	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999997913814229	WITHOUT_CLASSIFICATION	2.086185771276091E-7	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999932080105578	WITHOUT_CLASSIFICATION	6.7919894422445765E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999795666074869	WITHOUT_CLASSIFICATION	2.043339251312065E-5	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999982791544559	WITHOUT_CLASSIFICATION	1.7208455440978424E-5	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999837765151987	WITHOUT_CLASSIFICATION	1.622348480144375E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999575175013445	WITHOUT_CLASSIFICATION	4.248249865547478E-5	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999635756611852	WITHOUT_CLASSIFICATION	3.6424338814875375E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999946473555553	WITHOUT_CLASSIFICATION	5.352644444687987E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999938473685135	WITHOUT_CLASSIFICATION	6.1526314864337345E-6	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998144609304546	WITHOUT_CLASSIFICATION	1.85539069545503E-4	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999969426718255	WITHOUT_CLASSIFICATION	3.0573281745741794E-6	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999879306734226	WITHOUT_CLASSIFICATION	1.2069326577276375E-5	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986165413207	WITHOUT_CLASSIFICATION	1.383458679290954E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999994687155137	WITHOUT_CLASSIFICATION	5.31284486295293E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999973148400816	WITHOUT_CLASSIFICATION	2.6851599184623112E-6	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999713279410994	WITHOUT_CLASSIFICATION	2.867205890060088E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999914373135456	WITHOUT_CLASSIFICATION	8.562686454407202E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999857172963031	WITHOUT_CLASSIFICATION	1.4282703696988516E-5	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9995834931211286	WITHOUT_CLASSIFICATION	4.165068788714865E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996978333202432	WITHOUT_CLASSIFICATION	3.0216667975683804E-4	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999894195047753	WITHOUT_CLASSIFICATION	1.0580495224779865E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.999915313977668	WITHOUT_CLASSIFICATION	8.46860223320872E-5	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999654131564889	WITHOUT_CLASSIFICATION	3.45868435112019E-5	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999857832670276	WITHOUT_CLASSIFICATION	1.421673297241806E-5	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999867084078349	WITHOUT_CLASSIFICATION	1.3291592165187225E-5	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999986821707906	WITHOUT_CLASSIFICATION	1.317829209404495E-6	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999990649860533	WITHOUT_CLASSIFICATION	9.350139467958875E-7	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999946111186833	WITHOUT_CLASSIFICATION	5.388881316744596E-6	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999560876506419	WITHOUT_CLASSIFICATION	4.391234935814348E-5	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999533397507115	WITHOUT_CLASSIFICATION	4.666024928849333E-5	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999867064292451	WITHOUT_CLASSIFICATION	1.329357075491137E-4	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999951059784047	WITHOUT_CLASSIFICATION	4.89402159524071E-6	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.999878351927284	WITHOUT_CLASSIFICATION	1.2164807271599686E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999987703225076	WITHOUT_CLASSIFICATION	1.2296774924978677E-6	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999817144298994	WITHOUT_CLASSIFICATION	1.8285570100571567E-5	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999909870253475	WITHOUT_CLASSIFICATION	9.012974652551832E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9881830473292965	WITHOUT_CLASSIFICATION	0.0118169526707034	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999967562956542	WITHOUT_CLASSIFICATION	3.2437043457307996E-6	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999942108715771	WITHOUT_CLASSIFICATION	5.789128422872954E-6	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999103512298606	WITHOUT_CLASSIFICATION	8.964877013936014E-5	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.999565542304213	WITHOUT_CLASSIFICATION	4.3445769578708606E-4	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998993112588	WITHOUT_CLASSIFICATION	1.0068874119996146E-4	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.983395620634948	WITHOUT_CLASSIFICATION	0.016604379365052033	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999999661883801	WITHOUT_CLASSIFICATION	3.3811619910574856E-7	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9996378843889441	WITHOUT_CLASSIFICATION	3.6211561105582577E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.999996767063079	WITHOUT_CLASSIFICATION	3.232936920969553E-6	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999846389406477	WITHOUT_CLASSIFICATION	1.5361059352260388E-5	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999950242287039	WITHOUT_CLASSIFICATION	4.975771296099508E-6	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999989814263958	WITHOUT_CLASSIFICATION	1.0185736042558148E-6	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999967473126119	WITHOUT_CLASSIFICATION	3.25268738802285E-6	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999885505538793	WITHOUT_CLASSIFICATION	1.1449446120819936E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999975134321933	WITHOUT_CLASSIFICATION	2.4865678065833566E-6	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999988897361725	WITHOUT_CLASSIFICATION	1.1102638275072577E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998348120122	WITHOUT_CLASSIFICATION	1.6518798789719214E-7	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9995476494407429	WITHOUT_CLASSIFICATION	4.5235055925713286E-4	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995626890237281	WITHOUT_CLASSIFICATION	4.3731097627181485E-4	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999782705932322	WITHOUT_CLASSIFICATION	2.172940676773917E-5	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999930675030794	WITHOUT_CLASSIFICATION	6.932496920678386E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999931915727339	WITHOUT_CLASSIFICATION	6.808427266064045E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999969481550777	WITHOUT_CLASSIFICATION	3.051844922374597E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999874387708616	WITHOUT_CLASSIFICATION	1.2561229138462543E-5	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999995040499567	WITHOUT_CLASSIFICATION	4.959500432815831E-7	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999993946257971	WITHOUT_CLASSIFICATION	6.053742028627394E-7	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9962656127263595	WITHOUT_CLASSIFICATION	0.0037343872736405495	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999420703199627	WITHOUT_CLASSIFICATION	5.792968003717065E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9612254145311334	WITHOUT_CLASSIFICATION	0.03877458546886666	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999974197425083	WITHOUT_CLASSIFICATION	2.5802574917297076E-6	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9989783443250511	WITHOUT_CLASSIFICATION	0.00102165567494898	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9997821407936692	WITHOUT_CLASSIFICATION	2.178592063308117E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.999334179770042	WITHOUT_CLASSIFICATION	6.658202299579171E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999992965648717	WITHOUT_CLASSIFICATION	7.0343512829737245E-6	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9996040332214152	WITHOUT_CLASSIFICATION	3.959667785848245E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9990137609767895	WITHOUT_CLASSIFICATION	9.86239023210456E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999936359877097	WITHOUT_CLASSIFICATION	6.364012290210598E-6	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999806484998273	WITHOUT_CLASSIFICATION	1.9351500172658325E-5	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.999987400396838	WITHOUT_CLASSIFICATION	1.2599603162026907E-5	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995029975861439	WITHOUT_CLASSIFICATION	4.97002413856045E-4	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9114722605405453	WITHOUT_CLASSIFICATION	0.08852773945945465	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999974369085816	WITHOUT_CLASSIFICATION	2.5630914183528545E-6	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999954578388706	WITHOUT_CLASSIFICATION	4.542161129415454E-6	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.999991101211932	WITHOUT_CLASSIFICATION	8.8987880679066E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999676977204967	WITHOUT_CLASSIFICATION	3.230227950337556E-5	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999649304702533	WITHOUT_CLASSIFICATION	3.506952974675821E-5	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999961336728831	WITHOUT_CLASSIFICATION	3.866327116813387E-6	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999802300298928	WITHOUT_CLASSIFICATION	1.976997010720203E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9986551676176163	WITHOUT_CLASSIFICATION	0.0013448323823837484	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997371663690428	WITHOUT_CLASSIFICATION	2.6283363095724475E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999857358420319	WITHOUT_CLASSIFICATION	1.4264157968188026E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999978445400659	WITHOUT_CLASSIFICATION	2.155459934134637E-6	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999404261263943	WITHOUT_CLASSIFICATION	5.957387360556632E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999384580662398	WITHOUT_CLASSIFICATION	6.154193376014119E-5	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999979555723748	WITHOUT_CLASSIFICATION	2.0444276251597373E-6	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999830119374694	WITHOUT_CLASSIFICATION	1.6988062530608933E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999384580662398	WITHOUT_CLASSIFICATION	6.154193376014119E-5	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999999785809567	WITHOUT_CLASSIFICATION	2.1419043337943787E-8	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999920449743	WITHOUT_CLASSIFICATION	7.955025676097742E-9	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999839782060759	WITHOUT_CLASSIFICATION	1.6021793924122216E-5	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9998727510326157	WITHOUT_CLASSIFICATION	1.272489673842587E-4	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999996363597456	WITHOUT_CLASSIFICATION	3.63640254400419E-7	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999997226358656	WITHOUT_CLASSIFICATION	2.7736413438351307E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.999875838529091	WITHOUT_CLASSIFICATION	1.2416147090911706E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999982435641822	WITHOUT_CLASSIFICATION	1.7564358177805206E-6	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999656604402525	WITHOUT_CLASSIFICATION	3.433955974755606E-5	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999952731373712	WITHOUT_CLASSIFICATION	4.726862628662583E-6	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999967112757906	WITHOUT_CLASSIFICATION	3.2887242094885195E-6	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999983798054026	WITHOUT_CLASSIFICATION	1.6201945973974544E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9939725665865332	WITHOUT_CLASSIFICATION	0.006027433413466803	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999841580933586	WITHOUT_CLASSIFICATION	1.5841906641354118E-5	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9998731787730605	WITHOUT_CLASSIFICATION	1.2682122693961507E-4	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9996710894739264	WITHOUT_CLASSIFICATION	3.289105260736579E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999716136970599	WITHOUT_CLASSIFICATION	2.838630294007432E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999716136970599	WITHOUT_CLASSIFICATION	2.838630294007432E-5	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999896868153919	WITHOUT_CLASSIFICATION	1.0313184607996112E-5	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.999986789920231	WITHOUT_CLASSIFICATION	1.3210079768956676E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999995809513325	WITHOUT_CLASSIFICATION	4.190486675752077E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998859566269651	WITHOUT_CLASSIFICATION	1.1404337303483497E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999667675864746	WITHOUT_CLASSIFICATION	3.323241352541443E-5	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9998332792107587	WITHOUT_CLASSIFICATION	1.6672078924132638E-4	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9999991687506952	WITHOUT_CLASSIFICATION	8.312493049718808E-7	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999949035878183	WITHOUT_CLASSIFICATION	5.0964121816712085E-6	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999939686968671	WITHOUT_CLASSIFICATION	6.031303132846923E-6	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999896465515058	WITHOUT_CLASSIFICATION	1.0353448494208795E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.6894655926113153	WITHOUT_CLASSIFICATION	0.3105344073886846	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999015382441767	WITHOUT_CLASSIFICATION	9.846175582322002E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997974153500412	WITHOUT_CLASSIFICATION	2.0258464995891195E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999774445437783	WITHOUT_CLASSIFICATION	2.2555456221663075E-5	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999982795829818	WITHOUT_CLASSIFICATION	1.7204170181953573E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9999575175013445	WITHOUT_CLASSIFICATION	4.248249865547478E-5	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996639886900464	WITHOUT_CLASSIFICATION	3.3601130995355744E-4	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9998337442845264	WITHOUT_CLASSIFICATION	1.662557154735396E-4	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999970538486568	WITHOUT_CLASSIFICATION	2.946151343133631E-6	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999965746887961	WITHOUT_CLASSIFICATION	3.425311203851129E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999996465480468	WITHOUT_CLASSIFICATION	3.5345195322149866E-7	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999841340767709	WITHOUT_CLASSIFICATION	1.586592322908309E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999631080251777	WITHOUT_CLASSIFICATION	3.689197482229649E-5	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999988624542233	WITHOUT_CLASSIFICATION	1.1375457767913532E-6	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999966776693252	WITHOUT_CLASSIFICATION	3.3223306748339417E-6	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999411293436359	WITHOUT_CLASSIFICATION	5.8870656364147546E-5	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999989534494097	WITHOUT_CLASSIFICATION	1.0465505902885674E-6	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998973377425088	WITHOUT_CLASSIFICATION	1.0266225749120811E-4	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999956039468907	WITHOUT_CLASSIFICATION	4.396053109310471E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999992533740107	WITHOUT_CLASSIFICATION	7.46625989202023E-7	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999296193930532	WITHOUT_CLASSIFICATION	7.03806069467326E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999948296648238	WITHOUT_CLASSIFICATION	5.170335176285469E-6	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9999112896921695	WITHOUT_CLASSIFICATION	8.871030783052119E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999872460526151	WITHOUT_CLASSIFICATION	1.2753947384908089E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999996457153647	WITHOUT_CLASSIFICATION	3.5428463530157206E-6	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999325534090069	WITHOUT_CLASSIFICATION	6.744659099313104E-5	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999683996227748	WITHOUT_CLASSIFICATION	3.1600377225177326E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999923394017837	WITHOUT_CLASSIFICATION	7.660598216224328E-6	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.99997692164341	WITHOUT_CLASSIFICATION	2.307835658997323E-5	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.999999929847683	WITHOUT_CLASSIFICATION	7.01523169184015E-8	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999983729666319	WITHOUT_CLASSIFICATION	1.6270333681085413E-6	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999974071167036	WITHOUT_CLASSIFICATION	2.592883296366616E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999744717027116	WITHOUT_CLASSIFICATION	2.552829728846432E-5	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999844882694015	WITHOUT_CLASSIFICATION	1.5511730598602315E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999406532294953	WITHOUT_CLASSIFICATION	5.934677050467906E-5	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999851068850534	WITHOUT_CLASSIFICATION	1.4893114946505393E-5	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999188203116541	WITHOUT_CLASSIFICATION	8.117968834587893E-5	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999612796544223	WITHOUT_CLASSIFICATION	3.872034557773058E-5	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995334786411	WITHOUT_CLASSIFICATION	4.665213588972928E-6	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9983752732321693	WITHOUT_CLASSIFICATION	0.0016247267678306824	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999848453026922	WITHOUT_CLASSIFICATION	1.5154697307776932E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999987899906104	WITHOUT_CLASSIFICATION	1.2100093895928296E-5	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9613088678745829	WITHOUT_CLASSIFICATION	0.03869113212541702	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999934709783058	WITHOUT_CLASSIFICATION	6.529021694249594E-6	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998781825778753	WITHOUT_CLASSIFICATION	1.2181742212465639E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999934709783058	WITHOUT_CLASSIFICATION	6.529021694249594E-6	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999985994647493	WITHOUT_CLASSIFICATION	1.4005352506930866E-6	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999989680568079	WITHOUT_CLASSIFICATION	1.0319431921261823E-6	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9997492267762379	WITHOUT_CLASSIFICATION	2.507732237620872E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998575621499395	WITHOUT_CLASSIFICATION	1.424378500605874E-4	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999492621021604	WITHOUT_CLASSIFICATION	5.073789783953229E-5	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.998462899750438	WITHOUT_CLASSIFICATION	0.0015371002495619698	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999888379217827	WITHOUT_CLASSIFICATION	1.1162078217310659E-5	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999958599512493	WITHOUT_CLASSIFICATION	4.140048750703363E-6	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999999272927181	WITHOUT_CLASSIFICATION	7.270728183765955E-8	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999720509564076	WITHOUT_CLASSIFICATION	2.7949043592419387E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999990933246393	WITHOUT_CLASSIFICATION	9.066753607624327E-7	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9918107016773058	WITHOUT_CLASSIFICATION	0.008189298322694275	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996402708933622	WITHOUT_CLASSIFICATION	3.5972910663784275E-4	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.8530479742637731	WITHOUT_CLASSIFICATION	0.14695202573622687	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.8715989455840978	WITHOUT_CLASSIFICATION	0.12840105441590224	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9938935338905491	WITHOUT_CLASSIFICATION	0.006106466109450861	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999995728449792	WITHOUT_CLASSIFICATION	4.2715502070472353E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999995728449792	WITHOUT_CLASSIFICATION	4.2715502070472353E-7	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999329597671811	WITHOUT_CLASSIFICATION	6.704023281889293E-5	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999929119253528	WITHOUT_CLASSIFICATION	7.088074647216687E-6	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999988963193367	WITHOUT_CLASSIFICATION	1.1036806633294198E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998958487956018	WITHOUT_CLASSIFICATION	1.0415120439820513E-4	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9997601603839497	WITHOUT_CLASSIFICATION	2.3983961605049498E-4	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9998537762072296	WITHOUT_CLASSIFICATION	1.4622379277035678E-4	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996363615827524	WITHOUT_CLASSIFICATION	3.636384172476472E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9997303597718127	WITHOUT_CLASSIFICATION	2.6964022818738617E-4	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.99999991856996	WITHOUT_CLASSIFICATION	8.14300400731186E-8	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9998990957085804	WITHOUT_CLASSIFICATION	1.0090429141958374E-4	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999965029456518	WITHOUT_CLASSIFICATION	3.49705434824585E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999953803646566	WITHOUT_CLASSIFICATION	4.619635343399832E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999688820578153	WITHOUT_CLASSIFICATION	3.111794218464087E-5	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999953523854862	WITHOUT_CLASSIFICATION	4.647614513834754E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9997451479929974	WITHOUT_CLASSIFICATION	2.5485200700257996E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999994937085696	WITHOUT_CLASSIFICATION	5.062914305099333E-7	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999982993928364	WITHOUT_CLASSIFICATION	1.7006071636581329E-6	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9990167668494307	WITHOUT_CLASSIFICATION	9.832331505692394E-4	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999928402324126	WITHOUT_CLASSIFICATION	7.159767587373379E-6	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997611039343	WITHOUT_CLASSIFICATION	2.3889606567248187E-7	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999999646568476	WITHOUT_CLASSIFICATION	3.5343152533828734E-8	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998645562888	WITHOUT_CLASSIFICATION	1.354437112871334E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999999941773169	WITHOUT_CLASSIFICATION	5.822683108475911E-8	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999996813935701	WITHOUT_CLASSIFICATION	3.1860642990043836E-7	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9990487390790875	WITHOUT_CLASSIFICATION	9.512609209123663E-4	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999998157376551	WITHOUT_CLASSIFICATION	1.8426234492852227E-7	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999797949539148	WITHOUT_CLASSIFICATION	2.020504608530137E-5	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9906468219083304	WITHOUT_CLASSIFICATION	0.009353178091669653	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999947756575587	WITHOUT_CLASSIFICATION	5.224342441368607E-6	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999991651235535	WITHOUT_CLASSIFICATION	8.348764465377111E-7	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9994448295196023	WITHOUT_CLASSIFICATION	5.551704803976888E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.999958562029895	WITHOUT_CLASSIFICATION	4.143797010501942E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999922205783047	WITHOUT_CLASSIFICATION	7.779421695326854E-6	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9997887525440724	WITHOUT_CLASSIFICATION	2.1124745592754444E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994220517540351	WITHOUT_CLASSIFICATION	5.779482459648445E-4	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999970011676477	WITHOUT_CLASSIFICATION	2.998832352326043E-6	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999987337950148	WITHOUT_CLASSIFICATION	1.2662049852831225E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9998265889902167	WITHOUT_CLASSIFICATION	1.734110097832326E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999753790435609	WITHOUT_CLASSIFICATION	2.46209564390657E-5	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999854156441107	WITHOUT_CLASSIFICATION	1.4584355889309386E-5	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999988894524371	WITHOUT_CLASSIFICATION	1.1105475628397255E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898689367583	WITHOUT_CLASSIFICATION	1.0131063241593264E-5	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9999973991645278	WITHOUT_CLASSIFICATION	2.600835472164902E-6	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9978929537060944	WITHOUT_CLASSIFICATION	0.0021070462939055176	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999999634173205	WITHOUT_CLASSIFICATION	3.658267949353875E-7	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9902035357115097	WITHOUT_CLASSIFICATION	0.009796464288490405	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6477658387149942	WITHOUT_CLASSIFICATION	0.3522341612850059	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998825389825	WITHOUT_CLASSIFICATION	1.1746101754979799E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999990954667639	WITHOUT_CLASSIFICATION	9.045332361464995E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9977306940012856	WITHOUT_CLASSIFICATION	0.0022693059987144827	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990495334704	WITHOUT_CLASSIFICATION	9.504665295271798E-7	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999995086820659	WITHOUT_CLASSIFICATION	4.913179341263446E-7	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999954529459122	WITHOUT_CLASSIFICATION	4.547054087864161E-6	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.998956566725018	WITHOUT_CLASSIFICATION	0.001043433274982015	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999947310024285	WITHOUT_CLASSIFICATION	5.268997571461197E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992094037692	WITHOUT_CLASSIFICATION	7.905962308569658E-7	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999992094037692	WITHOUT_CLASSIFICATION	7.905962308569658E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999963932827809	WITHOUT_CLASSIFICATION	3.606717219096843E-5	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999975848805618	WITHOUT_CLASSIFICATION	2.4151194381680636E-6	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999169336080275	WITHOUT_CLASSIFICATION	8.30663919725158E-5	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9995790099153257	WITHOUT_CLASSIFICATION	4.209900846743218E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999097700744105	WITHOUT_CLASSIFICATION	9.022992558948852E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999788206909088	WITHOUT_CLASSIFICATION	2.117930909122152E-5	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998362742536664	WITHOUT_CLASSIFICATION	1.63725746333539E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999995128897681	WITHOUT_CLASSIFICATION	4.871102318941502E-7	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.999999183319487	WITHOUT_CLASSIFICATION	8.166805130962838E-7	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999482941422594	WITHOUT_CLASSIFICATION	5.170585774056203E-5	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999974458622051	WITHOUT_CLASSIFICATION	2.5541377948292325E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9993478224085218	WITHOUT_CLASSIFICATION	6.521775914782293E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999984052413686	WITHOUT_CLASSIFICATION	1.5947586313493229E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999999662710107	WITHOUT_CLASSIFICATION	3.3728989309548153E-7	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9958915131053504	WITHOUT_CLASSIFICATION	0.004108486894649553	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9991872181045732	WITHOUT_CLASSIFICATION	8.127818954266761E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999986133892411	WITHOUT_CLASSIFICATION	1.3866107589011504E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999673094964587	WITHOUT_CLASSIFICATION	3.26905035413476E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9998277564432583	WITHOUT_CLASSIFICATION	1.7224355674168328E-4	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998578537064898	WITHOUT_CLASSIFICATION	1.4214629351025996E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999986491832219	WITHOUT_CLASSIFICATION	1.35081677806121E-6	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999588255190388	WITHOUT_CLASSIFICATION	4.117448096120789E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999666203485305	WITHOUT_CLASSIFICATION	3.337965146952243E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9987912077792623	WITHOUT_CLASSIFICATION	0.0012087922207376773	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9965113203423113	WITHOUT_CLASSIFICATION	0.003488679657688717	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.6260036506742795	DESIGN	0.3739963493257205	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9991801082647177	WITHOUT_CLASSIFICATION	8.198917352822179E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999687750384186	WITHOUT_CLASSIFICATION	3.122496158125242E-5	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9998583265773496	WITHOUT_CLASSIFICATION	1.4167342265031696E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999666203485305	WITHOUT_CLASSIFICATION	3.337965146952243E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9974549167775487	WITHOUT_CLASSIFICATION	0.0025450832224511964	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999999841579029	WITHOUT_CLASSIFICATION	1.5842097057299213E-8	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9997849684800555	WITHOUT_CLASSIFICATION	2.1503151994448256E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9998699510813612	WITHOUT_CLASSIFICATION	1.3004891863882198E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.999993493100238	WITHOUT_CLASSIFICATION	6.506899762020809E-6	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.7777880859514051	DESIGN	0.22221191404859497	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.99999943187305	WITHOUT_CLASSIFICATION	5.681269500557813E-7	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999884381652901	WITHOUT_CLASSIFICATION	1.1561834709895982E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999965840568636	WITHOUT_CLASSIFICATION	3.4159431363931905E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9998699510813612	WITHOUT_CLASSIFICATION	1.3004891863882198E-4	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9998899290318457	WITHOUT_CLASSIFICATION	1.1007096815428204E-4	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.99998207197181	WITHOUT_CLASSIFICATION	1.7928028190026968E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9895939719576191	WITHOUT_CLASSIFICATION	0.01040602804238083	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999770846033231	WITHOUT_CLASSIFICATION	2.2915396676925956E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999813121481905	WITHOUT_CLASSIFICATION	1.8687851809451068E-5	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999965029456518	WITHOUT_CLASSIFICATION	3.49705434824585E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999383369861201	WITHOUT_CLASSIFICATION	6.166301387978652E-5	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9998659897002451	WITHOUT_CLASSIFICATION	1.3401029975492005E-4	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9996093487182247	WITHOUT_CLASSIFICATION	3.9065128177517204E-4	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9984222749469468	WITHOUT_CLASSIFICATION	0.0015777250530531772	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999829740596263	WITHOUT_CLASSIFICATION	1.702594037367332E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999810742691805	WITHOUT_CLASSIFICATION	1.892573081953129E-5	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999989968876124	WITHOUT_CLASSIFICATION	1.0031123875967217E-6	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999931705843795	WITHOUT_CLASSIFICATION	6.829415620439577E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998372747231	WITHOUT_CLASSIFICATION	1.6272527683403638E-7	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999232481158334	WITHOUT_CLASSIFICATION	7.675188416658196E-5	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999820441033727	WITHOUT_CLASSIFICATION	1.7955896627410522E-5	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999252854105112	WITHOUT_CLASSIFICATION	7.471458948878423E-5	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999994480510114	WITHOUT_CLASSIFICATION	5.519489887398926E-7	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999970387023854	WITHOUT_CLASSIFICATION	2.9612976144949103E-6	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.999999881919489	WITHOUT_CLASSIFICATION	1.1808051104644615E-7	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999823464280417	WITHOUT_CLASSIFICATION	1.7653571958294587E-4	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999043311184339	WITHOUT_CLASSIFICATION	9.566888156610414E-5	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999991750439781	WITHOUT_CLASSIFICATION	8.249560218962894E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999575472817412	WITHOUT_CLASSIFICATION	4.2452718258731286E-5	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9998533840738669	WITHOUT_CLASSIFICATION	1.4661592613307713E-4	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999698999699675	WITHOUT_CLASSIFICATION	3.0100030032511444E-5	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999986527677796	WITHOUT_CLASSIFICATION	1.3472322203925479E-6	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999876225596847	WITHOUT_CLASSIFICATION	1.2377440315462526E-5	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9997597880847453	WITHOUT_CLASSIFICATION	2.4021191525464477E-4	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999850598612582	WITHOUT_CLASSIFICATION	1.4940138741800003E-5	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9999887474415787	WITHOUT_CLASSIFICATION	1.1252558421257198E-5	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999995101186976	WITHOUT_CLASSIFICATION	4.898813024220246E-7	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646940474479	WITHOUT_CLASSIFICATION	3.530595255212766E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984795824469397	WITHOUT_CLASSIFICATION	0.0015204175530602667	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9990383790780372	WITHOUT_CLASSIFICATION	9.616209219628945E-4	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999999480677294	WITHOUT_CLASSIFICATION	5.1932270747309275E-8	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999046656957304	WITHOUT_CLASSIFICATION	9.533430426956308E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999390437607	WITHOUT_CLASSIFICATION	6.095623929839353E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999390437607	WITHOUT_CLASSIFICATION	6.095623929839353E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999935765271988	WITHOUT_CLASSIFICATION	6.423472801195124E-5	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999710521208042	WITHOUT_CLASSIFICATION	2.8947879195817992E-5	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999947255750619	WITHOUT_CLASSIFICATION	5.2744249381896E-6	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999810654108068	WITHOUT_CLASSIFICATION	1.8934589193293084E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999601162347	WITHOUT_CLASSIFICATION	3.988376529583208E-8	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9998714714017717	WITHOUT_CLASSIFICATION	1.28528598228373E-4	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999924766450922	WITHOUT_CLASSIFICATION	7.523354907832458E-6	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9990559808720252	WITHOUT_CLASSIFICATION	9.440191279749198E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999929522734244	WITHOUT_CLASSIFICATION	7.047726575617773E-6	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9998697705415069	WITHOUT_CLASSIFICATION	1.3022945849316077E-4	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9617161553481757	WITHOUT_CLASSIFICATION	0.038283844651824384	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999987887844594	WITHOUT_CLASSIFICATION	1.2112155405888796E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999015749370308	WITHOUT_CLASSIFICATION	9.842506296929942E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999390437607	WITHOUT_CLASSIFICATION	6.095623929839353E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999910510613617	WITHOUT_CLASSIFICATION	8.948938638298032E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999817158783434	WITHOUT_CLASSIFICATION	1.828412165659763E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9985798229162217	WITHOUT_CLASSIFICATION	0.0014201770837783889	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999229715654048	WITHOUT_CLASSIFICATION	7.702843459523257E-5	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999997173819888	WITHOUT_CLASSIFICATION	2.8261801111166945E-7	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999934999297298	WITHOUT_CLASSIFICATION	6.500070270202337E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9977838581016569	WITHOUT_CLASSIFICATION	0.0022161418983430523	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999997829148319	WITHOUT_CLASSIFICATION	2.170851680016215E-7	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999992198885225	WITHOUT_CLASSIFICATION	7.80111477503176E-6	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.984328835747366	WITHOUT_CLASSIFICATION	0.015671164252634078	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999029647342348	WITHOUT_CLASSIFICATION	9.703526576523811E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999646940474479	WITHOUT_CLASSIFICATION	3.530595255212766E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999390437607	WITHOUT_CLASSIFICATION	6.095623929839353E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999572103346214	WITHOUT_CLASSIFICATION	4.2789665378601277E-5	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999941319142294	WITHOUT_CLASSIFICATION	5.868085770655142E-6	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999995856649958	WITHOUT_CLASSIFICATION	4.14335004108499E-7	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999690987989491	WITHOUT_CLASSIFICATION	3.090120105077869E-5	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9999463666558512	WITHOUT_CLASSIFICATION	5.363334414871569E-5	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999994414543579	WITHOUT_CLASSIFICATION	5.585456421413074E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9890360471701318	WITHOUT_CLASSIFICATION	0.010963952829868156	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999784770506	WITHOUT_CLASSIFICATION	2.1522949451586663E-8	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999993822680266	WITHOUT_CLASSIFICATION	6.177319732999161E-7	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9995704258147516	WITHOUT_CLASSIFICATION	4.295741852484233E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999984523633263	WITHOUT_CLASSIFICATION	1.5476366736940041E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998911465885734	WITHOUT_CLASSIFICATION	1.0885341142667557E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999999584759035	WITHOUT_CLASSIFICATION	4.15240964771631E-8	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999932550720014	WITHOUT_CLASSIFICATION	6.7449279985684215E-6	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999985994647493	WITHOUT_CLASSIFICATION	1.4005352506930866E-6	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999780596212033	WITHOUT_CLASSIFICATION	2.1940378796675504E-5	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999888002330137	WITHOUT_CLASSIFICATION	1.1199766986274684E-5	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999926040837785	WITHOUT_CLASSIFICATION	7.395916221455751E-6	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999979174495305	WITHOUT_CLASSIFICATION	2.0825504695731478E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999873582054122	WITHOUT_CLASSIFICATION	1.2641794587890181E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9982290430531072	WITHOUT_CLASSIFICATION	0.0017709569468927864	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9982290430531072	WITHOUT_CLASSIFICATION	0.0017709569468927864	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9943658026482669	WITHOUT_CLASSIFICATION	0.005634197351733037	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9986130838715093	WITHOUT_CLASSIFICATION	0.0013869161284907094	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999744301926341	WITHOUT_CLASSIFICATION	2.556980736590215E-4	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9980014237567101	WITHOUT_CLASSIFICATION	0.0019985762432899452	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999521557550921	WITHOUT_CLASSIFICATION	4.7844244907966396E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999966444179755	WITHOUT_CLASSIFICATION	3.355582024418536E-6	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999925955573787	WITHOUT_CLASSIFICATION	7.4044426212184525E-6	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999991283480418	WITHOUT_CLASSIFICATION	8.716519581959494E-6	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999991283480418	WITHOUT_CLASSIFICATION	8.716519581959494E-6	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9649228891620901	WITHOUT_CLASSIFICATION	0.035077110837909896	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.99999897323142	WITHOUT_CLASSIFICATION	1.0267685800709998E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999430776400833	WITHOUT_CLASSIFICATION	5.692235991668837E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999924708500496	WITHOUT_CLASSIFICATION	7.5291499504395175E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999924708500496	WITHOUT_CLASSIFICATION	7.5291499504395175E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999924708500496	WITHOUT_CLASSIFICATION	7.5291499504395175E-6	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999500433261491	WITHOUT_CLASSIFICATION	4.9956673850954176E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9883670618957613	WITHOUT_CLASSIFICATION	0.011632938104238663	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999986015740854	WITHOUT_CLASSIFICATION	1.3984259146099467E-5	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999753653705572	WITHOUT_CLASSIFICATION	2.463462944277194E-5	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999853722395452	WITHOUT_CLASSIFICATION	1.46277604548082E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999390437607	WITHOUT_CLASSIFICATION	6.095623929839353E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999390437607	WITHOUT_CLASSIFICATION	6.095623929839353E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.997393402042409	WITHOUT_CLASSIFICATION	0.0026065979575910832	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999927360711605	WITHOUT_CLASSIFICATION	7.263928839471588E-6	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9683399791631396	WITHOUT_CLASSIFICATION	0.03166002083686035	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999863898759811	WITHOUT_CLASSIFICATION	1.3610124018885117E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999989950475078	WITHOUT_CLASSIFICATION	1.0049524922321664E-6	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999980801022524	WITHOUT_CLASSIFICATION	1.919897747478358E-6	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998852172223887	WITHOUT_CLASSIFICATION	1.1478277761130456E-4	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999996360098651	WITHOUT_CLASSIFICATION	3.639901348835834E-7	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999973966831623	WITHOUT_CLASSIFICATION	2.603316837705072E-6	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999216168981	WITHOUT_CLASSIFICATION	7.838310187083881E-8	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999999468324161	WITHOUT_CLASSIFICATION	5.316758390185606E-8	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999997044144805	WITHOUT_CLASSIFICATION	2.955855194744002E-7	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999997044144805	WITHOUT_CLASSIFICATION	2.955855194744002E-7	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999995318935787	WITHOUT_CLASSIFICATION	4.681064213763306E-7	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999995318935787	WITHOUT_CLASSIFICATION	4.681064213763306E-7	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999996810378572	WITHOUT_CLASSIFICATION	3.1896214280956294E-7	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999961062080301	WITHOUT_CLASSIFICATION	3.89379196984749E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999961062080301	WITHOUT_CLASSIFICATION	3.89379196984749E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999964161452431	WITHOUT_CLASSIFICATION	3.5838547567797924E-6	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967595311712	WITHOUT_CLASSIFICATION	3.240468828750214E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999967128528596	WITHOUT_CLASSIFICATION	3.2871471404679744E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9982290430531072	WITHOUT_CLASSIFICATION	0.0017709569468927864	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999995383199519	WITHOUT_CLASSIFICATION	4.616800480505324E-7	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967595311712	WITHOUT_CLASSIFICATION	3.240468828750214E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9993825686096806	WITHOUT_CLASSIFICATION	6.174313903193821E-4	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999996400946284	WITHOUT_CLASSIFICATION	3.599053716406068E-7	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999998215705407	WITHOUT_CLASSIFICATION	1.7842945937968637E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999994852831496	WITHOUT_CLASSIFICATION	5.147168503352623E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999664304948	WITHOUT_CLASSIFICATION	3.356950522338797E-8	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999996304859787	WITHOUT_CLASSIFICATION	3.695140213335908E-7	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9987368295639216	WITHOUT_CLASSIFICATION	0.0012631704360783426	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9997264240849073	WITHOUT_CLASSIFICATION	2.735759150926556E-4	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999747498355954	WITHOUT_CLASSIFICATION	2.525016440447299E-5	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9968152890013573	WITHOUT_CLASSIFICATION	0.0031847109986427244	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999978927301819	WITHOUT_CLASSIFICATION	2.107269818111007E-6	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999990672408727	WITHOUT_CLASSIFICATION	9.32759127279876E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999999290191876	WITHOUT_CLASSIFICATION	7.098081244416548E-8	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999983319727113	WITHOUT_CLASSIFICATION	1.6680272887153365E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9941092751997881	WITHOUT_CLASSIFICATION	0.005890724800211835	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999948746754688	WITHOUT_CLASSIFICATION	5.125324531288029E-6	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998865841072	WITHOUT_CLASSIFICATION	1.134158926748005E-7	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999945413294577	WITHOUT_CLASSIFICATION	5.45867054230122E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.999945413294577	WITHOUT_CLASSIFICATION	5.45867054230122E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999996949694873	WITHOUT_CLASSIFICATION	3.0503051275684303E-7	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999978265713418	WITHOUT_CLASSIFICATION	2.1734286582300946E-6	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999998945943818	WITHOUT_CLASSIFICATION	1.0540561820454375E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999999924539551	WITHOUT_CLASSIFICATION	7.546044888909762E-8	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999993443612295	WITHOUT_CLASSIFICATION	6.556387704650657E-7	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999286505639622	WITHOUT_CLASSIFICATION	7.134943603783794E-5	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999629898786221	WITHOUT_CLASSIFICATION	3.701012137797178E-5	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999460713250633	WITHOUT_CLASSIFICATION	5.39286749366237E-5	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999858186730254	WITHOUT_CLASSIFICATION	1.4181326974614576E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999854547976719	WITHOUT_CLASSIFICATION	1.4545202328058655E-5	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998486729875121	WITHOUT_CLASSIFICATION	1.5132701248780157E-4	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998911465885734	WITHOUT_CLASSIFICATION	1.0885341142667557E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999990586401035	WITHOUT_CLASSIFICATION	9.41359896389514E-7	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999990283125918	WITHOUT_CLASSIFICATION	9.716874081281834E-7	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999999838488153	WITHOUT_CLASSIFICATION	1.6151184690130863E-8	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999999025655323	WITHOUT_CLASSIFICATION	9.743446771554802E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999675269564333	WITHOUT_CLASSIFICATION	3.247304356671879E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999675269564333	WITHOUT_CLASSIFICATION	3.247304356671879E-5	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999969873123632	WITHOUT_CLASSIFICATION	3.0126876367538174E-6	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9932652355691258	WITHOUT_CLASSIFICATION	0.006734764430874158	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999965645284663	WITHOUT_CLASSIFICATION	3.4354715336538077E-6	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999859256092732	WITHOUT_CLASSIFICATION	1.4074390726635169E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.99999964963482	WITHOUT_CLASSIFICATION	3.503651800266553E-7	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.999994941437757	WITHOUT_CLASSIFICATION	5.05856224296812E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9936442148719125	WITHOUT_CLASSIFICATION	0.006355785128087658	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999983194465777	WITHOUT_CLASSIFICATION	1.6805534222990944E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999954755728008	WITHOUT_CLASSIFICATION	4.524427199242561E-6	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.99999703019866	WITHOUT_CLASSIFICATION	2.969801339965061E-6	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9851023915251897	WITHOUT_CLASSIFICATION	0.014897608474810182	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999983194465777	WITHOUT_CLASSIFICATION	1.6805534222990944E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9998872918852326	WITHOUT_CLASSIFICATION	1.1270811476740723E-4	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999529138691969	WITHOUT_CLASSIFICATION	4.708613080307683E-5	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9957238641154418	WITHOUT_CLASSIFICATION	0.004276135884558201	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999999192464359	WITHOUT_CLASSIFICATION	8.0753564007913E-8	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999804084762921	WITHOUT_CLASSIFICATION	1.959152370786702E-5	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999753661672189	WITHOUT_CLASSIFICATION	2.4633832781047223E-5	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999967810641551	WITHOUT_CLASSIFICATION	3.2189358448400833E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999969199832461	WITHOUT_CLASSIFICATION	3.080016753837533E-6	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999951226729723	WITHOUT_CLASSIFICATION	4.8773270276706356E-6	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994691127910743	WITHOUT_CLASSIFICATION	5.308872089256308E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999870123617666	WITHOUT_CLASSIFICATION	1.2987638233408431E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999967986365321	WITHOUT_CLASSIFICATION	3.2013634679434847E-6	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999820413898499	WITHOUT_CLASSIFICATION	1.795861015007609E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9998918482106474	WITHOUT_CLASSIFICATION	1.0815178935270805E-4	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999992943407044	WITHOUT_CLASSIFICATION	7.056592955237678E-7	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9998942724341779	WITHOUT_CLASSIFICATION	1.0572756582208642E-4	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.999998886189442	WITHOUT_CLASSIFICATION	1.113810558047195E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9999906738615099	WITHOUT_CLASSIFICATION	9.326138490038675E-6	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9999935895447951	WITHOUT_CLASSIFICATION	6.410455204978342E-6	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999973846777508	WITHOUT_CLASSIFICATION	2.6153222493316396E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999970212635959	WITHOUT_CLASSIFICATION	2.9787364040912884E-6	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6546066294937665	WITHOUT_CLASSIFICATION	0.34539337050623353	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9943928176228427	WITHOUT_CLASSIFICATION	0.005607182377157269	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999964550887213	WITHOUT_CLASSIFICATION	3.5449112788756074E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999426783988737	WITHOUT_CLASSIFICATION	5.732160112627562E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999961327328939	WITHOUT_CLASSIFICATION	3.867267106056786E-6	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999962362238101	WITHOUT_CLASSIFICATION	3.763776190030697E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999978916870849	WITHOUT_CLASSIFICATION	2.108312915176539E-6	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999986689070869	WITHOUT_CLASSIFICATION	1.3310929131689918E-6	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998582440665426	WITHOUT_CLASSIFICATION	1.4175593345741995E-4	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999933352933499	WITHOUT_CLASSIFICATION	6.664706650123582E-6	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999951310752121	WITHOUT_CLASSIFICATION	4.868924787851511E-6	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9993594623252295	WITHOUT_CLASSIFICATION	6.405376747704316E-4	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999759611855606	WITHOUT_CLASSIFICATION	2.4038814439306658E-5	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9991931524007523	WITHOUT_CLASSIFICATION	8.068475992476735E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999878311585869	WITHOUT_CLASSIFICATION	1.2168841413054585E-5	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999655353955305	WITHOUT_CLASSIFICATION	3.446460446958092E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999980293350165	WITHOUT_CLASSIFICATION	1.9706649836209965E-6	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999256394378	WITHOUT_CLASSIFICATION	7.436056216042911E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999946375396966	WITHOUT_CLASSIFICATION	5.362460303413955E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999596137015574	WITHOUT_CLASSIFICATION	4.038629844249945E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999959026212095	WITHOUT_CLASSIFICATION	4.0973787904959965E-6	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999996769147973	WITHOUT_CLASSIFICATION	3.2308520269794908E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.999997029581254	WITHOUT_CLASSIFICATION	2.970418746001917E-6	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999662755222354	WITHOUT_CLASSIFICATION	3.3724477764682055E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999837138898247	WITHOUT_CLASSIFICATION	1.628611017537505E-5	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9996661614075334	WITHOUT_CLASSIFICATION	3.33838592466617E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999250643373778	WITHOUT_CLASSIFICATION	7.493566262227129E-5	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999980032041987	WITHOUT_CLASSIFICATION	1.9967958012774266E-6	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999998079094659	WITHOUT_CLASSIFICATION	1.9209053409852984E-6	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999196257348753	WITHOUT_CLASSIFICATION	8.037426512472499E-5	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9993650494263323	WITHOUT_CLASSIFICATION	6.349505736677594E-4	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999195441192	WITHOUT_CLASSIFICATION	8.045588080062654E-8	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999986042274296	WITHOUT_CLASSIFICATION	1.3957725704002422E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999970274521947	WITHOUT_CLASSIFICATION	2.9725478053430954E-6	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999991711886453	WITHOUT_CLASSIFICATION	8.288113546520639E-7	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9899503211602602	WITHOUT_CLASSIFICATION	0.010049678839739862	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999836127736993	WITHOUT_CLASSIFICATION	1.6387226300644616E-5	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999991438471013	WITHOUT_CLASSIFICATION	8.561528987419027E-7	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999989721574361	WITHOUT_CLASSIFICATION	1.0278425639022928E-5	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999830217031055	WITHOUT_CLASSIFICATION	1.6978296894559948E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999992162517856	WITHOUT_CLASSIFICATION	7.837482143424521E-7	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999953171212891	WITHOUT_CLASSIFICATION	4.682878710923686E-6	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9879416092367655	WITHOUT_CLASSIFICATION	0.012058390763234466	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9984013598378322	WITHOUT_CLASSIFICATION	0.001598640162167714	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999115013885335	WITHOUT_CLASSIFICATION	8.84986114665437E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999196257348753	WITHOUT_CLASSIFICATION	8.037426512472499E-5	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999989922108871	WITHOUT_CLASSIFICATION	1.007789112931433E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999727091236119	WITHOUT_CLASSIFICATION	2.7290876388152578E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999962540021592	WITHOUT_CLASSIFICATION	3.7459978407960496E-6	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999997107710493	WITHOUT_CLASSIFICATION	2.892289506690176E-7	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999994388344275	WITHOUT_CLASSIFICATION	5.611655725429787E-7	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999756166794425	WITHOUT_CLASSIFICATION	2.438332055753032E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999954755728008	WITHOUT_CLASSIFICATION	4.524427199242561E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999638576321298	WITHOUT_CLASSIFICATION	3.614236787012634E-5	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9991931524007523	WITHOUT_CLASSIFICATION	8.068475992476735E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9999936783186736	WITHOUT_CLASSIFICATION	6.321681326357816E-6	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999837219755433	WITHOUT_CLASSIFICATION	1.6278024456741125E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999858326177853	WITHOUT_CLASSIFICATION	1.4167382214765031E-5	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999812780322983	WITHOUT_CLASSIFICATION	1.8721967701602202E-5	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999570541278284	WITHOUT_CLASSIFICATION	4.294587217166306E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9985566677772579	WITHOUT_CLASSIFICATION	0.0014433322227420608	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999760748437271	WITHOUT_CLASSIFICATION	2.3925156272868658E-5	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999998669189382	WITHOUT_CLASSIFICATION	1.3308106179149232E-7	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999048978820069	WITHOUT_CLASSIFICATION	9.510211799317374E-5	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999983063223202	WITHOUT_CLASSIFICATION	1.6936776798065537E-5	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9989683888687017	WITHOUT_CLASSIFICATION	0.0010316111312983814	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999023258105071	WITHOUT_CLASSIFICATION	9.767418949290099E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999277349629377	WITHOUT_CLASSIFICATION	7.226503706226984E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999277349629377	WITHOUT_CLASSIFICATION	7.226503706226984E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999837553185087	WITHOUT_CLASSIFICATION	1.6244681491283065E-5	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.997786742511087	WITHOUT_CLASSIFICATION	0.0022132574889129853	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999995139002471	WITHOUT_CLASSIFICATION	4.860997529939861E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999960185518112	WITHOUT_CLASSIFICATION	3.9814481887752245E-6	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999994986231042	WITHOUT_CLASSIFICATION	5.013768958065895E-7	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999996984969933	WITHOUT_CLASSIFICATION	3.0150300672410824E-7	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999783216180191	WITHOUT_CLASSIFICATION	2.167838198085147E-5	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999550393871647	WITHOUT_CLASSIFICATION	4.4960612835294797E-4	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999995189053366	WITHOUT_CLASSIFICATION	4.810946634770421E-7	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9998238567167455	WITHOUT_CLASSIFICATION	1.761432832544968E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999998734441656	WITHOUT_CLASSIFICATION	1.265558344915451E-7	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.999989605606391	WITHOUT_CLASSIFICATION	1.0394393608946674E-5	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999997788306357	WITHOUT_CLASSIFICATION	2.2116936429740883E-6	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990143647826	WITHOUT_CLASSIFICATION	9.856352174259257E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.998742700516495	WITHOUT_CLASSIFICATION	0.0012572994835050345	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999904765272133	WITHOUT_CLASSIFICATION	9.523472786719571E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9961463513199981	WITHOUT_CLASSIFICATION	0.003853648680001822	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999635187633	WITHOUT_CLASSIFICATION	3.648123665090308E-8	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999710839499338	WITHOUT_CLASSIFICATION	2.891605006618083E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9997330851506727	WITHOUT_CLASSIFICATION	2.669148493272904E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9998765347282562	WITHOUT_CLASSIFICATION	1.234652717436979E-4	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999971205839443	WITHOUT_CLASSIFICATION	2.8794160557676365E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9997137150034515	WITHOUT_CLASSIFICATION	2.8628499654843973E-4	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9992080359549992	WITHOUT_CLASSIFICATION	7.919640450008441E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999997831456573	WITHOUT_CLASSIFICATION	2.1685434276754964E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995798762223314	WITHOUT_CLASSIFICATION	4.201237776686029E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9997187656212938	WITHOUT_CLASSIFICATION	2.8123437870619753E-4	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9991236718580957	WITHOUT_CLASSIFICATION	8.763281419043182E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999581468272646	WITHOUT_CLASSIFICATION	4.185317273535708E-5	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997916493873448	WITHOUT_CLASSIFICATION	2.083506126553374E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9967998224639499	WITHOUT_CLASSIFICATION	0.0032001775360501372	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9996521410841329	WITHOUT_CLASSIFICATION	3.4785891586714015E-4	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999000155789041	WITHOUT_CLASSIFICATION	9.99844210958912E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999962374514975	WITHOUT_CLASSIFICATION	3.7625485026727957E-6	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999986665795216	WITHOUT_CLASSIFICATION	1.3334204783067451E-6	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.99999970300623	WITHOUT_CLASSIFICATION	2.969937700386741E-7	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999897138408846	WITHOUT_CLASSIFICATION	1.0286159115380515E-5	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999924336894885	WITHOUT_CLASSIFICATION	7.56631051149523E-6	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999779854521	WITHOUT_CLASSIFICATION	2.2014547806259375E-8	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998936435911	WITHOUT_CLASSIFICATION	1.0635640882969994E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995667947263128	WITHOUT_CLASSIFICATION	4.332052736871456E-4	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999950693012536	WITHOUT_CLASSIFICATION	4.930698746453998E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999972827414056	WITHOUT_CLASSIFICATION	2.717258594371166E-6	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999909429884646	WITHOUT_CLASSIFICATION	9.05701153542344E-6	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999476178922	WITHOUT_CLASSIFICATION	5.238210786001733E-8	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.995777701091958	WITHOUT_CLASSIFICATION	0.004222298908042118	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9986115240039675	WITHOUT_CLASSIFICATION	0.0013884759960325036	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996641331921	WITHOUT_CLASSIFICATION	3.358668079151849E-7	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999706738256835	WITHOUT_CLASSIFICATION	2.93261743165289E-5	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999671387479641	WITHOUT_CLASSIFICATION	3.28612520359759E-5	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997345732795194	WITHOUT_CLASSIFICATION	2.654267204805747E-4	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999928537074054	WITHOUT_CLASSIFICATION	7.146292594631622E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999963756403254	WITHOUT_CLASSIFICATION	3.624359674597355E-5	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999992007681999	WITHOUT_CLASSIFICATION	7.992318001265071E-7	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999997746580863	WITHOUT_CLASSIFICATION	2.2534191366507167E-7	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9804895904071055	WITHOUT_CLASSIFICATION	0.019510409592894507	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999950470808374	WITHOUT_CLASSIFICATION	4.952919162588006E-6	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999998765304706	WITHOUT_CLASSIFICATION	1.2346952944040966E-7	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999993682715885	WITHOUT_CLASSIFICATION	6.317284114804145E-7	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999975456685375	WITHOUT_CLASSIFICATION	2.4543314625503083E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999981641308248	WITHOUT_CLASSIFICATION	1.8358691752539606E-6	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999957750747244	WITHOUT_CLASSIFICATION	4.224925275643265E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9997241526475337	WITHOUT_CLASSIFICATION	2.758473524663556E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999997303103971	WITHOUT_CLASSIFICATION	2.696896028051119E-7	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999983310994551	WITHOUT_CLASSIFICATION	1.6689005448640565E-6	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.999996513069675	WITHOUT_CLASSIFICATION	3.486930324955916E-6	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999208062886	WITHOUT_CLASSIFICATION	7.919371138035173E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999993070516612	WITHOUT_CLASSIFICATION	6.929483389145156E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999998219950449	WITHOUT_CLASSIFICATION	1.780049550883205E-6	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999999635730582	WITHOUT_CLASSIFICATION	3.6426941788030966E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999998219950449	WITHOUT_CLASSIFICATION	1.780049550883205E-6	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9998429097747563	WITHOUT_CLASSIFICATION	1.5709022524363887E-4	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999759789221383	WITHOUT_CLASSIFICATION	2.402107786163057E-5	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999990766053429	WITHOUT_CLASSIFICATION	9.233946570238987E-7	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999693487703412	WITHOUT_CLASSIFICATION	3.065122965886217E-5	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999948898344891	WITHOUT_CLASSIFICATION	5.1101655109055224E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999985900753717	WITHOUT_CLASSIFICATION	1.4099246282742784E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999983415439705	WITHOUT_CLASSIFICATION	1.6584560295582728E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999792222877481	WITHOUT_CLASSIFICATION	2.0777712251887173E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999551771245776	WITHOUT_CLASSIFICATION	4.482287542251189E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999935602032689	WITHOUT_CLASSIFICATION	6.439796731106058E-6	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999561288484605	WITHOUT_CLASSIFICATION	4.387115153945993E-5	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999962390916745	WITHOUT_CLASSIFICATION	3.760908325584921E-6	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.999997864121888	WITHOUT_CLASSIFICATION	2.1358781121314705E-6	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.6487405710342323	DESIGN	0.3512594289657676	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999992443352717	WITHOUT_CLASSIFICATION	7.55664728402943E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999982531505575	WITHOUT_CLASSIFICATION	1.746849442486002E-6	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999680330307703	WITHOUT_CLASSIFICATION	3.19669692297343E-5	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999997894469904	WITHOUT_CLASSIFICATION	2.10553009602454E-7	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999926163965726	WITHOUT_CLASSIFICATION	7.383603427521168E-6	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9968577627561002	WITHOUT_CLASSIFICATION	0.003142237243899806	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999983452611018	WITHOUT_CLASSIFICATION	1.654738898227125E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999871222248268	WITHOUT_CLASSIFICATION	1.287777517333384E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9991467735676843	WITHOUT_CLASSIFICATION	8.532264323156942E-4	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9927973582696618	WITHOUT_CLASSIFICATION	0.0072026417303382925	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999925910436774	WITHOUT_CLASSIFICATION	7.408956322567443E-6	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998626058537442	WITHOUT_CLASSIFICATION	1.3739414625579254E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9997679404725103	WITHOUT_CLASSIFICATION	2.3205952748973495E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999832316770141	WITHOUT_CLASSIFICATION	1.676832298587421E-5	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999515972419	WITHOUT_CLASSIFICATION	4.840275809435792E-7	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.999995994726821	WITHOUT_CLASSIFICATION	4.0052731789827136E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999653556530076	WITHOUT_CLASSIFICATION	3.4644346992472925E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9959003389070572	WITHOUT_CLASSIFICATION	0.004099661092942802	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9991597196085021	WITHOUT_CLASSIFICATION	8.402803914977773E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999994770475704	WITHOUT_CLASSIFICATION	5.229524295543166E-7	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999960333341893	WITHOUT_CLASSIFICATION	3.966665810667578E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999636636197164	WITHOUT_CLASSIFICATION	3.63363802835086E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999990811672834	WITHOUT_CLASSIFICATION	9.188327164875514E-7	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996097128032	WITHOUT_CLASSIFICATION	3.9028719674069916E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9994868798161725	WITHOUT_CLASSIFICATION	5.131201838274971E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999925041071775	WITHOUT_CLASSIFICATION	7.495892822416375E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999995126181288	WITHOUT_CLASSIFICATION	4.873818712059928E-7	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999942828038253	WITHOUT_CLASSIFICATION	5.717196174716292E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.999862732282539	WITHOUT_CLASSIFICATION	1.3726771746100857E-4	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998626058537442	WITHOUT_CLASSIFICATION	1.3739414625579254E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9998925108214972	WITHOUT_CLASSIFICATION	1.0748917850278495E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999998917381314	WITHOUT_CLASSIFICATION	1.0826186866788719E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9962886181531094	WITHOUT_CLASSIFICATION	0.003711381846890449	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999696373572073	WITHOUT_CLASSIFICATION	3.0362642792534984E-5	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999953698889986	WITHOUT_CLASSIFICATION	4.630111001334534E-6	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999994504168457	WITHOUT_CLASSIFICATION	5.495831543783336E-7	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.999994144359783	WITHOUT_CLASSIFICATION	5.855640217126393E-6	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.5320080797174516	DESIGN	0.46799192028254855	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999810477956916	WITHOUT_CLASSIFICATION	1.895220430844178E-5	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9948765918940429	WITHOUT_CLASSIFICATION	0.0051234081059571765	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999337243943408	WITHOUT_CLASSIFICATION	6.627560565912245E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9953900780021363	WITHOUT_CLASSIFICATION	0.004609921997863695	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999706087460281	WITHOUT_CLASSIFICATION	2.939125397194888E-5	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999949109184061	WITHOUT_CLASSIFICATION	5.089081593861029E-6	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997807392443	WITHOUT_CLASSIFICATION	2.1926075573079388E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999774231416	WITHOUT_CLASSIFICATION	2.2576858425753476E-8	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999812510054	WITHOUT_CLASSIFICATION	1.874899463560577E-8	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999975013231394	WITHOUT_CLASSIFICATION	2.4986768605306312E-6	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999983930983382	WITHOUT_CLASSIFICATION	1.6069016617885074E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9998925108214972	WITHOUT_CLASSIFICATION	1.0748917850278495E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999843776068676	WITHOUT_CLASSIFICATION	1.562239313240676E-5	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999840341850154	WITHOUT_CLASSIFICATION	1.5965814984597582E-4	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999601916671522	WITHOUT_CLASSIFICATION	3.980833284782346E-5	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999940244657424	WITHOUT_CLASSIFICATION	5.975534257690027E-6	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997139951657394	WITHOUT_CLASSIFICATION	2.8600483426063363E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999932087255187	WITHOUT_CLASSIFICATION	6.791274481349165E-6	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999932087255187	WITHOUT_CLASSIFICATION	6.791274481349165E-6	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997479119324	WITHOUT_CLASSIFICATION	2.5208806767973293E-7	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999932087255187	WITHOUT_CLASSIFICATION	6.791274481349165E-6	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999932087255187	WITHOUT_CLASSIFICATION	6.791274481349165E-6	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9975340533077351	WITHOUT_CLASSIFICATION	0.0024659466922648523	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9991341509841709	WITHOUT_CLASSIFICATION	8.658490158291178E-4	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999975190733328	WITHOUT_CLASSIFICATION	2.4809266671596904E-6	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999898254055805	WITHOUT_CLASSIFICATION	1.0174594419556321E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999739036584196	WITHOUT_CLASSIFICATION	2.609634158040353E-5	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9062151043346661	DESIGN	0.09378489566533382	WITHOUT_CLASSIFICATION
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9541007366096159	WITHOUT_CLASSIFICATION	0.045899263390384096	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9800643302455293	WITHOUT_CLASSIFICATION	0.019935669754470735	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999779971914814	WITHOUT_CLASSIFICATION	2.2002808518600507E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999930194187522	WITHOUT_CLASSIFICATION	6.980581247794105E-6	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997892585901704	WITHOUT_CLASSIFICATION	2.107414098296682E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999853518587629	WITHOUT_CLASSIFICATION	1.4648141237021408E-5	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999972241096587	WITHOUT_CLASSIFICATION	2.775890341215875E-6	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999932965876066	WITHOUT_CLASSIFICATION	6.703412393435332E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999564850704893	WITHOUT_CLASSIFICATION	4.3514929510706954E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.990557224168478	WITHOUT_CLASSIFICATION	0.009442775831522046	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999987899906104	WITHOUT_CLASSIFICATION	1.2100093895928296E-5	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9972242854611838	WITHOUT_CLASSIFICATION	0.0027757145388162085	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.851526628437713	WITHOUT_CLASSIFICATION	0.1484733715622871	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999888235845672	WITHOUT_CLASSIFICATION	1.1176415432794901E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999790378349607	WITHOUT_CLASSIFICATION	2.0962165039306352E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999993489623373	WITHOUT_CLASSIFICATION	6.510376626920482E-7	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999987899906104	WITHOUT_CLASSIFICATION	1.2100093895928296E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9997679404725103	WITHOUT_CLASSIFICATION	2.3205952748973495E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.999960935004468	WITHOUT_CLASSIFICATION	3.9064995531904604E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999973148400816	WITHOUT_CLASSIFICATION	2.6851599184623112E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999857172963031	WITHOUT_CLASSIFICATION	1.4282703696988516E-5	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999935683963976	WITHOUT_CLASSIFICATION	6.431603602427877E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998773367853618	WITHOUT_CLASSIFICATION	1.2266321463819186E-4	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999932654664024	WITHOUT_CLASSIFICATION	6.7345335975809895E-6	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999110425785389	WITHOUT_CLASSIFICATION	8.895742146116247E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998653674922	WITHOUT_CLASSIFICATION	1.3463250776591617E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9994479851384623	WITHOUT_CLASSIFICATION	5.520148615376907E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999182308018504	WITHOUT_CLASSIFICATION	8.176919814963519E-5	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997553963446	WITHOUT_CLASSIFICATION	2.446036554215514E-7	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999562069740872	WITHOUT_CLASSIFICATION	4.379302591274311E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999997013563816	WITHOUT_CLASSIFICATION	2.986436183477949E-7	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999587341350329	WITHOUT_CLASSIFICATION	4.1265864967181185E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999135502192548	WITHOUT_CLASSIFICATION	8.64497807452373E-5	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999991593632851	WITHOUT_CLASSIFICATION	8.406367149462375E-7	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999835178740898	WITHOUT_CLASSIFICATION	1.6482125910200806E-5	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999987365367581	WITHOUT_CLASSIFICATION	1.2634632418330292E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999970006061151	WITHOUT_CLASSIFICATION	2.9993938850355324E-6	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.998174917945184	WITHOUT_CLASSIFICATION	0.0018250820548160048	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999986461744731	WITHOUT_CLASSIFICATION	1.3538255269195808E-6	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9961883590352719	WITHOUT_CLASSIFICATION	0.003811640964728103	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998653674922	WITHOUT_CLASSIFICATION	1.3463250776591617E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999981753721655	WITHOUT_CLASSIFICATION	1.8246278344443345E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999544860690038	WITHOUT_CLASSIFICATION	4.551393099629703E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9996324999896228	WITHOUT_CLASSIFICATION	3.675000103771237E-4	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9999466218484101	WITHOUT_CLASSIFICATION	5.337815158990186E-5	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763849849584	WITHOUT_CLASSIFICATION	2.3615015041566334E-5	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999183161598958	WITHOUT_CLASSIFICATION	8.168384010418043E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999701831249778	WITHOUT_CLASSIFICATION	2.9816875022220165E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999978091970446	WITHOUT_CLASSIFICATION	2.1908029553247263E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999976685399224	WITHOUT_CLASSIFICATION	2.3314600775205182E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999821199261786	WITHOUT_CLASSIFICATION	1.78800738214574E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999854641917973	WITHOUT_CLASSIFICATION	1.4535808202579125E-5	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999987592817086	WITHOUT_CLASSIFICATION	1.2407182914827988E-6	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9998027410212164	WITHOUT_CLASSIFICATION	1.972589787837027E-4	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999407384689067	WITHOUT_CLASSIFICATION	5.926153109333515E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999790857006743	WITHOUT_CLASSIFICATION	2.0914299325654147E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999942244270986	WITHOUT_CLASSIFICATION	5.775572901403136E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992978159441619	WITHOUT_CLASSIFICATION	7.021840558380588E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999854641917973	WITHOUT_CLASSIFICATION	1.4535808202579125E-5	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999999480193213	WITHOUT_CLASSIFICATION	5.1980678729254125E-8	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9999389965004193	WITHOUT_CLASSIFICATION	6.100349958083226E-5	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999958972798819	WITHOUT_CLASSIFICATION	4.102720118092807E-6	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998888137748816	WITHOUT_CLASSIFICATION	1.111862251184725E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999969748933054	WITHOUT_CLASSIFICATION	3.025106694596335E-6	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9997380469247031	WITHOUT_CLASSIFICATION	2.619530752968974E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999790857006743	WITHOUT_CLASSIFICATION	2.0914299325654147E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999762434022066	WITHOUT_CLASSIFICATION	2.375659779333622E-5	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998808902903789	WITHOUT_CLASSIFICATION	1.191097096212045E-4	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999581683972388	WITHOUT_CLASSIFICATION	4.183160276107992E-5	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260016847746	WITHOUT_CLASSIFICATION	7.399831522535727E-5	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999578531883312	WITHOUT_CLASSIFICATION	4.2146811668792114E-5	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999659858790958	WITHOUT_CLASSIFICATION	3.4014120904194003E-4	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999703308910252	WITHOUT_CLASSIFICATION	2.9669108974813196E-5	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999703308910252	WITHOUT_CLASSIFICATION	2.9669108974813196E-5	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9973680119459019	WITHOUT_CLASSIFICATION	0.002631988054098056	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999997585027435	WITHOUT_CLASSIFICATION	2.414972565391184E-7	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999996592477413	WITHOUT_CLASSIFICATION	3.4075225871201665E-7	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999960166953497	WITHOUT_CLASSIFICATION	3.983304650338648E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999999428499817	WITHOUT_CLASSIFICATION	5.7150018257502805E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901360219017	WITHOUT_CLASSIFICATION	9.863978098231282E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977618655361	WITHOUT_CLASSIFICATION	2.2381344638049917E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701387961965	WITHOUT_CLASSIFICATION	2.9861203803432624E-5	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9990737710629001	WITHOUT_CLASSIFICATION	9.26228937100053E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999880881692051	WITHOUT_CLASSIFICATION	1.1911830794835611E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901360219017	WITHOUT_CLASSIFICATION	9.863978098231282E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977618655361	WITHOUT_CLASSIFICATION	2.2381344638049917E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999701387961965	WITHOUT_CLASSIFICATION	2.9861203803432624E-5	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999987263282798	WITHOUT_CLASSIFICATION	1.2736717201295131E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9998254991273529	WITHOUT_CLASSIFICATION	1.7450087264715973E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999727046460066	WITHOUT_CLASSIFICATION	2.7295353993324256E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9987392565513482	WITHOUT_CLASSIFICATION	0.0012607434486518268	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999277803908582	WITHOUT_CLASSIFICATION	7.22196091417662E-5	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999734294433852	WITHOUT_CLASSIFICATION	2.6570556614733795E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999989223242851	WITHOUT_CLASSIFICATION	1.077675714873843E-6	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999775817822069	WITHOUT_CLASSIFICATION	2.241821779317252E-5	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9999854303719621	WITHOUT_CLASSIFICATION	1.4569628037963427E-5	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.99999986825982	WITHOUT_CLASSIFICATION	1.317401799823487E-7	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999919512618806	WITHOUT_CLASSIFICATION	8.048738119551198E-6	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997244764727873	WITHOUT_CLASSIFICATION	2.755235272126582E-4	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9942616488633097	WITHOUT_CLASSIFICATION	0.005738351136690348	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999843993008729	WITHOUT_CLASSIFICATION	1.5600699127145353E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999615428619577	WITHOUT_CLASSIFICATION	3.8457138042375045E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999729307054667	WITHOUT_CLASSIFICATION	2.70692945333275E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9979386142276997	WITHOUT_CLASSIFICATION	0.0020613857723003333	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999876731935116	WITHOUT_CLASSIFICATION	1.2326806488471422E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999972162833944	WITHOUT_CLASSIFICATION	2.783716605546959E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998869907063	WITHOUT_CLASSIFICATION	1.130092937465283E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999943664550102	WITHOUT_CLASSIFICATION	5.633544989858612E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999864940421179	WITHOUT_CLASSIFICATION	1.350595788197928E-5	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9998534849474633	WITHOUT_CLASSIFICATION	1.4651505253670334E-4	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.999927254123849	WITHOUT_CLASSIFICATION	7.274587615104728E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999066730961752	WITHOUT_CLASSIFICATION	9.332690382485408E-5	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9856166134132285	WITHOUT_CLASSIFICATION	0.014383386586771527	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970696418345	WITHOUT_CLASSIFICATION	2.930358165393617E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902183047092	WITHOUT_CLASSIFICATION	9.781695290724975E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9998033949709583	WITHOUT_CLASSIFICATION	1.966050290417779E-4	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969445959787	WITHOUT_CLASSIFICATION	3.055404021256229E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878441218857	WITHOUT_CLASSIFICATION	1.215587811438063E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999676977204967	WITHOUT_CLASSIFICATION	3.230227950337556E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999676977204967	WITHOUT_CLASSIFICATION	3.230227950337556E-5	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999958174086234	WITHOUT_CLASSIFICATION	4.182591376568816E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999682532398	WITHOUT_CLASSIFICATION	3.174676023559245E-8	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999999397750605	WITHOUT_CLASSIFICATION	6.022493950566798E-7	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998911465885734	WITHOUT_CLASSIFICATION	1.0885341142667557E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9985978507479029	WITHOUT_CLASSIFICATION	0.001402149252097199	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9998983936002757	WITHOUT_CLASSIFICATION	1.0160639972444334E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9998751584746535	WITHOUT_CLASSIFICATION	1.2484152534645673E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999999568662348	WITHOUT_CLASSIFICATION	4.313376530424555E-8	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999978445400659	WITHOUT_CLASSIFICATION	2.155459934134637E-6	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998331370453	WITHOUT_CLASSIFICATION	1.6686295472741744E-7	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996712511403	WITHOUT_CLASSIFICATION	3.2874885968968193E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951608229595	WITHOUT_CLASSIFICATION	4.839177040597654E-6	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988602101776	WITHOUT_CLASSIFICATION	1.1397898223542828E-6	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991155068383	WITHOUT_CLASSIFICATION	8.844931616323806E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995403764819	WITHOUT_CLASSIFICATION	4.596235181580186E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997688138191	WITHOUT_CLASSIFICATION	2.3118618086613037E-7	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994504468375	WITHOUT_CLASSIFICATION	5.495531625225169E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981205392501	WITHOUT_CLASSIFICATION	1.8794607498820148E-6	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997012721304	WITHOUT_CLASSIFICATION	2.9872786950847576E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885467560409	WITHOUT_CLASSIFICATION	1.1453243959198868E-5	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999618920112217	WITHOUT_CLASSIFICATION	3.810798877832586E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998718505750671	WITHOUT_CLASSIFICATION	1.2814942493294575E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9914500850204324	WITHOUT_CLASSIFICATION	0.008549914979567629	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995104093373829	WITHOUT_CLASSIFICATION	4.89590662617154E-4	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9946703595005367	WITHOUT_CLASSIFICATION	0.005329640499463344	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999944908969413	WITHOUT_CLASSIFICATION	5.509103058740406E-6	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999959008772595	WITHOUT_CLASSIFICATION	4.099122740375153E-6	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9998826291487157	WITHOUT_CLASSIFICATION	1.1737085128418654E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9914500850204324	WITHOUT_CLASSIFICATION	0.008549914979567629	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9914500850204324	WITHOUT_CLASSIFICATION	0.008549914979567629	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9848135483146585	WITHOUT_CLASSIFICATION	0.015186451685341605	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999215080334	WITHOUT_CLASSIFICATION	7.849196660912755E-7	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999941302844205	WITHOUT_CLASSIFICATION	5.869715579500652E-5	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999717036087793	WITHOUT_CLASSIFICATION	2.8296391220662587E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999999290191876	WITHOUT_CLASSIFICATION	7.098081244416548E-8	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998869907063	WITHOUT_CLASSIFICATION	1.130092937465283E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999576950447759	WITHOUT_CLASSIFICATION	4.230495522402511E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999996684508478	WITHOUT_CLASSIFICATION	3.315491521503605E-7	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999995221693427	WITHOUT_CLASSIFICATION	4.778306572650121E-7	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998115765896917	WITHOUT_CLASSIFICATION	1.8842341030828136E-4	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9998699732558534	WITHOUT_CLASSIFICATION	1.3002674414655852E-4	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998880183718001	WITHOUT_CLASSIFICATION	1.1198162819993215E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999299465615138	WITHOUT_CLASSIFICATION	7.005343848616897E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999299465615138	WITHOUT_CLASSIFICATION	7.005343848616897E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999932815218769	WITHOUT_CLASSIFICATION	6.718478123082013E-6	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999932815218769	WITHOUT_CLASSIFICATION	6.718478123082013E-6	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831587334386	WITHOUT_CLASSIFICATION	1.6841266561461177E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999581465838677	WITHOUT_CLASSIFICATION	4.1853416132253006E-5	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999965904002189	WITHOUT_CLASSIFICATION	3.4095997811089393E-6	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999941399879378	WITHOUT_CLASSIFICATION	5.860012062204339E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9998849783759578	WITHOUT_CLASSIFICATION	1.1502162404219865E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9999458460524191	WITHOUT_CLASSIFICATION	5.4153947581036364E-5	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953265806866	WITHOUT_CLASSIFICATION	4.673419313394272E-6	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952815002224	WITHOUT_CLASSIFICATION	4.718499777518913E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999943907191415	WITHOUT_CLASSIFICATION	5.609280858414903E-6	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999998876493426	WITHOUT_CLASSIFICATION	1.1235065737269033E-7	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995251189069	WITHOUT_CLASSIFICATION	4.74881093108809E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999992150325104	WITHOUT_CLASSIFICATION	7.849674895775765E-7	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9994400709936045	WITHOUT_CLASSIFICATION	5.599290063954202E-4	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.999999698182181	WITHOUT_CLASSIFICATION	3.0181781899503915E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.999990654755909	WITHOUT_CLASSIFICATION	9.345244090966717E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.999997120372607	WITHOUT_CLASSIFICATION	2.8796273929175605E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.999997120372607	WITHOUT_CLASSIFICATION	2.8796273929175605E-6	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999588732681204	WITHOUT_CLASSIFICATION	4.1126731879509524E-5	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999983456961405	WITHOUT_CLASSIFICATION	1.654303859451912E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999794307068	WITHOUT_CLASSIFICATION	2.0569293132731725E-8	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999975848805618	WITHOUT_CLASSIFICATION	2.4151194381680636E-6	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999810098671021	WITHOUT_CLASSIFICATION	1.8990132897803456E-5	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834144575807	WITHOUT_CLASSIFICATION	1.6585542419354558E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999988909965669	WITHOUT_CLASSIFICATION	1.1090034330797585E-6	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999369713111125	WITHOUT_CLASSIFICATION	6.302868888750284E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999644958578758	WITHOUT_CLASSIFICATION	3.550414212418284E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999983420019918	WITHOUT_CLASSIFICATION	1.6579980082553178E-6	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9785858618232178	WITHOUT_CLASSIFICATION	0.021414138176782126	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9991693088402225	WITHOUT_CLASSIFICATION	8.30691159777514E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993160907499	WITHOUT_CLASSIFICATION	6.839092500866932E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999918737254828	WITHOUT_CLASSIFICATION	8.126274517232534E-6	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999997622771559	WITHOUT_CLASSIFICATION	2.3772284402492017E-7	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.99999194941473	WITHOUT_CLASSIFICATION	8.050585269990281E-6	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9944178753360509	WITHOUT_CLASSIFICATION	0.005582124663949095	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999917340524228	WITHOUT_CLASSIFICATION	8.265947577251695E-6	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999617590773991	WITHOUT_CLASSIFICATION	3.824092260078146E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999995049468454	WITHOUT_CLASSIFICATION	4.95053154506838E-7	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999820954804449	WITHOUT_CLASSIFICATION	1.7904519555116652E-5	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999831889709097	WITHOUT_CLASSIFICATION	1.681102909033757E-5	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999672763975553	WITHOUT_CLASSIFICATION	3.2723602444683256E-5	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999861965854981	WITHOUT_CLASSIFICATION	1.3803414501867627E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999999282331891	WITHOUT_CLASSIFICATION	7.17668109245173E-8	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9974695220456544	WITHOUT_CLASSIFICATION	0.0025304779543454756	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9997730808893345	WITHOUT_CLASSIFICATION	2.269191106656329E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999981478680313	WITHOUT_CLASSIFICATION	1.8521319686107137E-6	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999995289270485	WITHOUT_CLASSIFICATION	4.7107295157462965E-7	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999872460526151	WITHOUT_CLASSIFICATION	1.2753947384908089E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.996798957590791	WITHOUT_CLASSIFICATION	0.0032010424092090034	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999996616043025	WITHOUT_CLASSIFICATION	3.383956974979622E-6	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998040968306883	WITHOUT_CLASSIFICATION	1.959031693116901E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9917408181094074	WITHOUT_CLASSIFICATION	0.008259181890592656	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999990532187246	WITHOUT_CLASSIFICATION	9.467812753199172E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9992192310960194	WITHOUT_CLASSIFICATION	7.807689039806203E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999986133892411	WITHOUT_CLASSIFICATION	1.3866107589011504E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9999666480296421	WITHOUT_CLASSIFICATION	3.335197035793955E-5	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999998572119943	WITHOUT_CLASSIFICATION	1.4278800569309038E-6	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9997899244885385	WITHOUT_CLASSIFICATION	2.1007551146139545E-4	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9995376454210887	WITHOUT_CLASSIFICATION	4.623545789113315E-4	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998414552372	WITHOUT_CLASSIFICATION	1.585447627283552E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9928797037012675	WITHOUT_CLASSIFICATION	0.007120296298732488	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9997353787978043	WITHOUT_CLASSIFICATION	2.6462120219577823E-4	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.8275850775118302	WITHOUT_CLASSIFICATION	0.17241492248816973	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9990784754118467	WITHOUT_CLASSIFICATION	9.215245881532347E-4	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999991223099601	WITHOUT_CLASSIFICATION	8.776900397332924E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999995728449792	WITHOUT_CLASSIFICATION	4.2715502070472353E-7	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999984077759297	WITHOUT_CLASSIFICATION	1.5922240702075411E-6	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999002827215782	WITHOUT_CLASSIFICATION	9.971727842180542E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9996606079654116	WITHOUT_CLASSIFICATION	3.3939203458838597E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9985853768812502	WITHOUT_CLASSIFICATION	0.0014146231187498804	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999553245317946	WITHOUT_CLASSIFICATION	4.4675468205424174E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999932183869338	WITHOUT_CLASSIFICATION	6.781613066335948E-6	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999393579201084	WITHOUT_CLASSIFICATION	6.064207989160406E-4	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999861080382896	WITHOUT_CLASSIFICATION	1.3891961710463603E-5	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9755217796083652	WITHOUT_CLASSIFICATION	0.02447822039163488	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999872853271685	WITHOUT_CLASSIFICATION	1.2714672831555252E-5	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999947681776489	WITHOUT_CLASSIFICATION	5.2318223511893634E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9999266191973308	WITHOUT_CLASSIFICATION	7.338080266916897E-5	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999100988149834	WITHOUT_CLASSIFICATION	8.990118501658448E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999952410887563	WITHOUT_CLASSIFICATION	4.758911243761364E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999995059922812	WITHOUT_CLASSIFICATION	4.940077188600385E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999116475507354	WITHOUT_CLASSIFICATION	8.835244926457615E-5	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999959484336017	WITHOUT_CLASSIFICATION	4.051566398285461E-6	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998234620334848	WITHOUT_CLASSIFICATION	1.7653796651523739E-4	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9731209690441569	WITHOUT_CLASSIFICATION	0.026879030955843163	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999736379205015	WITHOUT_CLASSIFICATION	2.636207949845057E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999666203485305	WITHOUT_CLASSIFICATION	3.337965146952243E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999666203485305	WITHOUT_CLASSIFICATION	3.337965146952243E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999996956109706	WITHOUT_CLASSIFICATION	3.0438902937818095E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999984946252952	WITHOUT_CLASSIFICATION	1.505374704822388E-6	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999255760948043	WITHOUT_CLASSIFICATION	7.442390519576051E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998631627492567	WITHOUT_CLASSIFICATION	1.368372507433142E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999562878523068	WITHOUT_CLASSIFICATION	4.371214769307864E-5	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999958837758821	WITHOUT_CLASSIFICATION	4.116224117911614E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9827522520699353	WITHOUT_CLASSIFICATION	0.01724774793006464	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999970164455995	WITHOUT_CLASSIFICATION	2.9835544005909997E-6	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998983214899914	WITHOUT_CLASSIFICATION	1.0167851000870151E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999512033200222	WITHOUT_CLASSIFICATION	4.8796679977719454E-5	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999960665760519	WITHOUT_CLASSIFICATION	3.9334239482055516E-6	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.99999484776904	WITHOUT_CLASSIFICATION	5.152230959989593E-6	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999848407846085	WITHOUT_CLASSIFICATION	1.5159215391635805E-5	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999985798673151	WITHOUT_CLASSIFICATION	1.4201326848353358E-6	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.99983968554715	WITHOUT_CLASSIFICATION	1.603144528499055E-4	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6055867409821009	WITHOUT_CLASSIFICATION	0.394413259017899	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999690424987477	WITHOUT_CLASSIFICATION	3.095750125223213E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.7359566422210551	WITHOUT_CLASSIFICATION	0.2640433577789449	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9968010380316257	WITHOUT_CLASSIFICATION	0.0031989619683742386	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9993036683107335	WITHOUT_CLASSIFICATION	6.963316892665435E-4	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999986634163329	WITHOUT_CLASSIFICATION	1.3365836670268278E-6	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998099180670527	WITHOUT_CLASSIFICATION	1.9008193294739963E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9511132779423259	WITHOUT_CLASSIFICATION	0.04888672205767399	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9995185050446277	WITHOUT_CLASSIFICATION	4.814949553722577E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999551845756356	WITHOUT_CLASSIFICATION	4.4815424364380764E-5	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999916683136033	WITHOUT_CLASSIFICATION	8.331686396602266E-6	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999877026614021	WITHOUT_CLASSIFICATION	1.229733859792064E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998553189708107	WITHOUT_CLASSIFICATION	1.446810291892425E-4	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999978628563202	WITHOUT_CLASSIFICATION	2.1371436797682534E-6	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999943842681615	WITHOUT_CLASSIFICATION	5.615731838492719E-6	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999977237995076	WITHOUT_CLASSIFICATION	2.276200492417306E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999995638525312	WITHOUT_CLASSIFICATION	4.3614746884274826E-7	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999967697894148	WITHOUT_CLASSIFICATION	3.2302105851761987E-6	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999898387400387	WITHOUT_CLASSIFICATION	1.0161259961308703E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999408484638114	WITHOUT_CLASSIFICATION	5.915153618855156E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999408484638114	WITHOUT_CLASSIFICATION	5.915153618855156E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998438005890523	WITHOUT_CLASSIFICATION	1.561994109476616E-4	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9999701732522409	WITHOUT_CLASSIFICATION	2.9826747759174965E-5	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999998500667792	WITHOUT_CLASSIFICATION	1.4993322087543875E-7	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999750466879097	WITHOUT_CLASSIFICATION	2.4953312090200688E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999935629138992	WITHOUT_CLASSIFICATION	6.4370861008378966E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999919861476617	WITHOUT_CLASSIFICATION	8.013852338296197E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999944296373168	WITHOUT_CLASSIFICATION	5.570362683169621E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9998853571902377	WITHOUT_CLASSIFICATION	1.1464280976221769E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9569730627422931	WITHOUT_CLASSIFICATION	0.04302693725770683	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999997059194798	WITHOUT_CLASSIFICATION	2.94080520210357E-6	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999958048751678	WITHOUT_CLASSIFICATION	4.195124832197889E-5	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9969133243923213	WITHOUT_CLASSIFICATION	0.003086675607678607	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999972043919363	WITHOUT_CLASSIFICATION	2.79560806375393E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999871289074154	WITHOUT_CLASSIFICATION	1.2871092584695733E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999988174588793	WITHOUT_CLASSIFICATION	1.1825411206601677E-6	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9987106814636112	WITHOUT_CLASSIFICATION	0.0012893185363887934	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9987106814636112	WITHOUT_CLASSIFICATION	0.0012893185363887934	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999892365737798	WITHOUT_CLASSIFICATION	1.0763426220244252E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999995217462526	WITHOUT_CLASSIFICATION	4.782537474143528E-7	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998029077594633	WITHOUT_CLASSIFICATION	1.970922405366504E-4	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999484164554691	WITHOUT_CLASSIFICATION	5.158354453091373E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999687750384186	WITHOUT_CLASSIFICATION	3.122496158125242E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999994861722961	WITHOUT_CLASSIFICATION	5.138277040017278E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999772556452438	WITHOUT_CLASSIFICATION	2.2744354756242744E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999772556452438	WITHOUT_CLASSIFICATION	2.2744354756242744E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999977741508406	WITHOUT_CLASSIFICATION	2.2258491594841302E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9995837134329292	WITHOUT_CLASSIFICATION	4.1628656707084295E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999249690507893	WITHOUT_CLASSIFICATION	7.5030949210671E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999863473306205	WITHOUT_CLASSIFICATION	1.3652669379412023E-5	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9279100740475287	WITHOUT_CLASSIFICATION	0.07208992595247136	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999770846033231	WITHOUT_CLASSIFICATION	2.2915396676925956E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999868546519973	WITHOUT_CLASSIFICATION	1.31453480026379E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999967128528596	WITHOUT_CLASSIFICATION	3.2871471404679744E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999390437607	WITHOUT_CLASSIFICATION	6.095623929839353E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9990385905456237	WITHOUT_CLASSIFICATION	9.614094543763434E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9985798229162217	WITHOUT_CLASSIFICATION	0.0014201770837783889	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999690987989491	WITHOUT_CLASSIFICATION	3.090120105077869E-5	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999986107249634	WITHOUT_CLASSIFICATION	1.3892750365761883E-6	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999996810378572	WITHOUT_CLASSIFICATION	3.1896214280956294E-7	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999581468272646	WITHOUT_CLASSIFICATION	4.185317273535708E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999640194416436	WITHOUT_CLASSIFICATION	3.598055835630865E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999997835928285	WITHOUT_CLASSIFICATION	2.1640717153476117E-7	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999595025175388	WITHOUT_CLASSIFICATION	4.049748246113697E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9998088816053938	WITHOUT_CLASSIFICATION	1.9111839460619776E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999974433924048	WITHOUT_CLASSIFICATION	2.5566075951270587E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999992725647693	WITHOUT_CLASSIFICATION	7.274352308327176E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999964161452431	WITHOUT_CLASSIFICATION	3.5838547567797924E-6	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999589572052967	WITHOUT_CLASSIFICATION	4.104279470335246E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.996951660313788	WITHOUT_CLASSIFICATION	0.0030483396862119915	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999228130617915	WITHOUT_CLASSIFICATION	7.718693820842892E-5	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9966665204522985	WITHOUT_CLASSIFICATION	0.003333479547701419	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.8513070056242481	DESIGN	0.14869299437575179	WITHOUT_CLASSIFICATION
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999029325391948	WITHOUT_CLASSIFICATION	9.706746080521045E-5	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9988879119064729	WITHOUT_CLASSIFICATION	0.0011120880935271778	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999675269564333	WITHOUT_CLASSIFICATION	3.247304356671879E-5	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9991314812467639	WITHOUT_CLASSIFICATION	8.68518753236035E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9999552092055047	WITHOUT_CLASSIFICATION	4.479079449523413E-5	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999969379831162	WITHOUT_CLASSIFICATION	3.062016883800352E-5	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999112046235764	WITHOUT_CLASSIFICATION	8.879537642355332E-5	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9996014281891896	WITHOUT_CLASSIFICATION	3.985718108104404E-4	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998660936338166	WITHOUT_CLASSIFICATION	1.3390636618336433E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9999817537494374	WITHOUT_CLASSIFICATION	1.8246250562619848E-5	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999967111672392	WITHOUT_CLASSIFICATION	3.288832760710785E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996045996974	WITHOUT_CLASSIFICATION	3.954003025534131E-7	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996078716467	WITHOUT_CLASSIFICATION	3.9212835340557013E-7	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999992468626185	WITHOUT_CLASSIFICATION	7.531373815185596E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999998633536248	WITHOUT_CLASSIFICATION	1.3664637521775685E-7	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999997390088934	WITHOUT_CLASSIFICATION	2.609911066058923E-6	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9998327589375899	WITHOUT_CLASSIFICATION	1.672410624101425E-4	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999970731247035	WITHOUT_CLASSIFICATION	2.926875296380731E-6	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999768804600183	WITHOUT_CLASSIFICATION	2.311953998164395E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999996045996974	WITHOUT_CLASSIFICATION	3.954003025534131E-7	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999996078716467	WITHOUT_CLASSIFICATION	3.9212835340557013E-7	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9998158875136738	WITHOUT_CLASSIFICATION	1.84112486326199E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9997709008198965	WITHOUT_CLASSIFICATION	2.2909918010344526E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999974999856285	WITHOUT_CLASSIFICATION	2.5000143714188467E-6	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9997963839609681	WITHOUT_CLASSIFICATION	2.0361603903178542E-4	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9997745343907761	WITHOUT_CLASSIFICATION	2.254656092238209E-4	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999299858691839	WITHOUT_CLASSIFICATION	7.0014130816089E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999403328172556	WITHOUT_CLASSIFICATION	5.966718274448818E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999953226707067	WITHOUT_CLASSIFICATION	4.677329293330286E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999892733260275	WITHOUT_CLASSIFICATION	1.0726673972532653E-5	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9938724318875894	WITHOUT_CLASSIFICATION	0.006127568112410609	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999690877933	WITHOUT_CLASSIFICATION	3.0912206651176105E-8	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9938724318875894	WITHOUT_CLASSIFICATION	0.006127568112410609	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999998020993388	WITHOUT_CLASSIFICATION	1.979006612369305E-7	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999727285096445	WITHOUT_CLASSIFICATION	2.7271490355478207E-5	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999981449809786	WITHOUT_CLASSIFICATION	1.8550190213373079E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999036985520772	WITHOUT_CLASSIFICATION	9.630144792280041E-5	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9968805535960623	WITHOUT_CLASSIFICATION	0.0031194464039377198	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9997374002844208	WITHOUT_CLASSIFICATION	2.6259971557917125E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9997374002844208	WITHOUT_CLASSIFICATION	2.6259971557917125E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.998751099866395	WITHOUT_CLASSIFICATION	0.0012489001336051116	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9911380170821094	WITHOUT_CLASSIFICATION	0.008861982917890612	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9994057578462078	WITHOUT_CLASSIFICATION	5.942421537922055E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999739249751785	WITHOUT_CLASSIFICATION	2.607502482155635E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999684523772568	WITHOUT_CLASSIFICATION	3.1547622743187605E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9980085553169059	WITHOUT_CLASSIFICATION	0.0019914446830940928	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999972646390238	WITHOUT_CLASSIFICATION	2.7353609760430174E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999887165641396	WITHOUT_CLASSIFICATION	1.128343586046301E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999940208372742	WITHOUT_CLASSIFICATION	5.979162725773868E-6	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9989486532200748	WITHOUT_CLASSIFICATION	0.0010513467799252777	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999994210270534	WITHOUT_CLASSIFICATION	5.789729465459215E-7	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9997363678915563	WITHOUT_CLASSIFICATION	2.6363210844375547E-4	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9998759019538527	WITHOUT_CLASSIFICATION	1.240980461473942E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999996028988262	WITHOUT_CLASSIFICATION	3.971011737919668E-7	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996644327082487	WITHOUT_CLASSIFICATION	3.355672917513337E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9911558910748861	WITHOUT_CLASSIFICATION	0.00884410892511397	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999921489427108	WITHOUT_CLASSIFICATION	7.851057289203601E-5	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999775117224814	WITHOUT_CLASSIFICATION	2.248827751860748E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999863997451088	WITHOUT_CLASSIFICATION	1.3600254891118973E-5	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998855738345869	WITHOUT_CLASSIFICATION	1.1442616541311343E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999897846033836	WITHOUT_CLASSIFICATION	1.021539661637437E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999994383639328	WITHOUT_CLASSIFICATION	5.61636067172859E-7	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.999873570198282	WITHOUT_CLASSIFICATION	1.264298017179884E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9995691229003028	WITHOUT_CLASSIFICATION	4.308770996971883E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9998781283234961	WITHOUT_CLASSIFICATION	1.2187167650382934E-4	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999836492039802	WITHOUT_CLASSIFICATION	1.635079601981075E-5	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999937042607477	WITHOUT_CLASSIFICATION	6.295739252299773E-6	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9972401978304375	WITHOUT_CLASSIFICATION	0.0027598021695625923	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9959098419678266	WITHOUT_CLASSIFICATION	0.00409015803217333	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9211407337078757	WITHOUT_CLASSIFICATION	0.07885926629212417	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9071355618658901	WITHOUT_CLASSIFICATION	0.09286443813411005	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9957114126466267	WITHOUT_CLASSIFICATION	0.004288587353373402	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999972646390238	WITHOUT_CLASSIFICATION	2.7353609760430174E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999941649895859	WITHOUT_CLASSIFICATION	5.835010414017648E-6	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9990139472014427	WITHOUT_CLASSIFICATION	9.86052798557274E-4	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9996128947619837	WITHOUT_CLASSIFICATION	3.8710523801637457E-4	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999993550611854	WITHOUT_CLASSIFICATION	6.44938814558208E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999994330456856	WITHOUT_CLASSIFICATION	5.669543143598718E-7	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999968437061277	WITHOUT_CLASSIFICATION	3.1562938723745905E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999739249751785	WITHOUT_CLASSIFICATION	2.607502482155635E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999739249751785	WITHOUT_CLASSIFICATION	2.607502482155635E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.99994702982999	WITHOUT_CLASSIFICATION	5.297017001008993E-5	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999988889937336	WITHOUT_CLASSIFICATION	1.1110062664002172E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999238124601049	WITHOUT_CLASSIFICATION	7.618753989503277E-5	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999764724072209	WITHOUT_CLASSIFICATION	2.3527592779145147E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9964217241731912	WITHOUT_CLASSIFICATION	0.0035782758268088836	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999814938898356	WITHOUT_CLASSIFICATION	1.8506110164316165E-5	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9999534490839597	WITHOUT_CLASSIFICATION	4.655091604026269E-5	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999996934143489	WITHOUT_CLASSIFICATION	3.0658565107834075E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9969592976686226	WITHOUT_CLASSIFICATION	0.0030407023313773402	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999976744741984	WITHOUT_CLASSIFICATION	2.3255258016005734E-5	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999735849992674	WITHOUT_CLASSIFICATION	2.6415000732569066E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999171368271182	WITHOUT_CLASSIFICATION	8.286317288183248E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999965182560723	WITHOUT_CLASSIFICATION	3.4817439277526585E-6	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999976744741984	WITHOUT_CLASSIFICATION	2.3255258016005734E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999994453355837	WITHOUT_CLASSIFICATION	5.546644162357262E-7	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.999874914040492	WITHOUT_CLASSIFICATION	1.250859595079528E-4	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999997004226785	WITHOUT_CLASSIFICATION	2.995773215563356E-7	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.997266230510455	WITHOUT_CLASSIFICATION	0.0027337694895449185	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999171368271182	WITHOUT_CLASSIFICATION	8.286317288183248E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999943880437304	WITHOUT_CLASSIFICATION	5.611956269596015E-6	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999606659146034	WITHOUT_CLASSIFICATION	3.9334085396645945E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9993081167254345	WITHOUT_CLASSIFICATION	6.918832745654693E-4	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999986797937961	WITHOUT_CLASSIFICATION	1.3202062038730697E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997529198223052	WITHOUT_CLASSIFICATION	2.4708017769488745E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999993764233644	WITHOUT_CLASSIFICATION	6.235766354883784E-7	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999999318637339	WITHOUT_CLASSIFICATION	6.813626610127994E-8	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999977050091765	WITHOUT_CLASSIFICATION	2.2949908236036663E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9990913326843578	WITHOUT_CLASSIFICATION	9.086673156423243E-4	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999079329504504	WITHOUT_CLASSIFICATION	9.206704954952456E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999092139453661	WITHOUT_CLASSIFICATION	9.078605463382881E-5	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9990640030478052	WITHOUT_CLASSIFICATION	9.35996952194736E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999976744741984	WITHOUT_CLASSIFICATION	2.3255258016005734E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999943880437304	WITHOUT_CLASSIFICATION	5.611956269596015E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9993081167254345	WITHOUT_CLASSIFICATION	6.918832745654693E-4	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999977882674638	WITHOUT_CLASSIFICATION	2.2117325362404835E-6	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9980429908770713	WITHOUT_CLASSIFICATION	0.001957009122928714	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999996204644378	WITHOUT_CLASSIFICATION	3.795355623146783E-7	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999171368271182	WITHOUT_CLASSIFICATION	8.286317288183248E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999165492350255	WITHOUT_CLASSIFICATION	8.345076497449854E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999968707876418	WITHOUT_CLASSIFICATION	3.1292123582037785E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950888005902	WITHOUT_CLASSIFICATION	4.911199409902468E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999961834750195	WITHOUT_CLASSIFICATION	3.816524980513842E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999977050091765	WITHOUT_CLASSIFICATION	2.2949908236036663E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999994453355837	WITHOUT_CLASSIFICATION	5.546644162357262E-7	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999967175450822	WITHOUT_CLASSIFICATION	3.2824549177549907E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999977700615584	WITHOUT_CLASSIFICATION	2.2299384415143265E-6	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999265184968744	WITHOUT_CLASSIFICATION	7.348150312564357E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997719882190615	WITHOUT_CLASSIFICATION	2.2801178093838324E-4	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9051082906118998	WITHOUT_CLASSIFICATION	0.09489170938810021	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9829993000270016	WITHOUT_CLASSIFICATION	0.017000699972998308	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9999712256492479	WITHOUT_CLASSIFICATION	2.87743507520882E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999036985520772	WITHOUT_CLASSIFICATION	9.630144792280041E-5	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991672130002426	WITHOUT_CLASSIFICATION	8.327869997573278E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999858532896772	WITHOUT_CLASSIFICATION	1.4146710322920205E-5	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9997636706199958	WITHOUT_CLASSIFICATION	2.363293800042225E-4	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9997453605852218	WITHOUT_CLASSIFICATION	2.546394147782167E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9951724943755671	WITHOUT_CLASSIFICATION	0.004827505624432915	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999957107802758	WITHOUT_CLASSIFICATION	4.289219724178978E-6	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999998788023939	WITHOUT_CLASSIFICATION	1.2119760610685977E-7	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999783501253349	WITHOUT_CLASSIFICATION	2.1649874665101156E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999961834750195	WITHOUT_CLASSIFICATION	3.816524980513842E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999975574333663	WITHOUT_CLASSIFICATION	2.4425666337757014E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.999996840950095	WITHOUT_CLASSIFICATION	3.1590499051378926E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999741360955083	WITHOUT_CLASSIFICATION	2.5863904491746572E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999994267788542	WITHOUT_CLASSIFICATION	5.732211457707938E-7	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9999830947772596	WITHOUT_CLASSIFICATION	1.6905222740524835E-5	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999124917063036	WITHOUT_CLASSIFICATION	8.750829369639541E-5	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999994794813852	WITHOUT_CLASSIFICATION	5.205186146982008E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.999992607830836	WITHOUT_CLASSIFICATION	7.392169163944612E-6	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999950371106548	WITHOUT_CLASSIFICATION	4.962889345117231E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999965518565765	WITHOUT_CLASSIFICATION	3.448143423403694E-6	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.99999494215404	WITHOUT_CLASSIFICATION	5.057845960136465E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999971249026111	WITHOUT_CLASSIFICATION	2.875097388883906E-6	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9996323388747885	WITHOUT_CLASSIFICATION	3.67661125211441E-4	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999565402401864	WITHOUT_CLASSIFICATION	4.345975981362317E-5	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9967834428960721	WITHOUT_CLASSIFICATION	0.0032165571039278872	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999938152636303	WITHOUT_CLASSIFICATION	6.184736369754399E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.8938600073118312	WITHOUT_CLASSIFICATION	0.10613999268816875	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999975645926223	WITHOUT_CLASSIFICATION	2.4354073776952993E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999883616303207	WITHOUT_CLASSIFICATION	1.1638369679367053E-5	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996301117973888	WITHOUT_CLASSIFICATION	3.698882026112506E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999957018592304	WITHOUT_CLASSIFICATION	4.298140769679231E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999360677541742	WITHOUT_CLASSIFICATION	6.393224582578166E-5	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999975559178884	WITHOUT_CLASSIFICATION	2.4440821115357683E-6	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999929796934649	WITHOUT_CLASSIFICATION	7.020306535057427E-6	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999963684643464	WITHOUT_CLASSIFICATION	3.6315356536936322E-6	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.7292272499333557	WITHOUT_CLASSIFICATION	0.27077275006664436	DESIGN
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9994164357661595	WITHOUT_CLASSIFICATION	5.835642338404663E-4	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.999778455303937	WITHOUT_CLASSIFICATION	2.2154469606298024E-4	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999995128137833	WITHOUT_CLASSIFICATION	4.871862166570735E-7	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9705313963381484	WITHOUT_CLASSIFICATION	0.02946860366185149	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999991771461229	WITHOUT_CLASSIFICATION	8.228538770663322E-7	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994691127910743	WITHOUT_CLASSIFICATION	5.308872089256308E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999443070859378	WITHOUT_CLASSIFICATION	5.5692914062099816E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999638576321298	WITHOUT_CLASSIFICATION	3.614236787012634E-5	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999555519281597	WITHOUT_CLASSIFICATION	4.4448071840329474E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999577243153	WITHOUT_CLASSIFICATION	4.2275684826424675E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999817056477	WITHOUT_CLASSIFICATION	1.829435224393414E-8	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9548789095099322	WITHOUT_CLASSIFICATION	0.045121090490067864	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999577243153	WITHOUT_CLASSIFICATION	4.2275684826424675E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999555519281597	WITHOUT_CLASSIFICATION	4.4448071840329474E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999999817056477	WITHOUT_CLASSIFICATION	1.829435224393414E-8	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999999048985515	WITHOUT_CLASSIFICATION	9.510144839199399E-8	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998514017916774	WITHOUT_CLASSIFICATION	1.4859820832256648E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999979768090539	WITHOUT_CLASSIFICATION	2.0231909460846478E-6	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999981849677044	WITHOUT_CLASSIFICATION	1.8150322955544571E-6	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999995881878564	WITHOUT_CLASSIFICATION	4.11812143586144E-7	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5678732907926863	WITHOUT_CLASSIFICATION	0.4321267092073136	DESIGN
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9999056247696279	WITHOUT_CLASSIFICATION	9.437523037214506E-5	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9873354893273518	WITHOUT_CLASSIFICATION	0.012664510672648037	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999870805046484	WITHOUT_CLASSIFICATION	1.2919495351784052E-5	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999936012649804	WITHOUT_CLASSIFICATION	6.398735019524716E-6	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999987609685022	WITHOUT_CLASSIFICATION	1.2390314978323923E-6	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999993958952806	WITHOUT_CLASSIFICATION	6.041047193402057E-7	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9944791606806317	WITHOUT_CLASSIFICATION	0.005520839319368235	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999847525437459	WITHOUT_CLASSIFICATION	1.5247456254060579E-5	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999479749833445	WITHOUT_CLASSIFICATION	5.2025016655532684E-5	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999995444518601	WITHOUT_CLASSIFICATION	4.5554813996461155E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997487128414381	WITHOUT_CLASSIFICATION	2.512871585619324E-4	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999989864791609	WITHOUT_CLASSIFICATION	1.0135208391447137E-6	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9966564311110337	WITHOUT_CLASSIFICATION	0.003343568888966201	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999990647053638	WITHOUT_CLASSIFICATION	9.352946361844041E-7	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9999728885577205	WITHOUT_CLASSIFICATION	2.7111442279579302E-5	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999188431217	WITHOUT_CLASSIFICATION	8.115687832987166E-8	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999998445008925	WITHOUT_CLASSIFICATION	1.5549910746858561E-7	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999484409406	WITHOUT_CLASSIFICATION	5.155905923521419E-8	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999975531406521	WITHOUT_CLASSIFICATION	2.446859347998224E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999975531406521	WITHOUT_CLASSIFICATION	2.446859347998224E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998808285706	WITHOUT_CLASSIFICATION	1.191714294059147E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999998808285706	WITHOUT_CLASSIFICATION	1.191714294059147E-7	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9999094921721804	WITHOUT_CLASSIFICATION	9.050782781965273E-5	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9997487128414381	WITHOUT_CLASSIFICATION	2.512871585619324E-4	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999748615179986	WITHOUT_CLASSIFICATION	2.5138482001377327E-5	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999998588985882	WITHOUT_CLASSIFICATION	1.4110141175640524E-7	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999986041941479	WITHOUT_CLASSIFICATION	1.3958058520993011E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.999986041941479	WITHOUT_CLASSIFICATION	1.3958058520993011E-5	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999957798686415	WITHOUT_CLASSIFICATION	4.220131358454268E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999944281025572	WITHOUT_CLASSIFICATION	5.571897442686308E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998390806698173	WITHOUT_CLASSIFICATION	1.6091933018273798E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999996546622967	WITHOUT_CLASSIFICATION	3.453377033877467E-7	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9797210636030409	WITHOUT_CLASSIFICATION	0.020278936396959078	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9996710964511685	WITHOUT_CLASSIFICATION	3.289035488315276E-4	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9994043735189814	WITHOUT_CLASSIFICATION	5.95626481018769E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9949619808986929	WITHOUT_CLASSIFICATION	0.005038019101307054	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9999984039340251	WITHOUT_CLASSIFICATION	1.5960659749686557E-6	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999938481299523	WITHOUT_CLASSIFICATION	6.151870047650415E-6	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999997898595824	WITHOUT_CLASSIFICATION	2.1014041769156426E-7	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999971434309651	WITHOUT_CLASSIFICATION	2.8565690348701836E-6	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.99999857817673	WITHOUT_CLASSIFICATION	1.4218232700354966E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999964156747105	WITHOUT_CLASSIFICATION	3.584325289585314E-6	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999943336552298	WITHOUT_CLASSIFICATION	5.6663447701810455E-6	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999996426833629	WITHOUT_CLASSIFICATION	3.5731663708342327E-7	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9906528815900306	WITHOUT_CLASSIFICATION	0.009347118409969449	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999976634376501	WITHOUT_CLASSIFICATION	2.3365623499091536E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9998863340274471	WITHOUT_CLASSIFICATION	1.1366597255288242E-4	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999296850111385	WITHOUT_CLASSIFICATION	7.031498886151232E-5	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999892896577837	WITHOUT_CLASSIFICATION	1.0710342216373807E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9998534819222431	WITHOUT_CLASSIFICATION	1.4651807775695481E-4	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999533099493	WITHOUT_CLASSIFICATION	4.669005063658578E-8	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999931609383408	WITHOUT_CLASSIFICATION	6.839061659263142E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998911465885734	WITHOUT_CLASSIFICATION	1.0885341142667557E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999907836894256	WITHOUT_CLASSIFICATION	9.216310574408284E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999971249026111	WITHOUT_CLASSIFICATION	2.875097388883906E-6	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999865491285341	WITHOUT_CLASSIFICATION	1.3450871465768846E-5	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999927318121874	WITHOUT_CLASSIFICATION	7.268187812578854E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958766351367	WITHOUT_CLASSIFICATION	4.123364863346439E-6	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900257605271	WITHOUT_CLASSIFICATION	9.97423947293726E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999786807598748	WITHOUT_CLASSIFICATION	2.13192401251288E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999786807598748	WITHOUT_CLASSIFICATION	2.13192401251288E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9996546051671619	WITHOUT_CLASSIFICATION	3.453948328381371E-4	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999897750410907	WITHOUT_CLASSIFICATION	1.0224958909330463E-5	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999998730450972	WITHOUT_CLASSIFICATION	1.2695490275596052E-7	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999998730450972	WITHOUT_CLASSIFICATION	1.2695490275596052E-7	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9899503211602602	WITHOUT_CLASSIFICATION	0.010049678839739862	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9969565458392234	WITHOUT_CLASSIFICATION	0.0030434541607765745	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999999566468878	WITHOUT_CLASSIFICATION	4.335311218955043E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999999290191876	WITHOUT_CLASSIFICATION	7.098081244416548E-8	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998396316868896	WITHOUT_CLASSIFICATION	1.6036831311042044E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9995415054808825	WITHOUT_CLASSIFICATION	4.584945191174714E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9999992584416701	WITHOUT_CLASSIFICATION	7.415583297982941E-7	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999998824653535	WITHOUT_CLASSIFICATION	1.1753464641109466E-7	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993787775579095	WITHOUT_CLASSIFICATION	6.21222442090455E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993787775579095	WITHOUT_CLASSIFICATION	6.21222442090455E-4	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.995263270983644	WITHOUT_CLASSIFICATION	0.004736729016355938	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999986250441164	WITHOUT_CLASSIFICATION	1.3749558836180676E-6	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999986250441164	WITHOUT_CLASSIFICATION	1.3749558836180676E-6	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993156528075492	WITHOUT_CLASSIFICATION	6.843471924508278E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.999999217967862	WITHOUT_CLASSIFICATION	7.820321380264082E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9955071055209007	WITHOUT_CLASSIFICATION	0.004492894479099275	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999994355175561	WITHOUT_CLASSIFICATION	5.644824438777348E-7	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999435607528	WITHOUT_CLASSIFICATION	5.6439247238360533E-8	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999964140818779	WITHOUT_CLASSIFICATION	3.585918122170456E-6	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999938840027255	WITHOUT_CLASSIFICATION	6.115997274596131E-6	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9995986448789895	WITHOUT_CLASSIFICATION	4.0135512101049714E-4	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.997995100300169	WITHOUT_CLASSIFICATION	0.002004899699831018	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9957095882736311	WITHOUT_CLASSIFICATION	0.0042904117263689685	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999929602606888	WITHOUT_CLASSIFICATION	7.039739311193337E-5	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.972664809453672	WITHOUT_CLASSIFICATION	0.027335190546328037	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999465065487947	WITHOUT_CLASSIFICATION	5.349345120532366E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999465065487947	WITHOUT_CLASSIFICATION	5.349345120532366E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999465065487947	WITHOUT_CLASSIFICATION	5.349345120532366E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999465065487947	WITHOUT_CLASSIFICATION	5.349345120532366E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999996532219922	WITHOUT_CLASSIFICATION	3.467780077194927E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999966477051292	WITHOUT_CLASSIFICATION	3.3522948707585556E-6	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999937069042188	WITHOUT_CLASSIFICATION	6.2930957810831886E-6	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9999177466731565	WITHOUT_CLASSIFICATION	8.225332684359148E-5	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9997003433905788	WITHOUT_CLASSIFICATION	2.996566094212629E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999903999100253	WITHOUT_CLASSIFICATION	9.600089974787506E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9852464528466227	WITHOUT_CLASSIFICATION	0.014753547153377325	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.999963979636523	WITHOUT_CLASSIFICATION	3.602036347710091E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999992058074436	WITHOUT_CLASSIFICATION	7.941925564325005E-7	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999978925418074	WITHOUT_CLASSIFICATION	2.107458192669681E-6	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9999811165757977	WITHOUT_CLASSIFICATION	1.8883424202370955E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999160606615808	WITHOUT_CLASSIFICATION	8.393933841925373E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9929023800502412	WITHOUT_CLASSIFICATION	0.007097619949758734	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9704547785564882	WITHOUT_CLASSIFICATION	0.029545221443511797	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999978566783813	WITHOUT_CLASSIFICATION	2.1433216187294145E-6	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999160606615808	WITHOUT_CLASSIFICATION	8.393933841925373E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.8609723143693119	WITHOUT_CLASSIFICATION	0.13902768563068815	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998431717217138	WITHOUT_CLASSIFICATION	1.5682827828634202E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999984251123913	WITHOUT_CLASSIFICATION	1.5748876086057047E-6	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9995151429212781	WITHOUT_CLASSIFICATION	4.848570787220008E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.954739013883426	WITHOUT_CLASSIFICATION	0.04526098611657405	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999846980934889	WITHOUT_CLASSIFICATION	1.5301906511094852E-5	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999962756683839	WITHOUT_CLASSIFICATION	3.724331616042524E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999719581570903	WITHOUT_CLASSIFICATION	2.804184290969733E-4	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998739636742415	WITHOUT_CLASSIFICATION	1.26036325758466E-4	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999996786655009	WITHOUT_CLASSIFICATION	3.2133449914431186E-7	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999679730435145	WITHOUT_CLASSIFICATION	3.202695648549487E-5	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999200560543093	WITHOUT_CLASSIFICATION	7.994394569073235E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999049845107344	WITHOUT_CLASSIFICATION	9.501548926550586E-5	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.8917713949637399	WITHOUT_CLASSIFICATION	0.1082286050362601	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999982839093648	WITHOUT_CLASSIFICATION	1.716090635129042E-6	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9721847006725954	WITHOUT_CLASSIFICATION	0.02781529932740467	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999719497614181	WITHOUT_CLASSIFICATION	2.805023858190028E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999894669448948	WITHOUT_CLASSIFICATION	1.0533055105330869E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998903596354031	WITHOUT_CLASSIFICATION	1.0964036459689835E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999894669448948	WITHOUT_CLASSIFICATION	1.0533055105330869E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999985696383058	WITHOUT_CLASSIFICATION	1.4303616941971568E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999997912076047	WITHOUT_CLASSIFICATION	2.0879239525740737E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9999976843346154	WITHOUT_CLASSIFICATION	2.315665384490243E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999887170440989	WITHOUT_CLASSIFICATION	1.1282955901117018E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999719497614181	WITHOUT_CLASSIFICATION	2.805023858190028E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998903596354031	WITHOUT_CLASSIFICATION	1.0964036459689835E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999985696383058	WITHOUT_CLASSIFICATION	1.4303616941971568E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999392514025721	WITHOUT_CLASSIFICATION	6.07485974279009E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.999815080049257	WITHOUT_CLASSIFICATION	1.8491995074300095E-4	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.99998589645512	WITHOUT_CLASSIFICATION	1.4103544880007147E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999746836191992	WITHOUT_CLASSIFICATION	2.5316380800860726E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.99998385991496	WITHOUT_CLASSIFICATION	1.6140085039988273E-5	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999959278818	WITHOUT_CLASSIFICATION	4.072118207039386E-9	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9906528815900306	WITHOUT_CLASSIFICATION	0.009347118409969449	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999997912076047	WITHOUT_CLASSIFICATION	2.0879239525740737E-7	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998936396174997	WITHOUT_CLASSIFICATION	1.0636038250028969E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999497876439484	WITHOUT_CLASSIFICATION	5.02123560516682E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999914480969324	WITHOUT_CLASSIFICATION	8.551903067689664E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9906528815900306	WITHOUT_CLASSIFICATION	0.009347118409969449	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999526909329238	WITHOUT_CLASSIFICATION	4.730906707609206E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9906528815900306	WITHOUT_CLASSIFICATION	0.009347118409969449	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999831752017952	WITHOUT_CLASSIFICATION	1.6824798204771357E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998936435911	WITHOUT_CLASSIFICATION	1.0635640882969994E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.999859842128779	WITHOUT_CLASSIFICATION	1.4015787122097055E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999917032982301	WITHOUT_CLASSIFICATION	8.29670176994028E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999996641331921	WITHOUT_CLASSIFICATION	3.358668079151849E-7	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999988797766195	WITHOUT_CLASSIFICATION	1.1202233804919502E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999047882180658	WITHOUT_CLASSIFICATION	9.521178193422003E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995860425087701	WITHOUT_CLASSIFICATION	4.139574912298745E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999991313550421	WITHOUT_CLASSIFICATION	8.68644957901547E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.999963981449664	WITHOUT_CLASSIFICATION	3.601855033596209E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999666203485305	WITHOUT_CLASSIFICATION	3.337965146952243E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999965122399197	WITHOUT_CLASSIFICATION	3.4877600803393107E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9955071055209007	WITHOUT_CLASSIFICATION	0.004492894479099275	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999812306994857	WITHOUT_CLASSIFICATION	1.8769300514211358E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999904562692018	WITHOUT_CLASSIFICATION	9.543730798207142E-5	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999978439547997	WITHOUT_CLASSIFICATION	2.156045200191573E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999972827414056	WITHOUT_CLASSIFICATION	2.717258594371166E-6	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998698733905109	WITHOUT_CLASSIFICATION	1.3012660948902877E-4	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.999929318797887	WITHOUT_CLASSIFICATION	7.068120211294666E-5	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999727706401782	WITHOUT_CLASSIFICATION	2.7229359821808474E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9880152002463678	WITHOUT_CLASSIFICATION	0.011984799753632149	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999981314521292	WITHOUT_CLASSIFICATION	1.8685478707784703E-6	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998745201099503	WITHOUT_CLASSIFICATION	1.2547989004973558E-4	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9948197281158241	WITHOUT_CLASSIFICATION	0.005180271884175971	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999939237635657	WITHOUT_CLASSIFICATION	6.076236434320805E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999962460330398	WITHOUT_CLASSIFICATION	3.7539669602632273E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998748266105	WITHOUT_CLASSIFICATION	1.2517338952589124E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.99997802874902	WITHOUT_CLASSIFICATION	2.197125098001959E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999240779788039	WITHOUT_CLASSIFICATION	7.59220211960964E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999974794614903	WITHOUT_CLASSIFICATION	2.5205385097481902E-6	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999759064186853	WITHOUT_CLASSIFICATION	2.409358131465853E-5	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999992756050369	WITHOUT_CLASSIFICATION	7.2439496321177E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.999982876292156	WITHOUT_CLASSIFICATION	1.7123707844054663E-5	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999758763097505	WITHOUT_CLASSIFICATION	2.4123690249540253E-5	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.996910919589804	WITHOUT_CLASSIFICATION	0.0030890804101960834	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999208062886	WITHOUT_CLASSIFICATION	7.919371138035173E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999526714180614	WITHOUT_CLASSIFICATION	4.7328581938490165E-5	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9999612153762577	WITHOUT_CLASSIFICATION	3.878462374237267E-5	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9973888442545723	WITHOUT_CLASSIFICATION	0.002611155745427729	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999937375123479	WITHOUT_CLASSIFICATION	6.262487652130517E-6	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9960055144172479	WITHOUT_CLASSIFICATION	0.0039944855827521095	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999787140516042	WITHOUT_CLASSIFICATION	2.1285948395845083E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.877321410021296	WITHOUT_CLASSIFICATION	0.12267858997870386	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999893340176927	WITHOUT_CLASSIFICATION	1.0665982307271136E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999893340176927	WITHOUT_CLASSIFICATION	1.0665982307271136E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9978715984807526	WITHOUT_CLASSIFICATION	0.002128401519247429	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995860425087701	WITHOUT_CLASSIFICATION	4.139574912298745E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9981064174129403	WITHOUT_CLASSIFICATION	0.0018935825870597803	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999993828738201	WITHOUT_CLASSIFICATION	6.171261798163536E-7	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999029332410837	WITHOUT_CLASSIFICATION	9.706675891623356E-5	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9993830881641619	WITHOUT_CLASSIFICATION	6.169118358382158E-4	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999946798377348	WITHOUT_CLASSIFICATION	5.3201622651248655E-6	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998342487556311	WITHOUT_CLASSIFICATION	1.6575124436894043E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9998054907241214	WITHOUT_CLASSIFICATION	1.9450927587852021E-4	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9989899334033548	WITHOUT_CLASSIFICATION	0.0010100665966451272	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999234921951703	WITHOUT_CLASSIFICATION	7.650780482967763E-5	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999724981528022	WITHOUT_CLASSIFICATION	2.7501847197793974E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9997821498054172	WITHOUT_CLASSIFICATION	2.1785019458272356E-4	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999951918820165	WITHOUT_CLASSIFICATION	4.808117983629489E-6	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999954761581004	WITHOUT_CLASSIFICATION	4.52384189965612E-6	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999892257863282	WITHOUT_CLASSIFICATION	1.0774213671750385E-5	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999998715600958	WITHOUT_CLASSIFICATION	1.2843990413352614E-7	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998277163673	WITHOUT_CLASSIFICATION	1.722836327756728E-7	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9995822511236038	WITHOUT_CLASSIFICATION	4.177488763962369E-4	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999281079617734	WITHOUT_CLASSIFICATION	7.189203822652317E-5	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999985666571758	WITHOUT_CLASSIFICATION	1.4333428241528166E-6	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998688791267948	WITHOUT_CLASSIFICATION	1.3112087320517544E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999936708436221	WITHOUT_CLASSIFICATION	6.329156377863082E-6	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999993479417871	WITHOUT_CLASSIFICATION	6.520582128389066E-7	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9960055144172479	WITHOUT_CLASSIFICATION	0.0039944855827521095	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999845541936158	WITHOUT_CLASSIFICATION	1.5445806384181968E-5	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9996783576159729	WITHOUT_CLASSIFICATION	3.216423840271488E-4	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999949431685843	WITHOUT_CLASSIFICATION	5.056831415755739E-6	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998844941527932	WITHOUT_CLASSIFICATION	1.1550584720677846E-4	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999963225329838	WITHOUT_CLASSIFICATION	3.6774670163387706E-6	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999972183411422	WITHOUT_CLASSIFICATION	2.7816588578114823E-6	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999910768222727	WITHOUT_CLASSIFICATION	8.923177727268264E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999895617909106	WITHOUT_CLASSIFICATION	1.0438209089389055E-5	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999622623084583	WITHOUT_CLASSIFICATION	3.773769154170238E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999664550018796	WITHOUT_CLASSIFICATION	3.35449981204184E-5	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999294773372608	WITHOUT_CLASSIFICATION	7.052266273920618E-5	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999974254776249	WITHOUT_CLASSIFICATION	2.5745223750457597E-6	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9991707981784985	WITHOUT_CLASSIFICATION	8.292018215013865E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9969247347361501	WITHOUT_CLASSIFICATION	0.003075265263849846	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995472312977858	WITHOUT_CLASSIFICATION	4.527687022143084E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9995472312977858	WITHOUT_CLASSIFICATION	4.527687022143084E-4	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999970905419026	WITHOUT_CLASSIFICATION	2.9094580975101194E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999995423425144	WITHOUT_CLASSIFICATION	4.5765748551979343E-7	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999115379591205	WITHOUT_CLASSIFICATION	8.846204087956522E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999115379591205	WITHOUT_CLASSIFICATION	8.846204087956522E-5	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999975665308947	WITHOUT_CLASSIFICATION	2.433469105349612E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9999853518587629	WITHOUT_CLASSIFICATION	1.4648141237021408E-5	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9976762707489997	WITHOUT_CLASSIFICATION	0.0023237292510003052	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998872179019468	WITHOUT_CLASSIFICATION	1.1278209805316833E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999965620070297	WITHOUT_CLASSIFICATION	3.437992970344762E-6	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999991104448698	WITHOUT_CLASSIFICATION	8.89555130189335E-7	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998236012249	WITHOUT_CLASSIFICATION	1.7639877527400713E-7	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998236012249	WITHOUT_CLASSIFICATION	1.7639877527400713E-7	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999523297195	WITHOUT_CLASSIFICATION	4.767028049891298E-7	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.999954710024765	WITHOUT_CLASSIFICATION	4.528997523500255E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999964684680943	WITHOUT_CLASSIFICATION	3.5315319056355407E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999982188323451	WITHOUT_CLASSIFICATION	1.7811676549031942E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999982188323451	WITHOUT_CLASSIFICATION	1.7811676549031942E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999992204111379	WITHOUT_CLASSIFICATION	7.795888621306645E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999988972040934	WITHOUT_CLASSIFICATION	1.102795906673983E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998087651047076	WITHOUT_CLASSIFICATION	1.912348952924892E-4	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999977437233654	WITHOUT_CLASSIFICATION	2.2562766345410606E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997956012085668	WITHOUT_CLASSIFICATION	2.0439879143332345E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999998497776095	WITHOUT_CLASSIFICATION	1.5022239059058024E-7	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999979484053311	WITHOUT_CLASSIFICATION	2.0515946689856005E-6	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999989573130037	WITHOUT_CLASSIFICATION	1.0426869962794915E-6	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999995707860414	WITHOUT_CLASSIFICATION	4.292139586909709E-7	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999546130691847	WITHOUT_CLASSIFICATION	4.538693081538393E-5	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998699280018596	WITHOUT_CLASSIFICATION	1.3007199814042258E-4	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9985831288312003	WITHOUT_CLASSIFICATION	0.0014168711687997815	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9992820596267529	WITHOUT_CLASSIFICATION	7.179403732470394E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999997436038923	WITHOUT_CLASSIFICATION	2.5639610771074207E-7	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999991540326527	WITHOUT_CLASSIFICATION	8.459673472164505E-7	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999998938445392	WITHOUT_CLASSIFICATION	1.0615546066456008E-7	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999973084932594	WITHOUT_CLASSIFICATION	2.6915067405974495E-5	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.999989674236371	WITHOUT_CLASSIFICATION	1.0325763628994089E-5	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999986008440465	WITHOUT_CLASSIFICATION	1.3991559535576205E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999797061035128	WITHOUT_CLASSIFICATION	2.0293896487176625E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999947728974634	WITHOUT_CLASSIFICATION	5.227102536581205E-6	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9797064428331431	WITHOUT_CLASSIFICATION	0.02029355716685684	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9812649710459993	WITHOUT_CLASSIFICATION	0.01873502895400067	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999983456259174	WITHOUT_CLASSIFICATION	1.6543740827045188E-6	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9990074350553249	WITHOUT_CLASSIFICATION	9.925649446751118E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999985234454805	WITHOUT_CLASSIFICATION	1.4765545194879465E-6	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999982419407257	WITHOUT_CLASSIFICATION	1.758059274233401E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999899083319432	WITHOUT_CLASSIFICATION	1.0091668056858111E-5	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999728103346	WITHOUT_CLASSIFICATION	2.7189665457806478E-8	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999615428619577	WITHOUT_CLASSIFICATION	3.8457138042375045E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999864940421179	WITHOUT_CLASSIFICATION	1.350595788197928E-5	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9766221116736788	WITHOUT_CLASSIFICATION	0.023377888326321195	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999983111270699	WITHOUT_CLASSIFICATION	1.6888729300905174E-5	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999756568643314	WITHOUT_CLASSIFICATION	2.4343135668639904E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999620446145405	WITHOUT_CLASSIFICATION	3.7955385459480996E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999771995157434	WITHOUT_CLASSIFICATION	2.2800484256666954E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999543231627788	WITHOUT_CLASSIFICATION	4.567683722114581E-5	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999987103223644	WITHOUT_CLASSIFICATION	1.28967763551338E-6	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999935827501933	WITHOUT_CLASSIFICATION	6.417249806596784E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999934055721484	WITHOUT_CLASSIFICATION	6.594427851532207E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999833677822047	WITHOUT_CLASSIFICATION	1.6632217795302173E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999984475874997	WITHOUT_CLASSIFICATION	1.552412500281498E-6	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999986331542416	WITHOUT_CLASSIFICATION	1.3668457583097997E-6	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999464346872236	WITHOUT_CLASSIFICATION	5.3565312776470955E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999989056159803	WITHOUT_CLASSIFICATION	1.0943840197432083E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999994159828614	WITHOUT_CLASSIFICATION	5.840171385972576E-7	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999938977504566	WITHOUT_CLASSIFICATION	6.102249543447564E-6	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999610661511285	WITHOUT_CLASSIFICATION	3.893384887151981E-5	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998452980161395	WITHOUT_CLASSIFICATION	1.5470198386036555E-4	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999995234038654	WITHOUT_CLASSIFICATION	4.7659613450788156E-7	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9998394940169446	WITHOUT_CLASSIFICATION	1.6050598305538722E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.99999021912406	WITHOUT_CLASSIFICATION	9.780875939991072E-6	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.999454654458301	WITHOUT_CLASSIFICATION	5.453455416989314E-4	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999970932518	WITHOUT_CLASSIFICATION	2.9067481582925245E-9	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999990136106721	WITHOUT_CLASSIFICATION	9.863893279082985E-7	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9996280806096332	WITHOUT_CLASSIFICATION	3.71919390366926E-4	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999867365593161	WITHOUT_CLASSIFICATION	1.326344068382723E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999998710253415	WITHOUT_CLASSIFICATION	1.2897465840735194E-7	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998581081299049	WITHOUT_CLASSIFICATION	1.4189187009498792E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999904910038818	WITHOUT_CLASSIFICATION	9.508996118202246E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999903677498813	WITHOUT_CLASSIFICATION	9.632250118725089E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999903677498813	WITHOUT_CLASSIFICATION	9.632250118725089E-6	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999986351660166	WITHOUT_CLASSIFICATION	1.3648339834207636E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9696173799601796	WITHOUT_CLASSIFICATION	0.030382620039820372	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999990713298166	WITHOUT_CLASSIFICATION	9.28670183436319E-7	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999888403866333	WITHOUT_CLASSIFICATION	1.1159613366733522E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999996264378813	WITHOUT_CLASSIFICATION	3.73562118655714E-7	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999448803685802	WITHOUT_CLASSIFICATION	5.511963141980662E-5	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9990698235928366	WITHOUT_CLASSIFICATION	9.30176407163492E-4	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999263590237268	WITHOUT_CLASSIFICATION	7.364097627309067E-5	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999996101050815	WITHOUT_CLASSIFICATION	3.898949185321059E-7	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.999999723684087	WITHOUT_CLASSIFICATION	2.7631591307022515E-7	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999794468903013	WITHOUT_CLASSIFICATION	2.0553109698731443E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999100754913675	WITHOUT_CLASSIFICATION	8.992450863251522E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999998279297887	WITHOUT_CLASSIFICATION	1.7207021129718857E-6	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9996397083053079	WITHOUT_CLASSIFICATION	3.602916946920346E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992978159441619	WITHOUT_CLASSIFICATION	7.021840558380588E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9992978159441619	WITHOUT_CLASSIFICATION	7.021840558380588E-4	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999992057743277	WITHOUT_CLASSIFICATION	7.942256722070084E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995063953912163	WITHOUT_CLASSIFICATION	4.936046087837955E-4	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999906982327903	WITHOUT_CLASSIFICATION	9.301767209755493E-6	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999982658628037	WITHOUT_CLASSIFICATION	1.734137196229928E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999854641917973	WITHOUT_CLASSIFICATION	1.4535808202579125E-5	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972892273088	WITHOUT_CLASSIFICATION	2.7107726911414148E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999988330103063	WITHOUT_CLASSIFICATION	1.1669896936338655E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.8980737776288459	WITHOUT_CLASSIFICATION	0.10192622237115405	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999950447519284	WITHOUT_CLASSIFICATION	4.955248071601281E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9969239756723871	WITHOUT_CLASSIFICATION	0.0030760243276128055	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9998695910852047	WITHOUT_CLASSIFICATION	1.3040891479535334E-4	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999789563781107	WITHOUT_CLASSIFICATION	2.1043621889192715E-5	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9994780098550174	WITHOUT_CLASSIFICATION	5.21990144982561E-4	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999737218493903	WITHOUT_CLASSIFICATION	2.627815060975612E-5	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.674824416621843	DESIGN	0.325175583378157	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.994533836555069	WITHOUT_CLASSIFICATION	0.005466163444930975	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.8930321001072277	WITHOUT_CLASSIFICATION	0.10696789989277233	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999952827841708	WITHOUT_CLASSIFICATION	4.717215829219051E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999925862455429	WITHOUT_CLASSIFICATION	7.413754457133748E-6	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998691806781674	WITHOUT_CLASSIFICATION	1.3081932183253966E-4	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.999987068481947	WITHOUT_CLASSIFICATION	1.2931518053068783E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999984659718436	WITHOUT_CLASSIFICATION	1.534028156410916E-6	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9998949184593129	WITHOUT_CLASSIFICATION	1.0508154068713643E-4	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999577503144483	WITHOUT_CLASSIFICATION	4.224968555157338E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9997244764727873	WITHOUT_CLASSIFICATION	2.755235272126582E-4	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999844471254662	WITHOUT_CLASSIFICATION	1.5552874533818517E-5	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999914836885	WITHOUT_CLASSIFICATION	8.516311614176589E-9	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9987070811101822	WITHOUT_CLASSIFICATION	0.0012929188898177196	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999833148751123	WITHOUT_CLASSIFICATION	1.668512488773491E-5	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999838738656867	WITHOUT_CLASSIFICATION	1.6126134313240323E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9729935821482738	WITHOUT_CLASSIFICATION	0.027006417851726205	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999957689582969	WITHOUT_CLASSIFICATION	4.231041703117151E-6	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999252964391304	WITHOUT_CLASSIFICATION	7.470356086958552E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999916420306045	WITHOUT_CLASSIFICATION	8.357969395423403E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9899623373567991	WITHOUT_CLASSIFICATION	0.010037662643200888	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998487021727313	WITHOUT_CLASSIFICATION	1.5129782726861028E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999997809000204	WITHOUT_CLASSIFICATION	2.1909997953770747E-7	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998515686271199	WITHOUT_CLASSIFICATION	1.4843137288012584E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999990677587102	WITHOUT_CLASSIFICATION	9.322412898187861E-7	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.7556458957211706	DESIGN	0.2443541042788295	WITHOUT_CLASSIFICATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9716471340423543	WITHOUT_CLASSIFICATION	0.028352865957645815	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9716471340423543	WITHOUT_CLASSIFICATION	0.028352865957645815	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999983478790343	WITHOUT_CLASSIFICATION	1.6521209657189562E-6	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.5949206172274507	WITHOUT_CLASSIFICATION	0.4050793827725492	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.99994621315688	WITHOUT_CLASSIFICATION	5.378684312008379E-5	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9991501786007226	WITHOUT_CLASSIFICATION	8.498213992773897E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999977372221591	WITHOUT_CLASSIFICATION	2.262777840896256E-5	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9982212805651858	WITHOUT_CLASSIFICATION	0.0017787194348142764	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.991073151606335	WITHOUT_CLASSIFICATION	0.008926848393665017	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999921486258541	WITHOUT_CLASSIFICATION	7.851374145957963E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9206512610308546	DESIGN	0.0793487389691454	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997935879149	WITHOUT_CLASSIFICATION	2.064120850779787E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999701405169	WITHOUT_CLASSIFICATION	2.98594831025674E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9914500850204324	WITHOUT_CLASSIFICATION	0.008549914979567629	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9996148231259984	WITHOUT_CLASSIFICATION	3.851768740017072E-4	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999964834365845	WITHOUT_CLASSIFICATION	3.516563415502794E-5	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9937725603128801	WITHOUT_CLASSIFICATION	0.006227439687119893	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9997207039372044	WITHOUT_CLASSIFICATION	2.7929606279564564E-4	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999753489210588	WITHOUT_CLASSIFICATION	2.4651078941182013E-5	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999908681383199	WITHOUT_CLASSIFICATION	9.131861680026219E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9968395111295612	WITHOUT_CLASSIFICATION	0.0031604888704388117	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999996472182476	WITHOUT_CLASSIFICATION	3.527817523542795E-7	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999962227543405	WITHOUT_CLASSIFICATION	3.777245659486297E-6	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9980911882772754	WITHOUT_CLASSIFICATION	0.001908811722724646	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999957952438311	WITHOUT_CLASSIFICATION	4.204756168847463E-6	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9508151058361638	WITHOUT_CLASSIFICATION	0.04918489416383622	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999942311480421	WITHOUT_CLASSIFICATION	5.768851957990487E-6	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999953728980401	WITHOUT_CLASSIFICATION	4.62710195999818E-6	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.978715803413743	WITHOUT_CLASSIFICATION	0.021284196586257062	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999457657329744	WITHOUT_CLASSIFICATION	5.423426702565862E-5	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9974562185880734	WITHOUT_CLASSIFICATION	0.0025437814119265247	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999316148750603	WITHOUT_CLASSIFICATION	6.838512493967226E-5	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9997965663906966	WITHOUT_CLASSIFICATION	2.034336093033755E-4	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999000288597755	WITHOUT_CLASSIFICATION	9.99711402245292E-5	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999863165923	WITHOUT_CLASSIFICATION	1.3683407725562224E-8	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.999983063223202	WITHOUT_CLASSIFICATION	1.6936776798065537E-5	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999907194958324	WITHOUT_CLASSIFICATION	9.280504167711657E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9927973582696618	WITHOUT_CLASSIFICATION	0.0072026417303382925	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999937669134463	WITHOUT_CLASSIFICATION	6.233086553578096E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999996498647448	WITHOUT_CLASSIFICATION	3.501352551966569E-7	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9791920782817919	WITHOUT_CLASSIFICATION	0.020807921718208125	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999776434049472	WITHOUT_CLASSIFICATION	2.235659505283071E-5	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999931631008513	WITHOUT_CLASSIFICATION	6.836899148712788E-6	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9900821632166125	WITHOUT_CLASSIFICATION	0.00991783678338747	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999975279715207	WITHOUT_CLASSIFICATION	2.472028479290309E-5	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999952971312503	WITHOUT_CLASSIFICATION	4.702868749677389E-6	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9981394325211056	WITHOUT_CLASSIFICATION	0.001860567478894421	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9993163344293171	WITHOUT_CLASSIFICATION	6.836655706828412E-4	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9979131352723255	WITHOUT_CLASSIFICATION	0.0020868647276743924	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999998279297887	WITHOUT_CLASSIFICATION	1.7207021129718857E-6	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999988567740443	WITHOUT_CLASSIFICATION	1.1432259555817155E-6	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999805459565415	WITHOUT_CLASSIFICATION	1.9454043458497924E-4	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9891769460858189	WITHOUT_CLASSIFICATION	0.010823053914181176	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9335957946187026	DESIGN	0.0664042053812975	WITHOUT_CLASSIFICATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9995207422725706	WITHOUT_CLASSIFICATION	4.792577274293764E-4	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9880292344673497	WITHOUT_CLASSIFICATION	0.011970765532650402	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9054664419791741	WITHOUT_CLASSIFICATION	0.09453355802082578	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999618577518875	WITHOUT_CLASSIFICATION	3.8142248112505047E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995251189069	WITHOUT_CLASSIFICATION	4.74881093108809E-7	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9985763993246156	WITHOUT_CLASSIFICATION	0.001423600675384431	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9558028069380387	DESIGN	0.04419719306196144	WITHOUT_CLASSIFICATION
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999940244657424	WITHOUT_CLASSIFICATION	5.975534257690027E-6	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9986805359225656	WITHOUT_CLASSIFICATION	0.0013194640774343667	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999803906468334	WITHOUT_CLASSIFICATION	1.9609353166567725E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959669162412627	WITHOUT_CLASSIFICATION	0.0040330837587373445	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999972504996328	WITHOUT_CLASSIFICATION	2.749500367102095E-6	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999980832691567	WITHOUT_CLASSIFICATION	1.916730843297269E-5	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999912594642028	WITHOUT_CLASSIFICATION	8.740535797259876E-6	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9917278544080617	WITHOUT_CLASSIFICATION	0.008272145591938293	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959669162412627	WITHOUT_CLASSIFICATION	0.0040330837587373445	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9827315636560956	WITHOUT_CLASSIFICATION	0.017268436343904334	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999615342160385	WITHOUT_CLASSIFICATION	3.8465783961570125E-5	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9958516161805776	WITHOUT_CLASSIFICATION	0.004148383819422343	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9997437807441512	WITHOUT_CLASSIFICATION	2.5621925584891006E-4	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998570740405347	WITHOUT_CLASSIFICATION	1.4292595946542306E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9996997292854103	WITHOUT_CLASSIFICATION	3.0027071458969893E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999447107285097	WITHOUT_CLASSIFICATION	5.5289271490380225E-5	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.952024722629112	DESIGN	0.047975277370888074	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999716811332	WITHOUT_CLASSIFICATION	2.831886679307747E-7	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999550057048527	WITHOUT_CLASSIFICATION	4.4994295147232605E-5	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.997888612183579	WITHOUT_CLASSIFICATION	0.0021113878164209805	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.999995333218366	WITHOUT_CLASSIFICATION	4.666781634000493E-6	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999527115070937	WITHOUT_CLASSIFICATION	4.728849290617299E-5	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999445123628166	WITHOUT_CLASSIFICATION	5.548763718341685E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999929389500578	WITHOUT_CLASSIFICATION	7.061049942217952E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999993479417871	WITHOUT_CLASSIFICATION	6.520582128389066E-7	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999983103641564	WITHOUT_CLASSIFICATION	1.6896358436037918E-6	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999968644962584	WITHOUT_CLASSIFICATION	3.135503741622674E-6	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9836548915112604	WITHOUT_CLASSIFICATION	0.016345108488739584	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998300915108314	WITHOUT_CLASSIFICATION	1.6990848916870443E-4	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999969068667146	WITHOUT_CLASSIFICATION	3.093133285346337E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9994421400723441	WITHOUT_CLASSIFICATION	5.578599276559193E-4	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999973758199902	WITHOUT_CLASSIFICATION	2.624180009856125E-6	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.99999906466528	WITHOUT_CLASSIFICATION	9.353347201114322E-7	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999994118992829	WITHOUT_CLASSIFICATION	5.881007170819925E-7	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999946603553742	WITHOUT_CLASSIFICATION	5.3396446258098246E-6	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9236302434046275	WITHOUT_CLASSIFICATION	0.07636975659537247	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9944178753360509	WITHOUT_CLASSIFICATION	0.005582124663949095	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.995804299482155	WITHOUT_CLASSIFICATION	0.004195700517844968	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9996933192280332	DESIGN	3.066807719668662E-4	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9999994502422528	WITHOUT_CLASSIFICATION	5.49757747291674E-7	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.748809125273212	WITHOUT_CLASSIFICATION	0.251190874726788	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.7799998250588548	WITHOUT_CLASSIFICATION	0.2200001749411453	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999860708413335	WITHOUT_CLASSIFICATION	1.3929158666454627E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.99999996007404	WITHOUT_CLASSIFICATION	3.992595999449522E-8	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999967455198306	WITHOUT_CLASSIFICATION	3.2544801693191297E-6	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9997194777961163	WITHOUT_CLASSIFICATION	2.8052220388381663E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999831772112053	WITHOUT_CLASSIFICATION	1.6822788794677734E-5	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999987363333732	WITHOUT_CLASSIFICATION	1.2636666267600921E-6	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999551845756356	WITHOUT_CLASSIFICATION	4.4815424364380764E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9977040050436109	WITHOUT_CLASSIFICATION	0.0022959949563890296	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9977040050436109	WITHOUT_CLASSIFICATION	0.0022959949563890296	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999919861476617	WITHOUT_CLASSIFICATION	8.013852338296197E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999997059194798	WITHOUT_CLASSIFICATION	2.94080520210357E-6	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999484164554691	WITHOUT_CLASSIFICATION	5.158354453091373E-5	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9550430374438167	DESIGN	0.04495696255618327	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999999290191876	WITHOUT_CLASSIFICATION	7.098081244416548E-8	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999999290191876	WITHOUT_CLASSIFICATION	7.098081244416548E-8	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999968709364871	WITHOUT_CLASSIFICATION	3.1290635128239378E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999640194416436	WITHOUT_CLASSIFICATION	3.598055835630865E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998993558699689	WITHOUT_CLASSIFICATION	1.0064413003102916E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999589572052967	WITHOUT_CLASSIFICATION	4.104279470335246E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9962789598849155	WITHOUT_CLASSIFICATION	0.0037210401150843944	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999962657861632	WITHOUT_CLASSIFICATION	3.7342138367664377E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999998115767114	WITHOUT_CLASSIFICATION	1.8842328859792225E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999972350211543	WITHOUT_CLASSIFICATION	2.7649788456334744E-6	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9888421517000257	WITHOUT_CLASSIFICATION	0.011157848299974366	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999326233281373	WITHOUT_CLASSIFICATION	6.73766718627679E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999326233281373	WITHOUT_CLASSIFICATION	6.73766718627679E-5	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9997726149591056	WITHOUT_CLASSIFICATION	2.2738504089432542E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999977050091765	WITHOUT_CLASSIFICATION	2.2949908236036663E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999993764233644	WITHOUT_CLASSIFICATION	6.235766354883784E-7	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9997030304621459	WITHOUT_CLASSIFICATION	2.9696953785410024E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999419532872955	WITHOUT_CLASSIFICATION	5.8046712704498275E-5	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991672130002426	WITHOUT_CLASSIFICATION	8.327869997573278E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858641978587	WITHOUT_CLASSIFICATION	1.413580214113987E-5	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999990476347915	WITHOUT_CLASSIFICATION	9.523652085552788E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999453983484791	WITHOUT_CLASSIFICATION	5.460165152090066E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9972752301201322	WITHOUT_CLASSIFICATION	0.0027247698798676936	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9511734600068247	WITHOUT_CLASSIFICATION	0.04882653999317544	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999550057048527	WITHOUT_CLASSIFICATION	4.4994295147232605E-5	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.999008456095576	WITHOUT_CLASSIFICATION	9.91543904423981E-4	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999990763452925	WITHOUT_CLASSIFICATION	9.23654707489929E-6	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999770257798332	WITHOUT_CLASSIFICATION	2.297422016683393E-5	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999951586039421	WITHOUT_CLASSIFICATION	4.8413960580303626E-6	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999941068551799	WITHOUT_CLASSIFICATION	5.89314482019618E-6	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999851058970856	WITHOUT_CLASSIFICATION	1.4894102914411507E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9674363527144884	WITHOUT_CLASSIFICATION	0.03256364728551164	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997215245604032	WITHOUT_CLASSIFICATION	2.7847543959676907E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999730603045244	WITHOUT_CLASSIFICATION	2.6939695475595043E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997887917173846	WITHOUT_CLASSIFICATION	2.1120828261558455E-4	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9997887917173846	WITHOUT_CLASSIFICATION	2.1120828261558455E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999160606615808	WITHOUT_CLASSIFICATION	8.393933841925373E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999427522394828	WITHOUT_CLASSIFICATION	5.724776051716894E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991117480339013	WITHOUT_CLASSIFICATION	8.882519660985354E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9978506632159319	WITHOUT_CLASSIFICATION	0.0021493367840681146	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998811403852	WITHOUT_CLASSIFICATION	1.1885961482768506E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9998593306389271	WITHOUT_CLASSIFICATION	1.4066936107289693E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999982839093648	WITHOUT_CLASSIFICATION	1.716090635129042E-6	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9981735576443533	WITHOUT_CLASSIFICATION	0.001826442355646694	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999392514025721	WITHOUT_CLASSIFICATION	6.07485974279009E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999809286001073	WITHOUT_CLASSIFICATION	1.9071399892629553E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9906528815900306	WITHOUT_CLASSIFICATION	0.009347118409969449	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.7338155148330809	WITHOUT_CLASSIFICATION	0.266184485166919	DESIGN
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.943267071752219	WITHOUT_CLASSIFICATION	0.05673292824778099	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999960941817565	WITHOUT_CLASSIFICATION	3.905818243436379E-6	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8284254153876358	WITHOUT_CLASSIFICATION	0.1715745846123641	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999828887556867	WITHOUT_CLASSIFICATION	1.711124431321504E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9239620298886025	WITHOUT_CLASSIFICATION	0.07603797011139743	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999962129421033	WITHOUT_CLASSIFICATION	3.7870578967320066E-6	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999852150305928	WITHOUT_CLASSIFICATION	1.4784969407256641E-5	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.999642864667743	WITHOUT_CLASSIFICATION	3.5713533225698474E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999997077265971	WITHOUT_CLASSIFICATION	2.9227340287202165E-7	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9998816837833892	WITHOUT_CLASSIFICATION	1.1831621661087771E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9998087651047076	WITHOUT_CLASSIFICATION	1.912348952924892E-4	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999851358	WITHOUT_CLASSIFICATION	1.486417914927565E-11	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999538174281484	WITHOUT_CLASSIFICATION	4.618257185159821E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999538174281484	WITHOUT_CLASSIFICATION	4.618257185159821E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999173403708996	WITHOUT_CLASSIFICATION	8.26596291004094E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.880512532549862	WITHOUT_CLASSIFICATION	0.119487467450138	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999802107008429	WITHOUT_CLASSIFICATION	1.978929915715478E-5	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9149786135764318	WITHOUT_CLASSIFICATION	0.0850213864235681	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999790857006743	WITHOUT_CLASSIFICATION	2.0914299325654147E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9582805594805414	WITHOUT_CLASSIFICATION	0.041719440519458625	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9990869526248992	DESIGN	9.130473751007426E-4	WITHOUT_CLASSIFICATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9652033438622085	WITHOUT_CLASSIFICATION	0.034796656137791496	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8418411086209807	WITHOUT_CLASSIFICATION	0.15815889137901926	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8418411086209807	WITHOUT_CLASSIFICATION	0.15815889137901926	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9994062371899617	WITHOUT_CLASSIFICATION	5.937628100384194E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999600065851226	WITHOUT_CLASSIFICATION	3.999341487737114E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9818723984523441	WITHOUT_CLASSIFICATION	0.018127601547655945	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7520088876702732	WITHOUT_CLASSIFICATION	0.24799111232972687	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7520088876702732	WITHOUT_CLASSIFICATION	0.24799111232972687	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.5399511627608292	WITHOUT_CLASSIFICATION	0.46004883723917067	DESIGN
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.5399511627608292	WITHOUT_CLASSIFICATION	0.46004883723917067	DESIGN
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9608967205789501	WITHOUT_CLASSIFICATION	0.03910327942104982	DESIGN
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.943961244050022	DESIGN	0.05603875594997797	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.943961244050022	DESIGN	0.05603875594997797	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.8799515633729942	DESIGN	0.12004843662700572	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999600065851226	WITHOUT_CLASSIFICATION	3.999341487737114E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.99092082235533	WITHOUT_CLASSIFICATION	0.009079177644670009	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9998682448951143	WITHOUT_CLASSIFICATION	1.3175510488582778E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999992789138649	WITHOUT_CLASSIFICATION	7.210861352247279E-7	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.7334232311080396	WITHOUT_CLASSIFICATION	0.26657676889196036	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.9888719902850832	WITHOUT_CLASSIFICATION	0.011128009714916827	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9990895772835142	WITHOUT_CLASSIFICATION	9.104227164858706E-4	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9997658916900534	WITHOUT_CLASSIFICATION	2.3410830994668292E-4	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.5215160232374587	WITHOUT_CLASSIFICATION	0.47848397676254134	DESIGN
// todo : what else to do here?	DESIGN	0.9582805594805414	WITHOUT_CLASSIFICATION	0.041719440519458625	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9997271313050645	WITHOUT_CLASSIFICATION	2.728686949355227E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9582805594805414	WITHOUT_CLASSIFICATION	0.041719440519458625	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9999865130119773	WITHOUT_CLASSIFICATION	1.348698802272171E-5	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9999536584956581	WITHOUT_CLASSIFICATION	4.634150434188092E-5	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.5830243546672679	WITHOUT_CLASSIFICATION	0.4169756453327321	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9990869526248992	DESIGN	9.130473751007426E-4	WITHOUT_CLASSIFICATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9910956055409922	WITHOUT_CLASSIFICATION	0.00890439445900784	DESIGN
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9889933196212793	WITHOUT_CLASSIFICATION	0.011006680378720693	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9981376467826537	WITHOUT_CLASSIFICATION	0.0018623532173463627	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.7093877961236112	DESIGN	0.2906122038763887	WITHOUT_CLASSIFICATION
// todo : what is the implication of this?	DESIGN	0.9513458515546775	WITHOUT_CLASSIFICATION	0.048654148445322516	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.996355794920861	WITHOUT_CLASSIFICATION	0.0036442050791390154	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9585655689171985	DESIGN	0.04143443108280148	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.5130967810676007	DESIGN	0.48690321893239935	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9999991465739134	WITHOUT_CLASSIFICATION	8.534260865761715E-7	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.5116125903274704	WITHOUT_CLASSIFICATION	0.48838740967252947	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9994823032326441	WITHOUT_CLASSIFICATION	5.176967673558775E-4	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9719915130363543	DESIGN	0.028008486963645607	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9997986051156844	WITHOUT_CLASSIFICATION	2.0139488431561572E-4	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9998047572998193	DESIGN	1.9524270018059635E-4	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9053632434300811	WITHOUT_CLASSIFICATION	0.09463675656991892	DESIGN
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9682597941642496	DESIGN	0.03174020583575036	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9970896685971667	WITHOUT_CLASSIFICATION	0.00291033140283322	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9970896685971667	WITHOUT_CLASSIFICATION	0.00291033140283322	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.8016228923679103	WITHOUT_CLASSIFICATION	0.19837710763208966	DESIGN
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9984649392694571	WITHOUT_CLASSIFICATION	0.0015350607305428274	DESIGN
//TODO possibly relax that	DESIGN	0.9998908669646281	WITHOUT_CLASSIFICATION	1.091330353719132E-4	DESIGN
//TODO possibly relax that	DESIGN	0.9998908669646281	WITHOUT_CLASSIFICATION	1.091330353719132E-4	DESIGN
//TODO possibly relax that	DESIGN	0.9998908669646281	WITHOUT_CLASSIFICATION	1.091330353719132E-4	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9053632434300811	WITHOUT_CLASSIFICATION	0.09463675656991892	DESIGN
//use a degenerated strategy for backward compatibility	DESIGN	0.9994343867206437	WITHOUT_CLASSIFICATION	5.656132793562456E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9999941003378742	WITHOUT_CLASSIFICATION	5.899662125873119E-6	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9963228896878297	WITHOUT_CLASSIFICATION	0.0036771103121703806	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9999895872677815	WITHOUT_CLASSIFICATION	1.0412732218338758E-5	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5232384581179287	DESIGN	0.4767615418820714	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9987106185506606	WITHOUT_CLASSIFICATION	0.0012893814493395235	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8418411086209807	WITHOUT_CLASSIFICATION	0.15815889137901926	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8418411086209807	WITHOUT_CLASSIFICATION	0.15815889137901926	DESIGN
//yuck!	DESIGN	0.9943809799671287	WITHOUT_CLASSIFICATION	0.005619020032871232	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.8418411086209807	WITHOUT_CLASSIFICATION	0.15815889137901926	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9001132067092499	DESIGN	0.0998867932907502	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9987869344469742	WITHOUT_CLASSIFICATION	0.0012130655530257699	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9994437091978468	WITHOUT_CLASSIFICATION	5.562908021532195E-4	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9998876699317112	WITHOUT_CLASSIFICATION	1.1233006828885518E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.996302897138165	WITHOUT_CLASSIFICATION	0.0036971028618350025	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9984531390675417	WITHOUT_CLASSIFICATION	0.0015468609324582213	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.992333196543198	WITHOUT_CLASSIFICATION	0.007666803456802046	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999766994461267	WITHOUT_CLASSIFICATION	2.330055387333944E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9992786767635184	WITHOUT_CLASSIFICATION	7.213232364814518E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9985268047677651	WITHOUT_CLASSIFICATION	0.0014731952322348102	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9939446976457161	WITHOUT_CLASSIFICATION	0.006055302354283936	DESIGN
// Does this dialect support check constraints?	DESIGN	0.99992035470407	WITHOUT_CLASSIFICATION	7.9645295929986E-5	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9999349152064454	WITHOUT_CLASSIFICATION	6.50847935545767E-5	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9995843365972893	WITHOUT_CLASSIFICATION	4.15663402710704E-4	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9995466423460424	WITHOUT_CLASSIFICATION	4.5335765395757943E-4	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.6427749333400713	DESIGN	0.3572250666599286	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9994354976143555	WITHOUT_CLASSIFICATION	5.645023856445081E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.8917986485400353	WITHOUT_CLASSIFICATION	0.10820135145996475	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.8174615771854502	WITHOUT_CLASSIFICATION	0.18253842281454988	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9990277004754398	WITHOUT_CLASSIFICATION	9.722995245602388E-4	DESIGN
//TODO: should orphans really be deleted during lock???	DESIGN	0.8865562688220868	DESIGN	0.11344373117791325	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9975468151678392	WITHOUT_CLASSIFICATION	0.0024531848321608374	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9989465101224672	WITHOUT_CLASSIFICATION	0.0010534898775329154	DESIGN
//I suppose?	DESIGN	0.9982952127112702	WITHOUT_CLASSIFICATION	0.0017047872887298314	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9461891773164576	DESIGN	0.05381082268354234	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9910700859852667	WITHOUT_CLASSIFICATION	0.008929914014733281	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9687604053360938	WITHOUT_CLASSIFICATION	0.03123959466390622	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9994701352228558	WITHOUT_CLASSIFICATION	5.298647771442499E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.7137119225098595	DESIGN	0.28628807749014057	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.81551823853662	WITHOUT_CLASSIFICATION	0.18448176146338002	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9998991482858828	WITHOUT_CLASSIFICATION	1.008517141172697E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9465001457900014	WITHOUT_CLASSIFICATION	0.053499854209998685	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9465001457900014	WITHOUT_CLASSIFICATION	0.053499854209998685	DESIGN
//TODO: temporary	DESIGN	0.7928861737679448	DESIGN	0.20711382623205515	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5862225717689422	DESIGN	0.41377742823105784	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5862225717689422	DESIGN	0.41377742823105784	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.981784759294232	WITHOUT_CLASSIFICATION	0.018215240705767966	DESIGN
//this is kinda the best we can do...	DESIGN	0.9995176085007689	WITHOUT_CLASSIFICATION	4.8239149923105145E-4	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.7947459625002486	DESIGN	0.20525403749975135	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9973822813000649	WITHOUT_CLASSIFICATION	0.0026177186999350485	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9922057320474424	WITHOUT_CLASSIFICATION	0.007794267952557655	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.7069227345621568	DESIGN	0.2930772654378432	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.6875538066785754	WITHOUT_CLASSIFICATION	0.3124461933214246	DESIGN
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.661851872841996	DESIGN	0.338148127158004	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.5850503614044313	DESIGN	0.41494963859556855	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.8854322616470923	DESIGN	0.11456773835290764	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.694776889572963	WITHOUT_CLASSIFICATION	0.3052231104270369	DESIGN
//TODO: suck into event class	DESIGN	0.990608261757967	WITHOUT_CLASSIFICATION	0.009391738242033043	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9838468232472646	WITHOUT_CLASSIFICATION	0.0161531767527354	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9957719060715898	DESIGN	0.004228093928410146	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9628700692032414	DESIGN	0.03712993079675871	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9351066454330416	WITHOUT_CLASSIFICATION	0.06489335456695855	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9995182882063258	WITHOUT_CLASSIFICATION	4.817117936741306E-4	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.5554653962046084	WITHOUT_CLASSIFICATION	0.4445346037953915	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.8950956968072477	DESIGN	0.10490430319275237	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9895928222405552	WITHOUT_CLASSIFICATION	0.010407177759444736	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9896677141989484	WITHOUT_CLASSIFICATION	0.010332285801051746	DESIGN
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.99999987924902	WITHOUT_CLASSIFICATION	1.2075098000005403E-7	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9850447546159262	DESIGN	0.014955245384073758	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9868926340804748	WITHOUT_CLASSIFICATION	0.013107365919525136	DESIGN
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999030664086134	DESIGN	9.693359138662237E-5	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.7738875382394321	WITHOUT_CLASSIFICATION	0.22611246176056798	DESIGN
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9437190546372656	WITHOUT_CLASSIFICATION	0.05628094536273445	DESIGN
//TODO: merge into one method!	DESIGN	0.9308371968049659	WITHOUT_CLASSIFICATION	0.06916280319503411	DESIGN
//TODO: refactor to .sql package	DESIGN	0.6131600288035804	WITHOUT_CLASSIFICATION	0.3868399711964195	DESIGN
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.99958665882384	DESIGN	4.1334117615989387E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.5237711445676576	DESIGN	0.4762288554323425	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9849139447657483	WITHOUT_CLASSIFICATION	0.015086055234251595	DESIGN
// TODO : better way?!?	DESIGN	0.9779888078580566	DESIGN	0.02201119214194336	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.999994764019861	WITHOUT_CLASSIFICATION	5.235980138995677E-6	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9991428791718698	DESIGN	8.57120828130253E-4	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9871286946959369	DESIGN	0.01287130530406312	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.7360773218112864	DESIGN	0.2639226781887137	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9990146511893969	WITHOUT_CLASSIFICATION	9.853488106030357E-4	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9983373572679554	DESIGN	0.0016626427320446619	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9568554672162084	DESIGN	0.04314453278379169	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9943809799671287	WITHOUT_CLASSIFICATION	0.005619020032871232	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9999222716482565	WITHOUT_CLASSIFICATION	7.77283517434181E-5	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9999999649749354	DESIGN	3.502506461364961E-8	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9999849139964826	WITHOUT_CLASSIFICATION	1.5086003517370198E-5	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999994235786639	DESIGN	5.76421336026051E-7	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999921766454498	DESIGN	7.823354550248091E-6	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9830645316547928	DESIGN	0.016935468345207195	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.8418411086209807	WITHOUT_CLASSIFICATION	0.15815889137901926	DESIGN
// yuck!	DESIGN	0.9999099322186118	WITHOUT_CLASSIFICATION	9.006778138817953E-5	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9998348862694095	WITHOUT_CLASSIFICATION	1.6511373059049537E-4	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9897138590444218	DESIGN	0.010286140955578268	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.8071001775232409	DESIGN	0.1928998224767591	WITHOUT_CLASSIFICATION
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9989831924457886	WITHOUT_CLASSIFICATION	0.0010168075542114705	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9816631039493962	WITHOUT_CLASSIFICATION	0.018336896050603933	DESIGN
// Need a better way to define the suffixes here...	DESIGN	0.9736924777898227	WITHOUT_CLASSIFICATION	0.026307522210177365	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999679199413859	DESIGN	3.208005861398079E-5	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9999845580012199	DESIGN	1.544199878018984E-5	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999742623504367	DESIGN	2.573764956324258E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.7592117740330108	DESIGN	0.2407882259669893	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9998529562144393	WITHOUT_CLASSIFICATION	1.4704378556073855E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9965313452757466	WITHOUT_CLASSIFICATION	0.003468654724253474	DESIGN
//TODO: is there a better way?	DESIGN	0.8607056514225921	DESIGN	0.13929434857740794	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9953835092698268	WITHOUT_CLASSIFICATION	0.004616490730173197	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9442969402052578	WITHOUT_CLASSIFICATION	0.05570305979474228	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.5323161848043402	DESIGN	0.46768381519565977	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9468029577613116	WITHOUT_CLASSIFICATION	0.053197042238688395	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.6346980327790611	WITHOUT_CLASSIFICATION	0.3653019672209387	DESIGN
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9998728169155011	DESIGN	1.271830844989179E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.992813756902164	DESIGN	0.00718624309783592	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9124456818884461	WITHOUT_CLASSIFICATION	0.08755431811155391	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.946966478651456	DESIGN	0.053033521348544076	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.8676714532453477	DESIGN	0.13232854675465236	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.8603949622002401	DESIGN	0.13960503779975994	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9995701929755452	WITHOUT_CLASSIFICATION	4.2980702445479993E-4	DESIGN
// short-circuit for performance...	DESIGN	0.9999629445629974	WITHOUT_CLASSIFICATION	3.705543700254123E-5	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9999157293971842	WITHOUT_CLASSIFICATION	8.427060281576518E-5	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.8673736906222099	DESIGN	0.13262630937779002	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.9549941812633189	WITHOUT_CLASSIFICATION	0.045005818736681066	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999977043347524	DESIGN	2.2956652475370512E-6	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.6834029872120627	WITHOUT_CLASSIFICATION	0.31659701278793717	DESIGN
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.5089724155419763	DESIGN	0.49102758445802375	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9550430374438167	DESIGN	0.04495696255618327	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9999997101941924	WITHOUT_CLASSIFICATION	2.8980580763788475E-7	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9079157962419487	WITHOUT_CLASSIFICATION	0.09208420375805135	DESIGN
//This is not very nice (and quite slow):	DESIGN	0.999875429691577	WITHOUT_CLASSIFICATION	1.2457030842298806E-4	DESIGN
//use of trim() here is ugly?	DESIGN	0.9999894190256826	WITHOUT_CLASSIFICATION	1.0580974317303175E-5	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9931483422608326	WITHOUT_CLASSIFICATION	0.0068516577391674474	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9966795318845212	WITHOUT_CLASSIFICATION	0.0033204681154788604	DESIGN
//TODO: inefficient	DESIGN	0.9884067298232417	WITHOUT_CLASSIFICATION	0.011593270176758243	DESIGN
// why does this matter?	DESIGN	0.9997060515355749	WITHOUT_CLASSIFICATION	2.9394846442512546E-4	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999993970208738	DESIGN	6.029791262908524E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9984447783957864	DESIGN	0.001555221604213647	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9503485544406285	DESIGN	0.0496514455593716	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9995942923422285	DESIGN	4.0570765777154616E-4	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9988695028107889	WITHOUT_CLASSIFICATION	0.001130497189211044	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9159736217487012	WITHOUT_CLASSIFICATION	0.08402637825129877	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9874312681958368	DESIGN	0.012568731804163204	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9002251385076311	WITHOUT_CLASSIFICATION	0.09977486149236887	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9746064545270298	DESIGN	0.025393545472970222	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9905342614058996	DESIGN	0.00946573859410038	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9944468629467826	WITHOUT_CLASSIFICATION	0.005553137053217356	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9209884738822539	DESIGN	0.07901152611774612	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.584871083334739	DESIGN	0.415128916665261	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9999782095477232	WITHOUT_CLASSIFICATION	2.179045227674483E-5	DESIGN
//create an index on the key columns??	DESIGN	0.9921154028114806	WITHOUT_CLASSIFICATION	0.007884597188519379	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9154421852902677	DESIGN	0.08455781470973239	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9921154028114806	WITHOUT_CLASSIFICATION	0.007884597188519379	DESIGN
//TODO: improve this hack!	DESIGN	0.6239756599137093	DESIGN	0.3760243400862907	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999449635151373	WITHOUT_CLASSIFICATION	5.5036484862737125E-5	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9346956303029299	WITHOUT_CLASSIFICATION	0.06530436969707025	DESIGN
//shortcut	DESIGN	0.9998279820400546	WITHOUT_CLASSIFICATION	1.7201795994534048E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9991122049159877	WITHOUT_CLASSIFICATION	8.87795084012276E-4	DESIGN
// create an index on the key columns??	DESIGN	0.999386185210086	WITHOUT_CLASSIFICATION	6.138147899140095E-4	DESIGN
// todo : remove	DESIGN	0.9999503108029129	WITHOUT_CLASSIFICATION	4.9689197087240406E-5	DESIGN
// todo : remove	DESIGN	0.9999503108029129	WITHOUT_CLASSIFICATION	4.9689197087240406E-5	DESIGN
// todo : remove	DESIGN	0.9999503108029129	WITHOUT_CLASSIFICATION	4.9689197087240406E-5	DESIGN
// todo : throw exception?	DESIGN	0.9991400001640133	WITHOUT_CLASSIFICATION	8.599998359868575E-4	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.8065513161476194	DESIGN	0.19344868385238054	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9354600917386884	DESIGN	0.06453990826131166	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9400027163524388	DESIGN	0.059997283647561156	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.6990747816122849	WITHOUT_CLASSIFICATION	0.3009252183877152	DESIGN
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999110179158482	DESIGN	8.898208415166023E-5	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9964620457167049	WITHOUT_CLASSIFICATION	0.0035379542832950565	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9969334151701463	WITHOUT_CLASSIFICATION	0.003066584829853694	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.8617424015947875	DESIGN	0.13825759840521254	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9999141588549031	WITHOUT_CLASSIFICATION	8.584114509691847E-5	DESIGN
//TODO: move to .sql package!!	DESIGN	0.5655105080747937	WITHOUT_CLASSIFICATION	0.4344894919252062	DESIGN
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9927941471103764	DESIGN	0.007205852889623712	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999769081266116	DESIGN	2.30918733885583E-5	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.7420911065600853	WITHOUT_CLASSIFICATION	0.2579088934399148	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9964535055190752	DESIGN	0.0035464944809246953	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.9991924029507286	WITHOUT_CLASSIFICATION	8.075970492714205E-4	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9834350302039764	WITHOUT_CLASSIFICATION	0.016564969796023697	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9985265045930692	WITHOUT_CLASSIFICATION	0.001473495406930765	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.7955586186650636	WITHOUT_CLASSIFICATION	0.20444138133493642	DESIGN
//TODO: optimize this better!	DESIGN	0.9633579487060163	WITHOUT_CLASSIFICATION	0.03664205129398362	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.7374733797519536	DESIGN	0.2625266202480464	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9996505517555457	WITHOUT_CLASSIFICATION	3.4944824445421905E-4	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9021067700581025	DESIGN	0.09789322994189743	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.8667025843935838	WITHOUT_CLASSIFICATION	0.13329741560641623	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9830305675160028	WITHOUT_CLASSIFICATION	0.016969432483997127	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.6450473998366317	WITHOUT_CLASSIFICATION	0.3549526001633682	DESIGN
//TODO: is this really necessary????	DESIGN	0.8170917075958251	DESIGN	0.18290829240417492	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.8088124183262019	DESIGN	0.19118758167379815	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9998051359610552	DESIGN	1.9486403894480522E-4	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.7442207670390586	WITHOUT_CLASSIFICATION	0.2557792329609413	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9777419901273374	WITHOUT_CLASSIFICATION	0.022258009872662545	DESIGN
//is this ok?	DESIGN	0.9997747919466176	WITHOUT_CLASSIFICATION	2.2520805338248858E-4	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9756128502167924	DESIGN	0.024387149783207517	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.8834335766113859	WITHOUT_CLASSIFICATION	0.11656642338861423	DESIGN
//Yuck:	DESIGN	0.9988844543318638	WITHOUT_CLASSIFICATION	0.0011155456681362591	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.8635777077400287	WITHOUT_CLASSIFICATION	0.1364222922599712	DESIGN
/**	DESIGN	0.9550430374438167	DESIGN	0.04495696255618327	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9953517634138177	DESIGN	0.004648236586182259	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9477381808273105	DESIGN	0.05226181917268946	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.5739753358767862	WITHOUT_CLASSIFICATION	0.4260246641232138	DESIGN
// todo : YUCK!!!	DESIGN	0.9999784067415113	WITHOUT_CLASSIFICATION	2.159325848879598E-5	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9850457393131096	DESIGN	0.014954260686890401	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9994288390768411	DESIGN	5.711609231589267E-4	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9679781504850418	WITHOUT_CLASSIFICATION	0.03202184951495819	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.6219471157457611	DESIGN	0.3780528842542389	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.5793043062977189	WITHOUT_CLASSIFICATION	0.4206956937022811	DESIGN
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.968627895416145	DESIGN	0.03137210458385506	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.92315573309944	WITHOUT_CLASSIFICATION	0.07684426690056005	DESIGN
//TODO: implement caching?! proxies?!	DESIGN	0.9901359600437042	WITHOUT_CLASSIFICATION	0.009864039956295773	DESIGN
//TODO: is this right??	DESIGN	0.6604620062515307	WITHOUT_CLASSIFICATION	0.33953799374846916	DESIGN
// is this really necessary?	DESIGN	0.9998177902918546	WITHOUT_CLASSIFICATION	1.8220970814536983E-4	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9415573391416856	DESIGN	0.05844266085831452	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.6959992967215824	WITHOUT_CLASSIFICATION	0.30400070327841755	DESIGN
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9969317130217851	WITHOUT_CLASSIFICATION	0.003068286978214869	DESIGN
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.999722182973043	DESIGN	2.778170269569799E-4	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.999554746308562	DESIGN	4.452536914379932E-4	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9998661666875586	WITHOUT_CLASSIFICATION	1.338333124414389E-4	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9965125682728609	DESIGN	0.0034874317271390005	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9954490782036651	WITHOUT_CLASSIFICATION	0.0045509217963348595	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9178692021047492	DESIGN	0.08213079789525082	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9992815964576724	WITHOUT_CLASSIFICATION	7.184035423275797E-4	DESIGN
// short cut check...	DESIGN	0.9999996841738177	WITHOUT_CLASSIFICATION	3.1582618236950516E-7	DESIGN
// todo : move to StringHelper?	DESIGN	0.9988303728359437	WITHOUT_CLASSIFICATION	0.0011696271640562782	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.6117952704251977	WITHOUT_CLASSIFICATION	0.3882047295748024	DESIGN
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9618724427457905	WITHOUT_CLASSIFICATION	0.038127557254209535	DESIGN
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999939798749676	WITHOUT_CLASSIFICATION	6.020125032389078E-6	DESIGN
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9841234520990136	WITHOUT_CLASSIFICATION	0.015876547900986415	DESIGN
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.991046992986507	WITHOUT_CLASSIFICATION	0.008953007013492885	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9603131660664758	WITHOUT_CLASSIFICATION	0.03968683393352419	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9995550242537609	WITHOUT_CLASSIFICATION	4.4497574623916184E-4	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9995046122200434	DESIGN	4.953877799566089E-4	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.6272864597312686	DESIGN	0.37271354026873127	WITHOUT_CLASSIFICATION
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.7072300850292059	DESIGN	0.292769914970794	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9990671605867593	WITHOUT_CLASSIFICATION	9.328394132405869E-4	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9998517966692578	DESIGN	1.4820333074215213E-4	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999932299864263	WITHOUT_CLASSIFICATION	6.770013573765313E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9920539960438618	WITHOUT_CLASSIFICATION	0.0079460039561382	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999978547776477	DESIGN	2.145222352306073E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.999940947989642	DESIGN	5.9052010358190146E-5	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9997027795095274	WITHOUT_CLASSIFICATION	2.9722049047262855E-4	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9863376997460631	WITHOUT_CLASSIFICATION	0.013662300253936862	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9997309128542259	WITHOUT_CLASSIFICATION	2.6908714577412226E-4	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9905915135862239	DESIGN	0.009408486413776172	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9290093027438661	DESIGN	0.07099069725613387	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9176219868953386	WITHOUT_CLASSIFICATION	0.08237801310466135	DESIGN
// todo : remove	DESIGN	0.9999503108029129	WITHOUT_CLASSIFICATION	4.9689197087240406E-5	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.5735618841114944	WITHOUT_CLASSIFICATION	0.4264381158885056	DESIGN
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9965655230267161	DESIGN	0.003434476973283866	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.6878345042712771	DESIGN	0.3121654957287228	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9748091879928731	WITHOUT_CLASSIFICATION	0.025190812007126893	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999944079314378	DESIGN	5.5920685622164155E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9968592402103259	WITHOUT_CLASSIFICATION	0.003140759789674052	DESIGN
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9794810736052175	WITHOUT_CLASSIFICATION	0.020518926394782536	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9996073056094396	DESIGN	3.9269439056051597E-4	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9863992226354026	WITHOUT_CLASSIFICATION	0.013600777364597414	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.998334248881777	WITHOUT_CLASSIFICATION	0.001665751118222921	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.8119614140435568	WITHOUT_CLASSIFICATION	0.18803858595644315	DESIGN
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9798300870402092	WITHOUT_CLASSIFICATION	0.020169912959790766	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9970033861731593	DESIGN	0.0029966138268406302	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9857928906606862	WITHOUT_CLASSIFICATION	0.014207109339313684	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999156009258	DESIGN	8.439907421850352E-8	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.863090146369457	WITHOUT_CLASSIFICATION	0.136909853630543	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9370273415416674	WITHOUT_CLASSIFICATION	0.0629726584583325	DESIGN
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9595639811066798	WITHOUT_CLASSIFICATION	0.04043601889332009	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.571483028213385	DESIGN	0.42851697178661485	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.5463517973887092	DESIGN	0.45364820261129085	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8495262663353266	DESIGN	0.15047373366467343	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999708299558	DESIGN	2.9170044206541784E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9933454002629006	DESIGN	0.006654599737099338	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9995129704178712	DESIGN	4.870295821287422E-4	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9887579252541774	DESIGN	0.01124207474582265	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.6352223472841696	WITHOUT_CLASSIFICATION	0.3647776527158304	DESIGN
//polymorphism comment above	DESIGN	0.9999982274234097	WITHOUT_CLASSIFICATION	1.77257659031093E-6	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999777940225952	WITHOUT_CLASSIFICATION	2.220597740481729E-5	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.6557736251980953	DESIGN	0.34422637480190477	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.972020719603343	WITHOUT_CLASSIFICATION	0.027979280396657046	DESIGN
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9166730188531548	WITHOUT_CLASSIFICATION	0.08332698114684528	DESIGN
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.88101827180049	WITHOUT_CLASSIFICATION	0.11898172819951	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.7285422825805387	WITHOUT_CLASSIFICATION	0.2714577174194613	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9940352557992637	DESIGN	0.005964744200736335	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.8170917075958251	DESIGN	0.18290829240417492	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9917087544180114	DESIGN	0.00829124558198861	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9465087780271523	DESIGN	0.053491221972847725	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.7442207670390586	WITHOUT_CLASSIFICATION	0.2557792329609413	DESIGN
//TODO: make this a bit nicer	DESIGN	0.8834335766113859	WITHOUT_CLASSIFICATION	0.11656642338861423	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9597083439128252	WITHOUT_CLASSIFICATION	0.040291656087174776	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7520088876702732	WITHOUT_CLASSIFICATION	0.24799111232972687	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7520088876702732	WITHOUT_CLASSIFICATION	0.24799111232972687	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.7520088876702732	WITHOUT_CLASSIFICATION	0.24799111232972687	DESIGN
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.997075550539304	DESIGN	0.002924449460696051	WITHOUT_CLASSIFICATION
