//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998358320983761	WITHOUT_CLASSIFICATION	1.641679016240034E-4	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999872131718476	WITHOUT_CLASSIFICATION	1.2786828152497817E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999872131718476	WITHOUT_CLASSIFICATION	1.2786828152497817E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999590451320935	WITHOUT_CLASSIFICATION	4.095486790636857E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999990803042861	WITHOUT_CLASSIFICATION	9.196957139132522E-7	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999977444385528	WITHOUT_CLASSIFICATION	2.2555614471653854E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999970370214753	WITHOUT_CLASSIFICATION	2.9629785247004312E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999970370214753	WITHOUT_CLASSIFICATION	2.9629785247004312E-5	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998196564164	WITHOUT_CLASSIFICATION	1.80343583573616E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999989039080909	WITHOUT_CLASSIFICATION	1.0960919091663185E-6	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999919632588599	WITHOUT_CLASSIFICATION	8.036741140217008E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999954346521555	WITHOUT_CLASSIFICATION	4.565347844494103E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999771688830623	WITHOUT_CLASSIFICATION	2.2831116937667918E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999771688830623	WITHOUT_CLASSIFICATION	2.2831116937667918E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999995497475314	WITHOUT_CLASSIFICATION	4.502524686013463E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997422935832356	WITHOUT_CLASSIFICATION	2.577064167643073E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9998021228354481	WITHOUT_CLASSIFICATION	1.9787716455178084E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999600008150047	WITHOUT_CLASSIFICATION	3.9999184995216765E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998484873893477	WITHOUT_CLASSIFICATION	1.515126106522599E-4	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999959058410258	WITHOUT_CLASSIFICATION	4.0941589742065695E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.999983852679574	WITHOUT_CLASSIFICATION	1.6147320425942137E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999535642726288	WITHOUT_CLASSIFICATION	4.643572737123957E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999498147913192	WITHOUT_CLASSIFICATION	5.018520868087365E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9996756257790849	WITHOUT_CLASSIFICATION	3.2437422091514327E-4	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999742374832811	WITHOUT_CLASSIFICATION	2.5762516718950693E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999563903681896	WITHOUT_CLASSIFICATION	4.3609631810451236E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999726208102274	WITHOUT_CLASSIFICATION	2.737918977265858E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999303807985317	WITHOUT_CLASSIFICATION	6.96192014683313E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999303807985317	WITHOUT_CLASSIFICATION	6.96192014683313E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999989478177445	WITHOUT_CLASSIFICATION	1.0521822555400116E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9998371910315055	WITHOUT_CLASSIFICATION	1.6280896849448238E-4	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999996934746703	WITHOUT_CLASSIFICATION	3.065253297685161E-7	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996146847299	WITHOUT_CLASSIFICATION	3.8531527016002126E-7	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9895272664177643	WITHOUT_CLASSIFICATION	0.01047273358223568	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9457259965347053	DESIGN	0.05427400346529459	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9457259965347053	DESIGN	0.05427400346529459	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999984429899356	WITHOUT_CLASSIFICATION	1.5570100644897798E-6	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999902421960638	WITHOUT_CLASSIFICATION	9.757803936218925E-6	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999653237754	WITHOUT_CLASSIFICATION	3.4676224559381476E-8	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998973060018851	WITHOUT_CLASSIFICATION	1.0269399811486222E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999913602388926	WITHOUT_CLASSIFICATION	8.639761107460968E-6	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900283873112	WITHOUT_CLASSIFICATION	9.971612688782369E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956031020283	WITHOUT_CLASSIFICATION	4.396897971678042E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9966996552590737	WITHOUT_CLASSIFICATION	0.003300344740926314	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999731195097916	WITHOUT_CLASSIFICATION	2.6880490208362818E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999161783202342	WITHOUT_CLASSIFICATION	8.382167976583238E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.999978936290855	WITHOUT_CLASSIFICATION	2.1063709144984943E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999731195097916	WITHOUT_CLASSIFICATION	2.6880490208362818E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.999978936290855	WITHOUT_CLASSIFICATION	2.1063709144984943E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995479053405967	WITHOUT_CLASSIFICATION	4.5209465940332746E-4	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.7572371511603812	WITHOUT_CLASSIFICATION	0.24276284883961882	DESIGN
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999982988802175	WITHOUT_CLASSIFICATION	1.7011197824180521E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999970611186603	WITHOUT_CLASSIFICATION	2.9388813396632705E-6	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999072620753683	WITHOUT_CLASSIFICATION	9.273792463176403E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9992343846482652	WITHOUT_CLASSIFICATION	7.656153517348574E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9982678485570077	WITHOUT_CLASSIFICATION	0.001732151442992385	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9997687623126875	WITHOUT_CLASSIFICATION	2.312376873123507E-4	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999880095539	WITHOUT_CLASSIFICATION	1.1990446132927165E-8	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999698990896965	WITHOUT_CLASSIFICATION	3.0100910303431084E-5	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9997706426324425	WITHOUT_CLASSIFICATION	2.293573675575529E-4	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.999995421124221	WITHOUT_CLASSIFICATION	4.578875778922852E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999804957103797	WITHOUT_CLASSIFICATION	1.9504289620330524E-5	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9965083981550383	WITHOUT_CLASSIFICATION	0.0034916018449617685	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.999864273606217	WITHOUT_CLASSIFICATION	1.3572639378296822E-4	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9992826163391605	WITHOUT_CLASSIFICATION	7.173836608395492E-4	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999860445714294	WITHOUT_CLASSIFICATION	1.3955428570681816E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9998692592883613	WITHOUT_CLASSIFICATION	1.3074071163871097E-4	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998369063285	WITHOUT_CLASSIFICATION	1.630936715316407E-7	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999997669000069	WITHOUT_CLASSIFICATION	2.3309999317674639E-7	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9992990921500481	WITHOUT_CLASSIFICATION	7.009078499518608E-4	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999997585855323	WITHOUT_CLASSIFICATION	2.414144677065946E-6	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999786284253599	WITHOUT_CLASSIFICATION	2.1371574640113592E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999997445495147	WITHOUT_CLASSIFICATION	2.5545048527868293E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.971445333267669	WITHOUT_CLASSIFICATION	0.028554666732330876	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9998827777927787	WITHOUT_CLASSIFICATION	1.1722220722130729E-4	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999988079423956	WITHOUT_CLASSIFICATION	1.1920576044846137E-6	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.8442523010801077	WITHOUT_CLASSIFICATION	0.15574769891989215	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9990198324966939	WITHOUT_CLASSIFICATION	9.801675033060502E-4	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999143083368661	WITHOUT_CLASSIFICATION	8.569166313386016E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999709076147612	WITHOUT_CLASSIFICATION	2.9092385238724122E-5	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999934187663289	WITHOUT_CLASSIFICATION	6.581233671208292E-6	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9959087293713714	WITHOUT_CLASSIFICATION	0.004091270628628604	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999983896691383	WITHOUT_CLASSIFICATION	1.6103308616515965E-6	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999539860053925	WITHOUT_CLASSIFICATION	4.601399460738732E-5	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9998252830764267	WITHOUT_CLASSIFICATION	1.7471692357328645E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999983896691383	WITHOUT_CLASSIFICATION	1.6103308616515965E-6	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997064697876	WITHOUT_CLASSIFICATION	2.9353021243216975E-7	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999552904271813	WITHOUT_CLASSIFICATION	4.470957281869785E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999946998037739	WITHOUT_CLASSIFICATION	5.3001962261404255E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999987368169655	WITHOUT_CLASSIFICATION	1.2631830345683302E-6	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999951511086528	WITHOUT_CLASSIFICATION	4.8488913472882524E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999777570430741	WITHOUT_CLASSIFICATION	2.2242956925873073E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999777570430741	WITHOUT_CLASSIFICATION	2.2242956925873073E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999933145104373	WITHOUT_CLASSIFICATION	6.685489562774104E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9991786989561033	WITHOUT_CLASSIFICATION	8.21301043896747E-4	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999154417476458	WITHOUT_CLASSIFICATION	8.455825235429948E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.8711295711073602	WITHOUT_CLASSIFICATION	0.12887042889263983	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9980498394671139	WITHOUT_CLASSIFICATION	0.0019501605328860537	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999975701376599	WITHOUT_CLASSIFICATION	2.429862340129295E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999951597612434	WITHOUT_CLASSIFICATION	4.840238756611781E-6	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999732379028613	WITHOUT_CLASSIFICATION	2.676209713868484E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999992826381192	WITHOUT_CLASSIFICATION	7.173618807406206E-7	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999998052086533	WITHOUT_CLASSIFICATION	1.9479134675110022E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999619481992992	WITHOUT_CLASSIFICATION	3.8051800700862654E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999619481992992	WITHOUT_CLASSIFICATION	3.8051800700862654E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999964002473057	WITHOUT_CLASSIFICATION	3.599752694236613E-6	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999995747517744	WITHOUT_CLASSIFICATION	4.252482255964571E-6	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999911338206826	WITHOUT_CLASSIFICATION	8.866179317268846E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999619481992992	WITHOUT_CLASSIFICATION	3.8051800700862654E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999964002473057	WITHOUT_CLASSIFICATION	3.599752694236613E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999964002473057	WITHOUT_CLASSIFICATION	3.599752694236613E-6	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999974807468254	WITHOUT_CLASSIFICATION	2.51925317465875E-6	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999907197157285	WITHOUT_CLASSIFICATION	9.280284271556145E-6	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999892570086855	WITHOUT_CLASSIFICATION	1.0742991314585906E-5	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9998829404523256	WITHOUT_CLASSIFICATION	1.1705954767444971E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999987872690174	WITHOUT_CLASSIFICATION	1.2127309826066647E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.999987872690174	WITHOUT_CLASSIFICATION	1.2127309826066647E-5	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999997637143705	WITHOUT_CLASSIFICATION	2.3628562939774426E-7	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.990523452632247	WITHOUT_CLASSIFICATION	0.009476547367752953	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999989592435767	WITHOUT_CLASSIFICATION	1.0407564232758848E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999997365722813	WITHOUT_CLASSIFICATION	2.634277187539849E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999997365722813	WITHOUT_CLASSIFICATION	2.634277187539849E-7	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9998842761405193	WITHOUT_CLASSIFICATION	1.1572385948070396E-4	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999951358558976	WITHOUT_CLASSIFICATION	4.864144102303908E-6	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9992117171570768	WITHOUT_CLASSIFICATION	7.882828429232091E-4	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9996447612611132	WITHOUT_CLASSIFICATION	3.552387388867609E-4	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999864378261577	WITHOUT_CLASSIFICATION	1.3562173842158884E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999326702246	WITHOUT_CLASSIFICATION	6.732977541767266E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998573311257692	WITHOUT_CLASSIFICATION	1.4266887423065817E-4	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9999648025869242	WITHOUT_CLASSIFICATION	3.519741307574644E-5	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9996816338027079	WITHOUT_CLASSIFICATION	3.183661972921307E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9992117171570768	WITHOUT_CLASSIFICATION	7.882828429232091E-4	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9999611961326414	WITHOUT_CLASSIFICATION	3.880386735850924E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998051942359102	WITHOUT_CLASSIFICATION	1.9480576408978766E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998051942359102	WITHOUT_CLASSIFICATION	1.9480576408978766E-4	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9984601998045025	WITHOUT_CLASSIFICATION	0.0015398001954975843	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999952987684485	WITHOUT_CLASSIFICATION	4.701231551471931E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995235284986	WITHOUT_CLASSIFICATION	4.7647150138823784E-7	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9981533326293223	WITHOUT_CLASSIFICATION	0.0018466673706776786	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9999278071378873	WITHOUT_CLASSIFICATION	7.219286211271564E-5	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9998838863010953	WITHOUT_CLASSIFICATION	1.1611369890472824E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998749600259323	WITHOUT_CLASSIFICATION	1.2503997406767615E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999766709917721	WITHOUT_CLASSIFICATION	2.332900822784109E-5	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999989915165034	WITHOUT_CLASSIFICATION	1.0084834965685787E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999989915165034	WITHOUT_CLASSIFICATION	1.0084834965685787E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964043675094	WITHOUT_CLASSIFICATION	3.5956324906812142E-6	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9998358320983761	WITHOUT_CLASSIFICATION	1.641679016240034E-4	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997518217795	WITHOUT_CLASSIFICATION	2.481782205439088E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999976947482513	WITHOUT_CLASSIFICATION	2.3052517487497924E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999872131718476	WITHOUT_CLASSIFICATION	1.2786828152497817E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999833983872346	WITHOUT_CLASSIFICATION	1.6601612765290998E-5	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999612198821075	WITHOUT_CLASSIFICATION	3.878011789248673E-5	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999975382138108	WITHOUT_CLASSIFICATION	2.4617861891681996E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999988145297826	WITHOUT_CLASSIFICATION	1.1854702173879E-6	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999862000650062	WITHOUT_CLASSIFICATION	1.379993499383164E-5	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999782064082008	WITHOUT_CLASSIFICATION	2.1793591799170022E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999843484325691	WITHOUT_CLASSIFICATION	1.5651567430887145E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999963252890469	WITHOUT_CLASSIFICATION	3.6747109530470366E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999990803042861	WITHOUT_CLASSIFICATION	9.196957139132522E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999976215155109	WITHOUT_CLASSIFICATION	2.37848448920795E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999976215155109	WITHOUT_CLASSIFICATION	2.37848448920795E-6	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999996668120287	WITHOUT_CLASSIFICATION	3.331879712743288E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999096125576903	WITHOUT_CLASSIFICATION	9.038744230975734E-5	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999979328320683	WITHOUT_CLASSIFICATION	2.067167931732918E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999863083688878	WITHOUT_CLASSIFICATION	1.3691631112241579E-5	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999949441743152	WITHOUT_CLASSIFICATION	5.055825684770918E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999692709311429	WITHOUT_CLASSIFICATION	3.072906885705219E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999970370214753	WITHOUT_CLASSIFICATION	2.9629785247004312E-5	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9993752199966426	WITHOUT_CLASSIFICATION	6.247800033573629E-4	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999945795186508	WITHOUT_CLASSIFICATION	5.4204813491864066E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999921907521976	WITHOUT_CLASSIFICATION	7.809247802369762E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999994953904988	WITHOUT_CLASSIFICATION	5.046095011441165E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999914715965831	WITHOUT_CLASSIFICATION	8.528403416903187E-6	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999874925161919	WITHOUT_CLASSIFICATION	1.2507483808058041E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999931047791291	WITHOUT_CLASSIFICATION	6.895220870925368E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999846350572741	WITHOUT_CLASSIFICATION	1.5364942725923005E-5	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999938982741882	WITHOUT_CLASSIFICATION	6.101725811844646E-6	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999860343697904	WITHOUT_CLASSIFICATION	1.3965630209667891E-5	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999802402246167	WITHOUT_CLASSIFICATION	1.9759775383306074E-4	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999962268996239	WITHOUT_CLASSIFICATION	3.773100376160423E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999928895708141	WITHOUT_CLASSIFICATION	7.110429185943334E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999872131718476	WITHOUT_CLASSIFICATION	1.2786828152497817E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999872131718476	WITHOUT_CLASSIFICATION	1.2786828152497817E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999843484325691	WITHOUT_CLASSIFICATION	1.5651567430887145E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999976215155109	WITHOUT_CLASSIFICATION	2.37848448920795E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999931047791291	WITHOUT_CLASSIFICATION	6.895220870925368E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998196564164	WITHOUT_CLASSIFICATION	1.80343583573616E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999854464465882	WITHOUT_CLASSIFICATION	1.4553553411909787E-5	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999816923583145	WITHOUT_CLASSIFICATION	1.830764168549857E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999468414671255	WITHOUT_CLASSIFICATION	5.315853287451403E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999761621533495	WITHOUT_CLASSIFICATION	2.3837846650504956E-5	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999890996050785	WITHOUT_CLASSIFICATION	1.0900394921479612E-5	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999979680153179	WITHOUT_CLASSIFICATION	2.031984682145407E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999619274987499	WITHOUT_CLASSIFICATION	3.8072501250060444E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999489430427125	WITHOUT_CLASSIFICATION	5.105695728753711E-5	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999316462004997	WITHOUT_CLASSIFICATION	6.835379950037824E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999754888245681	WITHOUT_CLASSIFICATION	2.4511175431964758E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999754888245681	WITHOUT_CLASSIFICATION	2.4511175431964758E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999989833513785	WITHOUT_CLASSIFICATION	1.0166486214989037E-6	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999999094567386	WITHOUT_CLASSIFICATION	9.054326140048037E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9994954785440138	WITHOUT_CLASSIFICATION	5.045214559862732E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9997940091755112	WITHOUT_CLASSIFICATION	2.0599082448870826E-4	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999996747727479	WITHOUT_CLASSIFICATION	3.252272520889607E-6	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999842691946189	WITHOUT_CLASSIFICATION	1.5730805381017404E-5	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999959726490746	WITHOUT_CLASSIFICATION	4.0273509254793465E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999989039080909	WITHOUT_CLASSIFICATION	1.0960919091663185E-6	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999906008937329	WITHOUT_CLASSIFICATION	9.399106267079142E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999977245187509	WITHOUT_CLASSIFICATION	2.2754812490538198E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999977245187509	WITHOUT_CLASSIFICATION	2.2754812490538198E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999999040908058	WITHOUT_CLASSIFICATION	9.590919420160628E-7	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999958706747303	WITHOUT_CLASSIFICATION	4.129325269747972E-6	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999959620681363	WITHOUT_CLASSIFICATION	4.037931863579115E-6	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999960863633582	WITHOUT_CLASSIFICATION	3.9136366417234935E-6	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999876525626014	WITHOUT_CLASSIFICATION	1.2347437398735421E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999872131718476	WITHOUT_CLASSIFICATION	1.2786828152497817E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999843484325691	WITHOUT_CLASSIFICATION	1.5651567430887145E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999990803042861	WITHOUT_CLASSIFICATION	9.196957139132522E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999931047791291	WITHOUT_CLASSIFICATION	6.895220870925368E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999931047791291	WITHOUT_CLASSIFICATION	6.895220870925368E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994063857447	WITHOUT_CLASSIFICATION	5.936142552775841E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994063857447	WITHOUT_CLASSIFICATION	5.936142552775841E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999121560379677	WITHOUT_CLASSIFICATION	8.784396203228643E-5	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999848917611621	WITHOUT_CLASSIFICATION	1.510823883780265E-5	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999848917611621	WITHOUT_CLASSIFICATION	1.510823883780265E-5	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999937153157992	WITHOUT_CLASSIFICATION	6.284684200850203E-6	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999953673138365	WITHOUT_CLASSIFICATION	4.632686163439483E-6	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.999995725738534	WITHOUT_CLASSIFICATION	4.274261466004033E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999975254762156	WITHOUT_CLASSIFICATION	2.4745237844190277E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9997678931888816	WITHOUT_CLASSIFICATION	2.3210681111845055E-4	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999954346521555	WITHOUT_CLASSIFICATION	4.565347844494103E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999954346521555	WITHOUT_CLASSIFICATION	4.565347844494103E-6	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999849620070462	WITHOUT_CLASSIFICATION	1.5037992953765116E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.999991185857244	WITHOUT_CLASSIFICATION	8.814142755995033E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999878020933999	WITHOUT_CLASSIFICATION	1.2197906600128661E-5	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999919355369526	WITHOUT_CLASSIFICATION	8.064463047376885E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999931250235857	WITHOUT_CLASSIFICATION	6.87497641433248E-6	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999900183359482	WITHOUT_CLASSIFICATION	9.9816640517259E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999771688830623	WITHOUT_CLASSIFICATION	2.2831116937667918E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999910892894819	WITHOUT_CLASSIFICATION	8.91071051809022E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999910892894819	WITHOUT_CLASSIFICATION	8.91071051809022E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999995497475314	WITHOUT_CLASSIFICATION	4.502524686013463E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999995497475314	WITHOUT_CLASSIFICATION	4.502524686013463E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999851633986677	WITHOUT_CLASSIFICATION	1.4836601332344667E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999851633986677	WITHOUT_CLASSIFICATION	1.4836601332344667E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999875455141402	WITHOUT_CLASSIFICATION	1.2454485859811112E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999875455141402	WITHOUT_CLASSIFICATION	1.2454485859811112E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999954346521555	WITHOUT_CLASSIFICATION	4.565347844494103E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999771688830623	WITHOUT_CLASSIFICATION	2.2831116937667918E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999910892894819	WITHOUT_CLASSIFICATION	8.91071051809022E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999910892894819	WITHOUT_CLASSIFICATION	8.91071051809022E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.999995497475314	WITHOUT_CLASSIFICATION	4.502524686013463E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999851633986677	WITHOUT_CLASSIFICATION	1.4836601332344667E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999851633986677	WITHOUT_CLASSIFICATION	1.4836601332344667E-5	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999875455141402	WITHOUT_CLASSIFICATION	1.2454485859811112E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999653731192774	WITHOUT_CLASSIFICATION	3.46268807225908E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999580258476142	WITHOUT_CLASSIFICATION	4.197415238579743E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999848196882283	WITHOUT_CLASSIFICATION	1.5180311771630704E-5	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999960204388679	WITHOUT_CLASSIFICATION	3.97956113205356E-6	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9998932068660589	WITHOUT_CLASSIFICATION	1.0679313394106458E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999764352926771	WITHOUT_CLASSIFICATION	2.356470732288683E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9853444984659786	WITHOUT_CLASSIFICATION	0.01465550153402152	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.8846109006416724	WITHOUT_CLASSIFICATION	0.11538909935832768	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999965310859752	WITHOUT_CLASSIFICATION	3.4689140249081866E-6	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999996757448586	WITHOUT_CLASSIFICATION	3.242551413381562E-7	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999997603999933	WITHOUT_CLASSIFICATION	2.3960000675266646E-7	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999996098473819	WITHOUT_CLASSIFICATION	3.90152618046791E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999933145104373	WITHOUT_CLASSIFICATION	6.685489562774104E-6	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999764352926771	WITHOUT_CLASSIFICATION	2.356470732288683E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998922543322082	WITHOUT_CLASSIFICATION	1.0774566779188832E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998922543322082	WITHOUT_CLASSIFICATION	1.0774566779188832E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9981941137253063	WITHOUT_CLASSIFICATION	0.0018058862746937758	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9990185237726755	WITHOUT_CLASSIFICATION	9.814762273243733E-4	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9990185237726755	WITHOUT_CLASSIFICATION	9.814762273243733E-4	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9995124014988599	WITHOUT_CLASSIFICATION	4.8759850114003166E-4	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999407846956741	WITHOUT_CLASSIFICATION	5.921530432589409E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999649768041763	WITHOUT_CLASSIFICATION	3.5023195823694425E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9955617849740093	WITHOUT_CLASSIFICATION	0.004438215025990726	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9955617849740093	WITHOUT_CLASSIFICATION	0.004438215025990726	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9998484873893477	WITHOUT_CLASSIFICATION	1.515126106522599E-4	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.807112276972904	WITHOUT_CLASSIFICATION	0.19288772302709611	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.807112276972904	WITHOUT_CLASSIFICATION	0.19288772302709611	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999981412905588	WITHOUT_CLASSIFICATION	1.858709441220348E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999828719917577	WITHOUT_CLASSIFICATION	1.712800824223066E-5	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999893867281687	WITHOUT_CLASSIFICATION	1.0613271831370103E-5	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999118883105373	WITHOUT_CLASSIFICATION	8.811168946259158E-5	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9998992780762581	WITHOUT_CLASSIFICATION	1.0072192374191412E-4	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999293497746552	WITHOUT_CLASSIFICATION	7.065022534480736E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999959058410258	WITHOUT_CLASSIFICATION	4.0941589742065695E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999972030316044	WITHOUT_CLASSIFICATION	2.796968395601099E-5	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.5531425204859812	DESIGN	0.44685747951401883	WITHOUT_CLASSIFICATION
// ID	WITHOUT_CLASSIFICATION	0.9999904771179625	WITHOUT_CLASSIFICATION	9.522882037458666E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998795308536114	WITHOUT_CLASSIFICATION	1.2046914638872531E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999498147913192	WITHOUT_CLASSIFICATION	5.018520868087365E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999953644981352	WITHOUT_CLASSIFICATION	4.635501864838761E-6	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999973076298445	WITHOUT_CLASSIFICATION	2.692370155470008E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999856650290471	WITHOUT_CLASSIFICATION	1.4334970952876867E-5	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999498147913192	WITHOUT_CLASSIFICATION	5.018520868087365E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999990057217146	WITHOUT_CLASSIFICATION	9.94278285416124E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999634834928073	WITHOUT_CLASSIFICATION	3.651650719278648E-5	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999228628920366	WITHOUT_CLASSIFICATION	7.713710796348069E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999756155963693	WITHOUT_CLASSIFICATION	2.438440363069478E-5	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999844073051735	WITHOUT_CLASSIFICATION	1.5592694826508397E-4	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9995210126890699	WITHOUT_CLASSIFICATION	4.7898731093016123E-4	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9996611173195608	WITHOUT_CLASSIFICATION	3.3888268043928585E-4	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999563903681896	WITHOUT_CLASSIFICATION	4.3609631810451236E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999648944639409	WITHOUT_CLASSIFICATION	3.510553605907579E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999726208102274	WITHOUT_CLASSIFICATION	2.737918977265858E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999919241176305	WITHOUT_CLASSIFICATION	8.0758823694026E-6	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999744197369818	WITHOUT_CLASSIFICATION	2.5580263018253277E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999687189625268	WITHOUT_CLASSIFICATION	3.1281037473171776E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999959058410258	WITHOUT_CLASSIFICATION	4.0941589742065695E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999648944639409	WITHOUT_CLASSIFICATION	3.510553605907579E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999919241176305	WITHOUT_CLASSIFICATION	8.0758823694026E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999687189625268	WITHOUT_CLASSIFICATION	3.1281037473171776E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999992237891484	WITHOUT_CLASSIFICATION	7.762108515402547E-7	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.999791398661078	WITHOUT_CLASSIFICATION	2.086013389219397E-4	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999992134260113	WITHOUT_CLASSIFICATION	7.865739888481221E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999303807985317	WITHOUT_CLASSIFICATION	6.96192014683313E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999956552163829	WITHOUT_CLASSIFICATION	4.344783617043581E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.999989063221232	WITHOUT_CLASSIFICATION	1.093677876791795E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999713417300355	WITHOUT_CLASSIFICATION	2.8658269964410523E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9999926687286144	WITHOUT_CLASSIFICATION	7.331271385630717E-6	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999992446746085	WITHOUT_CLASSIFICATION	7.553253913668732E-7	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999997991363107	WITHOUT_CLASSIFICATION	2.0086368935102602E-7	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999002470632	WITHOUT_CLASSIFICATION	9.975293671787086E-8	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999861963519459	WITHOUT_CLASSIFICATION	1.380364805413068E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999990263634772	WITHOUT_CLASSIFICATION	9.736365228765158E-7	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999991576840893	WITHOUT_CLASSIFICATION	8.423159106093255E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999618412904577	WITHOUT_CLASSIFICATION	3.815870954215641E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9998817397168194	WITHOUT_CLASSIFICATION	1.1826028318058763E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9998371910315055	WITHOUT_CLASSIFICATION	1.6280896849448238E-4	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999991762279189	WITHOUT_CLASSIFICATION	8.237720810032591E-7	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999694433772247	WITHOUT_CLASSIFICATION	3.055662277534703E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999648944639409	WITHOUT_CLASSIFICATION	3.510553605907579E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999995266422	WITHOUT_CLASSIFICATION	4.7335779996247497E-7	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999424281740558	WITHOUT_CLASSIFICATION	5.757182594433124E-5	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999941061417158	WITHOUT_CLASSIFICATION	5.893858284226976E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999530988268585	WITHOUT_CLASSIFICATION	4.690117314149225E-5	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.999995051198312	WITHOUT_CLASSIFICATION	4.948801687927321E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999113309484107	WITHOUT_CLASSIFICATION	8.866905158924121E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999990748463092	WITHOUT_CLASSIFICATION	9.251536906534919E-7	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.999999198652892	WITHOUT_CLASSIFICATION	8.013471080637722E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999461133331365	WITHOUT_CLASSIFICATION	5.388666686332761E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999452779874907	WITHOUT_CLASSIFICATION	5.472201250940324E-5	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999966615777155	WITHOUT_CLASSIFICATION	3.338422284433898E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999884083749323	WITHOUT_CLASSIFICATION	1.1591625067608765E-5	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999658532655439	WITHOUT_CLASSIFICATION	3.4146734456181645E-5	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999996146847299	WITHOUT_CLASSIFICATION	3.8531527016002126E-7	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999795383502783	WITHOUT_CLASSIFICATION	2.04616497217115E-5	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999981309247562	WITHOUT_CLASSIFICATION	1.869075243845998E-6	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999526062985079	WITHOUT_CLASSIFICATION	4.739370149207108E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999988446792328	WITHOUT_CLASSIFICATION	1.1553207671537278E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999975547346764	WITHOUT_CLASSIFICATION	2.4452653236193583E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9997007473475477	WITHOUT_CLASSIFICATION	2.9925265245240614E-4	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999804840053	WITHOUT_CLASSIFICATION	1.9515994736199923E-8	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999999992445612	WITHOUT_CLASSIFICATION	7.554387898401403E-9	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9964918956210915	WITHOUT_CLASSIFICATION	0.0035081043789085297	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999848183671164	WITHOUT_CLASSIFICATION	1.5181632883620562E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998812547392577	WITHOUT_CLASSIFICATION	1.1874526074222493E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998812547392577	WITHOUT_CLASSIFICATION	1.1874526074222493E-4	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999349609546421	WITHOUT_CLASSIFICATION	6.503904535793129E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999958864524362	WITHOUT_CLASSIFICATION	4.1135475638084925E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999937512950907	WITHOUT_CLASSIFICATION	6.248704909228966E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999262745116587	WITHOUT_CLASSIFICATION	7.372548834130616E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999495093146988	WITHOUT_CLASSIFICATION	5.049068530123075E-5	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999579050534645	WITHOUT_CLASSIFICATION	4.20949465354105E-5	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9974632645679596	WITHOUT_CLASSIFICATION	0.0025367354320403636	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9996804342816528	WITHOUT_CLASSIFICATION	3.195657183472543E-4	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9990215844576134	WITHOUT_CLASSIFICATION	9.78415542386661E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998841133012919	WITHOUT_CLASSIFICATION	1.1588669870810165E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999808391075258	WITHOUT_CLASSIFICATION	1.9160892474235952E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999673209211135	WITHOUT_CLASSIFICATION	3.267907888639273E-5	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.8955889714249772	WITHOUT_CLASSIFICATION	0.10441102857502284	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999939170842632	WITHOUT_CLASSIFICATION	6.082915736791791E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992231412691435	WITHOUT_CLASSIFICATION	7.768587308564972E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997786160788926	WITHOUT_CLASSIFICATION	2.2138392110742787E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999895085855997	WITHOUT_CLASSIFICATION	1.0491414400251098E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9987186905901779	WITHOUT_CLASSIFICATION	0.001281309409822032	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9921103458081412	WITHOUT_CLASSIFICATION	0.00788965419185873	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.997984399670537	WITHOUT_CLASSIFICATION	0.0020156003294630083	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999100399593945	WITHOUT_CLASSIFICATION	8.996004060547731E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999100399593945	WITHOUT_CLASSIFICATION	8.996004060547731E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999907494421383	WITHOUT_CLASSIFICATION	9.250557861761967E-6	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999907494421383	WITHOUT_CLASSIFICATION	9.250557861761967E-6	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9964918956210915	WITHOUT_CLASSIFICATION	0.0035081043789085297	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9997546141727592	WITHOUT_CLASSIFICATION	2.4538582724081267E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9983716755615779	WITHOUT_CLASSIFICATION	0.0016283244384221159	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999668700201965	WITHOUT_CLASSIFICATION	3.312997980358907E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964043675094	WITHOUT_CLASSIFICATION	3.5956324906812142E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9983716755615779	WITHOUT_CLASSIFICATION	0.0016283244384221159	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999668700201965	WITHOUT_CLASSIFICATION	3.312997980358907E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999948285380327	WITHOUT_CLASSIFICATION	5.171461967286497E-5	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999907196255464	WITHOUT_CLASSIFICATION	9.280374453651372E-6	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999978422002742	WITHOUT_CLASSIFICATION	2.1577997258105475E-6	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.99999883759413	WITHOUT_CLASSIFICATION	1.1624058700095575E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997940886557898	WITHOUT_CLASSIFICATION	2.0591134421030991E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.98561414799544	WITHOUT_CLASSIFICATION	0.014385852004560003	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999927778777596	WITHOUT_CLASSIFICATION	7.222122240376844E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999522298262715	WITHOUT_CLASSIFICATION	4.7770173728443407E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996995962358998	WITHOUT_CLASSIFICATION	3.0040376410022925E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999783820445	WITHOUT_CLASSIFICATION	2.1617955553785586E-8	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999977138077905	WITHOUT_CLASSIFICATION	2.2861922096222315E-6	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999998136014038	WITHOUT_CLASSIFICATION	1.8639859619462536E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999970362284941	WITHOUT_CLASSIFICATION	2.9637715058539055E-6	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9984078618567102	WITHOUT_CLASSIFICATION	0.0015921381432898074	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964043675094	WITHOUT_CLASSIFICATION	3.5956324906812142E-6	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.99894795049724	WITHOUT_CLASSIFICATION	0.00105204950276011	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990800082142463	WITHOUT_CLASSIFICATION	9.199917857537192E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9990800082142463	WITHOUT_CLASSIFICATION	9.199917857537192E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9867453845023237	WITHOUT_CLASSIFICATION	0.013254615497676158	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999948285380327	WITHOUT_CLASSIFICATION	5.171461967286497E-5	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9894907196756353	WITHOUT_CLASSIFICATION	0.010509280324364677	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.8607147302979324	DESIGN	0.13928526970206753	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.999992165287567	WITHOUT_CLASSIFICATION	7.834712433095158E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999938806568626	WITHOUT_CLASSIFICATION	6.1193431374301505E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997456981556001	WITHOUT_CLASSIFICATION	2.5430184439988646E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999948285380327	WITHOUT_CLASSIFICATION	5.171461967286497E-5	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999938806568626	WITHOUT_CLASSIFICATION	6.1193431374301505E-6	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9997456981556001	WITHOUT_CLASSIFICATION	2.5430184439988646E-4	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9998907938664591	WITHOUT_CLASSIFICATION	1.092061335410205E-4	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999836394216771	WITHOUT_CLASSIFICATION	1.6360578322915513E-5	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999997679462863	WITHOUT_CLASSIFICATION	2.3205371364126555E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999948285380327	WITHOUT_CLASSIFICATION	5.171461967286497E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999948285380327	WITHOUT_CLASSIFICATION	5.171461967286497E-5	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999872833890604	WITHOUT_CLASSIFICATION	1.271661093971004E-5	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999960532059446	WITHOUT_CLASSIFICATION	3.946794055337223E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999796873042094	WITHOUT_CLASSIFICATION	2.0312695790708864E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999539745508539	WITHOUT_CLASSIFICATION	4.602544914598956E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.999992505321118	WITHOUT_CLASSIFICATION	7.49467888191872E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999667643922	WITHOUT_CLASSIFICATION	3.323560785328876E-8	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999996762249759	WITHOUT_CLASSIFICATION	3.237750241964683E-7	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.999728663269346	WITHOUT_CLASSIFICATION	2.713367306539932E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999999568176546	WITHOUT_CLASSIFICATION	4.318234539445201E-7	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999936491405821	WITHOUT_CLASSIFICATION	6.35085941786745E-6	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999928846718021	WITHOUT_CLASSIFICATION	7.115328197882537E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999979414051803	WITHOUT_CLASSIFICATION	2.0585948197193372E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998219802265	WITHOUT_CLASSIFICATION	1.7801977358275732E-7	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.999997194191864	WITHOUT_CLASSIFICATION	2.8058081359961966E-6	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931337229652	WITHOUT_CLASSIFICATION	6.8662770348148086E-6	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999798882216112	WITHOUT_CLASSIFICATION	2.0111778388762853E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998973060018851	WITHOUT_CLASSIFICATION	1.0269399811486222E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999882953688894	WITHOUT_CLASSIFICATION	1.1704631110584233E-5	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9686879180640828	WITHOUT_CLASSIFICATION	0.03131208193591718	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999994748136296	WITHOUT_CLASSIFICATION	5.251863703865369E-7	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999704779569568	WITHOUT_CLASSIFICATION	2.9522043043178355E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999768050923619	WITHOUT_CLASSIFICATION	2.3194907638112033E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999768050923619	WITHOUT_CLASSIFICATION	2.3194907638112033E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998973060018851	WITHOUT_CLASSIFICATION	1.0269399811486222E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999943041287153	WITHOUT_CLASSIFICATION	5.695871284773371E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9873376739695414	WITHOUT_CLASSIFICATION	0.012662326030458663	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9950033782292222	WITHOUT_CLASSIFICATION	0.004996621770777673	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999978409423614	WITHOUT_CLASSIFICATION	2.159057638630262E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999980452510657	WITHOUT_CLASSIFICATION	1.9547489342973705E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9997934214881683	WITHOUT_CLASSIFICATION	2.0657851183173583E-4	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9526169267667304	WITHOUT_CLASSIFICATION	0.04738307323326966	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999948884002514	WITHOUT_CLASSIFICATION	5.111599748507945E-6	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999986384786503	WITHOUT_CLASSIFICATION	1.3615213497299872E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9996645008574986	WITHOUT_CLASSIFICATION	3.3549914250132813E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999940987599758	WITHOUT_CLASSIFICATION	5.9012400241691456E-6	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999584511772974	WITHOUT_CLASSIFICATION	4.1548822702613496E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999430396499728	WITHOUT_CLASSIFICATION	5.696035002720328E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999895209934	WITHOUT_CLASSIFICATION	1.0479006544841517E-8	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999778433974	WITHOUT_CLASSIFICATION	2.2156602541006988E-8	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9990662550325978	WITHOUT_CLASSIFICATION	9.337449674023048E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999794651849182	WITHOUT_CLASSIFICATION	2.0534815081906358E-5	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.999790562803365	WITHOUT_CLASSIFICATION	2.094371966349022E-4	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818256640037	WITHOUT_CLASSIFICATION	1.817433599628804E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999985650381022	WITHOUT_CLASSIFICATION	1.4349618977513227E-6	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999985764971494	WITHOUT_CLASSIFICATION	1.4235028505918359E-6	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999564578977114	WITHOUT_CLASSIFICATION	4.35421022885525E-5	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860564994227	WITHOUT_CLASSIFICATION	1.3943500577281952E-5	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999393830811133	WITHOUT_CLASSIFICATION	6.061691888684734E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998735928753317	WITHOUT_CLASSIFICATION	1.264071246682991E-4	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992230563889	WITHOUT_CLASSIFICATION	7.76943611066614E-7	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840011801915	WITHOUT_CLASSIFICATION	1.5998819808528166E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967367655029	WITHOUT_CLASSIFICATION	3.2632344970943164E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999496304273863	WITHOUT_CLASSIFICATION	5.0369572613688594E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927200171376	WITHOUT_CLASSIFICATION	7.279982862466556E-6	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999134588725471	WITHOUT_CLASSIFICATION	8.654112745278923E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999880373966887	WITHOUT_CLASSIFICATION	1.1962603311375459E-5	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976009966085	WITHOUT_CLASSIFICATION	2.3990033914538372E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767069127159	WITHOUT_CLASSIFICATION	2.329308728404685E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998607601223252	WITHOUT_CLASSIFICATION	1.3923987767479543E-4	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958774661412	WITHOUT_CLASSIFICATION	4.122533858818462E-6	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998543336695651	WITHOUT_CLASSIFICATION	1.4566633043489976E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999102376260862	WITHOUT_CLASSIFICATION	8.976237391372389E-5	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999912307838809	WITHOUT_CLASSIFICATION	8.769216119167625E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984845031866	WITHOUT_CLASSIFICATION	1.5154968133986845E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999952100160698	WITHOUT_CLASSIFICATION	4.7899839301336125E-6	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940171035577	WITHOUT_CLASSIFICATION	5.9828964422805165E-6	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.5348754718655894	WITHOUT_CLASSIFICATION	0.46512452813441063	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996442337009018	WITHOUT_CLASSIFICATION	3.5576629909812E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999990989656411	WITHOUT_CLASSIFICATION	9.010343589788369E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998431965015188	WITHOUT_CLASSIFICATION	1.5680349848118028E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999599108386423	WITHOUT_CLASSIFICATION	4.008916135766096E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999965273250832	WITHOUT_CLASSIFICATION	3.4726749169255595E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9372518910240247	WITHOUT_CLASSIFICATION	0.06274810897597519	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999890873184248	WITHOUT_CLASSIFICATION	1.091268157520479E-5	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999491906707751	WITHOUT_CLASSIFICATION	5.0809329224942156E-5	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999414880282089	WITHOUT_CLASSIFICATION	5.8511971791193146E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999885844056938	WITHOUT_CLASSIFICATION	1.1415594306103336E-5	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999765651471147	WITHOUT_CLASSIFICATION	2.3434852885191846E-5	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999982123530828	WITHOUT_CLASSIFICATION	1.7876469171364143E-6	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999420797613825	WITHOUT_CLASSIFICATION	5.7920238617423016E-5	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999660452858232	WITHOUT_CLASSIFICATION	3.3954714176844135E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999563256191542	WITHOUT_CLASSIFICATION	4.367438084583165E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999718196831848	WITHOUT_CLASSIFICATION	2.818031681518666E-5	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971732571502	WITHOUT_CLASSIFICATION	2.8267428498174417E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988303273262	WITHOUT_CLASSIFICATION	1.1696726739018886E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904135130818	WITHOUT_CLASSIFICATION	9.586486918098016E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999804919179898	WITHOUT_CLASSIFICATION	1.9508082010243154E-5	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9995333814201496	WITHOUT_CLASSIFICATION	4.666185798504862E-4	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999955619780232	WITHOUT_CLASSIFICATION	4.4380219767944294E-6	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999956873677829	WITHOUT_CLASSIFICATION	4.312632217109429E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9976380492231479	WITHOUT_CLASSIFICATION	0.002361950776852167	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988229748743	WITHOUT_CLASSIFICATION	1.1770251257172731E-6	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999852192220952	WITHOUT_CLASSIFICATION	1.4780777904740727E-5	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999661557290603	WITHOUT_CLASSIFICATION	3.384427093961745E-5	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999962958274109	WITHOUT_CLASSIFICATION	3.7041725890876938E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999303283277895	WITHOUT_CLASSIFICATION	6.967167221050998E-4	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9798110792090288	WITHOUT_CLASSIFICATION	0.020188920790971225	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999965508362816	WITHOUT_CLASSIFICATION	3.44916371833769E-6	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998447216721893	WITHOUT_CLASSIFICATION	1.5527832781070156E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999504534778287	WITHOUT_CLASSIFICATION	4.954652217129088E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998431965015188	WITHOUT_CLASSIFICATION	1.5680349848118028E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9891370567012122	WITHOUT_CLASSIFICATION	0.010862943298787791	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999244600927725	WITHOUT_CLASSIFICATION	7.553990722744568E-5	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999453984067043	WITHOUT_CLASSIFICATION	5.460159329577954E-5	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9904404740042075	WITHOUT_CLASSIFICATION	0.009559525995792417	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9996995365272829	WITHOUT_CLASSIFICATION	3.004634727170387E-4	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999990942839058	WITHOUT_CLASSIFICATION	9.057160941411966E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9993105702689407	WITHOUT_CLASSIFICATION	6.894297310593419E-4	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9992020408024268	WITHOUT_CLASSIFICATION	7.979591975730617E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9996854957159356	WITHOUT_CLASSIFICATION	3.145042840644125E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997655850199667	WITHOUT_CLASSIFICATION	2.3441498003337537E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9984125704164373	WITHOUT_CLASSIFICATION	0.0015874295835628053	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9995572001811077	WITHOUT_CLASSIFICATION	4.4279981889234E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999698499884188	WITHOUT_CLASSIFICATION	3.0150011581276185E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9995125121265865	WITHOUT_CLASSIFICATION	4.874878734134813E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999924109150845	WITHOUT_CLASSIFICATION	7.589084915496158E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998883624729739	WITHOUT_CLASSIFICATION	1.1163752702603826E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9995426316583799	WITHOUT_CLASSIFICATION	4.573683416201919E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997428185722396	WITHOUT_CLASSIFICATION	2.5718142776038467E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999980135760104	WITHOUT_CLASSIFICATION	1.9864239895114387E-6	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999944518639502	WITHOUT_CLASSIFICATION	5.548136049781885E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999866385446853	WITHOUT_CLASSIFICATION	1.3361455314617E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999344932666495	WITHOUT_CLASSIFICATION	6.550673335045773E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996697420572088	WITHOUT_CLASSIFICATION	3.3025794279118424E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999971465889318	WITHOUT_CLASSIFICATION	2.853411068238923E-6	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997098487097711	WITHOUT_CLASSIFICATION	2.9015129022892905E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997364321737	WITHOUT_CLASSIFICATION	2.6356782636337044E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9996756257790849	WITHOUT_CLASSIFICATION	3.2437422091514327E-4	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999863486144909	WITHOUT_CLASSIFICATION	1.3651385509170527E-5	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999900787572193	WITHOUT_CLASSIFICATION	9.921242780533386E-6	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997795477534089	WITHOUT_CLASSIFICATION	2.2045224659108124E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998431965015188	WITHOUT_CLASSIFICATION	1.5680349848118028E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999244837373912	WITHOUT_CLASSIFICATION	7.551626260881542E-5	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999967385520444	WITHOUT_CLASSIFICATION	3.261447955672616E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997863859845229	WITHOUT_CLASSIFICATION	2.1361401547709174E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998431965015188	WITHOUT_CLASSIFICATION	1.5680349848118028E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999384559674473	WITHOUT_CLASSIFICATION	6.154403255260202E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999866385446853	WITHOUT_CLASSIFICATION	1.3361455314617E-5	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.999936120197916	WITHOUT_CLASSIFICATION	6.387980208397678E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9992178095470018	WITHOUT_CLASSIFICATION	7.821904529982345E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999905873682294	WITHOUT_CLASSIFICATION	9.412631770534724E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9997655850199667	WITHOUT_CLASSIFICATION	2.3441498003337537E-4	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9984125704164373	WITHOUT_CLASSIFICATION	0.0015874295835628053	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9995572001811077	WITHOUT_CLASSIFICATION	4.4279981889234E-4	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999984348891875	WITHOUT_CLASSIFICATION	1.5651108125596464E-6	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999929199066644	WITHOUT_CLASSIFICATION	7.0800933355813325E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999972971380848	WITHOUT_CLASSIFICATION	2.702861915245796E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9946167576856437	WITHOUT_CLASSIFICATION	0.005383242314356187	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9988034951592661	WITHOUT_CLASSIFICATION	0.001196504840733857	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998431965015188	WITHOUT_CLASSIFICATION	1.5680349848118028E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999698499884188	WITHOUT_CLASSIFICATION	3.0150011581276185E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9995125121265865	WITHOUT_CLASSIFICATION	4.874878734134813E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985266116759	WITHOUT_CLASSIFICATION	1.4733883240557955E-6	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996964789858	WITHOUT_CLASSIFICATION	3.035210142639397E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999914696699097	WITHOUT_CLASSIFICATION	8.530330090269532E-6	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999843152578715	WITHOUT_CLASSIFICATION	1.5684742128470816E-5	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999894725492825	WITHOUT_CLASSIFICATION	1.0527450717363427E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999957354055675	WITHOUT_CLASSIFICATION	4.264594432447701E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984845031866	WITHOUT_CLASSIFICATION	1.5154968133986845E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999744474896716	WITHOUT_CLASSIFICATION	2.5552510328435176E-5	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9836367826916558	WITHOUT_CLASSIFICATION	0.01636321730834425	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9808712295961941	WITHOUT_CLASSIFICATION	0.01912877040380589	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999425277595778	WITHOUT_CLASSIFICATION	5.7472240422295545E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999985170759648	WITHOUT_CLASSIFICATION	1.4829240352114415E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840011801915	WITHOUT_CLASSIFICATION	1.5998819808528166E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967367655029	WITHOUT_CLASSIFICATION	3.2632344970943164E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767069127159	WITHOUT_CLASSIFICATION	2.329308728404685E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999985170759648	WITHOUT_CLASSIFICATION	1.4829240352114415E-6	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9849955688811348	WITHOUT_CLASSIFICATION	0.01500443111886527	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999810787807465	WITHOUT_CLASSIFICATION	1.8921219253566793E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946730010687	WITHOUT_CLASSIFICATION	5.326998931244534E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992017323312591	WITHOUT_CLASSIFICATION	7.982676687409385E-4	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999990257298513	WITHOUT_CLASSIFICATION	9.742701486633903E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999865654227347	WITHOUT_CLASSIFICATION	1.3434577265290838E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998607601223252	WITHOUT_CLASSIFICATION	1.3923987767479543E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999102376260862	WITHOUT_CLASSIFICATION	8.976237391372389E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999303283277895	WITHOUT_CLASSIFICATION	6.967167221050998E-4	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9972139909648782	WITHOUT_CLASSIFICATION	0.0027860090351219473	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999917664210471	WITHOUT_CLASSIFICATION	8.233578952892212E-5	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999979994453291	WITHOUT_CLASSIFICATION	2.000554670919802E-6	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999981899731664	WITHOUT_CLASSIFICATION	1.8100268336015252E-5	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9996461015639162	WITHOUT_CLASSIFICATION	3.5389843608385696E-4	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999994984522859	WITHOUT_CLASSIFICATION	5.015477140738894E-7	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999913762415104	WITHOUT_CLASSIFICATION	8.623758489674011E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999986384786503	WITHOUT_CLASSIFICATION	1.3615213497299872E-6	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999985608287336	WITHOUT_CLASSIFICATION	1.4391712662662757E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9835801506972404	WITHOUT_CLASSIFICATION	0.016419849302759606	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999976053192886	WITHOUT_CLASSIFICATION	2.394680711342688E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999947485168605	WITHOUT_CLASSIFICATION	5.25148313945503E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9992758327450532	WITHOUT_CLASSIFICATION	7.241672549469504E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999957535419413	WITHOUT_CLASSIFICATION	4.246458058691617E-5	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999846457757271	WITHOUT_CLASSIFICATION	1.535422427295784E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980226752516	WITHOUT_CLASSIFICATION	1.977324748340788E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999976539268313	WITHOUT_CLASSIFICATION	2.3460731687251317E-6	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999817689280757	WITHOUT_CLASSIFICATION	1.8231071924330985E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9995239915878664	WITHOUT_CLASSIFICATION	4.7600841213353703E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999963334070594	WITHOUT_CLASSIFICATION	3.666592940703607E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999978247725299	WITHOUT_CLASSIFICATION	2.175227470120228E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999702233678688	WITHOUT_CLASSIFICATION	2.977663213113612E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999385054242863	WITHOUT_CLASSIFICATION	6.149457571377279E-5	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999786390700105	WITHOUT_CLASSIFICATION	2.1360929989552593E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9994715278388535	WITHOUT_CLASSIFICATION	5.284721611465054E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999200071917347	WITHOUT_CLASSIFICATION	7.999280826535093E-5	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999973883759645	WITHOUT_CLASSIFICATION	2.6116240354759764E-6	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974355145129	WITHOUT_CLASSIFICATION	2.5644854871633865E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727567049155	WITHOUT_CLASSIFICATION	2.7243295084516985E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999987837428539	WITHOUT_CLASSIFICATION	1.2162571460838335E-6	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999951367139	WITHOUT_CLASSIFICATION	4.8632861605653E-9	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999993829283751	WITHOUT_CLASSIFICATION	6.17071624928143E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999958811850037	WITHOUT_CLASSIFICATION	4.118814996306775E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.999807944637719	WITHOUT_CLASSIFICATION	1.920553622809402E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998639613309469	WITHOUT_CLASSIFICATION	1.360386690530233E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999998381077866	WITHOUT_CLASSIFICATION	1.6189221351127577E-7	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999042108761	WITHOUT_CLASSIFICATION	9.578912377136794E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999841133731884	WITHOUT_CLASSIFICATION	1.588662681163931E-5	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999999495184824	WITHOUT_CLASSIFICATION	5.04815175961621E-7	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9988075589576939	WITHOUT_CLASSIFICATION	0.0011924410423060567	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999999604449444	WITHOUT_CLASSIFICATION	3.9555055593291417E-8	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999995229105095	WITHOUT_CLASSIFICATION	4.770894904283141E-7	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999994716742995	WITHOUT_CLASSIFICATION	5.283257005939432E-7	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.999995010839091	WITHOUT_CLASSIFICATION	4.989160908938744E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999909442894	WITHOUT_CLASSIFICATION	9.05571064577616E-9	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999999828853218	WITHOUT_CLASSIFICATION	1.7114678195997668E-8	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999834483093414	WITHOUT_CLASSIFICATION	1.6551690658571368E-5	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999998951688808	WITHOUT_CLASSIFICATION	1.0483111915877532E-7	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999684942884539	WITHOUT_CLASSIFICATION	3.150571154608373E-5	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999990848937913	WITHOUT_CLASSIFICATION	9.151062087334474E-7	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9961540700703159	WITHOUT_CLASSIFICATION	0.003845929929683991	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999974932205136	WITHOUT_CLASSIFICATION	2.506779486410195E-6	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999922777749095	WITHOUT_CLASSIFICATION	7.722225090460432E-6	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.99993778728511	WITHOUT_CLASSIFICATION	6.221271488996918E-5	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999869029934735	WITHOUT_CLASSIFICATION	1.309700652649803E-5	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998271742793	WITHOUT_CLASSIFICATION	1.728257208046669E-7	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999077125052576	WITHOUT_CLASSIFICATION	9.228749474237586E-5	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999999057318828	WITHOUT_CLASSIFICATION	9.426811719199693E-7	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999974364202306	WITHOUT_CLASSIFICATION	2.563579769334896E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999985822328047	WITHOUT_CLASSIFICATION	1.4177671953080603E-6	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999998634644381	WITHOUT_CLASSIFICATION	1.3653556189575543E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9995702477444842	WITHOUT_CLASSIFICATION	4.2975225551571594E-4	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999987937195184	WITHOUT_CLASSIFICATION	1.2062804816446976E-6	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9991935374933949	WITHOUT_CLASSIFICATION	8.064625066051024E-4	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.999998972442915	WITHOUT_CLASSIFICATION	1.0275570850151947E-6	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999998712909308	WITHOUT_CLASSIFICATION	1.2870906913151518E-7	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.999998585065704	WITHOUT_CLASSIFICATION	1.414934295916188E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999993837410497	WITHOUT_CLASSIFICATION	6.1625895031423556E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9998599282956853	WITHOUT_CLASSIFICATION	1.4007170431484643E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9998857160058165	WITHOUT_CLASSIFICATION	1.1428399418347143E-4	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999693551996514	WITHOUT_CLASSIFICATION	3.0644800348705584E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9991263721253855	WITHOUT_CLASSIFICATION	8.736278746145598E-4	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999860574798808	WITHOUT_CLASSIFICATION	1.3942520119135144E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8248219087290017	WITHOUT_CLASSIFICATION	0.1751780912709983	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999983261802978	WITHOUT_CLASSIFICATION	1.6738197021461118E-6	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9994660120986394	WITHOUT_CLASSIFICATION	5.339879013606475E-4	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9989196168500164	WITHOUT_CLASSIFICATION	0.0010803831499835352	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9990324957572458	WITHOUT_CLASSIFICATION	9.675042427541683E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999999536119464	WITHOUT_CLASSIFICATION	4.638805359048087E-7	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999904043621075	WITHOUT_CLASSIFICATION	9.595637892457516E-6	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999960418973618	WITHOUT_CLASSIFICATION	3.958102638140929E-6	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999994734611962	WITHOUT_CLASSIFICATION	5.265388036596826E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9992965031904862	WITHOUT_CLASSIFICATION	7.034968095137621E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9988508345428626	WITHOUT_CLASSIFICATION	0.001149165457137471	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999581568712905	WITHOUT_CLASSIFICATION	4.1843128709579506E-5	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999985043000904	WITHOUT_CLASSIFICATION	1.4956999096301153E-6	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999948208647433	WITHOUT_CLASSIFICATION	5.1791352567036515E-6	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9993248324723649	WITHOUT_CLASSIFICATION	6.751675276351085E-4	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997432784091107	WITHOUT_CLASSIFICATION	2.567215908893334E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985289580948	WITHOUT_CLASSIFICATION	1.4710419052157736E-6	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.999055440447542	WITHOUT_CLASSIFICATION	9.445595524580275E-4	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999922296931274	WITHOUT_CLASSIFICATION	7.770306872596207E-6	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998905488853728	WITHOUT_CLASSIFICATION	1.0945111462712282E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999362725324109	WITHOUT_CLASSIFICATION	6.372746758905399E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999984592750246	WITHOUT_CLASSIFICATION	1.5407249753110398E-6	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.999968867786818	WITHOUT_CLASSIFICATION	3.1132213181984204E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999975675039674	WITHOUT_CLASSIFICATION	2.4324960326005555E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999973057667858	WITHOUT_CLASSIFICATION	2.694233214230153E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999727414043961	WITHOUT_CLASSIFICATION	2.725859560389773E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999758730654554	WITHOUT_CLASSIFICATION	2.4126934544524475E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9990080056086389	WITHOUT_CLASSIFICATION	9.919943913611815E-4	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999727414043961	WITHOUT_CLASSIFICATION	2.725859560389773E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999986891088632	WITHOUT_CLASSIFICATION	1.3108911367862288E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999465175004455	WITHOUT_CLASSIFICATION	5.348249955452284E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999955958994261	WITHOUT_CLASSIFICATION	4.4041005738623E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999847893785814	WITHOUT_CLASSIFICATION	1.52106214187229E-5	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.999990442727924	WITHOUT_CLASSIFICATION	9.557272075855557E-6	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998567130324	WITHOUT_CLASSIFICATION	1.4328696758289379E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998203561794368	WITHOUT_CLASSIFICATION	1.796438205631999E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999999762686787	WITHOUT_CLASSIFICATION	2.3731321282986306E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999988257537228	WITHOUT_CLASSIFICATION	1.174246277183452E-6	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999741816755342	WITHOUT_CLASSIFICATION	2.5818324465813134E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999996748334676	WITHOUT_CLASSIFICATION	3.251665323336139E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999887651989853	WITHOUT_CLASSIFICATION	1.1234801014617096E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.999998683010075	WITHOUT_CLASSIFICATION	1.3169899249704617E-6	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999939250986567	WITHOUT_CLASSIFICATION	6.074901343404234E-6	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999893432430598	WITHOUT_CLASSIFICATION	1.0656756940315026E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9995283638846859	WITHOUT_CLASSIFICATION	4.7163611531407334E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993684547368554	WITHOUT_CLASSIFICATION	6.315452631446361E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9993684547368554	WITHOUT_CLASSIFICATION	6.315452631446361E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999952351555114	WITHOUT_CLASSIFICATION	4.7648444886076616E-6	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999445294545382	WITHOUT_CLASSIFICATION	5.5470545461834E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999369807216105	WITHOUT_CLASSIFICATION	6.301927838938683E-5	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999578110947197	WITHOUT_CLASSIFICATION	4.218890528027322E-5	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999764082621208	WITHOUT_CLASSIFICATION	2.359173787919701E-5	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.5598228866198952	WITHOUT_CLASSIFICATION	0.44017711338010485	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.999936543165891	WITHOUT_CLASSIFICATION	6.345683410898644E-5	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999998803124526	WITHOUT_CLASSIFICATION	1.1968754746804211E-7	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9994659927589329	WITHOUT_CLASSIFICATION	5.34007241067128E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9997566465713562	WITHOUT_CLASSIFICATION	2.4335342864378716E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9754137811783732	WITHOUT_CLASSIFICATION	0.024586218821626742	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999942850063	WITHOUT_CLASSIFICATION	5.714993734299323E-9	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999914398464281	WITHOUT_CLASSIFICATION	8.560153571882258E-6	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999016289142325	WITHOUT_CLASSIFICATION	9.8371085767582E-5	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999996187431242	WITHOUT_CLASSIFICATION	3.812568758250352E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.999957535419413	WITHOUT_CLASSIFICATION	4.246458058691617E-5	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999895219792649	WITHOUT_CLASSIFICATION	1.047802073513305E-5	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999916501211776	WITHOUT_CLASSIFICATION	8.349878822427924E-6	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9988743534433037	WITHOUT_CLASSIFICATION	0.0011256465566962792	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999337704847701	WITHOUT_CLASSIFICATION	6.62295152299653E-5	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999980467494489	WITHOUT_CLASSIFICATION	1.9532505510989465E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999717165185794	WITHOUT_CLASSIFICATION	2.8283481420623886E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999999793612737	WITHOUT_CLASSIFICATION	2.063872623765248E-8	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999995201734888	WITHOUT_CLASSIFICATION	4.798265112092815E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999981071203843	WITHOUT_CLASSIFICATION	1.8928796157636972E-6	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999958645281533	WITHOUT_CLASSIFICATION	4.135471846710235E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9994904142257218	WITHOUT_CLASSIFICATION	5.095857742781211E-4	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999936169814593	WITHOUT_CLASSIFICATION	6.383018540827781E-6	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999877780087382	WITHOUT_CLASSIFICATION	1.2221991261861152E-5	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999835661011757	WITHOUT_CLASSIFICATION	1.6433898824326555E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999977209909282	WITHOUT_CLASSIFICATION	2.2790090718402373E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999959629470194	WITHOUT_CLASSIFICATION	4.0370529805996574E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9997161281852215	WITHOUT_CLASSIFICATION	2.838718147784604E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996958689524855	WITHOUT_CLASSIFICATION	3.0413104751446596E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999340243373617	WITHOUT_CLASSIFICATION	6.597566263829144E-5	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999748005592397	WITHOUT_CLASSIFICATION	2.5199440760229442E-5	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999948023931069	WITHOUT_CLASSIFICATION	5.197606893148312E-6	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9990886958300386	WITHOUT_CLASSIFICATION	9.113041699613731E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999553694275	WITHOUT_CLASSIFICATION	4.463057239823661E-8	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999942302487449	WITHOUT_CLASSIFICATION	5.769751255103887E-6	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9995066647059353	WITHOUT_CLASSIFICATION	4.93335294064732E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999988234383476	WITHOUT_CLASSIFICATION	1.1765616523793906E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9991477842380665	WITHOUT_CLASSIFICATION	8.52215761933391E-4	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999741621291831	WITHOUT_CLASSIFICATION	2.5837870816794E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999618132375162	WITHOUT_CLASSIFICATION	3.8186762483696234E-5	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999952533823308	WITHOUT_CLASSIFICATION	4.746617669229238E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982870576078294	WITHOUT_CLASSIFICATION	0.001712942392170544	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946271173583	WITHOUT_CLASSIFICATION	5.372882641671485E-6	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982721315711	WITHOUT_CLASSIFICATION	1.7278684289155E-6	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9999876051423842	WITHOUT_CLASSIFICATION	1.2394857615909367E-5	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999915838450354	WITHOUT_CLASSIFICATION	8.416154964643692E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998092903944	WITHOUT_CLASSIFICATION	1.907096054753786E-7	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.999722202407564	WITHOUT_CLASSIFICATION	2.777975924358634E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9996392417756852	WITHOUT_CLASSIFICATION	3.6075822431482787E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668321391305	WITHOUT_CLASSIFICATION	3.3167860869435615E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9996392417756852	WITHOUT_CLASSIFICATION	3.6075822431482787E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.995513451514628	WITHOUT_CLASSIFICATION	0.0044865484853720125	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999982392472805	WITHOUT_CLASSIFICATION	1.7607527195146846E-6	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9999981970316647	WITHOUT_CLASSIFICATION	1.8029683353231593E-6	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999992195475996	WITHOUT_CLASSIFICATION	7.804524003371758E-7	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999973997026063	WITHOUT_CLASSIFICATION	2.6002973936612253E-6	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999998747764449	WITHOUT_CLASSIFICATION	1.2522355517469918E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999979529852607	WITHOUT_CLASSIFICATION	2.0470147392327497E-6	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999807119187031	WITHOUT_CLASSIFICATION	1.9288081296874996E-5	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999968255336481	WITHOUT_CLASSIFICATION	3.1744663519635053E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9973670570020698	WITHOUT_CLASSIFICATION	0.00263294299793003	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997050205930806	WITHOUT_CLASSIFICATION	2.9497940691945355E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999998473656447	WITHOUT_CLASSIFICATION	1.5263435522223578E-7	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9078052326918551	WITHOUT_CLASSIFICATION	0.09219476730814488	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9914777171066274	WITHOUT_CLASSIFICATION	0.008522282893372717	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9938245324536575	WITHOUT_CLASSIFICATION	0.006175467546342434	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999999105000967	WITHOUT_CLASSIFICATION	8.949990327920344E-8	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999119640492243	WITHOUT_CLASSIFICATION	8.803595077567039E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999119640492243	WITHOUT_CLASSIFICATION	8.803595077567039E-5	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997733492440407	WITHOUT_CLASSIFICATION	2.2665075595926728E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999988650310988	WITHOUT_CLASSIFICATION	1.1349689012183957E-6	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999403582619817	WITHOUT_CLASSIFICATION	5.964173801824877E-5	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999844713733846	WITHOUT_CLASSIFICATION	1.5528626615373414E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9985515716685794	WITHOUT_CLASSIFICATION	0.0014484283314205547	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999943504341204	WITHOUT_CLASSIFICATION	5.649565879591635E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996549725762744	WITHOUT_CLASSIFICATION	3.450274237255329E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999287117003949	WITHOUT_CLASSIFICATION	7.128829960509168E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999975456080568	WITHOUT_CLASSIFICATION	2.4543919432288804E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.999998305836247	WITHOUT_CLASSIFICATION	1.694163752941972E-6	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999709730496736	WITHOUT_CLASSIFICATION	2.902695032638601E-5	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999994230444119	WITHOUT_CLASSIFICATION	5.769555881048616E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.99999992200876	WITHOUT_CLASSIFICATION	7.79912400226561E-8	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999731032593936	WITHOUT_CLASSIFICATION	2.689674060641408E-5	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999999449420784	WITHOUT_CLASSIFICATION	5.505792160064761E-7	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999523247593446	WITHOUT_CLASSIFICATION	4.767524065542757E-5	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998648372653367	WITHOUT_CLASSIFICATION	1.351627346633141E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9968551366568658	WITHOUT_CLASSIFICATION	0.0031448633431341967	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999962872261864	WITHOUT_CLASSIFICATION	3.7127738136857346E-6	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999958400584403	WITHOUT_CLASSIFICATION	4.159941559586954E-6	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.99999183460881	WITHOUT_CLASSIFICATION	8.165391189873743E-6	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999990463467745	WITHOUT_CLASSIFICATION	9.536532253865556E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999986445066228	WITHOUT_CLASSIFICATION	1.3554933772121252E-6	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999553132042239	WITHOUT_CLASSIFICATION	4.468679577594229E-5	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999990051218673	WITHOUT_CLASSIFICATION	9.948781326098814E-7	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999893705484999	WITHOUT_CLASSIFICATION	1.062945150017861E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999912501298077	WITHOUT_CLASSIFICATION	8.749870192292575E-6	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9489271452201699	WITHOUT_CLASSIFICATION	0.05107285477983029	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999645203455445	WITHOUT_CLASSIFICATION	3.547965445549111E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9984867696651356	WITHOUT_CLASSIFICATION	0.0015132303348644584	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999750443116497	WITHOUT_CLASSIFICATION	2.495568835024219E-5	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999485959906088	WITHOUT_CLASSIFICATION	5.140400939106287E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999998546413627	WITHOUT_CLASSIFICATION	1.4535863731431236E-7	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9769227270399115	WITHOUT_CLASSIFICATION	0.023077272960088466	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999924207180761	WITHOUT_CLASSIFICATION	7.579281923895839E-6	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999872133813074	WITHOUT_CLASSIFICATION	1.278661869252288E-5	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999635031050199	WITHOUT_CLASSIFICATION	3.6496894980013674E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999777198638446	WITHOUT_CLASSIFICATION	2.2280136155367617E-5	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9954449919839767	WITHOUT_CLASSIFICATION	0.004555008016023274	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999797462558184	WITHOUT_CLASSIFICATION	2.0253744181476317E-5	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999952449635143	WITHOUT_CLASSIFICATION	4.755036485725116E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983816162341	WITHOUT_CLASSIFICATION	1.6183837658547531E-6	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.999825178979976	WITHOUT_CLASSIFICATION	1.7482102002405774E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9954198379571666	WITHOUT_CLASSIFICATION	0.0045801620428334595	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999997476926727	WITHOUT_CLASSIFICATION	2.5230732732612654E-7	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9988733432886281	WITHOUT_CLASSIFICATION	0.0011266567113719403	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9982261751684619	WITHOUT_CLASSIFICATION	0.0017738248315381342	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999998527576652	WITHOUT_CLASSIFICATION	1.4724233469753863E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999839023116037	WITHOUT_CLASSIFICATION	1.6097688396203314E-5	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999998534085804	WITHOUT_CLASSIFICATION	1.4659141952372394E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995654453773	WITHOUT_CLASSIFICATION	4.345546227048736E-6	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9998143157693576	WITHOUT_CLASSIFICATION	1.8568423064230452E-4	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999928389448226	WITHOUT_CLASSIFICATION	7.1610551774372E-6	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999806031819464	WITHOUT_CLASSIFICATION	1.939681805370153E-5	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.999959540750577	WITHOUT_CLASSIFICATION	4.045924942296571E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999384559674473	WITHOUT_CLASSIFICATION	6.154403255260202E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999384559674473	WITHOUT_CLASSIFICATION	6.154403255260202E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999672006992	WITHOUT_CLASSIFICATION	3.279930074879824E-8	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995965171264155	WITHOUT_CLASSIFICATION	4.034828735845117E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9992663412434685	WITHOUT_CLASSIFICATION	7.336587565315472E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9983311520981742	WITHOUT_CLASSIFICATION	0.0016688479018257152	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999992637838337	WITHOUT_CLASSIFICATION	7.362161662374135E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999232991396707	WITHOUT_CLASSIFICATION	7.670086032927278E-5	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999146101257079	WITHOUT_CLASSIFICATION	8.538987429208708E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9997929219067775	WITHOUT_CLASSIFICATION	2.0707809322260075E-4	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999898852026731	WITHOUT_CLASSIFICATION	1.0114797326960817E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999908581980029	WITHOUT_CLASSIFICATION	9.141801997064672E-6	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998722770979743	WITHOUT_CLASSIFICATION	1.2772290202571907E-4	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999646602459249	WITHOUT_CLASSIFICATION	3.5339754075139904E-5	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999376217448984	WITHOUT_CLASSIFICATION	6.237825510157154E-5	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999963355473375	WITHOUT_CLASSIFICATION	3.6644526626134435E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9998850994833848	WITHOUT_CLASSIFICATION	1.1490051661522207E-4	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999998187542408	WITHOUT_CLASSIFICATION	1.812457591596268E-7	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999994713667627	WITHOUT_CLASSIFICATION	5.286332372970463E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999715066675895	WITHOUT_CLASSIFICATION	2.849333241057432E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9974235655833528	WITHOUT_CLASSIFICATION	0.0025764344166472014	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999958836490493	WITHOUT_CLASSIFICATION	4.116350950695708E-6	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999680276814725	WITHOUT_CLASSIFICATION	3.197231852741208E-5	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999952384308339	WITHOUT_CLASSIFICATION	4.761569166090755E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995646542286619	WITHOUT_CLASSIFICATION	4.3534577133819266E-4	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999666069688219	WITHOUT_CLASSIFICATION	3.339303117819686E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9942888960486311	WITHOUT_CLASSIFICATION	0.005711103951368962	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9756036452521123	WITHOUT_CLASSIFICATION	0.0243963547478877	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9980872339606549	WITHOUT_CLASSIFICATION	0.0019127660393450793	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9976918735452003	WITHOUT_CLASSIFICATION	0.0023081264547996595	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.999999888232416	WITHOUT_CLASSIFICATION	1.117675839025843E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995646542286619	WITHOUT_CLASSIFICATION	4.3534577133819266E-4	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999739191578327	WITHOUT_CLASSIFICATION	2.608084216727778E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.999981148665089	WITHOUT_CLASSIFICATION	1.8851334910862375E-5	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.998678551388198	WITHOUT_CLASSIFICATION	0.0013214486118020379	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999418663884421	WITHOUT_CLASSIFICATION	5.81336115578985E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999944911110944	WITHOUT_CLASSIFICATION	5.508888905651426E-6	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9999287562388549	WITHOUT_CLASSIFICATION	7.124376114511828E-5	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.998937920492112	WITHOUT_CLASSIFICATION	0.0010620795078878852	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999989076260277	WITHOUT_CLASSIFICATION	1.0923739723059108E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999818687207062	WITHOUT_CLASSIFICATION	1.813127929388808E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999418663884421	WITHOUT_CLASSIFICATION	5.81336115578985E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999967675677782	WITHOUT_CLASSIFICATION	3.2324322216802306E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999509628839212	WITHOUT_CLASSIFICATION	4.903711607872594E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999306775730077	WITHOUT_CLASSIFICATION	6.932242699225514E-5	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996062105724559	WITHOUT_CLASSIFICATION	3.9378942754406945E-4	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999997043038059	WITHOUT_CLASSIFICATION	2.956961940710507E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999709730496736	WITHOUT_CLASSIFICATION	2.902695032638601E-5	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999946233636475	WITHOUT_CLASSIFICATION	5.376636352501524E-6	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999073287926314	WITHOUT_CLASSIFICATION	9.267120736848558E-5	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999362664769718	WITHOUT_CLASSIFICATION	6.373352302823014E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998680723878804	WITHOUT_CLASSIFICATION	1.3192761211951813E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999811316566706	WITHOUT_CLASSIFICATION	1.886834332940768E-4	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.999998569286694	WITHOUT_CLASSIFICATION	1.4307133060502256E-6	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999992693245604	WITHOUT_CLASSIFICATION	7.306754395215339E-7	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999913464315606	WITHOUT_CLASSIFICATION	8.653568439403277E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999732218099876	WITHOUT_CLASSIFICATION	2.677819001241141E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999998282613858	WITHOUT_CLASSIFICATION	1.717386140725216E-7	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996305968502751	WITHOUT_CLASSIFICATION	3.694031497248563E-4	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999723767221341	WITHOUT_CLASSIFICATION	2.762327786581419E-5	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999839207444798	WITHOUT_CLASSIFICATION	1.607925552014791E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999933515097111	WITHOUT_CLASSIFICATION	6.648490288844031E-6	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999920815210742	WITHOUT_CLASSIFICATION	7.918478925828482E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999794657734483	WITHOUT_CLASSIFICATION	2.053422655159805E-5	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999976783730427	WITHOUT_CLASSIFICATION	2.3216269574383702E-6	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999528500824645	WITHOUT_CLASSIFICATION	4.714991753546854E-5	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999881774147545	WITHOUT_CLASSIFICATION	1.1822585245486872E-5	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9938377401115612	WITHOUT_CLASSIFICATION	0.006162259888438794	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9998711381318585	WITHOUT_CLASSIFICATION	1.2886186814154658E-4	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999996833403801	WITHOUT_CLASSIFICATION	3.1665961985713665E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999944973484413	WITHOUT_CLASSIFICATION	5.502651558762704E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999995951056178	WITHOUT_CLASSIFICATION	4.0489438219610435E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999890592566615	WITHOUT_CLASSIFICATION	1.0940743338457967E-5	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.999983004747377	WITHOUT_CLASSIFICATION	1.699525262297582E-5	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999981083538697	WITHOUT_CLASSIFICATION	1.891646130367432E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999515391540915	WITHOUT_CLASSIFICATION	4.8460845908475984E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943337464358	WITHOUT_CLASSIFICATION	5.666253564158145E-6	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9931419583455828	WITHOUT_CLASSIFICATION	0.006858041654417135	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999042459200094	WITHOUT_CLASSIFICATION	9.575407999068861E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999960338100703	WITHOUT_CLASSIFICATION	3.966189929667738E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999873999693728	WITHOUT_CLASSIFICATION	1.260003062719081E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999873999693728	WITHOUT_CLASSIFICATION	1.260003062719081E-5	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999997699186323	WITHOUT_CLASSIFICATION	2.3008136785390044E-7	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9994779299821729	WITHOUT_CLASSIFICATION	5.220700178270522E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999622062930672	WITHOUT_CLASSIFICATION	3.7793706932901475E-5	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999985701352944	WITHOUT_CLASSIFICATION	1.4298647056301904E-6	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999933921461586	WITHOUT_CLASSIFICATION	6.607853841398898E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9665628895607823	WITHOUT_CLASSIFICATION	0.03343711043921778	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9995295582978411	WITHOUT_CLASSIFICATION	4.7044170215894377E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999999493501467	WITHOUT_CLASSIFICATION	5.06498532683912E-8	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999463612222	WITHOUT_CLASSIFICATION	5.3638777613560935E-8	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999993980858469	WITHOUT_CLASSIFICATION	6.019141531363384E-7	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9969882123029958	WITHOUT_CLASSIFICATION	0.003011787697004248	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999981660918295	WITHOUT_CLASSIFICATION	1.8339081706411496E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999996454184574	WITHOUT_CLASSIFICATION	3.545815425439669E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999873999693728	WITHOUT_CLASSIFICATION	1.260003062719081E-5	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999996288397781	WITHOUT_CLASSIFICATION	3.7116022190594727E-7	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9997267222131831	WITHOUT_CLASSIFICATION	2.73277786816909E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9961406977443312	WITHOUT_CLASSIFICATION	0.0038593022556688734	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999997617994755	WITHOUT_CLASSIFICATION	2.3820052454396217E-7	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999912137492798	WITHOUT_CLASSIFICATION	8.786250720173098E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999992267069677	WITHOUT_CLASSIFICATION	7.732930322761249E-7	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999949859817446	WITHOUT_CLASSIFICATION	5.014018255351877E-6	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999970716163764	WITHOUT_CLASSIFICATION	2.9283836236403317E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.999999829560142	WITHOUT_CLASSIFICATION	1.7043985807880543E-7	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9992053274612215	WITHOUT_CLASSIFICATION	7.946725387784682E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999215294770546	WITHOUT_CLASSIFICATION	7.847052294542447E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999515391540915	WITHOUT_CLASSIFICATION	4.8460845908475984E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999873999693728	WITHOUT_CLASSIFICATION	1.260003062719081E-5	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999988690610271	WITHOUT_CLASSIFICATION	1.1309389728726989E-6	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999761237914	WITHOUT_CLASSIFICATION	2.38762086024128E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.999989612876789	WITHOUT_CLASSIFICATION	1.0387123210941564E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999984644132088	WITHOUT_CLASSIFICATION	1.5355867911835055E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9969908198892385	WITHOUT_CLASSIFICATION	0.003009180110761548	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999836837358252	WITHOUT_CLASSIFICATION	1.631626417475686E-5	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994415293085	WITHOUT_CLASSIFICATION	5.584706913990596E-7	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9998979370550753	WITHOUT_CLASSIFICATION	1.0206294492474446E-4	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999982536643893	WITHOUT_CLASSIFICATION	1.7463356106788098E-6	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9998411698106148	WITHOUT_CLASSIFICATION	1.5883018938530103E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998754493808	WITHOUT_CLASSIFICATION	1.2455061909691222E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998999050425337	WITHOUT_CLASSIFICATION	1.0009495746629602E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999969431970724	WITHOUT_CLASSIFICATION	3.056802927488713E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999981048608727	WITHOUT_CLASSIFICATION	1.8951391272798142E-6	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.995513451514628	WITHOUT_CLASSIFICATION	0.0044865484853720125	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999928485097923	WITHOUT_CLASSIFICATION	7.151490207751514E-6	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999992891527381	WITHOUT_CLASSIFICATION	7.108472619166715E-7	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9994840628541655	WITHOUT_CLASSIFICATION	5.159371458345709E-4	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.999993991490702	WITHOUT_CLASSIFICATION	6.008509297981192E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999606513179	WITHOUT_CLASSIFICATION	3.934868212599059E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999913716202341	WITHOUT_CLASSIFICATION	8.628379765811964E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999913716202341	WITHOUT_CLASSIFICATION	8.628379765811964E-6	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999962723590536	WITHOUT_CLASSIFICATION	3.7276409463334377E-6	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999974896238751	WITHOUT_CLASSIFICATION	2.5103761249301975E-6	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999993009625882	WITHOUT_CLASSIFICATION	6.990374118799166E-7	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.999998789886318	WITHOUT_CLASSIFICATION	1.2101136820768936E-6	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999627951755522	WITHOUT_CLASSIFICATION	3.7204824447820355E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9989186085422517	WITHOUT_CLASSIFICATION	0.0010813914577483868	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9994736266139622	WITHOUT_CLASSIFICATION	5.263733860376922E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9978203011768789	WITHOUT_CLASSIFICATION	0.0021796988231210924	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9978203011768789	WITHOUT_CLASSIFICATION	0.0021796988231210924	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999920652057242	WITHOUT_CLASSIFICATION	7.934794275796897E-5	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997218390508	WITHOUT_CLASSIFICATION	2.7816094907321303E-7	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999860611595758	WITHOUT_CLASSIFICATION	1.3938840424283198E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999466375273149	WITHOUT_CLASSIFICATION	5.336247268500122E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999466375273149	WITHOUT_CLASSIFICATION	5.336247268500122E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999466375273149	WITHOUT_CLASSIFICATION	5.336247268500122E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.7238971331324787	DESIGN	0.2761028668675212	WITHOUT_CLASSIFICATION
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999980372590264	WITHOUT_CLASSIFICATION	1.962740973703353E-6	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999983320080107	WITHOUT_CLASSIFICATION	1.6679919892429521E-6	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9934495843170839	WITHOUT_CLASSIFICATION	0.006550415682916064	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9950334627647853	WITHOUT_CLASSIFICATION	0.004966537235214765	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999873999693728	WITHOUT_CLASSIFICATION	1.260003062719081E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999873999693728	WITHOUT_CLASSIFICATION	1.260003062719081E-5	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999997699261528	WITHOUT_CLASSIFICATION	2.300738472084226E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999929272201857	WITHOUT_CLASSIFICATION	7.072779814273932E-6	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996308607196627	WITHOUT_CLASSIFICATION	3.6913928033733553E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9995686582414267	WITHOUT_CLASSIFICATION	4.313417585732737E-4	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999861052103783	WITHOUT_CLASSIFICATION	1.3894789621686187E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999993088503931	WITHOUT_CLASSIFICATION	6.911496068182447E-7	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9282308828979199	WITHOUT_CLASSIFICATION	0.0717691171020802	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999668773948178	WITHOUT_CLASSIFICATION	3.3122605182100626E-5	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999306860747	WITHOUT_CLASSIFICATION	6.931392526716973E-8	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999999463444245	WITHOUT_CLASSIFICATION	5.36555755130202E-7	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999918536698347	WITHOUT_CLASSIFICATION	8.14633016534398E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9998945932539348	WITHOUT_CLASSIFICATION	1.054067460651909E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9998945932539348	WITHOUT_CLASSIFICATION	1.054067460651909E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999073294450761	WITHOUT_CLASSIFICATION	9.267055492397685E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999073294450761	WITHOUT_CLASSIFICATION	9.267055492397685E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9998757402775862	WITHOUT_CLASSIFICATION	1.2425972241384217E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999372732957122	WITHOUT_CLASSIFICATION	6.272670428778108E-5	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999372732957122	WITHOUT_CLASSIFICATION	6.272670428778108E-5	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999685454479469	WITHOUT_CLASSIFICATION	3.145455205305532E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999719735861212	WITHOUT_CLASSIFICATION	2.802641387878649E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999643638862494	WITHOUT_CLASSIFICATION	3.563611375066722E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999913716202341	WITHOUT_CLASSIFICATION	8.628379765811964E-6	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9995256401762264	WITHOUT_CLASSIFICATION	4.743598237737103E-4	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999719735861212	WITHOUT_CLASSIFICATION	2.802641387878649E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9998831347113004	WITHOUT_CLASSIFICATION	1.1686528869959881E-4	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999880325967517	WITHOUT_CLASSIFICATION	1.1967403248296934E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999821499264065	WITHOUT_CLASSIFICATION	1.785007359348167E-5	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999878817775474	WITHOUT_CLASSIFICATION	1.2118222452628573E-5	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9998284092573277	WITHOUT_CLASSIFICATION	1.7159074267238743E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999923338964228	WITHOUT_CLASSIFICATION	7.666103577149093E-6	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999978191554937	WITHOUT_CLASSIFICATION	2.180844506342342E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9868494550646327	WITHOUT_CLASSIFICATION	0.013150544935367197	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999933396994571	WITHOUT_CLASSIFICATION	6.660300542803857E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.580952372441317	WITHOUT_CLASSIFICATION	0.4190476275586829	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999406455301	WITHOUT_CLASSIFICATION	5.935446983122926E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.999963839401136	WITHOUT_CLASSIFICATION	3.616059886396312E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.99999222328687	WITHOUT_CLASSIFICATION	7.776713129990503E-6	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999993633570962	WITHOUT_CLASSIFICATION	6.36642903863138E-7	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.999999917203043	WITHOUT_CLASSIFICATION	8.279695693864222E-8	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9853687083017997	WITHOUT_CLASSIFICATION	0.014631291698200356	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999906378761432	WITHOUT_CLASSIFICATION	9.362123856774581E-6	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999937199999218	WITHOUT_CLASSIFICATION	6.280000078212266E-6	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999937199999218	WITHOUT_CLASSIFICATION	6.280000078212266E-6	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999998230515762	WITHOUT_CLASSIFICATION	1.7694842379635443E-6	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9995800839422277	WITHOUT_CLASSIFICATION	4.1991605777221984E-4	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999986664893866	WITHOUT_CLASSIFICATION	1.3335106133239101E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999459370702369	WITHOUT_CLASSIFICATION	5.4062929762963456E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998059199235039	WITHOUT_CLASSIFICATION	1.94080076496139E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999911433508635	WITHOUT_CLASSIFICATION	8.856649136569021E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999989546792275	WITHOUT_CLASSIFICATION	1.0453207725652617E-6	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999954503166826	WITHOUT_CLASSIFICATION	4.549683317395641E-6	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999958275178807	WITHOUT_CLASSIFICATION	4.172482119230676E-6	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999999316706637	WITHOUT_CLASSIFICATION	6.832933629069576E-7	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999014833067517	WITHOUT_CLASSIFICATION	9.851669324824835E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998999050425337	WITHOUT_CLASSIFICATION	1.0009495746629602E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999679666228625	WITHOUT_CLASSIFICATION	3.203337713759268E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999942803971734	WITHOUT_CLASSIFICATION	5.7196028265846324E-6	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999095644383647	WITHOUT_CLASSIFICATION	9.043556163535228E-5	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9961161486021616	WITHOUT_CLASSIFICATION	0.003883851397838508	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999968262729574	WITHOUT_CLASSIFICATION	3.173727042655537E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999968262729574	WITHOUT_CLASSIFICATION	3.173727042655537E-6	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999033835395811	WITHOUT_CLASSIFICATION	9.661646041900536E-5	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9998060235444768	WITHOUT_CLASSIFICATION	1.9397645552325621E-4	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.8133831344121945	WITHOUT_CLASSIFICATION	0.18661686558780544	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.640011645737295	WITHOUT_CLASSIFICATION	0.35998835426270503	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.8696509482798889	WITHOUT_CLASSIFICATION	0.13034905172011116	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997041326350091	WITHOUT_CLASSIFICATION	2.9586736499079465E-4	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9953874832751878	WITHOUT_CLASSIFICATION	0.004612516724812306	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999108305510754	WITHOUT_CLASSIFICATION	8.916944892457691E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999842341056258	WITHOUT_CLASSIFICATION	1.5765894374264247E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9974798742335029	WITHOUT_CLASSIFICATION	0.002520125766496983	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999965050039429	WITHOUT_CLASSIFICATION	3.494996057215039E-6	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999108305510754	WITHOUT_CLASSIFICATION	8.916944892457691E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9994692256361546	WITHOUT_CLASSIFICATION	5.307743638454762E-4	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999977348454165	WITHOUT_CLASSIFICATION	2.2651545834288613E-6	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9947046044236564	WITHOUT_CLASSIFICATION	0.005295395576343688	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999849307648174	WITHOUT_CLASSIFICATION	1.5069235182717428E-5	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999999921472073	WITHOUT_CLASSIFICATION	7.852792858502254E-9	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9987989712988801	WITHOUT_CLASSIFICATION	0.0012010287011198267	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999914805396106	WITHOUT_CLASSIFICATION	8.519460389332175E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999975043121361	WITHOUT_CLASSIFICATION	2.4956878638877822E-6	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999959546873609	WITHOUT_CLASSIFICATION	4.045312639090997E-6	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999993304277282	WITHOUT_CLASSIFICATION	6.695722718037706E-7	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999834273716441	WITHOUT_CLASSIFICATION	1.6572628355786545E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.997081834959445	WITHOUT_CLASSIFICATION	0.002918165040555003	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999229580626651	WITHOUT_CLASSIFICATION	7.704193733488073E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999688429830053	WITHOUT_CLASSIFICATION	3.115701699471808E-5	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.999997904842599	WITHOUT_CLASSIFICATION	2.0951574010787667E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999987173838293	WITHOUT_CLASSIFICATION	1.2826161707787098E-6	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999985649760836	WITHOUT_CLASSIFICATION	1.4350239163324714E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9731104912180372	WITHOUT_CLASSIFICATION	0.026889508781962928	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9821822567417969	WITHOUT_CLASSIFICATION	0.017817743258203057	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999926311001773	WITHOUT_CLASSIFICATION	7.368899822713012E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9840730601710928	WITHOUT_CLASSIFICATION	0.01592693982890726	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9997195779108929	WITHOUT_CLASSIFICATION	2.8042208910701686E-4	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9987669897609129	WITHOUT_CLASSIFICATION	0.0012330102390870888	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999879372811656	WITHOUT_CLASSIFICATION	1.2062718834450501E-5	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999968486575762	WITHOUT_CLASSIFICATION	3.151342423731416E-6	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9998051942359102	WITHOUT_CLASSIFICATION	1.9480576408978766E-4	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999870352914928	WITHOUT_CLASSIFICATION	1.2964708507314771E-5	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999996803458508	WITHOUT_CLASSIFICATION	3.196541492225779E-7	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999986934440803	WITHOUT_CLASSIFICATION	1.3065559196512506E-6	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9996312884846031	WITHOUT_CLASSIFICATION	3.6871151539691875E-4	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999984404145625	WITHOUT_CLASSIFICATION	1.5595854375099666E-6	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9214206013194634	WITHOUT_CLASSIFICATION	0.07857939868053664	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999097632813017	WITHOUT_CLASSIFICATION	9.023671869832447E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999898772878966	WITHOUT_CLASSIFICATION	1.0122712103410053E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995717892253	WITHOUT_CLASSIFICATION	4.2821077481890806E-7	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999971323754492	WITHOUT_CLASSIFICATION	2.8676245508451354E-6	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999697236138844	WITHOUT_CLASSIFICATION	3.027638611560667E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999836048448895	WITHOUT_CLASSIFICATION	1.639515511055543E-5	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.999999908676565	WITHOUT_CLASSIFICATION	9.13234350383068E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999835307234903	WITHOUT_CLASSIFICATION	1.6469276509642424E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999980467390607	WITHOUT_CLASSIFICATION	1.9532609392992027E-5	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999227531481674	WITHOUT_CLASSIFICATION	7.724685183269174E-5	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999990980777823	WITHOUT_CLASSIFICATION	9.01922217678258E-7	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999782726707	WITHOUT_CLASSIFICATION	2.1727329152552555E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999819452953278	WITHOUT_CLASSIFICATION	1.805470467217133E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999915122027704	WITHOUT_CLASSIFICATION	8.487797229554679E-6	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997944319376284	WITHOUT_CLASSIFICATION	2.0556806237157776E-4	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999992100472129	WITHOUT_CLASSIFICATION	7.899527871323313E-7	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9976361810636784	WITHOUT_CLASSIFICATION	0.00236381893632157	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999978355955026	WITHOUT_CLASSIFICATION	2.1644044974462327E-6	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990650937051	WITHOUT_CLASSIFICATION	9.34906294974902E-7	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999987492540442	WITHOUT_CLASSIFICATION	1.2507459557475662E-6	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999996794674325	WITHOUT_CLASSIFICATION	3.205325675724489E-7	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999978619034469	WITHOUT_CLASSIFICATION	2.1380965530405983E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999987970118516	WITHOUT_CLASSIFICATION	1.20298814852045E-6	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999628309678156	WITHOUT_CLASSIFICATION	3.7169032184367424E-5	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999225533809551	WITHOUT_CLASSIFICATION	7.744661904489307E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999494468377873	WITHOUT_CLASSIFICATION	5.0553162212677144E-5	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999870265549271	WITHOUT_CLASSIFICATION	1.2973445072910583E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999938988410413	WITHOUT_CLASSIFICATION	6.101158958788643E-6	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999991806279317	WITHOUT_CLASSIFICATION	8.193720683968031E-7	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999932403646408	WITHOUT_CLASSIFICATION	6.759635359206584E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9993961920026408	WITHOUT_CLASSIFICATION	6.038079973590722E-4	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9999023722271867	DESIGN	9.762777281325875E-5	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9994727805023245	WITHOUT_CLASSIFICATION	5.272194976756037E-4	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999129351461224	WITHOUT_CLASSIFICATION	8.706485387759922E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990650937051	WITHOUT_CLASSIFICATION	9.34906294974902E-7	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998269648542124	WITHOUT_CLASSIFICATION	1.7303514578757853E-4	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999868941766185	WITHOUT_CLASSIFICATION	1.3105823381484168E-5	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996294082730968	WITHOUT_CLASSIFICATION	3.70591726903348E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9998728770912471	WITHOUT_CLASSIFICATION	1.2712290875299993E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9983419531750782	WITHOUT_CLASSIFICATION	0.0016580468249218514	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.978179996994249	WITHOUT_CLASSIFICATION	0.02182000300575095	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999842341056258	WITHOUT_CLASSIFICATION	1.5765894374264247E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8679550911035536	WITHOUT_CLASSIFICATION	0.13204490889644643	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995717892253	WITHOUT_CLASSIFICATION	4.2821077481890806E-7	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998733535375585	WITHOUT_CLASSIFICATION	1.266464624415804E-4	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999983024690255	WITHOUT_CLASSIFICATION	1.69753097449574E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999478814557764	WITHOUT_CLASSIFICATION	5.21185442237118E-5	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999621797519874	WITHOUT_CLASSIFICATION	3.782024801260339E-5	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999765513745003	WITHOUT_CLASSIFICATION	2.3448625499670258E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.8620477884130444	DESIGN	0.1379522115869556	WITHOUT_CLASSIFICATION
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999984943439147	WITHOUT_CLASSIFICATION	1.5056560853360757E-6	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9909965433602631	WITHOUT_CLASSIFICATION	0.009003456639736816	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9485395546665918	WITHOUT_CLASSIFICATION	0.0514604453334082	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999674623035	WITHOUT_CLASSIFICATION	3.253769663066687E-8	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999951233476821	WITHOUT_CLASSIFICATION	4.876652317841805E-6	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999910913420238	WITHOUT_CLASSIFICATION	8.908657976122426E-6	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999910779120331	WITHOUT_CLASSIFICATION	8.922087966850343E-6	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999910779120331	WITHOUT_CLASSIFICATION	8.922087966850343E-6	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999478543859484	WITHOUT_CLASSIFICATION	5.214561405176732E-5	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999423873771165	WITHOUT_CLASSIFICATION	5.761262288356767E-5	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.999999941204729	WITHOUT_CLASSIFICATION	5.879527092511434E-8	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.997720706578495	WITHOUT_CLASSIFICATION	0.0022792934215049654	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999988087133945	WITHOUT_CLASSIFICATION	1.1912866054946316E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999315134883341	WITHOUT_CLASSIFICATION	6.848651166593486E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999636068917405	WITHOUT_CLASSIFICATION	3.639310825957447E-5	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9918394105368314	WITHOUT_CLASSIFICATION	0.008160589463168532	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999775367182933	WITHOUT_CLASSIFICATION	2.2463281706703732E-5	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999817130890644	WITHOUT_CLASSIFICATION	1.828691093560911E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.999547648609484	WITHOUT_CLASSIFICATION	4.523513905159698E-4	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9998816493465826	WITHOUT_CLASSIFICATION	1.1835065341734207E-4	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999411748519134	WITHOUT_CLASSIFICATION	5.882514808669947E-5	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998994214809	WITHOUT_CLASSIFICATION	1.005785190391176E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999996906982328	WITHOUT_CLASSIFICATION	3.0930176716174666E-7	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994791303582831	WITHOUT_CLASSIFICATION	5.20869641717055E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.999960604471722	WITHOUT_CLASSIFICATION	3.9395528278090406E-5	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999997405392932	WITHOUT_CLASSIFICATION	2.5946070679632097E-7	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999996043200025	WITHOUT_CLASSIFICATION	3.956799974664521E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999730547484972	WITHOUT_CLASSIFICATION	2.69452515027698E-5	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9990023184831957	WITHOUT_CLASSIFICATION	9.976815168043617E-4	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999985584066376	WITHOUT_CLASSIFICATION	1.4415933623446731E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999566940930523	WITHOUT_CLASSIFICATION	4.3305906947704105E-5	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9998891119855408	WITHOUT_CLASSIFICATION	1.1088801445925561E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999915836691857	WITHOUT_CLASSIFICATION	8.416330814231501E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849536930858	WITHOUT_CLASSIFICATION	1.5046306914106717E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999940987599758	WITHOUT_CLASSIFICATION	5.9012400241691456E-6	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9996836175788661	WITHOUT_CLASSIFICATION	3.163824211338275E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999955499679571	WITHOUT_CLASSIFICATION	4.45003204290597E-5	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9987102498649825	WITHOUT_CLASSIFICATION	0.0012897501350175552	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9996756257790849	WITHOUT_CLASSIFICATION	3.2437422091514327E-4	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9953526179174804	WITHOUT_CLASSIFICATION	0.004647382082519653	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999934952028213	WITHOUT_CLASSIFICATION	6.504797178679586E-6	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999897638866857	WITHOUT_CLASSIFICATION	1.0236113314184597E-5	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9995905124122594	WITHOUT_CLASSIFICATION	4.0948758774065995E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996727647093607	WITHOUT_CLASSIFICATION	3.272352906393126E-4	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9997445925105445	WITHOUT_CLASSIFICATION	2.554074894555091E-4	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999848398721896	WITHOUT_CLASSIFICATION	1.5160127810384579E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999974901469826	WITHOUT_CLASSIFICATION	2.5098530174210224E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999870783081154	WITHOUT_CLASSIFICATION	1.2921691884595563E-4	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999965509353728	WITHOUT_CLASSIFICATION	3.4490646272024764E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999997270806465	WITHOUT_CLASSIFICATION	2.7291935337402547E-7	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995031512787448	WITHOUT_CLASSIFICATION	4.968487212552361E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999250089124598	WITHOUT_CLASSIFICATION	7.499108754023874E-5	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999063735624667	WITHOUT_CLASSIFICATION	9.362643753333872E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946730010687	WITHOUT_CLASSIFICATION	5.326998931244534E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9512558923521792	DESIGN	0.0487441076478208	WITHOUT_CLASSIFICATION
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999864445254173	WITHOUT_CLASSIFICATION	1.3555474582650122E-5	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998938567453	WITHOUT_CLASSIFICATION	1.0614325483873644E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999976932496	WITHOUT_CLASSIFICATION	2.3067503996459918E-8	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999837349682528	WITHOUT_CLASSIFICATION	1.6265031747266092E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999964822674308	WITHOUT_CLASSIFICATION	3.5177325691552388E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999966395683508	WITHOUT_CLASSIFICATION	3.3604316491545526E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999844108791198	WITHOUT_CLASSIFICATION	1.5589120880162768E-5	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999591834787596	WITHOUT_CLASSIFICATION	4.081652124039128E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9999750313247382	WITHOUT_CLASSIFICATION	2.4968675261778028E-5	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999014094938329	WITHOUT_CLASSIFICATION	9.859050616713143E-5	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999992090782264	WITHOUT_CLASSIFICATION	7.909217736761731E-7	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999968872232728	WITHOUT_CLASSIFICATION	3.1127767270961226E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999720485337359	WITHOUT_CLASSIFICATION	2.7951466264064607E-5	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9956326003915715	WITHOUT_CLASSIFICATION	0.0043673996084284605	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9996170702904467	WITHOUT_CLASSIFICATION	3.829297095532993E-4	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9999027603644602	WITHOUT_CLASSIFICATION	9.723963553976395E-5	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999348833224708	WITHOUT_CLASSIFICATION	6.511667752913851E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999996840847204	WITHOUT_CLASSIFICATION	3.1591527961796195E-7	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999764353924497	WITHOUT_CLASSIFICATION	2.356460755015735E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996252470327	WITHOUT_CLASSIFICATION	3.7475296733849205E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.99998437668735	WITHOUT_CLASSIFICATION	1.5623312650033917E-5	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998472766574347	WITHOUT_CLASSIFICATION	1.5272334256533963E-4	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999995232056303	WITHOUT_CLASSIFICATION	4.767943697781442E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9998472766574347	WITHOUT_CLASSIFICATION	1.5272334256533963E-4	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9985205878910058	WITHOUT_CLASSIFICATION	0.0014794121089941868	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999940763764401	WITHOUT_CLASSIFICATION	5.923623559982869E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999932536655513	WITHOUT_CLASSIFICATION	6.746334448725975E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999996466789566	WITHOUT_CLASSIFICATION	3.533210434140244E-7	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999509661110015	WITHOUT_CLASSIFICATION	4.903388899856022E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999963504577343	WITHOUT_CLASSIFICATION	3.6495422657646296E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999442242713108	WITHOUT_CLASSIFICATION	5.5775728689201394E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999738411593048	WITHOUT_CLASSIFICATION	2.615884069527039E-5	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999357778662793	WITHOUT_CLASSIFICATION	6.422213372072237E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999935025675973	WITHOUT_CLASSIFICATION	6.497432402724321E-6	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999994568446579	WITHOUT_CLASSIFICATION	5.431553421795131E-7	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999650083331486	WITHOUT_CLASSIFICATION	3.4991666851391365E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999983548463345	WITHOUT_CLASSIFICATION	1.6451536654981645E-6	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999643845443456	WITHOUT_CLASSIFICATION	3.5615455654519484E-5	DESIGN
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.999999477177582	WITHOUT_CLASSIFICATION	5.228224180868634E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999997631447901	WITHOUT_CLASSIFICATION	2.368552100205395E-7	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999922861986562	WITHOUT_CLASSIFICATION	7.71380134378233E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999924955905	WITHOUT_CLASSIFICATION	7.504409619554401E-9	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998739452719199	WITHOUT_CLASSIFICATION	1.260547280801494E-4	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9998225431634451	WITHOUT_CLASSIFICATION	1.7745683655486262E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999985242473157	WITHOUT_CLASSIFICATION	1.475752684186534E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999440245587913	WITHOUT_CLASSIFICATION	5.597544120869188E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9613979168248554	WITHOUT_CLASSIFICATION	0.03860208317514459	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9987206310760975	WITHOUT_CLASSIFICATION	0.0012793689239024677	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999923220382494	WITHOUT_CLASSIFICATION	7.67796175058594E-6	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9924864698866703	WITHOUT_CLASSIFICATION	0.0075135301133296825	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999840247489723	WITHOUT_CLASSIFICATION	1.5975251027713897E-5	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999911945214873	WITHOUT_CLASSIFICATION	8.805478512567233E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999986830747497	WITHOUT_CLASSIFICATION	1.3169252503003755E-5	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.999806458571079	WITHOUT_CLASSIFICATION	1.9354142892099175E-4	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999984491339083	WITHOUT_CLASSIFICATION	1.5508660916270798E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.998436199114564	WITHOUT_CLASSIFICATION	0.0015638008854358815	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999999911213002	WITHOUT_CLASSIFICATION	8.878699799714576E-9	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999911656485928	WITHOUT_CLASSIFICATION	8.834351407244179E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999377372267327	WITHOUT_CLASSIFICATION	6.226277326721614E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999947149934881	WITHOUT_CLASSIFICATION	5.285006511818406E-6	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9974597469043261	WITHOUT_CLASSIFICATION	0.002540253095673854	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999988508100556	WITHOUT_CLASSIFICATION	1.1491899444109349E-5	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9999818356353757	WITHOUT_CLASSIFICATION	1.816436462427721E-5	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999983901225493	WITHOUT_CLASSIFICATION	1.6098774506471598E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999994068835322	WITHOUT_CLASSIFICATION	5.931164677461022E-7	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999614028709646	WITHOUT_CLASSIFICATION	3.859712903533656E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997863859845229	WITHOUT_CLASSIFICATION	2.1361401547709174E-4	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9924864698866703	WITHOUT_CLASSIFICATION	0.0075135301133296825	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999732374040086	WITHOUT_CLASSIFICATION	2.6762595991433132E-5	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999996002068683	WITHOUT_CLASSIFICATION	3.997931317112519E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9997912219826143	WITHOUT_CLASSIFICATION	2.0877801738580638E-4	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9996806318353058	WITHOUT_CLASSIFICATION	3.1936816469423204E-4	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999693747626333	WITHOUT_CLASSIFICATION	3.0625237366797136E-5	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999996900148711	WITHOUT_CLASSIFICATION	3.0998512896809253E-7	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9997153024057001	WITHOUT_CLASSIFICATION	2.8469759429993363E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.969324991429409	WITHOUT_CLASSIFICATION	0.030675008570591005	DESIGN
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999944165643938	WITHOUT_CLASSIFICATION	5.58343560617889E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9999987843801508	WITHOUT_CLASSIFICATION	1.2156198492889051E-6	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999504902749454	WITHOUT_CLASSIFICATION	4.950972505449475E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999917094935092	WITHOUT_CLASSIFICATION	8.290506490667504E-6	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9998747936518253	WITHOUT_CLASSIFICATION	1.2520634817470052E-4	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999433577330907	WITHOUT_CLASSIFICATION	5.664226690919714E-5	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999312555121931	WITHOUT_CLASSIFICATION	6.874448780692836E-5	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999997050404112	WITHOUT_CLASSIFICATION	2.949595888319987E-7	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999763508364466	WITHOUT_CLASSIFICATION	2.364916355335439E-5	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999276565303973	WITHOUT_CLASSIFICATION	7.234346960275711E-5	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999985126171443	WITHOUT_CLASSIFICATION	1.4873828556490516E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999732374040086	WITHOUT_CLASSIFICATION	2.6762595991433132E-5	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999925690471118	WITHOUT_CLASSIFICATION	7.4309528883080674E-6	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999997352242327	WITHOUT_CLASSIFICATION	2.647757674107464E-7	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9997033470813879	WITHOUT_CLASSIFICATION	2.9665291861217196E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9987435932294223	WITHOUT_CLASSIFICATION	0.0012564067705777137	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9906819515096578	WITHOUT_CLASSIFICATION	0.00931804849034233	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998859859430939	WITHOUT_CLASSIFICATION	1.1401405690610801E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998859859430939	WITHOUT_CLASSIFICATION	1.1401405690610801E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9927052821652644	WITHOUT_CLASSIFICATION	0.007294717834735633	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998859859430939	WITHOUT_CLASSIFICATION	1.1401405690610801E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9998859859430939	WITHOUT_CLASSIFICATION	1.1401405690610801E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9994610461870834	WITHOUT_CLASSIFICATION	5.389538129166421E-4	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999357298414533	WITHOUT_CLASSIFICATION	6.427015854668894E-5	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999996747404024	WITHOUT_CLASSIFICATION	3.252595975959425E-6	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999952443472105	WITHOUT_CLASSIFICATION	4.755652789539716E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.5096373919050244	DESIGN	0.49036260809497556	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9998226713519573	WITHOUT_CLASSIFICATION	1.773286480425531E-4	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999945869152316	WITHOUT_CLASSIFICATION	5.41308476839176E-6	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999713095774443	WITHOUT_CLASSIFICATION	2.869042255570457E-4	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999926799127675	WITHOUT_CLASSIFICATION	7.3200872324086585E-6	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.999934755818458	WITHOUT_CLASSIFICATION	6.524418154198007E-5	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9999098195502238	WITHOUT_CLASSIFICATION	9.018044977610398E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9991368651568032	WITHOUT_CLASSIFICATION	8.631348431969137E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9997359111565528	WITHOUT_CLASSIFICATION	2.6408884344719896E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999820223014321	WITHOUT_CLASSIFICATION	1.7977698567925064E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9998181318090967	WITHOUT_CLASSIFICATION	1.8186819090322784E-4	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999060426869149	WITHOUT_CLASSIFICATION	9.395731308507084E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998092903944	WITHOUT_CLASSIFICATION	1.907096054753786E-7	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999191712889	WITHOUT_CLASSIFICATION	8.082871111932853E-8	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9978103509128856	WITHOUT_CLASSIFICATION	0.002189649087114426	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999758402566788	WITHOUT_CLASSIFICATION	2.4159743321142228E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999986230107181	WITHOUT_CLASSIFICATION	1.3769892819009266E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999977101873045	WITHOUT_CLASSIFICATION	2.2898126954427726E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999998092903944	WITHOUT_CLASSIFICATION	1.907096054753786E-7	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9999840247489723	WITHOUT_CLASSIFICATION	1.5975251027713897E-5	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999994415696796	WITHOUT_CLASSIFICATION	5.584303205382123E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999385054242863	WITHOUT_CLASSIFICATION	6.149457571377279E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999200071917347	WITHOUT_CLASSIFICATION	7.999280826535093E-5	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999954902866455	WITHOUT_CLASSIFICATION	4.509713354529414E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999999879693378	WITHOUT_CLASSIFICATION	1.2030662186848008E-7	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9998114897850631	WITHOUT_CLASSIFICATION	1.8851021493690058E-4	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999996089742264	WITHOUT_CLASSIFICATION	3.910257736372586E-7	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999973177329737	WITHOUT_CLASSIFICATION	2.68226702632446E-6	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999965420662066	WITHOUT_CLASSIFICATION	3.457933793325758E-6	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999602279330864	WITHOUT_CLASSIFICATION	3.9772066913549684E-5	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9996714838506826	WITHOUT_CLASSIFICATION	3.285161493174013E-4	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999992065500257	WITHOUT_CLASSIFICATION	7.934499742657659E-7	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999963432514122	WITHOUT_CLASSIFICATION	3.6567485877483577E-6	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.999893692004468	WITHOUT_CLASSIFICATION	1.0630799553193171E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999996041364847	WITHOUT_CLASSIFICATION	3.9586351534599E-7	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999613894644753	WITHOUT_CLASSIFICATION	3.8610535524671874E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999998964995719	WITHOUT_CLASSIFICATION	1.0350042817012577E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999999131138753	WITHOUT_CLASSIFICATION	8.688612470080667E-7	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999998221006303	WITHOUT_CLASSIFICATION	1.778993696881974E-7	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9992039423791947	WITHOUT_CLASSIFICATION	7.960576208052774E-4	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999704583779593	WITHOUT_CLASSIFICATION	2.9541622040705753E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999885838868	WITHOUT_CLASSIFICATION	1.1416113066868276E-8	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999973177329737	WITHOUT_CLASSIFICATION	2.68226702632446E-6	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999762622531804	WITHOUT_CLASSIFICATION	2.373774681960321E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.999992366316396	WITHOUT_CLASSIFICATION	7.633683604058539E-6	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998620172557467	WITHOUT_CLASSIFICATION	1.3798274425332003E-4	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9846442958836423	WITHOUT_CLASSIFICATION	0.015355704116357737	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996168262059	WITHOUT_CLASSIFICATION	3.831737941233071E-7	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999956599255807	WITHOUT_CLASSIFICATION	4.340074419302787E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999408607226656	WITHOUT_CLASSIFICATION	5.913927733430919E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999988554822831	WITHOUT_CLASSIFICATION	1.144517716835212E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9998804785112814	WITHOUT_CLASSIFICATION	1.1952148871860566E-4	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9998763871945768	WITHOUT_CLASSIFICATION	1.236128054232496E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999968497708807	WITHOUT_CLASSIFICATION	3.150229119321493E-6	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999911640396	WITHOUT_CLASSIFICATION	8.835960508544512E-9	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9999042526968885	WITHOUT_CLASSIFICATION	9.574730311155771E-5	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999461589578	WITHOUT_CLASSIFICATION	5.3841042160958275E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964043675094	WITHOUT_CLASSIFICATION	3.5956324906812142E-6	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9901394317902293	WITHOUT_CLASSIFICATION	0.00986056820977064	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999902934947211	WITHOUT_CLASSIFICATION	9.706505278894686E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999968497708807	WITHOUT_CLASSIFICATION	3.150229119321493E-6	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999182056470687	WITHOUT_CLASSIFICATION	8.179435293133945E-5	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.7015611057828112	WITHOUT_CLASSIFICATION	0.29843889421718883	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999868730555491	WITHOUT_CLASSIFICATION	1.3126944450893688E-5	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999929377685555	WITHOUT_CLASSIFICATION	7.062231444532691E-6	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999809116820779	WITHOUT_CLASSIFICATION	1.9088317922096355E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9443787262113817	WITHOUT_CLASSIFICATION	0.055621273788618274	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964043675094	WITHOUT_CLASSIFICATION	3.5956324906812142E-6	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998888303732	WITHOUT_CLASSIFICATION	1.1116962685659322E-7	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998627764456	WITHOUT_CLASSIFICATION	1.372235543270045E-7	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999605115385	WITHOUT_CLASSIFICATION	3.948846157130163E-8	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998865761561	WITHOUT_CLASSIFICATION	1.1342384390513813E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998311370402	WITHOUT_CLASSIFICATION	1.6886295971872925E-7	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997601151097	WITHOUT_CLASSIFICATION	2.39884890242916E-7	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995439454534	WITHOUT_CLASSIFICATION	4.560545465813959E-7	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999995439454534	WITHOUT_CLASSIFICATION	4.560545465813959E-7	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9999961691956981	WITHOUT_CLASSIFICATION	3.830804301940603E-6	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999610602070823	WITHOUT_CLASSIFICATION	3.8939792917592887E-5	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999929452862667	WITHOUT_CLASSIFICATION	7.054713733413264E-6	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999905960900313	WITHOUT_CLASSIFICATION	9.403909968691369E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9976810668224741	WITHOUT_CLASSIFICATION	0.0023189331775259094	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937518549564	WITHOUT_CLASSIFICATION	6.248145043619247E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955235496524	WITHOUT_CLASSIFICATION	4.4764503475390025E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966146063788	WITHOUT_CLASSIFICATION	3.3853936212218844E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999185101871176	WITHOUT_CLASSIFICATION	8.148981288240122E-5	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960484339141	WITHOUT_CLASSIFICATION	3.951566085881519E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937518549564	WITHOUT_CLASSIFICATION	6.248145043619247E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955235496524	WITHOUT_CLASSIFICATION	4.4764503475390025E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966146063788	WITHOUT_CLASSIFICATION	3.3853936212218844E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999981001613923	WITHOUT_CLASSIFICATION	1.8998386077058291E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9999251384732554	WITHOUT_CLASSIFICATION	7.486152674466586E-5	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9992811714830383	WITHOUT_CLASSIFICATION	7.188285169617212E-4	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999957821111489	WITHOUT_CLASSIFICATION	4.217888851135811E-6	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999568207019	WITHOUT_CLASSIFICATION	4.317929810125453E-8	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999618271447323	WITHOUT_CLASSIFICATION	3.817285526764735E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999798624964074	WITHOUT_CLASSIFICATION	2.0137503592602862E-4	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9999599133105032	WITHOUT_CLASSIFICATION	4.008668949687824E-5	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9998759302309284	WITHOUT_CLASSIFICATION	1.2406976907166582E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999433265567299	WITHOUT_CLASSIFICATION	5.6673443270113565E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999943100984	WITHOUT_CLASSIFICATION	5.689901600055022E-6	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9719790100320725	WITHOUT_CLASSIFICATION	0.028020989967927536	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999647792041835	WITHOUT_CLASSIFICATION	3.522079581643453E-5	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999906208869459	WITHOUT_CLASSIFICATION	9.37911305406263E-6	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999884076732195	WITHOUT_CLASSIFICATION	1.1592326780459266E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999698528808425	WITHOUT_CLASSIFICATION	3.01471191575443E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999535509744358	WITHOUT_CLASSIFICATION	4.644902556420076E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996658606827309	WITHOUT_CLASSIFICATION	3.341393172690481E-4	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999314614915868	WITHOUT_CLASSIFICATION	6.853850841310849E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999787539525884	WITHOUT_CLASSIFICATION	2.1246047411644864E-5	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999813206751624	WITHOUT_CLASSIFICATION	1.8679324837604162E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9984054114487103	WITHOUT_CLASSIFICATION	0.0015945885512897763	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9984437668372627	WITHOUT_CLASSIFICATION	0.001556233162737315	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999949912927436	WITHOUT_CLASSIFICATION	5.008707256367085E-6	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999999093726846	WITHOUT_CLASSIFICATION	9.062731540909902E-8	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999661476913426	WITHOUT_CLASSIFICATION	3.3852308657321036E-5	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970854685635	WITHOUT_CLASSIFICATION	2.914531436613802E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949524575785	WITHOUT_CLASSIFICATION	5.047542421533836E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999843724082312	WITHOUT_CLASSIFICATION	1.562759176884508E-5	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881292817137	WITHOUT_CLASSIFICATION	1.1870718286340439E-5	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999488076012568	WITHOUT_CLASSIFICATION	5.119239874329062E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985289580948	WITHOUT_CLASSIFICATION	1.4710419052157736E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999985289580948	WITHOUT_CLASSIFICATION	1.4710419052157736E-6	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999963885367712	WITHOUT_CLASSIFICATION	3.6114632287348566E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999139597606317	WITHOUT_CLASSIFICATION	8.604023936837714E-5	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999974237084738	WITHOUT_CLASSIFICATION	2.576291526193035E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998999050425337	WITHOUT_CLASSIFICATION	1.0009495746629602E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999995454282667	WITHOUT_CLASSIFICATION	4.545717333137239E-7	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999974545540603	WITHOUT_CLASSIFICATION	2.545445939719701E-6	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.999959806122056	WITHOUT_CLASSIFICATION	4.01938779438774E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999964873757236	WITHOUT_CLASSIFICATION	3.5126242763836174E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999975675039674	WITHOUT_CLASSIFICATION	2.4324960326005555E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899696558494	WITHOUT_CLASSIFICATION	1.0030344150647872E-5	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999825084219169	WITHOUT_CLASSIFICATION	1.7491578083054498E-5	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984004269369	WITHOUT_CLASSIFICATION	1.5995730631092549E-6	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951580812035	WITHOUT_CLASSIFICATION	4.841918796461428E-6	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955985557544	WITHOUT_CLASSIFICATION	4.401444245630907E-6	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987849234719	WITHOUT_CLASSIFICATION	1.2150765280769172E-6	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999834424668742	WITHOUT_CLASSIFICATION	1.6557533125850792E-5	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965846229697	WITHOUT_CLASSIFICATION	3.415377030240703E-6	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952504928099	WITHOUT_CLASSIFICATION	4.749507190075153E-6	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997862960532	WITHOUT_CLASSIFICATION	2.1370394679303803E-6	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999932981448569	WITHOUT_CLASSIFICATION	6.701855143086287E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999971911408947	WITHOUT_CLASSIFICATION	2.808859105281023E-6	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9942089026050704	WITHOUT_CLASSIFICATION	0.005791097394929638	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5943425993366722	WITHOUT_CLASSIFICATION	0.4056574006633278	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999981774652284	WITHOUT_CLASSIFICATION	1.8225347715981028E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999984829588946	WITHOUT_CLASSIFICATION	1.5170411054076414E-5	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.999624484001076	WITHOUT_CLASSIFICATION	3.7551599892406433E-4	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999989597289095	WITHOUT_CLASSIFICATION	1.0402710905044962E-6	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999616729697043	WITHOUT_CLASSIFICATION	3.8327030295736264E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5943425993366722	WITHOUT_CLASSIFICATION	0.4056574006633278	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5943425993366722	WITHOUT_CLASSIFICATION	0.4056574006633278	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9979616472970362	WITHOUT_CLASSIFICATION	0.002038352702963861	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999979282771913	WITHOUT_CLASSIFICATION	2.0717228086968258E-6	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9985587039017257	WITHOUT_CLASSIFICATION	0.0014412960982743046	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999835378081169	WITHOUT_CLASSIFICATION	1.64621918830635E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.99999222328687	WITHOUT_CLASSIFICATION	7.776713129990503E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999787539525884	WITHOUT_CLASSIFICATION	2.1246047411644864E-5	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999830387183399	WITHOUT_CLASSIFICATION	1.696128166009411E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9998529688529376	WITHOUT_CLASSIFICATION	1.4703114706232084E-4	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999327069432183	WITHOUT_CLASSIFICATION	6.729305678168422E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999712134114703	WITHOUT_CLASSIFICATION	2.8786588529729652E-5	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999999327926261	WITHOUT_CLASSIFICATION	6.720737388410422E-8	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999641196902379	WITHOUT_CLASSIFICATION	3.588030976208567E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.998546228696289	WITHOUT_CLASSIFICATION	0.00145377130371096	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.998546228696289	WITHOUT_CLASSIFICATION	0.00145377130371096	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996573526394382	WITHOUT_CLASSIFICATION	3.4264736056184683E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996573526394382	WITHOUT_CLASSIFICATION	3.4264736056184683E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999828464091749	WITHOUT_CLASSIFICATION	1.7153590825104393E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957831418381	WITHOUT_CLASSIFICATION	4.216858161866771E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999875217402268	WITHOUT_CLASSIFICATION	1.2478259773112758E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689191022644	WITHOUT_CLASSIFICATION	3.108089773568287E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999669091376521	WITHOUT_CLASSIFICATION	3.309086234796512E-5	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9987217116219446	WITHOUT_CLASSIFICATION	0.001278288378055407	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969952378612	WITHOUT_CLASSIFICATION	3.0047621386935397E-6	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933541476611	WITHOUT_CLASSIFICATION	6.645852338847629E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9999511484382019	WITHOUT_CLASSIFICATION	4.8851561798060604E-5	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9995337007526497	WITHOUT_CLASSIFICATION	4.662992473503965E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999982284335719	WITHOUT_CLASSIFICATION	1.7715664281691212E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999924203369438	WITHOUT_CLASSIFICATION	7.579663056237526E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999939608893094	WITHOUT_CLASSIFICATION	6.039110690547966E-6	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999975111226245	WITHOUT_CLASSIFICATION	2.488877375622313E-6	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9998710003078286	WITHOUT_CLASSIFICATION	1.2899969217134094E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999399958318589	WITHOUT_CLASSIFICATION	6.000416814106833E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999399958318589	WITHOUT_CLASSIFICATION	6.000416814106833E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999902508432793	WITHOUT_CLASSIFICATION	9.749156720634352E-6	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999385902844984	WITHOUT_CLASSIFICATION	6.140971550163303E-5	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9990577461226836	WITHOUT_CLASSIFICATION	9.42253877316478E-4	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995965171264155	WITHOUT_CLASSIFICATION	4.034828735845117E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941288311521	WITHOUT_CLASSIFICATION	5.871168847843215E-6	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966275305043	WITHOUT_CLASSIFICATION	3.3724694957070636E-6	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999133474742	WITHOUT_CLASSIFICATION	8.665252589793239E-8	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999565206229932	WITHOUT_CLASSIFICATION	4.3479377006832465E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9995290550879546	WITHOUT_CLASSIFICATION	4.7094491204532007E-4	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9693816940327982	WITHOUT_CLASSIFICATION	0.030618305967201893	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999991675081619	WITHOUT_CLASSIFICATION	8.324918381025343E-6	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9997278323238168	WITHOUT_CLASSIFICATION	2.7216767618321513E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931337229652	WITHOUT_CLASSIFICATION	6.8662770348148086E-6	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9996205624444087	WITHOUT_CLASSIFICATION	3.7943755559132164E-4	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9990145704219038	WITHOUT_CLASSIFICATION	9.854295780961845E-4	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999698222359305	WITHOUT_CLASSIFICATION	3.0177764069562983E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997045646285	WITHOUT_CLASSIFICATION	2.95435371495188E-7	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999791369090039	WITHOUT_CLASSIFICATION	2.086309099617062E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999964027175463	WITHOUT_CLASSIFICATION	3.5972824537848455E-6	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999950887954122	WITHOUT_CLASSIFICATION	4.911204587821092E-6	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.999993048961868	WITHOUT_CLASSIFICATION	6.95103813197975E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999958511151061	WITHOUT_CLASSIFICATION	4.14888489380731E-6	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999585004639855	WITHOUT_CLASSIFICATION	4.149953601450359E-5	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999844786066	WITHOUT_CLASSIFICATION	1.552139341224973E-7	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999930613973186	WITHOUT_CLASSIFICATION	6.938602681458588E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9983620945036034	WITHOUT_CLASSIFICATION	0.0016379054963965665	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999853610288225	WITHOUT_CLASSIFICATION	1.4638971177457332E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999837378447312	WITHOUT_CLASSIFICATION	1.6262155268843773E-5	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999898556759722	WITHOUT_CLASSIFICATION	1.0144324027865484E-5	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9996958689524855	WITHOUT_CLASSIFICATION	3.0413104751446596E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999996948313448	WITHOUT_CLASSIFICATION	3.051686551702345E-7	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999703326316935	WITHOUT_CLASSIFICATION	2.9667368306413815E-5	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9864235844663688	WITHOUT_CLASSIFICATION	0.013576415533631337	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999778920373563	WITHOUT_CLASSIFICATION	2.2107962643685587E-5	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999850071350175	WITHOUT_CLASSIFICATION	1.4992864982473576E-5	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999286081695702	WITHOUT_CLASSIFICATION	7.139183042979404E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999994713667627	WITHOUT_CLASSIFICATION	5.286332372970463E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9995356248167752	WITHOUT_CLASSIFICATION	4.643751832249318E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999771026753	WITHOUT_CLASSIFICATION	2.2897324706525816E-7	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9998238074334448	WITHOUT_CLASSIFICATION	1.761925665552175E-4	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999553343307307	WITHOUT_CLASSIFICATION	4.4665669269327566E-5	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999973357010086	WITHOUT_CLASSIFICATION	2.6642989914520372E-6	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9979140523262543	WITHOUT_CLASSIFICATION	0.0020859476737456126	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999995859339439	WITHOUT_CLASSIFICATION	4.140660561758391E-7	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999994455464406	WITHOUT_CLASSIFICATION	5.544535593934811E-7	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999885043760136	WITHOUT_CLASSIFICATION	1.1495623986281574E-5	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.99991176884753	WITHOUT_CLASSIFICATION	8.823115247005529E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999119640492243	WITHOUT_CLASSIFICATION	8.803595077567039E-5	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999926169796898	WITHOUT_CLASSIFICATION	7.383020310304499E-6	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9996860480462487	WITHOUT_CLASSIFICATION	3.1395195375133434E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999836644143718	WITHOUT_CLASSIFICATION	1.633558562820534E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.999905603632164	WITHOUT_CLASSIFICATION	9.439636783612152E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999732258320437	WITHOUT_CLASSIFICATION	2.6774167956216343E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999996077093796	WITHOUT_CLASSIFICATION	3.92290620427812E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999995122899766	WITHOUT_CLASSIFICATION	4.877100233578232E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999988758527986	WITHOUT_CLASSIFICATION	1.1241472014081771E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9998542301968542	WITHOUT_CLASSIFICATION	1.4576980314588074E-4	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999992786276286	WITHOUT_CLASSIFICATION	7.213723714400616E-7	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.999991004109062	WITHOUT_CLASSIFICATION	8.99589093791137E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9995506552117935	WITHOUT_CLASSIFICATION	4.493447882065222E-4	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999936068401283	WITHOUT_CLASSIFICATION	6.393159871642347E-6	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999634811367156	WITHOUT_CLASSIFICATION	3.6518863284349956E-5	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999994815520183	WITHOUT_CLASSIFICATION	5.184479815895108E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999994142477654	WITHOUT_CLASSIFICATION	5.857522345284517E-7	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999338773884014	WITHOUT_CLASSIFICATION	6.612261159855892E-5	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.7594994766512606	DESIGN	0.24050052334873936	WITHOUT_CLASSIFICATION
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999917757524256	WITHOUT_CLASSIFICATION	8.224247574403382E-5	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9998828471918734	WITHOUT_CLASSIFICATION	1.1715280812658843E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995646542286619	WITHOUT_CLASSIFICATION	4.3534577133819266E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995646542286619	WITHOUT_CLASSIFICATION	4.3534577133819266E-4	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999979891201244	WITHOUT_CLASSIFICATION	2.0108798756219132E-6	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.999966166456657	WITHOUT_CLASSIFICATION	3.383354334299259E-5	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999888287936536	WITHOUT_CLASSIFICATION	1.1171206346540908E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999926728579123	WITHOUT_CLASSIFICATION	7.327142087735043E-6	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999970645133727	WITHOUT_CLASSIFICATION	2.935486627329455E-6	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999622729509272	WITHOUT_CLASSIFICATION	3.772704907277889E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9974404713524052	WITHOUT_CLASSIFICATION	0.0025595286475946573	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9991407169666091	WITHOUT_CLASSIFICATION	8.592830333909133E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999479907205766	WITHOUT_CLASSIFICATION	5.200927942341041E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9998929148360807	WITHOUT_CLASSIFICATION	1.0708516391936869E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999985553507843	WITHOUT_CLASSIFICATION	1.4446492157554892E-6	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999094757837876	WITHOUT_CLASSIFICATION	9.052421621242973E-5	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999886873166259	WITHOUT_CLASSIFICATION	1.1312683374173843E-5	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999316764145	WITHOUT_CLASSIFICATION	6.832358551001789E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999219509815145	WITHOUT_CLASSIFICATION	7.804901848548494E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9999873453794632	WITHOUT_CLASSIFICATION	1.2654620536872171E-5	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.999872186903039	WITHOUT_CLASSIFICATION	1.2781309696084908E-4	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999422342573596	WITHOUT_CLASSIFICATION	5.776574264039671E-4	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.932646568237588	WITHOUT_CLASSIFICATION	0.06735343176241206	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999804035262764	WITHOUT_CLASSIFICATION	1.9596473723683673E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999332919752482	WITHOUT_CLASSIFICATION	6.670802475186733E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9998864179415858	WITHOUT_CLASSIFICATION	1.1358205841419991E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9997404813823928	WITHOUT_CLASSIFICATION	2.595186176071373E-4	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9877960570159997	WITHOUT_CLASSIFICATION	0.012203942984000208	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999925273221932	WITHOUT_CLASSIFICATION	7.472677806766906E-6	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999246080917297	WITHOUT_CLASSIFICATION	7.539190827035136E-5	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999798631606464	WITHOUT_CLASSIFICATION	2.013683935366304E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997192432449767	WITHOUT_CLASSIFICATION	2.807567550232366E-4	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9994320955368347	WITHOUT_CLASSIFICATION	5.679044631653434E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999945537253955	WITHOUT_CLASSIFICATION	5.446274604473205E-6	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998907681692205	WITHOUT_CLASSIFICATION	1.0923183077945703E-4	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999950569292319	WITHOUT_CLASSIFICATION	4.94307076815751E-6	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998329711155663	WITHOUT_CLASSIFICATION	1.6702888443356867E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999970345924311	WITHOUT_CLASSIFICATION	2.965407568873765E-6	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999789748781944	WITHOUT_CLASSIFICATION	2.1025121805582482E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999789748781944	WITHOUT_CLASSIFICATION	2.1025121805582482E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999991314232892	WITHOUT_CLASSIFICATION	8.685767108040876E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9935620293043145	WITHOUT_CLASSIFICATION	0.006437970695685563	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999953962184885	WITHOUT_CLASSIFICATION	4.603781511509399E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999870897493829	WITHOUT_CLASSIFICATION	1.2910250617043577E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999979360415793	WITHOUT_CLASSIFICATION	2.0639584207881303E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999918900222754	WITHOUT_CLASSIFICATION	8.10997772460031E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998808943740671	WITHOUT_CLASSIFICATION	1.1910562593287092E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999962389669	WITHOUT_CLASSIFICATION	3.761033099955215E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999438650842128	WITHOUT_CLASSIFICATION	5.613491578719945E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999965922321221	WITHOUT_CLASSIFICATION	3.407767877871063E-6	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9988567847731272	WITHOUT_CLASSIFICATION	0.0011432152268727824	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999635028402282	WITHOUT_CLASSIFICATION	3.6497159771774654E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999855924557396	WITHOUT_CLASSIFICATION	1.4407544260400267E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999888040335397	WITHOUT_CLASSIFICATION	1.1195966460324405E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999988345172304	WITHOUT_CLASSIFICATION	1.1654827695818688E-6	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995265115148912	WITHOUT_CLASSIFICATION	4.7348848510883276E-4	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9995265115148912	WITHOUT_CLASSIFICATION	4.7348848510883276E-4	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999413889359646	WITHOUT_CLASSIFICATION	5.861106403532128E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9996488183372522	WITHOUT_CLASSIFICATION	3.5118166274777343E-4	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9927532944706623	WITHOUT_CLASSIFICATION	0.007246705529337759	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998250029834884	WITHOUT_CLASSIFICATION	1.7499701651156507E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9976918735452003	WITHOUT_CLASSIFICATION	0.0023081264547996595	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999980178505663	WITHOUT_CLASSIFICATION	1.9821494338059337E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999303005302568	WITHOUT_CLASSIFICATION	6.96994697432975E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999303005302568	WITHOUT_CLASSIFICATION	6.96994697432975E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999954993688646	WITHOUT_CLASSIFICATION	4.5006311353990925E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999989254375143	WITHOUT_CLASSIFICATION	1.074562485707207E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999533812311489	WITHOUT_CLASSIFICATION	4.6618768851040213E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999449686542891	WITHOUT_CLASSIFICATION	5.503134571092316E-5	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9999715766448594	WITHOUT_CLASSIFICATION	2.8423355140628008E-5	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996062105724559	WITHOUT_CLASSIFICATION	3.9378942754406945E-4	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998455407894964	WITHOUT_CLASSIFICATION	1.544592105036083E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999643638862494	WITHOUT_CLASSIFICATION	3.563611375066722E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999873999693728	WITHOUT_CLASSIFICATION	1.260003062719081E-5	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9991072242591301	WITHOUT_CLASSIFICATION	8.927757408699882E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9961406977443312	WITHOUT_CLASSIFICATION	0.0038593022556688734	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999984644132088	WITHOUT_CLASSIFICATION	1.5355867911835055E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.8002998546438072	WITHOUT_CLASSIFICATION	0.19970014535619296	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9998757402775862	WITHOUT_CLASSIFICATION	1.242597224138424E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999955499679571	WITHOUT_CLASSIFICATION	4.45003204290597E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999615690140291	WITHOUT_CLASSIFICATION	3.84309859710096E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999955823314314	WITHOUT_CLASSIFICATION	4.41766856863406E-6	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999797635360851	WITHOUT_CLASSIFICATION	2.0236463914822292E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.994075763805003	WITHOUT_CLASSIFICATION	0.005924236194997016	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999985336409578	WITHOUT_CLASSIFICATION	1.4663590421655148E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999976010380456	WITHOUT_CLASSIFICATION	2.3989619543113643E-6	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999685454479469	WITHOUT_CLASSIFICATION	3.145455205305532E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999267904582497	WITHOUT_CLASSIFICATION	7.320954175030657E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9996720519045438	WITHOUT_CLASSIFICATION	3.2794809545620766E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999983725343599	WITHOUT_CLASSIFICATION	1.6274656401261734E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999995900121837	WITHOUT_CLASSIFICATION	4.099878163033953E-6	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.999995209118657	WITHOUT_CLASSIFICATION	4.790881342914215E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9996715593105486	WITHOUT_CLASSIFICATION	3.2844068945143696E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999812446250452	WITHOUT_CLASSIFICATION	1.8755374954773948E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999968262729574	WITHOUT_CLASSIFICATION	3.173727042655537E-6	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999810453364202	WITHOUT_CLASSIFICATION	1.8954663579798462E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9999955091835097	WITHOUT_CLASSIFICATION	4.490816490347781E-6	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9421074183407137	WITHOUT_CLASSIFICATION	0.05789258165928639	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999990768645503	WITHOUT_CLASSIFICATION	9.23135449763505E-7	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9994622725120481	WITHOUT_CLASSIFICATION	5.377274879519071E-4	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9998762926999878	WITHOUT_CLASSIFICATION	1.2370730001226346E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9999605747661343	WITHOUT_CLASSIFICATION	3.942523386570073E-5	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.999988863176107	WITHOUT_CLASSIFICATION	1.1136823892919613E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999976356090062	WITHOUT_CLASSIFICATION	2.3643909937040983E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999821648680562	WITHOUT_CLASSIFICATION	1.783513194384624E-5	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999173807463	WITHOUT_CLASSIFICATION	8.261925361334518E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999850033921007	WITHOUT_CLASSIFICATION	1.499660789921646E-5	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.99993209239404	WITHOUT_CLASSIFICATION	6.790760596003838E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999994111355436	WITHOUT_CLASSIFICATION	5.888644564217793E-7	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.999999741905172	WITHOUT_CLASSIFICATION	2.580948279170259E-7	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999950721632781	WITHOUT_CLASSIFICATION	4.927836721810705E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999976356090062	WITHOUT_CLASSIFICATION	2.3643909937040983E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999821648680562	WITHOUT_CLASSIFICATION	1.783513194384624E-5	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999708204891868	WITHOUT_CLASSIFICATION	2.917951081311345E-5	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999140056537177	WITHOUT_CLASSIFICATION	8.59943462822554E-5	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999982614220946	WITHOUT_CLASSIFICATION	1.738577905406945E-5	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999281360419829	WITHOUT_CLASSIFICATION	7.186395801709401E-5	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999578191064544	WITHOUT_CLASSIFICATION	4.218089354558734E-5	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999659652790878	WITHOUT_CLASSIFICATION	3.4034720912330205E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999501644487113	WITHOUT_CLASSIFICATION	4.98355512886473E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999891963029809	WITHOUT_CLASSIFICATION	1.080369701909783E-5	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999999122273351	WITHOUT_CLASSIFICATION	8.777266479437565E-8	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999444372997327	DESIGN	5.556270026741359E-5	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999937798221896	WITHOUT_CLASSIFICATION	6.2201778103065115E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999444372997327	DESIGN	5.556270026741359E-5	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999623015067516	WITHOUT_CLASSIFICATION	3.7698493248325184E-5	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9977233393269954	WITHOUT_CLASSIFICATION	0.0022766606730045664	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999896205634898	WITHOUT_CLASSIFICATION	1.0379436510196356E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998197824753248	WITHOUT_CLASSIFICATION	1.8021752467512058E-4	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999140876138344	WITHOUT_CLASSIFICATION	8.591238616556945E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998430472323455	WITHOUT_CLASSIFICATION	1.5695276765457033E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998430472323455	WITHOUT_CLASSIFICATION	1.5695276765457033E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999796438438083	WITHOUT_CLASSIFICATION	2.035615619169205E-5	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999946939334729	WITHOUT_CLASSIFICATION	5.306066527102341E-5	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999676969313973	WITHOUT_CLASSIFICATION	3.2303068602778134E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999639140655717	WITHOUT_CLASSIFICATION	3.608593442832791E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999787920541146	WITHOUT_CLASSIFICATION	2.1207945885428172E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9537220333970927	WITHOUT_CLASSIFICATION	0.04627796660290717	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999377173520769	WITHOUT_CLASSIFICATION	6.228264792302313E-5	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999766072101655	WITHOUT_CLASSIFICATION	2.3392789834577925E-5	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999687189625268	WITHOUT_CLASSIFICATION	3.1281037473171776E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9998750274820759	WITHOUT_CLASSIFICATION	1.2497251792404534E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999980343614436	WITHOUT_CLASSIFICATION	1.965638556416928E-6	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999987831318616	WITHOUT_CLASSIFICATION	1.2168681383655754E-6	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9999645379797699	WITHOUT_CLASSIFICATION	3.54620202301061E-5	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999909752428577	WITHOUT_CLASSIFICATION	9.0247571422414E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999995021251582	WITHOUT_CLASSIFICATION	4.978748418562321E-7	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999994094086019	WITHOUT_CLASSIFICATION	5.905913980275729E-7	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999930512181658	WITHOUT_CLASSIFICATION	6.9487818341689045E-6	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999956055016783	WITHOUT_CLASSIFICATION	4.394498321725445E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999993389840319	WITHOUT_CLASSIFICATION	6.610159681789181E-7	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9994557182533961	WITHOUT_CLASSIFICATION	5.442817466039443E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999985966258689	WITHOUT_CLASSIFICATION	1.4033741311463978E-6	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999572459648381	WITHOUT_CLASSIFICATION	4.275403516182925E-5	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999985887073171	WITHOUT_CLASSIFICATION	1.4112926830301863E-6	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999976469500177	WITHOUT_CLASSIFICATION	2.3530499822786137E-6	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999987259467239	WITHOUT_CLASSIFICATION	1.2740532760771083E-6	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9996569614062115	WITHOUT_CLASSIFICATION	3.4303859378847097E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.999962601692097	WITHOUT_CLASSIFICATION	3.739830790291356E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9999667346543014	WITHOUT_CLASSIFICATION	3.3265345698581124E-5	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9980074301071213	WITHOUT_CLASSIFICATION	0.0019925698928786803	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9989753645379389	WITHOUT_CLASSIFICATION	0.0010246354620611917	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9977949273285385	DESIGN	0.0022050726714614886	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999969048357992	WITHOUT_CLASSIFICATION	3.0951642007833553E-6	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999377173520769	WITHOUT_CLASSIFICATION	6.228264792302313E-5	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999608179265301	WITHOUT_CLASSIFICATION	3.918207346993097E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999909538009253	WITHOUT_CLASSIFICATION	9.046199074726248E-6	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9998799052311286	DESIGN	1.2009476887144192E-4	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.999999382628778	WITHOUT_CLASSIFICATION	6.173712220793964E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999927977687469	WITHOUT_CLASSIFICATION	7.202231253001581E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999966447473542	WITHOUT_CLASSIFICATION	3.3552526457674677E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999639140655717	WITHOUT_CLASSIFICATION	3.608593442832791E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999639140655717	WITHOUT_CLASSIFICATION	3.608593442832791E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999975192223111	WITHOUT_CLASSIFICATION	2.4807776889456526E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999996838352337	WITHOUT_CLASSIFICATION	3.1616476634330285E-7	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9990052463122157	WITHOUT_CLASSIFICATION	9.947536877843862E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.99999644135979	WITHOUT_CLASSIFICATION	3.5586402098919792E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999992777099066	WITHOUT_CLASSIFICATION	7.222900934279387E-7	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9984075048963795	WITHOUT_CLASSIFICATION	0.001592495103620499	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9982572702818899	WITHOUT_CLASSIFICATION	0.001742729718110094	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.999991063446507	WITHOUT_CLASSIFICATION	8.936553492876236E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9994215902744988	WITHOUT_CLASSIFICATION	5.784097255010661E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999712899549564	WITHOUT_CLASSIFICATION	2.8710045043599477E-5	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999998806034506	WITHOUT_CLASSIFICATION	1.1939654940481033E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998386580672495	WITHOUT_CLASSIFICATION	1.6134193275056232E-4	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999810591638976	WITHOUT_CLASSIFICATION	1.8940836102424242E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999712899549564	WITHOUT_CLASSIFICATION	2.8710045043599477E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999905870084012	WITHOUT_CLASSIFICATION	9.412991598856098E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9938470433317901	WITHOUT_CLASSIFICATION	0.0061529566682099026	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999678143876793	WITHOUT_CLASSIFICATION	3.21856123205859E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9999349138143273	DESIGN	6.50861856726899E-5	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998386580672495	WITHOUT_CLASSIFICATION	1.6134193275056232E-4	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999057345037238	WITHOUT_CLASSIFICATION	9.426549627618343E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999959820450915	WITHOUT_CLASSIFICATION	4.017954908407186E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999976096652006	WITHOUT_CLASSIFICATION	2.3903347993886047E-6	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999968558482629	WITHOUT_CLASSIFICATION	3.1441517371536688E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9994146008424317	WITHOUT_CLASSIFICATION	5.853991575681654E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999960349808162	WITHOUT_CLASSIFICATION	3.965019183719882E-6	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999666962993585	WITHOUT_CLASSIFICATION	3.330370064143778E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999394058758204	WITHOUT_CLASSIFICATION	6.0594124179573636E-5	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999836797575439	WITHOUT_CLASSIFICATION	1.632024245619583E-5	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999932468732134	WITHOUT_CLASSIFICATION	6.7531267866065825E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.999913361116928	WITHOUT_CLASSIFICATION	8.663888307195629E-5	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999679931893081	WITHOUT_CLASSIFICATION	3.200681069197334E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999712899549564	WITHOUT_CLASSIFICATION	2.8710045043599477E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999057345037238	WITHOUT_CLASSIFICATION	9.426549627618343E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999976096652006	WITHOUT_CLASSIFICATION	2.3903347993886047E-6	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999936812788169	WITHOUT_CLASSIFICATION	6.318721183095961E-6	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9938963482911182	WITHOUT_CLASSIFICATION	0.00610365170888188	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999609319351084	WITHOUT_CLASSIFICATION	3.906806489168773E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9998386580672495	WITHOUT_CLASSIFICATION	1.6134193275056232E-4	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999661530641397	WITHOUT_CLASSIFICATION	3.384693586027431E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9998948094407326	WITHOUT_CLASSIFICATION	1.051905592673808E-4	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999498147913192	WITHOUT_CLASSIFICATION	5.018520868087365E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999303807985317	WITHOUT_CLASSIFICATION	6.96192014683313E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999394058758204	WITHOUT_CLASSIFICATION	6.0594124179573636E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999905870084012	WITHOUT_CLASSIFICATION	9.412991598856098E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999958306900966	WITHOUT_CLASSIFICATION	4.169309903420352E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999874302049356	WITHOUT_CLASSIFICATION	1.2569795064297752E-5	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999897342588253	WITHOUT_CLASSIFICATION	1.0265741174706462E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.999983068543534	WITHOUT_CLASSIFICATION	1.693145646589772E-5	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998571779089532	WITHOUT_CLASSIFICATION	1.4282209104673972E-4	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999690520645232	WITHOUT_CLASSIFICATION	3.094793547673512E-5	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9999798243002193	WITHOUT_CLASSIFICATION	2.017569978070888E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998197824753248	WITHOUT_CLASSIFICATION	1.8021752467512058E-4	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998247243476247	WITHOUT_CLASSIFICATION	1.7527565237531275E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999417277556779	WITHOUT_CLASSIFICATION	5.8272244322035355E-5	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999711525638345	WITHOUT_CLASSIFICATION	2.8847436165472954E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999941929770529	WITHOUT_CLASSIFICATION	5.8070229471639135E-6	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999969816216586	WITHOUT_CLASSIFICATION	3.0183783414370053E-6	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999918745109934	WITHOUT_CLASSIFICATION	8.12548900662066E-6	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999988459473602	WITHOUT_CLASSIFICATION	1.1540526397022228E-6	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999983229893164	WITHOUT_CLASSIFICATION	1.677010683596336E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999303807985317	WITHOUT_CLASSIFICATION	6.96192014683313E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999994944377012	WITHOUT_CLASSIFICATION	5.055622987964576E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999962353281531	WITHOUT_CLASSIFICATION	3.7646718468214465E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.99991867308852	WITHOUT_CLASSIFICATION	8.132691147999836E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9990974018601027	WITHOUT_CLASSIFICATION	9.025981398973536E-4	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9995702099008366	WITHOUT_CLASSIFICATION	4.297900991635123E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999155322458794	WITHOUT_CLASSIFICATION	8.446775412061818E-5	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999834520687283	WITHOUT_CLASSIFICATION	1.654793127168897E-5	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9996945471140296	WITHOUT_CLASSIFICATION	3.0545288597035497E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999988279768904	WITHOUT_CLASSIFICATION	1.1720231095774669E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.989287192006347	WITHOUT_CLASSIFICATION	0.010712807993652979	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999777177982013	WITHOUT_CLASSIFICATION	2.228220179857633E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999315762769944	WITHOUT_CLASSIFICATION	6.842372300559085E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999956455050139	WITHOUT_CLASSIFICATION	4.354494986194684E-6	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9997164099651934	WITHOUT_CLASSIFICATION	2.835900348065661E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998008874856585	WITHOUT_CLASSIFICATION	1.9911251434149964E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999733389319331	WITHOUT_CLASSIFICATION	2.6661068066909616E-5	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9836721020068283	WITHOUT_CLASSIFICATION	0.01632789799317165	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999982307424475	WITHOUT_CLASSIFICATION	1.769257552353488E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998337794481773	WITHOUT_CLASSIFICATION	1.6622055182270704E-4	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9971673346676324	WITHOUT_CLASSIFICATION	0.002832665332367663	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999859466619341	WITHOUT_CLASSIFICATION	1.4053338065962271E-5	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999996067355088	WITHOUT_CLASSIFICATION	3.932644911925723E-7	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999996095029874	WITHOUT_CLASSIFICATION	3.904970125846494E-7	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999425047128	WITHOUT_CLASSIFICATION	5.749528729111003E-8	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999949219502092	WITHOUT_CLASSIFICATION	5.078049790789999E-6	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9693989871707344	DESIGN	0.03060101282926554	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999945165801442	WITHOUT_CLASSIFICATION	5.483419855796485E-5	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9998940682677419	WITHOUT_CLASSIFICATION	1.0593173225824753E-4	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999872222459913	WITHOUT_CLASSIFICATION	1.2777754008531015E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9646537982032275	DESIGN	0.03534620179677249	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9931611422623513	WITHOUT_CLASSIFICATION	0.006838857737648617	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999993304277282	WITHOUT_CLASSIFICATION	6.695722718037706E-7	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999985940835011	WITHOUT_CLASSIFICATION	1.4059164989038716E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8679550911035536	WITHOUT_CLASSIFICATION	0.13204490889644643	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999996209135572	WITHOUT_CLASSIFICATION	3.7908644274537713E-7	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999839196946511	WITHOUT_CLASSIFICATION	1.6080305348959668E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.999996584764521	WITHOUT_CLASSIFICATION	3.415235479052962E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9841387186792449	WITHOUT_CLASSIFICATION	0.015861281320755285	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999839196946511	WITHOUT_CLASSIFICATION	1.6080305348959668E-5	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999996209135572	WITHOUT_CLASSIFICATION	3.7908644274537713E-7	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.999996584764521	WITHOUT_CLASSIFICATION	3.415235479052962E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999886207461129	WITHOUT_CLASSIFICATION	1.137925388700048E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999882456156758	WITHOUT_CLASSIFICATION	1.17543843241657E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999997546675774	WITHOUT_CLASSIFICATION	2.4533242263719497E-7	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999813219115883	WITHOUT_CLASSIFICATION	1.867808841175161E-5	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999999928626866	WITHOUT_CLASSIFICATION	7.13731334224479E-9	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9759316730985533	DESIGN	0.024068326901446786	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9994854667083158	WITHOUT_CLASSIFICATION	5.145332916841669E-4	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998406184982388	WITHOUT_CLASSIFICATION	1.593815017612022E-4	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998252180208218	WITHOUT_CLASSIFICATION	1.74781979178091E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999696641307236	WITHOUT_CLASSIFICATION	3.0335869276402886E-4	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999832163969128	WITHOUT_CLASSIFICATION	1.6783603087209253E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999974646625865	WITHOUT_CLASSIFICATION	2.535337413470672E-6	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999997481449378	WITHOUT_CLASSIFICATION	2.518550621478773E-7	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999375054028777	WITHOUT_CLASSIFICATION	6.249459712230424E-5	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999512160751464	WITHOUT_CLASSIFICATION	4.878392485359765E-5	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998800231157	WITHOUT_CLASSIFICATION	1.199768843378E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999997227325811	WITHOUT_CLASSIFICATION	2.772674189017921E-6	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9998518997928175	WITHOUT_CLASSIFICATION	1.4810020718257675E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.8007090173491678	WITHOUT_CLASSIFICATION	0.19929098265083223	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999614309673639	WITHOUT_CLASSIFICATION	3.856903263607316E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9998790235735133	WITHOUT_CLASSIFICATION	1.2097642648670153E-4	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999900329949365	WITHOUT_CLASSIFICATION	9.967005063521925E-6	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999989159530801	WITHOUT_CLASSIFICATION	1.0840469198634558E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999530591955	WITHOUT_CLASSIFICATION	4.6940804527895616E-8	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995653590459	WITHOUT_CLASSIFICATION	4.346409541376748E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999995653590459	WITHOUT_CLASSIFICATION	4.346409541376748E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999992262876073	WITHOUT_CLASSIFICATION	7.737123926349383E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999992262876073	WITHOUT_CLASSIFICATION	7.737123926349383E-7	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.999947877973298	WITHOUT_CLASSIFICATION	5.212202670205589E-5	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999997227325811	WITHOUT_CLASSIFICATION	2.772674189017921E-6	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997933517930445	WITHOUT_CLASSIFICATION	2.0664820695552987E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999956790508137	WITHOUT_CLASSIFICATION	4.32094918637E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999926276869875	WITHOUT_CLASSIFICATION	7.37231301253644E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999926276869875	WITHOUT_CLASSIFICATION	7.37231301253644E-6	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999867398768462	WITHOUT_CLASSIFICATION	1.3260123153897242E-5	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999812837998985	WITHOUT_CLASSIFICATION	1.8716200101502863E-4	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9994706958977976	WITHOUT_CLASSIFICATION	5.293041022024983E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999881717897209	WITHOUT_CLASSIFICATION	1.1828210279117328E-5	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9455641487908789	WITHOUT_CLASSIFICATION	0.05443585120912116	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9970300854928029	WITHOUT_CLASSIFICATION	0.0029699145071970783	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9999678969477952	WITHOUT_CLASSIFICATION	3.210305220476081E-5	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.986412366958251	WITHOUT_CLASSIFICATION	0.013587633041749096	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9998870752928607	WITHOUT_CLASSIFICATION	1.1292470713926055E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9996931743992913	WITHOUT_CLASSIFICATION	3.068256007087208E-4	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999468936220058	WITHOUT_CLASSIFICATION	5.310637799414835E-5	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999895918277776	WITHOUT_CLASSIFICATION	1.0408172222468675E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999931717414738	WITHOUT_CLASSIFICATION	6.82825852623031E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999941375890994	WITHOUT_CLASSIFICATION	5.862410900640887E-6	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9997563756137456	WITHOUT_CLASSIFICATION	2.4362438625430733E-4	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999857666917382	WITHOUT_CLASSIFICATION	1.4233308261804532E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999343975184107	WITHOUT_CLASSIFICATION	6.560248158928264E-5	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999665036533776	WITHOUT_CLASSIFICATION	3.349634662235854E-5	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999795270285731	WITHOUT_CLASSIFICATION	2.047297142698885E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999974148884819	WITHOUT_CLASSIFICATION	2.5851115180957394E-6	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999998771087354	WITHOUT_CLASSIFICATION	1.228912645895418E-7	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999998103291681	WITHOUT_CLASSIFICATION	1.8967083186206649E-7	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999835861757106	WITHOUT_CLASSIFICATION	1.6413824289405945E-5	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999976821518641	WITHOUT_CLASSIFICATION	2.3178481359105303E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998999050425337	WITHOUT_CLASSIFICATION	1.0009495746629602E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999989326655171	WITHOUT_CLASSIFICATION	1.067334482861845E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999315762769944	WITHOUT_CLASSIFICATION	6.842372300559085E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.99999875372559	WITHOUT_CLASSIFICATION	1.2462744099288636E-6	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9998390088030564	WITHOUT_CLASSIFICATION	1.6099119694367898E-4	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999900210663356	WITHOUT_CLASSIFICATION	9.9789336642904E-6	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964475895046	WITHOUT_CLASSIFICATION	3.5524104953654237E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999992240794082	WITHOUT_CLASSIFICATION	7.759205918033121E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999992240794082	WITHOUT_CLASSIFICATION	7.759205918033121E-6	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999994927517769	WITHOUT_CLASSIFICATION	5.07248223110687E-7	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999996822710978	WITHOUT_CLASSIFICATION	3.1772890223170694E-7	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9995600292389203	WITHOUT_CLASSIFICATION	4.399707610797249E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9995600292389203	WITHOUT_CLASSIFICATION	4.399707610797249E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999225533809551	WITHOUT_CLASSIFICATION	7.744661904489307E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999889229806355	WITHOUT_CLASSIFICATION	1.1077019364611872E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999589805930106	WITHOUT_CLASSIFICATION	4.101940698941424E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.99999222328687	WITHOUT_CLASSIFICATION	7.776713129990503E-6	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9999629777240995	WITHOUT_CLASSIFICATION	3.7022275900632146E-5	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999973264144735	WITHOUT_CLASSIFICATION	2.673585526597467E-6	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9999875154443284	WITHOUT_CLASSIFICATION	1.2484555671600683E-5	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999653731192774	WITHOUT_CLASSIFICATION	3.46268807225908E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9942525488127221	WITHOUT_CLASSIFICATION	0.005747451187277941	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9942525488127221	WITHOUT_CLASSIFICATION	0.005747451187277941	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9996503363208247	WITHOUT_CLASSIFICATION	3.4966367917542456E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9997275197643337	WITHOUT_CLASSIFICATION	2.724802356663112E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9997275197643337	WITHOUT_CLASSIFICATION	2.724802356663112E-4	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9984580683095516	WITHOUT_CLASSIFICATION	0.0015419316904483208	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999991342613868	WITHOUT_CLASSIFICATION	8.657386132230911E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.6037931169644901	DESIGN	0.39620688303550977	WITHOUT_CLASSIFICATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999970215465485	WITHOUT_CLASSIFICATION	2.978453451470219E-6	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999973246870787	WITHOUT_CLASSIFICATION	2.675312921202942E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.99999333474834	WITHOUT_CLASSIFICATION	6.665251660059495E-6	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.999971023455249	WITHOUT_CLASSIFICATION	2.8976544750849944E-5	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999879911590772	WITHOUT_CLASSIFICATION	1.2008840922663178E-5	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999991669154146	WITHOUT_CLASSIFICATION	8.330845853017813E-7	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999282196052612	WITHOUT_CLASSIFICATION	7.178039473879915E-5	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999987356972211	WITHOUT_CLASSIFICATION	1.2643027789170769E-6	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9984759985206723	WITHOUT_CLASSIFICATION	0.001524001479327752	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999980452510657	WITHOUT_CLASSIFICATION	1.9547489342973705E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999980452510657	WITHOUT_CLASSIFICATION	1.9547489342973705E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999980452510657	WITHOUT_CLASSIFICATION	1.9547489342973705E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999980452510657	WITHOUT_CLASSIFICATION	1.9547489342973705E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999996954638061	WITHOUT_CLASSIFICATION	3.0453619397471576E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9995351996709761	WITHOUT_CLASSIFICATION	4.6480032902378366E-4	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999587586999602	WITHOUT_CLASSIFICATION	4.124130003977027E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9999700300561041	WITHOUT_CLASSIFICATION	2.9969943895966413E-5	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999279587312715	WITHOUT_CLASSIFICATION	7.204126872849352E-5	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.992101124136257	WITHOUT_CLASSIFICATION	0.007898875863743144	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9750035855728911	WITHOUT_CLASSIFICATION	0.024996414427108864	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999972353112989	WITHOUT_CLASSIFICATION	2.764688701098292E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.999999998446015	WITHOUT_CLASSIFICATION	1.5539850578464577E-9	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.999970577272705	WITHOUT_CLASSIFICATION	2.9422727295025563E-5	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.996830410700983	WITHOUT_CLASSIFICATION	0.0031695892990168794	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998671295512468	WITHOUT_CLASSIFICATION	1.328704487531301E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999154834851407	WITHOUT_CLASSIFICATION	8.451651485930969E-5	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999278892205351	WITHOUT_CLASSIFICATION	7.211077946498024E-5	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999999177077528	WITHOUT_CLASSIFICATION	8.229224721152954E-7	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998671295512468	WITHOUT_CLASSIFICATION	1.328704487531301E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9996831035163305	WITHOUT_CLASSIFICATION	3.1689648366950836E-4	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999986771944303	WITHOUT_CLASSIFICATION	1.3228055697077153E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999837404805103	WITHOUT_CLASSIFICATION	1.625951948969744E-5	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999843658357165	WITHOUT_CLASSIFICATION	1.5634164283474248E-5	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999958492966794	WITHOUT_CLASSIFICATION	4.150703320495066E-6	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.7312248222529543	WITHOUT_CLASSIFICATION	0.2687751777470458	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999932325583459	WITHOUT_CLASSIFICATION	6.767441654074525E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999950804869849	WITHOUT_CLASSIFICATION	4.919513014969575E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989264060216	WITHOUT_CLASSIFICATION	1.0735939784066005E-6	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999822998768985	WITHOUT_CLASSIFICATION	1.770012310152424E-5	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996766026725	WITHOUT_CLASSIFICATION	3.2339732755462785E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999892356157873	WITHOUT_CLASSIFICATION	1.0764384212668055E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.7902657749940994	WITHOUT_CLASSIFICATION	0.20973422500590058	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9999062883046175	WITHOUT_CLASSIFICATION	9.371169538258826E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999767264668608	WITHOUT_CLASSIFICATION	2.327353313921538E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9877478231868645	WITHOUT_CLASSIFICATION	0.012252176813135545	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992462582986	WITHOUT_CLASSIFICATION	7.53741701342041E-7	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997898366134972	WITHOUT_CLASSIFICATION	2.101633865028607E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999987193210933	WITHOUT_CLASSIFICATION	1.2806789067021022E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997898366134972	WITHOUT_CLASSIFICATION	2.101633865028607E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999988283131261	WITHOUT_CLASSIFICATION	1.171686873915931E-6	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9902325597408053	WITHOUT_CLASSIFICATION	0.009767440259194715	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9991544490493586	WITHOUT_CLASSIFICATION	8.455509506415145E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999364714387592	WITHOUT_CLASSIFICATION	6.352856124086515E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999992462582986	WITHOUT_CLASSIFICATION	7.53741701342041E-7	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999987193210933	WITHOUT_CLASSIFICATION	1.2806789067021022E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999988283131261	WITHOUT_CLASSIFICATION	1.171686873915931E-6	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999899548260972	WITHOUT_CLASSIFICATION	1.0045173902799297E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999775601434334	WITHOUT_CLASSIFICATION	2.243985656658864E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999783581826046	WITHOUT_CLASSIFICATION	2.1641817395475556E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999985561974845	WITHOUT_CLASSIFICATION	1.4438025155158598E-6	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9972072243051372	WITHOUT_CLASSIFICATION	0.0027927756948628933	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999999479603168	WITHOUT_CLASSIFICATION	5.203968320309192E-7	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999343975184107	WITHOUT_CLASSIFICATION	6.560248158928264E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9902325597408053	WITHOUT_CLASSIFICATION	0.009767440259194715	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999991242516314	WITHOUT_CLASSIFICATION	8.757483686897987E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9977035258927507	WITHOUT_CLASSIFICATION	0.0022964741072493628	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999829746567295	WITHOUT_CLASSIFICATION	1.702534327048082E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999343975184107	WITHOUT_CLASSIFICATION	6.560248158928264E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999819818230996	WITHOUT_CLASSIFICATION	1.8018176900443186E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999343975184107	WITHOUT_CLASSIFICATION	6.560248158928264E-5	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999995730249426	WITHOUT_CLASSIFICATION	4.2697505745414544E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999870783081154	WITHOUT_CLASSIFICATION	1.2921691884595563E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997902772784093	WITHOUT_CLASSIFICATION	2.0972272159067962E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999998696623003	WITHOUT_CLASSIFICATION	1.3033769969139734E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999864445254173	WITHOUT_CLASSIFICATION	1.3555474582650122E-5	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999816342888602	WITHOUT_CLASSIFICATION	1.8365711139845624E-5	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9996205267904146	WITHOUT_CLASSIFICATION	3.794732095854749E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999833988177202	WITHOUT_CLASSIFICATION	1.660118227976899E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999711213302553	WITHOUT_CLASSIFICATION	2.887866974474567E-5	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999442216953748	WITHOUT_CLASSIFICATION	5.577830462519507E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995646542286619	WITHOUT_CLASSIFICATION	4.3534577133819266E-4	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999987930871	WITHOUT_CLASSIFICATION	1.2069128833148034E-9	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.6037931169644901	DESIGN	0.39620688303550977	WITHOUT_CLASSIFICATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9995837578220513	WITHOUT_CLASSIFICATION	4.16242177948604E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999289129770565	WITHOUT_CLASSIFICATION	7.108702294345128E-5	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999985087440163	WITHOUT_CLASSIFICATION	1.4912559837296114E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9995031512787448	WITHOUT_CLASSIFICATION	4.968487212552361E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998735197931284	WITHOUT_CLASSIFICATION	1.264802068715451E-4	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999999426553985	WITHOUT_CLASSIFICATION	5.734460152048339E-8	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999998597580029	WITHOUT_CLASSIFICATION	1.4024199715144127E-7	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9082922488450017	WITHOUT_CLASSIFICATION	0.09170775115499837	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9990178984429289	WITHOUT_CLASSIFICATION	9.821015570711377E-4	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999938816596212	WITHOUT_CLASSIFICATION	6.1183403787649945E-6	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.6111459460859209	DESIGN	0.3888540539140793	WITHOUT_CLASSIFICATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9966713718098488	WITHOUT_CLASSIFICATION	0.003328628190151256	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9985134579923449	WITHOUT_CLASSIFICATION	0.001486542007655092	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999950339722862	WITHOUT_CLASSIFICATION	4.966027713916033E-6	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999976791954263	WITHOUT_CLASSIFICATION	2.320804573860551E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998922543322082	WITHOUT_CLASSIFICATION	1.0774566779188832E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999856594507847	WITHOUT_CLASSIFICATION	1.4340549215332672E-5	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999959325406854	WITHOUT_CLASSIFICATION	4.0674593146131824E-6	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999995127311841	WITHOUT_CLASSIFICATION	4.872688158987941E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9988650419387335	WITHOUT_CLASSIFICATION	0.0011349580612664504	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9847315140930031	WITHOUT_CLASSIFICATION	0.015268485906996934	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9110440458727851	WITHOUT_CLASSIFICATION	0.08895595412721491	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999996252470327	WITHOUT_CLASSIFICATION	3.7475296733849205E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9988048373115973	WITHOUT_CLASSIFICATION	0.0011951626884026698	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9999156031838011	WITHOUT_CLASSIFICATION	8.439681619886588E-5	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.999704757792205	WITHOUT_CLASSIFICATION	2.9524220779504243E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9986582195735797	WITHOUT_CLASSIFICATION	0.0013417804264202326	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.5102895120329869	WITHOUT_CLASSIFICATION	0.4897104879670131	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999993313276356	WITHOUT_CLASSIFICATION	6.686723644186854E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999855269354313	WITHOUT_CLASSIFICATION	1.4473064568826341E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9996991548637388	WITHOUT_CLASSIFICATION	3.0084513626116104E-4	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9996991548637388	WITHOUT_CLASSIFICATION	3.0084513626116104E-4	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999993560502664	WITHOUT_CLASSIFICATION	6.43949733611865E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999833988177202	WITHOUT_CLASSIFICATION	1.660118227976899E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9965508288271425	WITHOUT_CLASSIFICATION	0.003449171172857517	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999857981204824	WITHOUT_CLASSIFICATION	1.4201879517605764E-5	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999854047631804	WITHOUT_CLASSIFICATION	1.4595236819518988E-5	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.999999639576084	WITHOUT_CLASSIFICATION	3.6042391601928817E-7	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999731227755789	WITHOUT_CLASSIFICATION	2.687722442106488E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9999193787593517	WITHOUT_CLASSIFICATION	8.062124064832962E-5	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999998214539613	WITHOUT_CLASSIFICATION	1.78546038697484E-6	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999976315380036	WITHOUT_CLASSIFICATION	2.3684619964296643E-6	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999985731856791	WITHOUT_CLASSIFICATION	1.4268143208900526E-6	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999970048409714	WITHOUT_CLASSIFICATION	2.9951590286476335E-6	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.962702152663863	WITHOUT_CLASSIFICATION	0.037297847336136954	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.999899549175992	WITHOUT_CLASSIFICATION	1.0045082400802814E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999896468420886	WITHOUT_CLASSIFICATION	1.0353157911427746E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9997474207141817	WITHOUT_CLASSIFICATION	2.525792858183473E-4	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999931817537748	WITHOUT_CLASSIFICATION	6.8182462251891235E-6	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999977610934914	WITHOUT_CLASSIFICATION	2.238906508586142E-6	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999981629086202	WITHOUT_CLASSIFICATION	1.8370913797925163E-6	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.979459456961865	WITHOUT_CLASSIFICATION	0.02054054303813501	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999551572073324	WITHOUT_CLASSIFICATION	4.484279266764304E-5	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999892000294459	WITHOUT_CLASSIFICATION	1.0799970554111798E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999814626459058	WITHOUT_CLASSIFICATION	1.8537354094100096E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994231630985172	WITHOUT_CLASSIFICATION	5.768369014828344E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.5102895120329869	WITHOUT_CLASSIFICATION	0.4897104879670131	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999642903487563	WITHOUT_CLASSIFICATION	3.5709651243679555E-5	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999938934377526	WITHOUT_CLASSIFICATION	6.106562247436925E-6	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999968332432334	WITHOUT_CLASSIFICATION	3.166756766598066E-5	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999940927527496	WITHOUT_CLASSIFICATION	5.907247250325218E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9963264540321817	WITHOUT_CLASSIFICATION	0.0036735459678181805	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9995696239755781	WITHOUT_CLASSIFICATION	4.303760244218142E-4	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999702474874348	WITHOUT_CLASSIFICATION	2.9752512565261304E-5	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999978834401352	WITHOUT_CLASSIFICATION	2.116559864748265E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999996499916944	WITHOUT_CLASSIFICATION	3.5000830561411243E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.999972125538005	WITHOUT_CLASSIFICATION	2.787446199503504E-5	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999982497409365	WITHOUT_CLASSIFICATION	1.7502590635078145E-6	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999980214412468	WITHOUT_CLASSIFICATION	1.9785587531067983E-6	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.944177405621977	WITHOUT_CLASSIFICATION	0.05582259437802306	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999884189155221	WITHOUT_CLASSIFICATION	1.1581084477974147E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999357891153096	WITHOUT_CLASSIFICATION	6.421088469050726E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999357891153096	WITHOUT_CLASSIFICATION	6.421088469050726E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999980090139748	WITHOUT_CLASSIFICATION	1.9909860252354355E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999788790177329	WITHOUT_CLASSIFICATION	2.112098226722216E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9979481115153724	WITHOUT_CLASSIFICATION	0.0020518884846276444	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9979481115153724	WITHOUT_CLASSIFICATION	0.0020518884846276444	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999983352972339	WITHOUT_CLASSIFICATION	1.664702766092447E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9991368651568032	WITHOUT_CLASSIFICATION	8.631348431969137E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.964262369523402	WITHOUT_CLASSIFICATION	0.03573763047659799	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9997313169446683	WITHOUT_CLASSIFICATION	2.6868305533164164E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999982105749488	WITHOUT_CLASSIFICATION	1.7894250512179802E-6	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999802400258075	WITHOUT_CLASSIFICATION	1.9759974192520658E-5	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999927840421501	WITHOUT_CLASSIFICATION	7.215957849897173E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999927840421501	WITHOUT_CLASSIFICATION	7.215957849897173E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999960234816642	WITHOUT_CLASSIFICATION	3.976518335825745E-6	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999599879148777	WITHOUT_CLASSIFICATION	4.0012085122383245E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999684437500338	WITHOUT_CLASSIFICATION	3.155624996622462E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999979154692454	WITHOUT_CLASSIFICATION	2.0845307545565126E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999979154692454	WITHOUT_CLASSIFICATION	2.0845307545565126E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998006653604	WITHOUT_CLASSIFICATION	1.9933463959312997E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999999300101473	WITHOUT_CLASSIFICATION	6.998985271274467E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.960020064170672	WITHOUT_CLASSIFICATION	0.03997993582932799	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999795630678102	WITHOUT_CLASSIFICATION	2.043693218974874E-5	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999999815711746	WITHOUT_CLASSIFICATION	1.8428825353678147E-8	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999961455614216	WITHOUT_CLASSIFICATION	3.8544385784280115E-6	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999907520294241	WITHOUT_CLASSIFICATION	9.247970575796768E-6	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999975159961301	WITHOUT_CLASSIFICATION	2.4840038700118298E-6	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999404598469871	WITHOUT_CLASSIFICATION	5.9540153012745265E-5	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999973819197528	WITHOUT_CLASSIFICATION	2.618080247128829E-6	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9999276438950205	WITHOUT_CLASSIFICATION	7.23561049794603E-5	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9995968622964235	WITHOUT_CLASSIFICATION	4.0313770357652E-4	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999912051953919	WITHOUT_CLASSIFICATION	8.794804608087813E-6	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9955471774720004	WITHOUT_CLASSIFICATION	0.004452822527999545	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999851297566074	WITHOUT_CLASSIFICATION	1.4870243392620574E-5	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999272004497086	WITHOUT_CLASSIFICATION	7.279955029134647E-5	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999535591925359	WITHOUT_CLASSIFICATION	4.6440807464041745E-5	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9997348181676983	WITHOUT_CLASSIFICATION	2.6518183230179684E-4	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9998075577762988	WITHOUT_CLASSIFICATION	1.9244222370122703E-4	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999724035142982	WITHOUT_CLASSIFICATION	2.7596485701868635E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999785229279909	WITHOUT_CLASSIFICATION	2.1477072009032808E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9990332635618684	WITHOUT_CLASSIFICATION	9.66736438131512E-4	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9996784252525283	WITHOUT_CLASSIFICATION	3.215747474717587E-4	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999556701028902	WITHOUT_CLASSIFICATION	4.432989710976639E-5	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.999205894132605	WITHOUT_CLASSIFICATION	7.941058673951007E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999977687465837	WITHOUT_CLASSIFICATION	2.231253416264304E-6	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999944534682951	WITHOUT_CLASSIFICATION	5.5465317049110195E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999955333910033	WITHOUT_CLASSIFICATION	4.466608996616925E-6	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999879615863	WITHOUT_CLASSIFICATION	1.2038413705457658E-8	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999884076732195	WITHOUT_CLASSIFICATION	1.1592326780459266E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9984054114487103	WITHOUT_CLASSIFICATION	0.0015945885512897763	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9997539655869915	WITHOUT_CLASSIFICATION	2.460344130085912E-4	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999907202182654	WITHOUT_CLASSIFICATION	9.279781734699902E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999792112145117	WITHOUT_CLASSIFICATION	2.0788785488209136E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9997249153060215	WITHOUT_CLASSIFICATION	2.750846939785053E-4	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999792508272921	WITHOUT_CLASSIFICATION	2.074917270790367E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999517001153606	WITHOUT_CLASSIFICATION	4.82998846394872E-5	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999936274848329	WITHOUT_CLASSIFICATION	6.372515167082986E-6	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.999972705448499	WITHOUT_CLASSIFICATION	2.7294551500897162E-5	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999976614834324	WITHOUT_CLASSIFICATION	2.3385165675078274E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9995987357042886	WITHOUT_CLASSIFICATION	4.0126429571151064E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9995426748764025	WITHOUT_CLASSIFICATION	4.5732512359753587E-4	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999506677025052	WITHOUT_CLASSIFICATION	4.933229749484948E-5	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999655244160374	WITHOUT_CLASSIFICATION	3.447558396272293E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999991644738864	WITHOUT_CLASSIFICATION	8.355261135173949E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999871444521571	WITHOUT_CLASSIFICATION	1.285554784294881E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9985053965408124	WITHOUT_CLASSIFICATION	0.0014946034591876176	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999339143247062	WITHOUT_CLASSIFICATION	6.608567529379112E-5	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999999959265553	WITHOUT_CLASSIFICATION	4.073444692108E-9	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999991806872883	WITHOUT_CLASSIFICATION	8.193127117320317E-7	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999947910201075	WITHOUT_CLASSIFICATION	5.208979892478394E-6	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9998090773653505	WITHOUT_CLASSIFICATION	1.9092263464935894E-4	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9991611429759389	WITHOUT_CLASSIFICATION	8.388570240609963E-4	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999998312277415	WITHOUT_CLASSIFICATION	1.6877225859644842E-7	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9895018045628619	WITHOUT_CLASSIFICATION	0.01049819543713817	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999206085219641	WITHOUT_CLASSIFICATION	7.939147803589468E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9993736915807719	WITHOUT_CLASSIFICATION	6.26308419228091E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999984607379445	WITHOUT_CLASSIFICATION	1.539262055460302E-6	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9998032916503098	WITHOUT_CLASSIFICATION	1.967083496903055E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9957675810666339	WITHOUT_CLASSIFICATION	0.004232418933366178	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999950273004424	WITHOUT_CLASSIFICATION	4.972699557498324E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999950273004424	WITHOUT_CLASSIFICATION	4.972699557498324E-6	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9998785399792712	WITHOUT_CLASSIFICATION	1.2146002072869114E-4	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999905038915629	WITHOUT_CLASSIFICATION	9.496108437057394E-6	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999791889865	WITHOUT_CLASSIFICATION	2.0811013510760312E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9993188255122921	WITHOUT_CLASSIFICATION	6.811744877079702E-4	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9683988561284076	WITHOUT_CLASSIFICATION	0.031601143871592435	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999946056888195	WITHOUT_CLASSIFICATION	5.3943111805178654E-6	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999047033438	WITHOUT_CLASSIFICATION	9.529665629315488E-8	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999881024191	WITHOUT_CLASSIFICATION	1.189758090961139E-7	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999887932256858	WITHOUT_CLASSIFICATION	1.1206774314160308E-5	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999462348214551	WITHOUT_CLASSIFICATION	5.376517854500826E-5	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999992443993577	WITHOUT_CLASSIFICATION	7.556006421465344E-7	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9993597381044056	WITHOUT_CLASSIFICATION	6.402618955944046E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999599670886979	WITHOUT_CLASSIFICATION	4.0032911302053614E-5	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999931109822807	WITHOUT_CLASSIFICATION	6.889017719252312E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999902934947211	WITHOUT_CLASSIFICATION	9.706505278894686E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999902934947211	WITHOUT_CLASSIFICATION	9.706505278894686E-6	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.999901970651119	WITHOUT_CLASSIFICATION	9.802934888110913E-5	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999934860562651	WITHOUT_CLASSIFICATION	6.513943734765173E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999995236846879	WITHOUT_CLASSIFICATION	4.7631531211045893E-7	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999975637068702	WITHOUT_CLASSIFICATION	2.436293129770524E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999968497708807	WITHOUT_CLASSIFICATION	3.150229119321493E-6	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924297080046	WITHOUT_CLASSIFICATION	7.570291995375838E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999682731762487	WITHOUT_CLASSIFICATION	3.172682375125427E-5	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9946907946641936	WITHOUT_CLASSIFICATION	0.005309205335806272	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999926084834624	WITHOUT_CLASSIFICATION	7.391516537684873E-6	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999095168011319	WITHOUT_CLASSIFICATION	9.048319886805952E-5	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999966261811309	WITHOUT_CLASSIFICATION	3.373818869172976E-6	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999984625960744	WITHOUT_CLASSIFICATION	1.537403925646768E-6	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999998019945822	WITHOUT_CLASSIFICATION	1.980054177992527E-6	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999543608980108	WITHOUT_CLASSIFICATION	4.563910198919744E-5	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9178216406182945	WITHOUT_CLASSIFICATION	0.08217835938170548	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9891370567012122	WITHOUT_CLASSIFICATION	0.010862943298787791	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999905873682294	WITHOUT_CLASSIFICATION	9.412631770534724E-6	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999841522775692	WITHOUT_CLASSIFICATION	1.5847722430745376E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999999492266138	WITHOUT_CLASSIFICATION	5.0773386245947343E-8	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999809579979	WITHOUT_CLASSIFICATION	1.90420020975808E-8	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9990812223322315	WITHOUT_CLASSIFICATION	9.187776677685953E-4	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999338833735	WITHOUT_CLASSIFICATION	6.611662642315162E-8	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999996185481291	WITHOUT_CLASSIFICATION	3.814518708582109E-7	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999820225770412	WITHOUT_CLASSIFICATION	1.7977422958927103E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9719790100320725	WITHOUT_CLASSIFICATION	0.028020989967927536	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999901562602275	WITHOUT_CLASSIFICATION	9.843739772457202E-6	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999057630318	WITHOUT_CLASSIFICATION	9.423696817249244E-8	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999999427258769	WITHOUT_CLASSIFICATION	5.727412313761631E-8	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999003799191326	WITHOUT_CLASSIFICATION	9.962008086738576E-5	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998474272494438	WITHOUT_CLASSIFICATION	1.5257275055622588E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9900638753303944	WITHOUT_CLASSIFICATION	0.009936124669605575	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999444857432235	WITHOUT_CLASSIFICATION	5.55142567764392E-5	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9993805814328125	WITHOUT_CLASSIFICATION	6.19418567187442E-4	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999905058699485	WITHOUT_CLASSIFICATION	9.494130051432267E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9961031431920546	WITHOUT_CLASSIFICATION	0.0038968568079453553	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999999642508882	WITHOUT_CLASSIFICATION	3.574911183206596E-8	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997141340977559	WITHOUT_CLASSIFICATION	2.858659022441331E-4	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9998613501715617	WITHOUT_CLASSIFICATION	1.386498284382361E-4	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999421167144188	WITHOUT_CLASSIFICATION	5.788328558115126E-5	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9999787839005733	WITHOUT_CLASSIFICATION	2.1216099426835744E-5	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991538137947482	WITHOUT_CLASSIFICATION	8.461862052516749E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9991538137947482	WITHOUT_CLASSIFICATION	8.461862052516749E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999991018766771	WITHOUT_CLASSIFICATION	8.981233229292171E-7	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9707636227049716	WITHOUT_CLASSIFICATION	0.029236377295028444	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.6816796222210612	WITHOUT_CLASSIFICATION	0.31832037777893896	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999947294125354	WITHOUT_CLASSIFICATION	5.270587464572745E-6	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9997395556957683	WITHOUT_CLASSIFICATION	2.604443042317008E-4	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999786729402241	WITHOUT_CLASSIFICATION	2.1327059775834975E-5	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997617739283873	WITHOUT_CLASSIFICATION	2.3822607161262194E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999941426346	WITHOUT_CLASSIFICATION	5.857365359371116E-9	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9974915274369551	WITHOUT_CLASSIFICATION	0.002508472563044785	DESIGN
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946803515061	WITHOUT_CLASSIFICATION	5.319648493912227E-6	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956037426443	WITHOUT_CLASSIFICATION	4.3962573557910815E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5943425993366722	WITHOUT_CLASSIFICATION	0.4056574006633278	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999991745984275	WITHOUT_CLASSIFICATION	8.254015725438455E-7	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999582825438126	WITHOUT_CLASSIFICATION	4.171745618750764E-5	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.99999999964169	WITHOUT_CLASSIFICATION	3.5831004829032313E-10	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999970984783024	WITHOUT_CLASSIFICATION	2.901521697472728E-6	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999977805071648	WITHOUT_CLASSIFICATION	2.2194928351941437E-5	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999749226530165	WITHOUT_CLASSIFICATION	2.5077346983591396E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999825349167786	WITHOUT_CLASSIFICATION	1.746508322140916E-5	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9998003936646865	WITHOUT_CLASSIFICATION	1.99606335313402E-4	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999473771161996	WITHOUT_CLASSIFICATION	5.2622883800376286E-5	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999893799795373	WITHOUT_CLASSIFICATION	1.0620020462693057E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999925606434052	WITHOUT_CLASSIFICATION	7.439356594713524E-6	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9356639208628948	WITHOUT_CLASSIFICATION	0.06433607913710508	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.8675283164108142	WITHOUT_CLASSIFICATION	0.13247168358918587	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999988571209173	WITHOUT_CLASSIFICATION	1.1428790827131499E-5	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999942551540346	WITHOUT_CLASSIFICATION	5.744845965444812E-6	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9990414775906676	WITHOUT_CLASSIFICATION	9.585224093323231E-4	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9998275837072003	WITHOUT_CLASSIFICATION	1.7241629279976148E-4	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999691209363815	WITHOUT_CLASSIFICATION	3.0879063618613226E-5	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999276103335722	WITHOUT_CLASSIFICATION	7.23896664277334E-5	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998343721313545	WITHOUT_CLASSIFICATION	1.6562786864551146E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999996487269516	WITHOUT_CLASSIFICATION	3.5127304834498385E-7	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999999674623035	WITHOUT_CLASSIFICATION	3.253769663066687E-8	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9994815971950599	WITHOUT_CLASSIFICATION	5.184028049401407E-4	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9987206310760975	WITHOUT_CLASSIFICATION	0.0012793689239024677	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.999992815381656	WITHOUT_CLASSIFICATION	7.18461834398091E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999905236408088	WITHOUT_CLASSIFICATION	9.476359191279575E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9976468456788178	WITHOUT_CLASSIFICATION	0.002353154321182233	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999986036145552	WITHOUT_CLASSIFICATION	1.3963854448136012E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999974994583023	WITHOUT_CLASSIFICATION	2.500541697710445E-6	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999999579988308	WITHOUT_CLASSIFICATION	4.200116919625834E-7	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999691682412316	WITHOUT_CLASSIFICATION	3.0831758768480105E-5	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999082904354	WITHOUT_CLASSIFICATION	9.17095645945395E-8	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9991358601395072	WITHOUT_CLASSIFICATION	8.641398604928775E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999948800159437	WITHOUT_CLASSIFICATION	5.119984056202532E-6	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9998876133672027	WITHOUT_CLASSIFICATION	1.1238663279724984E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999599670886979	WITHOUT_CLASSIFICATION	4.0032911302053614E-5	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999889430771	WITHOUT_CLASSIFICATION	1.1056922987092971E-8	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999597266625437	WITHOUT_CLASSIFICATION	4.027333745625824E-5	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.999993518909814	WITHOUT_CLASSIFICATION	6.481090185879759E-6	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999987233820349	WITHOUT_CLASSIFICATION	1.2766179650346704E-6	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999992424311589	WITHOUT_CLASSIFICATION	7.575688411193707E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9556113228002193	WITHOUT_CLASSIFICATION	0.04438867719978062	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9857645628840727	WITHOUT_CLASSIFICATION	0.01423543711592722	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9997682741291921	WITHOUT_CLASSIFICATION	2.3172587080794364E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999982284335719	WITHOUT_CLASSIFICATION	1.7715664281691212E-6	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999999844542894	WITHOUT_CLASSIFICATION	1.554571059989508E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999999999963	WITHOUT_CLASSIFICATION	3.699996031128456E-11	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9987435932294223	WITHOUT_CLASSIFICATION	0.0012564067705777137	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999492044671525	WITHOUT_CLASSIFICATION	5.079553284744601E-5	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999995983946388	WITHOUT_CLASSIFICATION	4.0160536114261485E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808843238409	WITHOUT_CLASSIFICATION	1.9115676159112396E-5	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999997178875199	WITHOUT_CLASSIFICATION	2.821124800893515E-6	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999977456317739	WITHOUT_CLASSIFICATION	2.254368226160702E-6	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999105687696	WITHOUT_CLASSIFICATION	8.943123037720881E-8	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997183857896468	WITHOUT_CLASSIFICATION	2.816142103532096E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808843238409	WITHOUT_CLASSIFICATION	1.9115676159112396E-5	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999782532228257	WITHOUT_CLASSIFICATION	2.1746777174296494E-4	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9952134069887123	WITHOUT_CLASSIFICATION	0.004786593011287608	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9993879578939316	WITHOUT_CLASSIFICATION	6.120421060682285E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999091441728227	WITHOUT_CLASSIFICATION	9.085582717730191E-4	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997429960682188	WITHOUT_CLASSIFICATION	2.5700393178111993E-4	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999973811896535	WITHOUT_CLASSIFICATION	2.6188103465193136E-6	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999998299939299	WITHOUT_CLASSIFICATION	1.70006070104557E-7	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999730293701549	WITHOUT_CLASSIFICATION	2.6970629845104932E-5	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999939416558464	WITHOUT_CLASSIFICATION	6.0583441535291945E-6	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9998070087809381	WITHOUT_CLASSIFICATION	1.9299121906188137E-4	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999959358802814	WITHOUT_CLASSIFICATION	4.064119718691527E-6	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9892277400702073	WITHOUT_CLASSIFICATION	0.010772259929792704	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9980582732373252	WITHOUT_CLASSIFICATION	0.0019417267626747805	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.999973423469523	WITHOUT_CLASSIFICATION	2.657653047702032E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9993369357674411	WITHOUT_CLASSIFICATION	6.630642325589082E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9994231630985172	WITHOUT_CLASSIFICATION	5.768369014828344E-4	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9997306630805318	WITHOUT_CLASSIFICATION	2.693369194681747E-4	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999996123962581	WITHOUT_CLASSIFICATION	3.8760374197411486E-7	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999880127141163	WITHOUT_CLASSIFICATION	1.1987285883689032E-5	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9073200028525739	DESIGN	0.0926799971474262	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999738375792463	WITHOUT_CLASSIFICATION	2.616242075361201E-5	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9989065751052729	WITHOUT_CLASSIFICATION	0.0010934248947271077	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999524787799877	WITHOUT_CLASSIFICATION	4.752122001220802E-5	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999691068331	WITHOUT_CLASSIFICATION	3.089316682527773E-8	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999972524274063	WITHOUT_CLASSIFICATION	2.7475725936702027E-6	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999920327755	WITHOUT_CLASSIFICATION	7.967224511554717E-8	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9995352762985632	WITHOUT_CLASSIFICATION	4.6472370143685814E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999997045646285	WITHOUT_CLASSIFICATION	2.95435371495188E-7	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9999893820390688	WITHOUT_CLASSIFICATION	1.0617960931039562E-5	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.7681380168049131	WITHOUT_CLASSIFICATION	0.23186198319508683	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999990910849083	WITHOUT_CLASSIFICATION	9.089150918752868E-7	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998867797811892	WITHOUT_CLASSIFICATION	1.1322021881071779E-4	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9148911876438446	WITHOUT_CLASSIFICATION	0.08510881235615547	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999833942455226	WITHOUT_CLASSIFICATION	1.6605754477365963E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999957529766595	WITHOUT_CLASSIFICATION	4.2470233403963256E-6	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.7905416649355222	WITHOUT_CLASSIFICATION	0.2094583350644778	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999850137422461	WITHOUT_CLASSIFICATION	1.498625775390224E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999993113522991	WITHOUT_CLASSIFICATION	6.88647700811073E-7	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999898937657619	WITHOUT_CLASSIFICATION	1.010623423812495E-5	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999925273221932	WITHOUT_CLASSIFICATION	7.472677806766906E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999906018548012	WITHOUT_CLASSIFICATION	9.398145198812628E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999906018548012	WITHOUT_CLASSIFICATION	9.398145198812628E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.999918900222754	WITHOUT_CLASSIFICATION	8.10997772460031E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999965922321221	WITHOUT_CLASSIFICATION	3.407767877871063E-6	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9998250029834884	WITHOUT_CLASSIFICATION	1.7499701651156507E-4	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9457259965347053	DESIGN	0.05427400346529459	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.99999222328687	WITHOUT_CLASSIFICATION	7.776713129990503E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.99999222328687	WITHOUT_CLASSIFICATION	7.776713129990503E-6	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999758191518293	WITHOUT_CLASSIFICATION	2.4180848170637276E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999615690140291	WITHOUT_CLASSIFICATION	3.84309859710096E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9998963114982472	WITHOUT_CLASSIFICATION	1.0368850175273123E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999267904582497	WITHOUT_CLASSIFICATION	7.320954175030657E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.999995766713223	WITHOUT_CLASSIFICATION	4.233286776967117E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999995856734736	WITHOUT_CLASSIFICATION	4.143265263983156E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999988302803243	WITHOUT_CLASSIFICATION	1.1697196757350411E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999972929252193	WITHOUT_CLASSIFICATION	2.707074780632869E-6	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999661686554	WITHOUT_CLASSIFICATION	3.3831344620534925E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999534617853717	WITHOUT_CLASSIFICATION	4.653821462831036E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999534617853717	WITHOUT_CLASSIFICATION	4.653821462831036E-5	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999863530757038	WITHOUT_CLASSIFICATION	1.3646924296192462E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999394058758204	WITHOUT_CLASSIFICATION	6.0594124179573636E-5	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999960349808162	WITHOUT_CLASSIFICATION	3.965019183719882E-6	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.990450158671252	WITHOUT_CLASSIFICATION	0.009549841328748136	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9933315669868742	WITHOUT_CLASSIFICATION	0.006668433013125735	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998247243476247	WITHOUT_CLASSIFICATION	1.7527565237531275E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975854589406	WITHOUT_CLASSIFICATION	2.4145410594048524E-5	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999999447526721	WITHOUT_CLASSIFICATION	5.524732790357153E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9988936206892394	WITHOUT_CLASSIFICATION	0.0011063793107606089	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9134293256437442	WITHOUT_CLASSIFICATION	0.08657067435625576	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9986724147888503	WITHOUT_CLASSIFICATION	0.0013275852111496722	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9998070087809381	WITHOUT_CLASSIFICATION	1.9299121906188137E-4	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9999923645130145	WITHOUT_CLASSIFICATION	7.635486985448055E-6	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999892326835771	WITHOUT_CLASSIFICATION	1.076731642290169E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999875629335235	WITHOUT_CLASSIFICATION	1.2437066476373615E-5	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999441659391718	WITHOUT_CLASSIFICATION	5.583406082817766E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999982389344408	WITHOUT_CLASSIFICATION	1.7610655591595616E-6	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999808721170064	WITHOUT_CLASSIFICATION	1.9127882993602134E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9995684677744066	WITHOUT_CLASSIFICATION	4.315322255934936E-4	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999995303487188	WITHOUT_CLASSIFICATION	4.696512812186399E-7	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999829302052925	WITHOUT_CLASSIFICATION	1.706979470749845E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999645097960927	WITHOUT_CLASSIFICATION	3.5490203907177277E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999645097960927	WITHOUT_CLASSIFICATION	3.5490203907177277E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998671295512468	WITHOUT_CLASSIFICATION	1.328704487531301E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9998022290438445	WITHOUT_CLASSIFICATION	1.9777095615550384E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997451726789334	WITHOUT_CLASSIFICATION	2.5482732106666344E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999164886969718	WITHOUT_CLASSIFICATION	8.351130302827502E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999987368169655	WITHOUT_CLASSIFICATION	1.2631830345683302E-6	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9997897266451795	WITHOUT_CLASSIFICATION	2.1027335482038886E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999767264668608	WITHOUT_CLASSIFICATION	2.327353313921538E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999999528899496	WITHOUT_CLASSIFICATION	4.711005032288304E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999899548260972	WITHOUT_CLASSIFICATION	1.0045173902799297E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999970611186603	WITHOUT_CLASSIFICATION	2.9388813396632705E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999343975184107	WITHOUT_CLASSIFICATION	6.560248158928264E-5	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.8495403294867078	WITHOUT_CLASSIFICATION	0.1504596705132922	DESIGN
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9997751594162999	WITHOUT_CLASSIFICATION	2.248405837002023E-4	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999804957103797	WITHOUT_CLASSIFICATION	1.9504289620330524E-5	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9981588125325483	WITHOUT_CLASSIFICATION	0.0018411874674517245	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999786284253599	WITHOUT_CLASSIFICATION	2.1371574640113592E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.99994763559828	WITHOUT_CLASSIFICATION	5.236440171999279E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999997445495147	WITHOUT_CLASSIFICATION	2.5545048527868293E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998671964923027	WITHOUT_CLASSIFICATION	1.328035076972933E-4	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9994462888358433	WITHOUT_CLASSIFICATION	5.537111641567726E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.99995830975693	WITHOUT_CLASSIFICATION	4.1690243069986145E-5	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9998255370524839	WITHOUT_CLASSIFICATION	1.7446294751606922E-4	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.960020064170672	WITHOUT_CLASSIFICATION	0.03997993582932799	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.7403070243238885	WITHOUT_CLASSIFICATION	0.2596929756761115	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999777570430741	WITHOUT_CLASSIFICATION	2.2242956925873073E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999777570430741	WITHOUT_CLASSIFICATION	2.2242956925873073E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999951358558976	WITHOUT_CLASSIFICATION	4.864144102303908E-6	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9999995235284986	WITHOUT_CLASSIFICATION	4.7647150138823784E-7	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999999891380912	WITHOUT_CLASSIFICATION	1.0861908832476248E-8	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999907050997701	WITHOUT_CLASSIFICATION	9.29490023001857E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999964043675094	WITHOUT_CLASSIFICATION	3.5956324906812142E-6	DESIGN
// todo : what else to do here?	DESIGN	0.9095693674032865	WITHOUT_CLASSIFICATION	0.0904306325967135	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9898603009543195	WITHOUT_CLASSIFICATION	0.010139699045680375	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9442466237586907	WITHOUT_CLASSIFICATION	0.055753376241309285	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9994356851009484	DESIGN	5.643148990516596E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9994356851009484	DESIGN	5.643148990516596E-4	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9997869934544756	WITHOUT_CLASSIFICATION	2.1300654552442735E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9606605528773853	WITHOUT_CLASSIFICATION	0.03933944712261478	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9999887839932106	WITHOUT_CLASSIFICATION	1.121600678952063E-5	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985657924531106	DESIGN	0.0014342075468893709	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985657924531106	DESIGN	0.0014342075468893709	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999936404335078	DESIGN	6.359566492128128E-6	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999936404335078	DESIGN	6.359566492128128E-6	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9996269180066746	DESIGN	3.730819933253519E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9973282566221792	DESIGN	0.0026717433778208487	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9973282566221792	DESIGN	0.0026717433778208487	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9603851946402009	DESIGN	0.039614805359799096	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9606605528773853	WITHOUT_CLASSIFICATION	0.03933944712261478	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9999921786276819	WITHOUT_CLASSIFICATION	7.821372318108801E-6	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999928883056443	WITHOUT_CLASSIFICATION	7.111694355740773E-6	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999976532591964	WITHOUT_CLASSIFICATION	2.346740803602733E-6	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9931779825664774	DESIGN	0.006822017433522603	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.9998803915349166	DESIGN	1.196084650833524E-4	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9583934620791991	DESIGN	0.04160653792080087	WITHOUT_CLASSIFICATION
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999995164253467	WITHOUT_CLASSIFICATION	4.835746533539008E-7	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9998447348528738	WITHOUT_CLASSIFICATION	1.5526514712606724E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9095693674032865	WITHOUT_CLASSIFICATION	0.0904306325967135	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.999988828838505	WITHOUT_CLASSIFICATION	1.1171161494922797E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9095693674032865	WITHOUT_CLASSIFICATION	0.0904306325967135	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.5063143565871424	WITHOUT_CLASSIFICATION	0.49368564341285753	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.507271786727425	WITHOUT_CLASSIFICATION	0.4927282132725749	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999646429684309	DESIGN	3.53570315691956E-5	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9898603009543195	WITHOUT_CLASSIFICATION	0.010139699045680375	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9994710293145889	DESIGN	5.289706854111739E-4	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.8730228650230198	DESIGN	0.12697713497698018	WITHOUT_CLASSIFICATION
//TODO: reuse the PreLoadEvent	DESIGN	0.9934278346653534	DESIGN	0.006572165334646524	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9841591130839363	WITHOUT_CLASSIFICATION	0.015840886916063654	DESIGN
// todo : what is the implication of this?	DESIGN	0.6783389560525402	WITHOUT_CLASSIFICATION	0.3216610439474597	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9701492637580255	WITHOUT_CLASSIFICATION	0.0298507362419745	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.994953170453075	DESIGN	0.005046829546925072	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.999404524615407	DESIGN	5.954753845930139E-4	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9998995388146503	WITHOUT_CLASSIFICATION	1.0046118534970284E-4	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9904840555720551	DESIGN	0.009515944427944978	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.8174171554540001	WITHOUT_CLASSIFICATION	0.1825828445459999	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9997277114799764	DESIGN	2.7228852002359177E-4	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9486448284650166	WITHOUT_CLASSIFICATION	0.05135517153498332	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.989530980642479	DESIGN	0.01046901935752093	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.5452803845584837	DESIGN	0.4547196154415164	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9731438802900407	DESIGN	0.026856119709959225	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9858233171341654	WITHOUT_CLASSIFICATION	0.014176682865834615	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9858233171341654	WITHOUT_CLASSIFICATION	0.014176682865834615	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9270126965172532	DESIGN	0.07298730348274679	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.7331736438836676	DESIGN	0.26682635611633254	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9745469845433072	DESIGN	0.025453015456692728	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9745469845433072	DESIGN	0.025453015456692728	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9745469845433072	DESIGN	0.025453015456692728	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.5452803845584837	DESIGN	0.4547196154415164	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9997288413513161	WITHOUT_CLASSIFICATION	2.711586486838968E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9999246878169292	WITHOUT_CLASSIFICATION	7.531218307076109E-5	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9964641556056213	WITHOUT_CLASSIFICATION	0.0035358443943787595	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9794811752704197	WITHOUT_CLASSIFICATION	0.020518824729580363	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5122758981554298	WITHOUT_CLASSIFICATION	0.48772410184457005	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9891994782948857	WITHOUT_CLASSIFICATION	0.010800521705114224	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9994356851009484	DESIGN	5.643148990516596E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9994356851009484	DESIGN	5.643148990516596E-4	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9990160317708133	WITHOUT_CLASSIFICATION	9.839682291865953E-4	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9994356851009484	DESIGN	5.643148990516596E-4	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999864065176866	DESIGN	1.35934823134829E-5	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9998722749330209	WITHOUT_CLASSIFICATION	1.2772506697915055E-4	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9989131395738522	WITHOUT_CLASSIFICATION	0.0010868604261478868	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.999905917778103	WITHOUT_CLASSIFICATION	9.408222189702045E-5	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.996651020704859	WITHOUT_CLASSIFICATION	0.003348979295141051	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.8914477163601969	WITHOUT_CLASSIFICATION	0.10855228363980308	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9996870518221114	WITHOUT_CLASSIFICATION	3.129481778886059E-4	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999928471516955	WITHOUT_CLASSIFICATION	7.152848304452218E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.992884394070968	WITHOUT_CLASSIFICATION	0.0071156059290320515	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9999377403327905	WITHOUT_CLASSIFICATION	6.225966720948895E-5	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9953434332365826	WITHOUT_CLASSIFICATION	0.00465656676341745	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9997755832615929	WITHOUT_CLASSIFICATION	2.2441673840706695E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9932758368452794	WITHOUT_CLASSIFICATION	0.006724163154720487	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9826748328148085	WITHOUT_CLASSIFICATION	0.017325167185191507	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9902595843870571	WITHOUT_CLASSIFICATION	0.009740415612942838	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9751656151335291	WITHOUT_CLASSIFICATION	0.024834384866471017	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9999866732370314	WITHOUT_CLASSIFICATION	1.3326762968561711E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.607647046912187	DESIGN	0.3923529530878131	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9839857335902186	WITHOUT_CLASSIFICATION	0.01601426640978137	DESIGN
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.7708001545247113	DESIGN	0.2291998454752887	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9996176500653311	DESIGN	3.8234993466884735E-4	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9995130668020782	WITHOUT_CLASSIFICATION	4.8693319792190775E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9989067040961855	WITHOUT_CLASSIFICATION	0.0010932959038144874	DESIGN
//I suppose?	DESIGN	0.996439855822166	WITHOUT_CLASSIFICATION	0.003560144177833866	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9974120752481029	DESIGN	0.0025879247518971024	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9079873438600516	DESIGN	0.09201265613994841	WITHOUT_CLASSIFICATION
//TODO:refactor + make this method private	DESIGN	0.9821201668557287	DESIGN	0.017879833144271357	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9976061894381033	WITHOUT_CLASSIFICATION	0.0023938105618967337	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9993198980066357	DESIGN	6.801019933643246E-4	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9997999146906598	DESIGN	2.0008530934018172E-4	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9999886757481659	WITHOUT_CLASSIFICATION	1.1324251834166432E-5	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9949377373579218	DESIGN	0.0050622626420783025	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9949377373579218	DESIGN	0.0050622626420783025	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9833594513064552	DESIGN	0.0166405486935448	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.9303041350914644	DESIGN	0.06969586490853555	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.9303041350914644	DESIGN	0.06969586490853555	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9997568522129596	DESIGN	2.4314778704038228E-4	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.8534920253770977	WITHOUT_CLASSIFICATION	0.14650797462290235	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9999100012157752	DESIGN	8.999878422478697E-5	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.660249221975363	WITHOUT_CLASSIFICATION	0.33975077802463705	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.8687293160364847	WITHOUT_CLASSIFICATION	0.1312706839635153	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9399399165526365	DESIGN	0.06006008344736345	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9962056698904557	DESIGN	0.0037943301095443825	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.8334273652738361	DESIGN	0.1665726347261638	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9945976083962244	DESIGN	0.005402391603775723	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9994689427154173	DESIGN	5.310572845826683E-4	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9895443263030921	WITHOUT_CLASSIFICATION	0.01045567369690791	DESIGN
//TODO: suck into event class	DESIGN	0.9982671366509037	DESIGN	0.0017328633490963133	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.8459264475992556	DESIGN	0.1540735524007443	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.758140015452857	WITHOUT_CLASSIFICATION	0.24185998454714305	DESIGN
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999994924279565	DESIGN	5.075720434878408E-7	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9997397984882737	DESIGN	2.602015117263576E-4	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9996017969827166	WITHOUT_CLASSIFICATION	3.9820301728354837E-4	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.9983463314559802	DESIGN	0.0016536685440198902	WITHOUT_CLASSIFICATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9999999828771708	DESIGN	1.7122829157053824E-8	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9333269896039951	WITHOUT_CLASSIFICATION	0.0666730103960049	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9999721975471851	DESIGN	2.7802452814920385E-5	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9995148435722079	DESIGN	4.8515642779211324E-4	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9726590068613882	DESIGN	0.027340993138611738	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9998758685351209	DESIGN	1.2413146487920382E-4	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9983675787763087	DESIGN	0.0016324212236912884	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.7159751128546588	WITHOUT_CLASSIFICATION	0.2840248871453412	DESIGN
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9999534576535254	WITHOUT_CLASSIFICATION	4.654234647459218E-5	DESIGN
//TODO: merge into one method!	DESIGN	0.9798832655791485	DESIGN	0.02011673442085148	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9912076659800926	DESIGN	0.008792334019907517	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999999501600166	DESIGN	4.9839983367491974E-8	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999898533512784	DESIGN	1.0146648721502944E-5	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9642026880787408	WITHOUT_CLASSIFICATION	0.03579731192125916	DESIGN
// TODO : better way?!?	DESIGN	0.9999909282391579	DESIGN	9.071760842005231E-6	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999517686025263	WITHOUT_CLASSIFICATION	4.823139747374547E-5	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9970025721012175	DESIGN	0.0029974278987825727	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999460157435	DESIGN	5.3984256534438996E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9914519153123106	DESIGN	0.008548084687689427	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9991497466056428	DESIGN	8.502533943573118E-4	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9990373117306396	DESIGN	9.626882693604324E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9922166955271253	WITHOUT_CLASSIFICATION	0.007783304472874751	DESIGN
//yuck!	DESIGN	0.9990160317708133	WITHOUT_CLASSIFICATION	9.839682291865953E-4	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9999608653941747	WITHOUT_CLASSIFICATION	3.9134605825339766E-5	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9538238592011891	DESIGN	0.046176140798810876	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9994285098642314	WITHOUT_CLASSIFICATION	5.714901357686611E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999211940700959	DESIGN	7.88059299041352E-5	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9954661113052816	DESIGN	0.004533888694718438	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999999989714417	DESIGN	1.0285583035083082E-9	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9994356851009484	DESIGN	5.643148990516596E-4	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9999063439145135	WITHOUT_CLASSIFICATION	9.36560854864963E-5	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9799090300194667	DESIGN	0.020090969980533238	WITHOUT_CLASSIFICATION
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9995832941870239	DESIGN	4.1670581297603265E-4	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999986819039101	WITHOUT_CLASSIFICATION	1.3180960899639386E-6	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9965102069584968	WITHOUT_CLASSIFICATION	0.0034897930415032264	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999999209487788	DESIGN	7.905122119501333E-8	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.7563812031379564	WITHOUT_CLASSIFICATION	0.24361879686204352	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9890492016208332	DESIGN	0.010950798379166822	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9987435034635865	DESIGN	0.0012564965364135225	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9986684023150589	DESIGN	0.0013315976849409782	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9971921547629236	WITHOUT_CLASSIFICATION	0.0028078452370765223	DESIGN
//The class is now way to complex!	DESIGN	0.9918352293036891	WITHOUT_CLASSIFICATION	0.008164770696310985	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9991512149792084	DESIGN	8.487850207914685E-4	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999997913788394	DESIGN	2.0862116057569923E-7	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9866122419970417	WITHOUT_CLASSIFICATION	0.013387758002958302	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.8954380243842835	WITHOUT_CLASSIFICATION	0.10456197561571635	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9999974427428724	WITHOUT_CLASSIFICATION	2.5572571277332956E-6	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9089546453870095	DESIGN	0.09104535461299042	WITHOUT_CLASSIFICATION
// unhappy about this being public ... is there a better way?	DESIGN	0.8885906569752682	DESIGN	0.11140934302473181	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999859450358556	DESIGN	1.4054964144509604E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.999997543136349	DESIGN	2.4568636510783485E-6	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9611407965185087	DESIGN	0.03885920348149136	WITHOUT_CLASSIFICATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9997268894575322	DESIGN	2.7311054246770196E-4	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.8807115096059164	WITHOUT_CLASSIFICATION	0.1192884903940837	DESIGN
// TODO: what type?	DESIGN	0.9992466121284139	DESIGN	7.533878715861805E-4	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9979852493635152	WITHOUT_CLASSIFICATION	0.0020147506364847664	DESIGN
// short-circuit for performance...	DESIGN	0.9999831068897147	WITHOUT_CLASSIFICATION	1.6893110285264295E-5	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9997268921742036	WITHOUT_CLASSIFICATION	2.7310782579642996E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9350021079176409	DESIGN	0.06499789208235895	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.5735647153531183	DESIGN	0.42643528464688174	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9563349847334828	DESIGN	0.04366501526651729	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9999992354390006	DESIGN	7.645609995136029E-7	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9978168070352502	DESIGN	0.0021831929647497996	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9457259965347053	DESIGN	0.05427400346529459	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.994193992574865	DESIGN	0.005806007425135068	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9997987821468328	DESIGN	2.012178531671953E-4	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.9636576392708038	DESIGN	0.0363423607291962	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.9189050550085486	WITHOUT_CLASSIFICATION	0.08109494499145144	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9999995257552223	DESIGN	4.742447776251279E-7	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9951929958611249	DESIGN	0.004807004138875178	WITHOUT_CLASSIFICATION
//TODO: inefficient	DESIGN	0.9845967318480301	DESIGN	0.015403268151969908	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.9168703441244189	WITHOUT_CLASSIFICATION	0.08312965587558105	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999998649884028	DESIGN	1.350115971200429E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999739190834074	DESIGN	2.608091659260475E-5	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999979037969544	DESIGN	2.096203045674142E-6	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999675556360513	DESIGN	3.244436394862754E-5	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9997673970462131	WITHOUT_CLASSIFICATION	2.3260295378698184E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.7216768521593834	WITHOUT_CLASSIFICATION	0.27832314784061646	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9704298544505888	WITHOUT_CLASSIFICATION	0.029570145549411175	DESIGN
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.8755996984720593	DESIGN	0.12440030152794068	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9980174926367509	DESIGN	0.0019825073632491167	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9833137843266685	DESIGN	0.01668621567333152	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9859544582523148	WITHOUT_CLASSIFICATION	0.014045541747685342	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9851113104134951	DESIGN	0.014888689586504886	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.915121824194349	WITHOUT_CLASSIFICATION	0.08487817580565107	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9409156130000835	WITHOUT_CLASSIFICATION	0.059084386999916555	DESIGN
//create an index on the key columns??	DESIGN	0.999933572760335	WITHOUT_CLASSIFICATION	6.642723966500199E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9999675409948603	DESIGN	3.245900513973479E-5	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.999933572760335	WITHOUT_CLASSIFICATION	6.642723966500199E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9999980850473787	DESIGN	1.914952621240792E-6	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.999965344930608	WITHOUT_CLASSIFICATION	3.465506939203018E-5	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9990450200462309	DESIGN	9.549799537690899E-4	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9997773929777856	WITHOUT_CLASSIFICATION	2.2260702221446488E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9944263540254954	DESIGN	0.005573645974504597	WITHOUT_CLASSIFICATION
// create an index on the key columns??	DESIGN	0.9999895187900617	WITHOUT_CLASSIFICATION	1.0481209938248189E-5	DESIGN
// todo : remove	DESIGN	0.9980789012840295	WITHOUT_CLASSIFICATION	0.0019210987159704893	DESIGN
// todo : remove	DESIGN	0.9980789012840295	WITHOUT_CLASSIFICATION	0.0019210987159704893	DESIGN
// todo : remove	DESIGN	0.9980789012840295	WITHOUT_CLASSIFICATION	0.0019210987159704893	DESIGN
// todo : throw exception?	DESIGN	0.9925541210364528	WITHOUT_CLASSIFICATION	0.007445878963547173	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.8208492143131672	WITHOUT_CLASSIFICATION	0.1791507856868329	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.5243613863384382	WITHOUT_CLASSIFICATION	0.4756386136615617	DESIGN
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999945012419971	DESIGN	5.498758002862841E-6	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.8377361932674737	DESIGN	0.16226380673252627	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999184241818699	DESIGN	8.157581813012385E-5	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9972055718255021	DESIGN	0.002794428174497974	WITHOUT_CLASSIFICATION
//TODO: copy/paste from recreate()	DESIGN	0.9988051710470982	DESIGN	0.0011948289529017978	WITHOUT_CLASSIFICATION
//should this interface extend PropertyMapping?	DESIGN	0.590850535816837	DESIGN	0.4091494641831631	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.999920640389579	WITHOUT_CLASSIFICATION	7.935961042114745E-5	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9986869444657219	DESIGN	0.0013130555342780227	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9809133416189595	DESIGN	0.019086658381040567	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999996923093927	DESIGN	3.076906072411381E-7	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9521189360172662	DESIGN	0.047881063982733806	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9449012885078334	DESIGN	0.055098711492166656	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.9953382277174994	WITHOUT_CLASSIFICATION	0.00466177228250056	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9287801366468392	WITHOUT_CLASSIFICATION	0.07121986335316069	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9795565247850813	WITHOUT_CLASSIFICATION	0.020443475214918627	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999955527881765	DESIGN	4.4472118234313115E-6	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9998898747148027	DESIGN	1.1012528519734258E-4	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9960023637767341	DESIGN	0.003997636223265838	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.8391519146674425	DESIGN	0.16084808533255757	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9994207426855157	DESIGN	5.792573144842174E-4	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.99658405164541	DESIGN	0.0034159483545899926	WITHOUT_CLASSIFICATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9977303704779398	WITHOUT_CLASSIFICATION	0.0022696295220602774	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9999372232847888	DESIGN	6.277671521120891E-5	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999690820951549	DESIGN	3.091790484511799E-5	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9994812876984045	DESIGN	5.187123015955741E-4	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.5248819173899804	WITHOUT_CLASSIFICATION	0.47511808261001964	DESIGN
// todo : this eventually needs to be removed	DESIGN	0.8791961267715028	WITHOUT_CLASSIFICATION	0.12080387322849728	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999624957627491	WITHOUT_CLASSIFICATION	3.7504237250791874E-5	DESIGN
//is this ok?	DESIGN	0.9985983964675617	WITHOUT_CLASSIFICATION	0.001401603532438396	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999976312504094	DESIGN	2.3687495905979565E-6	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9998855514684358	DESIGN	1.1444853156422108E-4	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9971815351572185	WITHOUT_CLASSIFICATION	0.002818464842781438	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999994609350709	DESIGN	5.390649292353192E-7	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9457259965347053	DESIGN	0.05427400346529459	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9498475428405078	DESIGN	0.05015245715949215	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999897646724025	DESIGN	1.023532759737186E-5	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9998876021583019	DESIGN	1.1239784169812533E-4	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9998565359581745	WITHOUT_CLASSIFICATION	1.4346404182553367E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9925907531812083	DESIGN	0.007409246818791723	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999401425280245	DESIGN	5.9857471975357356E-5	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9510549680608436	DESIGN	0.04894503193915642	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9999911137571812	DESIGN	8.886242818873594E-6	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.9847507071407869	DESIGN	0.015249292859213176	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9974215804730321	DESIGN	0.0025784195269679486	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9999294900769196	DESIGN	7.050992308040561E-5	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9968680503222367	DESIGN	0.0031319496777632125	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999792715691981	DESIGN	2.0728430801922563E-5	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.9928907644266474	WITHOUT_CLASSIFICATION	0.007109235573352724	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.8275298905717248	DESIGN	0.17247010942827515	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9999461467119306	DESIGN	5.38532880694826E-5	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.6870784091623275	DESIGN	0.31292159083767235	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999813474828	DESIGN	1.8652517223348936E-8	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999987982573131	DESIGN	1.2017426869723107E-6	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9999991786290903	WITHOUT_CLASSIFICATION	8.213709097306986E-7	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999999977978269	DESIGN	2.2021731425086274E-9	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.6491326375487338	DESIGN	0.35086736245126615	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999545991469505	DESIGN	4.5400853049630824E-5	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9995740596902508	WITHOUT_CLASSIFICATION	4.259403097491809E-4	DESIGN
// short cut check...	DESIGN	0.9997760184810599	WITHOUT_CLASSIFICATION	2.239815189399836E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9952929178875891	WITHOUT_CLASSIFICATION	0.004707082112410865	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9976455654763943	DESIGN	0.0023544345236056895	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9999994897002112	DESIGN	5.102997887175049E-7	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999933176195968	DESIGN	6.682380403320625E-6	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9988438308811068	DESIGN	0.0011561691188931168	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9985968002482776	WITHOUT_CLASSIFICATION	0.0014031997517224	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9999488875117516	DESIGN	5.111248824842444E-5	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9988600347178588	WITHOUT_CLASSIFICATION	0.0011399652821412433	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999996155460598	DESIGN	3.844539401812311E-7	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9625630510478969	WITHOUT_CLASSIFICATION	0.03743694895210307	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9999576216786629	DESIGN	4.2378321337192945E-5	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.941708827503838	WITHOUT_CLASSIFICATION	0.05829117249616208	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9994946399544385	WITHOUT_CLASSIFICATION	5.053600455615313E-4	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999829240337564	WITHOUT_CLASSIFICATION	1.707596624353152E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.7943330349859543	DESIGN	0.20566696501404563	WITHOUT_CLASSIFICATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.999700173794362	DESIGN	2.99826205637949E-4	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.997364181288957	DESIGN	0.0026358187110429037	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.8466598447719625	WITHOUT_CLASSIFICATION	0.15334015522803746	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.5341341991100367	DESIGN	0.4658658008899634	WITHOUT_CLASSIFICATION
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9980752290618212	DESIGN	0.001924770938178767	WITHOUT_CLASSIFICATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9952651830566646	DESIGN	0.004734816943335393	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999710355971462	DESIGN	2.8964402853886998E-5	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9994172065625844	WITHOUT_CLASSIFICATION	5.827934374155191E-4	DESIGN
// todo : remove	DESIGN	0.9980789012840295	WITHOUT_CLASSIFICATION	0.0019210987159704893	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9999895907471992	DESIGN	1.0409252800778676E-5	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9999327793266114	DESIGN	6.722067338862134E-5	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.986015637614153	DESIGN	0.01398436238584691	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9851596490324724	WITHOUT_CLASSIFICATION	0.014840350967527711	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9708505776848736	DESIGN	0.029149422315126388	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9999998955028463	DESIGN	1.0449715371916664E-7	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9992945930987994	WITHOUT_CLASSIFICATION	7.054069012005118E-4	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.8675827967519837	DESIGN	0.13241720324801637	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.8871088649664599	WITHOUT_CLASSIFICATION	0.11289113503354009	DESIGN
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9998337426818595	DESIGN	1.6625731814038516E-4	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9998518497277822	DESIGN	1.481502722178376E-4	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9910162386205122	WITHOUT_CLASSIFICATION	0.008983761379487852	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9999939425601244	DESIGN	6.057439875582603E-6	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9997718887944719	WITHOUT_CLASSIFICATION	2.2811120552800198E-4	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999960034915456	DESIGN	3.99650845437413E-6	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9341441684516234	DESIGN	0.06585583154837649	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999977791829124	DESIGN	2.2208170875200687E-6	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.878356292064122	WITHOUT_CLASSIFICATION	0.121643707935878	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9792611082741443	WITHOUT_CLASSIFICATION	0.020738891725855725	DESIGN
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9999980062922861	DESIGN	1.993707713941977E-6	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9996799682885988	DESIGN	3.200317114011398E-4	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999679189772	DESIGN	3.208102274534016E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999979927848766	DESIGN	2.0072151234364807E-6	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9887937976908883	DESIGN	0.011206202309111766	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9923927870115401	WITHOUT_CLASSIFICATION	0.007607212988459831	DESIGN
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9938935252016577	DESIGN	0.0061064747983422185	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9984591686483927	WITHOUT_CLASSIFICATION	0.0015408313516072822	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999974705422002	WITHOUT_CLASSIFICATION	2.5294577998112683E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999996044548711	DESIGN	3.9554512878280755E-7	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9927046476226471	WITHOUT_CLASSIFICATION	0.007295352377352913	DESIGN
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9612463114385013	WITHOUT_CLASSIFICATION	0.03875368856149876	DESIGN
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9996731318257072	WITHOUT_CLASSIFICATION	3.268681742928398E-4	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9969695895278985	DESIGN	0.0030304104721015058	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9384405315088292	DESIGN	0.06155946849117075	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999690820951549	DESIGN	3.091790484511799E-5	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9921621453434337	DESIGN	0.007837854656566277	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999973129973392	DESIGN	2.6870026608908383E-6	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8791961267715028	WITHOUT_CLASSIFICATION	0.12080387322849728	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9998855514684358	DESIGN	1.1444853156422108E-4	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9662737522560705	DESIGN	0.033726247743929606	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985657924531106	DESIGN	0.0014342075468893709	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985657924531106	DESIGN	0.0014342075468893709	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9985657924531106	DESIGN	0.0014342075468893709	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9980887434942208	DESIGN	0.0019112565057791703	WITHOUT_CLASSIFICATION
