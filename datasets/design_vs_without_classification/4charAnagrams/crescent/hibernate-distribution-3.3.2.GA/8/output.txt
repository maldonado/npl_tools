//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999356104324335	WITHOUT_CLASSIFICATION	6.438956756653593E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999638362795584	WITHOUT_CLASSIFICATION	3.6163720441466175E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999638362795584	WITHOUT_CLASSIFICATION	3.6163720441466175E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9989540309761112	WITHOUT_CLASSIFICATION	0.0010459690238887028	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922863728481	WITHOUT_CLASSIFICATION	7.713627151851466E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999998235617804	WITHOUT_CLASSIFICATION	1.7643821955294987E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999969290494888	WITHOUT_CLASSIFICATION	3.070950511209871E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999969290494888	WITHOUT_CLASSIFICATION	3.070950511209871E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999989303737672	WITHOUT_CLASSIFICATION	1.0696262327516411E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999698411824	WITHOUT_CLASSIFICATION	3.0158817631631724E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999999558976258	WITHOUT_CLASSIFICATION	4.4102374201992035E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999803430419265	WITHOUT_CLASSIFICATION	1.965695807341545E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999954341497748	WITHOUT_CLASSIFICATION	4.565850225196515E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999954341497748	WITHOUT_CLASSIFICATION	4.565850225196515E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999982844109317	WITHOUT_CLASSIFICATION	1.715589068162378E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999874512370209	WITHOUT_CLASSIFICATION	1.2548762979107517E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996458415106219	WITHOUT_CLASSIFICATION	3.5415848937805255E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999198965851797	WITHOUT_CLASSIFICATION	8.01034148204014E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997957224691	WITHOUT_CLASSIFICATION	2.0427753078844163E-7	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999827430663072	WITHOUT_CLASSIFICATION	1.7256933692757386E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999765447457538	WITHOUT_CLASSIFICATION	2.3455254246153653E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999986445431517	WITHOUT_CLASSIFICATION	1.355456848300192E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999799594030879	WITHOUT_CLASSIFICATION	2.0040596911994098E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9401895062129785	WITHOUT_CLASSIFICATION	0.05981049378702161	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999814725410044	WITHOUT_CLASSIFICATION	1.8527458995548916E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999796256707741	WITHOUT_CLASSIFICATION	2.0374329225867802E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999993389880484	WITHOUT_CLASSIFICATION	6.610119515919736E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599444859549	WITHOUT_CLASSIFICATION	4.005551404505995E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599444859549	WITHOUT_CLASSIFICATION	4.005551404505995E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999696004812486	WITHOUT_CLASSIFICATION	3.0399518751321635E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999948000009421	WITHOUT_CLASSIFICATION	5.199999057995067E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999996958775853	WITHOUT_CLASSIFICATION	3.0412241473787673E-7	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999747282735	WITHOUT_CLASSIFICATION	2.527172656056684E-8	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9662899825893215	DESIGN	0.03371001741067852	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8926455808490883	DESIGN	0.10735441915091164	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8926455808490883	DESIGN	0.10735441915091164	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999999732643	WITHOUT_CLASSIFICATION	2.6735691553797527E-10	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999851106024027	WITHOUT_CLASSIFICATION	1.4889397597359788E-5	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999984305068	WITHOUT_CLASSIFICATION	1.5694931637526936E-9	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997111249488659	WITHOUT_CLASSIFICATION	2.8887505113408526E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999940436005262	WITHOUT_CLASSIFICATION	5.956399473734518E-6	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989683078047	WITHOUT_CLASSIFICATION	1.0316921952986811E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950931136332	WITHOUT_CLASSIFICATION	4.906886366707487E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999902848030404	WITHOUT_CLASSIFICATION	9.715196959596815E-6	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999806384305394	WITHOUT_CLASSIFICATION	1.9361569460532653E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999858101074421	WITHOUT_CLASSIFICATION	1.418989255789289E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.999975110645525	WITHOUT_CLASSIFICATION	2.4889354474990012E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999806384305394	WITHOUT_CLASSIFICATION	1.9361569460532653E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.999975110645525	WITHOUT_CLASSIFICATION	2.4889354474990012E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999999759669024	WITHOUT_CLASSIFICATION	2.4033097600397754E-7	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9548582379912176	DESIGN	0.04514176200878237	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999999309032093	WITHOUT_CLASSIFICATION	6.909679067883358E-8	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999905369591688	WITHOUT_CLASSIFICATION	9.463040831272344E-6	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999370150925574	WITHOUT_CLASSIFICATION	6.298490744268567E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999757945003142	WITHOUT_CLASSIFICATION	2.4205499685884375E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999721092808599	WITHOUT_CLASSIFICATION	2.7890719140102708E-5	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9994618767403709	WITHOUT_CLASSIFICATION	5.381232596290786E-4	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999987101227	WITHOUT_CLASSIFICATION	1.2898773754320415E-9	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997495898222092	WITHOUT_CLASSIFICATION	2.504101777909079E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999756240927115	WITHOUT_CLASSIFICATION	2.4375907288614317E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999975118927976	WITHOUT_CLASSIFICATION	2.4881072024028167E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999672079805	WITHOUT_CLASSIFICATION	3.279201954833421E-8	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999520912834843	WITHOUT_CLASSIFICATION	4.790871651569643E-5	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9753528862987052	WITHOUT_CLASSIFICATION	0.024647113701294777	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9989830086201413	WITHOUT_CLASSIFICATION	0.0010169913798587324	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.999985206514494	WITHOUT_CLASSIFICATION	1.4793485506037555E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999967043727077	WITHOUT_CLASSIFICATION	3.295627292257152E-6	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999392750575	WITHOUT_CLASSIFICATION	6.072494258697346E-8	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999930216176	WITHOUT_CLASSIFICATION	6.978382432594371E-9	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999942793238656	WITHOUT_CLASSIFICATION	5.720676134378446E-6	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999999748406032	WITHOUT_CLASSIFICATION	2.515939680120836E-7	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999909480636834	WITHOUT_CLASSIFICATION	9.051936316617962E-6	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999995012610818	WITHOUT_CLASSIFICATION	4.987389182061366E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.6815243825713102	WITHOUT_CLASSIFICATION	0.31847561742868974	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999992452451725	WITHOUT_CLASSIFICATION	7.547548274671969E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999909467464	WITHOUT_CLASSIFICATION	9.053253484265051E-9	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.7019390110754219	DESIGN	0.29806098892457816	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999768803186	WITHOUT_CLASSIFICATION	2.3119681364753323E-8	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999940265332892	WITHOUT_CLASSIFICATION	5.973466710732484E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999999071784	WITHOUT_CLASSIFICATION	9.282157311372675E-11	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999967923148032	WITHOUT_CLASSIFICATION	3.2076851967243566E-6	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9996113172335839	WITHOUT_CLASSIFICATION	3.8868276641615683E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999994484546996	WITHOUT_CLASSIFICATION	5.515453003755392E-7	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999915106843	WITHOUT_CLASSIFICATION	8.489315591904354E-9	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999996448377	WITHOUT_CLASSIFICATION	3.5516236662322773E-10	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999994484546996	WITHOUT_CLASSIFICATION	5.515453003755392E-7	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999995854607	WITHOUT_CLASSIFICATION	4.145392949968767E-10	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999847513692	WITHOUT_CLASSIFICATION	1.5248630741086997E-8	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999987554583639	WITHOUT_CLASSIFICATION	1.2445416360530242E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998866536481	WITHOUT_CLASSIFICATION	1.1334635193202663E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999848208276845	WITHOUT_CLASSIFICATION	1.517917231546626E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995671950972	WITHOUT_CLASSIFICATION	4.3280490289188546E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995671950972	WITHOUT_CLASSIFICATION	4.3280490289188546E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999871278399625	WITHOUT_CLASSIFICATION	1.2872160037479621E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999000544335407	WITHOUT_CLASSIFICATION	9.994556645927145E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999812020275667	WITHOUT_CLASSIFICATION	1.879797243328783E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999832956628393	WITHOUT_CLASSIFICATION	1.6704337160730092E-5	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.999999588093372	WITHOUT_CLASSIFICATION	4.11906628024907E-7	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999987206735205	WITHOUT_CLASSIFICATION	1.279326479547526E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999999944225428	WITHOUT_CLASSIFICATION	5.577457204078117E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999490602820028	WITHOUT_CLASSIFICATION	5.0939717997128184E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999290157805875	WITHOUT_CLASSIFICATION	7.098421941252451E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999814944205	WITHOUT_CLASSIFICATION	1.85055795095439E-8	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999990111981446	WITHOUT_CLASSIFICATION	9.888018554132922E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999990111981446	WITHOUT_CLASSIFICATION	9.888018554132922E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999957327762	WITHOUT_CLASSIFICATION	4.267223826167237E-9	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999948530119	WITHOUT_CLASSIFICATION	5.146988090236173E-9	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9996936331814046	WITHOUT_CLASSIFICATION	3.063668185953979E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999990111981446	WITHOUT_CLASSIFICATION	9.888018554132922E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999957327762	WITHOUT_CLASSIFICATION	4.267223826167237E-9	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999957327762	WITHOUT_CLASSIFICATION	4.267223826167237E-9	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999593706800546	WITHOUT_CLASSIFICATION	4.0629319945381874E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998778324531187	WITHOUT_CLASSIFICATION	1.221675468813007E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999992119458	WITHOUT_CLASSIFICATION	7.880541418194181E-10	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999968254329339	WITHOUT_CLASSIFICATION	3.174567066137943E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999800375836686	WITHOUT_CLASSIFICATION	1.9962416331396634E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999800375836686	WITHOUT_CLASSIFICATION	1.9962416331396634E-5	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999614881393	WITHOUT_CLASSIFICATION	3.8511860704902456E-8	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998575295040998	WITHOUT_CLASSIFICATION	1.4247049590013555E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999995362137047	WITHOUT_CLASSIFICATION	4.6378629523233236E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999947489705532	WITHOUT_CLASSIFICATION	5.251029446767073E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999947489705532	WITHOUT_CLASSIFICATION	5.251029446767073E-6	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999907350760129	WITHOUT_CLASSIFICATION	9.264923987056583E-6	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999458128805729	WITHOUT_CLASSIFICATION	5.4187119427063455E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999123833049939	WITHOUT_CLASSIFICATION	8.761669500611877E-5	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999676223506457	WITHOUT_CLASSIFICATION	3.237764935432473E-5	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999781566443124	WITHOUT_CLASSIFICATION	2.184335568764282E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999996822508476	WITHOUT_CLASSIFICATION	3.1774915249792534E-7	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999990614977342	WITHOUT_CLASSIFICATION	9.385022656960926E-7	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998726246737368	WITHOUT_CLASSIFICATION	1.273753262632758E-4	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998695901928641	WITHOUT_CLASSIFICATION	1.3040980713591909E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999123833049939	WITHOUT_CLASSIFICATION	8.761669500611877E-5	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9988339408772886	WITHOUT_CLASSIFICATION	0.0011660591227113614	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.999919570641397	WITHOUT_CLASSIFICATION	8.042935860301569E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.999919570641397	WITHOUT_CLASSIFICATION	8.042935860301569E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9995691331887285	WITHOUT_CLASSIFICATION	4.308668112714691E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999415090183011	WITHOUT_CLASSIFICATION	5.849098169893687E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9880071658942104	WITHOUT_CLASSIFICATION	0.011992834105789512	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999939869300228	WITHOUT_CLASSIFICATION	6.0130699771960425E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997538992396001	WITHOUT_CLASSIFICATION	2.461007603998469E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.990323708370857	WITHOUT_CLASSIFICATION	0.009676291629142995	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998290728239118	WITHOUT_CLASSIFICATION	1.7092717608820462E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999984458984201	WITHOUT_CLASSIFICATION	1.5541015798362112E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999852859802	WITHOUT_CLASSIFICATION	1.471401967687188E-8	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999852859802	WITHOUT_CLASSIFICATION	1.471401967687188E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999909798226935	WITHOUT_CLASSIFICATION	9.020177306594264E-6	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999356104324335	WITHOUT_CLASSIFICATION	6.438956756653593E-5	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999997074788598	WITHOUT_CLASSIFICATION	2.925211401661344E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999975218774314	WITHOUT_CLASSIFICATION	2.4781225685425125E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999638362795584	WITHOUT_CLASSIFICATION	3.6163720441466175E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999997553875764	WITHOUT_CLASSIFICATION	2.4461242366376606E-7	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999799028583862	WITHOUT_CLASSIFICATION	2.009714161372578E-5	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999991682604941	WITHOUT_CLASSIFICATION	8.317395058735295E-7	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999999694831043	WITHOUT_CLASSIFICATION	3.051689566231604E-8	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999992875487722	WITHOUT_CLASSIFICATION	7.124512277577908E-7	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999591999696291	WITHOUT_CLASSIFICATION	4.080003037098892E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999710352518177	WITHOUT_CLASSIFICATION	2.8964748182168918E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999999549026618	WITHOUT_CLASSIFICATION	4.509733826526924E-8	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922863728481	WITHOUT_CLASSIFICATION	7.713627151851466E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999990116655925	WITHOUT_CLASSIFICATION	9.88334407494907E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999990116655925	WITHOUT_CLASSIFICATION	9.88334407494907E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999993832750873	WITHOUT_CLASSIFICATION	6.167249127956226E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.99584323346341	WITHOUT_CLASSIFICATION	0.0041567665365900555	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999914090883378	WITHOUT_CLASSIFICATION	8.590911662232013E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999994752826749	WITHOUT_CLASSIFICATION	5.247173252207637E-7	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999995774667931	WITHOUT_CLASSIFICATION	4.2253320682837514E-7	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999790228754327	WITHOUT_CLASSIFICATION	2.0977124567223042E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999969290494888	WITHOUT_CLASSIFICATION	3.070950511209871E-6	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9998522281212829	WITHOUT_CLASSIFICATION	1.477718787171698E-4	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999986186763608	WITHOUT_CLASSIFICATION	1.3813236392965845E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999999827834614	WITHOUT_CLASSIFICATION	1.7216538596062187E-7	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999999897921276	WITHOUT_CLASSIFICATION	1.0207872461007586E-8	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999801991640331	WITHOUT_CLASSIFICATION	1.9800835966883062E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999977228799094	WITHOUT_CLASSIFICATION	2.2771200904747272E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.999993611409636	WITHOUT_CLASSIFICATION	6.388590363997158E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999974656671	WITHOUT_CLASSIFICATION	2.534332896491552E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999985000963661	WITHOUT_CLASSIFICATION	1.499903633867452E-6	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999966356382947	WITHOUT_CLASSIFICATION	3.3643617053507418E-6	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999419389814488	WITHOUT_CLASSIFICATION	5.80610185511959E-4	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999884935332067	WITHOUT_CLASSIFICATION	1.1506466793338053E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999717146692	WITHOUT_CLASSIFICATION	2.8285330805589274E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999638362795584	WITHOUT_CLASSIFICATION	3.6163720441466175E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999638362795584	WITHOUT_CLASSIFICATION	3.6163720441466175E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999710352518177	WITHOUT_CLASSIFICATION	2.8964748182168918E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999990116655925	WITHOUT_CLASSIFICATION	9.88334407494907E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.999993611409636	WITHOUT_CLASSIFICATION	6.388590363997158E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999989303737672	WITHOUT_CLASSIFICATION	1.0696262327516411E-6	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999950265483287	WITHOUT_CLASSIFICATION	4.97345167131896E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999890473349642	WITHOUT_CLASSIFICATION	1.0952665035829108E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999951101105136	WITHOUT_CLASSIFICATION	4.889889486445687E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999998637457247	WITHOUT_CLASSIFICATION	1.3625427541061514E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999111192925	WITHOUT_CLASSIFICATION	8.888070745483034E-8	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999989672246892	WITHOUT_CLASSIFICATION	1.0327753108342846E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999969347543891	WITHOUT_CLASSIFICATION	3.0652456108524336E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999959362681133	WITHOUT_CLASSIFICATION	4.0637318866441605E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999338984567864	WITHOUT_CLASSIFICATION	6.610154321356228E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999963703146844	WITHOUT_CLASSIFICATION	3.629685315600819E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999963703146844	WITHOUT_CLASSIFICATION	3.629685315600819E-6	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998138038843	WITHOUT_CLASSIFICATION	1.8619611574380637E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999800894201	WITHOUT_CLASSIFICATION	1.991057988470115E-8	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9985758925198517	WITHOUT_CLASSIFICATION	0.00142410748014826	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999961842232639	WITHOUT_CLASSIFICATION	3.81577673611276E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999998952049793	WITHOUT_CLASSIFICATION	1.0479502072450424E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999993973949916	WITHOUT_CLASSIFICATION	6.026050083991233E-7	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999895221919236	WITHOUT_CLASSIFICATION	1.0477808076527375E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999698411824	WITHOUT_CLASSIFICATION	3.0158817631631724E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999988222858915	WITHOUT_CLASSIFICATION	1.1777141084844998E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997008891925	WITHOUT_CLASSIFICATION	2.991108074021151E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999997008891925	WITHOUT_CLASSIFICATION	2.991108074021151E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999198666076	WITHOUT_CLASSIFICATION	8.013339232841826E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999978285131209	WITHOUT_CLASSIFICATION	2.171486879012368E-6	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999243004477	WITHOUT_CLASSIFICATION	7.56995522445446E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999995476011475	WITHOUT_CLASSIFICATION	4.523988524414637E-7	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999749357841736	WITHOUT_CLASSIFICATION	2.506421582633577E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999638362795584	WITHOUT_CLASSIFICATION	3.6163720441466175E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999710352518177	WITHOUT_CLASSIFICATION	2.8964748182168918E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999922863728481	WITHOUT_CLASSIFICATION	7.713627151851466E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.999993611409636	WITHOUT_CLASSIFICATION	6.388590363997158E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.999993611409636	WITHOUT_CLASSIFICATION	6.388590363997158E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999627338333	WITHOUT_CLASSIFICATION	3.7266166677180346E-8	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999627338333	WITHOUT_CLASSIFICATION	3.7266166677180346E-8	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999998008003024	WITHOUT_CLASSIFICATION	1.9919969760706487E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999994906053937	WITHOUT_CLASSIFICATION	5.093946062866588E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999994906053937	WITHOUT_CLASSIFICATION	5.093946062866588E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999905051020315	WITHOUT_CLASSIFICATION	9.494897968497063E-6	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.999982678598493	WITHOUT_CLASSIFICATION	1.7321401507029822E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999997184044728	WITHOUT_CLASSIFICATION	2.815955271776357E-7	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999996149877166	WITHOUT_CLASSIFICATION	3.850122832927157E-7	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999933390034635	WITHOUT_CLASSIFICATION	6.660996536454506E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999803430419265	WITHOUT_CLASSIFICATION	1.965695807341545E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999803430419265	WITHOUT_CLASSIFICATION	1.965695807341545E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999240199161173	WITHOUT_CLASSIFICATION	7.598008388265756E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999944485469258	WITHOUT_CLASSIFICATION	5.551453074261366E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999997133704182	WITHOUT_CLASSIFICATION	2.8662958193928165E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999871455569838	WITHOUT_CLASSIFICATION	1.2854443016289883E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999997274126895	WITHOUT_CLASSIFICATION	2.7258731052497283E-7	DESIGN
// short	WITHOUT_CLASSIFICATION	0.999918475728865	WITHOUT_CLASSIFICATION	8.152427113490115E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999954341497748	WITHOUT_CLASSIFICATION	4.565850225196515E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999986447649505	WITHOUT_CLASSIFICATION	1.355235049425626E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999986447649505	WITHOUT_CLASSIFICATION	1.355235049425626E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999982844109317	WITHOUT_CLASSIFICATION	1.715589068162378E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999982844109317	WITHOUT_CLASSIFICATION	1.715589068162378E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999948263363214	WITHOUT_CLASSIFICATION	5.173663678599254E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999948263363214	WITHOUT_CLASSIFICATION	5.173663678599254E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999968183215	WITHOUT_CLASSIFICATION	3.1816784292696326E-9	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999968183215	WITHOUT_CLASSIFICATION	3.1816784292696326E-9	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999803430419265	WITHOUT_CLASSIFICATION	1.965695807341545E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999954341497748	WITHOUT_CLASSIFICATION	4.565850225196515E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999986447649505	WITHOUT_CLASSIFICATION	1.355235049425626E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999986447649505	WITHOUT_CLASSIFICATION	1.355235049425626E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999982844109317	WITHOUT_CLASSIFICATION	1.715589068162378E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999948263363214	WITHOUT_CLASSIFICATION	5.173663678599254E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999948263363214	WITHOUT_CLASSIFICATION	5.173663678599254E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999968183215	WITHOUT_CLASSIFICATION	3.1816784292696326E-9	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997102237124501	WITHOUT_CLASSIFICATION	2.897762875499442E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999473492455645	WITHOUT_CLASSIFICATION	5.265075443546822E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9999383284373033	WITHOUT_CLASSIFICATION	6.167156269665427E-5	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999997168745307	WITHOUT_CLASSIFICATION	2.831254693550705E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9997943315792011	WITHOUT_CLASSIFICATION	2.0566842079897826E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999581255703487	WITHOUT_CLASSIFICATION	4.18744296513271E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9887253736266862	WITHOUT_CLASSIFICATION	0.011274626373313801	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.6008558909326163	DESIGN	0.39914410906738385	WITHOUT_CLASSIFICATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999920917453138	WITHOUT_CLASSIFICATION	7.908254686107652E-6	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999963865417	WITHOUT_CLASSIFICATION	3.6134583902144206E-9	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999952687454	WITHOUT_CLASSIFICATION	4.7312545875524E-9	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.999999717384969	WITHOUT_CLASSIFICATION	2.8261503105962424E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999871278399625	WITHOUT_CLASSIFICATION	1.2872160037479621E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999581255703487	WITHOUT_CLASSIFICATION	4.18744296513271E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999553581938426	WITHOUT_CLASSIFICATION	4.4641806157316766E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999553581938426	WITHOUT_CLASSIFICATION	4.4641806157316766E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.999974410550637	WITHOUT_CLASSIFICATION	2.558944936303955E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998466492549664	WITHOUT_CLASSIFICATION	1.5335074503362243E-4	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9998466492549664	WITHOUT_CLASSIFICATION	1.5335074503362243E-4	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999948945225662	WITHOUT_CLASSIFICATION	5.105477433785555E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9998476298392657	WITHOUT_CLASSIFICATION	1.5237016073427632E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999999963803178	WITHOUT_CLASSIFICATION	3.619682200853035E-8	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999658317206092	WITHOUT_CLASSIFICATION	3.416827939078395E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999658317206092	WITHOUT_CLASSIFICATION	3.416827939078395E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999997957224691	WITHOUT_CLASSIFICATION	2.0427753078844163E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999972821290646	WITHOUT_CLASSIFICATION	2.717870935406364E-5	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999972821290646	WITHOUT_CLASSIFICATION	2.717870935406364E-5	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999977976694407	WITHOUT_CLASSIFICATION	2.202330559320636E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999925553169721	WITHOUT_CLASSIFICATION	7.444683028035216E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999946864874748	WITHOUT_CLASSIFICATION	5.313512525170872E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999974247251563	WITHOUT_CLASSIFICATION	2.575274843790984E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999904976822666	WITHOUT_CLASSIFICATION	9.502317733394477E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999920264114583	WITHOUT_CLASSIFICATION	7.9735885416794E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999827430663072	WITHOUT_CLASSIFICATION	1.7256933692757386E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999726177233739	WITHOUT_CLASSIFICATION	2.73822766261218E-5	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9890458299661009	WITHOUT_CLASSIFICATION	0.010954170033899145	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999951929450177	WITHOUT_CLASSIFICATION	4.807054982321411E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999972769815875	WITHOUT_CLASSIFICATION	2.7230184125719275E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999799594030879	WITHOUT_CLASSIFICATION	2.0040596911994098E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999976719627068	WITHOUT_CLASSIFICATION	2.3280372932900013E-6	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999952840458424	WITHOUT_CLASSIFICATION	4.715954157621839E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999981191371	WITHOUT_CLASSIFICATION	1.880862819479297E-9	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999799594030879	WITHOUT_CLASSIFICATION	2.0040596911994098E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999997813609143	WITHOUT_CLASSIFICATION	2.186390858857779E-7	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999994816107485	WITHOUT_CLASSIFICATION	5.183892514272127E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999825733373153	WITHOUT_CLASSIFICATION	1.742666268464052E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999864226379668	WITHOUT_CLASSIFICATION	1.3577362033242368E-5	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.999982627955113	WITHOUT_CLASSIFICATION	1.7372044887018113E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999907458923857	WITHOUT_CLASSIFICATION	9.254107614222309E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999956285083564	WITHOUT_CLASSIFICATION	4.371491643599217E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999796256707741	WITHOUT_CLASSIFICATION	2.0374329225867802E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999705585002873	WITHOUT_CLASSIFICATION	2.944149971265756E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999993389880484	WITHOUT_CLASSIFICATION	6.610119515919736E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999967441800836	WITHOUT_CLASSIFICATION	3.255819916399689E-6	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999991331632476	WITHOUT_CLASSIFICATION	8.668367523700309E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999727271006911	WITHOUT_CLASSIFICATION	2.7272899308958014E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999827430663072	WITHOUT_CLASSIFICATION	1.7256933692757386E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999705585002873	WITHOUT_CLASSIFICATION	2.944149971265756E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999967441800836	WITHOUT_CLASSIFICATION	3.255819916399689E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999727271006911	WITHOUT_CLASSIFICATION	2.7272899308958014E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999576221672	WITHOUT_CLASSIFICATION	4.23778326807567E-8	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999952773792262	WITHOUT_CLASSIFICATION	4.722620773814157E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999894426865	WITHOUT_CLASSIFICATION	1.0557313342451057E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599444859549	WITHOUT_CLASSIFICATION	4.005551404505995E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999976577641511	WITHOUT_CLASSIFICATION	2.34223584903003E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999999226858564	WITHOUT_CLASSIFICATION	7.73141435969627E-8	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999928844707128	WITHOUT_CLASSIFICATION	7.115529287212996E-6	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999899246250751	WITHOUT_CLASSIFICATION	1.0075374924892092E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999981873072925	WITHOUT_CLASSIFICATION	1.8126927074438054E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999079363	WITHOUT_CLASSIFICATION	9.20637307101731E-11	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999957894885587	WITHOUT_CLASSIFICATION	4.210511441330285E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998953625216984	WITHOUT_CLASSIFICATION	1.0463747830156895E-4	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999997842766	WITHOUT_CLASSIFICATION	2.157234005725932E-10	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999976020581977	WITHOUT_CLASSIFICATION	2.3979418024136966E-6	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999930599637156	WITHOUT_CLASSIFICATION	6.9400362844439236E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999760328245009	WITHOUT_CLASSIFICATION	2.3967175499080816E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999948000009421	WITHOUT_CLASSIFICATION	5.199999057995067E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999995263584137	WITHOUT_CLASSIFICATION	4.7364158630698277E-7	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999705923505116	WITHOUT_CLASSIFICATION	2.940764948847531E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999705585002873	WITHOUT_CLASSIFICATION	2.944149971265756E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999988556977635	WITHOUT_CLASSIFICATION	1.1443022364682276E-6	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999995885072216	WITHOUT_CLASSIFICATION	4.114927784556095E-7	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999748937399158	WITHOUT_CLASSIFICATION	2.510626008417212E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999965140172261	WITHOUT_CLASSIFICATION	3.485982773883537E-6	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999973709678974	WITHOUT_CLASSIFICATION	2.6290321025173994E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.99998167993391	WITHOUT_CLASSIFICATION	1.8320066090052255E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999983456221	WITHOUT_CLASSIFICATION	1.6543778249833153E-9	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999997800313563	WITHOUT_CLASSIFICATION	2.1996864372123117E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999612292412421	WITHOUT_CLASSIFICATION	3.877075875791343E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999823596868597	WITHOUT_CLASSIFICATION	1.7640313140278993E-5	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999998824059558	WITHOUT_CLASSIFICATION	1.1759404420252568E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999992782741481	WITHOUT_CLASSIFICATION	7.217258519523582E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.999814377138141	WITHOUT_CLASSIFICATION	1.8562286185905565E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999999747282735	WITHOUT_CLASSIFICATION	2.527172656056684E-8	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999988617282435	WITHOUT_CLASSIFICATION	1.138271756503078E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999859681391036	WITHOUT_CLASSIFICATION	1.4031860896427076E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999749248513891	WITHOUT_CLASSIFICATION	2.5075148611015495E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.99999811068225	WITHOUT_CLASSIFICATION	1.8893177499464816E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.999998805931549	WITHOUT_CLASSIFICATION	1.1940684509744456E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999547794557515	WITHOUT_CLASSIFICATION	4.5220544248488545E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999977684664	WITHOUT_CLASSIFICATION	2.2315335211223795E-9	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999969527398	WITHOUT_CLASSIFICATION	3.0472601298794335E-9	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5368943831138828	WITHOUT_CLASSIFICATION	0.463105616886117	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9997334834111952	WITHOUT_CLASSIFICATION	2.665165888047792E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999103509257764	WITHOUT_CLASSIFICATION	8.96490742235889E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999103509257764	WITHOUT_CLASSIFICATION	8.96490742235889E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999872788646385	WITHOUT_CLASSIFICATION	1.2721135361553782E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999989630833104	WITHOUT_CLASSIFICATION	1.0369166897303286E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999996081307204	WITHOUT_CLASSIFICATION	3.918692796631883E-7	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9997009132771527	WITHOUT_CLASSIFICATION	2.990867228472355E-4	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9993809872560676	WITHOUT_CLASSIFICATION	6.19012743932366E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.99532985187391	WITHOUT_CLASSIFICATION	0.004670148126089952	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998623566419543	WITHOUT_CLASSIFICATION	1.3764335804573505E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999927873112812	WITHOUT_CLASSIFICATION	7.2126887187481E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998013366355204	WITHOUT_CLASSIFICATION	1.986633644796659E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9998126309272731	WITHOUT_CLASSIFICATION	1.873690727269106E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999887828667783	WITHOUT_CLASSIFICATION	1.121713322184379E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999919280049101	WITHOUT_CLASSIFICATION	8.071995089928783E-6	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9684758700297229	WITHOUT_CLASSIFICATION	0.03152412997027709	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999999989106251	WITHOUT_CLASSIFICATION	1.0893749606060966E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999467567841999	WITHOUT_CLASSIFICATION	5.324321580014571E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998944170985834	WITHOUT_CLASSIFICATION	1.055829014167111E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999787961670701	WITHOUT_CLASSIFICATION	2.1203832929895784E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9998893107429917	WITHOUT_CLASSIFICATION	1.1068925700823426E-4	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9487519449627867	WITHOUT_CLASSIFICATION	0.05124805503721335	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9946535587253481	WITHOUT_CLASSIFICATION	0.005346441274651866	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999537092403962	WITHOUT_CLASSIFICATION	4.629075960372665E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999537092403962	WITHOUT_CLASSIFICATION	4.629075960372665E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9997873514954907	WITHOUT_CLASSIFICATION	2.1264850450928986E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9997873514954907	WITHOUT_CLASSIFICATION	2.1264850450928986E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5368943831138828	WITHOUT_CLASSIFICATION	0.463105616886117	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999967229369371	WITHOUT_CLASSIFICATION	3.2770630628565307E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993682692261288	WITHOUT_CLASSIFICATION	6.317307738712487E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999006825173	WITHOUT_CLASSIFICATION	9.93174827094158E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999909798226935	WITHOUT_CLASSIFICATION	9.020177306594264E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993682692261288	WITHOUT_CLASSIFICATION	6.317307738712487E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999006825173	WITHOUT_CLASSIFICATION	9.93174827094158E-8	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999705816672	WITHOUT_CLASSIFICATION	2.9418332800074153E-7	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999999814540481	WITHOUT_CLASSIFICATION	1.8545951892192516E-8	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999478275589063	WITHOUT_CLASSIFICATION	5.217244109360514E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999557401354965	WITHOUT_CLASSIFICATION	4.425986450347119E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9956105306459586	WITHOUT_CLASSIFICATION	0.004389469354041431	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9991257852258963	WITHOUT_CLASSIFICATION	8.742147741036243E-4	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999991822558907	WITHOUT_CLASSIFICATION	8.17744109231033E-7	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999822496038777	WITHOUT_CLASSIFICATION	1.7750396122323475E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9978600452397801	WITHOUT_CLASSIFICATION	0.0021399547602199494	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999990914107	WITHOUT_CLASSIFICATION	9.085892843025837E-10	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999999963466299	WITHOUT_CLASSIFICATION	3.653370086927042E-8	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999706474366351	WITHOUT_CLASSIFICATION	2.935256336495862E-5	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999996441585667	WITHOUT_CLASSIFICATION	3.558414333062984E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999841783554417	WITHOUT_CLASSIFICATION	1.582164455821079E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999909798226935	WITHOUT_CLASSIFICATION	9.020177306594264E-6	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999699697588618	WITHOUT_CLASSIFICATION	3.0030241138265706E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994508011993735	WITHOUT_CLASSIFICATION	5.491988006265013E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994508011993735	WITHOUT_CLASSIFICATION	5.491988006265013E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9951417363715559	WITHOUT_CLASSIFICATION	0.004858263628444112	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999705816672	WITHOUT_CLASSIFICATION	2.9418332800074153E-7	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9985648585532875	WITHOUT_CLASSIFICATION	0.0014351414467124813	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9803819920378095	DESIGN	0.019618007962190542	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9873191666485002	WITHOUT_CLASSIFICATION	0.012680833351499717	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999448869612	WITHOUT_CLASSIFICATION	5.511303893886574E-8	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998625804219292	WITHOUT_CLASSIFICATION	1.3741957807072487E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999705816672	WITHOUT_CLASSIFICATION	2.9418332800074153E-7	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999448869612	WITHOUT_CLASSIFICATION	5.511303893886574E-8	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9998625804219292	WITHOUT_CLASSIFICATION	1.3741957807072487E-4	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9990479216478811	WITHOUT_CLASSIFICATION	9.5207835211882E-4	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999996504170905	WITHOUT_CLASSIFICATION	3.495829095483605E-7	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999999493437682	WITHOUT_CLASSIFICATION	5.065623179859897E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999705816672	WITHOUT_CLASSIFICATION	2.9418332800074153E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999999705816672	WITHOUT_CLASSIFICATION	2.9418332800074153E-7	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999981340411294	WITHOUT_CLASSIFICATION	1.8659588705230076E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999960379235046	WITHOUT_CLASSIFICATION	3.96207649544209E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9996822595069662	WITHOUT_CLASSIFICATION	3.1774049303375857E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999939350455552	WITHOUT_CLASSIFICATION	6.064954444719852E-6	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.999999484520551	WITHOUT_CLASSIFICATION	5.154794488956936E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999999999654545	WITHOUT_CLASSIFICATION	3.4545490745724094E-10	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999699933642	WITHOUT_CLASSIFICATION	3.000663579627291E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9993272537305131	WITHOUT_CLASSIFICATION	6.72746269486856E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999987398946858	WITHOUT_CLASSIFICATION	1.260105314213606E-6	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9998773844995771	WITHOUT_CLASSIFICATION	1.2261550042292737E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999816146126534	WITHOUT_CLASSIFICATION	1.8385387346525657E-5	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999991072212921	WITHOUT_CLASSIFICATION	8.927787078932733E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999998207543296	WITHOUT_CLASSIFICATION	1.7924567033012454E-7	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9994513963485527	WITHOUT_CLASSIFICATION	5.486036514471832E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999338352042	WITHOUT_CLASSIFICATION	6.61647957054778E-8	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999321224946	WITHOUT_CLASSIFICATION	6.787750537890044E-8	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997111249488659	WITHOUT_CLASSIFICATION	2.8887505113408526E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9986934626207293	WITHOUT_CLASSIFICATION	0.001306537379270631	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9912040183482839	WITHOUT_CLASSIFICATION	0.008795981651716078	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999998656885468	WITHOUT_CLASSIFICATION	1.3431145317065966E-7	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999968402152586	WITHOUT_CLASSIFICATION	3.159784741411269E-6	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999746641052818	WITHOUT_CLASSIFICATION	2.5335894718241706E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999746641052818	WITHOUT_CLASSIFICATION	2.5335894718241706E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997111249488659	WITHOUT_CLASSIFICATION	2.8887505113408526E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999879664029333	WITHOUT_CLASSIFICATION	1.2033597066743866E-5	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9519446213312986	WITHOUT_CLASSIFICATION	0.04805537866870129	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9965148460186422	WITHOUT_CLASSIFICATION	0.003485153981357779	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.999999077449384	WITHOUT_CLASSIFICATION	9.225506160579777E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999831416825677	WITHOUT_CLASSIFICATION	1.6858317432336368E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999982564331745	WITHOUT_CLASSIFICATION	1.743566825478245E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9962442890540241	WITHOUT_CLASSIFICATION	0.003755710945976082	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999679740817771	WITHOUT_CLASSIFICATION	3.2025918222905384E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999928194	WITHOUT_CLASSIFICATION	7.180590364682011E-11	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999994036745932	WITHOUT_CLASSIFICATION	5.963254068194545E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999515398605	WITHOUT_CLASSIFICATION	4.846013940540145E-8	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999909253194633	WITHOUT_CLASSIFICATION	9.074680536714235E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999968499702058	WITHOUT_CLASSIFICATION	3.150029794170741E-6	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999893502015	WITHOUT_CLASSIFICATION	1.064979848189054E-8	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999996038876	WITHOUT_CLASSIFICATION	3.9611236299875534E-10	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9999799892589254	WITHOUT_CLASSIFICATION	2.0010741074671772E-5	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999994262287945	WITHOUT_CLASSIFICATION	5.737712055477372E-7	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999965703373637	WITHOUT_CLASSIFICATION	3.4296626362901977E-6	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997998795557456	WITHOUT_CLASSIFICATION	2.0012044425449124E-4	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999998185705856	WITHOUT_CLASSIFICATION	1.8142941443518686E-7	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999923490643198	WITHOUT_CLASSIFICATION	7.65093568018801E-6	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999847112268653	WITHOUT_CLASSIFICATION	1.5288773134709675E-4	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998734858413	WITHOUT_CLASSIFICATION	1.265141587136749E-7	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999839033755435	WITHOUT_CLASSIFICATION	1.6096624456366478E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919487798807	WITHOUT_CLASSIFICATION	8.051220119287682E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995388304657	WITHOUT_CLASSIFICATION	4.611695343054098E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983622295815	WITHOUT_CLASSIFICATION	1.637770418523054E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873761134068	WITHOUT_CLASSIFICATION	1.2623886593095702E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999824281693875	WITHOUT_CLASSIFICATION	1.757183061250203E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995958370108	WITHOUT_CLASSIFICATION	4.041629892358834E-7	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999483515833522	WITHOUT_CLASSIFICATION	5.164841664782393E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9998971771809803	WITHOUT_CLASSIFICATION	1.0282281901973785E-4	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996522022371	WITHOUT_CLASSIFICATION	3.477977630122133E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960219419662	WITHOUT_CLASSIFICATION	3.978058033811726E-6	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672279922214	WITHOUT_CLASSIFICATION	3.277200777862199E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998728865188	WITHOUT_CLASSIFICATION	1.271134812092607E-7	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999457910147428	WITHOUT_CLASSIFICATION	5.420898525719779E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977080283223	WITHOUT_CLASSIFICATION	2.2919716776791064E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980214231758	WITHOUT_CLASSIFICATION	1.9785768240811697E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965509519846	WITHOUT_CLASSIFICATION	3.4490480153519453E-6	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999999601799425	WITHOUT_CLASSIFICATION	3.9820057394387127E-8	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999655532138	WITHOUT_CLASSIFICATION	3.444678617566673E-8	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9354236263699953	WITHOUT_CLASSIFICATION	0.06457637363000454	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999911115291628	WITHOUT_CLASSIFICATION	8.888470837228283E-6	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999576269679	WITHOUT_CLASSIFICATION	4.237303204406672E-8	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990133453570614	WITHOUT_CLASSIFICATION	9.866546429386045E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999893191304617	WITHOUT_CLASSIFICATION	1.0680869538376826E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999989205836944	WITHOUT_CLASSIFICATION	1.0794163054940078E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9431359565035631	WITHOUT_CLASSIFICATION	0.056864043496436874	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999991421376456	WITHOUT_CLASSIFICATION	8.578623543202246E-7	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999923206689618	WITHOUT_CLASSIFICATION	7.679331038164133E-6	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999874488636714	WITHOUT_CLASSIFICATION	1.255113632852887E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999741591779166	WITHOUT_CLASSIFICATION	2.5840822083392624E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999915354505354	WITHOUT_CLASSIFICATION	8.464549464605888E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999969663558785	WITHOUT_CLASSIFICATION	3.033644121400284E-6	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9991754826732085	WITHOUT_CLASSIFICATION	8.245173267914551E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999142272312685	WITHOUT_CLASSIFICATION	8.577276873140975E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999451819446398	WITHOUT_CLASSIFICATION	5.481805536024576E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9990828599474206	WITHOUT_CLASSIFICATION	9.171400525793744E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999090831444	WITHOUT_CLASSIFICATION	9.091685558966031E-8	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995580700608	WITHOUT_CLASSIFICATION	4.4192993923928573E-7	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997327004957	WITHOUT_CLASSIFICATION	2.6729950431351815E-7	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992297185533	WITHOUT_CLASSIFICATION	7.702814466410432E-7	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9958146105621835	WITHOUT_CLASSIFICATION	0.004185389437816629	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999999791762	WITHOUT_CLASSIFICATION	2.0823719151648062E-11	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999936439873586	WITHOUT_CLASSIFICATION	6.356012641429219E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999969282454767	WITHOUT_CLASSIFICATION	3.0717545233688603E-6	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998967765802	WITHOUT_CLASSIFICATION	1.0322341980262986E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999998851276023	WITHOUT_CLASSIFICATION	1.1487239770996884E-7	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.988341275148	WITHOUT_CLASSIFICATION	0.011658724852000077	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999996281468911	WITHOUT_CLASSIFICATION	3.71853108804574E-7	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999932574436454	WITHOUT_CLASSIFICATION	6.742556354643829E-6	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998719083362425	WITHOUT_CLASSIFICATION	1.280916637575076E-4	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9987185928820862	WITHOUT_CLASSIFICATION	0.001281407117913871	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997966196790922	WITHOUT_CLASSIFICATION	2.033803209077667E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9984256287518317	WITHOUT_CLASSIFICATION	0.0015743712481683552	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990133453570614	WITHOUT_CLASSIFICATION	9.866546429386045E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998117417619001	WITHOUT_CLASSIFICATION	1.882582380998557E-4	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999937973067055	WITHOUT_CLASSIFICATION	6.202693294539227E-6	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999936273767474	WITHOUT_CLASSIFICATION	6.372623252669738E-6	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999244894949288	WITHOUT_CLASSIFICATION	7.551050507114116E-5	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999998214034831	WITHOUT_CLASSIFICATION	1.7859651695704983E-7	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999994612614678	WITHOUT_CLASSIFICATION	5.3873853216845E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9961075303047818	WITHOUT_CLASSIFICATION	0.0038924696952180814	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9999039047629733	WITHOUT_CLASSIFICATION	9.609523702667916E-5	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999983959727435	WITHOUT_CLASSIFICATION	1.6040272564106841E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997941595516	WITHOUT_CLASSIFICATION	2.0584044835572878E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995024906264	WITHOUT_CLASSIFICATION	4.975093735298087E-7	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999996380477953	WITHOUT_CLASSIFICATION	3.619522046309932E-7	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999874703656845	WITHOUT_CLASSIFICATION	1.2529634315551803E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9983624437490655	WITHOUT_CLASSIFICATION	0.0016375562509345634	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999970250809258	WITHOUT_CLASSIFICATION	2.974919074130529E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.99996921482662	WITHOUT_CLASSIFICATION	3.078517337992244E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999716187268378	WITHOUT_CLASSIFICATION	2.8381273162246232E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999989966224568	WITHOUT_CLASSIFICATION	1.00337754309074E-6	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998956439906	WITHOUT_CLASSIFICATION	1.0435600937890434E-7	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999999705404242	WITHOUT_CLASSIFICATION	2.9459575853537727E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999863109201061	WITHOUT_CLASSIFICATION	1.3689079893749006E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.999999402138791	WITHOUT_CLASSIFICATION	5.978612090440392E-7	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9996383248452436	WITHOUT_CLASSIFICATION	3.6167515475630564E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999999157448521	WITHOUT_CLASSIFICATION	8.42551479503019E-8	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.99953673891237	WITHOUT_CLASSIFICATION	4.632610876299272E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999994950895751	WITHOUT_CLASSIFICATION	5.049104250172033E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9401895062129785	WITHOUT_CLASSIFICATION	0.05981049378702161	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.999999241452623	WITHOUT_CLASSIFICATION	7.585473770493025E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999992595147006	WITHOUT_CLASSIFICATION	7.404852994967134E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999983362045142	WITHOUT_CLASSIFICATION	1.6637954858592413E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990133453570614	WITHOUT_CLASSIFICATION	9.866546429386045E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9988939055127117	WITHOUT_CLASSIFICATION	0.0011060944872882546	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999922746274297	WITHOUT_CLASSIFICATION	7.725372570244602E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991949257909609	WITHOUT_CLASSIFICATION	8.050742090390189E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990133453570614	WITHOUT_CLASSIFICATION	9.866546429386045E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9998873711719619	WITHOUT_CLASSIFICATION	1.126288280380835E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999863109201061	WITHOUT_CLASSIFICATION	1.3689079893749006E-5	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9989309078404625	WITHOUT_CLASSIFICATION	0.001069092159537544	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9901736833182307	WITHOUT_CLASSIFICATION	0.00982631668176927	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.984258941003538	WITHOUT_CLASSIFICATION	0.015741058996462005	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999997941595516	WITHOUT_CLASSIFICATION	2.0584044835572878E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999995024906264	WITHOUT_CLASSIFICATION	4.975093735298087E-7	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999996380477953	WITHOUT_CLASSIFICATION	3.619522046309932E-7	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999942635548	WITHOUT_CLASSIFICATION	5.736445203191721E-9	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999931231346233	WITHOUT_CLASSIFICATION	6.876865376622542E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999989171054534	WITHOUT_CLASSIFICATION	1.0828945465742578E-6	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999937164299377	WITHOUT_CLASSIFICATION	6.283570062233367E-6	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999848925705976	WITHOUT_CLASSIFICATION	1.5107429402308496E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9990133453570614	WITHOUT_CLASSIFICATION	9.866546429386045E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999874703656845	WITHOUT_CLASSIFICATION	1.2529634315551803E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9983624437490655	WITHOUT_CLASSIFICATION	0.0016375562509345634	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911749088185	WITHOUT_CLASSIFICATION	8.825091181381618E-6	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996605450612	WITHOUT_CLASSIFICATION	3.394549388244247E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999999903415296	WITHOUT_CLASSIFICATION	9.65847039302615E-8	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999927223584	WITHOUT_CLASSIFICATION	7.277641627657205E-9	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9972943433375221	WITHOUT_CLASSIFICATION	0.002705656662477952	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9997498021064125	WITHOUT_CLASSIFICATION	2.501978935874755E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965509519846	WITHOUT_CLASSIFICATION	3.4490480153519453E-6	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9998618290610644	WITHOUT_CLASSIFICATION	1.3817093893558153E-4	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9965852469939213	WITHOUT_CLASSIFICATION	0.0034147530060786835	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9956147676446192	WITHOUT_CLASSIFICATION	0.004385232355380864	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999985104298915	WITHOUT_CLASSIFICATION	1.4895701085212832E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999375430171	WITHOUT_CLASSIFICATION	6.245698285821307E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983622295815	WITHOUT_CLASSIFICATION	1.637770418523054E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873761134068	WITHOUT_CLASSIFICATION	1.2623886593095702E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960219419662	WITHOUT_CLASSIFICATION	3.978058033811726E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999375430171	WITHOUT_CLASSIFICATION	6.245698285821307E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999520033310068	WITHOUT_CLASSIFICATION	4.799666899319523E-5	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999999800629239	WITHOUT_CLASSIFICATION	1.9937076096965123E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999731320297	WITHOUT_CLASSIFICATION	2.686797030839415E-7	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979191041285	WITHOUT_CLASSIFICATION	2.080895871567803E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999994471417083	WITHOUT_CLASSIFICATION	5.528582917133017E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997282180765171	WITHOUT_CLASSIFICATION	2.7178192348294703E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672279922214	WITHOUT_CLASSIFICATION	3.277200777862199E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977080283223	WITHOUT_CLASSIFICATION	2.2919716776791064E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999932574436454	WITHOUT_CLASSIFICATION	6.742556354643829E-6	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.8303069848235161	WITHOUT_CLASSIFICATION	0.1696930151764839	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999868934675964	WITHOUT_CLASSIFICATION	1.3106532403589597E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999994247328189	WITHOUT_CLASSIFICATION	5.752671811377811E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999984136871971	WITHOUT_CLASSIFICATION	1.5863128029293938E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999993821853164	WITHOUT_CLASSIFICATION	6.178146836361873E-7	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999967261641	WITHOUT_CLASSIFICATION	3.27383592298829E-9	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999255459712102	WITHOUT_CLASSIFICATION	7.44540287898433E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.999999999928194	WITHOUT_CLASSIFICATION	7.180590364682011E-11	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999974861258851	WITHOUT_CLASSIFICATION	2.5138741148063763E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999810351465687	WITHOUT_CLASSIFICATION	1.8964853431266764E-5	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999999601952982	WITHOUT_CLASSIFICATION	3.980470180730163E-8	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999999116367341	WITHOUT_CLASSIFICATION	8.83632658654029E-8	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999982945690422	WITHOUT_CLASSIFICATION	1.705430957691847E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997300475207533	WITHOUT_CLASSIFICATION	2.699524792466201E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946762937731	WITHOUT_CLASSIFICATION	5.323706226938342E-6	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935230805441	WITHOUT_CLASSIFICATION	6.47691945586351E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995597179052	WITHOUT_CLASSIFICATION	4.402820948105816E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999416831256346	WITHOUT_CLASSIFICATION	5.831687436538036E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9994025322621	WITHOUT_CLASSIFICATION	5.974677378999454E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990008248169	WITHOUT_CLASSIFICATION	9.991751830996382E-7	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991270872021	WITHOUT_CLASSIFICATION	8.72912797970173E-7	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974963325186	WITHOUT_CLASSIFICATION	2.5036674814892945E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983663895418	WITHOUT_CLASSIFICATION	1.6336104583386704E-6	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999627010475449	WITHOUT_CLASSIFICATION	3.729895245512856E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999958926283457	WITHOUT_CLASSIFICATION	4.1073716543091136E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999961327797776	WITHOUT_CLASSIFICATION	3.867220222350197E-6	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999320292307636	WITHOUT_CLASSIFICATION	6.79707692364524E-5	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999969718603255	WITHOUT_CLASSIFICATION	3.0281396743423317E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852497399345	WITHOUT_CLASSIFICATION	1.475026006537233E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997562131265912	WITHOUT_CLASSIFICATION	2.4378687340889405E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999624781709	WITHOUT_CLASSIFICATION	3.752182905354319E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999995774091996	WITHOUT_CLASSIFICATION	4.225908003421728E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999995941850605	WITHOUT_CLASSIFICATION	4.0581493961507877E-7	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.998853580387808	WITHOUT_CLASSIFICATION	0.0011464196121919678	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9964326503091845	WITHOUT_CLASSIFICATION	0.0035673496908155545	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999714933943	WITHOUT_CLASSIFICATION	2.8506605767158797E-8	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999847375265	WITHOUT_CLASSIFICATION	1.52624734829274E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999457436697788	WITHOUT_CLASSIFICATION	5.4256330221105936E-5	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999993311898846	WITHOUT_CLASSIFICATION	6.68810115324494E-7	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9920823293636636	WITHOUT_CLASSIFICATION	0.007917670636336463	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9995189360575655	WITHOUT_CLASSIFICATION	4.810639424345389E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999844568485	WITHOUT_CLASSIFICATION	1.5543151515704023E-8	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999999047826921	WITHOUT_CLASSIFICATION	9.52173079553677E-8	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999986063011943	WITHOUT_CLASSIFICATION	1.3936988056582965E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999999988713927	WITHOUT_CLASSIFICATION	1.1286074037371645E-9	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999698768823021	WITHOUT_CLASSIFICATION	3.012311769798418E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999178011296	WITHOUT_CLASSIFICATION	8.219887043679718E-8	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999999999841136	WITHOUT_CLASSIFICATION	1.5886396314448868E-10	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9888576600826534	WITHOUT_CLASSIFICATION	0.011142339917346549	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999907913810477	WITHOUT_CLASSIFICATION	9.208618952329276E-6	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9909551592650858	WITHOUT_CLASSIFICATION	0.009044840734914203	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999952411030851	WITHOUT_CLASSIFICATION	4.758896914892963E-6	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997897202674032	WITHOUT_CLASSIFICATION	2.102797325968813E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9969875307449653	WITHOUT_CLASSIFICATION	0.0030124692550346404	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999962845914304	WITHOUT_CLASSIFICATION	3.7154085695954914E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999667801315	WITHOUT_CLASSIFICATION	3.321986860737905E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999965063172767	WITHOUT_CLASSIFICATION	3.4936827233892195E-6	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999971943812883	WITHOUT_CLASSIFICATION	2.805618711711673E-6	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999985694876778	WITHOUT_CLASSIFICATION	1.4305123221755132E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994746863489	WITHOUT_CLASSIFICATION	5.253136511729667E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999611691998096	WITHOUT_CLASSIFICATION	3.8830800190384974E-5	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999996848253166	WITHOUT_CLASSIFICATION	3.1517468338880037E-6	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999983238352	WITHOUT_CLASSIFICATION	1.6761647122087187E-9	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9943368469295978	WITHOUT_CLASSIFICATION	0.005663153070402231	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999986000062147	WITHOUT_CLASSIFICATION	1.399993785354373E-6	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999998514140415	WITHOUT_CLASSIFICATION	1.4858595847937042E-7	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999865211795472	WITHOUT_CLASSIFICATION	1.347882045279375E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999997480511586	WITHOUT_CLASSIFICATION	2.51948841402402E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.999163289404742	WITHOUT_CLASSIFICATION	8.367105952579823E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999454117223647	WITHOUT_CLASSIFICATION	5.458827763524502E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999015962831711	WITHOUT_CLASSIFICATION	9.840371682881785E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9884564510659698	WITHOUT_CLASSIFICATION	0.011543548934030274	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.999927269063977	WITHOUT_CLASSIFICATION	7.273093602300386E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.577727618146201	WITHOUT_CLASSIFICATION	0.42227238185379895	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999998979696526	WITHOUT_CLASSIFICATION	1.0203034737988767E-7	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9426305713027562	WITHOUT_CLASSIFICATION	0.057369428697243895	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999039159177524	WITHOUT_CLASSIFICATION	9.608408224769663E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999090134506721	WITHOUT_CLASSIFICATION	9.098654932789118E-5	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9983024864207614	WITHOUT_CLASSIFICATION	0.0016975135792385901	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999506241957026	WITHOUT_CLASSIFICATION	4.937580429754484E-5	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998615530054121	WITHOUT_CLASSIFICATION	1.384469945878747E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999999991848311	WITHOUT_CLASSIFICATION	8.151689003843752E-9	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999999331479719	WITHOUT_CLASSIFICATION	6.685202818347085E-8	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9941516866220813	WITHOUT_CLASSIFICATION	0.00584831337791862	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999972969381026	WITHOUT_CLASSIFICATION	2.703061897337513E-6	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999993006123	WITHOUT_CLASSIFICATION	6.993876625546489E-10	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999999988796292	WITHOUT_CLASSIFICATION	1.1203707897939994E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999474018553062	WITHOUT_CLASSIFICATION	5.259814469381964E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9980952433380391	WITHOUT_CLASSIFICATION	0.001904756661960926	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995785001977	WITHOUT_CLASSIFICATION	4.214998022095309E-7	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.8992830054934673	WITHOUT_CLASSIFICATION	0.10071699450653272	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999997131902401	WITHOUT_CLASSIFICATION	2.8680975997844184E-7	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9997801997839754	WITHOUT_CLASSIFICATION	2.1980021602459175E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999350894588253	WITHOUT_CLASSIFICATION	6.49105411747679E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999951204981717	WITHOUT_CLASSIFICATION	4.8795018282396204E-6	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9997547660472642	WITHOUT_CLASSIFICATION	2.4523395273579637E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999985688805581	WITHOUT_CLASSIFICATION	1.4311194418860806E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999986602488976	WITHOUT_CLASSIFICATION	1.3397511024016323E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999694381751529	WITHOUT_CLASSIFICATION	3.056182484701278E-5	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999274719152793	WITHOUT_CLASSIFICATION	7.2528084720672E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999984749568022	WITHOUT_CLASSIFICATION	1.5250431978174466E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999694381751529	WITHOUT_CLASSIFICATION	3.056182484701278E-5	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999887521806385	WITHOUT_CLASSIFICATION	1.1247819361454715E-5	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999711139737466	WITHOUT_CLASSIFICATION	2.8886026253296165E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999954105871938	WITHOUT_CLASSIFICATION	4.589412806320065E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999928630983292	WITHOUT_CLASSIFICATION	7.1369016708174585E-6	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999989178728667	WITHOUT_CLASSIFICATION	1.0821271333200438E-6	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998956374159	WITHOUT_CLASSIFICATION	1.0436258420051894E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999641989695398	WITHOUT_CLASSIFICATION	3.5801030460223155E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999998925917792	WITHOUT_CLASSIFICATION	1.0740822074683509E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999832776348481	WITHOUT_CLASSIFICATION	1.672236515194816E-5	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999589721131963	WITHOUT_CLASSIFICATION	4.102788680364132E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999991636448339	WITHOUT_CLASSIFICATION	8.363551661947516E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999996902704451	WITHOUT_CLASSIFICATION	3.0972955491386638E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999762688685602	WITHOUT_CLASSIFICATION	2.3731131439824384E-5	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999998539915	WITHOUT_CLASSIFICATION	1.460085992436744E-10	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999734579298025	WITHOUT_CLASSIFICATION	2.654207019740016E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9843014669349563	WITHOUT_CLASSIFICATION	0.01569853306504365	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997820820795265	WITHOUT_CLASSIFICATION	2.179179204735815E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997820820795265	WITHOUT_CLASSIFICATION	2.179179204735815E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999979953092659	WITHOUT_CLASSIFICATION	2.0046907340317605E-6	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999564362507714	WITHOUT_CLASSIFICATION	4.356374922860271E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999952476290106	WITHOUT_CLASSIFICATION	4.752370989434306E-6	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.999788383572192	WITHOUT_CLASSIFICATION	2.1161642780786701E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999971586968094	WITHOUT_CLASSIFICATION	2.8413031906581375E-6	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9936268245727865	DESIGN	0.006373175427213614	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999797306336533	WITHOUT_CLASSIFICATION	2.0269366346697693E-5	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999986306623815	WITHOUT_CLASSIFICATION	1.3693376185997034E-6	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9998992693137121	WITHOUT_CLASSIFICATION	1.0073068628787875E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998788532903191	WITHOUT_CLASSIFICATION	1.2114670968087937E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9976619822472632	WITHOUT_CLASSIFICATION	0.002338017752736759	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999960738014894	WITHOUT_CLASSIFICATION	3.926198510641283E-6	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999935219463613	WITHOUT_CLASSIFICATION	6.478053638785175E-6	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9737654015825137	WITHOUT_CLASSIFICATION	0.026234598417486415	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999375402024	WITHOUT_CLASSIFICATION	6.245979760422096E-8	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997300475207533	WITHOUT_CLASSIFICATION	2.699524792466201E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999998779482071	WITHOUT_CLASSIFICATION	1.2205179298685548E-7	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999996686168768	WITHOUT_CLASSIFICATION	3.313831231485687E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9986548724161711	WITHOUT_CLASSIFICATION	0.001345127583828898	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999966089907222	WITHOUT_CLASSIFICATION	3.391009277825071E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998668741547381	WITHOUT_CLASSIFICATION	1.3312584526199025E-4	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999864403507486	WITHOUT_CLASSIFICATION	1.355964925150633E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999901852960896	WITHOUT_CLASSIFICATION	9.814703910438775E-6	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999998986979114	WITHOUT_CLASSIFICATION	1.0130208857851463E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999997507854234	WITHOUT_CLASSIFICATION	2.4921457665586383E-7	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999951404730297	WITHOUT_CLASSIFICATION	4.8595269702496155E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999993132762143	WITHOUT_CLASSIFICATION	6.867237857123259E-7	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.8684290072943677	WITHOUT_CLASSIFICATION	0.13157099270563222	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999965303201354	WITHOUT_CLASSIFICATION	3.4696798646160236E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999859994953498	WITHOUT_CLASSIFICATION	1.4000504650234439E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999997534313514	WITHOUT_CLASSIFICATION	2.4656864859330077E-7	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999822432996291	WITHOUT_CLASSIFICATION	1.7756700370782275E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9996318595311202	WITHOUT_CLASSIFICATION	3.681404688797398E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999962449740029	WITHOUT_CLASSIFICATION	3.7550259972136194E-6	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997219273623027	WITHOUT_CLASSIFICATION	2.780726376973533E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999957966363565	WITHOUT_CLASSIFICATION	4.203363643521539E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999995354331158	WITHOUT_CLASSIFICATION	4.645668841284437E-7	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.997288120123885	WITHOUT_CLASSIFICATION	0.0027118798761150776	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999991490073	WITHOUT_CLASSIFICATION	8.509926403706365E-10	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999889720860591	WITHOUT_CLASSIFICATION	1.1027913940899152E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9996216264569682	WITHOUT_CLASSIFICATION	3.783735430318193E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.99999944514434	WITHOUT_CLASSIFICATION	5.5485565994724E-7	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999992518114645	WITHOUT_CLASSIFICATION	7.481885354058023E-7	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999985898112254	WITHOUT_CLASSIFICATION	1.410188774636365E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999995485197107	WITHOUT_CLASSIFICATION	4.5148028921863673E-7	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999995751821142	WITHOUT_CLASSIFICATION	4.248178857845704E-7	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998641388973724	WITHOUT_CLASSIFICATION	1.3586110262759837E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999975166107	WITHOUT_CLASSIFICATION	2.4833892781554118E-9	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995794120862	WITHOUT_CLASSIFICATION	4.2058791377730407E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9992673731042497	WITHOUT_CLASSIFICATION	7.326268957502272E-4	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999680548675	WITHOUT_CLASSIFICATION	3.194513249898436E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999966487888	WITHOUT_CLASSIFICATION	3.35121124528551E-9	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999836512664936	WITHOUT_CLASSIFICATION	1.6348733506432243E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999943546633969	WITHOUT_CLASSIFICATION	5.64533660310013E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975633604584	WITHOUT_CLASSIFICATION	2.4366395416073786E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.999943546633969	WITHOUT_CLASSIFICATION	5.64533660310013E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9792187836939737	WITHOUT_CLASSIFICATION	0.020781216306026255	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9986531339141593	WITHOUT_CLASSIFICATION	0.0013468660858405698	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9999325290942898	WITHOUT_CLASSIFICATION	6.747090571021478E-5	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999988642964942	WITHOUT_CLASSIFICATION	1.1357035058329981E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999989739020689	WITHOUT_CLASSIFICATION	1.0260979310697623E-6	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999999626321211	WITHOUT_CLASSIFICATION	3.736787893057618E-8	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999995946498643	WITHOUT_CLASSIFICATION	4.053501356991049E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999995929155321	WITHOUT_CLASSIFICATION	4.0708446799639103E-7	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999975603026691	WITHOUT_CLASSIFICATION	2.4396973309768784E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9996972959892751	WITHOUT_CLASSIFICATION	3.027040107248523E-4	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9997842026077622	WITHOUT_CLASSIFICATION	2.1579739223773044E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999945460666106	WITHOUT_CLASSIFICATION	5.453933389300898E-6	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9979552593791934	WITHOUT_CLASSIFICATION	0.002044740620806677	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9997862390834134	WITHOUT_CLASSIFICATION	2.1376091658659394E-4	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9982403226587686	WITHOUT_CLASSIFICATION	0.0017596773412313002	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999965950667278	WITHOUT_CLASSIFICATION	3.404933272282944E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998743094382243	WITHOUT_CLASSIFICATION	1.2569056177579206E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998743094382243	WITHOUT_CLASSIFICATION	1.2569056177579206E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999664897065955	WITHOUT_CLASSIFICATION	3.3510293404528845E-5	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999998688578	WITHOUT_CLASSIFICATION	1.3114224756011706E-10	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999989882034245	WITHOUT_CLASSIFICATION	1.0117965755310303E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999999249853807	WITHOUT_CLASSIFICATION	7.501461926329202E-8	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9960998618528638	WITHOUT_CLASSIFICATION	0.0039001381471361757	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999924373675624	WITHOUT_CLASSIFICATION	7.562632437616603E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999393741820195	WITHOUT_CLASSIFICATION	6.06258179805092E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.99998110376735	WITHOUT_CLASSIFICATION	1.889623265002617E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999955011096141	WITHOUT_CLASSIFICATION	4.498890386002015E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999957622067	WITHOUT_CLASSIFICATION	4.2377933247542044E-9	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999971920813285	WITHOUT_CLASSIFICATION	2.8079186715148176E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999979537690967	WITHOUT_CLASSIFICATION	2.0462309032802544E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999986930969	WITHOUT_CLASSIFICATION	1.306903076727245E-9	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999997413439559	WITHOUT_CLASSIFICATION	2.5865604418666177E-7	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999748610644472	WITHOUT_CLASSIFICATION	2.5138935552813214E-5	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999968018940515	WITHOUT_CLASSIFICATION	3.1981059485545803E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9994050363701842	WITHOUT_CLASSIFICATION	5.949636298157162E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9920213853380959	WITHOUT_CLASSIFICATION	0.007978614661904011	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9998418978591933	WITHOUT_CLASSIFICATION	1.58102140806662E-4	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999910654426	WITHOUT_CLASSIFICATION	8.934557441240297E-9	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999993671496558	WITHOUT_CLASSIFICATION	6.3285034428602E-7	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999990938866146	WITHOUT_CLASSIFICATION	9.061133855135599E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999992167001177	WITHOUT_CLASSIFICATION	7.832998823007676E-7	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9912903148458279	WITHOUT_CLASSIFICATION	0.008709685154172097	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999999632867443	WITHOUT_CLASSIFICATION	3.671325577650164E-8	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999306712355956	WITHOUT_CLASSIFICATION	6.932876440428821E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999999139118374	WITHOUT_CLASSIFICATION	8.608816260076389E-7	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9245053031226159	WITHOUT_CLASSIFICATION	0.07549469687738411	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999621660476498	WITHOUT_CLASSIFICATION	3.783395235026478E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996363707609078	WITHOUT_CLASSIFICATION	3.6362923909227747E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999469032926646	WITHOUT_CLASSIFICATION	5.309670733536153E-5	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999943682988096	WITHOUT_CLASSIFICATION	5.631701190363976E-6	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999837243472217	WITHOUT_CLASSIFICATION	1.6275652778247193E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999422706791897	WITHOUT_CLASSIFICATION	5.772932081031656E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999921720415595	WITHOUT_CLASSIFICATION	7.827958440340408E-6	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999904246686562	WITHOUT_CLASSIFICATION	9.5753313438473E-6	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999915696099494	WITHOUT_CLASSIFICATION	8.43039005050339E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999675376490636	WITHOUT_CLASSIFICATION	3.2462350936399495E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9904691594515839	WITHOUT_CLASSIFICATION	0.009530840548416046	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999903191855	WITHOUT_CLASSIFICATION	9.680814557752857E-9	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999884040336	WITHOUT_CLASSIFICATION	1.1595966461525584E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999805587929	WITHOUT_CLASSIFICATION	1.94412070686654E-8	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9997979364819172	WITHOUT_CLASSIFICATION	2.020635180827063E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9994326239302671	WITHOUT_CLASSIFICATION	5.673760697328386E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999942393436	WITHOUT_CLASSIFICATION	5.7606563479409885E-9	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999434511896114	WITHOUT_CLASSIFICATION	5.6548810388608705E-5	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9845986277459433	WITHOUT_CLASSIFICATION	0.015401372254056737	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999987495848573	WITHOUT_CLASSIFICATION	1.2504151425886163E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999996576519729	WITHOUT_CLASSIFICATION	3.4234802710900486E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999957591885116	WITHOUT_CLASSIFICATION	4.240811488438932E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999568941459	WITHOUT_CLASSIFICATION	4.31058540699711E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999992096781064	WITHOUT_CLASSIFICATION	7.903218935571936E-7	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999996537008389	WITHOUT_CLASSIFICATION	3.462991611271416E-7	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999974937988861	WITHOUT_CLASSIFICATION	2.5062011139734818E-6	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9998766309820702	WITHOUT_CLASSIFICATION	1.2336901792969163E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9998873711719619	WITHOUT_CLASSIFICATION	1.126288280380835E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9998873711719619	WITHOUT_CLASSIFICATION	1.126288280380835E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999998340359	WITHOUT_CLASSIFICATION	1.659640291088724E-10	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9994376806384967	WITHOUT_CLASSIFICATION	5.62319361503393E-4	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999927563084897	WITHOUT_CLASSIFICATION	7.243691510298732E-5	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999885747453023	WITHOUT_CLASSIFICATION	1.1425254697729536E-5	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999995724166	WITHOUT_CLASSIFICATION	4.2758351032468334E-10	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999992659242382	WITHOUT_CLASSIFICATION	7.340757618955466E-7	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999040353371447	WITHOUT_CLASSIFICATION	9.596466285530915E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.999997352248227	WITHOUT_CLASSIFICATION	2.6477517729895584E-6	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999881821696035	WITHOUT_CLASSIFICATION	1.1817830396420426E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999405464937	WITHOUT_CLASSIFICATION	5.9453506296783774E-8	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999965173455866	WITHOUT_CLASSIFICATION	3.482654413307126E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997198572324532	WITHOUT_CLASSIFICATION	2.801427675469197E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999996628262001	WITHOUT_CLASSIFICATION	3.3717379990296014E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999873204380337	WITHOUT_CLASSIFICATION	1.2679561966152022E-5	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5580626592984628	WITHOUT_CLASSIFICATION	0.4419373407015372	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999956988488161	WITHOUT_CLASSIFICATION	4.301151183917675E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999923502644735	WITHOUT_CLASSIFICATION	7.649735526523545E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.999779757507334	WITHOUT_CLASSIFICATION	2.2024249266593672E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9963188814491309	WITHOUT_CLASSIFICATION	0.0036811185508691968	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999998034436415	WITHOUT_CLASSIFICATION	1.965563585051454E-6	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999949378848023	WITHOUT_CLASSIFICATION	5.062115197691449E-5	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999999417627901	WITHOUT_CLASSIFICATION	5.823720984956612E-8	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999782920344735	WITHOUT_CLASSIFICATION	2.1707965526494141E-4	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999040802084996	WITHOUT_CLASSIFICATION	9.591979150034397E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.8135951517363021	WITHOUT_CLASSIFICATION	0.18640484826369783	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9979633325299426	DESIGN	0.002036667470057456	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998757812120856	WITHOUT_CLASSIFICATION	1.2421878791443383E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9864209613035457	WITHOUT_CLASSIFICATION	0.013579038696454134	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999998296531438	WITHOUT_CLASSIFICATION	1.703468562212226E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999782920344735	WITHOUT_CLASSIFICATION	2.1707965526494141E-4	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999987912388589	WITHOUT_CLASSIFICATION	1.2087611411091594E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9659805360428482	WITHOUT_CLASSIFICATION	0.03401946395715184	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9994542719650067	WITHOUT_CLASSIFICATION	5.45728034993302E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999502700627606	WITHOUT_CLASSIFICATION	4.9729937239381866E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999415444157	WITHOUT_CLASSIFICATION	5.8455584320556466E-8	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.997593268528317	WITHOUT_CLASSIFICATION	0.0024067314716830087	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9688721535072469	WITHOUT_CLASSIFICATION	0.031127846492753204	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999942472973073	WITHOUT_CLASSIFICATION	5.7527026925897035E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999993722366622	WITHOUT_CLASSIFICATION	6.2776333779871924E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999502700627606	WITHOUT_CLASSIFICATION	4.9729937239381866E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999985711076215	WITHOUT_CLASSIFICATION	1.4288923784504738E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999600800438034	WITHOUT_CLASSIFICATION	3.991995619657686E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998714891949173	WITHOUT_CLASSIFICATION	1.2851080508265086E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999126894095477	WITHOUT_CLASSIFICATION	8.731059045229462E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999994259227297	WITHOUT_CLASSIFICATION	5.740772703370405E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999971920813285	WITHOUT_CLASSIFICATION	2.8079186715148176E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999941381915	WITHOUT_CLASSIFICATION	5.861808583399105E-9	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999958378765756	WITHOUT_CLASSIFICATION	4.162123424342436E-6	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9998085215748089	WITHOUT_CLASSIFICATION	1.914784251911441E-4	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998930150193356	WITHOUT_CLASSIFICATION	1.0698498066443676E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9961990955895009	WITHOUT_CLASSIFICATION	0.003800904410499089	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9998547074051558	WITHOUT_CLASSIFICATION	1.452925948442519E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9961127870544114	WITHOUT_CLASSIFICATION	0.0038872129455885026	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999983871955673	WITHOUT_CLASSIFICATION	1.612804432703996E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999519252041925	WITHOUT_CLASSIFICATION	4.807479580741702E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999958803020083	WITHOUT_CLASSIFICATION	4.119697991789335E-6	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994331608139663	WITHOUT_CLASSIFICATION	5.668391860337881E-4	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999984534980452	WITHOUT_CLASSIFICATION	1.5465019547287908E-6	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999741335285006	WITHOUT_CLASSIFICATION	2.586647149938469E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9995235739722081	WITHOUT_CLASSIFICATION	4.7642602779176326E-4	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999960176842106	WITHOUT_CLASSIFICATION	3.982315789404252E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999991470036165	WITHOUT_CLASSIFICATION	8.529963835979884E-7	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999946397877	WITHOUT_CLASSIFICATION	5.360212329527551E-9	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999974344934864	WITHOUT_CLASSIFICATION	2.5655065134763536E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999980289629623	WITHOUT_CLASSIFICATION	1.9710370377012593E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9743196560158718	WITHOUT_CLASSIFICATION	0.025680343984128152	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999956283392178	WITHOUT_CLASSIFICATION	4.371660782119191E-6	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998676732132	WITHOUT_CLASSIFICATION	1.3232678664687624E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.999999803546016	WITHOUT_CLASSIFICATION	1.964539840449033E-7	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999981043313814	WITHOUT_CLASSIFICATION	1.8956686185712848E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999995674606021	WITHOUT_CLASSIFICATION	4.325393978966031E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9976423944140612	WITHOUT_CLASSIFICATION	0.0023576055859387862	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999953852225157	WITHOUT_CLASSIFICATION	4.614777484247225E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893102028564	WITHOUT_CLASSIFICATION	1.0689797143592917E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881952526193	WITHOUT_CLASSIFICATION	1.1804747380696243E-5	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.7131327306536783	WITHOUT_CLASSIFICATION	0.2868672693463217	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998965405249646	WITHOUT_CLASSIFICATION	1.0345947503542636E-4	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997048468361	WITHOUT_CLASSIFICATION	2.9515316387710117E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999970169177411	WITHOUT_CLASSIFICATION	2.983082258864763E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999970169177411	WITHOUT_CLASSIFICATION	2.983082258864763E-6	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999969874602591	WITHOUT_CLASSIFICATION	3.0125397407985087E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9991839369922987	WITHOUT_CLASSIFICATION	8.160630077013085E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999994190994062	WITHOUT_CLASSIFICATION	5.809005938372412E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999959105892974	WITHOUT_CLASSIFICATION	4.08941070259298E-6	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999969664873273	WITHOUT_CLASSIFICATION	3.033512672698974E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.8447712059150045	WITHOUT_CLASSIFICATION	0.15522879408499543	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9995601004453152	WITHOUT_CLASSIFICATION	4.3989955468482585E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999995071318384	WITHOUT_CLASSIFICATION	4.928681614915167E-7	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999886893038	WITHOUT_CLASSIFICATION	1.1310696187949674E-8	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999841591019	WITHOUT_CLASSIFICATION	1.584089821236472E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999664211964	WITHOUT_CLASSIFICATION	3.357880370291859E-8	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999990212496157	WITHOUT_CLASSIFICATION	9.787503842855927E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999959778817251	WITHOUT_CLASSIFICATION	4.0221182749396535E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999970169177411	WITHOUT_CLASSIFICATION	2.983082258864763E-6	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999759867468384	WITHOUT_CLASSIFICATION	2.401325316151409E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9995233553255375	WITHOUT_CLASSIFICATION	4.766446744624869E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9980595951214859	WITHOUT_CLASSIFICATION	0.001940404878514205	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999995022013761	WITHOUT_CLASSIFICATION	4.977986238138672E-7	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999542216496222	WITHOUT_CLASSIFICATION	4.5778350377723655E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999967784621315	WITHOUT_CLASSIFICATION	3.221537868415039E-6	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999210678600544	WITHOUT_CLASSIFICATION	7.893213994550334E-5	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999933504552989	WITHOUT_CLASSIFICATION	6.6495447010776304E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999692462810003	WITHOUT_CLASSIFICATION	3.0753718999775484E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999637116961351	WITHOUT_CLASSIFICATION	3.628830386483851E-5	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998746285082682	WITHOUT_CLASSIFICATION	1.253714917316532E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893102028564	WITHOUT_CLASSIFICATION	1.0689797143592917E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999970169177411	WITHOUT_CLASSIFICATION	2.983082258864763E-6	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999999108564	WITHOUT_CLASSIFICATION	8.914353815627077E-11	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999402408718	WITHOUT_CLASSIFICATION	5.975912823519269E-8	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999830105449603	WITHOUT_CLASSIFICATION	1.6989455039709725E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999988902345176	WITHOUT_CLASSIFICATION	1.109765482438578E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9840621226340908	WITHOUT_CLASSIFICATION	0.01593787736590929	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999991473453779	WITHOUT_CLASSIFICATION	8.526546220824027E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994604245545	WITHOUT_CLASSIFICATION	5.395754454925041E-7	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999792416713822	WITHOUT_CLASSIFICATION	2.075832861775975E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999737454559	WITHOUT_CLASSIFICATION	2.625454405276257E-8	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999952679162957	WITHOUT_CLASSIFICATION	4.732083704314829E-6	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.99999997659802	WITHOUT_CLASSIFICATION	2.3401979929316987E-8	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997213058173569	WITHOUT_CLASSIFICATION	2.7869418264312373E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999836073586755	WITHOUT_CLASSIFICATION	1.6392641324453177E-5	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999182377021	WITHOUT_CLASSIFICATION	8.176229790481714E-8	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9792187836939737	WITHOUT_CLASSIFICATION	0.020781216306026255	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997663771745	WITHOUT_CLASSIFICATION	2.3362282546895712E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999975289994	WITHOUT_CLASSIFICATION	2.4710006655361936E-9	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999959506840607	WITHOUT_CLASSIFICATION	4.049315939353673E-6	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999984990421427	WITHOUT_CLASSIFICATION	1.5009578573159145E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999900135624	WITHOUT_CLASSIFICATION	9.98643761083305E-9	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999934963280159	WITHOUT_CLASSIFICATION	6.503671984128321E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999934963280159	WITHOUT_CLASSIFICATION	6.503671984128321E-6	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998940577954893	WITHOUT_CLASSIFICATION	1.0594220451065186E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999998072891784	WITHOUT_CLASSIFICATION	1.9271082174290112E-7	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999738502753	WITHOUT_CLASSIFICATION	2.6149724738285147E-8	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999912762521456	WITHOUT_CLASSIFICATION	8.723747854511573E-6	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.99998592295738	WITHOUT_CLASSIFICATION	1.4077042619982107E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998694451096529	WITHOUT_CLASSIFICATION	1.305548903471318E-4	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9972887782429338	WITHOUT_CLASSIFICATION	0.002711221757066098	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999656567382	WITHOUT_CLASSIFICATION	3.4343261790400807E-8	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999656567382	WITHOUT_CLASSIFICATION	3.4343261790400807E-8	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999999930405074	WITHOUT_CLASSIFICATION	6.959492599283652E-8	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999989878857299	WITHOUT_CLASSIFICATION	1.012114270099276E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999905917708084	WITHOUT_CLASSIFICATION	9.408229191640371E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999857171297704	WITHOUT_CLASSIFICATION	1.4282870229699292E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999857171297704	WITHOUT_CLASSIFICATION	1.4282870229699292E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999857171297704	WITHOUT_CLASSIFICATION	1.4282870229699292E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9646485146981517	WITHOUT_CLASSIFICATION	0.0353514853018484	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999690760508266	WITHOUT_CLASSIFICATION	3.09239491733276E-5	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999987613131	WITHOUT_CLASSIFICATION	1.238686930735946E-9	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.6323764462459407	WITHOUT_CLASSIFICATION	0.36762355375405936	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9989792994420482	WITHOUT_CLASSIFICATION	0.0010207005579517684	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999970169177411	WITHOUT_CLASSIFICATION	2.983082258864763E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999970169177411	WITHOUT_CLASSIFICATION	2.983082258864763E-6	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999984996605512	WITHOUT_CLASSIFICATION	1.5003394487632629E-6	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.998896498051594	WITHOUT_CLASSIFICATION	0.0011035019484059935	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9997047541931212	WITHOUT_CLASSIFICATION	2.95245806878781E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999684370716403	WITHOUT_CLASSIFICATION	3.156292835962089E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999976651852007	WITHOUT_CLASSIFICATION	2.3348147993173804E-6	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999999782525048	WITHOUT_CLASSIFICATION	2.1747495213952866E-7	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9988843549307782	WITHOUT_CLASSIFICATION	0.001115645069221822	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999438115500573	WITHOUT_CLASSIFICATION	5.618844994282931E-5	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999552493142	WITHOUT_CLASSIFICATION	4.475068570411279E-8	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999760729681	WITHOUT_CLASSIFICATION	2.3927031902976634E-8	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999854232034889	WITHOUT_CLASSIFICATION	1.4576796511030979E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9996802209253767	WITHOUT_CLASSIFICATION	3.197790746232699E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9996802209253767	WITHOUT_CLASSIFICATION	3.197790746232701E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9996963812767291	WITHOUT_CLASSIFICATION	3.036187232709139E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9996963812767291	WITHOUT_CLASSIFICATION	3.036187232709139E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9996027955763154	WITHOUT_CLASSIFICATION	3.9720442368461264E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999800506471752	WITHOUT_CLASSIFICATION	1.9949352824805716E-5	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999800506471752	WITHOUT_CLASSIFICATION	1.9949352824805716E-5	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999557922147102	WITHOUT_CLASSIFICATION	4.420778528972125E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999725452994846	WITHOUT_CLASSIFICATION	2.7454700515436814E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999988436465707	WITHOUT_CLASSIFICATION	1.1563534293393913E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999934963280159	WITHOUT_CLASSIFICATION	6.503671984128321E-6	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999855919960796	WITHOUT_CLASSIFICATION	1.4408003920422148E-5	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999725452994846	WITHOUT_CLASSIFICATION	2.7454700515436814E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.851753441868689	WITHOUT_CLASSIFICATION	0.14824655813131102	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999539209693652	WITHOUT_CLASSIFICATION	4.607903063477174E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999954181694155	WITHOUT_CLASSIFICATION	4.581830584491611E-6	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999981276452359	WITHOUT_CLASSIFICATION	1.8723547640623381E-6	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9995476265517678	WITHOUT_CLASSIFICATION	4.523734482321996E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9995923353500944	WITHOUT_CLASSIFICATION	4.076646499056878E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999999458405672	WITHOUT_CLASSIFICATION	5.415943271182898E-8	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9328813359141119	WITHOUT_CLASSIFICATION	0.06711866408588796	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999130096116	WITHOUT_CLASSIFICATION	8.699038845766081E-8	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9237076709126323	WITHOUT_CLASSIFICATION	0.07629232908736773	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999909398135	WITHOUT_CLASSIFICATION	9.060186423991928E-9	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9998600958562897	WITHOUT_CLASSIFICATION	1.3990414371023175E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999983553044847	WITHOUT_CLASSIFICATION	1.6446955152957837E-6	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999960199786095	WITHOUT_CLASSIFICATION	3.980021390451798E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999993972513448	WITHOUT_CLASSIFICATION	6.027486551608838E-7	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9932058023208393	WITHOUT_CLASSIFICATION	0.00679419767916059	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999978333310939	WITHOUT_CLASSIFICATION	2.1666689061860673E-6	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999581959877986	WITHOUT_CLASSIFICATION	4.1804012201418886E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999581959877986	WITHOUT_CLASSIFICATION	4.1804012201418886E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999973760234491	WITHOUT_CLASSIFICATION	2.623976551051888E-6	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999972635184401	WITHOUT_CLASSIFICATION	2.7364815599715448E-6	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.999997963150457	WITHOUT_CLASSIFICATION	2.0368495429664117E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998141627521567	WITHOUT_CLASSIFICATION	1.8583724784330106E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9998907417011522	WITHOUT_CLASSIFICATION	1.0925829884772726E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999951780827995	WITHOUT_CLASSIFICATION	4.821917200531431E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999991507530441	WITHOUT_CLASSIFICATION	8.492469559501506E-7	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999999791656716	WITHOUT_CLASSIFICATION	2.0834328444350637E-8	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999743208183645	WITHOUT_CLASSIFICATION	2.5679181635620237E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999138047398879	WITHOUT_CLASSIFICATION	8.619526011207593E-5	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999852975111021	WITHOUT_CLASSIFICATION	1.4702488897990516E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997213058173569	WITHOUT_CLASSIFICATION	2.7869418264312373E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999983778839064	WITHOUT_CLASSIFICATION	1.6221160935297142E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999987698996567	WITHOUT_CLASSIFICATION	1.2301003431752591E-6	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9955087096994358	WITHOUT_CLASSIFICATION	0.00449129030056426	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9998186276362749	WITHOUT_CLASSIFICATION	1.8137236372511533E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999817730372	WITHOUT_CLASSIFICATION	1.8226962894895883E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999817730372	WITHOUT_CLASSIFICATION	1.8226962894895883E-8	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998048994619558	WITHOUT_CLASSIFICATION	1.9510053804412997E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.999929832110625	WITHOUT_CLASSIFICATION	7.016788937491378E-5	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9992892602947968	WITHOUT_CLASSIFICATION	7.107397052032171E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999415950411067	WITHOUT_CLASSIFICATION	5.840495889322647E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9977818547566868	WITHOUT_CLASSIFICATION	0.002218145243313138	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999748773188846	WITHOUT_CLASSIFICATION	2.512268111536016E-5	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9952758710052642	WITHOUT_CLASSIFICATION	0.004724128994735822	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999983494131824	WITHOUT_CLASSIFICATION	1.650586817603667E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999446483423508	WITHOUT_CLASSIFICATION	5.5351657649152115E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999858177357	WITHOUT_CLASSIFICATION	1.4182264332701172E-8	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998741764856376	WITHOUT_CLASSIFICATION	1.2582351436245953E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999983494131824	WITHOUT_CLASSIFICATION	1.650586817603667E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.6981601428417208	WITHOUT_CLASSIFICATION	0.3018398571582791	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9997028244666369	WITHOUT_CLASSIFICATION	2.9717553336310786E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9995500754029059	WITHOUT_CLASSIFICATION	4.499245970941248E-4	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.999994116344222	WITHOUT_CLASSIFICATION	5.8836557779414865E-6	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999998304318282	WITHOUT_CLASSIFICATION	1.695681717734886E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998693719374	WITHOUT_CLASSIFICATION	1.3062806263836123E-7	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999994988023071	WITHOUT_CLASSIFICATION	5.011976929287738E-7	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999394489371	WITHOUT_CLASSIFICATION	6.055106289920233E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999507888038337	WITHOUT_CLASSIFICATION	4.9211196166330474E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999867852752194	WITHOUT_CLASSIFICATION	1.3214724780550163E-5	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999591847216371	WITHOUT_CLASSIFICATION	4.081527836293899E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999796938162688	WITHOUT_CLASSIFICATION	2.0306183731162854E-5	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999994007622667	WITHOUT_CLASSIFICATION	5.9923773329421E-7	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999999381060704	WITHOUT_CLASSIFICATION	6.189392968295232E-8	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999990298428821	WITHOUT_CLASSIFICATION	9.70157117923589E-7	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999996416650073	WITHOUT_CLASSIFICATION	3.583349926633091E-7	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9995049170902331	WITHOUT_CLASSIFICATION	4.950829097669055E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9743540070611231	WITHOUT_CLASSIFICATION	0.025645992938876903	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.994575286861704	WITHOUT_CLASSIFICATION	0.005424713138295961	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999995152501346	WITHOUT_CLASSIFICATION	4.847498653571114E-7	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.999941090755897	WITHOUT_CLASSIFICATION	5.890924410293752E-5	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9061455753174658	WITHOUT_CLASSIFICATION	0.09385442468253433	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999907207199598	WITHOUT_CLASSIFICATION	9.279280040285695E-6	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999942549885646	WITHOUT_CLASSIFICATION	5.745011435319528E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999875233866	WITHOUT_CLASSIFICATION	1.2476613460126302E-8	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.999919570641397	WITHOUT_CLASSIFICATION	8.042935860301569E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999841924808458	WITHOUT_CLASSIFICATION	1.580751915418026E-5	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999518866093	WITHOUT_CLASSIFICATION	4.811339079903816E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999993455826643	WITHOUT_CLASSIFICATION	6.544173357702287E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9759495397181569	WITHOUT_CLASSIFICATION	0.024050460281843128	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999996746624	WITHOUT_CLASSIFICATION	3.2533765879996954E-10	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9966866138530842	WITHOUT_CLASSIFICATION	0.003313386146915746	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999978317568727	WITHOUT_CLASSIFICATION	2.168243127280876E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9424823764668392	WITHOUT_CLASSIFICATION	0.05751762353316074	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995849759318	WITHOUT_CLASSIFICATION	4.150240681537208E-7	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999982230804101	WITHOUT_CLASSIFICATION	1.7769195899106052E-6	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9980033770472325	WITHOUT_CLASSIFICATION	0.0019966229527674595	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999998061922631	WITHOUT_CLASSIFICATION	1.9380773689209484E-7	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998625752039	WITHOUT_CLASSIFICATION	1.3742479613744198E-7	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999806614293637	WITHOUT_CLASSIFICATION	1.9338570636332956E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998355126418	WITHOUT_CLASSIFICATION	1.644873581934514E-7	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999909683259445	WITHOUT_CLASSIFICATION	9.031674055586104E-6	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999909518218948	WITHOUT_CLASSIFICATION	9.048178105233312E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999842624049	WITHOUT_CLASSIFICATION	1.5737595099080787E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999737367002379	WITHOUT_CLASSIFICATION	2.626329976214979E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999512593285513	WITHOUT_CLASSIFICATION	4.874067144852322E-5	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999996109112782	WITHOUT_CLASSIFICATION	3.8908872172341507E-7	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999998891758111	WITHOUT_CLASSIFICATION	1.1082418887806198E-7	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999998889979082	WITHOUT_CLASSIFICATION	1.110020917974372E-6	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9997905981130579	WITHOUT_CLASSIFICATION	2.09401886942063E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995668042969	WITHOUT_CLASSIFICATION	4.331957031616341E-7	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999996165505429	WITHOUT_CLASSIFICATION	3.8344945708399104E-7	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9998798721218425	WITHOUT_CLASSIFICATION	1.2012787815743773E-4	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999629618269	WITHOUT_CLASSIFICATION	3.7038173128504324E-8	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998574595447	WITHOUT_CLASSIFICATION	1.4254045539703443E-7	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999987085674321	WITHOUT_CLASSIFICATION	1.2914325679383998E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999972370156206	WITHOUT_CLASSIFICATION	2.7629843794910566E-6	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999933259011285	WITHOUT_CLASSIFICATION	6.674098871485868E-6	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999910381241154	WITHOUT_CLASSIFICATION	8.961875884680822E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999996944651621	WITHOUT_CLASSIFICATION	3.05534837855843E-7	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9996815630467997	WITHOUT_CLASSIFICATION	3.1843695320028434E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999968932806433	WITHOUT_CLASSIFICATION	3.1067193567057586E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999232618056604	WITHOUT_CLASSIFICATION	7.67381943395865E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9990878192138025	DESIGN	9.121807861974192E-4	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9993026412194473	WITHOUT_CLASSIFICATION	6.973587805527625E-4	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999857728175947	WITHOUT_CLASSIFICATION	1.4227182405303674E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995668042969	WITHOUT_CLASSIFICATION	4.331957031616341E-7	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999207064679745	WITHOUT_CLASSIFICATION	7.929353202556294E-5	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999890692655	WITHOUT_CLASSIFICATION	1.0930734435883529E-8	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9880005711099444	WITHOUT_CLASSIFICATION	0.011999428890055546	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9998697893573555	WITHOUT_CLASSIFICATION	1.3021064264458727E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9997878114338996	WITHOUT_CLASSIFICATION	2.121885661003868E-4	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999979889980202	WITHOUT_CLASSIFICATION	2.0110019798600175E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999446483423508	WITHOUT_CLASSIFICATION	5.5351657649152115E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.6383896818108624	WITHOUT_CLASSIFICATION	0.36161031818913764	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999995849759318	WITHOUT_CLASSIFICATION	4.150240681537208E-7	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9688780691208282	WITHOUT_CLASSIFICATION	0.031121930879171734	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999458880787	WITHOUT_CLASSIFICATION	5.4111921320557633E-8	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999986811176973	WITHOUT_CLASSIFICATION	1.3188823027885838E-6	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999985729725989	WITHOUT_CLASSIFICATION	1.4270274011347232E-6	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999089269047895	WITHOUT_CLASSIFICATION	9.107309521059562E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.741027397223854	WITHOUT_CLASSIFICATION	0.258972602776146	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999938453575029	WITHOUT_CLASSIFICATION	6.154642497106661E-5	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9949104833543887	WITHOUT_CLASSIFICATION	0.00508951664561124	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9946385516883709	WITHOUT_CLASSIFICATION	0.00536144831162906	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998497134355	WITHOUT_CLASSIFICATION	1.502865644585088E-7	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999921756229478	WITHOUT_CLASSIFICATION	7.824377052154927E-6	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9997876751811156	WITHOUT_CLASSIFICATION	2.1232481888448952E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999756874886524	WITHOUT_CLASSIFICATION	2.431251134754919E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999756874886524	WITHOUT_CLASSIFICATION	2.431251134754919E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9986803626115003	WITHOUT_CLASSIFICATION	0.0013196373884998178	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999982761111087	WITHOUT_CLASSIFICATION	1.7238888913938995E-6	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998173030045	WITHOUT_CLASSIFICATION	1.8269699540885253E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9990600209574875	WITHOUT_CLASSIFICATION	9.39979042512569E-4	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999843025141614	WITHOUT_CLASSIFICATION	1.5697485838663817E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9994590079048006	WITHOUT_CLASSIFICATION	5.409920951993809E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999960448511934	WITHOUT_CLASSIFICATION	3.955148806600887E-6	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999804435256931	WITHOUT_CLASSIFICATION	1.955647430690669E-4	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999988854931954	WITHOUT_CLASSIFICATION	1.114506804643948E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999993176605647	WITHOUT_CLASSIFICATION	6.823394352722838E-7	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999324844416656	WITHOUT_CLASSIFICATION	6.75155583344419E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999445575442	WITHOUT_CLASSIFICATION	5.544245583614607E-8	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999994508194839	WITHOUT_CLASSIFICATION	5.491805159626915E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999997216	WITHOUT_CLASSIFICATION	2.784359480892429E-13	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999389803444749	WITHOUT_CLASSIFICATION	6.1019655525023714E-5	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999935449356275	WITHOUT_CLASSIFICATION	6.455064372434741E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9995889548730998	WITHOUT_CLASSIFICATION	4.110451269000547E-4	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999953655069	WITHOUT_CLASSIFICATION	4.634493139947568E-9	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999663273563	WITHOUT_CLASSIFICATION	3.367264364952876E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999716208562606	WITHOUT_CLASSIFICATION	2.8379143739455472E-5	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999978195779349	WITHOUT_CLASSIFICATION	2.180422065103174E-6	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999511772589322	WITHOUT_CLASSIFICATION	4.882274106789442E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999393029644	WITHOUT_CLASSIFICATION	6.069703557366922E-8	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9992860956791906	WITHOUT_CLASSIFICATION	7.139043208094061E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999895596864342	WITHOUT_CLASSIFICATION	1.0440313565806865E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998133959557	WITHOUT_CLASSIFICATION	1.866040444286143E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999999515398605	WITHOUT_CLASSIFICATION	4.846013940540145E-8	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999651509186647	WITHOUT_CLASSIFICATION	3.4849081335396424E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999000050755292	WITHOUT_CLASSIFICATION	9.999492447071547E-5	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999963004267731	WITHOUT_CLASSIFICATION	3.699573226793097E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9401895062129785	WITHOUT_CLASSIFICATION	0.05981049378702161	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.8600649053474613	WITHOUT_CLASSIFICATION	0.13993509465253876	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9979372930201866	WITHOUT_CLASSIFICATION	0.00206270697981329	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.998917173785596	WITHOUT_CLASSIFICATION	0.0010828262144040042	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999101933998813	WITHOUT_CLASSIFICATION	8.98066001187337E-5	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999998299105975	WITHOUT_CLASSIFICATION	1.7008940236020294E-7	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999903326842127	WITHOUT_CLASSIFICATION	9.667315787323642E-6	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999841891467529	WITHOUT_CLASSIFICATION	1.581085324717402E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999858454410824	WITHOUT_CLASSIFICATION	1.4154558917654719E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999055818513	WITHOUT_CLASSIFICATION	9.441814869545797E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877275570416	WITHOUT_CLASSIFICATION	1.2272442958471083E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999939527247	WITHOUT_CLASSIFICATION	6.047275320823555E-9	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998252829416221	WITHOUT_CLASSIFICATION	1.7471705837798058E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999990095095271	WITHOUT_CLASSIFICATION	9.904904728523708E-7	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999989442746425	WITHOUT_CLASSIFICATION	1.055725357540555E-6	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999731320297	WITHOUT_CLASSIFICATION	2.686797030839415E-7	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9317926504541305	WITHOUT_CLASSIFICATION	0.06820734954586939	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999963340850319	WITHOUT_CLASSIFICATION	3.6659149681885944E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999968094504	WITHOUT_CLASSIFICATION	3.190549521381568E-9	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999948757382	WITHOUT_CLASSIFICATION	5.1242617886653194E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999822876764767	WITHOUT_CLASSIFICATION	1.7712323523403633E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999990413609661	WITHOUT_CLASSIFICATION	9.586390339692984E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999998084193072	WITHOUT_CLASSIFICATION	1.9158069272026832E-7	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999739910115266	WITHOUT_CLASSIFICATION	2.600898847349007E-5	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999805269568309	WITHOUT_CLASSIFICATION	1.947304316906469E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9995855249373434	WITHOUT_CLASSIFICATION	4.14475062656615E-4	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999993262135675	WITHOUT_CLASSIFICATION	6.737864325267625E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999075064103432	WITHOUT_CLASSIFICATION	9.249358965671362E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999989357770078	WITHOUT_CLASSIFICATION	1.0642229921437327E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.999986190729231	WITHOUT_CLASSIFICATION	1.3809270769023376E-5	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998820773645447	WITHOUT_CLASSIFICATION	1.1792263545529876E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999993596255374	WITHOUT_CLASSIFICATION	6.403744625958996E-7	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9990563594078351	WITHOUT_CLASSIFICATION	9.43640592164934E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999689953322628	WITHOUT_CLASSIFICATION	3.100466773716534E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999561886516615	WITHOUT_CLASSIFICATION	4.3811348338443496E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9998406461137226	WITHOUT_CLASSIFICATION	1.5935388627737993E-4	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995702478277	WITHOUT_CLASSIFICATION	4.2975217236776004E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999989541604013	WITHOUT_CLASSIFICATION	1.0458395987240839E-6	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999852405349	WITHOUT_CLASSIFICATION	1.4759465091493509E-8	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999961435638	WITHOUT_CLASSIFICATION	3.856436191445033E-9	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999852405349	WITHOUT_CLASSIFICATION	1.4759465091493509E-8	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9992452133752145	WITHOUT_CLASSIFICATION	7.547866247854768E-4	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999982295806306	WITHOUT_CLASSIFICATION	1.7704193694140296E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999966042921864	WITHOUT_CLASSIFICATION	3.3957078136496914E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999559225304	WITHOUT_CLASSIFICATION	4.4077469551059524E-8	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999975045040685	WITHOUT_CLASSIFICATION	2.4954959314082977E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999985784536904	WITHOUT_CLASSIFICATION	1.4215463095379504E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999689916234024	WITHOUT_CLASSIFICATION	3.1008376597587274E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9978799986025723	WITHOUT_CLASSIFICATION	0.0021200013974277845	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999814669696333	WITHOUT_CLASSIFICATION	1.8533030366630665E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999997114809194	WITHOUT_CLASSIFICATION	2.885190806095809E-7	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.999999987839928	WITHOUT_CLASSIFICATION	1.2160072003009168E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999970278286157	WITHOUT_CLASSIFICATION	2.972171384363998E-6	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999592981805	WITHOUT_CLASSIFICATION	4.070181951459839E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.998791647814075	DESIGN	0.0012083521859249347	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999994647857875	WITHOUT_CLASSIFICATION	5.352142125024972E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999996721685	WITHOUT_CLASSIFICATION	3.278315345820892E-10	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999981627752126	WITHOUT_CLASSIFICATION	1.8372247874472512E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999991737388314	WITHOUT_CLASSIFICATION	8.262611686132801E-7	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999614539207	WITHOUT_CLASSIFICATION	3.854607925239237E-8	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997489789085664	WITHOUT_CLASSIFICATION	2.5102109143358513E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999956833275631	WITHOUT_CLASSIFICATION	4.3166724369563655E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998726857699177	WITHOUT_CLASSIFICATION	1.2731423008226637E-4	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9873102127026373	WITHOUT_CLASSIFICATION	0.012689787297362703	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999998761738832	WITHOUT_CLASSIFICATION	1.2382611680893552E-6	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999993402113309	WITHOUT_CLASSIFICATION	6.597886690630601E-7	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998421043377279	WITHOUT_CLASSIFICATION	1.5789566227212401E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9996328499933959	WITHOUT_CLASSIFICATION	3.671500066041038E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999934184088283	WITHOUT_CLASSIFICATION	6.5815911717546564E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999983458547382	WITHOUT_CLASSIFICATION	1.6541452618089187E-6	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999956459505385	WITHOUT_CLASSIFICATION	4.354049461540738E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999975486736696	WITHOUT_CLASSIFICATION	2.4513263304339076E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999882821101713	WITHOUT_CLASSIFICATION	1.1717889828787485E-5	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999949431428439	WITHOUT_CLASSIFICATION	5.056857156126988E-6	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999878279882357	WITHOUT_CLASSIFICATION	1.2172011764313907E-5	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999979698019035	WITHOUT_CLASSIFICATION	2.030198096521097E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999922579242183	WITHOUT_CLASSIFICATION	7.742075781678143E-6	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9901811165186291	WITHOUT_CLASSIFICATION	0.009818883481370982	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999995824457159	WITHOUT_CLASSIFICATION	4.175542841384299E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9997750294064225	WITHOUT_CLASSIFICATION	2.24970593577452E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999962474780417	WITHOUT_CLASSIFICATION	3.7525219581705555E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.999998262517682	WITHOUT_CLASSIFICATION	1.737482318103012E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999955754264437	WITHOUT_CLASSIFICATION	4.4245735563029695E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991949257909609	WITHOUT_CLASSIFICATION	8.050742090390189E-4	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9998421043377279	WITHOUT_CLASSIFICATION	1.5789566227212401E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999353919694859	WITHOUT_CLASSIFICATION	6.460803051415513E-5	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.999997030228412	WITHOUT_CLASSIFICATION	2.969771588039154E-6	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999909772975876	WITHOUT_CLASSIFICATION	9.022702412388894E-5	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999995919637487	WITHOUT_CLASSIFICATION	4.0803625136332737E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999911206429754	WITHOUT_CLASSIFICATION	8.879357024653906E-6	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999863480771521	WITHOUT_CLASSIFICATION	1.3651922847970385E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9977414678055353	WITHOUT_CLASSIFICATION	0.002258532194464677	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9983721704607319	DESIGN	0.001627829539268123	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999963441461236	WITHOUT_CLASSIFICATION	3.6558538763627105E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9992243228319765	WITHOUT_CLASSIFICATION	7.756771680235545E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.999998728937809	WITHOUT_CLASSIFICATION	1.2710621910963284E-6	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999725210036	WITHOUT_CLASSIFICATION	2.74789964947478E-8	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999994331902348	WITHOUT_CLASSIFICATION	5.668097651762345E-7	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997851163202713	WITHOUT_CLASSIFICATION	2.1488367972865053E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999907320079144	WITHOUT_CLASSIFICATION	9.267992085576469E-6	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999704981434157	WITHOUT_CLASSIFICATION	2.950185658427828E-5	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999985646396381	WITHOUT_CLASSIFICATION	1.4353603618336513E-6	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999977907461579	WITHOUT_CLASSIFICATION	2.209253842053788E-6	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999948411494407	WITHOUT_CLASSIFICATION	5.158850559309334E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999353919694859	WITHOUT_CLASSIFICATION	6.460803051415513E-5	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999989770024917	WITHOUT_CLASSIFICATION	1.022997508230812E-6	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999983993898353	WITHOUT_CLASSIFICATION	1.600610164698241E-6	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999915204104759	WITHOUT_CLASSIFICATION	8.47958952419408E-6	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.7334306538297696	DESIGN	0.2665693461702305	WITHOUT_CLASSIFICATION
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999477804561459	WITHOUT_CLASSIFICATION	5.221954385409373E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9956913616829918	WITHOUT_CLASSIFICATION	0.004308638317008266	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9956913616829918	WITHOUT_CLASSIFICATION	0.004308638317008266	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998365338734096	WITHOUT_CLASSIFICATION	1.634661265904381E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9956913616829918	WITHOUT_CLASSIFICATION	0.004308638317008266	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9956913616829918	WITHOUT_CLASSIFICATION	0.004308638317008266	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.8812145953946204	DESIGN	0.11878540460537951	WITHOUT_CLASSIFICATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999604090087	WITHOUT_CLASSIFICATION	3.959099129724596E-8	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9997435875862479	WITHOUT_CLASSIFICATION	2.5641241375207803E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999948768952516	WITHOUT_CLASSIFICATION	5.123104748445727E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.7998063456117493	WITHOUT_CLASSIFICATION	0.20019365438825062	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.999973503742745	WITHOUT_CLASSIFICATION	2.6496257255082957E-5	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.999998276063189	WITHOUT_CLASSIFICATION	1.7239368110377242E-6	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999993689958	WITHOUT_CLASSIFICATION	6.31004196272798E-10	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999641066073632	WITHOUT_CLASSIFICATION	3.5893392636796784E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9996456935864894	WITHOUT_CLASSIFICATION	3.543064135106452E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9990253303871818	WITHOUT_CLASSIFICATION	9.74669612818315E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9899627855281637	WITHOUT_CLASSIFICATION	0.010037214471836363	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9996779800211353	WITHOUT_CLASSIFICATION	3.2201997886465903E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9996854914297647	WITHOUT_CLASSIFICATION	3.1450857023523606E-4	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999989524230198	WITHOUT_CLASSIFICATION	1.0475769802054584E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999845917792467	WITHOUT_CLASSIFICATION	1.5408220753292557E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999966487888	WITHOUT_CLASSIFICATION	3.35121124528551E-9	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.99999999734698	WITHOUT_CLASSIFICATION	2.6530201468990153E-9	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9701818236590486	WITHOUT_CLASSIFICATION	0.02981817634095138	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999201320298204	WITHOUT_CLASSIFICATION	7.986797017960835E-4	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999896209334261	WITHOUT_CLASSIFICATION	1.0379066573904669E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999965914851323	WITHOUT_CLASSIFICATION	3.4085148677306115E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999966487888	WITHOUT_CLASSIFICATION	3.35121124528551E-9	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9996328499933959	WITHOUT_CLASSIFICATION	3.671500066041038E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999991882554178	WITHOUT_CLASSIFICATION	8.117445822354478E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983663895418	WITHOUT_CLASSIFICATION	1.6336104583386704E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999961327797776	WITHOUT_CLASSIFICATION	3.867220222350197E-6	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999962278387642	WITHOUT_CLASSIFICATION	3.7721612359462084E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999986176493452	WITHOUT_CLASSIFICATION	1.3823506548296303E-6	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999500598494693	WITHOUT_CLASSIFICATION	4.9940150530652206E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999996345933418	WITHOUT_CLASSIFICATION	3.6540665819650226E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999987738306172	WITHOUT_CLASSIFICATION	1.2261693828217972E-6	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998495544054337	WITHOUT_CLASSIFICATION	1.5044559456639712E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999413844187917	WITHOUT_CLASSIFICATION	5.861558120828023E-5	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999975458631452	WITHOUT_CLASSIFICATION	2.4541368548223928E-6	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999945875507371	WITHOUT_CLASSIFICATION	5.412449262888836E-6	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999999990912068	WITHOUT_CLASSIFICATION	9.087931898176639E-9	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999466830872482	WITHOUT_CLASSIFICATION	5.3316912751728755E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999928788146	WITHOUT_CLASSIFICATION	7.121185408466015E-9	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999029405475881	WITHOUT_CLASSIFICATION	9.705945241188785E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999997236585085	WITHOUT_CLASSIFICATION	2.763414914643537E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999674748576765	WITHOUT_CLASSIFICATION	3.252514232347323E-5	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999993354738117	WITHOUT_CLASSIFICATION	6.645261883674684E-7	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9953366008495632	WITHOUT_CLASSIFICATION	0.004663399150436829	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999702182364485	WITHOUT_CLASSIFICATION	2.9781763551506688E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999998204522	WITHOUT_CLASSIFICATION	1.7954782276431105E-10	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999987738306172	WITHOUT_CLASSIFICATION	1.2261693828217972E-6	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999679165570285	WITHOUT_CLASSIFICATION	3.2083442971473614E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999818757282674	WITHOUT_CLASSIFICATION	1.812427173266202E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999930049916064	WITHOUT_CLASSIFICATION	6.995008393649415E-6	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9948451411699251	WITHOUT_CLASSIFICATION	0.005154858830074922	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998907964306	WITHOUT_CLASSIFICATION	1.0920356942721076E-7	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999964494937077	WITHOUT_CLASSIFICATION	3.550506292228429E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999807325991128	WITHOUT_CLASSIFICATION	1.9267400887204194E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999958636883508	WITHOUT_CLASSIFICATION	4.136311649214855E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999855973095088	WITHOUT_CLASSIFICATION	1.4402690491341484E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999285875359795	WITHOUT_CLASSIFICATION	7.141246402047275E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996127664583	WITHOUT_CLASSIFICATION	3.872335416118606E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999505377629	WITHOUT_CLASSIFICATION	4.946223718036999E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9949469071889954	WITHOUT_CLASSIFICATION	0.005053092811004674	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999978108387	WITHOUT_CLASSIFICATION	2.189161297359629E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999909798226935	WITHOUT_CLASSIFICATION	9.020177306594264E-6	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9995895295287575	WITHOUT_CLASSIFICATION	4.1047047124265044E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999436065328	WITHOUT_CLASSIFICATION	5.639346719510809E-7	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996127664583	WITHOUT_CLASSIFICATION	3.872335416118606E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999205750302612	WITHOUT_CLASSIFICATION	7.942496973885922E-5	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.5560350615674651	DESIGN	0.4439649384325349	WITHOUT_CLASSIFICATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999969853834824	WITHOUT_CLASSIFICATION	3.01461651763164E-6	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999982044236085	WITHOUT_CLASSIFICATION	1.7955763914485482E-6	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999827880884868	WITHOUT_CLASSIFICATION	1.7211911513179902E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999405019688922	WITHOUT_CLASSIFICATION	5.949803110774079E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999909798226935	WITHOUT_CLASSIFICATION	9.020177306594264E-6	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999851909943	WITHOUT_CLASSIFICATION	1.480900564372096E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999377767851	WITHOUT_CLASSIFICATION	6.222321498594324E-8	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999549715287	WITHOUT_CLASSIFICATION	4.502847131784666E-8	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983986655746	WITHOUT_CLASSIFICATION	1.6013344254433136E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997817097811	WITHOUT_CLASSIFICATION	2.1829021889671387E-7	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997260170194	WITHOUT_CLASSIFICATION	2.73982980652038E-7	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999711912284	WITHOUT_CLASSIFICATION	2.880877162867271E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999711912284	WITHOUT_CLASSIFICATION	2.880877162867271E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997385943091138	WITHOUT_CLASSIFICATION	2.614056908861488E-4	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999950521444239	WITHOUT_CLASSIFICATION	4.947855576254425E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999714312355834	WITHOUT_CLASSIFICATION	2.8568764416597744E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999961604742801	WITHOUT_CLASSIFICATION	3.8395257199597595E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999795958986053	WITHOUT_CLASSIFICATION	2.0404101394637176E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915758213583	WITHOUT_CLASSIFICATION	8.424178641745535E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974533747172	WITHOUT_CLASSIFICATION	2.546625282739164E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999379987291	WITHOUT_CLASSIFICATION	6.200127088192603E-7	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999789522579744	WITHOUT_CLASSIFICATION	2.104774202568686E-5	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999664524444	WITHOUT_CLASSIFICATION	3.3547555630457486E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999915758213583	WITHOUT_CLASSIFICATION	8.424178641745535E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974533747172	WITHOUT_CLASSIFICATION	2.546625282739164E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999379987291	WITHOUT_CLASSIFICATION	6.200127088192603E-7	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999902158720286	WITHOUT_CLASSIFICATION	9.784127971280376E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9995415961745663	WITHOUT_CLASSIFICATION	4.5840382543376997E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999994732638633	WITHOUT_CLASSIFICATION	5.267361366883575E-7	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9971346860933717	WITHOUT_CLASSIFICATION	0.002865313906628285	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999998956212437	WITHOUT_CLASSIFICATION	1.0437875636704996E-7	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999999776356396	WITHOUT_CLASSIFICATION	2.2364360344387516E-8	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999990294060732	WITHOUT_CLASSIFICATION	9.705939267662273E-7	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9853803616593799	WITHOUT_CLASSIFICATION	0.014619638340620168	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9994562309770866	WITHOUT_CLASSIFICATION	5.437690229133702E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998220998714963	WITHOUT_CLASSIFICATION	1.779001285037005E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999862101545552	WITHOUT_CLASSIFICATION	1.3789845444793646E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9784122801040561	WITHOUT_CLASSIFICATION	0.021587719895943824	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.999976403618686	WITHOUT_CLASSIFICATION	2.3596381313991845E-5	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999617189292562	WITHOUT_CLASSIFICATION	3.828107074380518E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999984195558728	WITHOUT_CLASSIFICATION	1.5804441271831586E-6	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999867606573624	WITHOUT_CLASSIFICATION	1.3239342637617287E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9990392058690416	WITHOUT_CLASSIFICATION	9.607941309584478E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997719665798052	WITHOUT_CLASSIFICATION	2.2803342019476382E-4	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999442478827562	WITHOUT_CLASSIFICATION	5.5752117243788304E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999997222523683	WITHOUT_CLASSIFICATION	2.7774763175721716E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999859539829806	WITHOUT_CLASSIFICATION	1.4046017019370504E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7309739481470091	WITHOUT_CLASSIFICATION	0.26902605185299083	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999833732843	WITHOUT_CLASSIFICATION	1.6626715715504095E-8	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999666567456835	WITHOUT_CLASSIFICATION	3.3343254316438835E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999983504141688	WITHOUT_CLASSIFICATION	1.6495858311762614E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999856560442296	WITHOUT_CLASSIFICATION	1.434395577039161E-5	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998765609985	WITHOUT_CLASSIFICATION	1.2343900149301582E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982990328841	WITHOUT_CLASSIFICATION	1.7009671158884145E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999983840497197	WITHOUT_CLASSIFICATION	1.6159502802314229E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958962232031	WITHOUT_CLASSIFICATION	4.103776797007809E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999832206474	WITHOUT_CLASSIFICATION	1.6779352626734862E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995785001977	WITHOUT_CLASSIFICATION	4.214998022095309E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999995785001977	WITHOUT_CLASSIFICATION	4.214998022095309E-7	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999988106111057	WITHOUT_CLASSIFICATION	1.1893888943049934E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.999999999831885	WITHOUT_CLASSIFICATION	1.6811494275589998E-10	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999908636783521	WITHOUT_CLASSIFICATION	9.136321647839282E-6	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997213058173569	WITHOUT_CLASSIFICATION	2.7869418264312373E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999239108677435	WITHOUT_CLASSIFICATION	7.608913225650587E-5	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9927364496282374	WITHOUT_CLASSIFICATION	0.007263550371762567	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999797666371528	WITHOUT_CLASSIFICATION	2.0233362847140674E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999967364616967	WITHOUT_CLASSIFICATION	3.263538303241675E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.999985688805581	WITHOUT_CLASSIFICATION	1.4311194418860806E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996626336323	WITHOUT_CLASSIFICATION	3.373663677129909E-7	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999478718172	WITHOUT_CLASSIFICATION	5.212818280647096E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999886159623	WITHOUT_CLASSIFICATION	1.1384037671905077E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998592612304	WITHOUT_CLASSIFICATION	1.407387696034548E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998221904283	WITHOUT_CLASSIFICATION	1.7780957176349325E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998296932979	WITHOUT_CLASSIFICATION	1.703067019891076E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983978020967	WITHOUT_CLASSIFICATION	1.602197903344101E-6	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998846058151	WITHOUT_CLASSIFICATION	1.1539418480980955E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999969538533	WITHOUT_CLASSIFICATION	3.0461466058024607E-9	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995095670375	WITHOUT_CLASSIFICATION	4.904329624862291E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992144061194	WITHOUT_CLASSIFICATION	7.855938805819158E-7	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999955402010843	WITHOUT_CLASSIFICATION	4.459798915657081E-6	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999621068448534	WITHOUT_CLASSIFICATION	3.789315514647334E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9783477938607336	WITHOUT_CLASSIFICATION	0.021652206139266418	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999763723355315	WITHOUT_CLASSIFICATION	2.362766446855419E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999991095439752	WITHOUT_CLASSIFICATION	8.904560248785806E-7	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.994752527990918	WITHOUT_CLASSIFICATION	0.005247472009082032	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999970044251	WITHOUT_CLASSIFICATION	2.9955748403584454E-9	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999985705627817	WITHOUT_CLASSIFICATION	1.4294372183182548E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9783477938607336	WITHOUT_CLASSIFICATION	0.021652206139266418	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9783477938607336	WITHOUT_CLASSIFICATION	0.021652206139266418	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.99917928505452	WITHOUT_CLASSIFICATION	8.207149454799157E-4	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999996987401166	WITHOUT_CLASSIFICATION	3.0125988331048266E-7	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999446176507737	WITHOUT_CLASSIFICATION	5.5382349226182775E-5	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999845313792475	WITHOUT_CLASSIFICATION	1.546862075248019E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999983553044847	WITHOUT_CLASSIFICATION	1.6446955152957837E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999997222523683	WITHOUT_CLASSIFICATION	2.7774763175721716E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999854505899235	WITHOUT_CLASSIFICATION	1.4549410076398076E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999981544502432	WITHOUT_CLASSIFICATION	1.8455497567245713E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999416690615716	WITHOUT_CLASSIFICATION	5.8330938428417635E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925555280395	WITHOUT_CLASSIFICATION	7.444471960540286E-6	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999999823469871	WITHOUT_CLASSIFICATION	1.7653012987154557E-8	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960275676756	WITHOUT_CLASSIFICATION	3.972432324451101E-6	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987328466314502	WITHOUT_CLASSIFICATION	0.0012671533685497628	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987328466314502	WITHOUT_CLASSIFICATION	0.0012671533685497628	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9982898306801279	WITHOUT_CLASSIFICATION	0.0017101693198720894	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9982898306801279	WITHOUT_CLASSIFICATION	0.0017101693198720894	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942945340012	WITHOUT_CLASSIFICATION	5.705465998782196E-6	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994294888759	WITHOUT_CLASSIFICATION	5.705111242288138E-7	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999848122222008	WITHOUT_CLASSIFICATION	1.5187777799161663E-5	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999776022523195	WITHOUT_CLASSIFICATION	2.2397747680565677E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999697030248182	WITHOUT_CLASSIFICATION	3.0296975181731806E-5	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9474075899541241	DESIGN	0.0525924100458758	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999187938524	WITHOUT_CLASSIFICATION	8.120614760689992E-8	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989962848838	WITHOUT_CLASSIFICATION	1.0037151162011282E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.8303166703685844	WITHOUT_CLASSIFICATION	0.1696833296314156	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9994974631913636	WITHOUT_CLASSIFICATION	5.025368086363901E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999213591442	WITHOUT_CLASSIFICATION	7.864085575966387E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999987668933625	WITHOUT_CLASSIFICATION	1.2331066374012735E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9995117566384287	WITHOUT_CLASSIFICATION	4.882433615712877E-4	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999994552629413	WITHOUT_CLASSIFICATION	5.447370587214406E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999788278259879	WITHOUT_CLASSIFICATION	2.1172174012088562E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999492557843339	WITHOUT_CLASSIFICATION	5.074421566619326E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999492557843339	WITHOUT_CLASSIFICATION	5.074421566619326E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999863471228	WITHOUT_CLASSIFICATION	1.3652877215813452E-8	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999965286660257	WITHOUT_CLASSIFICATION	3.471333974174386E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9998561803537983	WITHOUT_CLASSIFICATION	1.4381964620159522E-4	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9993424459792883	WITHOUT_CLASSIFICATION	6.575540207116499E-4	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999879068035841	WITHOUT_CLASSIFICATION	1.2093196415972458E-5	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999677702942241	WITHOUT_CLASSIFICATION	3.2229705775987315E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999991488980957	WITHOUT_CLASSIFICATION	8.511019042343175E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998582064308035	WITHOUT_CLASSIFICATION	1.4179356919653613E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9995480001468369	WITHOUT_CLASSIFICATION	4.519998531631589E-4	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9749233785602858	WITHOUT_CLASSIFICATION	0.025076621439714227	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9995492253464541	WITHOUT_CLASSIFICATION	4.5077465354585305E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999877801508724	WITHOUT_CLASSIFICATION	1.2219849127673063E-5	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999338352042	WITHOUT_CLASSIFICATION	6.61647957054778E-8	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999995667529438	WITHOUT_CLASSIFICATION	4.332470562734202E-7	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999960152775499	WITHOUT_CLASSIFICATION	3.98472245005271E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998518470398354	WITHOUT_CLASSIFICATION	1.48152960164496E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999846329867	WITHOUT_CLASSIFICATION	1.5367013298745965E-8	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999806791296112	WITHOUT_CLASSIFICATION	1.9320870388799793E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999952965303419	WITHOUT_CLASSIFICATION	4.703469658055442E-6	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999963937097	WITHOUT_CLASSIFICATION	3.6062901989973074E-9	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999590735705	WITHOUT_CLASSIFICATION	4.0926429418428744E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999996222649	WITHOUT_CLASSIFICATION	3.777351290791747E-10	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999763377798	WITHOUT_CLASSIFICATION	2.366222009967694E-8	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999941125043	WITHOUT_CLASSIFICATION	5.887495699994893E-9	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.999988956091483	WITHOUT_CLASSIFICATION	1.1043908516967853E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999996068052239	WITHOUT_CLASSIFICATION	3.931947761482303E-7	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999967191999788	WITHOUT_CLASSIFICATION	3.280800021202987E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9995911846913561	WITHOUT_CLASSIFICATION	4.088153086439E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999834872343	WITHOUT_CLASSIFICATION	1.6512765699500198E-8	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999962449740029	WITHOUT_CLASSIFICATION	3.7550259972136194E-6	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999991790637	WITHOUT_CLASSIFICATION	8.209363716674321E-10	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.999999836375531	WITHOUT_CLASSIFICATION	1.6362446890225273E-7	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.987213889988774	WITHOUT_CLASSIFICATION	0.012786110011225996	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999707282332366	WITHOUT_CLASSIFICATION	2.9271766763272593E-5	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999996373328476	WITHOUT_CLASSIFICATION	3.626671524769655E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9988409959334339	WITHOUT_CLASSIFICATION	0.001159004066566085	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999923502644735	WITHOUT_CLASSIFICATION	7.649735526523545E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9988740486300756	WITHOUT_CLASSIFICATION	0.0011259513699244457	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999940274763	WITHOUT_CLASSIFICATION	5.972523702691902E-8	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999864171205003	WITHOUT_CLASSIFICATION	1.3582879499787267E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999745898796415	WITHOUT_CLASSIFICATION	2.541012035859319E-5	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.99999907702177	WITHOUT_CLASSIFICATION	9.229782298380729E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.7503746551270349	WITHOUT_CLASSIFICATION	0.24962534487296512	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999890626511916	WITHOUT_CLASSIFICATION	1.0937348808319478E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.999998094730913	WITHOUT_CLASSIFICATION	1.9052690871543872E-6	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9997101339123171	WITHOUT_CLASSIFICATION	2.898660876828781E-4	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999560263220999	WITHOUT_CLASSIFICATION	4.397367790010441E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998743094382243	WITHOUT_CLASSIFICATION	1.2569056177579206E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999761773434114	WITHOUT_CLASSIFICATION	2.3822656588594187E-5	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999994091612473	WITHOUT_CLASSIFICATION	5.908387526603079E-7	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999732925086842	WITHOUT_CLASSIFICATION	2.6707491315778023E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999953386952399	WITHOUT_CLASSIFICATION	4.661304760116841E-6	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999969582851541	WITHOUT_CLASSIFICATION	3.0417148458940955E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999994599311428	WITHOUT_CLASSIFICATION	5.400688572710786E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999999706332257	WITHOUT_CLASSIFICATION	2.9366774314203098E-8	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999995223212044	WITHOUT_CLASSIFICATION	4.776787955406603E-7	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999756472494682	WITHOUT_CLASSIFICATION	2.435275053173047E-5	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999982310806076	WITHOUT_CLASSIFICATION	1.768919392377934E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999733627957256	WITHOUT_CLASSIFICATION	2.6637204274509244E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9985491795754042	WITHOUT_CLASSIFICATION	0.0014508204245957462	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999722674568372	WITHOUT_CLASSIFICATION	2.7732543162899496E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.99999880838805	WITHOUT_CLASSIFICATION	1.1916119499805255E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999995664568203	WITHOUT_CLASSIFICATION	4.335431798034289E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998372061570845	WITHOUT_CLASSIFICATION	1.6279384291544667E-4	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999992681897595	WITHOUT_CLASSIFICATION	7.318102404907177E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9731126796183939	WITHOUT_CLASSIFICATION	0.026887320381606124	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999703326196	WITHOUT_CLASSIFICATION	2.9667380363349846E-8	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999997845661779	WITHOUT_CLASSIFICATION	2.1543382208282284E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999782920344735	WITHOUT_CLASSIFICATION	2.1707965526494141E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999782920344735	WITHOUT_CLASSIFICATION	2.1707965526494141E-4	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997659658955	WITHOUT_CLASSIFICATION	2.3403410446584474E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.985449926731627	WITHOUT_CLASSIFICATION	0.0145500732683729	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999715553342259	WITHOUT_CLASSIFICATION	2.844466577412339E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998648284360804	WITHOUT_CLASSIFICATION	1.351715639196503E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999999246918243	WITHOUT_CLASSIFICATION	7.530817566714679E-8	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998113470086023	WITHOUT_CLASSIFICATION	1.886529913976105E-4	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999988521002786	WITHOUT_CLASSIFICATION	1.1478997213724813E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999993294783615	WITHOUT_CLASSIFICATION	6.705216385017168E-7	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999794758881094	WITHOUT_CLASSIFICATION	2.0524111890536047E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999985922809965	WITHOUT_CLASSIFICATION	1.407719003484841E-6	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999995958795065	WITHOUT_CLASSIFICATION	4.041204934878801E-7	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999858555592	WITHOUT_CLASSIFICATION	1.4144440900512376E-8	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999990463734629	WITHOUT_CLASSIFICATION	9.536265369431549E-7	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999998352402145	WITHOUT_CLASSIFICATION	1.6475978538331146E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999903948936874	WITHOUT_CLASSIFICATION	9.605106312653256E-6	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9994852854507957	WITHOUT_CLASSIFICATION	5.147145492042363E-4	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999797436552761	WITHOUT_CLASSIFICATION	2.0256344723901697E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.999996716371968	WITHOUT_CLASSIFICATION	3.283628031977137E-6	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9980280101944767	WITHOUT_CLASSIFICATION	0.0019719898055233593	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999931807881175	WITHOUT_CLASSIFICATION	6.819211882396956E-6	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999144694454583	WITHOUT_CLASSIFICATION	8.553055454181373E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999991505011706	WITHOUT_CLASSIFICATION	8.494988294099282E-7	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9998301267718299	WITHOUT_CLASSIFICATION	1.6987322817004258E-4	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9891971060381701	WITHOUT_CLASSIFICATION	0.010802893961829967	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999987672085	WITHOUT_CLASSIFICATION	1.2327915666898757E-9	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998323781757517	WITHOUT_CLASSIFICATION	1.676218242483295E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999984727148105	WITHOUT_CLASSIFICATION	1.527285189467866E-6	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.999995193336322	WITHOUT_CLASSIFICATION	4.806663678029043E-6	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999060942729927	WITHOUT_CLASSIFICATION	9.390572700731174E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.999866264579154	WITHOUT_CLASSIFICATION	1.3373542084612908E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999982457472233	WITHOUT_CLASSIFICATION	1.754252776633518E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999204099910096	WITHOUT_CLASSIFICATION	7.959000899047455E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9995142242030959	WITHOUT_CLASSIFICATION	4.857757969040374E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999405347126128	WITHOUT_CLASSIFICATION	5.9465287387265455E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998356968731942	WITHOUT_CLASSIFICATION	1.6430312680579764E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9998356968731942	WITHOUT_CLASSIFICATION	1.6430312680579764E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999939715693045	WITHOUT_CLASSIFICATION	6.028430695567186E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9994078403055672	WITHOUT_CLASSIFICATION	5.921596944327226E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999617815017516	WITHOUT_CLASSIFICATION	3.821849824833376E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999973029599276	WITHOUT_CLASSIFICATION	2.69704007239755E-6	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999953693413367	WITHOUT_CLASSIFICATION	4.630658663335225E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9997840053586744	WITHOUT_CLASSIFICATION	2.1599464132571823E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999910163098434	WITHOUT_CLASSIFICATION	8.983690156633611E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999998835822762	WITHOUT_CLASSIFICATION	1.1641772389839748E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999629839628476	WITHOUT_CLASSIFICATION	3.701603715241131E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999836014399	WITHOUT_CLASSIFICATION	1.639856008838309E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999996099593944	WITHOUT_CLASSIFICATION	3.9004060548081935E-7	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999986215284056	WITHOUT_CLASSIFICATION	1.3784715944249739E-6	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999505449404633	WITHOUT_CLASSIFICATION	4.94550595365548E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.99992424290011	WITHOUT_CLASSIFICATION	7.575709989012348E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999905983591	WITHOUT_CLASSIFICATION	9.401640831736131E-9	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998600704688342	WITHOUT_CLASSIFICATION	1.3992953116585344E-4	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998600704688342	WITHOUT_CLASSIFICATION	1.3992953116585344E-4	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999904790660035	WITHOUT_CLASSIFICATION	9.520933996561683E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999931164484294	WITHOUT_CLASSIFICATION	6.8835515706350315E-6	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9815517532309553	WITHOUT_CLASSIFICATION	0.018448246769044708	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999949302384542	WITHOUT_CLASSIFICATION	5.069761545825305E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9864209613035457	WITHOUT_CLASSIFICATION	0.013579038696454134	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999967792411458	WITHOUT_CLASSIFICATION	3.2207588540786523E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999625380641773	WITHOUT_CLASSIFICATION	3.746193582258774E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999625380641773	WITHOUT_CLASSIFICATION	3.746193582258774E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999944328813724	WITHOUT_CLASSIFICATION	5.56711862758288E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9999931233272414	WITHOUT_CLASSIFICATION	6.876672758497744E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999970083466139	WITHOUT_CLASSIFICATION	2.991653386092861E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999951711825302	WITHOUT_CLASSIFICATION	4.828817469796424E-6	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9564131925311499	WITHOUT_CLASSIFICATION	0.043586807468850075	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999126894095477	WITHOUT_CLASSIFICATION	8.731059045229462E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999269605926477	WITHOUT_CLASSIFICATION	7.303940735229884E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999988436465707	WITHOUT_CLASSIFICATION	1.1563534293393913E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999970169177411	WITHOUT_CLASSIFICATION	2.983082258864763E-6	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.999795343920702	WITHOUT_CLASSIFICATION	2.0465607929805776E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9980595951214859	WITHOUT_CLASSIFICATION	0.001940404878514205	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999988902345176	WITHOUT_CLASSIFICATION	1.109765482438578E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9992298095539411	WITHOUT_CLASSIFICATION	7.701904460589259E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9996027955763154	WITHOUT_CLASSIFICATION	3.9720442368461264E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999000050755292	WITHOUT_CLASSIFICATION	9.999492447071547E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998702855168001	WITHOUT_CLASSIFICATION	1.297144831998955E-4	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999998977291598	WITHOUT_CLASSIFICATION	1.0227084022755301E-7	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999506055746844	WITHOUT_CLASSIFICATION	4.939442531553244E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9959508998171333	WITHOUT_CLASSIFICATION	0.0040491001828667035	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999992449783525	WITHOUT_CLASSIFICATION	7.550216474327591E-7	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999590488554	WITHOUT_CLASSIFICATION	4.095114451611289E-8	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999557922147102	WITHOUT_CLASSIFICATION	4.420778528972125E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998915314417816	WITHOUT_CLASSIFICATION	1.0846855821843225E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999934511765597	WITHOUT_CLASSIFICATION	6.548823440317236E-6	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999763281604438	WITHOUT_CLASSIFICATION	2.3671839556317483E-5	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999990961913223	WITHOUT_CLASSIFICATION	9.038086775773228E-7	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999998959623229	WITHOUT_CLASSIFICATION	1.040376771627749E-7	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9960499457912099	WITHOUT_CLASSIFICATION	0.003950054208790169	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999998725432965	WITHOUT_CLASSIFICATION	1.274567035731311E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999817730372	WITHOUT_CLASSIFICATION	1.8226962894895883E-8	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9989126112881742	WITHOUT_CLASSIFICATION	0.0010873887118258117	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9996176426096002	WITHOUT_CLASSIFICATION	3.823573903999084E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9994708722713992	WITHOUT_CLASSIFICATION	5.291277286008407E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999980190152	WITHOUT_CLASSIFICATION	1.980984814964969E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999972611689224	WITHOUT_CLASSIFICATION	2.7388310777177206E-6	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999510664925563	WITHOUT_CLASSIFICATION	4.89335074436701E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.999056491908251	WITHOUT_CLASSIFICATION	9.435080917489851E-4	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999232829793764	WITHOUT_CLASSIFICATION	7.671702062368953E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999976299725399	WITHOUT_CLASSIFICATION	2.370027460076949E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999871662799615	WITHOUT_CLASSIFICATION	1.2833720038589366E-5	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998867056153	WITHOUT_CLASSIFICATION	1.1329438455320763E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999991964161198	WITHOUT_CLASSIFICATION	8.035838801884629E-7	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999842511117848	WITHOUT_CLASSIFICATION	1.5748888215185327E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999965492952141	WITHOUT_CLASSIFICATION	3.4507047859179835E-6	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999999576	WITHOUT_CLASSIFICATION	4.245899129269806E-14	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999995639205652	WITHOUT_CLASSIFICATION	4.360794347232783E-7	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999976299725399	WITHOUT_CLASSIFICATION	2.370027460076949E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999871662799615	WITHOUT_CLASSIFICATION	1.2833720038589366E-5	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999128197039678	WITHOUT_CLASSIFICATION	8.718029603218675E-5	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9998747837335406	WITHOUT_CLASSIFICATION	1.2521626645940734E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.999847718675977	WITHOUT_CLASSIFICATION	1.5228132402308849E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999997846037336	WITHOUT_CLASSIFICATION	2.1539626633460665E-7	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999997881795818	WITHOUT_CLASSIFICATION	2.118204181836769E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999978710993633	WITHOUT_CLASSIFICATION	2.1289006365664917E-6	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999992110467308	WITHOUT_CLASSIFICATION	7.889532691651192E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.999990822984119	WITHOUT_CLASSIFICATION	9.177015881073265E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999973134055472	WITHOUT_CLASSIFICATION	2.686594452876248E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999481917571358	DESIGN	5.180824286409151E-5	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999998572790806	WITHOUT_CLASSIFICATION	1.4272091943305406E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999481917571358	DESIGN	5.180824286409151E-5	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999813159657	WITHOUT_CLASSIFICATION	1.868403430122982E-8	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999211470884722	WITHOUT_CLASSIFICATION	7.885291152779275E-5	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.999999919605014	WITHOUT_CLASSIFICATION	8.039498606230421E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988176784186	WITHOUT_CLASSIFICATION	1.182321581343625E-6	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999937361302732	WITHOUT_CLASSIFICATION	6.263869726738615E-6	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999303587129768	WITHOUT_CLASSIFICATION	6.9641287023236E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999303587129768	WITHOUT_CLASSIFICATION	6.9641287023236E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999959255886653	WITHOUT_CLASSIFICATION	4.0744113346767E-6	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999994488312088	WITHOUT_CLASSIFICATION	5.511687911344549E-7	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999981529432043	WITHOUT_CLASSIFICATION	1.8470567957014485E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999926072697151	WITHOUT_CLASSIFICATION	7.392730284900002E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999810430883751	WITHOUT_CLASSIFICATION	1.895691162483986E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.577785584384239	DESIGN	0.42221441561576106	WITHOUT_CLASSIFICATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999955537518568	WITHOUT_CLASSIFICATION	4.4462481432307484E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999999489604864	WITHOUT_CLASSIFICATION	5.1039513686631714E-8	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999727271006911	WITHOUT_CLASSIFICATION	2.7272899308958014E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999886142888688	WITHOUT_CLASSIFICATION	1.1385711131159986E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999597518962967	WITHOUT_CLASSIFICATION	4.0248103703261126E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999881150367	WITHOUT_CLASSIFICATION	1.1884963428767044E-8	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9996614982969044	WITHOUT_CLASSIFICATION	3.3850170309555585E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999988822165767	WITHOUT_CLASSIFICATION	1.1177834232145317E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999981156094905	WITHOUT_CLASSIFICATION	1.8843905094654182E-6	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999997442926069	WITHOUT_CLASSIFICATION	2.5570739310198745E-7	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999995213971665	WITHOUT_CLASSIFICATION	4.786028334294223E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999983790258031	WITHOUT_CLASSIFICATION	1.6209741969061775E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999998856500564	WITHOUT_CLASSIFICATION	1.1434994363764027E-7	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997288794038148	WITHOUT_CLASSIFICATION	2.7112059618515026E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999843644598069	WITHOUT_CLASSIFICATION	1.5635540193153052E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999969630748512	WITHOUT_CLASSIFICATION	3.0369251488168653E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999978723172046	WITHOUT_CLASSIFICATION	2.1276827953909094E-6	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999702248127	WITHOUT_CLASSIFICATION	2.9775187322781066E-8	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999998915087448	WITHOUT_CLASSIFICATION	1.084912551320864E-7	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998024215602537	WITHOUT_CLASSIFICATION	1.9757843974636276E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999724195859728	WITHOUT_CLASSIFICATION	2.7580414027141097E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997195654034607	WITHOUT_CLASSIFICATION	2.8043459653928783E-4	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9476259941507686	WITHOUT_CLASSIFICATION	0.05237400584923129	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9960675113469725	WITHOUT_CLASSIFICATION	0.003932488653027497	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9980280147445456	DESIGN	0.0019719852554543117	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999523741377346	WITHOUT_CLASSIFICATION	4.762586226535478E-5	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999955537518568	WITHOUT_CLASSIFICATION	4.4462481432307484E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999960711170495	WITHOUT_CLASSIFICATION	3.928882950544722E-6	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999991164737877	WITHOUT_CLASSIFICATION	8.835262123432675E-7	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9926288490016524	DESIGN	0.00737115099834766	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999971401044688	WITHOUT_CLASSIFICATION	2.859895531153568E-6	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999869938045518	WITHOUT_CLASSIFICATION	1.30061954481219E-5	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999951432936877	WITHOUT_CLASSIFICATION	4.856706312285123E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999926072697151	WITHOUT_CLASSIFICATION	7.392730284900002E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999926072697151	WITHOUT_CLASSIFICATION	7.392730284900002E-6	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999990089042677	WITHOUT_CLASSIFICATION	9.910957323086746E-7	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999952189964368	WITHOUT_CLASSIFICATION	4.7810035631138725E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9974430459983376	WITHOUT_CLASSIFICATION	0.0025569540016624833	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999981448175335	WITHOUT_CLASSIFICATION	1.8551824665694081E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999990971714429	WITHOUT_CLASSIFICATION	9.028285571467061E-7	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9996425371312923	WITHOUT_CLASSIFICATION	3.574628687077572E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.990718727544778	WITHOUT_CLASSIFICATION	0.009281272455222046	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999983670621931	WITHOUT_CLASSIFICATION	1.632937806868674E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999971060171427	WITHOUT_CLASSIFICATION	2.893982857297177E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999827115994526	WITHOUT_CLASSIFICATION	1.7288400547352537E-5	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999992792066841	WITHOUT_CLASSIFICATION	7.207933158989316E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999668392137776	WITHOUT_CLASSIFICATION	3.316078622232779E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999430283212255	WITHOUT_CLASSIFICATION	5.69716787744893E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999827115994526	WITHOUT_CLASSIFICATION	1.7288400547352537E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999913728637971	WITHOUT_CLASSIFICATION	8.627136202847961E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.992900488187087	WITHOUT_CLASSIFICATION	0.0070995118129130105	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999637938475208	WITHOUT_CLASSIFICATION	3.6206152479266455E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9999257506935628	DESIGN	7.42493064370823E-5	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999668392137776	WITHOUT_CLASSIFICATION	3.316078622232779E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999984897162988	WITHOUT_CLASSIFICATION	1.5102837012071441E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998565322671	WITHOUT_CLASSIFICATION	1.4346773287923262E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999961100751	WITHOUT_CLASSIFICATION	3.889925008483147E-9	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999998899424682	WITHOUT_CLASSIFICATION	1.1005753180372215E-7	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998709041902605	WITHOUT_CLASSIFICATION	1.2909580973959417E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999988451984047	WITHOUT_CLASSIFICATION	1.1548015953752706E-6	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.999996021514648	WITHOUT_CLASSIFICATION	3.978485352040777E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999907982312589	WITHOUT_CLASSIFICATION	9.201768741145069E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999783066104253	WITHOUT_CLASSIFICATION	2.1693389574675474E-5	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999964338204325	WITHOUT_CLASSIFICATION	3.566179567551856E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9893941477172804	WITHOUT_CLASSIFICATION	0.01060585228271965	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999872538139793	WITHOUT_CLASSIFICATION	1.2746186020635722E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999827115994526	WITHOUT_CLASSIFICATION	1.7288400547352537E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.999984897162988	WITHOUT_CLASSIFICATION	1.5102837012071441E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999961100751	WITHOUT_CLASSIFICATION	3.889925008483147E-9	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9997829581598382	WITHOUT_CLASSIFICATION	2.1704184016190685E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999886496867607	WITHOUT_CLASSIFICATION	1.1350313239283419E-5	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.999993052089848	WITHOUT_CLASSIFICATION	6.94791015195713E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999668392137776	WITHOUT_CLASSIFICATION	3.316078622232779E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999968252084205	WITHOUT_CLASSIFICATION	3.1747915794815824E-6	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999997676149436	WITHOUT_CLASSIFICATION	2.3238505628165152E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999799594030879	WITHOUT_CLASSIFICATION	2.0040596911994098E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599444859549	WITHOUT_CLASSIFICATION	4.005551404505995E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999907982312589	WITHOUT_CLASSIFICATION	9.201768741145069E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999913728637971	WITHOUT_CLASSIFICATION	8.627136202847961E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999980282916986	WITHOUT_CLASSIFICATION	1.9717083014392137E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999998188859885	WITHOUT_CLASSIFICATION	1.8111401142863793E-7	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999765602253633	WITHOUT_CLASSIFICATION	2.343977463670243E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9996258765914018	WITHOUT_CLASSIFICATION	3.7412340859825335E-4	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999954317830102	WITHOUT_CLASSIFICATION	4.568216989877314E-6	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999995930120936	WITHOUT_CLASSIFICATION	4.069879064062849E-7	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9990235426388043	WITHOUT_CLASSIFICATION	9.764573611955519E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988176784186	WITHOUT_CLASSIFICATION	1.182321581343625E-6	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999894490298093	WITHOUT_CLASSIFICATION	1.0550970190703527E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999994494843273	WITHOUT_CLASSIFICATION	5.505156727856596E-7	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999965278813738	WITHOUT_CLASSIFICATION	3.4721186261838254E-6	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999900592629	WITHOUT_CLASSIFICATION	9.940737149908386E-9	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.999999998191082	WITHOUT_CLASSIFICATION	1.8089179667686682E-9	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999922641263018	WITHOUT_CLASSIFICATION	7.735873698155188E-6	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.999994251992577	WITHOUT_CLASSIFICATION	5.748007422956721E-6	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999684320381	WITHOUT_CLASSIFICATION	3.1567961933992995E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999599444859549	WITHOUT_CLASSIFICATION	4.005551404505995E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999982261415435	WITHOUT_CLASSIFICATION	1.7738584564049E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999986876337317	WITHOUT_CLASSIFICATION	1.312366268306134E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999899871768719	WITHOUT_CLASSIFICATION	1.0012823128126254E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999910941416588	WITHOUT_CLASSIFICATION	8.905858341169888E-6	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9980116956186096	WITHOUT_CLASSIFICATION	0.0019883043813903535	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9968932136243837	WITHOUT_CLASSIFICATION	0.0031067863756163673	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999991961355118	WITHOUT_CLASSIFICATION	8.038644881374727E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.999379748419425	WITHOUT_CLASSIFICATION	6.202515805749551E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999989048474683	WITHOUT_CLASSIFICATION	1.095152531557584E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9984236946263928	WITHOUT_CLASSIFICATION	0.0015763053736072014	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999983403282616	WITHOUT_CLASSIFICATION	1.659671738291478E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999961754874249	WITHOUT_CLASSIFICATION	3.824512575037455E-6	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9993688427339913	WITHOUT_CLASSIFICATION	6.3115726600873E-4	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999563004893081	WITHOUT_CLASSIFICATION	4.369951069194542E-5	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999779782923782	WITHOUT_CLASSIFICATION	2.2021707621820797E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999971967533904	WITHOUT_CLASSIFICATION	2.8032466096794544E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.706910272600056	WITHOUT_CLASSIFICATION	0.293089727399944	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999979626292157	WITHOUT_CLASSIFICATION	2.0373707844187833E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999969969450668	WITHOUT_CLASSIFICATION	3.003054933130441E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9993343634040799	WITHOUT_CLASSIFICATION	6.656365959200077E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999940845096843	WITHOUT_CLASSIFICATION	5.915490315697292E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999977968902429	WITHOUT_CLASSIFICATION	2.203109757100883E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999929560309	WITHOUT_CLASSIFICATION	7.043969128369195E-9	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999966775488	WITHOUT_CLASSIFICATION	3.3224513229787985E-9	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999997473906465	WITHOUT_CLASSIFICATION	2.526093534500156E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.997410271316444	DESIGN	0.002589728683555987	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999872060886036	WITHOUT_CLASSIFICATION	1.2793911396428416E-5	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999997943916994	WITHOUT_CLASSIFICATION	2.0560830063283232E-7	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999500278188778	WITHOUT_CLASSIFICATION	4.99721811221164E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9461049168030721	DESIGN	0.053895083196927845	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9997709594505424	WITHOUT_CLASSIFICATION	2.2904054945761717E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999867852752194	WITHOUT_CLASSIFICATION	1.3214724780550163E-5	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999990216164489	WITHOUT_CLASSIFICATION	9.783835510938475E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.6383896818108624	WITHOUT_CLASSIFICATION	0.36161031818913764	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999797025327093	WITHOUT_CLASSIFICATION	2.029746729064299E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.999999912953907	WITHOUT_CLASSIFICATION	8.704609303896393E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998242714451532	WITHOUT_CLASSIFICATION	1.757285548468531E-4	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9724445696800319	WITHOUT_CLASSIFICATION	0.02755543031996817	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.999999912953907	WITHOUT_CLASSIFICATION	8.704609303896393E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999797025327093	WITHOUT_CLASSIFICATION	2.029746729064299E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9998242714451532	WITHOUT_CLASSIFICATION	1.757285548468531E-4	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9998612930402889	WITHOUT_CLASSIFICATION	1.3870695971109675E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999941318748704	WITHOUT_CLASSIFICATION	5.868125129652115E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999986405504	WITHOUT_CLASSIFICATION	1.3594495150892399E-9	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.997309636003084	WITHOUT_CLASSIFICATION	0.002690363996916	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9998755041883199	WITHOUT_CLASSIFICATION	1.2449581168003465E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999806438825788	DESIGN	1.93561174212021E-5	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.8025738118407673	WITHOUT_CLASSIFICATION	0.19742618815923266	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999948839790356	WITHOUT_CLASSIFICATION	5.116020964435998E-6	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998948934225212	WITHOUT_CLASSIFICATION	1.0510657747870437E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999849489707545	WITHOUT_CLASSIFICATION	1.5051029245593998E-5	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999963833128134	WITHOUT_CLASSIFICATION	3.616687186554441E-6	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9981796550528946	WITHOUT_CLASSIFICATION	0.0018203449471053165	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999993374153336	WITHOUT_CLASSIFICATION	6.625846663606291E-7	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.996609788570662	WITHOUT_CLASSIFICATION	0.0033902114293381646	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999987752569933	WITHOUT_CLASSIFICATION	1.2247430066828833E-6	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999922208353439	WITHOUT_CLASSIFICATION	7.779164656131755E-6	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999360609684194	WITHOUT_CLASSIFICATION	6.393903158066714E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9876494502645008	WITHOUT_CLASSIFICATION	0.012350549735499204	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9993771493997484	WITHOUT_CLASSIFICATION	6.228506002515844E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999911560856894	WITHOUT_CLASSIFICATION	8.843914310563885E-6	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9308293332053751	DESIGN	0.06917066679462494	WITHOUT_CLASSIFICATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999367132241	WITHOUT_CLASSIFICATION	6.328677591237698E-8	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999910641510324	WITHOUT_CLASSIFICATION	8.935848967663339E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999975352324544	WITHOUT_CLASSIFICATION	2.4647675456007594E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999987512084357	WITHOUT_CLASSIFICATION	1.2487915642747577E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999987512084357	WITHOUT_CLASSIFICATION	1.2487915642747577E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999950617391	WITHOUT_CLASSIFICATION	4.938260867506675E-9	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999950617391	WITHOUT_CLASSIFICATION	4.938260867506675E-9	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9993212860928732	WITHOUT_CLASSIFICATION	6.787139071268158E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999360609684194	WITHOUT_CLASSIFICATION	6.393903158066714E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9996153856466136	WITHOUT_CLASSIFICATION	3.846143533863744E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999933451543233	WITHOUT_CLASSIFICATION	6.654845676726753E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997254349575522	WITHOUT_CLASSIFICATION	2.7456504244785E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9997254349575522	WITHOUT_CLASSIFICATION	2.7456504244785E-4	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999985432177296	WITHOUT_CLASSIFICATION	1.4567822704026683E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999985114771678	WITHOUT_CLASSIFICATION	1.4885228321950653E-5	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999783821857291	WITHOUT_CLASSIFICATION	2.1617814270989865E-5	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999951555046964	WITHOUT_CLASSIFICATION	4.844495303523017E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8940603200463546	WITHOUT_CLASSIFICATION	0.10593967995364535	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999721119240641	WITHOUT_CLASSIFICATION	2.788807593588079E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998218633913806	WITHOUT_CLASSIFICATION	1.781366086194073E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9914512471228889	WITHOUT_CLASSIFICATION	0.008548752877111057	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9988117174630279	WITHOUT_CLASSIFICATION	0.0011882825369721802	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9998720683294293	WITHOUT_CLASSIFICATION	1.2793167057066444E-4	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999732327186053	WITHOUT_CLASSIFICATION	2.6767281394753158E-5	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999908323994281	WITHOUT_CLASSIFICATION	9.167600571906861E-6	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999890063753866	WITHOUT_CLASSIFICATION	1.0993624613406026E-5	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999692994041753	WITHOUT_CLASSIFICATION	3.070059582463932E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.7849074781177593	WITHOUT_CLASSIFICATION	0.21509252188224065	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9998038412979451	WITHOUT_CLASSIFICATION	1.9615870205498217E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621423513476	WITHOUT_CLASSIFICATION	3.785764865233636E-5	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999976941493799	WITHOUT_CLASSIFICATION	2.3058506200991556E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999959933912127	WITHOUT_CLASSIFICATION	4.006608787316198E-6	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999876202312	WITHOUT_CLASSIFICATION	1.2379768794850848E-8	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999994639503373	WITHOUT_CLASSIFICATION	5.360496626172568E-7	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.999999999260449	WITHOUT_CLASSIFICATION	7.39551019688971E-10	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999923942374029	WITHOUT_CLASSIFICATION	7.6057625971358165E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999958613554174	WITHOUT_CLASSIFICATION	4.138644582631431E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997213058173569	WITHOUT_CLASSIFICATION	2.7869418264312373E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999998371857506	WITHOUT_CLASSIFICATION	1.6281424948429754E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999961754874249	WITHOUT_CLASSIFICATION	3.824512575037455E-6	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998814003603	WITHOUT_CLASSIFICATION	1.185996396385057E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999997686385437	WITHOUT_CLASSIFICATION	2.3136145630915394E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767832854128	WITHOUT_CLASSIFICATION	2.321671458714867E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997946002566	WITHOUT_CLASSIFICATION	2.0539974337733065E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999862558086539	WITHOUT_CLASSIFICATION	1.3744191346098643E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.999862558086539	WITHOUT_CLASSIFICATION	1.3744191346098643E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999998092390744	WITHOUT_CLASSIFICATION	1.9076092573189188E-7	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999978257687809	WITHOUT_CLASSIFICATION	2.1742312189658757E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9985820528143872	WITHOUT_CLASSIFICATION	0.0014179471856127924	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9985820528143872	WITHOUT_CLASSIFICATION	0.0014179471856127924	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999972370156206	WITHOUT_CLASSIFICATION	2.7629843794910566E-6	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999827455017257	WITHOUT_CLASSIFICATION	1.7254498274225084E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999899039984805	WITHOUT_CLASSIFICATION	1.009600151946334E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999983553044847	WITHOUT_CLASSIFICATION	1.6446955152957837E-6	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9994614100074963	WITHOUT_CLASSIFICATION	5.385899925036912E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999884531989048	WITHOUT_CLASSIFICATION	1.1546801095137725E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9994082088995011	WITHOUT_CLASSIFICATION	5.917911004989327E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9997102237124501	WITHOUT_CLASSIFICATION	2.897762875499442E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9830697637173433	WITHOUT_CLASSIFICATION	0.016930236282656604	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9830697637173433	WITHOUT_CLASSIFICATION	0.016930236282656604	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9898823630881279	WITHOUT_CLASSIFICATION	0.010117636911872077	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.999495242096564	WITHOUT_CLASSIFICATION	5.047579034359523E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.999495242096564	WITHOUT_CLASSIFICATION	5.047579034359523E-4	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993142729073922	WITHOUT_CLASSIFICATION	6.857270926078405E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999959250603785	WITHOUT_CLASSIFICATION	4.074939621511793E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.6824122057464462	DESIGN	0.3175877942535537	WITHOUT_CLASSIFICATION
// Get the caller	WITHOUT_CLASSIFICATION	0.9999984962759149	WITHOUT_CLASSIFICATION	1.503724085073121E-6	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999966637549195	WITHOUT_CLASSIFICATION	3.336245080510652E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999894849592	WITHOUT_CLASSIFICATION	1.051504077686759E-8	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999854806585116	WITHOUT_CLASSIFICATION	1.4519341488326406E-5	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999991574259941	WITHOUT_CLASSIFICATION	8.425740059032624E-7	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999039750478	WITHOUT_CLASSIFICATION	9.602495226924562E-8	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9998940433861444	WITHOUT_CLASSIFICATION	1.0595661385566193E-4	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999894615578	WITHOUT_CLASSIFICATION	1.053844225232187E-8	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999177993094015	WITHOUT_CLASSIFICATION	8.220069059843249E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999831416825677	WITHOUT_CLASSIFICATION	1.6858317432336368E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999831416825677	WITHOUT_CLASSIFICATION	1.6858317432336368E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999831416825677	WITHOUT_CLASSIFICATION	1.6858317432336368E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999831416825677	WITHOUT_CLASSIFICATION	1.6858317432336368E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999998340692732	WITHOUT_CLASSIFICATION	1.6593072670184164E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999343997243887	WITHOUT_CLASSIFICATION	6.560027561129383E-5	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999890464654606	WITHOUT_CLASSIFICATION	1.0953534539522019E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.999891508970953	WITHOUT_CLASSIFICATION	1.0849102904701989E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999999618907882	WITHOUT_CLASSIFICATION	3.8109211805279787E-8	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9850741553656255	WITHOUT_CLASSIFICATION	0.01492584463437445	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9981271235342145	WITHOUT_CLASSIFICATION	0.0018728764657855203	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999957172454129	WITHOUT_CLASSIFICATION	4.282754587067002E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999791752764	WITHOUT_CLASSIFICATION	2.0824723556054016E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.999999616951083	WITHOUT_CLASSIFICATION	3.8304891700334067E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9961442620709425	WITHOUT_CLASSIFICATION	0.0038557379290574123	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997573197789003	WITHOUT_CLASSIFICATION	2.4268022109981587E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999972420414849	WITHOUT_CLASSIFICATION	2.757958515078185E-6	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999994095452	WITHOUT_CLASSIFICATION	5.904548517363922E-10	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999823192330077	WITHOUT_CLASSIFICATION	1.7680766992336884E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997573197789003	WITHOUT_CLASSIFICATION	2.4268022109981587E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999959025193	WITHOUT_CLASSIFICATION	4.097480703367742E-9	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998125029185986	WITHOUT_CLASSIFICATION	1.8749708140134154E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999978487186955	WITHOUT_CLASSIFICATION	2.1512813045655414E-6	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.999751226771095	WITHOUT_CLASSIFICATION	2.487732289050568E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999936588087454	WITHOUT_CLASSIFICATION	6.341191254682842E-6	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9987907517566302	WITHOUT_CLASSIFICATION	0.0012092482433698406	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999955939937393	WITHOUT_CLASSIFICATION	4.406006260769103E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999971624608868	WITHOUT_CLASSIFICATION	2.8375391131779903E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998701924158	WITHOUT_CLASSIFICATION	1.2980758419549668E-7	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999887582197037	WITHOUT_CLASSIFICATION	1.124178029633278E-5	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998901138849	WITHOUT_CLASSIFICATION	1.0988611508346835E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999977037290614	WITHOUT_CLASSIFICATION	2.296270938528301E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9985259723422801	WITHOUT_CLASSIFICATION	0.0014740276577198265	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9981061302129198	WITHOUT_CLASSIFICATION	0.0018938697870801598	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999796068077931	WITHOUT_CLASSIFICATION	2.0393192206897546E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9802475384918564	WITHOUT_CLASSIFICATION	0.01975246150814352	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999900463791872	WITHOUT_CLASSIFICATION	9.953620812690398E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999829319482718	WITHOUT_CLASSIFICATION	1.7068051728280852E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999759774449726	WITHOUT_CLASSIFICATION	2.4022555027386103E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999829319482718	WITHOUT_CLASSIFICATION	1.7068051728280852E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999590047668	WITHOUT_CLASSIFICATION	4.099523324204505E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9980156216818995	WITHOUT_CLASSIFICATION	0.001984378318100532	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9994543147669971	WITHOUT_CLASSIFICATION	5.456852330029399E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999432188379376	WITHOUT_CLASSIFICATION	5.6781162062334856E-5	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999900463791872	WITHOUT_CLASSIFICATION	9.953620812690398E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999759774449726	WITHOUT_CLASSIFICATION	2.4022555027386103E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999590047668	WITHOUT_CLASSIFICATION	4.099523324204505E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999566247584417	WITHOUT_CLASSIFICATION	4.3375241558205286E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999855916092094	WITHOUT_CLASSIFICATION	1.4408390790615025E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999583041050354	WITHOUT_CLASSIFICATION	4.169589496458179E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999907445426398	WITHOUT_CLASSIFICATION	9.255457360218449E-6	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9996101396770648	WITHOUT_CLASSIFICATION	3.8986032293515915E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999924799609596	WITHOUT_CLASSIFICATION	7.5200390403936045E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621423513476	WITHOUT_CLASSIFICATION	3.785764865233636E-5	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9980156216818995	WITHOUT_CLASSIFICATION	0.001984378318100532	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999081338881853	WITHOUT_CLASSIFICATION	9.186611181470583E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9998553153878502	WITHOUT_CLASSIFICATION	1.4468461214984656E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999909496397754	WITHOUT_CLASSIFICATION	9.050360224575763E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621423513476	WITHOUT_CLASSIFICATION	3.785764865233636E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999797681930044	WITHOUT_CLASSIFICATION	2.0231806995589744E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621423513476	WITHOUT_CLASSIFICATION	3.785764865233636E-5	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999999901921581	WITHOUT_CLASSIFICATION	9.80784185981861E-9	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999055818513	WITHOUT_CLASSIFICATION	9.441814869545797E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999927434996826	WITHOUT_CLASSIFICATION	7.256500317311888E-6	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999959417977684	WITHOUT_CLASSIFICATION	4.058202231502548E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999963340850319	WITHOUT_CLASSIFICATION	3.6659149681885944E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999927210694685	WITHOUT_CLASSIFICATION	7.278930531527009E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9997791334349521	WITHOUT_CLASSIFICATION	2.2086656504792916E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999897404426376	WITHOUT_CLASSIFICATION	1.0259557362536744E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995102225729	WITHOUT_CLASSIFICATION	4.897774271512796E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9992254312530179	WITHOUT_CLASSIFICATION	7.745687469821607E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999782920344735	WITHOUT_CLASSIFICATION	2.1707965526494141E-4	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999998573493568	WITHOUT_CLASSIFICATION	1.4265064328609975E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.6824122057464462	DESIGN	0.3175877942535537	WITHOUT_CLASSIFICATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9988119747864005	WITHOUT_CLASSIFICATION	0.001188025213599484	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994158595639901	WITHOUT_CLASSIFICATION	5.841404360098469E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999644077126596	WITHOUT_CLASSIFICATION	3.5592287340517856E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998252829416221	WITHOUT_CLASSIFICATION	1.7471705837798058E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999900946821243	WITHOUT_CLASSIFICATION	9.90531787574029E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999899736087111	WITHOUT_CLASSIFICATION	1.0026391288866226E-5	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999983922190797	WITHOUT_CLASSIFICATION	1.6077809202681822E-6	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8918231484096123	WITHOUT_CLASSIFICATION	0.10817685159038769	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999994483825068	WITHOUT_CLASSIFICATION	5.516174932597163E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999297798340006	WITHOUT_CLASSIFICATION	7.02201659994428E-5	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9383419941107652	DESIGN	0.06165800588923477	WITHOUT_CLASSIFICATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999983179905632	WITHOUT_CLASSIFICATION	1.682009436860319E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999911929252037	WITHOUT_CLASSIFICATION	8.807074796319487E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996921764128	WITHOUT_CLASSIFICATION	3.0782358712302423E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999938022898094	WITHOUT_CLASSIFICATION	6.197710190614484E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999553581938426	WITHOUT_CLASSIFICATION	4.4641806157316766E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999443851024	WITHOUT_CLASSIFICATION	5.561489759958812E-8	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999830478029976	WITHOUT_CLASSIFICATION	1.6952197002292063E-5	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999968853099183	WITHOUT_CLASSIFICATION	3.1146900818133917E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9947690184981122	WITHOUT_CLASSIFICATION	0.005230981501887798	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9993293529811739	WITHOUT_CLASSIFICATION	6.706470188260333E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9849306571455958	WITHOUT_CLASSIFICATION	0.015069342854404233	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995702478277	WITHOUT_CLASSIFICATION	4.2975217236776004E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9945628332664702	WITHOUT_CLASSIFICATION	0.005437166733529813	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9972061939908137	WITHOUT_CLASSIFICATION	0.002793806009186338	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999669481619412	WITHOUT_CLASSIFICATION	3.3051838058857546E-5	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.999951821163624	WITHOUT_CLASSIFICATION	4.8178836375962166E-5	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8942171113247227	DESIGN	0.10578288867527731	WITHOUT_CLASSIFICATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998319537405	WITHOUT_CLASSIFICATION	1.6804625937229023E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.990378294060657	WITHOUT_CLASSIFICATION	0.009621705939342886	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999490674549348	WITHOUT_CLASSIFICATION	5.093254506518186E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999490674549348	WITHOUT_CLASSIFICATION	5.093254506518186E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999999997675666	WITHOUT_CLASSIFICATION	2.3243339955154908E-9	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999897404426376	WITHOUT_CLASSIFICATION	1.0259557362536744E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9804004306585764	WITHOUT_CLASSIFICATION	0.019599569341423647	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999996387308832	WITHOUT_CLASSIFICATION	3.612691169005294E-7	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999994154996905	WITHOUT_CLASSIFICATION	5.84500309561138E-7	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999833485811	WITHOUT_CLASSIFICATION	1.6651418960222386E-8	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998922029807487	WITHOUT_CLASSIFICATION	1.0779701925136448E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998353726796372	WITHOUT_CLASSIFICATION	1.6462732036288033E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999998504333404	WITHOUT_CLASSIFICATION	1.49566659668673E-7	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999970534330768	WITHOUT_CLASSIFICATION	2.946566923300743E-6	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9994517028326642	WITHOUT_CLASSIFICATION	5.482971673358735E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999946823039042	WITHOUT_CLASSIFICATION	5.3176960958429425E-6	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.6766892768819736	WITHOUT_CLASSIFICATION	0.32331072311802656	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9998581595715552	WITHOUT_CLASSIFICATION	1.4184042844472844E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999924356339431	WITHOUT_CLASSIFICATION	7.564366056894714E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999820585243	WITHOUT_CLASSIFICATION	1.7941475838090603E-8	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.99999980574029	WITHOUT_CLASSIFICATION	1.9425970990181882E-7	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999992033517515	WITHOUT_CLASSIFICATION	7.966482486015843E-7	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999758215922	WITHOUT_CLASSIFICATION	2.4178407787070314E-8	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9904249424630986	WITHOUT_CLASSIFICATION	0.009575057536901278	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998707950063435	WITHOUT_CLASSIFICATION	1.292049936564583E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999856966092364	WITHOUT_CLASSIFICATION	1.4303390763473329E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999999202097681	WITHOUT_CLASSIFICATION	7.979023180725099E-8	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999769619311969	WITHOUT_CLASSIFICATION	2.303806880303987E-5	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.8942171113247227	DESIGN	0.10578288867527731	WITHOUT_CLASSIFICATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9998907831392352	WITHOUT_CLASSIFICATION	1.0921686076476375E-4	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999828978147671	WITHOUT_CLASSIFICATION	1.7102185232965183E-5	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999383518806	WITHOUT_CLASSIFICATION	6.164811934458889E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999999691556882	WITHOUT_CLASSIFICATION	3.084431174844062E-8	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.997669322805942	WITHOUT_CLASSIFICATION	0.0023306771940579795	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999546554327886	WITHOUT_CLASSIFICATION	4.534456721148407E-5	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999987455892698	WITHOUT_CLASSIFICATION	1.2544107301662245E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999368203268	WITHOUT_CLASSIFICATION	6.317967320537138E-7	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999941159872	WITHOUT_CLASSIFICATION	5.8840128460648536E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999970384393972	WITHOUT_CLASSIFICATION	2.961560602744746E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999826689765	WITHOUT_CLASSIFICATION	1.7331023426792644E-8	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999984476364	WITHOUT_CLASSIFICATION	1.5523636104799947E-9	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9989532711251513	WITHOUT_CLASSIFICATION	0.0010467288748487182	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999970561686868	WITHOUT_CLASSIFICATION	2.943831313085264E-6	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997893855032288	WITHOUT_CLASSIFICATION	2.1061449677111635E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997893855032288	WITHOUT_CLASSIFICATION	2.1061449677111635E-4	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999163677677285	WITHOUT_CLASSIFICATION	8.363223227142612E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998842211981536	WITHOUT_CLASSIFICATION	1.1577880184651745E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9987838003232912	WITHOUT_CLASSIFICATION	0.0012161996767088164	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9987838003232912	WITHOUT_CLASSIFICATION	0.0012161996767088164	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999982026552297	WITHOUT_CLASSIFICATION	1.797344770423143E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9899627855281637	WITHOUT_CLASSIFICATION	0.010037214471836363	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.6117422040100694	DESIGN	0.38825779598993054	WITHOUT_CLASSIFICATION
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999986812836443	WITHOUT_CLASSIFICATION	1.318716355750808E-6	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999240983183	WITHOUT_CLASSIFICATION	7.590168182939721E-8	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999723256997	WITHOUT_CLASSIFICATION	2.7674300269744885E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999960280396734	WITHOUT_CLASSIFICATION	3.971960326627921E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999960280396734	WITHOUT_CLASSIFICATION	3.971960326627921E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999672479871	WITHOUT_CLASSIFICATION	3.275201284347783E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9903952424901469	WITHOUT_CLASSIFICATION	0.009604757509853075	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999800217834459	WITHOUT_CLASSIFICATION	1.9978216554029782E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999975750836563	WITHOUT_CLASSIFICATION	2.4249163436912778E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999975750836563	WITHOUT_CLASSIFICATION	2.4249163436912778E-5	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.999999980013822	WITHOUT_CLASSIFICATION	1.9986178091310712E-8	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999998343126633	WITHOUT_CLASSIFICATION	1.6568733673113837E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9014447374478204	WITHOUT_CLASSIFICATION	0.09855526255217965	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999976212539953	WITHOUT_CLASSIFICATION	2.3787460047911387E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999950709504649	WITHOUT_CLASSIFICATION	4.929049535125602E-6	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9998898607632913	WITHOUT_CLASSIFICATION	1.1013923670860967E-4	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9984034550429026	WITHOUT_CLASSIFICATION	0.001596544957097388	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9997249114523272	WITHOUT_CLASSIFICATION	2.7508854767268676E-4	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9972685480025898	WITHOUT_CLASSIFICATION	0.0027314519974101044	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999973891769396	WITHOUT_CLASSIFICATION	2.61082306032478E-6	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9926156870680012	WITHOUT_CLASSIFICATION	0.007384312931998758	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9911234319217936	WITHOUT_CLASSIFICATION	0.008876568078206347	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999993759102938	WITHOUT_CLASSIFICATION	6.24089706327083E-7	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9972615925614217	WITHOUT_CLASSIFICATION	0.0027384074385782666	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999636692901552	WITHOUT_CLASSIFICATION	3.633070984479208E-5	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999998220765994	WITHOUT_CLASSIFICATION	1.7792340063946712E-7	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999968041882404	WITHOUT_CLASSIFICATION	3.1958117596094863E-6	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999976381904	WITHOUT_CLASSIFICATION	2.3618096533716854E-9	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999451672290468	WITHOUT_CLASSIFICATION	5.483277095319478E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999620219971334	WITHOUT_CLASSIFICATION	3.7978002866664284E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999672927380859	WITHOUT_CLASSIFICATION	3.270726191414461E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9978892156505246	WITHOUT_CLASSIFICATION	0.0021107843494753095	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.999917270229224	WITHOUT_CLASSIFICATION	8.272977077591617E-5	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999994359815938	WITHOUT_CLASSIFICATION	5.640184062487366E-7	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9892234843912356	WITHOUT_CLASSIFICATION	0.010776515608764334	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999706717999438	WITHOUT_CLASSIFICATION	2.9328200056163958E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999937331649037	WITHOUT_CLASSIFICATION	6.26683509629913E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999993851757134	WITHOUT_CLASSIFICATION	6.148242866309689E-7	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999054932888	WITHOUT_CLASSIFICATION	9.450671129873583E-8	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999984195558728	WITHOUT_CLASSIFICATION	1.5804441271831586E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7309739481470091	WITHOUT_CLASSIFICATION	0.26902605185299083	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999947369452543	WITHOUT_CLASSIFICATION	5.263054745727827E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999925895968832	WITHOUT_CLASSIFICATION	7.410403116878917E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999482686494146	WITHOUT_CLASSIFICATION	5.173135058538982E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999595538354745	WITHOUT_CLASSIFICATION	4.044616452549978E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999774612518604	WITHOUT_CLASSIFICATION	2.253874813964509E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.999229226628442	WITHOUT_CLASSIFICATION	7.707733715580268E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999997349830458	WITHOUT_CLASSIFICATION	2.650169541843964E-7	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999966874473905	WITHOUT_CLASSIFICATION	3.312552609641205E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999937116396579	WITHOUT_CLASSIFICATION	6.288360342056886E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9983555182595327	WITHOUT_CLASSIFICATION	0.001644481740467307	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999675740006375	WITHOUT_CLASSIFICATION	3.24259993625492E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998417558313897	WITHOUT_CLASSIFICATION	1.5824416861034355E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999768137717145	WITHOUT_CLASSIFICATION	2.318622828550691E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999990920068104	WITHOUT_CLASSIFICATION	9.079931895633995E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999801368244999	WITHOUT_CLASSIFICATION	1.9863175500082968E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999259218522352	WITHOUT_CLASSIFICATION	7.407814776484182E-5	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9764354007434898	WITHOUT_CLASSIFICATION	0.023564599256510207	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999994270663858	WITHOUT_CLASSIFICATION	5.729336142921595E-7	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999939394266	WITHOUT_CLASSIFICATION	6.0605733979326855E-9	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999325791871891	WITHOUT_CLASSIFICATION	6.742081281083826E-5	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999960033500703	WITHOUT_CLASSIFICATION	3.996649929638444E-6	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999991762959	WITHOUT_CLASSIFICATION	8.237040644869668E-10	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999999837337	WITHOUT_CLASSIFICATION	1.6266252118524652E-11	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9998894868567044	WITHOUT_CLASSIFICATION	1.1051314329551353E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999982060937371	WITHOUT_CLASSIFICATION	1.7939062628402498E-6	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998170964734835	WITHOUT_CLASSIFICATION	1.82903526516556E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999954503543957	WITHOUT_CLASSIFICATION	4.549645604305507E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9988648924393488	WITHOUT_CLASSIFICATION	0.001135107560651188	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9983041824592569	WITHOUT_CLASSIFICATION	0.0016958175407431194	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999980918077	WITHOUT_CLASSIFICATION	1.908192291828527E-9	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999980918077	WITHOUT_CLASSIFICATION	1.908192291828527E-9	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999997718412299	WITHOUT_CLASSIFICATION	2.281587701336407E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999996926659965	WITHOUT_CLASSIFICATION	3.0733400344687145E-7	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999861643071	WITHOUT_CLASSIFICATION	1.3835692901534116E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999422441283645	WITHOUT_CLASSIFICATION	5.7755871635454716E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999983736447615	WITHOUT_CLASSIFICATION	1.6263552384571874E-6	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999996195758192	WITHOUT_CLASSIFICATION	3.8042418087514855E-7	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999999153942699	WITHOUT_CLASSIFICATION	8.4605729995267E-8	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999966104	WITHOUT_CLASSIFICATION	3.3895937628496907E-12	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999961541274386	WITHOUT_CLASSIFICATION	3.845872561374192E-6	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999986797013548	WITHOUT_CLASSIFICATION	1.3202986451240922E-6	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9997074711932281	WITHOUT_CLASSIFICATION	2.9252880677197156E-4	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9995047780841435	WITHOUT_CLASSIFICATION	4.952219158565239E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999355504452	WITHOUT_CLASSIFICATION	6.444955473892373E-8	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9960967311850584	WITHOUT_CLASSIFICATION	0.0039032688149415098	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999436065328	WITHOUT_CLASSIFICATION	5.639346719510809E-7	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999999436065328	WITHOUT_CLASSIFICATION	5.639346719510809E-7	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999996713198164	WITHOUT_CLASSIFICATION	3.2868018363765247E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999991575180754	WITHOUT_CLASSIFICATION	8.424819245334183E-7	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999982027673	WITHOUT_CLASSIFICATION	1.797232676767331E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999499952378	WITHOUT_CLASSIFICATION	5.000476214695668E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999996127664583	WITHOUT_CLASSIFICATION	3.872335416118606E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957654113407	WITHOUT_CLASSIFICATION	4.234588659321405E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999946592660113	WITHOUT_CLASSIFICATION	5.3407339887039365E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9967280070767974	WITHOUT_CLASSIFICATION	0.003271992923202629	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999996076915184	WITHOUT_CLASSIFICATION	3.923084816063306E-6	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999842229786	WITHOUT_CLASSIFICATION	1.5777021352383874E-8	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999965918484	WITHOUT_CLASSIFICATION	3.408151621880783E-9	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999991593407	WITHOUT_CLASSIFICATION	8.406592998089719E-9	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999999960025	WITHOUT_CLASSIFICATION	3.997501850615899E-11	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999996127234322	WITHOUT_CLASSIFICATION	3.872765677584731E-7	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9454849509035846	DESIGN	0.05451504909641542	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998117417619001	WITHOUT_CLASSIFICATION	1.882582380998557E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.984258941003538	WITHOUT_CLASSIFICATION	0.015741058996462005	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999803870227894	WITHOUT_CLASSIFICATION	1.9612977210627804E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999980052004536	WITHOUT_CLASSIFICATION	1.994799546398889E-6	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999997796387	WITHOUT_CLASSIFICATION	2.2036137585335196E-10	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999826297037545	WITHOUT_CLASSIFICATION	1.737029624541973E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999993587	WITHOUT_CLASSIFICATION	6.412940947792226E-13	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999997538853953	WITHOUT_CLASSIFICATION	2.4611460465278505E-7	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999128781313106	WITHOUT_CLASSIFICATION	8.712186868943523E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9784122801040561	WITHOUT_CLASSIFICATION	0.021587719895943824	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9991972724046326	WITHOUT_CLASSIFICATION	8.027275953674675E-4	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999753440609	WITHOUT_CLASSIFICATION	2.4655939012639442E-8	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999938095451173	WITHOUT_CLASSIFICATION	6.190454882712394E-6	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999996085087901	WITHOUT_CLASSIFICATION	3.914912098962556E-7	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999627571170341	WITHOUT_CLASSIFICATION	3.724288296586224E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999904094549007	WITHOUT_CLASSIFICATION	9.59054509928778E-6	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999920290074	WITHOUT_CLASSIFICATION	7.970992668053097E-9	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999976657326323	WITHOUT_CLASSIFICATION	2.3342673676500014E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999873511053448	WITHOUT_CLASSIFICATION	1.2648894655238395E-5	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.8529427591120096	WITHOUT_CLASSIFICATION	0.14705724088799038	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999762525809949	WITHOUT_CLASSIFICATION	2.374741900512066E-5	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999775117680706	WITHOUT_CLASSIFICATION	2.248823192934944E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999785896939	WITHOUT_CLASSIFICATION	2.141030613377228E-8	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999969659592752	WITHOUT_CLASSIFICATION	3.0340407248568056E-6	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9991667195946153	WITHOUT_CLASSIFICATION	8.332804053846149E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999509953845132	WITHOUT_CLASSIFICATION	4.900461548680989E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.999509953845132	WITHOUT_CLASSIFICATION	4.900461548680989E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.999999997202415	WITHOUT_CLASSIFICATION	2.797585022838108E-9	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999957984539532	WITHOUT_CLASSIFICATION	4.2015460467978624E-5	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9932372355463446	WITHOUT_CLASSIFICATION	0.006762764453655468	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999987738099919	WITHOUT_CLASSIFICATION	1.2261900080433266E-6	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999458554323263	WITHOUT_CLASSIFICATION	5.414456767375239E-5	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999982294915885	WITHOUT_CLASSIFICATION	1.7705084115022869E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999980085064573	WITHOUT_CLASSIFICATION	1.9914935427103858E-6	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999860243852192	WITHOUT_CLASSIFICATION	1.3975614780780661E-5	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9762256139902449	DESIGN	0.023774386009755198	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995209527035	WITHOUT_CLASSIFICATION	4.79047296546544E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999424651762	WITHOUT_CLASSIFICATION	5.753482380561823E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9783477938607336	WITHOUT_CLASSIFICATION	0.021652206139266418	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999122082005	WITHOUT_CLASSIFICATION	8.779179958391334E-8	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999988833254473	WITHOUT_CLASSIFICATION	1.1166745527089529E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999355436595	WITHOUT_CLASSIFICATION	6.445634055728613E-8	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999656464030489	WITHOUT_CLASSIFICATION	3.435359695111372E-5	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9997555495575886	WITHOUT_CLASSIFICATION	2.444504424113771E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999998078736803	WITHOUT_CLASSIFICATION	1.9212631980933554E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999999315506459	WITHOUT_CLASSIFICATION	6.84493541410786E-8	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9994463179490057	WITHOUT_CLASSIFICATION	5.536820509941801E-4	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9756948169486467	WITHOUT_CLASSIFICATION	0.024305183051353322	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999957275546931	WITHOUT_CLASSIFICATION	4.272445306843622E-6	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9997733427560678	WITHOUT_CLASSIFICATION	2.2665724393215793E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9930295943785589	WITHOUT_CLASSIFICATION	0.006970405621441146	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9883929579372778	WITHOUT_CLASSIFICATION	0.011607042062722178	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997880300425118	WITHOUT_CLASSIFICATION	2.1196995748828135E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998018134096	WITHOUT_CLASSIFICATION	1.981865903817491E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999999151205	WITHOUT_CLASSIFICATION	8.487950277958432E-11	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999760181131	WITHOUT_CLASSIFICATION	2.398188697491036E-8	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998498733515188	WITHOUT_CLASSIFICATION	1.501266484811969E-4	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999881328874267	WITHOUT_CLASSIFICATION	1.1867112573279107E-5	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999855912533785	WITHOUT_CLASSIFICATION	1.4408746621478155E-5	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9998374480425618	WITHOUT_CLASSIFICATION	1.625519574381997E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998497134355	WITHOUT_CLASSIFICATION	1.502865644585088E-7	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999528971949031	WITHOUT_CLASSIFICATION	4.710280509685332E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.999998761738832	WITHOUT_CLASSIFICATION	1.2382611680893552E-6	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999999105786757	WITHOUT_CLASSIFICATION	8.942132435499303E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999998953708715	WITHOUT_CLASSIFICATION	1.0462912849155599E-7	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9996904238615462	WITHOUT_CLASSIFICATION	3.0957613845388165E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999942507448035	WITHOUT_CLASSIFICATION	5.749255196516513E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999463383218	WITHOUT_CLASSIFICATION	5.3661678261243884E-8	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999996289599388	WITHOUT_CLASSIFICATION	3.7104006125574373E-7	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999999842045513	WITHOUT_CLASSIFICATION	1.5795448702408864E-7	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999989051	WITHOUT_CLASSIFICATION	1.0948876209575474E-12	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999999962773997	WITHOUT_CLASSIFICATION	3.722600288263762E-8	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999623673406258	WITHOUT_CLASSIFICATION	3.7632659374250446E-5	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999999599855645	WITHOUT_CLASSIFICATION	4.001443559082622E-8	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999355504452	WITHOUT_CLASSIFICATION	6.444955473892373E-8	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999995963181	WITHOUT_CLASSIFICATION	4.0368179275242323E-10	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999999193906	WITHOUT_CLASSIFICATION	8.060944618821639E-11	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999856173018812	WITHOUT_CLASSIFICATION	1.4382698118778861E-5	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9992476479044246	WITHOUT_CLASSIFICATION	7.523520955754923E-4	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999999259006	WITHOUT_CLASSIFICATION	7.40994092889594E-11	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9992874343273266	WITHOUT_CLASSIFICATION	7.125656726733569E-4	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999981846690369	WITHOUT_CLASSIFICATION	1.8153309630019484E-6	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999999769764	WITHOUT_CLASSIFICATION	2.3023667543938027E-11	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999213591442	WITHOUT_CLASSIFICATION	7.864085575966387E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999996282474	WITHOUT_CLASSIFICATION	3.717526047082213E-10	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999999841785	WITHOUT_CLASSIFICATION	1.582152403116015E-11	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.7334306538297696	DESIGN	0.2665693461702305	WITHOUT_CLASSIFICATION
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999998703058094	WITHOUT_CLASSIFICATION	1.2969419055169696E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999889938276	WITHOUT_CLASSIFICATION	1.1006172393286703E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999744999842	WITHOUT_CLASSIFICATION	2.5500015763021842E-8	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999935951932	WITHOUT_CLASSIFICATION	6.4048067320076005E-9	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999999956745009	WITHOUT_CLASSIFICATION	4.3254990921503696E-8	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999986659159	WITHOUT_CLASSIFICATION	1.3340840485685404E-9	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999766652590365	WITHOUT_CLASSIFICATION	2.3334740963505967E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999744999842	WITHOUT_CLASSIFICATION	2.5500015763021842E-8	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999999653245027	WITHOUT_CLASSIFICATION	3.467549728411077E-8	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999995218290866	WITHOUT_CLASSIFICATION	4.781709133829405E-7	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999955836844274	WITHOUT_CLASSIFICATION	4.416315572599279E-5	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999993917355675	WITHOUT_CLASSIFICATION	6.082644324029217E-7	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999985340033646	WITHOUT_CLASSIFICATION	1.4659966353835812E-6	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998550155347301	WITHOUT_CLASSIFICATION	1.449844652698958E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999822524379	WITHOUT_CLASSIFICATION	1.7747562149818255E-8	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.999999336364531	WITHOUT_CLASSIFICATION	6.636354690350547E-7	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999952528705	WITHOUT_CLASSIFICATION	4.747129510821798E-8	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.99988821968216	WITHOUT_CLASSIFICATION	1.1178031784008318E-4	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999832381738173	WITHOUT_CLASSIFICATION	1.6761826182774596E-5	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.5546500816232662	DESIGN	0.4453499183767337	WITHOUT_CLASSIFICATION
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9998242083482705	WITHOUT_CLASSIFICATION	1.757916517295103E-4	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999540205677531	WITHOUT_CLASSIFICATION	4.597943224691671E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999980729146566	WITHOUT_CLASSIFICATION	1.9270853434281743E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999769619311969	WITHOUT_CLASSIFICATION	2.303806880303987E-5	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999990542579957	WITHOUT_CLASSIFICATION	9.457420041698532E-7	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999420629556	WITHOUT_CLASSIFICATION	5.79370443773719E-8	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999594969904562	WITHOUT_CLASSIFICATION	4.050300954381195E-5	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.8380782866273117	DESIGN	0.16192171337268838	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999941358430164	WITHOUT_CLASSIFICATION	5.864156983509618E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999993503737851	WITHOUT_CLASSIFICATION	6.496262148202521E-7	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999967620669079	WITHOUT_CLASSIFICATION	3.2379330920892126E-6	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999992742413	WITHOUT_CLASSIFICATION	7.257585740864239E-10	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999993527101	WITHOUT_CLASSIFICATION	6.472900207890804E-10	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.999999996174683	WITHOUT_CLASSIFICATION	3.825316924927329E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999914109867769	WITHOUT_CLASSIFICATION	8.589013223072138E-6	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999999846329867	WITHOUT_CLASSIFICATION	1.5367013298745965E-8	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9965707824386487	WITHOUT_CLASSIFICATION	0.003429217561351263	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999991334566775	WITHOUT_CLASSIFICATION	8.665433224176526E-7	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.999998676359441	WITHOUT_CLASSIFICATION	1.3236405590679147E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.971331892753557	WITHOUT_CLASSIFICATION	0.028668107246443034	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.998346617220608	WITHOUT_CLASSIFICATION	0.001653382779391885	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999408397946332	WITHOUT_CLASSIFICATION	5.916020536678212E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999755179841	WITHOUT_CLASSIFICATION	2.448201594398023E-8	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999498047314955	WITHOUT_CLASSIFICATION	5.019526850450711E-4	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999859817767018	WITHOUT_CLASSIFICATION	1.401822329816557E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9996148434727467	WITHOUT_CLASSIFICATION	3.851565272534141E-4	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999869382222	WITHOUT_CLASSIFICATION	1.3061777849914376E-8	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999987672085	WITHOUT_CLASSIFICATION	1.2327915666898757E-9	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999987011700382	WITHOUT_CLASSIFICATION	1.2988299618333168E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999987011700382	WITHOUT_CLASSIFICATION	1.2988299618333168E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9997840053586744	WITHOUT_CLASSIFICATION	2.1599464132571823E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.999999836014399	WITHOUT_CLASSIFICATION	1.639856008838309E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999949302384542	WITHOUT_CLASSIFICATION	5.069761545825305E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8926455808490883	DESIGN	0.10735441915091164	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999983553044847	WITHOUT_CLASSIFICATION	1.6446955152957837E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999983553044847	WITHOUT_CLASSIFICATION	1.6446955152957837E-6	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.999996197770652	WITHOUT_CLASSIFICATION	3.8022293479931686E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9998702855168001	WITHOUT_CLASSIFICATION	1.297144831998955E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962056046008603	WITHOUT_CLASSIFICATION	0.0037943953991397086	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998915314417816	WITHOUT_CLASSIFICATION	1.0846855821843225E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999998821939	WITHOUT_CLASSIFICATION	1.1780615425576726E-10	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999987924483893	WITHOUT_CLASSIFICATION	1.2075516107449779E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999892124374918	WITHOUT_CLASSIFICATION	1.0787562508126557E-5	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999997584115555	WITHOUT_CLASSIFICATION	2.415884444740702E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999110498379	WITHOUT_CLASSIFICATION	8.895016212421507E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978210077257	WITHOUT_CLASSIFICATION	2.178992274373957E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978210077257	WITHOUT_CLASSIFICATION	2.178992274373957E-6	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999535960741875	WITHOUT_CLASSIFICATION	4.6403925812471204E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999907982312589	WITHOUT_CLASSIFICATION	9.201768741145069E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999988451984047	WITHOUT_CLASSIFICATION	1.1548015953752706E-6	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9425260122930046	WITHOUT_CLASSIFICATION	0.057473987706995425	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.8806911027200627	WITHOUT_CLASSIFICATION	0.11930889727993736	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999894490298093	WITHOUT_CLASSIFICATION	1.0550970190703527E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976350231657	WITHOUT_CLASSIFICATION	2.364976834281217E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999999085613526	WITHOUT_CLASSIFICATION	9.143864740158648E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999831506253122	WITHOUT_CLASSIFICATION	1.6849374687739634E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9666729510303352	WITHOUT_CLASSIFICATION	0.03332704896966478	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9795963976687397	WITHOUT_CLASSIFICATION	0.020403602331260286	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.99988821968216	WITHOUT_CLASSIFICATION	1.1178031784008318E-4	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9966495879986385	WITHOUT_CLASSIFICATION	0.0033504120013615225	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9990494376184706	WITHOUT_CLASSIFICATION	9.505623815292001E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999999999311047	WITHOUT_CLASSIFICATION	6.889529087185157E-10	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999959888972221	WITHOUT_CLASSIFICATION	4.01110277797025E-6	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999937293326	WITHOUT_CLASSIFICATION	6.270667406413804E-9	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999982371896233	WITHOUT_CLASSIFICATION	1.762810376711725E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9941253881663776	WITHOUT_CLASSIFICATION	0.00587461183362233	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999287688688678	WITHOUT_CLASSIFICATION	7.123113113222919E-5	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999978333716626	WITHOUT_CLASSIFICATION	2.166628337464568E-6	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999516939287305	WITHOUT_CLASSIFICATION	4.83060712695379E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999516939287305	WITHOUT_CLASSIFICATION	4.83060712695379E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997573197789003	WITHOUT_CLASSIFICATION	2.4268022109981587E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999797715825	WITHOUT_CLASSIFICATION	2.0228417514279123E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9996032447329143	WITHOUT_CLASSIFICATION	3.9675526708573644E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999965345966906	WITHOUT_CLASSIFICATION	3.4654033094820053E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998866536481	WITHOUT_CLASSIFICATION	1.1334635193202663E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999978859601431	WITHOUT_CLASSIFICATION	2.1140398569001084E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999796068077931	WITHOUT_CLASSIFICATION	2.0393192206897546E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.99999707935062	WITHOUT_CLASSIFICATION	2.920649380045059E-6	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999566247584417	WITHOUT_CLASSIFICATION	4.3375241558205286E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999905369591688	WITHOUT_CLASSIFICATION	9.463040831272344E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621423513476	WITHOUT_CLASSIFICATION	3.785764865233636E-5	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9969758043900174	DESIGN	0.0030241956099825366	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.993160708707491	WITHOUT_CLASSIFICATION	0.0068392912925090525	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999672079805	WITHOUT_CLASSIFICATION	3.279201954833421E-8	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9981263103978308	WITHOUT_CLASSIFICATION	0.0018736896021692877	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999909480636834	WITHOUT_CLASSIFICATION	9.051936316617962E-6	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9639416516315222	WITHOUT_CLASSIFICATION	0.03605834836847782	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999995012610818	WITHOUT_CLASSIFICATION	4.987389182061366E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999984785566614	WITHOUT_CLASSIFICATION	1.5214433386380219E-6	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9319021224394813	WITHOUT_CLASSIFICATION	0.06809787756051865	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998273489230182	WITHOUT_CLASSIFICATION	1.7265107698190236E-4	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999987364731816	WITHOUT_CLASSIFICATION	1.2635268184457993E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9014447374478204	WITHOUT_CLASSIFICATION	0.09855526255217965	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999986511095389	WITHOUT_CLASSIFICATION	1.3488904611600894E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995671950972	WITHOUT_CLASSIFICATION	4.3280490289188546E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999995671950972	WITHOUT_CLASSIFICATION	4.3280490289188546E-7	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999458128805729	WITHOUT_CLASSIFICATION	5.4187119427063455E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9880071658942104	WITHOUT_CLASSIFICATION	0.011992834105789512	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999993839832294	WITHOUT_CLASSIFICATION	6.160167706449883E-7	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999992524395451	WITHOUT_CLASSIFICATION	7.475604548364011E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999909798226935	WITHOUT_CLASSIFICATION	9.020177306594264E-6	DESIGN
// todo : what else to do here?	DESIGN	0.96335765034009	WITHOUT_CLASSIFICATION	0.036642349659909944	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.997713321323383	WITHOUT_CLASSIFICATION	0.002286678676617038	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9848162521271133	WITHOUT_CLASSIFICATION	0.01518374787288678	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999613784620802	DESIGN	3.862153791974691E-5	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999613784620802	DESIGN	3.862153791974691E-5	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9986552198352826	WITHOUT_CLASSIFICATION	0.0013447801647174166	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996380544290383	WITHOUT_CLASSIFICATION	3.6194557096175093E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9602554559207241	WITHOUT_CLASSIFICATION	0.03974454407927589	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9973891887954817	DESIGN	0.002610811204518277	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9973891887954817	DESIGN	0.002610811204518277	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.999999994357507	DESIGN	5.642493016019533E-9	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.999999994357507	DESIGN	5.642493016019533E-9	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999994937627663	DESIGN	5.062372336697772E-7	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9743899763441317	DESIGN	0.025610023655868293	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9743899763441317	DESIGN	0.025610023655868293	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999998945712063	DESIGN	1.0542879371733798E-7	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996380544290383	WITHOUT_CLASSIFICATION	3.6194557096175093E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9705403833310452	WITHOUT_CLASSIFICATION	0.029459616668954705	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999719634167813	WITHOUT_CLASSIFICATION	2.8036583218756672E-5	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9998385626173916	WITHOUT_CLASSIFICATION	1.614373826084487E-4	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.986696323418975	DESIGN	0.013303676581024937	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.9998891081356541	DESIGN	1.1089186434580132E-4	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.86621216803867	DESIGN	0.1337878319613301	WITHOUT_CLASSIFICATION
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999987325357702	WITHOUT_CLASSIFICATION	1.2674642297757368E-6	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.994105891425407	WITHOUT_CLASSIFICATION	0.005894108574593027	DESIGN
// todo : what else to do here?	DESIGN	0.96335765034009	WITHOUT_CLASSIFICATION	0.036642349659909944	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9999258715118865	WITHOUT_CLASSIFICATION	7.412848811352878E-5	DESIGN
// todo : what else to do here?	DESIGN	0.96335765034009	WITHOUT_CLASSIFICATION	0.036642349659909944	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.6311929477510163	WITHOUT_CLASSIFICATION	0.36880705224898364	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.8000204304576484	WITHOUT_CLASSIFICATION	0.19997956954235155	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999999988985475	DESIGN	1.1014525331014079E-9	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.997713321323383	WITHOUT_CLASSIFICATION	0.002286678676617038	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9999994587972179	DESIGN	5.412027821250431E-7	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.6673137480544238	WITHOUT_CLASSIFICATION	0.33268625194557633	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.991100701594115	DESIGN	0.008899298405884931	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.6932136787754984	WITHOUT_CLASSIFICATION	0.3067863212245016	DESIGN
// todo : what is the implication of this?	DESIGN	0.6640989119196347	WITHOUT_CLASSIFICATION	0.3359010880803653	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9984232518717003	WITHOUT_CLASSIFICATION	0.0015767481282996506	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999948437307213	DESIGN	5.156269278667179E-6	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9999999085145658	DESIGN	9.148543428510511E-8	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9938059351815383	WITHOUT_CLASSIFICATION	0.006194064818461677	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9532757379508198	DESIGN	0.04672426204918016	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9970998864446385	DESIGN	0.0029001135553613985	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9999781339457344	DESIGN	2.1866054265623625E-5	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9528693140718822	DESIGN	0.04713068592811767	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.8968327177483761	DESIGN	0.10316728225162386	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9995476400745916	DESIGN	4.52359925408293E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999212544003	DESIGN	7.874559971641647E-8	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.9510075134203739	WITHOUT_CLASSIFICATION	0.04899248657962619	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.9510075134203739	WITHOUT_CLASSIFICATION	0.04899248657962619	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.998919758698255	DESIGN	0.0010802413017449893	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9989505731503396	DESIGN	0.0010494268496603564	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9866507631263879	DESIGN	0.013349236873612062	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9866507631263879	DESIGN	0.013349236873612062	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9866507631263879	DESIGN	0.013349236873612062	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9995476400745916	DESIGN	4.52359925408293E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9982118145108896	WITHOUT_CLASSIFICATION	0.001788185489110408	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9974273149853428	DESIGN	0.002572685014657305	WITHOUT_CLASSIFICATION
//note that i parameter is now unused (delete it?)	DESIGN	0.9104321245084682	DESIGN	0.0895678754915318	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9851977469164005	WITHOUT_CLASSIFICATION	0.014802253083599505	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8612511359050488	DESIGN	0.13874886409495124	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.878135049160877	WITHOUT_CLASSIFICATION	0.12186495083912297	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999613784620802	DESIGN	3.862153791974691E-5	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999613784620802	DESIGN	3.862153791974691E-5	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.8529001323547355	WITHOUT_CLASSIFICATION	0.14709986764526445	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9999613784620802	DESIGN	3.862153791974691E-5	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999997942063515	DESIGN	2.0579364842036812E-7	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9938071410815397	WITHOUT_CLASSIFICATION	0.006192858918460299	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.779978120614209	DESIGN	0.22002187938579107	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999924761187117	WITHOUT_CLASSIFICATION	7.5238812883165014E-6	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.7833811913714238	WITHOUT_CLASSIFICATION	0.21661880862857613	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9643236777198255	WITHOUT_CLASSIFICATION	0.03567632228017451	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9983394510031514	WITHOUT_CLASSIFICATION	0.001660548996848652	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.999995182723822	WITHOUT_CLASSIFICATION	4.817276177984336E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9986467552292003	WITHOUT_CLASSIFICATION	0.0013532447707996153	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9999392693541576	WITHOUT_CLASSIFICATION	6.07306458425587E-5	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9988613476794309	WITHOUT_CLASSIFICATION	0.001138652320569063	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9984454229444727	WITHOUT_CLASSIFICATION	0.0015545770555273058	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9437816317169168	WITHOUT_CLASSIFICATION	0.056218368283083145	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9837239217910269	WITHOUT_CLASSIFICATION	0.016276078208973054	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9911558219213505	WITHOUT_CLASSIFICATION	0.008844178078649467	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.7876283279902282	DESIGN	0.21237167200977178	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999909041236752	WITHOUT_CLASSIFICATION	9.095876324834228E-6	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9685999568845416	DESIGN	0.031400043115458465	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9719706627982346	DESIGN	0.02802933720176542	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.815330310861729	DESIGN	0.18466968913827098	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9999981666030977	DESIGN	1.8333969023657773E-6	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9990295985878379	WITHOUT_CLASSIFICATION	9.704014121621539E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9986436299069662	WITHOUT_CLASSIFICATION	0.0013563700930337116	DESIGN
//I suppose?	DESIGN	0.9920434709508098	WITHOUT_CLASSIFICATION	0.007956529049190118	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9999984075848326	DESIGN	1.592415167464443E-6	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.95555866706365	DESIGN	0.04444133293634999	WITHOUT_CLASSIFICATION
//TODO:refactor + make this method private	DESIGN	0.9999898481059887	DESIGN	1.0151894011310176E-5	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9961911054571392	WITHOUT_CLASSIFICATION	0.0038088945428608593	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999834294115607	DESIGN	1.6570588439270078E-5	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9999978192556391	DESIGN	2.180744360954136E-6	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9991667535614437	WITHOUT_CLASSIFICATION	8.332464385564214E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999998880337378	DESIGN	1.119662622706882E-7	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999998880337378	DESIGN	1.119662622706882E-7	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9987899990184149	DESIGN	0.0012100009815850913	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.7835808520196548	DESIGN	0.2164191479803453	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.7835808520196548	DESIGN	0.2164191479803453	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9999984998692509	DESIGN	1.500130749097862E-6	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9439354284484734	WITHOUT_CLASSIFICATION	0.056064571551526464	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9998824305357378	DESIGN	1.1756946426215574E-4	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9960680106904765	DESIGN	0.003931989309523582	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9969073059230543	WITHOUT_CLASSIFICATION	0.003092694076945676	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9999923027893308	DESIGN	7.69721066912701E-6	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9794328752739525	DESIGN	0.020567124726047457	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9994609521374926	DESIGN	5.390478625073225E-4	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9998508964890134	DESIGN	1.491035109865882E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9998467660217727	DESIGN	1.5323397822721317E-4	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.5645328143729536	DESIGN	0.4354671856270464	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.9999998961574778	DESIGN	1.0384252229919292E-7	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.6519432945291546	DESIGN	0.34805670547084544	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9977127262225453	DESIGN	0.0022872737774547723	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999987636107646	DESIGN	1.2363892353617501E-6	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9999906762678465	DESIGN	9.323732153396136E-6	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999914297909761	WITHOUT_CLASSIFICATION	8.57020902400421E-6	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.511597165285676	WITHOUT_CLASSIFICATION	0.488402834714324	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9999954469196214	DESIGN	4.5530803786849585E-6	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9107165607445304	WITHOUT_CLASSIFICATION	0.08928343925546954	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9999934636161155	DESIGN	6.5363838844830385E-6	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9999861259971877	DESIGN	1.3874002812208036E-5	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9996473356463141	DESIGN	3.5266435368586514E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9999998720982808	DESIGN	1.2790171921779228E-7	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999998809745781	DESIGN	1.1902542188981147E-7	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.97057811137383	DESIGN	0.02942188862616991	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.6978006548175802	WITHOUT_CLASSIFICATION	0.30219934518241975	DESIGN
//TODO: merge into one method!	DESIGN	0.9994119289767835	DESIGN	5.880710232163448E-4	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9996199533236212	DESIGN	3.800466763788172E-4	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.999999998673412	DESIGN	1.3265879761772995E-9	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999998826686358	DESIGN	1.1733136422023266E-7	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.5427018253831624	WITHOUT_CLASSIFICATION	0.45729817461683764	DESIGN
// TODO : better way?!?	DESIGN	0.9999999894458838	DESIGN	1.0554116103695183E-8	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999885846922997	WITHOUT_CLASSIFICATION	1.1415307700253603E-5	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9867810696522716	DESIGN	0.01321893034772829	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999997485022	DESIGN	2.5149782103872085E-10	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.999999820272397	DESIGN	1.7972760305787646E-7	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9998697741038476	DESIGN	1.3022589615240986E-4	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9700792920044964	DESIGN	0.0299207079955036	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999999961885605	WITHOUT_CLASSIFICATION	3.811439493470552E-9	DESIGN
//yuck!	DESIGN	0.8529001323547355	WITHOUT_CLASSIFICATION	0.14709986764526445	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9967386896155955	WITHOUT_CLASSIFICATION	0.0032613103844044197	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9761007220006925	DESIGN	0.02389927799930744	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9963873397214502	WITHOUT_CLASSIFICATION	0.0036126602785498487	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.999997955461259	DESIGN	2.0445387409969286E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9998363413745908	DESIGN	1.6365862540924274E-4	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999999999591169	DESIGN	4.088306918302571E-11	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9999613784620802	DESIGN	3.862153791974691E-5	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9914535890462837	WITHOUT_CLASSIFICATION	0.008546410953716277	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9517606822703645	WITHOUT_CLASSIFICATION	0.04823931772963545	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999943045543022	DESIGN	5.6954456978853745E-6	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999937685578798	WITHOUT_CLASSIFICATION	6.2314421202931E-6	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.7056022436805017	WITHOUT_CLASSIFICATION	0.2943977563194984	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999999996388885	DESIGN	3.6111150844912436E-10	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.5861930962137042	WITHOUT_CLASSIFICATION	0.4138069037862958	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9977594680757834	DESIGN	0.002240531924216463	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9984809667780704	DESIGN	0.0015190332219294771	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.996666374055556	DESIGN	0.00333362594444391	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9374351819509595	DESIGN	0.06256481804904038	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9990398806096792	WITHOUT_CLASSIFICATION	9.601193903209664E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9999239645412791	DESIGN	7.603545872090878E-5	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999999859254638	DESIGN	1.4074536164981138E-8	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9656108944115799	WITHOUT_CLASSIFICATION	0.034389105588420066	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9675515901782462	DESIGN	0.03244840982175383	WITHOUT_CLASSIFICATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9969162305738284	WITHOUT_CLASSIFICATION	0.0030837694261717286	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.9473449746553125	WITHOUT_CLASSIFICATION	0.05265502534468754	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.99969764856894	DESIGN	3.0235143105997034E-4	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.999999481469213	DESIGN	5.185307870121659E-7	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.999999969440473	DESIGN	3.055952698281748E-8	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8338651993088086	DESIGN	0.1661348006911913	WITHOUT_CLASSIFICATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9999778740066899	DESIGN	2.212599331006433E-5	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9748201250810946	DESIGN	0.025179874918905422	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9997758969517482	DESIGN	2.24103048251757E-4	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9800206358535614	WITHOUT_CLASSIFICATION	0.019979364146438618	DESIGN
// short-circuit for performance...	DESIGN	0.9999898691091882	WITHOUT_CLASSIFICATION	1.0130890811824208E-5	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9995367208863956	WITHOUT_CLASSIFICATION	4.632791136044165E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.8834608237468147	DESIGN	0.1165391762531854	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.7687815165260239	DESIGN	0.2312184834739761	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999851922161	DESIGN	1.4807783908582068E-8	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9999995972644167	DESIGN	4.027355833680408E-7	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9997664835088518	DESIGN	2.3351649114813086E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8926455808490883	DESIGN	0.10735441915091164	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9999868279329793	DESIGN	1.3172067020594961E-5	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9999961967982882	DESIGN	3.8032017117041857E-6	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.8527603164874837	DESIGN	0.14723968351251632	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.7138727406585517	DESIGN	0.2861272593414484	WITHOUT_CLASSIFICATION
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9999878668361611	DESIGN	1.2133163838808892E-5	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.7980474738549476	DESIGN	0.20195252614505238	WITHOUT_CLASSIFICATION
//TODO: inefficient	DESIGN	0.9999485412691949	DESIGN	5.1458730805066366E-5	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.799210320132735	DESIGN	0.20078967986726512	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999847248286111	DESIGN	1.5275171388924563E-5	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999998944883873	DESIGN	1.0551161263487565E-7	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999987627079934	DESIGN	1.2372920066310434E-6	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9993078145151427	DESIGN	6.92185484857238E-4	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999757192736933	WITHOUT_CLASSIFICATION	2.4280726306745047E-5	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.8808527617058133	DESIGN	0.11914723829418668	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.7587629687167046	DESIGN	0.2412370312832955	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.6401991807552774	DESIGN	0.3598008192447226	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9999996947010825	DESIGN	3.0529891753383257E-7	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999883806463	DESIGN	1.1619353717467813E-8	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.5035536515332742	WITHOUT_CLASSIFICATION	0.49644634846672575	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.999999121478583	DESIGN	8.785214169367209E-7	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8439210634636984	WITHOUT_CLASSIFICATION	0.15607893653630162	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.6057687158643684	WITHOUT_CLASSIFICATION	0.39423128413563174	DESIGN
//create an index on the key columns??	DESIGN	0.9999998668445333	WITHOUT_CLASSIFICATION	1.3315546664879452E-7	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9997287759893346	DESIGN	2.712240106653311E-4	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999998668445333	WITHOUT_CLASSIFICATION	1.3315546664879452E-7	DESIGN
//TODO: improve this hack!	DESIGN	0.999999999971946	DESIGN	2.8053985582853395E-11	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999984436865608	WITHOUT_CLASSIFICATION	1.556313439184152E-6	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9997291610560635	DESIGN	2.7083894393652744E-4	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9996459621499864	WITHOUT_CLASSIFICATION	3.5403785001355425E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9225495087071102	DESIGN	0.07745049129288983	WITHOUT_CLASSIFICATION
// create an index on the key columns??	DESIGN	0.9999999882621623	WITHOUT_CLASSIFICATION	1.173783758205986E-8	DESIGN
// todo : remove	DESIGN	0.9798021368488821	WITHOUT_CLASSIFICATION	0.020197863151117938	DESIGN
// todo : remove	DESIGN	0.9798021368488821	WITHOUT_CLASSIFICATION	0.020197863151117938	DESIGN
// todo : remove	DESIGN	0.9798021368488821	WITHOUT_CLASSIFICATION	0.020197863151117938	DESIGN
// todo : throw exception?	DESIGN	0.9103705843552234	WITHOUT_CLASSIFICATION	0.08962941564477657	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.7927175971505319	WITHOUT_CLASSIFICATION	0.20728240284946808	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.999255088560106	DESIGN	7.44911439893941E-4	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999998227842201	DESIGN	1.7721577999565023E-7	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9020392998547947	DESIGN	0.09796070014520529	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.999995819113806	DESIGN	4.180886194080178E-6	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9872883679990762	DESIGN	0.012711632000923822	WITHOUT_CLASSIFICATION
//TODO: copy/paste from recreate()	DESIGN	0.9874555263238431	DESIGN	0.012544473676156883	WITHOUT_CLASSIFICATION
//should this interface extend PropertyMapping?	DESIGN	0.6833262183100246	WITHOUT_CLASSIFICATION	0.3166737816899755	DESIGN
//ie. the subquery! yuck!	DESIGN	0.9623561773915046	WITHOUT_CLASSIFICATION	0.0376438226084954	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9998800755602565	DESIGN	1.1992443974353412E-4	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9976941902934299	DESIGN	0.002305809706570103	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999991183399	DESIGN	8.816600610614239E-10	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9847846313538624	DESIGN	0.015215368646137517	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9751709137198953	DESIGN	0.024829086280104704	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.9253783214372381	WITHOUT_CLASSIFICATION	0.07462167856276192	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.9443939063374454	WITHOUT_CLASSIFICATION	0.055606093662554756	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.7901136474242184	WITHOUT_CLASSIFICATION	0.2098863525757816	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999999261919897	DESIGN	7.380801022286873E-8	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9999974020590979	DESIGN	2.597940902047213E-6	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9999996691208828	DESIGN	3.308791171210701E-7	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9736992958185112	DESIGN	0.026300704181488773	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.999999655887243	DESIGN	3.4411275697338625E-7	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.6406939347945018	DESIGN	0.35930606520549824	WITHOUT_CLASSIFICATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9991932356051234	DESIGN	8.067643948765659E-4	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9999984830444937	DESIGN	1.51695550622907E-6	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999698520047311	DESIGN	3.0147995268933377E-5	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9999969401996042	DESIGN	3.0598003957760136E-6	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9966564620699347	DESIGN	0.0033435379300653894	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.978936527495265	WITHOUT_CLASSIFICATION	0.021063472504734865	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9998667517180656	WITHOUT_CLASSIFICATION	1.332482819344333E-4	DESIGN
//is this ok?	DESIGN	0.9843124210000532	WITHOUT_CLASSIFICATION	0.015687578999946727	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999993310404	DESIGN	6.689595210666225E-10	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9999997437574139	DESIGN	2.5624258614230596E-7	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9006676882775686	WITHOUT_CLASSIFICATION	0.09933231172243133	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999999999542303	DESIGN	4.576982683535205E-11	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8926455808490883	DESIGN	0.10735441915091164	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.996340390039748	DESIGN	0.0036596099602521155	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999999960407499	DESIGN	3.9592501834113184E-9	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9996945258004668	DESIGN	3.0547419953328044E-4	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9395163309696589	WITHOUT_CLASSIFICATION	0.060483669030341095	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9987851341105206	DESIGN	0.0012148658894793557	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999989806559395	DESIGN	1.0193440605953423E-6	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.8892709613802894	DESIGN	0.11072903861971067	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.999999737888534	DESIGN	2.621114660413138E-7	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.9307650614405893	DESIGN	0.06923493855941067	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9999944059444564	DESIGN	5.594055543533579E-6	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9998180428627665	DESIGN	1.8195713723335956E-4	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9998202154830598	DESIGN	1.7978451694032564E-4	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999998608231182	DESIGN	1.3917688181307073E-7	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.9310079844229069	WITHOUT_CLASSIFICATION	0.0689920155770931	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9541517793667879	DESIGN	0.04584822063321209	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9523476759246967	DESIGN	0.04765232407530337	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9847910332870552	DESIGN	0.01520896671294485	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999997817	DESIGN	2.1832739656080885E-13	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999998922124854	DESIGN	1.0778751454123478E-7	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9998297560763896	WITHOUT_CLASSIFICATION	1.7024392361042446E-4	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999999898754579	DESIGN	1.0124541994589785E-8	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9987036108168451	DESIGN	0.001296389183154848	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999965419689169	DESIGN	3.458031083044026E-6	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9971478148922667	WITHOUT_CLASSIFICATION	0.0028521851077333428	DESIGN
// short cut check...	DESIGN	0.9994633879531335	WITHOUT_CLASSIFICATION	5.366120468664617E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9462965228739387	WITHOUT_CLASSIFICATION	0.053703477126061376	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9999049604307554	DESIGN	9.503956924452487E-5	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9999999940410078	DESIGN	5.95899220703611E-9	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999999997045	DESIGN	2.9553080462376843E-13	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999996392584272	DESIGN	3.607415729138495E-7	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9998948132509653	WITHOUT_CLASSIFICATION	1.0518674903463443E-4	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9995721074357747	DESIGN	4.278925642251663E-4	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9568560200462984	WITHOUT_CLASSIFICATION	0.04314397995370165	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999998155538	DESIGN	1.8444631598285023E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9997997758867245	WITHOUT_CLASSIFICATION	2.0022411327544495E-4	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9999191557392233	DESIGN	8.08442607767335E-5	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9985650964564297	WITHOUT_CLASSIFICATION	0.0014349035435703072	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.5355663552043805	WITHOUT_CLASSIFICATION	0.46443364479561955	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999859552533703	WITHOUT_CLASSIFICATION	1.4044746629676233E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9827095350558284	DESIGN	0.01729046494417163	WITHOUT_CLASSIFICATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.999994786174127	DESIGN	5.213825873006433E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999798472552422	DESIGN	2.0152744757776032E-5	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.903153122017509	DESIGN	0.096846877982491	WITHOUT_CLASSIFICATION
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.7589204588605323	DESIGN	0.24107954113946778	WITHOUT_CLASSIFICATION
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9909087505552016	DESIGN	0.009091249444798426	WITHOUT_CLASSIFICATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9999749376121466	DESIGN	2.506238785340716E-5	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999998420840712	DESIGN	1.5791592877134227E-7	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.8507379226847112	DESIGN	0.14926207731528887	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9798021368488821	WITHOUT_CLASSIFICATION	0.020197863151117938	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9999930497959598	DESIGN	6.950204040128328E-6	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9999677421270365	DESIGN	3.225787296348379E-5	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999966745662727	DESIGN	3.3254337273995226E-6	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.5519785781205866	DESIGN	0.4480214218794133	WITHOUT_CLASSIFICATION
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999996739511631	DESIGN	3.26048836846209E-7	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9999123794683409	DESIGN	8.762053165920159E-5	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.8588521839671885	WITHOUT_CLASSIFICATION	0.1411478160328114	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9992638002553487	DESIGN	7.361997446512773E-4	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9999711038334608	DESIGN	2.889616653931738E-5	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9995680552469037	DESIGN	4.3194475309621264E-4	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.999997165968799	DESIGN	2.8340312010713345E-6	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.7174738177710812	WITHOUT_CLASSIFICATION	0.28252618222891873	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9999808797168128	DESIGN	1.9120283187100712E-5	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999995542964613	WITHOUT_CLASSIFICATION	4.4570353867770253E-7	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9996565138998653	DESIGN	3.434861001346756E-4	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9864283725923422	DESIGN	0.013571627407657888	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999999980091985	DESIGN	1.990801550403755E-9	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.8393178201947509	WITHOUT_CLASSIFICATION	0.1606821798052491	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9158380245588057	DESIGN	0.08416197544119419	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9998798710712006	DESIGN	1.2012892879945416E-4	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9992183330727243	DESIGN	7.816669272756381E-4	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999990183085	DESIGN	9.816914933268364E-10	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999999466174	DESIGN	5.338255241006684E-11	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.8897124575165571	DESIGN	0.11028754248344291	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9994003062102309	DESIGN	5.996937897691911E-4	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9127216359822021	DESIGN	0.08727836401779793	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9997555800270328	WITHOUT_CLASSIFICATION	2.444199729671822E-4	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999674849067	WITHOUT_CLASSIFICATION	3.251509321303251E-8	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999999012	DESIGN	9.87661651932034E-14	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9167085156864179	DESIGN	0.08329148431358216	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999820296960661	DESIGN	1.79703039339523E-5	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9999112680388551	DESIGN	8.873196114485801E-5	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.999996795973611	DESIGN	3.204026389016274E-6	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.6992637222899196	WITHOUT_CLASSIFICATION	0.30073627771008044	DESIGN
//TODO: is this really necessary????	DESIGN	0.9999698520047311	DESIGN	3.0147995268933377E-5	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.8828760030088671	DESIGN	0.11712399699113292	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999999702058486	DESIGN	2.97941513572123E-8	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.978936527495265	WITHOUT_CLASSIFICATION	0.021063472504734865	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9999997437574139	DESIGN	2.5624258614230596E-7	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9833349225249861	DESIGN	0.016665077475013907	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9973891887954817	DESIGN	0.002610811204518277	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9973891887954817	DESIGN	0.002610811204518277	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9973891887954817	DESIGN	0.002610811204518277	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999997987475006	DESIGN	2.0125249929941174E-7	WITHOUT_CLASSIFICATION
