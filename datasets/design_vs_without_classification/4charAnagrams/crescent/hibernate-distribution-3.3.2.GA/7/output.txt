//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999957857371342	WITHOUT_CLASSIFICATION	4.214262865725696E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999646028628584	WITHOUT_CLASSIFICATION	3.5397137141697196E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999646028628584	WITHOUT_CLASSIFICATION	3.5397137141697196E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9904749857054839	WITHOUT_CLASSIFICATION	0.009525014294516028	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999942723506181	WITHOUT_CLASSIFICATION	5.727649381962669E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999998387162127	WITHOUT_CLASSIFICATION	1.6128378727894566E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999887160527452	WITHOUT_CLASSIFICATION	1.1283947254786386E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999887160527452	WITHOUT_CLASSIFICATION	1.1283947254786386E-5	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999972713175906	WITHOUT_CLASSIFICATION	2.728682409323553E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999915859512	WITHOUT_CLASSIFICATION	8.414048803448326E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999971880996094	WITHOUT_CLASSIFICATION	2.81190039051788E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999888142941078	WITHOUT_CLASSIFICATION	1.118570589217204E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999352873270981	WITHOUT_CLASSIFICATION	6.471267290180983E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999352873270981	WITHOUT_CLASSIFICATION	6.471267290180983E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999945815605107	WITHOUT_CLASSIFICATION	5.418439489212825E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9986143945914436	WITHOUT_CLASSIFICATION	0.00138560540855627	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.999514308086404	WITHOUT_CLASSIFICATION	4.856919135960971E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9997449041518952	WITHOUT_CLASSIFICATION	2.550958481048018E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996264634634	WITHOUT_CLASSIFICATION	3.7353653662727605E-7	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997653717830891	WITHOUT_CLASSIFICATION	2.3462821691093276E-4	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999754219863296	WITHOUT_CLASSIFICATION	2.457801367033838E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999970834838502	WITHOUT_CLASSIFICATION	2.9165161498426987E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999773727924655	WITHOUT_CLASSIFICATION	2.2627207534572615E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9402354561765324	WITHOUT_CLASSIFICATION	0.05976454382346762	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999992090255103	WITHOUT_CLASSIFICATION	7.909744896973405E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999653902238336	WITHOUT_CLASSIFICATION	3.4609776166386886E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999895392912367	WITHOUT_CLASSIFICATION	1.0460708763364801E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999311255697795	WITHOUT_CLASSIFICATION	6.887443022045463E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999311255697795	WITHOUT_CLASSIFICATION	6.887443022045463E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999620756357037	WITHOUT_CLASSIFICATION	3.792436429624605E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999919567969776	WITHOUT_CLASSIFICATION	8.043203022417226E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.99999985106741	WITHOUT_CLASSIFICATION	1.4893258995538897E-7	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997565595631	WITHOUT_CLASSIFICATION	2.434404369875766E-7	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9726982506095686	DESIGN	0.027301749390431403	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.8924391459571072	DESIGN	0.10756085404289291	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8924391459571072	DESIGN	0.10756085404289291	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999990110905	WITHOUT_CLASSIFICATION	9.889095356352292E-10	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999999062973859	WITHOUT_CLASSIFICATION	9.370261411754675E-8	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999998018615	WITHOUT_CLASSIFICATION	1.9813849620560925E-10	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998274933002034	WITHOUT_CLASSIFICATION	1.7250669979661828E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999893961877011	WITHOUT_CLASSIFICATION	1.0603812298959887E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980234339387	WITHOUT_CLASSIFICATION	1.976566061367031E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921299999632	WITHOUT_CLASSIFICATION	7.870000036882309E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9998896505092545	WITHOUT_CLASSIFICATION	1.1034949074552624E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999634919547389	WITHOUT_CLASSIFICATION	3.650804526112126E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999945069420516	WITHOUT_CLASSIFICATION	5.4930579483956655E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999612899978927	WITHOUT_CLASSIFICATION	3.871000210718531E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999634919547389	WITHOUT_CLASSIFICATION	3.650804526112126E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999612899978927	WITHOUT_CLASSIFICATION	3.871000210718531E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999984574095361	WITHOUT_CLASSIFICATION	1.5425904639074726E-6	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9983171630091312	DESIGN	0.0016828369908688636	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999997457779523	WITHOUT_CLASSIFICATION	2.5422204773713553E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999872927686754	WITHOUT_CLASSIFICATION	1.2707231324638549E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999862221490251	WITHOUT_CLASSIFICATION	1.3777850974882752E-5	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9964196775808831	WITHOUT_CLASSIFICATION	0.0035803224191168805	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999082552682851	WITHOUT_CLASSIFICATION	9.174473171499452E-5	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9996649065938547	WITHOUT_CLASSIFICATION	3.3509340614527313E-4	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999984825677	WITHOUT_CLASSIFICATION	1.5174322786262445E-9	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9982983334465002	WITHOUT_CLASSIFICATION	0.001701666553499849	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999765242213026	WITHOUT_CLASSIFICATION	2.3475778697381578E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999953198939846	WITHOUT_CLASSIFICATION	4.680106015420245E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999949023065	WITHOUT_CLASSIFICATION	5.09769346234484E-9	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9993108650293815	WITHOUT_CLASSIFICATION	6.891349706184054E-4	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.7800087211791665	WITHOUT_CLASSIFICATION	0.21999127882083347	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9852122769635198	WITHOUT_CLASSIFICATION	0.014787723036480255	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999920265154116	WITHOUT_CLASSIFICATION	7.973484588262827E-6	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999997742654334	WITHOUT_CLASSIFICATION	2.2573456669199213E-7	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998106123779	WITHOUT_CLASSIFICATION	1.8938762206381777E-7	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999986195157	WITHOUT_CLASSIFICATION	1.3804843015101682E-8	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999944490580647	WITHOUT_CLASSIFICATION	5.550941935318889E-6	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993130249321	WITHOUT_CLASSIFICATION	6.869750679217458E-7	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999975248449121	WITHOUT_CLASSIFICATION	2.47515508790662E-6	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999124527909	WITHOUT_CLASSIFICATION	8.754720910542502E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.8951935515201335	DESIGN	0.10480644847986659	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996956789318	WITHOUT_CLASSIFICATION	3.0432106814443036E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999532041697	WITHOUT_CLASSIFICATION	4.679583044467013E-8	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.7820589828521485	DESIGN	0.2179410171478516	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999979841028	WITHOUT_CLASSIFICATION	2.0158972101605564E-9	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999999608267337	WITHOUT_CLASSIFICATION	3.917326629740888E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999994272873	WITHOUT_CLASSIFICATION	5.727126104114406E-10	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999918003179853	WITHOUT_CLASSIFICATION	8.199682014656748E-6	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998155456278703	WITHOUT_CLASSIFICATION	1.8445437212968364E-4	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999419782214	WITHOUT_CLASSIFICATION	5.8021778581731856E-8	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999346906139	WITHOUT_CLASSIFICATION	6.530938613065026E-8	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999992608646	WITHOUT_CLASSIFICATION	7.391353209134078E-10	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999999419782214	WITHOUT_CLASSIFICATION	5.8021778581731856E-8	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999990381042	WITHOUT_CLASSIFICATION	9.618957849478693E-10	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999959055619	WITHOUT_CLASSIFICATION	4.0944381427371565E-9	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999966958862698	WITHOUT_CLASSIFICATION	3.3041137301988947E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998321508038	WITHOUT_CLASSIFICATION	1.6784919628196338E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999819947045686	WITHOUT_CLASSIFICATION	1.800529543144626E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994619338353	WITHOUT_CLASSIFICATION	5.380661647587198E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994619338353	WITHOUT_CLASSIFICATION	5.380661647587198E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999795606830901	WITHOUT_CLASSIFICATION	2.0439316909838983E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999809036687793	WITHOUT_CLASSIFICATION	1.9096331220676715E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999720513733661	WITHOUT_CLASSIFICATION	2.7948626633831908E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999696766953823	WITHOUT_CLASSIFICATION	3.0323304617787935E-5	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999999159476037	WITHOUT_CLASSIFICATION	8.405239628451418E-8	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999996823245976	WITHOUT_CLASSIFICATION	3.176754024239199E-7	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999464029724	WITHOUT_CLASSIFICATION	5.359702761760515E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999757870274154	WITHOUT_CLASSIFICATION	2.4212972584580903E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999723892599477	WITHOUT_CLASSIFICATION	2.761074005230122E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999524217171	WITHOUT_CLASSIFICATION	4.757828289676877E-8	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999972229712243	WITHOUT_CLASSIFICATION	2.777028775616507E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999972229712243	WITHOUT_CLASSIFICATION	2.777028775616507E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999977697592	WITHOUT_CLASSIFICATION	2.2302407046023686E-9	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999922225673	WITHOUT_CLASSIFICATION	7.777432756406144E-9	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998385230744457	WITHOUT_CLASSIFICATION	1.6147692555434424E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999972229712243	WITHOUT_CLASSIFICATION	2.777028775616507E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999977697592	WITHOUT_CLASSIFICATION	2.2302407046023686E-9	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999977697592	WITHOUT_CLASSIFICATION	2.2302407046023686E-9	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999639699643693	WITHOUT_CLASSIFICATION	3.6030035630775706E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9998793805036823	WITHOUT_CLASSIFICATION	1.2061949631765534E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999949826968	WITHOUT_CLASSIFICATION	5.017303269188593E-9	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999894011276937	WITHOUT_CLASSIFICATION	1.0598872306171891E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999288598456186	WITHOUT_CLASSIFICATION	7.114015438128125E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999288598456186	WITHOUT_CLASSIFICATION	7.114015438128125E-5	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999999782310314	WITHOUT_CLASSIFICATION	2.1768968591256414E-8	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9993588305155603	WITHOUT_CLASSIFICATION	6.411694844396318E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999985525508833	WITHOUT_CLASSIFICATION	1.447449116639058E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999952624068998	WITHOUT_CLASSIFICATION	4.737593100217569E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999952624068998	WITHOUT_CLASSIFICATION	4.737593100217569E-6	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999568227561348	WITHOUT_CLASSIFICATION	4.31772438652349E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999982461497203	WITHOUT_CLASSIFICATION	1.7538502796355722E-6	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9997841373687518	WITHOUT_CLASSIFICATION	2.158626312482047E-4	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9998553940136635	WITHOUT_CLASSIFICATION	1.446059863364985E-4	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9997302901033378	WITHOUT_CLASSIFICATION	2.697098966621103E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999997921347875	WITHOUT_CLASSIFICATION	2.0786521247274308E-7	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999974574854447	WITHOUT_CLASSIFICATION	2.542514555283285E-6	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999983560648565	WITHOUT_CLASSIFICATION	1.6439351435032625E-5	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998032918240801	WITHOUT_CLASSIFICATION	1.9670817591987144E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9997841373687518	WITHOUT_CLASSIFICATION	2.158626312482047E-4	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9991076551784764	WITHOUT_CLASSIFICATION	8.92344821523691E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999418218537339	WITHOUT_CLASSIFICATION	5.817814626603143E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999418218537339	WITHOUT_CLASSIFICATION	5.817814626603143E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9997620059944138	WITHOUT_CLASSIFICATION	2.3799400558628583E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999458978673258	WITHOUT_CLASSIFICATION	5.4102132674096994E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9972979308957578	WITHOUT_CLASSIFICATION	0.0027020691042422464	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999653236210236	WITHOUT_CLASSIFICATION	3.4676378976341714E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997654949971632	WITHOUT_CLASSIFICATION	2.3450500283682355E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9936469010453453	WITHOUT_CLASSIFICATION	0.006353098954654818	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.999499022077241	WITHOUT_CLASSIFICATION	5.009779227590275E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999199165067034	WITHOUT_CLASSIFICATION	8.008349329654346E-5	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999548628395	WITHOUT_CLASSIFICATION	4.513716036158616E-8	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999548628395	WITHOUT_CLASSIFICATION	4.513716036158616E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999906237637272	WITHOUT_CLASSIFICATION	9.376236272902439E-6	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999957857371342	WITHOUT_CLASSIFICATION	4.214262865725696E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999994799241695	WITHOUT_CLASSIFICATION	5.200758304698839E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999969709513256	WITHOUT_CLASSIFICATION	3.0290486745130613E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999646028628584	WITHOUT_CLASSIFICATION	3.5397137141697196E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999991022049699	WITHOUT_CLASSIFICATION	8.977950300199465E-7	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999948154566818	WITHOUT_CLASSIFICATION	5.184543318148991E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999973609158084	WITHOUT_CLASSIFICATION	2.6390841916098788E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999998108621332	WITHOUT_CLASSIFICATION	1.891378667578035E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999996482407334	WITHOUT_CLASSIFICATION	3.517592665880811E-7	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999658088628319	WITHOUT_CLASSIFICATION	3.419113716800628E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999496136926578	WITHOUT_CLASSIFICATION	5.038630734232753E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999997690320584	WITHOUT_CLASSIFICATION	2.309679416481041E-7	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999942723506181	WITHOUT_CLASSIFICATION	5.727649381962669E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999991289201247	WITHOUT_CLASSIFICATION	8.710798754549149E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999991289201247	WITHOUT_CLASSIFICATION	8.710798754549149E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999982333891982	WITHOUT_CLASSIFICATION	1.7666108017615335E-6	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9754369320103886	WITHOUT_CLASSIFICATION	0.024563067989611376	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999889336361162	WITHOUT_CLASSIFICATION	1.1066363883800108E-5	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999987078109972	WITHOUT_CLASSIFICATION	1.292189002832488E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999986312263647	WITHOUT_CLASSIFICATION	1.3687736352591977E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999948882214024	WITHOUT_CLASSIFICATION	5.111778597608356E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999887160527452	WITHOUT_CLASSIFICATION	1.1283947254786386E-5	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999976667423698	WITHOUT_CLASSIFICATION	2.333257630202935E-5	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999968041243449	WITHOUT_CLASSIFICATION	3.1958756550453985E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999993524034713	WITHOUT_CLASSIFICATION	6.475965286622619E-7	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999999210257114	WITHOUT_CLASSIFICATION	7.89742885688528E-8	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999782594574539	WITHOUT_CLASSIFICATION	2.1740542546059652E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999969414264115	WITHOUT_CLASSIFICATION	3.0585735884543533E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999945977834956	WITHOUT_CLASSIFICATION	5.402216504359105E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999857492504	WITHOUT_CLASSIFICATION	1.4250749651810695E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999996286589241	WITHOUT_CLASSIFICATION	3.7134107587452607E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999853188324281	WITHOUT_CLASSIFICATION	1.4681167571940685E-5	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.999988157183983	WITHOUT_CLASSIFICATION	1.1842816016936571E-5	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999871563127307	WITHOUT_CLASSIFICATION	1.2843687269225378E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999444480343	WITHOUT_CLASSIFICATION	5.555196569988354E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999646028628584	WITHOUT_CLASSIFICATION	3.5397137141697196E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999646028628584	WITHOUT_CLASSIFICATION	3.5397137141697196E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999496136926578	WITHOUT_CLASSIFICATION	5.038630734232753E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999991289201247	WITHOUT_CLASSIFICATION	8.710798754549149E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999945977834956	WITHOUT_CLASSIFICATION	5.402216504359105E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999972713175906	WITHOUT_CLASSIFICATION	2.728682409323553E-6	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999977283745813	WITHOUT_CLASSIFICATION	2.271625418584895E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999882889549316	WITHOUT_CLASSIFICATION	1.1711045068313207E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999943395178575	WITHOUT_CLASSIFICATION	5.6604821423927904E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999996179703937	WITHOUT_CLASSIFICATION	3.8202960631667686E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999998692534838	WITHOUT_CLASSIFICATION	1.307465162319622E-7	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999990807076202	WITHOUT_CLASSIFICATION	9.192923797893624E-7	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999979908453205	WITHOUT_CLASSIFICATION	2.009154679532644E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999935190201121	WITHOUT_CLASSIFICATION	6.480979887759662E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9997623865010417	WITHOUT_CLASSIFICATION	2.3761349895829278E-4	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999793162345734	WITHOUT_CLASSIFICATION	2.068376542660187E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999793162345734	WITHOUT_CLASSIFICATION	2.068376542660187E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999997714701153	WITHOUT_CLASSIFICATION	2.285298846259216E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999999176912971	WITHOUT_CLASSIFICATION	8.230870290043545E-8	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9894565003165867	WITHOUT_CLASSIFICATION	0.010543499683413244	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.999996120168611	WITHOUT_CLASSIFICATION	3.879831389126031E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996582283449	WITHOUT_CLASSIFICATION	3.417716551777701E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999924804858439	WITHOUT_CLASSIFICATION	7.519514156175039E-6	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999828248161957	WITHOUT_CLASSIFICATION	1.7175183804239895E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999915859512	WITHOUT_CLASSIFICATION	8.414048803448326E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999976370517359	WITHOUT_CLASSIFICATION	2.362948264100217E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998152134618	WITHOUT_CLASSIFICATION	1.8478653821201684E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999998152134618	WITHOUT_CLASSIFICATION	1.8478653821201684E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999032995017	WITHOUT_CLASSIFICATION	9.670049829115849E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999912001334031	WITHOUT_CLASSIFICATION	8.799866596923248E-6	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999423913203	WITHOUT_CLASSIFICATION	5.760867966839782E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999994029538152	WITHOUT_CLASSIFICATION	5.970461848662818E-7	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999672880606427	WITHOUT_CLASSIFICATION	3.2711939357342676E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999646028628584	WITHOUT_CLASSIFICATION	3.5397137141697196E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999496136926578	WITHOUT_CLASSIFICATION	5.038630734232753E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999942723506181	WITHOUT_CLASSIFICATION	5.727649381962669E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999945977834956	WITHOUT_CLASSIFICATION	5.402216504359105E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999945977834956	WITHOUT_CLASSIFICATION	5.402216504359105E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999705185851	WITHOUT_CLASSIFICATION	2.9481414912254657E-8	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999705185851	WITHOUT_CLASSIFICATION	2.9481414912254657E-8	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999988961948025	WITHOUT_CLASSIFICATION	1.103805197488194E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999990128555677	WITHOUT_CLASSIFICATION	9.87144432260806E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999990128555677	WITHOUT_CLASSIFICATION	9.87144432260806E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999768353670032	WITHOUT_CLASSIFICATION	2.3164632996788487E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999786458825357	WITHOUT_CLASSIFICATION	2.1354117464222698E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999994242718487	WITHOUT_CLASSIFICATION	5.757281513214286E-7	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999989170625253	WITHOUT_CLASSIFICATION	1.0829374746742819E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999970132814396	WITHOUT_CLASSIFICATION	2.986718560366101E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999888142941078	WITHOUT_CLASSIFICATION	1.118570589217204E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999888142941078	WITHOUT_CLASSIFICATION	1.118570589217204E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999223776223932	WITHOUT_CLASSIFICATION	7.762237760680532E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999978531735595	WITHOUT_CLASSIFICATION	2.146826440494422E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999998592325445	WITHOUT_CLASSIFICATION	1.4076745555478976E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999916669187018	WITHOUT_CLASSIFICATION	8.333081298248606E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999996084749114	WITHOUT_CLASSIFICATION	3.9152508851835974E-7	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999321946051365	WITHOUT_CLASSIFICATION	6.78053948635262E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999352873270981	WITHOUT_CLASSIFICATION	6.471267290180983E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999964861980205	WITHOUT_CLASSIFICATION	3.5138019794921323E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999964861980205	WITHOUT_CLASSIFICATION	3.5138019794921323E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999945815605107	WITHOUT_CLASSIFICATION	5.418439489212825E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999945815605107	WITHOUT_CLASSIFICATION	5.418439489212825E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999941896436063	WITHOUT_CLASSIFICATION	5.810356393602572E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999941896436063	WITHOUT_CLASSIFICATION	5.810356393602572E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999998337656	WITHOUT_CLASSIFICATION	1.6623439755134892E-9	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999998337656	WITHOUT_CLASSIFICATION	1.6623439755134892E-9	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999888142941078	WITHOUT_CLASSIFICATION	1.118570589217204E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999352873270981	WITHOUT_CLASSIFICATION	6.471267290180983E-5	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999964861980205	WITHOUT_CLASSIFICATION	3.5138019794921323E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999964861980205	WITHOUT_CLASSIFICATION	3.5138019794921323E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999945815605107	WITHOUT_CLASSIFICATION	5.418439489212825E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999941896436063	WITHOUT_CLASSIFICATION	5.810356393602572E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999941896436063	WITHOUT_CLASSIFICATION	5.810356393602572E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.999999998337656	WITHOUT_CLASSIFICATION	1.6623439755134892E-9	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998401737076443	WITHOUT_CLASSIFICATION	1.598262923557232E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999513062902378	WITHOUT_CLASSIFICATION	4.869370976213162E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.99998016124288	WITHOUT_CLASSIFICATION	1.98387571198987E-5	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999998605933823	WITHOUT_CLASSIFICATION	1.3940661773877365E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.999676903908367	WITHOUT_CLASSIFICATION	3.2309609163287656E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999018284912916	WITHOUT_CLASSIFICATION	9.81715087083877E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9991460031405618	WITHOUT_CLASSIFICATION	8.539968594382457E-4	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.8840528617415411	DESIGN	0.11594713825845891	WITHOUT_CLASSIFICATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999578892811961	WITHOUT_CLASSIFICATION	4.2110718803790695E-5	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999975527678	WITHOUT_CLASSIFICATION	2.4472321932791733E-8	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999834805297	WITHOUT_CLASSIFICATION	1.6519470346314177E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999982564710859	WITHOUT_CLASSIFICATION	1.74352891401556E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999795606830901	WITHOUT_CLASSIFICATION	2.0439316909838983E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999018284912916	WITHOUT_CLASSIFICATION	9.81715087083877E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999500678986941	WITHOUT_CLASSIFICATION	4.993210130587961E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999500678986941	WITHOUT_CLASSIFICATION	4.993210130587961E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999531346435699	WITHOUT_CLASSIFICATION	4.6865356429954364E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999249072790933	WITHOUT_CLASSIFICATION	7.509272090661723E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999249072790933	WITHOUT_CLASSIFICATION	7.509272090661723E-5	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999983875588317	WITHOUT_CLASSIFICATION	1.6124411682248956E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9992669447627698	WITHOUT_CLASSIFICATION	7.330552372301729E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999996848235153	WITHOUT_CLASSIFICATION	3.1517648469737366E-7	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998862007799241	WITHOUT_CLASSIFICATION	1.1379922007596502E-4	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9998862007799241	WITHOUT_CLASSIFICATION	1.1379922007596502E-4	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999996264634634	WITHOUT_CLASSIFICATION	3.7353653662727605E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999847843958913	WITHOUT_CLASSIFICATION	1.5215604108765642E-5	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999847843958913	WITHOUT_CLASSIFICATION	1.5215604108765642E-5	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999907710949206	WITHOUT_CLASSIFICATION	9.22890507941406E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999992387409655	WITHOUT_CLASSIFICATION	7.61259034504192E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999950483921488	WITHOUT_CLASSIFICATION	4.9516078511952055E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999969393035104	WITHOUT_CLASSIFICATION	3.0606964895643434E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999783898209597	WITHOUT_CLASSIFICATION	2.1610179040256882E-5	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.999968309048405	WITHOUT_CLASSIFICATION	3.169095159516614E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997653717830891	WITHOUT_CLASSIFICATION	2.3462821691093276E-4	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999276355246475	WITHOUT_CLASSIFICATION	7.236447535258537E-5	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9781544780087219	WITHOUT_CLASSIFICATION	0.021845521991278132	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999934691895542	WITHOUT_CLASSIFICATION	6.53081044579064E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999951621795515	WITHOUT_CLASSIFICATION	4.837820448522259E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999773727924655	WITHOUT_CLASSIFICATION	2.2627207534572615E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.999997769102763	WITHOUT_CLASSIFICATION	2.2308972370950025E-6	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999930173254856	WITHOUT_CLASSIFICATION	6.982674514388913E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999995565383	WITHOUT_CLASSIFICATION	4.4346172574172765E-10	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999773727924655	WITHOUT_CLASSIFICATION	2.2627207534572615E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999992265154755	WITHOUT_CLASSIFICATION	7.73484524531309E-7	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999995719428081	WITHOUT_CLASSIFICATION	4.2805719182343166E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999874941275124	WITHOUT_CLASSIFICATION	1.2505872487545935E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999767189045955	WITHOUT_CLASSIFICATION	2.3281095404525788E-5	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999652002097875	WITHOUT_CLASSIFICATION	3.4799790212478145E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999792774794092	WITHOUT_CLASSIFICATION	2.072252059090278E-5	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999862619806809	WITHOUT_CLASSIFICATION	1.3738019319292076E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999653902238336	WITHOUT_CLASSIFICATION	3.4609776166386886E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999391819677823	WITHOUT_CLASSIFICATION	6.081803221759233E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999895392912367	WITHOUT_CLASSIFICATION	1.0460708763364801E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999996275053687	WITHOUT_CLASSIFICATION	3.7249463130014767E-6	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999947321337002	WITHOUT_CLASSIFICATION	5.2678662997734205E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999594369297472	WITHOUT_CLASSIFICATION	4.056307025272157E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9997653717830891	WITHOUT_CLASSIFICATION	2.3462821691093276E-4	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999391819677823	WITHOUT_CLASSIFICATION	6.081803221759233E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.999996275053687	WITHOUT_CLASSIFICATION	3.7249463130014767E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999594369297472	WITHOUT_CLASSIFICATION	4.056307025272157E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999572529258	WITHOUT_CLASSIFICATION	4.274707417687146E-8	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999947100268514	WITHOUT_CLASSIFICATION	5.289973148643135E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999801372343	WITHOUT_CLASSIFICATION	1.9862765570779906E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999311255697795	WITHOUT_CLASSIFICATION	6.887443022045463E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999955610969606	WITHOUT_CLASSIFICATION	4.4389030394224125E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999999317619971	WITHOUT_CLASSIFICATION	6.823800296013077E-8	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999936279979311	WITHOUT_CLASSIFICATION	6.372002068817071E-6	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998076883083077	WITHOUT_CLASSIFICATION	1.9231169169228342E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.999995864530709	WITHOUT_CLASSIFICATION	4.135469290911852E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999991340572	WITHOUT_CLASSIFICATION	8.659427246535818E-10	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992068291517	WITHOUT_CLASSIFICATION	7.931708483864521E-7	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9987183876539435	WITHOUT_CLASSIFICATION	0.0012816123460564252	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999989881615	WITHOUT_CLASSIFICATION	1.0118385140576785E-9	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999987167363366	WITHOUT_CLASSIFICATION	1.2832636633756511E-6	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999885522576355	WITHOUT_CLASSIFICATION	1.1447742364625165E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999587112974185	WITHOUT_CLASSIFICATION	4.128870258140135E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999919567969776	WITHOUT_CLASSIFICATION	8.043203022417226E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999998871107532	WITHOUT_CLASSIFICATION	1.1288924685147498E-7	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999529011236759	WITHOUT_CLASSIFICATION	4.709887632412708E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999391819677823	WITHOUT_CLASSIFICATION	6.081803221759233E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999999191056344	WITHOUT_CLASSIFICATION	8.089436559893398E-7	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999986241895248	WITHOUT_CLASSIFICATION	1.375810475153024E-6	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999676308578593	WITHOUT_CLASSIFICATION	3.236914214075497E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999350765756565	WITHOUT_CLASSIFICATION	6.492342434352789E-5	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999856432053742	WITHOUT_CLASSIFICATION	1.4356794625735698E-5	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999938252890583	WITHOUT_CLASSIFICATION	6.174710941591929E-6	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999895920094	WITHOUT_CLASSIFICATION	1.0407990623914931E-8	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999995264738722	WITHOUT_CLASSIFICATION	4.7352612772028597E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999569641296586	WITHOUT_CLASSIFICATION	4.303587034145713E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999771581248706	WITHOUT_CLASSIFICATION	2.2841875129366265E-5	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999987342368346	WITHOUT_CLASSIFICATION	1.2657631654675644E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999985046806836	WITHOUT_CLASSIFICATION	1.4953193163700101E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9996252674982881	WITHOUT_CLASSIFICATION	3.7473250171195287E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999997565595631	WITHOUT_CLASSIFICATION	2.434404369875766E-7	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999978318028403	WITHOUT_CLASSIFICATION	2.168197159754466E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999781707693635	WITHOUT_CLASSIFICATION	2.1829230636492716E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.999974853119508	WITHOUT_CLASSIFICATION	2.5146880492016126E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999992217364564	WITHOUT_CLASSIFICATION	7.782635435530147E-7	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999983071138899	WITHOUT_CLASSIFICATION	1.6928861100855412E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999881435483072	WITHOUT_CLASSIFICATION	1.1856451692759742E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999989941608	WITHOUT_CLASSIFICATION	1.0058391153612157E-9	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999922287693	WITHOUT_CLASSIFICATION	7.771230739183022E-9	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7681651239927332	DESIGN	0.23183487600726682	WITHOUT_CLASSIFICATION
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9995120016853103	WITHOUT_CLASSIFICATION	4.879983146897461E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997321182661775	WITHOUT_CLASSIFICATION	2.6788173382258617E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997321182661775	WITHOUT_CLASSIFICATION	2.6788173382258617E-4	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999857581168958	WITHOUT_CLASSIFICATION	1.4241883104232178E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999988612631504	WITHOUT_CLASSIFICATION	1.1387368495636108E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.999998903252243	WITHOUT_CLASSIFICATION	1.0967477569513171E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9982279459528857	WITHOUT_CLASSIFICATION	0.0017720540471143089	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9979658764738695	WITHOUT_CLASSIFICATION	0.002034123526130539	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9962187903170368	WITHOUT_CLASSIFICATION	0.003781209682963389	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999492032491673	WITHOUT_CLASSIFICATION	5.079675083289379E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999979510156937	WITHOUT_CLASSIFICATION	2.048984306237287E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9996812835639114	WITHOUT_CLASSIFICATION	3.187164360885593E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9996904952524696	WITHOUT_CLASSIFICATION	3.0950474753036036E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999968578284991	WITHOUT_CLASSIFICATION	3.142171500876183E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999788593516374	WITHOUT_CLASSIFICATION	2.1140648362592562E-5	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.911419206133861	WITHOUT_CLASSIFICATION	0.08858079386613897	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999999905976973	WITHOUT_CLASSIFICATION	9.402302727407257E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997330614626265	WITHOUT_CLASSIFICATION	2.669385373734566E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999764582628491	WITHOUT_CLASSIFICATION	2.3541737150908809E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999996515936302	WITHOUT_CLASSIFICATION	3.4840636985646264E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9997944568994453	WITHOUT_CLASSIFICATION	2.0554310055454465E-4	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9575393908117542	WITHOUT_CLASSIFICATION	0.0424606091882458	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9941389270579754	WITHOUT_CLASSIFICATION	0.005861072942024624	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999380518870855	WITHOUT_CLASSIFICATION	6.194811291445907E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999380518870855	WITHOUT_CLASSIFICATION	6.194811291445907E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9995749912610318	WITHOUT_CLASSIFICATION	4.2500873896814405E-4	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9995749912610318	WITHOUT_CLASSIFICATION	4.2500873896814405E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7681651239927332	DESIGN	0.23183487600726682	WITHOUT_CLASSIFICATION
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999937728341235	WITHOUT_CLASSIFICATION	6.2271658765267755E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998493276421069	WITHOUT_CLASSIFICATION	1.5067235789315917E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998644915881	WITHOUT_CLASSIFICATION	1.355084118833236E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999906237637272	WITHOUT_CLASSIFICATION	9.376236272902439E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998493276421069	WITHOUT_CLASSIFICATION	1.5067235789315917E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998644915881	WITHOUT_CLASSIFICATION	1.355084118833236E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991070678279	WITHOUT_CLASSIFICATION	8.929321720353208E-7	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999998754141984	WITHOUT_CLASSIFICATION	1.245858015662573E-7	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999891308528639	WITHOUT_CLASSIFICATION	1.0869147136099188E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999672192152119	WITHOUT_CLASSIFICATION	3.278078478809493E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9922131109874309	WITHOUT_CLASSIFICATION	0.007786889012569177	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9992768938765499	WITHOUT_CLASSIFICATION	7.231061234500238E-4	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999985383677812	WITHOUT_CLASSIFICATION	1.4616322187805122E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999589557233228	WITHOUT_CLASSIFICATION	4.104427667718925E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9989475113904696	WITHOUT_CLASSIFICATION	0.0010524886095304824	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999882798423	WITHOUT_CLASSIFICATION	1.172015771266793E-8	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999999329865796	WITHOUT_CLASSIFICATION	6.701342035535287E-8	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.99999017765511	WITHOUT_CLASSIFICATION	9.822344889868155E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999997831993149	WITHOUT_CLASSIFICATION	2.1680068507386726E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999377911627608	WITHOUT_CLASSIFICATION	6.22088372392181E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999906237637272	WITHOUT_CLASSIFICATION	9.376236272902439E-6	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999902854410349	WITHOUT_CLASSIFICATION	9.714558965092386E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999612282564325	WITHOUT_CLASSIFICATION	3.877174356750324E-4	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999612282564325	WITHOUT_CLASSIFICATION	3.877174356750324E-4	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9998501692738279	WITHOUT_CLASSIFICATION	1.498307261720988E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991070678279	WITHOUT_CLASSIFICATION	8.929321720353208E-7	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9981637116343586	WITHOUT_CLASSIFICATION	0.0018362883656414277	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9992161104075284	DESIGN	7.838895924716369E-4	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9994533809057656	WITHOUT_CLASSIFICATION	5.466190942343288E-4	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999507992886	WITHOUT_CLASSIFICATION	4.92007114421402E-8	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999977262595235	WITHOUT_CLASSIFICATION	2.2737404764996107E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991070678279	WITHOUT_CLASSIFICATION	8.929321720353208E-7	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999507992886	WITHOUT_CLASSIFICATION	4.92007114421402E-8	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.999977262595235	WITHOUT_CLASSIFICATION	2.2737404764996107E-5	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9989073176576508	WITHOUT_CLASSIFICATION	0.0010926823423491282	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999990824935174	WITHOUT_CLASSIFICATION	9.175064824755909E-7	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998900830563	WITHOUT_CLASSIFICATION	1.099169436569424E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991070678279	WITHOUT_CLASSIFICATION	8.929321720353208E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999991070678279	WITHOUT_CLASSIFICATION	8.929321720353208E-7	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999949891400802	WITHOUT_CLASSIFICATION	5.010859919806551E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999977167591387	WITHOUT_CLASSIFICATION	2.2832408612365377E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.999816446001744	WITHOUT_CLASSIFICATION	1.835539982560832E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999948643968726	WITHOUT_CLASSIFICATION	5.1356031274050965E-6	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999988348407596	WITHOUT_CLASSIFICATION	1.1651592403529792E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999999595918	WITHOUT_CLASSIFICATION	4.040820021781945E-11	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999802156464	WITHOUT_CLASSIFICATION	1.9784353656728798E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998328058111474	WITHOUT_CLASSIFICATION	1.671941888525175E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999993625115394	WITHOUT_CLASSIFICATION	6.374884605216576E-7	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9997466288310135	WITHOUT_CLASSIFICATION	2.5337116898648465E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999932972035339	WITHOUT_CLASSIFICATION	6.702796466071251E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999705449496373	WITHOUT_CLASSIFICATION	2.945505036269657E-5	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999994286833168	WITHOUT_CLASSIFICATION	5.713166830776078E-7	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9993801502553515	WITHOUT_CLASSIFICATION	6.198497446484967E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999143599806	WITHOUT_CLASSIFICATION	8.564001940617617E-8	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999999598917336	WITHOUT_CLASSIFICATION	4.0108266421660885E-8	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998274933002034	WITHOUT_CLASSIFICATION	1.7250669979661828E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9993934310327791	WITHOUT_CLASSIFICATION	6.065689672208621E-4	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9848823401906851	WITHOUT_CLASSIFICATION	0.015117659809314937	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999601942466	WITHOUT_CLASSIFICATION	3.9805753374119805E-8	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999957506483627	WITHOUT_CLASSIFICATION	4.2493516373154284E-6	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999789428266767	WITHOUT_CLASSIFICATION	2.105717332335114E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9999789428266767	WITHOUT_CLASSIFICATION	2.105717332335114E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998274933002034	WITHOUT_CLASSIFICATION	1.7250669979661828E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999965465325454	WITHOUT_CLASSIFICATION	3.4534674545528855E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9806651266828261	WITHOUT_CLASSIFICATION	0.01933487331717391	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9985895244322198	WITHOUT_CLASSIFICATION	0.00141047556778012	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999983385718028	WITHOUT_CLASSIFICATION	1.661428197305139E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999853368695455	WITHOUT_CLASSIFICATION	1.466313045441764E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999986777054992	WITHOUT_CLASSIFICATION	1.3222945007189825E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999180625360963	WITHOUT_CLASSIFICATION	8.193746390371026E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999886130661365	WITHOUT_CLASSIFICATION	1.1386933863488289E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999041034	WITHOUT_CLASSIFICATION	9.58966136973515E-11	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999927920807987	WITHOUT_CLASSIFICATION	7.207919201255054E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998993606849	WITHOUT_CLASSIFICATION	1.0063931511647986E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999576163765835	WITHOUT_CLASSIFICATION	4.2383623416425346E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.999991763123254	WITHOUT_CLASSIFICATION	8.236876746033762E-6	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999999990457454	WITHOUT_CLASSIFICATION	9.542546003166748E-9	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999981060227	WITHOUT_CLASSIFICATION	1.893977240591716E-9	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996995678294827	WITHOUT_CLASSIFICATION	3.00432170517408E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999997031412967	WITHOUT_CLASSIFICATION	2.968587031974023E-7	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999524206360617	WITHOUT_CLASSIFICATION	4.757936393835036E-5	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995995008976407	WITHOUT_CLASSIFICATION	4.0049910235926463E-4	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999992942720205	WITHOUT_CLASSIFICATION	7.057279795855936E-7	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999937319023439	WITHOUT_CLASSIFICATION	6.268097656157853E-6	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9999597539127755	WITHOUT_CLASSIFICATION	4.02460872246086E-5	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997496047972	WITHOUT_CLASSIFICATION	2.5039520275013834E-7	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999736876686196	WITHOUT_CLASSIFICATION	2.631233138028171E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767744733704	WITHOUT_CLASSIFICATION	2.3225526629554606E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999767061309327	WITHOUT_CLASSIFICATION	2.32938690673537E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984715881561	WITHOUT_CLASSIFICATION	1.528411843819965E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753106143037	WITHOUT_CLASSIFICATION	2.4689385696324214E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999641402236076	WITHOUT_CLASSIFICATION	3.5859776392374656E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991808018888	WITHOUT_CLASSIFICATION	8.191981113310868E-7	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999797805062591	WITHOUT_CLASSIFICATION	2.0219493740828276E-5	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9999883556554731	WITHOUT_CLASSIFICATION	1.1644344526830317E-5	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996832951261	WITHOUT_CLASSIFICATION	3.1670487382809225E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930997024901	WITHOUT_CLASSIFICATION	6.900297509874339E-6	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999737839969959	WITHOUT_CLASSIFICATION	2.6216003004085937E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999179870152	WITHOUT_CLASSIFICATION	8.201298483399546E-8	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998549646026604	WITHOUT_CLASSIFICATION	1.4503539733945123E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977141809111	WITHOUT_CLASSIFICATION	2.2858190887952983E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970467754807	WITHOUT_CLASSIFICATION	2.953224519203875E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942424827982	WITHOUT_CLASSIFICATION	5.757517201738034E-6	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999999811911128	WITHOUT_CLASSIFICATION	1.8808887254233257E-8	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999451847771	WITHOUT_CLASSIFICATION	5.481522286589067E-8	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.7089287496098375	WITHOUT_CLASSIFICATION	0.29107125039016246	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999035612292476	WITHOUT_CLASSIFICATION	9.643877075232717E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.999999991569678	WITHOUT_CLASSIFICATION	8.430321998182671E-9	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985297790596608	WITHOUT_CLASSIFICATION	0.0014702209403392485	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999719716248451	WITHOUT_CLASSIFICATION	2.802837515493923E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999959198519315	WITHOUT_CLASSIFICATION	4.080148068551519E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.8466169897908145	WITHOUT_CLASSIFICATION	0.15338301020918552	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999789942502006	WITHOUT_CLASSIFICATION	2.100574979932929E-5	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999859671042098	WITHOUT_CLASSIFICATION	1.4032895790239607E-5	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999755182718174	WITHOUT_CLASSIFICATION	2.4481728182568563E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9991588818123881	WITHOUT_CLASSIFICATION	8.411181876118298E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999815119979376	WITHOUT_CLASSIFICATION	1.848800206233827E-5	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999994976059393	WITHOUT_CLASSIFICATION	5.023940606104524E-7	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9996971105539847	WITHOUT_CLASSIFICATION	3.0288944601523644E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9999527582617468	WITHOUT_CLASSIFICATION	4.7241738253151994E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999141348112327	WITHOUT_CLASSIFICATION	8.586518876730956E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999219122363442	WITHOUT_CLASSIFICATION	7.808776365580154E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996462914227	WITHOUT_CLASSIFICATION	3.537085772033393E-7	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988609166226	WITHOUT_CLASSIFICATION	1.139083377382887E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999955931357	WITHOUT_CLASSIFICATION	4.406864300065138E-7	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999940018497935	WITHOUT_CLASSIFICATION	5.9981502065677344E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9966919759444749	WITHOUT_CLASSIFICATION	0.0033080240555251857	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999997768807	WITHOUT_CLASSIFICATION	2.2311939843361568E-10	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999896308250662	WITHOUT_CLASSIFICATION	1.0369174933865137E-5	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999946990439287	WITHOUT_CLASSIFICATION	5.300956071425097E-6	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995377112376	WITHOUT_CLASSIFICATION	4.6228876246968353E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999999171948795	WITHOUT_CLASSIFICATION	8.280512057325704E-8	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9967486387950784	WITHOUT_CLASSIFICATION	0.0032513612049216494	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999996748914444	WITHOUT_CLASSIFICATION	3.251085556468981E-7	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999906701409854	WITHOUT_CLASSIFICATION	9.32985901450327E-6	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999783533572868	WITHOUT_CLASSIFICATION	2.1646642713213704E-5	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9990989669232989	WITHOUT_CLASSIFICATION	9.010330767010264E-4	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999936891193647	WITHOUT_CLASSIFICATION	6.310880635256667E-6	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9997583616578639	WITHOUT_CLASSIFICATION	2.4163834213621204E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985297790596608	WITHOUT_CLASSIFICATION	0.0014702209403392485	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999776572889615	WITHOUT_CLASSIFICATION	2.2342711038510345E-5	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999992529203346	WITHOUT_CLASSIFICATION	7.470796652847421E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999981829919953	WITHOUT_CLASSIFICATION	1.8170080046233692E-6	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9991924745382761	WITHOUT_CLASSIFICATION	8.07525461723866E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999990593373425	WITHOUT_CLASSIFICATION	9.406626575736302E-7	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999988914320848	WITHOUT_CLASSIFICATION	1.1085679151771748E-6	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.99846937734016	WITHOUT_CLASSIFICATION	0.0015306226598400428	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9994918384490384	WITHOUT_CLASSIFICATION	5.081615509616139E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999574381123684	WITHOUT_CLASSIFICATION	4.2561887631555166E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999987974247448	WITHOUT_CLASSIFICATION	1.2025752551454608E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999998291993023	WITHOUT_CLASSIFICATION	1.7080069769729447E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999986642979605	WITHOUT_CLASSIFICATION	1.3357020395158596E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999752730418817	WITHOUT_CLASSIFICATION	2.472695811820859E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9991732175756911	WITHOUT_CLASSIFICATION	8.267824243089294E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999952032490989	WITHOUT_CLASSIFICATION	4.796750901237949E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999751244977021	WITHOUT_CLASSIFICATION	2.4875502297913368E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999275083115303	WITHOUT_CLASSIFICATION	7.249168846964023E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999899348711484	WITHOUT_CLASSIFICATION	1.0065128851644162E-5	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999701863506	WITHOUT_CLASSIFICATION	2.9813649412936E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999999754293515	WITHOUT_CLASSIFICATION	2.4570648408671582E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999922801405305	WITHOUT_CLASSIFICATION	7.719859469497008E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999992326112214	WITHOUT_CLASSIFICATION	7.673887787261571E-7	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.996821911384094	WITHOUT_CLASSIFICATION	0.0031780886159059876	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999999443368762	WITHOUT_CLASSIFICATION	5.566312376945033E-8	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9994216220460983	WITHOUT_CLASSIFICATION	5.783779539016585E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999994588362925	WITHOUT_CLASSIFICATION	5.411637074714187E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9402354561765324	WITHOUT_CLASSIFICATION	0.05976454382346762	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999984025980454	WITHOUT_CLASSIFICATION	1.5974019545376294E-6	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999988503338232	WITHOUT_CLASSIFICATION	1.1496661767341746E-6	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999715860688982	WITHOUT_CLASSIFICATION	2.8413931101723013E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985297790596608	WITHOUT_CLASSIFICATION	0.0014702209403392485	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9999292379613982	WITHOUT_CLASSIFICATION	7.076203860178672E-5	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999856393172782	WITHOUT_CLASSIFICATION	1.4360682721680382E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9935986677473656	WITHOUT_CLASSIFICATION	0.006401332252634371	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985297790596608	WITHOUT_CLASSIFICATION	0.0014702209403392485	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9997724464332252	WITHOUT_CLASSIFICATION	2.2755356677473903E-4	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999922801405305	WITHOUT_CLASSIFICATION	7.719859469497008E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9991857881977826	WITHOUT_CLASSIFICATION	8.142118022175273E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9959174076946504	WITHOUT_CLASSIFICATION	0.004082592305349587	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9987867748767492	WITHOUT_CLASSIFICATION	0.001213225123250913	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999987974247448	WITHOUT_CLASSIFICATION	1.2025752551454608E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999998291993023	WITHOUT_CLASSIFICATION	1.7080069769729447E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999986642979605	WITHOUT_CLASSIFICATION	1.3357020395158596E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999892691227	WITHOUT_CLASSIFICATION	1.073087739593879E-8	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999960937403228	WITHOUT_CLASSIFICATION	3.9062596771608324E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999992670717225	WITHOUT_CLASSIFICATION	7.329282775224293E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999034113786756	WITHOUT_CLASSIFICATION	9.658862132442352E-5	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999991236745623	WITHOUT_CLASSIFICATION	8.763254377608072E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9985297790596608	WITHOUT_CLASSIFICATION	0.0014702209403392485	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999752730418817	WITHOUT_CLASSIFICATION	2.472695811820859E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9991732175756911	WITHOUT_CLASSIFICATION	8.267824243089294E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787776465393	WITHOUT_CLASSIFICATION	2.122235346069842E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999674533949	WITHOUT_CLASSIFICATION	3.254660510318889E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999680672069	WITHOUT_CLASSIFICATION	3.193279305355205E-8	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999031773367	WITHOUT_CLASSIFICATION	9.682266338023039E-8	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9990929631236708	WITHOUT_CLASSIFICATION	9.070368763292823E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9949858008592943	WITHOUT_CLASSIFICATION	0.005014199140705751	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942424827982	WITHOUT_CLASSIFICATION	5.757517201738034E-6	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9999865237183471	WITHOUT_CLASSIFICATION	1.3476281652829937E-5	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9980033463453448	WITHOUT_CLASSIFICATION	0.0019966536546551185	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9977576683799197	WITHOUT_CLASSIFICATION	0.0022423316200801805	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999989137906852	WITHOUT_CLASSIFICATION	1.0862093148522695E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999396305514	WITHOUT_CLASSIFICATION	6.036944854618173E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984715881561	WITHOUT_CLASSIFICATION	1.528411843819965E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753106143037	WITHOUT_CLASSIFICATION	2.4689385696324214E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930997024901	WITHOUT_CLASSIFICATION	6.900297509874339E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999396305514	WITHOUT_CLASSIFICATION	6.036944854618173E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999473159940148	WITHOUT_CLASSIFICATION	5.268400598525715E-5	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999999670395017	WITHOUT_CLASSIFICATION	3.2960498341502666E-8	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988543261814	WITHOUT_CLASSIFICATION	1.1456738186534489E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997310740655	WITHOUT_CLASSIFICATION	2.689259344950197E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999525049941738	WITHOUT_CLASSIFICATION	4.749500582613015E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997656583264325	WITHOUT_CLASSIFICATION	2.343416735674546E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999737839969959	WITHOUT_CLASSIFICATION	2.6216003004085937E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977141809111	WITHOUT_CLASSIFICATION	2.2858190887952983E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999906701409854	WITHOUT_CLASSIFICATION	9.32985901450327E-6	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9909176797479128	WITHOUT_CLASSIFICATION	0.009082320252087165	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.999950941299117	WITHOUT_CLASSIFICATION	4.90587008829178E-5	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999996846156597	WITHOUT_CLASSIFICATION	3.1538434038659344E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999980569266534	WITHOUT_CLASSIFICATION	1.9430733465723352E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999906117964179	WITHOUT_CLASSIFICATION	9.388203582176508E-6	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999897603832	WITHOUT_CLASSIFICATION	1.0239616946129948E-8	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9997660559605885	WITHOUT_CLASSIFICATION	2.339440394115255E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999041034	WITHOUT_CLASSIFICATION	9.58966136973515E-11	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999980161912533	WITHOUT_CLASSIFICATION	1.9838087466965666E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999972426301598	WITHOUT_CLASSIFICATION	2.7573698402106118E-5	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999999688338689	WITHOUT_CLASSIFICATION	3.116613124416937E-8	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999999616203149	WITHOUT_CLASSIFICATION	3.8379685094731894E-7	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999912263104682	WITHOUT_CLASSIFICATION	8.773689531776341E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998729257855913	WITHOUT_CLASSIFICATION	1.2707421440864974E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885445492962	WITHOUT_CLASSIFICATION	1.1455450703790803E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999990058432566	WITHOUT_CLASSIFICATION	9.941567433988787E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999979325906158	WITHOUT_CLASSIFICATION	2.067409384298259E-6	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999912166079219	WITHOUT_CLASSIFICATION	8.783392078103402E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.998897649641113	WITHOUT_CLASSIFICATION	0.0011023503588869273	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999933397690765	WITHOUT_CLASSIFICATION	6.660230923558089E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999997681745343	WITHOUT_CLASSIFICATION	2.318254656946843E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999940554293358	WITHOUT_CLASSIFICATION	5.944570664157088E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999925381206295	WITHOUT_CLASSIFICATION	7.461879370509724E-6	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999096082001141	WITHOUT_CLASSIFICATION	9.039179988588939E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999500665674748	WITHOUT_CLASSIFICATION	4.993343252514544E-5	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999819648849052	WITHOUT_CLASSIFICATION	1.8035115094839105E-5	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999835730234411	WITHOUT_CLASSIFICATION	1.6426976558897235E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999922125099175	WITHOUT_CLASSIFICATION	7.787490082423642E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893716188172	WITHOUT_CLASSIFICATION	1.062838118287365E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999088723470619	WITHOUT_CLASSIFICATION	9.112765293803914E-5	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999999407516	WITHOUT_CLASSIFICATION	5.924839071132412E-11	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999996894555517	WITHOUT_CLASSIFICATION	3.105444482667268E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999995255215666	WITHOUT_CLASSIFICATION	4.7447843340918037E-7	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9975475920084266	WITHOUT_CLASSIFICATION	0.0024524079915734234	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9931331435917083	WITHOUT_CLASSIFICATION	0.006866856408291662	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999785324166	WITHOUT_CLASSIFICATION	2.1467583405352898E-8	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999739729553	WITHOUT_CLASSIFICATION	2.602704475267027E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999996918921733	WITHOUT_CLASSIFICATION	3.0810782666971134E-7	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999999011960532	WITHOUT_CLASSIFICATION	9.880394679540322E-8	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9968055319828525	WITHOUT_CLASSIFICATION	0.0031944680171476043	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997737179450208	WITHOUT_CLASSIFICATION	2.2628205497927137E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999922500485	WITHOUT_CLASSIFICATION	7.749951471272126E-9	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999998575725474	WITHOUT_CLASSIFICATION	1.4242745267509143E-7	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999989587912621	WITHOUT_CLASSIFICATION	1.0412087379069357E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.999999994393935	WITHOUT_CLASSIFICATION	5.606064986476483E-9	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999904114670295	WITHOUT_CLASSIFICATION	9.588532970470409E-6	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999290212152	WITHOUT_CLASSIFICATION	7.097878489092176E-8	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999999998170442	WITHOUT_CLASSIFICATION	1.8295579693695623E-9	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9870341392475093	WITHOUT_CLASSIFICATION	0.012965860752490727	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999978367993642	WITHOUT_CLASSIFICATION	2.1632006357908723E-6	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.997304572863488	WITHOUT_CLASSIFICATION	0.0026954271365120567	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.999997814899834	WITHOUT_CLASSIFICATION	2.185100166011185E-6	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999683583303426	WITHOUT_CLASSIFICATION	3.164166965738177E-5	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9946786436455078	WITHOUT_CLASSIFICATION	0.005321356354492156	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999946824099639	WITHOUT_CLASSIFICATION	5.317590036088965E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999406236366	WITHOUT_CLASSIFICATION	5.937636334199453E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999761437938081	WITHOUT_CLASSIFICATION	2.385620619192488E-5	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.999997633828556	WITHOUT_CLASSIFICATION	2.3661714439404422E-6	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999983716137169	WITHOUT_CLASSIFICATION	1.6283862830857816E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999995642014445	WITHOUT_CLASSIFICATION	4.3579855538307417E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999879948159361	WITHOUT_CLASSIFICATION	1.2005184063813375E-5	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999998968348938	WITHOUT_CLASSIFICATION	1.0316510619330335E-6	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999999999030493	WITHOUT_CLASSIFICATION	9.695069340284468E-10	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9688064107564853	WITHOUT_CLASSIFICATION	0.03119358924351461	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999964202686992	WITHOUT_CLASSIFICATION	3.5797313008506204E-6	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999992317372705	WITHOUT_CLASSIFICATION	7.682627295417046E-7	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.999993191615311	WITHOUT_CLASSIFICATION	6.8083846890348145E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999978485749138	WITHOUT_CLASSIFICATION	2.151425086131953E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9992750560733451	WITHOUT_CLASSIFICATION	7.249439266548974E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999496583783015	WITHOUT_CLASSIFICATION	5.0341621698533343E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999249049142901	WITHOUT_CLASSIFICATION	7.50950857099232E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9781870186674404	WITHOUT_CLASSIFICATION	0.021812981332559545	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999900116606119	WITHOUT_CLASSIFICATION	9.988339388141863E-6	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.802706952514526	WITHOUT_CLASSIFICATION	0.19729304748547397	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.999999954527	WITHOUT_CLASSIFICATION	4.547300003319874E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9944572090986319	WITHOUT_CLASSIFICATION	0.00554279090136821	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9995251766965264	WITHOUT_CLASSIFICATION	4.748233034735782E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9995201511094661	WITHOUT_CLASSIFICATION	4.798488905338521E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9997139152279981	WITHOUT_CLASSIFICATION	2.860847720018945E-4	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998642269488175	WITHOUT_CLASSIFICATION	1.357730511823841E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999283937942847	WITHOUT_CLASSIFICATION	7.160620571528905E-5	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999419797216	WITHOUT_CLASSIFICATION	5.8020278335561785E-8	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999999949168034	WITHOUT_CLASSIFICATION	5.083196609302412E-8	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9903740197270294	WITHOUT_CLASSIFICATION	0.009625980272970675	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999972410303201	WITHOUT_CLASSIFICATION	2.758969680010544E-6	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999999999234025	WITHOUT_CLASSIFICATION	7.659749471493706E-10	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999855874392	WITHOUT_CLASSIFICATION	1.4412560914816365E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999613643927218	WITHOUT_CLASSIFICATION	3.863560727828168E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9970169611362977	WITHOUT_CLASSIFICATION	0.002983038863702251	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997720720817	WITHOUT_CLASSIFICATION	2.2792791826963096E-7	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.98009955447411	WITHOUT_CLASSIFICATION	0.01990044552588995	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999989434779112	WITHOUT_CLASSIFICATION	1.0565220888178345E-6	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.999285752601145	WITHOUT_CLASSIFICATION	7.142473988550185E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9999667663613699	WITHOUT_CLASSIFICATION	3.323363863007063E-5	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999888426238657	WITHOUT_CLASSIFICATION	1.1157376134422877E-5	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.999861597654163	WITHOUT_CLASSIFICATION	1.3840234583693684E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999928459522653	WITHOUT_CLASSIFICATION	7.154047734750792E-6	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999944003442273	WITHOUT_CLASSIFICATION	5.599655772732081E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999801297584588	WITHOUT_CLASSIFICATION	1.987024154115808E-5	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9997226504533759	WITHOUT_CLASSIFICATION	2.773495466240025E-4	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999916755725337	WITHOUT_CLASSIFICATION	8.324427466354364E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9999801297584588	WITHOUT_CLASSIFICATION	1.987024154115808E-5	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999934189627954	WITHOUT_CLASSIFICATION	6.58103720460525E-6	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999564501338571	WITHOUT_CLASSIFICATION	4.3549866142818146E-5	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999989403085783	WITHOUT_CLASSIFICATION	1.0596914216500024E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999991458574553	WITHOUT_CLASSIFICATION	8.541425446694453E-7	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999971181051647	WITHOUT_CLASSIFICATION	2.881894835251752E-6	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998966764851	WITHOUT_CLASSIFICATION	1.0332351493087322E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998100234422166	WITHOUT_CLASSIFICATION	1.89976557783417E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999998598193705	WITHOUT_CLASSIFICATION	1.4018062958933814E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999909882260819	WITHOUT_CLASSIFICATION	9.011773918042005E-6	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999000179317505	WITHOUT_CLASSIFICATION	9.99820682494216E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999998098464115	WITHOUT_CLASSIFICATION	1.9015358845091334E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.999998660532559	WITHOUT_CLASSIFICATION	1.3394674410447847E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999769448199916	WITHOUT_CLASSIFICATION	2.305518000840231E-5	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999999823428	WITHOUT_CLASSIFICATION	1.765719680309661E-11	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999845533642231	WITHOUT_CLASSIFICATION	1.5446635776846918E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9803578018832118	WITHOUT_CLASSIFICATION	0.019642198116788294	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999133190931748	WITHOUT_CLASSIFICATION	8.668090682521455E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999133190931748	WITHOUT_CLASSIFICATION	8.668090682521455E-5	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999915172716579	WITHOUT_CLASSIFICATION	8.48272834205019E-6	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.999986198697702	WITHOUT_CLASSIFICATION	1.3801302298032706E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999982909151218	WITHOUT_CLASSIFICATION	1.7090848781852148E-6	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9999176882021965	WITHOUT_CLASSIFICATION	8.231179780343282E-5	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999983663774809	WITHOUT_CLASSIFICATION	1.6336225191046244E-6	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.997597978479883	DESIGN	0.002402021520117087	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999919287696892	WITHOUT_CLASSIFICATION	8.071230310832154E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999999703353208	WITHOUT_CLASSIFICATION	2.966467920081867E-7	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9998750861428674	WITHOUT_CLASSIFICATION	1.2491385713257449E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999730799101872	WITHOUT_CLASSIFICATION	2.692008981275875E-5	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9971550924305569	WITHOUT_CLASSIFICATION	0.002844907569443071	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999958805363017	WITHOUT_CLASSIFICATION	4.119463698278257E-6	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999901694589913	WITHOUT_CLASSIFICATION	9.830541008779655E-6	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9904870643895178	WITHOUT_CLASSIFICATION	0.009512935610482153	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999994891847301	WITHOUT_CLASSIFICATION	5.108152698053752E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9998729257855913	WITHOUT_CLASSIFICATION	1.2707421440864974E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999999168338605	WITHOUT_CLASSIFICATION	8.316613951165403E-8	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999986884019035	WITHOUT_CLASSIFICATION	1.3115980963819305E-6	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9993564668580192	WITHOUT_CLASSIFICATION	6.435331419808864E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999975399643364	WITHOUT_CLASSIFICATION	2.4600356635997993E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999120451157271	WITHOUT_CLASSIFICATION	8.795488427295375E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999779628789274	WITHOUT_CLASSIFICATION	2.2037121072568874E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999823747596561	WITHOUT_CLASSIFICATION	1.762524034379283E-5	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999994949397332	WITHOUT_CLASSIFICATION	5.050602669129211E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999033153032	WITHOUT_CLASSIFICATION	9.668469679268629E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999993427983257	WITHOUT_CLASSIFICATION	6.572016742562091E-7	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999975592222707	WITHOUT_CLASSIFICATION	2.440777729198964E-6	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.8470135059285601	WITHOUT_CLASSIFICATION	0.15298649407144	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999891825598003	WITHOUT_CLASSIFICATION	1.0817440199667225E-5	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.999990259110932	WITHOUT_CLASSIFICATION	9.74088906806073E-6	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999992908763194	WITHOUT_CLASSIFICATION	7.091236804672366E-7	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999964280703341	WITHOUT_CLASSIFICATION	3.571929665894363E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9997684878342605	WITHOUT_CLASSIFICATION	2.3151216573949642E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999990724199674	WITHOUT_CLASSIFICATION	9.275800325798257E-7	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999629980896777	WITHOUT_CLASSIFICATION	3.700191032230872E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999991514838558	WITHOUT_CLASSIFICATION	8.485161441120106E-7	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999986232290562	WITHOUT_CLASSIFICATION	1.3767709437787941E-6	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9976813865844444	WITHOUT_CLASSIFICATION	0.002318613415555569	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999984147779	WITHOUT_CLASSIFICATION	1.5852220114195512E-9	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999456210666174	WITHOUT_CLASSIFICATION	5.4378933382504005E-5	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998590747927697	WITHOUT_CLASSIFICATION	1.4092520723032299E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999992706142392	WITHOUT_CLASSIFICATION	7.293857608159007E-7	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.99998094497406	WITHOUT_CLASSIFICATION	1.905502594002638E-5	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999998676909607	WITHOUT_CLASSIFICATION	1.3230903923588068E-7	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999983373515118	WITHOUT_CLASSIFICATION	1.6626484882636308E-6	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999980446400275	WITHOUT_CLASSIFICATION	1.955359972544262E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998680390777996	WITHOUT_CLASSIFICATION	1.3196092220035474E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999939428912	WITHOUT_CLASSIFICATION	6.057108784585488E-9	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999122915403	WITHOUT_CLASSIFICATION	8.770845969656566E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9992919555103393	WITHOUT_CLASSIFICATION	7.080444896605246E-4	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99999998820707	WITHOUT_CLASSIFICATION	1.1792929992646574E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999865331309	WITHOUT_CLASSIFICATION	1.3466869167221372E-8	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999901780345406	WITHOUT_CLASSIFICATION	9.821965459483127E-6	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999541556868636	WITHOUT_CLASSIFICATION	4.5844313136317254E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652865350374	WITHOUT_CLASSIFICATION	3.471346496259309E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999541556868636	WITHOUT_CLASSIFICATION	4.5844313136317254E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9127768178611375	WITHOUT_CLASSIFICATION	0.08722318213886254	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9984189262464845	WITHOUT_CLASSIFICATION	0.0015810737535153952	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9998196216138004	WITHOUT_CLASSIFICATION	1.8037838619965296E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999997911941234	WITHOUT_CLASSIFICATION	2.0880587659804286E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999852182960471	WITHOUT_CLASSIFICATION	1.4781703952793919E-5	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999995006500783	WITHOUT_CLASSIFICATION	4.993499216747516E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999999781975722	WITHOUT_CLASSIFICATION	2.180242780144886E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999957924074	WITHOUT_CLASSIFICATION	4.207592693853042E-9	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999948354597735	WITHOUT_CLASSIFICATION	5.164540226437218E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998434945476425	WITHOUT_CLASSIFICATION	1.5650545235751425E-4	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9998708347246874	WITHOUT_CLASSIFICATION	1.2916527531260896E-4	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9999973906560938	WITHOUT_CLASSIFICATION	2.6093439060926603E-6	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9957802150247762	WITHOUT_CLASSIFICATION	0.004219784975223722	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9999498278489551	WITHOUT_CLASSIFICATION	5.017215104493128E-5	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.999787917416037	WITHOUT_CLASSIFICATION	2.1208258396295999E-4	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999951358995356	WITHOUT_CLASSIFICATION	4.864100464342786E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998098123118487	WITHOUT_CLASSIFICATION	1.901876881513004E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998098123118487	WITHOUT_CLASSIFICATION	1.901876881513004E-4	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9999089000001724	WITHOUT_CLASSIFICATION	9.109999982756783E-5	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999999999882229	WITHOUT_CLASSIFICATION	1.1777094946888805E-10	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998661592341	WITHOUT_CLASSIFICATION	1.3384076581617637E-7	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998070137284	WITHOUT_CLASSIFICATION	1.9298627155055028E-7	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9948242030305533	WITHOUT_CLASSIFICATION	0.005175796969446702	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999818313678415	WITHOUT_CLASSIFICATION	1.816863215852108E-5	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9992617336273468	WITHOUT_CLASSIFICATION	7.382663726531837E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999830137232386	WITHOUT_CLASSIFICATION	1.6986276761469106E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.999993473441588	WITHOUT_CLASSIFICATION	6.526558412006372E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999288132977	WITHOUT_CLASSIFICATION	7.118670225845182E-8	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999997292227246	WITHOUT_CLASSIFICATION	2.7077727541526965E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999959175406886	WITHOUT_CLASSIFICATION	4.082459311354328E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999993590075	WITHOUT_CLASSIFICATION	6.40992554437692E-10	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999998864149985	WITHOUT_CLASSIFICATION	1.1358500142478778E-7	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999740225762195	WITHOUT_CLASSIFICATION	2.5977423780463465E-5	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999997183891398	WITHOUT_CLASSIFICATION	2.8161086013637595E-7	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9995700514013335	WITHOUT_CLASSIFICATION	4.299485986665058E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9998873618871849	WITHOUT_CLASSIFICATION	1.1263811281520966E-4	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999073789813085	WITHOUT_CLASSIFICATION	9.26210186914576E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999619328582	WITHOUT_CLASSIFICATION	3.8067141829048494E-8	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999992448666124	WITHOUT_CLASSIFICATION	7.551333875644077E-7	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999996922355155	WITHOUT_CLASSIFICATION	3.077644844792144E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999991547422845	WITHOUT_CLASSIFICATION	8.452577154090862E-7	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9893300954628991	WITHOUT_CLASSIFICATION	0.010669904537100981	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999998244426358	WITHOUT_CLASSIFICATION	1.755573640784787E-7	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.999978703666127	WITHOUT_CLASSIFICATION	2.1296333873110044E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998887660834	WITHOUT_CLASSIFICATION	1.1123391662723158E-7	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.8496461885171024	WITHOUT_CLASSIFICATION	0.15035381148289764	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999305291034607	WITHOUT_CLASSIFICATION	6.947089653938518E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998450757673847	WITHOUT_CLASSIFICATION	1.5492423261525713E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999833154174084	WITHOUT_CLASSIFICATION	1.668458259164367E-5	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999799913479533	WITHOUT_CLASSIFICATION	2.0008652046628282E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999894264423467	WITHOUT_CLASSIFICATION	1.0573557653270146E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998862131290918	WITHOUT_CLASSIFICATION	1.1378687090827793E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999974598343241	WITHOUT_CLASSIFICATION	2.540165675931323E-6	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999897674973122	WITHOUT_CLASSIFICATION	1.0232502687788842E-5	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999892227950758	WITHOUT_CLASSIFICATION	1.0777204924088332E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9997434158071101	WITHOUT_CLASSIFICATION	2.565841928897962E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9761048137429603	WITHOUT_CLASSIFICATION	0.02389518625703973	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999998696356878	WITHOUT_CLASSIFICATION	1.3036431224201559E-7	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999796442338	WITHOUT_CLASSIFICATION	2.035576618705754E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999917596593	WITHOUT_CLASSIFICATION	8.240340703332192E-9	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998073696204826	WITHOUT_CLASSIFICATION	1.9263037951735063E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9986363019704073	WITHOUT_CLASSIFICATION	0.001363698029592655	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999045461008	WITHOUT_CLASSIFICATION	9.545389917820678E-8	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999755117975139	WITHOUT_CLASSIFICATION	2.4488202486069846E-5	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.938042421864758	WITHOUT_CLASSIFICATION	0.06195757813524199	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999964549251141	WITHOUT_CLASSIFICATION	3.5450748858863154E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999980518392128	WITHOUT_CLASSIFICATION	1.9481607872408496E-6	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999625110212405	WITHOUT_CLASSIFICATION	3.748897875947767E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999804362748	WITHOUT_CLASSIFICATION	1.9563725091722853E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999986923543541	WITHOUT_CLASSIFICATION	1.307645645859515E-6	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999594642025	WITHOUT_CLASSIFICATION	4.053579751850066E-8	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999970893545012	WITHOUT_CLASSIFICATION	2.9106454987302316E-6	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999576707327313	WITHOUT_CLASSIFICATION	4.2329267268660295E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9997724464332252	WITHOUT_CLASSIFICATION	2.2755356677473903E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9997724464332252	WITHOUT_CLASSIFICATION	2.2755356677473903E-4	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999989600249	WITHOUT_CLASSIFICATION	1.0399751880341164E-9	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9965343740279542	WITHOUT_CLASSIFICATION	0.003465625972045912	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999268117464455	WITHOUT_CLASSIFICATION	7.318825355450747E-5	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.999971379537206	WITHOUT_CLASSIFICATION	2.862046279387115E-5	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999888552471	WITHOUT_CLASSIFICATION	1.1144752882035125E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999997751477982	WITHOUT_CLASSIFICATION	2.2485220179737104E-6	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999583646413948	WITHOUT_CLASSIFICATION	4.1635358605242876E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999994596038915	WITHOUT_CLASSIFICATION	5.403961084884595E-7	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999905399044048	WITHOUT_CLASSIFICATION	9.4600955952759E-6	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999139437467	WITHOUT_CLASSIFICATION	8.605625325667774E-8	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999993890414633	WITHOUT_CLASSIFICATION	6.109585367006644E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997673491146483	WITHOUT_CLASSIFICATION	2.3265088535185643E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999971338467124	WITHOUT_CLASSIFICATION	2.8661532876286643E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999949600870348	WITHOUT_CLASSIFICATION	5.039912965080187E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5715180645995066	DESIGN	0.4284819354004934	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998254673660231	WITHOUT_CLASSIFICATION	1.7453263397705765E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999766111872155	WITHOUT_CLASSIFICATION	2.3388812784536425E-5	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999051378059589	WITHOUT_CLASSIFICATION	9.486219404104658E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9917322384025606	WITHOUT_CLASSIFICATION	0.008267761597439317	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.999997401675428	WITHOUT_CLASSIFICATION	2.59832457201004E-6	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999956357273098	WITHOUT_CLASSIFICATION	4.364272690289871E-6	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999999279481803	WITHOUT_CLASSIFICATION	7.205181976626795E-8	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990827417671764	WITHOUT_CLASSIFICATION	9.172582328236546E-4	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999777797948659	WITHOUT_CLASSIFICATION	2.22202051340273E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9057269551131026	WITHOUT_CLASSIFICATION	0.09427304488689729	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9996631465529343	DESIGN	3.368534470657592E-4	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999429157167599	WITHOUT_CLASSIFICATION	5.708428324016694E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.8882415810240845	WITHOUT_CLASSIFICATION	0.11175841897591553	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999998534531555	WITHOUT_CLASSIFICATION	1.4654684447514748E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990827417671764	WITHOUT_CLASSIFICATION	9.172582328236546E-4	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999830497667908	WITHOUT_CLASSIFICATION	1.6950233209225753E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9931362884642284	WITHOUT_CLASSIFICATION	0.0068637115357716464	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9997147088086679	WITHOUT_CLASSIFICATION	2.852911913321582E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9998778559502264	WITHOUT_CLASSIFICATION	1.2214404977359302E-4	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999992668181141	WITHOUT_CLASSIFICATION	7.331818858877904E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.999655220673334	WITHOUT_CLASSIFICATION	3.4477932666607123E-4	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9980422172322442	WITHOUT_CLASSIFICATION	0.0019577827677557847	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999909351491538	WITHOUT_CLASSIFICATION	9.064850846175393E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999753484425341	WITHOUT_CLASSIFICATION	2.4651557465870363E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9998778559502264	WITHOUT_CLASSIFICATION	1.2214404977359302E-4	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.999980496491438	WITHOUT_CLASSIFICATION	1.9503508562018997E-5	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999457281418781	WITHOUT_CLASSIFICATION	5.427185812199672E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999340146149269	WITHOUT_CLASSIFICATION	6.598538507306234E-5	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997664357921364	WITHOUT_CLASSIFICATION	2.3356420786367475E-4	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999999754722912	WITHOUT_CLASSIFICATION	2.4527708761437878E-8	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.999997292227246	WITHOUT_CLASSIFICATION	2.7077727541526965E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999940374436	WITHOUT_CLASSIFICATION	5.962556350745892E-9	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999978697002322	WITHOUT_CLASSIFICATION	2.1302997677665384E-6	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9990442649973668	WITHOUT_CLASSIFICATION	9.557350026332492E-4	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9998336523328137	WITHOUT_CLASSIFICATION	1.663476671862394E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.762704645199583	WITHOUT_CLASSIFICATION	0.2372953548004169	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.999902504789915	WITHOUT_CLASSIFICATION	9.749521008495653E-5	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9948865887680295	WITHOUT_CLASSIFICATION	0.005113411231970545	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999969580488185	WITHOUT_CLASSIFICATION	3.0419511815300394E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999555089707274	WITHOUT_CLASSIFICATION	4.449102927255455E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999934930834685	WITHOUT_CLASSIFICATION	6.506916531420732E-6	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9966938093704139	WITHOUT_CLASSIFICATION	0.0033061906295861142	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999957338338246	WITHOUT_CLASSIFICATION	4.266166175512929E-6	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999899620773999	WITHOUT_CLASSIFICATION	1.0037922600094335E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9997890079960117	WITHOUT_CLASSIFICATION	2.1099200398823825E-4	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999812362781808	WITHOUT_CLASSIFICATION	1.8763721819154964E-5	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999994394173364	WITHOUT_CLASSIFICATION	5.60582663683509E-7	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999998342261942	WITHOUT_CLASSIFICATION	1.657738057597973E-7	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999966446084977	WITHOUT_CLASSIFICATION	3.3553915023351705E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999973071877553	WITHOUT_CLASSIFICATION	2.692812244707639E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9703977045152019	WITHOUT_CLASSIFICATION	0.02960229548479802	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999968709417087	WITHOUT_CLASSIFICATION	3.129058291228711E-6	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998990819201	WITHOUT_CLASSIFICATION	1.009180799021889E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998204528862	WITHOUT_CLASSIFICATION	1.7954711376123928E-7	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999922218008666	WITHOUT_CLASSIFICATION	7.778199133472804E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999951065209265	WITHOUT_CLASSIFICATION	4.893479073558267E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.994035604588915	WITHOUT_CLASSIFICATION	0.0059643954110849455	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999943179445401	WITHOUT_CLASSIFICATION	5.682055459969471E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783928362307	WITHOUT_CLASSIFICATION	2.1607163769249814E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993612541851	WITHOUT_CLASSIFICATION	6.387458150088418E-7	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.8817586584037065	WITHOUT_CLASSIFICATION	0.11824134159629358	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999321708656574	WITHOUT_CLASSIFICATION	6.7829134342555E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999997743909139	WITHOUT_CLASSIFICATION	2.256090862037154E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978486491401	WITHOUT_CLASSIFICATION	2.151350859821442E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978486491401	WITHOUT_CLASSIFICATION	2.151350859821442E-6	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999980410151831	WITHOUT_CLASSIFICATION	1.958984816829041E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999752031329595	WITHOUT_CLASSIFICATION	2.479686704060904E-5	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999998726724072	WITHOUT_CLASSIFICATION	1.2732759283361773E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999801467580608	WITHOUT_CLASSIFICATION	1.9853241939245474E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999943253477864	WITHOUT_CLASSIFICATION	5.674652213539961E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.7360429646555992	WITHOUT_CLASSIFICATION	0.26395703534440085	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9958827734463848	WITHOUT_CLASSIFICATION	0.004117226553615289	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999992320119332	WITHOUT_CLASSIFICATION	7.679880668440455E-7	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999562111304	WITHOUT_CLASSIFICATION	4.3788869725184065E-8	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999704330913	WITHOUT_CLASSIFICATION	2.9566908667714156E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999998479048416	WITHOUT_CLASSIFICATION	1.5209515832456643E-7	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999970379225943	WITHOUT_CLASSIFICATION	2.9620774057087862E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999999386438396	WITHOUT_CLASSIFICATION	6.135616040169301E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978486491401	WITHOUT_CLASSIFICATION	2.151350859821442E-6	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999684146810432	WITHOUT_CLASSIFICATION	3.158531895677236E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998451282851836	WITHOUT_CLASSIFICATION	1.5487171481640719E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.997172013231625	WITHOUT_CLASSIFICATION	0.0028279867683749546	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999992462293585	WITHOUT_CLASSIFICATION	7.53770641400981E-7	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999628269540568	WITHOUT_CLASSIFICATION	3.7173045943140444E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999917230622446	WITHOUT_CLASSIFICATION	8.27693775545423E-6	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999656294438719	WITHOUT_CLASSIFICATION	3.43705561281206E-5	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999946790882593	WITHOUT_CLASSIFICATION	5.320911740721437E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999668152927178	WITHOUT_CLASSIFICATION	3.31847072821782E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998856552820059	WITHOUT_CLASSIFICATION	1.1434471799409808E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998131360271373	WITHOUT_CLASSIFICATION	1.8686397286271105E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783928362307	WITHOUT_CLASSIFICATION	2.1607163769249814E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978486491401	WITHOUT_CLASSIFICATION	2.151350859821442E-6	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999799540912	WITHOUT_CLASSIFICATION	2.0045908837810168E-8	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999627060352	WITHOUT_CLASSIFICATION	3.72939647591188E-8	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999704408351138	WITHOUT_CLASSIFICATION	2.9559164886338655E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999987317887721	WITHOUT_CLASSIFICATION	1.2682112279291036E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9995776865935605	WITHOUT_CLASSIFICATION	4.2231340643957856E-4	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999980985222107	WITHOUT_CLASSIFICATION	1.9014777893720248E-6	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992471437021	WITHOUT_CLASSIFICATION	7.528562978882261E-7	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999834398747108	WITHOUT_CLASSIFICATION	1.6560125289219172E-5	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999938650299	WITHOUT_CLASSIFICATION	6.13497009493622E-8	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999914916058719	WITHOUT_CLASSIFICATION	8.50839412807238E-6	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998866036568	WITHOUT_CLASSIFICATION	1.1339634316764568E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995768246833444	WITHOUT_CLASSIFICATION	4.2317531665552523E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999866377153561	WITHOUT_CLASSIFICATION	1.3362284643838024E-5	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999314356541	WITHOUT_CLASSIFICATION	6.856434595475284E-8	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9127768178611375	WITHOUT_CLASSIFICATION	0.08722318213886254	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999994618486345	WITHOUT_CLASSIFICATION	5.381513655126682E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999822588239	WITHOUT_CLASSIFICATION	1.7741176094529853E-8	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999838808488373	WITHOUT_CLASSIFICATION	1.6119151162755506E-5	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999968605487314	WITHOUT_CLASSIFICATION	3.1394512687421063E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999954782075	WITHOUT_CLASSIFICATION	4.521792582326378E-9	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999979732554068	WITHOUT_CLASSIFICATION	2.0267445931925555E-5	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999979732554068	WITHOUT_CLASSIFICATION	2.0267445931925555E-5	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999165917849586	WITHOUT_CLASSIFICATION	8.340821504142739E-5	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999999534173568	WITHOUT_CLASSIFICATION	4.658264327402034E-8	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999999981094248	WITHOUT_CLASSIFICATION	1.8905751998028803E-8	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999784915332262	WITHOUT_CLASSIFICATION	2.150846677392832E-5	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999791297921234	WITHOUT_CLASSIFICATION	2.0870207876617702E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9994002694139702	WITHOUT_CLASSIFICATION	5.997305860297869E-4	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9981180028122554	WITHOUT_CLASSIFICATION	0.001881997187744558	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999996910618032	WITHOUT_CLASSIFICATION	3.089381968255032E-7	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999996910618032	WITHOUT_CLASSIFICATION	3.089381968255032E-7	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999989771731875	WITHOUT_CLASSIFICATION	1.0228268124539123E-6	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999997268691914	WITHOUT_CLASSIFICATION	2.7313080871634045E-7	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999956741175821	WITHOUT_CLASSIFICATION	4.32588241788216E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999919559682037	WITHOUT_CLASSIFICATION	8.04403179634378E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999919559682037	WITHOUT_CLASSIFICATION	8.04403179634378E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999919559682037	WITHOUT_CLASSIFICATION	8.04403179634378E-6	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9140132436466261	WITHOUT_CLASSIFICATION	0.08598675635337394	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999981774764669	WITHOUT_CLASSIFICATION	1.8225235331762022E-6	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999985343181	WITHOUT_CLASSIFICATION	1.465681878987185E-9	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.8233665758344157	WITHOUT_CLASSIFICATION	0.17663342416558428	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9988418843238144	WITHOUT_CLASSIFICATION	0.0011581156761856194	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978486491401	WITHOUT_CLASSIFICATION	2.151350859821442E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978486491401	WITHOUT_CLASSIFICATION	2.151350859821442E-6	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999954890975379	WITHOUT_CLASSIFICATION	4.510902462081278E-6	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9965741863920309	WITHOUT_CLASSIFICATION	0.0034258136079691344	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9995921331736513	WITHOUT_CLASSIFICATION	4.078668263487342E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999784895782831	WITHOUT_CLASSIFICATION	2.151042171688308E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.999998345158245	WITHOUT_CLASSIFICATION	1.6548417549630767E-6	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999998000558651	WITHOUT_CLASSIFICATION	1.999441349095175E-7	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9988326137998013	WITHOUT_CLASSIFICATION	0.0011673862001987045	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9995366003849402	WITHOUT_CLASSIFICATION	4.6339961505975516E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999999869629329	WITHOUT_CLASSIFICATION	1.3037067176971432E-8	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999998385126105	WITHOUT_CLASSIFICATION	1.6148738947972667E-7	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999989636157532	WITHOUT_CLASSIFICATION	1.0363842468036873E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9994458821657367	WITHOUT_CLASSIFICATION	5.541178342633178E-4	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9994458821657367	WITHOUT_CLASSIFICATION	5.541178342633174E-4	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9994864129557346	WITHOUT_CLASSIFICATION	5.135870442653702E-4	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9994864129557346	WITHOUT_CLASSIFICATION	5.135870442653702E-4	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.999265530746344	WITHOUT_CLASSIFICATION	7.344692536560422E-4	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999227876972017	WITHOUT_CLASSIFICATION	7.721230279838996E-5	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999227876972017	WITHOUT_CLASSIFICATION	7.721230279838996E-5	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998894943127277	WITHOUT_CLASSIFICATION	1.1050568727238432E-4	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999509452763614	WITHOUT_CLASSIFICATION	4.905472363854011E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993817913841	WITHOUT_CLASSIFICATION	6.182086159623121E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.999979732554068	WITHOUT_CLASSIFICATION	2.0267445931925555E-5	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999836239477854	WITHOUT_CLASSIFICATION	1.6376052214574505E-5	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999509452763614	WITHOUT_CLASSIFICATION	4.905472363854011E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9442311396035525	WITHOUT_CLASSIFICATION	0.055768860396447476	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999335803142329	WITHOUT_CLASSIFICATION	6.64196857671185E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999981074424306	WITHOUT_CLASSIFICATION	1.8925575694080524E-5	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999939122210044	WITHOUT_CLASSIFICATION	6.087778995538016E-6	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9997974278661885	WITHOUT_CLASSIFICATION	2.0257213381144108E-4	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999367911999571	WITHOUT_CLASSIFICATION	6.320880004290923E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999918708314	WITHOUT_CLASSIFICATION	8.129168613801921E-8	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9394209613030533	WITHOUT_CLASSIFICATION	0.06057903869694663	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999968522738385	WITHOUT_CLASSIFICATION	3.147726161492135E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.7976401426177012	WITHOUT_CLASSIFICATION	0.20235985738229884	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999856346435	WITHOUT_CLASSIFICATION	1.4365356367308564E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999314566936742	WITHOUT_CLASSIFICATION	6.854330632573263E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999976315340005	WITHOUT_CLASSIFICATION	2.3684659995969417E-6	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999947240795073	WITHOUT_CLASSIFICATION	5.275920492747594E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999809304474134	WITHOUT_CLASSIFICATION	1.9069552586483857E-5	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9978838518056615	WITHOUT_CLASSIFICATION	0.0021161481943385092	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999996734353078	WITHOUT_CLASSIFICATION	3.265646921107621E-7	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998768876821206	WITHOUT_CLASSIFICATION	1.2311231787943405E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998768876821206	WITHOUT_CLASSIFICATION	1.2311231787943405E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999994317205404	WITHOUT_CLASSIFICATION	5.682794596375353E-7	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999936951877268	WITHOUT_CLASSIFICATION	6.30481227324627E-6	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999997735586242	WITHOUT_CLASSIFICATION	2.2644137581410332E-7	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9992959468261017	WITHOUT_CLASSIFICATION	7.040531738983078E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9997433655595287	WITHOUT_CLASSIFICATION	2.566344404712219E-4	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999831215902499	WITHOUT_CLASSIFICATION	1.6878409750081863E-5	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999999112048911	WITHOUT_CLASSIFICATION	8.879510892877004E-8	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999997988177105	WITHOUT_CLASSIFICATION	2.0118228955744114E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999236077218957	WITHOUT_CLASSIFICATION	7.639227810430048E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998295177250286	WITHOUT_CLASSIFICATION	1.7048227497140967E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999834181989808	WITHOUT_CLASSIFICATION	1.6581801019169786E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995768246833444	WITHOUT_CLASSIFICATION	4.2317531665552523E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999975995553813	WITHOUT_CLASSIFICATION	2.400444618703427E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996606355043	WITHOUT_CLASSIFICATION	3.3936449561679784E-7	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9868827166227029	WITHOUT_CLASSIFICATION	0.013117283377297164	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9997972296035313	WITHOUT_CLASSIFICATION	2.0277039646864064E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999730976801	WITHOUT_CLASSIFICATION	2.6902319985290725E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999730976801	WITHOUT_CLASSIFICATION	2.6902319985290725E-8	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998386720781659	WITHOUT_CLASSIFICATION	1.6132792183409689E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999803502680449	WITHOUT_CLASSIFICATION	1.9649731955151195E-5	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.999336590240563	WITHOUT_CLASSIFICATION	6.634097594369837E-4	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9998847177664417	WITHOUT_CLASSIFICATION	1.1528223355828225E-4	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9989055141853396	WITHOUT_CLASSIFICATION	0.0010944858146604065	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9997203974423874	WITHOUT_CLASSIFICATION	2.796025576125893E-4	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995875491085201	WITHOUT_CLASSIFICATION	4.1245089147990354E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999741283799329	WITHOUT_CLASSIFICATION	2.5871620067158918E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999890432135873	WITHOUT_CLASSIFICATION	1.0956786412639925E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999964977692	WITHOUT_CLASSIFICATION	3.5022307658606316E-9	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9994498633782866	WITHOUT_CLASSIFICATION	5.501366217134076E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999741283799329	WITHOUT_CLASSIFICATION	2.5871620067158918E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9978923462779425	WITHOUT_CLASSIFICATION	0.002107653722057473	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999956406985568	WITHOUT_CLASSIFICATION	4.359301443126463E-6	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9987754584683919	WITHOUT_CLASSIFICATION	0.0012245415316081171	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999983078762716	WITHOUT_CLASSIFICATION	1.6921237283154715E-6	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999994778803416	WITHOUT_CLASSIFICATION	5.221196583666609E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999463290744	WITHOUT_CLASSIFICATION	5.367092556267363E-8	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999993015181529	WITHOUT_CLASSIFICATION	6.984818471193172E-7	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999707670217	WITHOUT_CLASSIFICATION	2.9232978259632447E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999854788035106	WITHOUT_CLASSIFICATION	1.4521196489407712E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999909728507147	WITHOUT_CLASSIFICATION	9.027149285344798E-6	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.999981168834451	WITHOUT_CLASSIFICATION	1.8831165549002414E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999175333367755	WITHOUT_CLASSIFICATION	8.246666322451004E-5	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999984697685095	WITHOUT_CLASSIFICATION	1.530231490447495E-6	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999998057384518	WITHOUT_CLASSIFICATION	1.9426154822569013E-7	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999997754245825	WITHOUT_CLASSIFICATION	2.2457541746304985E-7	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999999456376774	WITHOUT_CLASSIFICATION	5.4362322717785584E-8	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9993376083822151	WITHOUT_CLASSIFICATION	6.623916177849622E-4	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9481523993530461	WITHOUT_CLASSIFICATION	0.051847600646953915	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9883595181416402	WITHOUT_CLASSIFICATION	0.011640481858359784	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999994339737497	WITHOUT_CLASSIFICATION	5.660262502707269E-7	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999901062163362	WITHOUT_CLASSIFICATION	9.893783663746715E-6	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9962614363338921	WITHOUT_CLASSIFICATION	0.003738563666107814	DESIGN
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999958817696619	WITHOUT_CLASSIFICATION	4.118230338051953E-6	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999930798065659	WITHOUT_CLASSIFICATION	6.920193434006207E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999903070173	WITHOUT_CLASSIFICATION	9.692982645813386E-9	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999418218537339	WITHOUT_CLASSIFICATION	5.817814626603143E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.999991289244753	WITHOUT_CLASSIFICATION	8.710755247035467E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999889103429	WITHOUT_CLASSIFICATION	1.1089657121371424E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999998988231914	WITHOUT_CLASSIFICATION	1.011768085163193E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9739942754383895	WITHOUT_CLASSIFICATION	0.026005724561610627	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999887266816	WITHOUT_CLASSIFICATION	1.1273318326365078E-8	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9936665649706719	WITHOUT_CLASSIFICATION	0.006333435029328213	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999911200039012	WITHOUT_CLASSIFICATION	8.879996098745326E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.5395915074110206	DESIGN	0.46040849258897953	WITHOUT_CLASSIFICATION
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999994382613645	WITHOUT_CLASSIFICATION	5.617386356047616E-7	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999999638519145	WITHOUT_CLASSIFICATION	3.6148085503286113E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998996368369102	WITHOUT_CLASSIFICATION	1.0036316308977807E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999998467018247	WITHOUT_CLASSIFICATION	1.5329817536551176E-7	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999753815317	WITHOUT_CLASSIFICATION	2.461846828851274E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999980263999212	WITHOUT_CLASSIFICATION	1.9736000787974685E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999997500402674	WITHOUT_CLASSIFICATION	2.4995973251617614E-7	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999963554371608	WITHOUT_CLASSIFICATION	3.6445628391442855E-6	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999371959495228	WITHOUT_CLASSIFICATION	6.280405047719059E-5	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999609634002	WITHOUT_CLASSIFICATION	3.9036599852601417E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999850964709471	WITHOUT_CLASSIFICATION	1.490352905290538E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997011922146984	WITHOUT_CLASSIFICATION	2.988077853015497E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999999113874567	WITHOUT_CLASSIFICATION	8.861254324051626E-8	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999994797596569	WITHOUT_CLASSIFICATION	5.20240343090878E-7	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999997220439626	WITHOUT_CLASSIFICATION	2.7795603740102246E-6	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9998771522055947	WITHOUT_CLASSIFICATION	1.2284779440522637E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985925618294	WITHOUT_CLASSIFICATION	1.4074381704980205E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999995092059959	WITHOUT_CLASSIFICATION	4.907940040361829E-7	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999708486647666	WITHOUT_CLASSIFICATION	2.9151335233321956E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999966473401	WITHOUT_CLASSIFICATION	3.3526599171424338E-9	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999999560752149	WITHOUT_CLASSIFICATION	4.392478504543489E-8	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999977343805679	WITHOUT_CLASSIFICATION	2.2656194321020015E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999987790035738	WITHOUT_CLASSIFICATION	1.220996426196749E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999957949994941	WITHOUT_CLASSIFICATION	4.2050005058671635E-6	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999896426385865	WITHOUT_CLASSIFICATION	1.0357361413607206E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999997893488407	WITHOUT_CLASSIFICATION	2.1065115931054382E-7	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999940756607766	WITHOUT_CLASSIFICATION	5.924339223398791E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999972366376835	WITHOUT_CLASSIFICATION	2.7633623165006293E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999143215509433	WITHOUT_CLASSIFICATION	8.567844905664559E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.999986262777185	DESIGN	1.3737222814941786E-5	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9994186625208844	WITHOUT_CLASSIFICATION	5.813374791156331E-4	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997853563460404	WITHOUT_CLASSIFICATION	2.1464365395967603E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985925618294	WITHOUT_CLASSIFICATION	1.4074381704980205E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9998993534901931	WITHOUT_CLASSIFICATION	1.006465098067939E-4	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999103805797	WITHOUT_CLASSIFICATION	8.961942033213032E-8	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9965237090755493	WITHOUT_CLASSIFICATION	0.003476290924450605	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9993832046828575	WITHOUT_CLASSIFICATION	6.167953171425782E-4	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999232056573066	WITHOUT_CLASSIFICATION	7.679434269339635E-5	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.999979359180558	WITHOUT_CLASSIFICATION	2.064081944198387E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999890432135873	WITHOUT_CLASSIFICATION	1.0956786412639925E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7944687505178193	WITHOUT_CLASSIFICATION	0.20553124948218074	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999994382613645	WITHOUT_CLASSIFICATION	5.617386356047616E-7	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9966554586984325	WITHOUT_CLASSIFICATION	0.0033445413015673656	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999999663346668	WITHOUT_CLASSIFICATION	3.3665333131255935E-8	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999979229959965	WITHOUT_CLASSIFICATION	2.0770040035242003E-6	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999976543949545	WITHOUT_CLASSIFICATION	2.345605045439815E-6	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999869059624037	WITHOUT_CLASSIFICATION	1.3094037596297843E-4	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.805535994868504	WITHOUT_CLASSIFICATION	0.19446400513149603	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9987082736459375	WITHOUT_CLASSIFICATION	0.001291726354062463	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9928905250284534	WITHOUT_CLASSIFICATION	0.007109474971546636	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9990889892736352	WITHOUT_CLASSIFICATION	9.110107263647329E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998310316414	WITHOUT_CLASSIFICATION	1.6896835864588598E-7	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989111952948	WITHOUT_CLASSIFICATION	1.0888047050937387E-6	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9999163100037026	WITHOUT_CLASSIFICATION	8.368999629740595E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999254527645446	WITHOUT_CLASSIFICATION	7.454723545539928E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.999254527645446	WITHOUT_CLASSIFICATION	7.454723545539928E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9994277653040359	WITHOUT_CLASSIFICATION	5.722346959640476E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989478850165	WITHOUT_CLASSIFICATION	1.0521149834168693E-6	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999998538272394	WITHOUT_CLASSIFICATION	1.461727605901199E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997334843150479	WITHOUT_CLASSIFICATION	2.665156849520184E-4	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999784557822781	WITHOUT_CLASSIFICATION	2.1544217721946238E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998914699673515	WITHOUT_CLASSIFICATION	1.0853003264860442E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999963555640338	WITHOUT_CLASSIFICATION	3.644435966184055E-6	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.999807582063848	WITHOUT_CLASSIFICATION	1.9241793615199342E-4	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999992744979288	WITHOUT_CLASSIFICATION	7.255020711477523E-7	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999994056200411	WITHOUT_CLASSIFICATION	5.943799589257753E-7	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999707651097912	WITHOUT_CLASSIFICATION	2.9234890208804263E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999224558032	WITHOUT_CLASSIFICATION	7.754419686848389E-8	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999994790986282	WITHOUT_CLASSIFICATION	5.209013718983434E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999995738	WITHOUT_CLASSIFICATION	4.2624607602387424E-13	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9999922218224394	WITHOUT_CLASSIFICATION	7.778177560473192E-6	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999889691862214	WITHOUT_CLASSIFICATION	1.103081377870334E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9994703308268769	WITHOUT_CLASSIFICATION	5.296691731232457E-4	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999996483081	WITHOUT_CLASSIFICATION	3.516918908719252E-9	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999627208326	WITHOUT_CLASSIFICATION	3.727916731198087E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999970654960127	WITHOUT_CLASSIFICATION	2.9345039873067316E-6	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999971147081362	WITHOUT_CLASSIFICATION	2.8852918637779815E-6	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999185322360581	WITHOUT_CLASSIFICATION	8.146776394184953E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999999496975065	WITHOUT_CLASSIFICATION	5.030249357251714E-8	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9994203554155104	WITHOUT_CLASSIFICATION	5.796445844895463E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999994009252766	WITHOUT_CLASSIFICATION	5.990747233985063E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993959309285	WITHOUT_CLASSIFICATION	6.040690714738641E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999998993606849	WITHOUT_CLASSIFICATION	1.0063931511647986E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9995040075202947	WITHOUT_CLASSIFICATION	4.959924797054168E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999462143600749	WITHOUT_CLASSIFICATION	5.378563992509049E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999422609180842	WITHOUT_CLASSIFICATION	5.773908191568231E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9402354561765324	WITHOUT_CLASSIFICATION	0.05976454382346762	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.5585792014215061	WITHOUT_CLASSIFICATION	0.441420798578494	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9911955149095233	WITHOUT_CLASSIFICATION	0.008804485090476741	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9991210677664836	WITHOUT_CLASSIFICATION	8.789322335163448E-4	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9986160330900296	WITHOUT_CLASSIFICATION	0.0013839669099704347	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999911333118268	WITHOUT_CLASSIFICATION	8.866688173374823E-6	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999887463851143	WITHOUT_CLASSIFICATION	1.1253614885699641E-4	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999884558581543	WITHOUT_CLASSIFICATION	1.1544141845751421E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999664219304062	WITHOUT_CLASSIFICATION	3.357806959388999E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994858098409	WITHOUT_CLASSIFICATION	5.141901590850106E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999608144661362	WITHOUT_CLASSIFICATION	3.918553386383524E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999930723896	WITHOUT_CLASSIFICATION	6.927610440969732E-9	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9986600274021024	WITHOUT_CLASSIFICATION	0.0013399725978976641	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999881807002013	WITHOUT_CLASSIFICATION	1.1819299798559225E-5	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999914503113001	WITHOUT_CLASSIFICATION	8.54968869999336E-6	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988543261814	WITHOUT_CLASSIFICATION	1.1456738186534489E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9332428695258509	WITHOUT_CLASSIFICATION	0.06675713047414922	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999714067232018	WITHOUT_CLASSIFICATION	2.8593276798234692E-5	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999856619615	WITHOUT_CLASSIFICATION	1.4338038562467687E-8	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999993888683	WITHOUT_CLASSIFICATION	6.111316937435441E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999490281033535	WITHOUT_CLASSIFICATION	5.097189664645981E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999991145057275	WITHOUT_CLASSIFICATION	8.85494272504331E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999999915518986	WITHOUT_CLASSIFICATION	8.448101395775632E-8	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999803165700962	WITHOUT_CLASSIFICATION	1.9683429903716475E-5	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999762230654592	WITHOUT_CLASSIFICATION	2.377693454081462E-5	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9993967699044839	WITHOUT_CLASSIFICATION	6.032300955161643E-4	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999950651886317	WITHOUT_CLASSIFICATION	4.934811368321914E-6	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999257829081801	WITHOUT_CLASSIFICATION	7.421709181982455E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999985455212215	WITHOUT_CLASSIFICATION	1.454478778530448E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999731174154743	WITHOUT_CLASSIFICATION	2.6882584525698583E-5	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999510928486277	WITHOUT_CLASSIFICATION	4.8907151372251543E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999989337236223	WITHOUT_CLASSIFICATION	1.0662763777548836E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9953767830634589	WITHOUT_CLASSIFICATION	0.004623216936541142	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999048388678915	WITHOUT_CLASSIFICATION	9.516113210846405E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999324126644957	WITHOUT_CLASSIFICATION	6.758733550430174E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999636283419726	WITHOUT_CLASSIFICATION	3.637165802734854E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994611016096	WITHOUT_CLASSIFICATION	5.388983902964866E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999984589214991	WITHOUT_CLASSIFICATION	1.5410785009500083E-6	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999612507632	WITHOUT_CLASSIFICATION	3.874923685504586E-8	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999822409184	WITHOUT_CLASSIFICATION	1.7759081636312263E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999612507632	WITHOUT_CLASSIFICATION	3.874923685504586E-8	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9982004568807809	WITHOUT_CLASSIFICATION	0.0017995431192192003	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999974560552819	WITHOUT_CLASSIFICATION	2.5439447181094334E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999981131250716	WITHOUT_CLASSIFICATION	1.8868749284925084E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999997793077627	WITHOUT_CLASSIFICATION	2.20692237324325E-7	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999980426307384	WITHOUT_CLASSIFICATION	1.957369261569518E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999989412507767	WITHOUT_CLASSIFICATION	1.0587492233046098E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999845130082818	WITHOUT_CLASSIFICATION	1.548699171815338E-5	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999694239652282	WITHOUT_CLASSIFICATION	3.057603477179822E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.999976804471455	WITHOUT_CLASSIFICATION	2.3195528545093893E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999997880694473	WITHOUT_CLASSIFICATION	2.1193055258787756E-7	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999555516436	WITHOUT_CLASSIFICATION	4.4448356477112917E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.99998908565242	WITHOUT_CLASSIFICATION	1.091434758004911E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999745575149	WITHOUT_CLASSIFICATION	2.5442485063084767E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9996028536328976	DESIGN	3.9714636710247415E-4	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999207053992	WITHOUT_CLASSIFICATION	7.92946008130303E-8	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999999490356	WITHOUT_CLASSIFICATION	5.096440888505693E-10	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999965966635476	WITHOUT_CLASSIFICATION	3.403336452424313E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999998937776717	WITHOUT_CLASSIFICATION	1.0622232818424368E-7	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999996966135721	WITHOUT_CLASSIFICATION	3.033864278784683E-7	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9989615016597193	WITHOUT_CLASSIFICATION	0.0010384983402806193	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999953364182539	WITHOUT_CLASSIFICATION	4.663581746054307E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999693775872692	WITHOUT_CLASSIFICATION	3.062241273072265E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.943264584056817	WITHOUT_CLASSIFICATION	0.05673541594318309	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999998908350148	WITHOUT_CLASSIFICATION	1.0916498512619057E-7	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999995140105554	WITHOUT_CLASSIFICATION	4.859894445372299E-7	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9980480208958399	WITHOUT_CLASSIFICATION	0.0019519791041601544	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9995860917429124	WITHOUT_CLASSIFICATION	4.13908257087649E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999933430063698	WITHOUT_CLASSIFICATION	6.656993630111731E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999968705949444	WITHOUT_CLASSIFICATION	3.12940505561253E-6	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999767842889463	WITHOUT_CLASSIFICATION	2.3215711053708027E-5	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999822893870518	WITHOUT_CLASSIFICATION	1.771061294815244E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999997064480646	WITHOUT_CLASSIFICATION	2.935519354431635E-7	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9993903127071648	WITHOUT_CLASSIFICATION	6.096872928352812E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999894111385693	WITHOUT_CLASSIFICATION	1.0588861430771187E-5	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999926696160704	WITHOUT_CLASSIFICATION	7.330383929636911E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999812538738916	WITHOUT_CLASSIFICATION	1.8746126108349867E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9917229569818916	WITHOUT_CLASSIFICATION	0.008277043018108336	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999990733060401	WITHOUT_CLASSIFICATION	9.266939599543644E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9997157797543142	WITHOUT_CLASSIFICATION	2.842202456857602E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999951789766579	WITHOUT_CLASSIFICATION	4.821023342096027E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999953898639391	WITHOUT_CLASSIFICATION	4.610136060902539E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999956360184644	WITHOUT_CLASSIFICATION	4.36398153562073E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9935986677473656	WITHOUT_CLASSIFICATION	0.006401332252634371	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9980480208958399	WITHOUT_CLASSIFICATION	0.0019519791041601544	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999554809202267	WITHOUT_CLASSIFICATION	4.451907977335492E-5	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999971810755423	WITHOUT_CLASSIFICATION	2.818924457708541E-6	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9989243809960136	WITHOUT_CLASSIFICATION	0.0010756190039864688	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999955214016826	WITHOUT_CLASSIFICATION	4.478598317348909E-6	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999862050827691	WITHOUT_CLASSIFICATION	1.3794917230858532E-5	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999890580032811	WITHOUT_CLASSIFICATION	1.0941996718898403E-5	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9983678163832148	WITHOUT_CLASSIFICATION	0.00163218361678516	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9642112395416661	DESIGN	0.03578876045833392	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999988230499087	WITHOUT_CLASSIFICATION	1.1769500913046911E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9988284547396566	WITHOUT_CLASSIFICATION	0.00117154526034332	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999990862049956	WITHOUT_CLASSIFICATION	9.137950045139483E-7	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999589825762	WITHOUT_CLASSIFICATION	4.10174238678835E-8	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999982301172751	WITHOUT_CLASSIFICATION	1.769882725001881E-6	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998854139154891	WITHOUT_CLASSIFICATION	1.1458608451094141E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999920101808647	WITHOUT_CLASSIFICATION	7.989819135348026E-6	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999995591941929	WITHOUT_CLASSIFICATION	4.408058069964316E-7	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999991141072354	WITHOUT_CLASSIFICATION	8.858927645730046E-7	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999991276963601	WITHOUT_CLASSIFICATION	8.723036399115855E-7	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999939669849196	WITHOUT_CLASSIFICATION	6.033015080428636E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9999554809202267	WITHOUT_CLASSIFICATION	4.451907977335492E-5	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999995596974326	WITHOUT_CLASSIFICATION	4.4030256736210525E-7	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999984347770264	WITHOUT_CLASSIFICATION	1.5652229735359648E-6	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999909622007639	WITHOUT_CLASSIFICATION	9.037799236089911E-6	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.778245132064649	WITHOUT_CLASSIFICATION	0.22175486793535112	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997642821770582	WITHOUT_CLASSIFICATION	2.357178229418188E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846552409801361	WITHOUT_CLASSIFICATION	0.015344759019863855	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846552409801361	WITHOUT_CLASSIFICATION	0.015344759019863855	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995878237118911	WITHOUT_CLASSIFICATION	4.1217628810888396E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846552409801361	WITHOUT_CLASSIFICATION	0.015344759019863855	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9846552409801361	WITHOUT_CLASSIFICATION	0.015344759019863855	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.7766176902068339	DESIGN	0.22338230979316612	WITHOUT_CLASSIFICATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999975625598	WITHOUT_CLASSIFICATION	2.4374402033727736E-8	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999791478910969	WITHOUT_CLASSIFICATION	2.085210890311962E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999984468027551	WITHOUT_CLASSIFICATION	1.5531972449562807E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.6854895751568367	WITHOUT_CLASSIFICATION	0.31451042484316327	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9996814171031432	WITHOUT_CLASSIFICATION	3.185828968568311E-4	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999997589776259	WITHOUT_CLASSIFICATION	2.410223740732456E-7	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999691127801	WITHOUT_CLASSIFICATION	3.0887219982125336E-8	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999984985531412	WITHOUT_CLASSIFICATION	1.5014468588000222E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9989627091014595	WITHOUT_CLASSIFICATION	0.0010372908985405527	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997827466462449	WITHOUT_CLASSIFICATION	2.1725335375502247E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9688803492931776	WITHOUT_CLASSIFICATION	0.031119650706822478	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999548976428371	WITHOUT_CLASSIFICATION	4.510235716289525E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9997497936124649	WITHOUT_CLASSIFICATION	2.502063875351442E-4	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999034988301804	WITHOUT_CLASSIFICATION	9.650116981971067E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999736513074794	WITHOUT_CLASSIFICATION	2.6348692520637504E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999865331309	WITHOUT_CLASSIFICATION	1.3466869167221372E-8	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999894795141	WITHOUT_CLASSIFICATION	1.0520486067791326E-8	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9929094544054149	WITHOUT_CLASSIFICATION	0.0070905455945850775	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9994451099749824	WITHOUT_CLASSIFICATION	5.548900250176836E-4	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999970631881637	WITHOUT_CLASSIFICATION	2.9368118363429684E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999867754749441	WITHOUT_CLASSIFICATION	1.3224525055845541E-5	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999865331309	WITHOUT_CLASSIFICATION	1.3466869167221372E-8	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9995860917429124	WITHOUT_CLASSIFICATION	4.13908257087649E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999993621313801	WITHOUT_CLASSIFICATION	6.378686200486148E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999925381206295	WITHOUT_CLASSIFICATION	7.461879370509724E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999819648849052	WITHOUT_CLASSIFICATION	1.8035115094839105E-5	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999935774112242	WITHOUT_CLASSIFICATION	6.422588775799295E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999991623469742	WITHOUT_CLASSIFICATION	8.376530258688432E-7	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9998195744796381	WITHOUT_CLASSIFICATION	1.8042552036198626E-4	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999978739500737	WITHOUT_CLASSIFICATION	2.126049926315534E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999973691665279	WITHOUT_CLASSIFICATION	2.630833472088932E-6	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999195144187338	WITHOUT_CLASSIFICATION	8.048558126623743E-5	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9999823694386231	WITHOUT_CLASSIFICATION	1.763056137685131E-5	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999933678969338	WITHOUT_CLASSIFICATION	6.632103066053445E-6	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999807578324469	WITHOUT_CLASSIFICATION	1.9242167553189344E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999648830562	WITHOUT_CLASSIFICATION	3.5116943803261164E-8	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9993650753979066	WITHOUT_CLASSIFICATION	6.349246020934425E-4	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999712897417	WITHOUT_CLASSIFICATION	2.8710258311380078E-8	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9997978985760082	WITHOUT_CLASSIFICATION	2.021014239917383E-4	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999993891876366	WITHOUT_CLASSIFICATION	6.108123633656826E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999952728152791	WITHOUT_CLASSIFICATION	4.727184720950196E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999996936497378	WITHOUT_CLASSIFICATION	3.063502621186543E-7	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9977990728513721	WITHOUT_CLASSIFICATION	0.0022009271486278566	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999721790066575	WITHOUT_CLASSIFICATION	2.7820993342466463E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999999999888579	WITHOUT_CLASSIFICATION	1.1142106804385564E-11	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999973691665279	WITHOUT_CLASSIFICATION	2.630833472088932E-6	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999736957029232	WITHOUT_CLASSIFICATION	2.6304297076846644E-5	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999867772483608	WITHOUT_CLASSIFICATION	1.3222751639308079E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999969409846733	WITHOUT_CLASSIFICATION	3.0590153266685328E-6	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9985240269455151	WITHOUT_CLASSIFICATION	0.0014759730544848322	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999077316237	WITHOUT_CLASSIFICATION	9.226837622900228E-8	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999934353787843	WITHOUT_CLASSIFICATION	6.564621215802418E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999796445377788	WITHOUT_CLASSIFICATION	2.0355462221292095E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999997666286029	WITHOUT_CLASSIFICATION	2.3337139714309504E-7	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999803391009886	WITHOUT_CLASSIFICATION	1.9660899011386512E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999105262744193	WITHOUT_CLASSIFICATION	8.947372558063574E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999992453324807	WITHOUT_CLASSIFICATION	7.546675193269015E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999986910522579	WITHOUT_CLASSIFICATION	1.3089477420247597E-6	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9993734692000938	WITHOUT_CLASSIFICATION	6.265307999062195E-4	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999932048045	WITHOUT_CLASSIFICATION	6.795195448539543E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999906237637272	WITHOUT_CLASSIFICATION	9.376236272902439E-6	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9992357697544093	WITHOUT_CLASSIFICATION	7.642302455906462E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999990804969412	WITHOUT_CLASSIFICATION	9.195030587767724E-7	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999992453324807	WITHOUT_CLASSIFICATION	7.546675193269015E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9997076533061231	WITHOUT_CLASSIFICATION	2.92346693876878E-4	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.6186675116801769	DESIGN	0.3813324883198232	WITHOUT_CLASSIFICATION
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999954349595042	WITHOUT_CLASSIFICATION	4.565040495909267E-6	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999997003303559	WITHOUT_CLASSIFICATION	2.996696442044014E-7	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999743491323227	WITHOUT_CLASSIFICATION	2.5650867677255315E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999795591676318	WITHOUT_CLASSIFICATION	2.0440832368162383E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999906237637272	WITHOUT_CLASSIFICATION	9.376236272902439E-6	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999979969693	WITHOUT_CLASSIFICATION	2.0030306920440723E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999737519688	WITHOUT_CLASSIFICATION	2.624803113921153E-8	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999166269059	WITHOUT_CLASSIFICATION	8.337309399824103E-8	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978616752838	WITHOUT_CLASSIFICATION	2.1383247162443336E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995194716788	WITHOUT_CLASSIFICATION	4.805283212033173E-7	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986678453212	WITHOUT_CLASSIFICATION	1.3321546788414614E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999682770697	WITHOUT_CLASSIFICATION	3.172293031692687E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999682770697	WITHOUT_CLASSIFICATION	3.172293031692687E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9996104935977099	WITHOUT_CLASSIFICATION	3.8950640228997577E-4	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999995871837097	WITHOUT_CLASSIFICATION	4.128162902998013E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999772955562205	WITHOUT_CLASSIFICATION	2.27044437795239E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999930514234244	WITHOUT_CLASSIFICATION	6.948576575537015E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999512991632482	WITHOUT_CLASSIFICATION	4.8700836751716714E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962199537498	WITHOUT_CLASSIFICATION	3.780046250199953E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952101052879	WITHOUT_CLASSIFICATION	4.789894712110341E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994069860703	WITHOUT_CLASSIFICATION	5.930139297204283E-7	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9999817827981149	WITHOUT_CLASSIFICATION	1.8217201885029045E-5	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997351135421	WITHOUT_CLASSIFICATION	2.648864578793319E-7	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999962199537498	WITHOUT_CLASSIFICATION	3.780046250199953E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999952101052879	WITHOUT_CLASSIFICATION	4.789894712110341E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994069860703	WITHOUT_CLASSIFICATION	5.930139297204283E-7	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999850145177035	WITHOUT_CLASSIFICATION	1.4985482296462118E-5	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9996360289254316	WITHOUT_CLASSIFICATION	3.639710745684916E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999958309235438	WITHOUT_CLASSIFICATION	4.16907645615752E-6	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9962825564359051	WITHOUT_CLASSIFICATION	0.0037174435640949365	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999999337427042	WITHOUT_CLASSIFICATION	6.625729575916135E-8	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999999081115769	WITHOUT_CLASSIFICATION	9.188842300160046E-8	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999985173699759	WITHOUT_CLASSIFICATION	1.4826300240585917E-6	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9938920457690444	WITHOUT_CLASSIFICATION	0.0061079542309555365	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9990990315376591	WITHOUT_CLASSIFICATION	9.009684623409085E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999101817474054	WITHOUT_CLASSIFICATION	8.981825259456506E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999878936839709	WITHOUT_CLASSIFICATION	1.2106316029072863E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9815697875199674	WITHOUT_CLASSIFICATION	0.018430212480032713	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9999783846516195	WITHOUT_CLASSIFICATION	2.161534838052524E-5	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999939918230922	WITHOUT_CLASSIFICATION	6.008176907737752E-6	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999982130338624	WITHOUT_CLASSIFICATION	1.786966137568035E-6	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999864661271829	WITHOUT_CLASSIFICATION	1.3533872817207746E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999219277931135	WITHOUT_CLASSIFICATION	7.807220688649224E-5	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9991566316824565	WITHOUT_CLASSIFICATION	8.433683175434571E-4	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9998516436259928	WITHOUT_CLASSIFICATION	1.483563740072149E-4	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999996913277715	WITHOUT_CLASSIFICATION	3.0867222850201406E-6	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999898031735346	WITHOUT_CLASSIFICATION	1.0196826465372337E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9536283910983961	WITHOUT_CLASSIFICATION	0.04637160890160393	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999745692019	WITHOUT_CLASSIFICATION	2.5430798056334672E-8	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999599827562138	WITHOUT_CLASSIFICATION	4.001724378621808E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999898775110191	WITHOUT_CLASSIFICATION	1.012248898094668E-5	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999207948167954	WITHOUT_CLASSIFICATION	7.92051832045917E-5	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978204187014	WITHOUT_CLASSIFICATION	2.1795812984892674E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999942767947032	WITHOUT_CLASSIFICATION	5.723205296893637E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999995327487371	WITHOUT_CLASSIFICATION	4.672512629081819E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999874602862169	WITHOUT_CLASSIFICATION	1.2539713783094598E-5	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998916615218	WITHOUT_CLASSIFICATION	1.0833847813082514E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997720720817	WITHOUT_CLASSIFICATION	2.2792791826963096E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999997720720817	WITHOUT_CLASSIFICATION	2.2792791826963096E-7	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999963344381406	WITHOUT_CLASSIFICATION	3.665561859342192E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999985133198	WITHOUT_CLASSIFICATION	1.4866801786390046E-9	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999933017473669	WITHOUT_CLASSIFICATION	6.698252633142111E-6	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995768246833444	WITHOUT_CLASSIFICATION	4.2317531665552523E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999929264277667	WITHOUT_CLASSIFICATION	7.073572233356838E-6	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9929180692397276	WITHOUT_CLASSIFICATION	0.007081930760272328	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999757990496118	WITHOUT_CLASSIFICATION	2.4200950388319003E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999950457446019	WITHOUT_CLASSIFICATION	4.954255398221515E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999928459522653	WITHOUT_CLASSIFICATION	7.154047734750792E-6	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993789788935	WITHOUT_CLASSIFICATION	6.210211065457916E-7	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991206162838	WITHOUT_CLASSIFICATION	8.793837161130895E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999321477948	WITHOUT_CLASSIFICATION	6.785220527399616E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994462599092	WITHOUT_CLASSIFICATION	5.537400908359713E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996984825337	WITHOUT_CLASSIFICATION	3.015174663658679E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997135764681	WITHOUT_CLASSIFICATION	2.864235318815714E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997551212941	WITHOUT_CLASSIFICATION	2.4487870589181223E-6	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997431966098	WITHOUT_CLASSIFICATION	2.5680339027156854E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999790280452	WITHOUT_CLASSIFICATION	2.0971954825441028E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993268674373	WITHOUT_CLASSIFICATION	6.731325627469396E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989301990918	WITHOUT_CLASSIFICATION	1.0698009082582515E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999985921508616	WITHOUT_CLASSIFICATION	1.4078491382965708E-6	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9992112776504154	WITHOUT_CLASSIFICATION	7.887223495846603E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5541023022384298	DESIGN	0.4458976977615701	WITHOUT_CLASSIFICATION
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999863544335192	WITHOUT_CLASSIFICATION	1.3645566480697219E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999999916291536	WITHOUT_CLASSIFICATION	8.370846404433381E-8	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9941414031903906	WITHOUT_CLASSIFICATION	0.005858596809609373	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999987488503	WITHOUT_CLASSIFICATION	1.2511498460065318E-9	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999998857670472	WITHOUT_CLASSIFICATION	1.1423295269841237E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5541023022384298	DESIGN	0.4458976977615701	WITHOUT_CLASSIFICATION
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5541023022384298	DESIGN	0.4458976977615701	WITHOUT_CLASSIFICATION
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9997382838287011	WITHOUT_CLASSIFICATION	2.6171617129893136E-4	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999998982155877	WITHOUT_CLASSIFICATION	1.0178441230520296E-7	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9982738788193883	WITHOUT_CLASSIFICATION	0.0017261211806117167	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999811285523987	WITHOUT_CLASSIFICATION	1.8871447601268535E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999976315340005	WITHOUT_CLASSIFICATION	2.3684659995969417E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.999996913277715	WITHOUT_CLASSIFICATION	3.0867222850201406E-6	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999765358275814	WITHOUT_CLASSIFICATION	2.3464172418583325E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999990852754613	WITHOUT_CLASSIFICATION	9.147245386156256E-7	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9996413147582497	WITHOUT_CLASSIFICATION	3.586852417502759E-4	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966239958825	WITHOUT_CLASSIFICATION	3.376004117417851E-6	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.99999990261461	WITHOUT_CLASSIFICATION	9.738538989880914E-8	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999888884321256	WITHOUT_CLASSIFICATION	1.111156787427018E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988785850658225	WITHOUT_CLASSIFICATION	0.001121414934177532	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988785850658225	WITHOUT_CLASSIFICATION	0.001121414934177532	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9989436250919185	WITHOUT_CLASSIFICATION	0.0010563749080815532	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9989436250919185	WITHOUT_CLASSIFICATION	0.0010563749080815532	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988571859181	WITHOUT_CLASSIFICATION	1.1428140819001809E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976841122482	WITHOUT_CLASSIFICATION	2.315887751752074E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9998532954393149	WITHOUT_CLASSIFICATION	1.4670456068507267E-4	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999580228621396	WITHOUT_CLASSIFICATION	4.197713786025346E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999932936222169	WITHOUT_CLASSIFICATION	6.706377783099287E-6	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9431494084521173	DESIGN	0.05685059154788267	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999515674629	WITHOUT_CLASSIFICATION	4.843253707335455E-8	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999448390256	WITHOUT_CLASSIFICATION	5.51609744060026E-7	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9959939298470071	WITHOUT_CLASSIFICATION	0.004006070152993017	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9995336425952104	WITHOUT_CLASSIFICATION	4.66357404789592E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997438218302	WITHOUT_CLASSIFICATION	2.561781698157509E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.99999890196365	WITHOUT_CLASSIFICATION	1.0980363499114269E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998128685319702	WITHOUT_CLASSIFICATION	1.8713146802978417E-4	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998513646339	WITHOUT_CLASSIFICATION	1.4863536619587215E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999505041527833	WITHOUT_CLASSIFICATION	4.9495847216606284E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.999789247976241	WITHOUT_CLASSIFICATION	2.1075202375894322E-4	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.999789247976241	WITHOUT_CLASSIFICATION	2.1075202375894322E-4	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999999943557396	WITHOUT_CLASSIFICATION	5.644260349793077E-9	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999966568192	WITHOUT_CLASSIFICATION	3.3431807999454103E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.99853646000163	WITHOUT_CLASSIFICATION	0.0014635399983700115	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9958805323221427	WITHOUT_CLASSIFICATION	0.004119467677857397	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999975566658735	WITHOUT_CLASSIFICATION	2.443334126503988E-5	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388517335244	WITHOUT_CLASSIFICATION	6.114826647566708E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.99999964963932	WITHOUT_CLASSIFICATION	3.5036068001673213E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996471495895431	WITHOUT_CLASSIFICATION	3.528504104569553E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9990043027848201	WITHOUT_CLASSIFICATION	9.956972151799208E-4	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9708035685375579	WITHOUT_CLASSIFICATION	0.029196431462442097	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997519670058207	WITHOUT_CLASSIFICATION	2.4803299417926953E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999563953826104	WITHOUT_CLASSIFICATION	4.360461738964579E-5	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999143599806	WITHOUT_CLASSIFICATION	8.564001940617617E-8	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999987804833587	WITHOUT_CLASSIFICATION	1.2195166413433355E-6	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999988145390223	WITHOUT_CLASSIFICATION	1.1854609776685723E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9998689467038105	WITHOUT_CLASSIFICATION	1.3105329618942914E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998671845277	WITHOUT_CLASSIFICATION	1.328154722005345E-7	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999916723884927	WITHOUT_CLASSIFICATION	8.32761150733956E-6	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999972445629743	WITHOUT_CLASSIFICATION	2.7554370256739408E-6	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999820540855	WITHOUT_CLASSIFICATION	1.794591447507573E-8	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999983081354961	WITHOUT_CLASSIFICATION	1.6918645039606852E-6	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999967007551	WITHOUT_CLASSIFICATION	3.2992447859607008E-9	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996968783631	WITHOUT_CLASSIFICATION	3.031216368954145E-7	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.999999984931647	WITHOUT_CLASSIFICATION	1.5068352994900054E-8	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999657564222029	WITHOUT_CLASSIFICATION	3.424357779715211E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999961546160185	WITHOUT_CLASSIFICATION	3.845383981440461E-6	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999626497134951	WITHOUT_CLASSIFICATION	3.735028650483964E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998809925410543	WITHOUT_CLASSIFICATION	1.190074589456403E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999870641048	WITHOUT_CLASSIFICATION	1.2935895156888126E-8	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999990724199674	WITHOUT_CLASSIFICATION	9.275800325798257E-7	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999907650251	WITHOUT_CLASSIFICATION	9.234974875309764E-9	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999998032540062	WITHOUT_CLASSIFICATION	1.9674599385219753E-7	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9956375839920205	WITHOUT_CLASSIFICATION	0.004362416007979492	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9999987671646177	WITHOUT_CLASSIFICATION	1.2328353823380897E-6	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999882983208707	WITHOUT_CLASSIFICATION	1.170167912937226E-5	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9991930115032889	WITHOUT_CLASSIFICATION	8.069884967112486E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999766111872155	WITHOUT_CLASSIFICATION	2.3388812784536425E-5	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997673008480581	WITHOUT_CLASSIFICATION	2.32699151942014E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999723598657	WITHOUT_CLASSIFICATION	2.7640134306756086E-8	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999848662520681	WITHOUT_CLASSIFICATION	1.5133747931994998E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999963255574132	WITHOUT_CLASSIFICATION	3.6744425867618426E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999991526039702	WITHOUT_CLASSIFICATION	8.473960298124453E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.600820120116181	WITHOUT_CLASSIFICATION	0.3991798798838189	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999961975687826	WITHOUT_CLASSIFICATION	3.8024312174648105E-6	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999738604798759	WITHOUT_CLASSIFICATION	2.6139520124077276E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9989759420608607	WITHOUT_CLASSIFICATION	0.0010240579391392836	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999091349269755	WITHOUT_CLASSIFICATION	9.086507302449501E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9998098123118487	WITHOUT_CLASSIFICATION	1.901876881513004E-4	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999736417084686	WITHOUT_CLASSIFICATION	2.635829153140516E-5	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999941992512116	WITHOUT_CLASSIFICATION	5.800748788344094E-6	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999648725979888	WITHOUT_CLASSIFICATION	3.512740201113248E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999979931505167	WITHOUT_CLASSIFICATION	2.0068494831861965E-6	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999806834996854	WITHOUT_CLASSIFICATION	1.93165003146275E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999998629741571	WITHOUT_CLASSIFICATION	1.3702584290151656E-6	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999999125138466	WITHOUT_CLASSIFICATION	8.748615344478434E-8	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999985119399493	WITHOUT_CLASSIFICATION	1.4880600507923488E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9999511301988508	WITHOUT_CLASSIFICATION	4.8869801149107194E-5	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999978599293533	WITHOUT_CLASSIFICATION	2.14007064671692E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999821704147435	WITHOUT_CLASSIFICATION	1.7829585256592607E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.99970927330508	WITHOUT_CLASSIFICATION	2.9072669492001606E-4	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999634274783257	WITHOUT_CLASSIFICATION	3.6572521674277494E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999992565816502	WITHOUT_CLASSIFICATION	7.43418349698491E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.99999859812696	WITHOUT_CLASSIFICATION	1.4018730400273089E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999290128724017	WITHOUT_CLASSIFICATION	7.098712759831858E-5	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999997283399305	WITHOUT_CLASSIFICATION	2.716600694983962E-6	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9834638797138101	WITHOUT_CLASSIFICATION	0.016536120286189872	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999999947748008	WITHOUT_CLASSIFICATION	5.225199193109386E-9	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999996525420132	WITHOUT_CLASSIFICATION	3.4745798681589153E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990827417671764	WITHOUT_CLASSIFICATION	9.172582328236546E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990827417671764	WITHOUT_CLASSIFICATION	9.172582328236546E-4	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999998760003984	WITHOUT_CLASSIFICATION	1.239996015260995E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9978901573220814	WITHOUT_CLASSIFICATION	0.002109842677918491	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999914197655332	WITHOUT_CLASSIFICATION	8.580234466748413E-6	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999795602582725	WITHOUT_CLASSIFICATION	2.0439741727495216E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999999947808609	WITHOUT_CLASSIFICATION	5.219139106330772E-8	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999473999830238	WITHOUT_CLASSIFICATION	5.2600016976013366E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999952222077845	WITHOUT_CLASSIFICATION	4.777792215432947E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998517325561345	WITHOUT_CLASSIFICATION	1.482674438656131E-4	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999750453841117	WITHOUT_CLASSIFICATION	2.495461588820509E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9997308055526605	WITHOUT_CLASSIFICATION	2.6919444733950674E-4	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999995519740512	WITHOUT_CLASSIFICATION	4.4802594879248317E-7	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999765195455	WITHOUT_CLASSIFICATION	2.3480454475156315E-8	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.999998159067309	WITHOUT_CLASSIFICATION	1.8409326910217026E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999996711228408	WITHOUT_CLASSIFICATION	3.2887715918896054E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999967856416375	WITHOUT_CLASSIFICATION	3.2143583624262075E-6	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9998439475296574	WITHOUT_CLASSIFICATION	1.5605247034249366E-4	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999909604257081	WITHOUT_CLASSIFICATION	9.039574291881453E-6	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9999992718467535	WITHOUT_CLASSIFICATION	7.281532466133723E-7	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.992941778160467	WITHOUT_CLASSIFICATION	0.007058221839532983	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999991139279327	WITHOUT_CLASSIFICATION	8.860720672759525E-7	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999454334078322	WITHOUT_CLASSIFICATION	5.4566592167801284E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999991920177337	WITHOUT_CLASSIFICATION	8.079822664069854E-7	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9995134611169276	WITHOUT_CLASSIFICATION	4.8653888307225866E-4	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9929255742293014	WITHOUT_CLASSIFICATION	0.007074425770698671	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999999067576	WITHOUT_CLASSIFICATION	9.324240273829765E-10	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997573382237801	WITHOUT_CLASSIFICATION	2.4266177621984776E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999973717288327	WITHOUT_CLASSIFICATION	2.6282711672512897E-6	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999922388972117	WITHOUT_CLASSIFICATION	7.761102788268856E-6	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999023447062052	WITHOUT_CLASSIFICATION	9.76552937947364E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9997799203628611	WITHOUT_CLASSIFICATION	2.2007963713884326E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999990739593193	WITHOUT_CLASSIFICATION	9.260406806246134E-7	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999746201334904	WITHOUT_CLASSIFICATION	2.5379866509576218E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9993816404083319	WITHOUT_CLASSIFICATION	6.18359591668082E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999567584251348	WITHOUT_CLASSIFICATION	4.3241574865243287E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999489169655261	WITHOUT_CLASSIFICATION	5.108303447398939E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999489169655261	WITHOUT_CLASSIFICATION	5.108303447398939E-5	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999971177023853	WITHOUT_CLASSIFICATION	2.8822976147293385E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9996920627708029	WITHOUT_CLASSIFICATION	3.079372291970716E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999981540312906	WITHOUT_CLASSIFICATION	1.8459687094029825E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999995073958285	WITHOUT_CLASSIFICATION	4.926041715036783E-6	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999997374387884	WITHOUT_CLASSIFICATION	2.625612116082163E-7	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999504367980009	WITHOUT_CLASSIFICATION	4.9563201999098756E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9998845574376759	WITHOUT_CLASSIFICATION	1.1544256232405654E-4	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999997113185124	WITHOUT_CLASSIFICATION	2.88681487555157E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9910564995019082	WITHOUT_CLASSIFICATION	0.008943500498091745	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998196851987	WITHOUT_CLASSIFICATION	1.8031480136668684E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999998180247253	WITHOUT_CLASSIFICATION	1.8197527481798856E-7	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999985159545703	WITHOUT_CLASSIFICATION	1.4840454296511083E-6	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9996309301443614	WITHOUT_CLASSIFICATION	3.690698556385354E-4	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999621506164108	WITHOUT_CLASSIFICATION	3.7849383589180666E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999951057958	WITHOUT_CLASSIFICATION	4.894204240169566E-9	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9976460731562932	WITHOUT_CLASSIFICATION	0.0023539268437068874	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9976460731562932	WITHOUT_CLASSIFICATION	0.0023539268437068874	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999875388069163	WITHOUT_CLASSIFICATION	1.2461193083768529E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999853997078024	WITHOUT_CLASSIFICATION	1.460029219756921E-5	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.990661467070705	WITHOUT_CLASSIFICATION	0.009338532929295007	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999979521198548	WITHOUT_CLASSIFICATION	2.047880145175441E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.8882415810240845	WITHOUT_CLASSIFICATION	0.11175841897591553	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999920476144442	WITHOUT_CLASSIFICATION	7.952385555830653E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999225625889672	WITHOUT_CLASSIFICATION	7.743741103281534E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999225625889672	WITHOUT_CLASSIFICATION	7.743741103281534E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999900688387942	WITHOUT_CLASSIFICATION	9.931161205850843E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998709220902527	WITHOUT_CLASSIFICATION	1.2907790974727367E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998855773231384	WITHOUT_CLASSIFICATION	1.1442267686148145E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999787871950321	WITHOUT_CLASSIFICATION	2.1212804967887505E-5	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9442728884639658	WITHOUT_CLASSIFICATION	0.05572711153603403	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9997664357921364	WITHOUT_CLASSIFICATION	2.3356420786367475E-4	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9998360709234834	WITHOUT_CLASSIFICATION	1.6392907651657177E-4	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993817913841	WITHOUT_CLASSIFICATION	6.182086159623121E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999978486491401	WITHOUT_CLASSIFICATION	2.151350859821442E-6	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9996670210702583	WITHOUT_CLASSIFICATION	3.32978929741717E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.997172013231625	WITHOUT_CLASSIFICATION	0.0028279867683749546	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999987317887721	WITHOUT_CLASSIFICATION	1.2682112279291036E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9762424481903058	WITHOUT_CLASSIFICATION	0.02375755180969415	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.999265530746344	WITHOUT_CLASSIFICATION	7.344692536560422E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999462143600749	WITHOUT_CLASSIFICATION	5.378563992509049E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999732827507424	WITHOUT_CLASSIFICATION	2.6717249257607083E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999990623986845	WITHOUT_CLASSIFICATION	9.37601315590098E-7	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9998760475458363	WITHOUT_CLASSIFICATION	1.2395245416380108E-4	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9899134765164045	WITHOUT_CLASSIFICATION	0.0100865234835954	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999994159906069	WITHOUT_CLASSIFICATION	5.840093930031817E-7	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998896241287	WITHOUT_CLASSIFICATION	1.1037587137851458E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998894943127277	WITHOUT_CLASSIFICATION	1.1050568727238432E-4	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998502448973865	WITHOUT_CLASSIFICATION	1.497551026136184E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999991747194789	WITHOUT_CLASSIFICATION	8.252805212833793E-7	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999884315139947	WITHOUT_CLASSIFICATION	1.1568486005254102E-5	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999978325191334	WITHOUT_CLASSIFICATION	2.167480866582978E-6	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999990159802379	WITHOUT_CLASSIFICATION	9.84019762155129E-7	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9917596377861051	WITHOUT_CLASSIFICATION	0.008240362213894905	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999989076195187	WITHOUT_CLASSIFICATION	1.0923804812859866E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999730976801	WITHOUT_CLASSIFICATION	2.6902319985290725E-8	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9972751415913599	WITHOUT_CLASSIFICATION	0.0027248584086400976	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9996435248015406	WITHOUT_CLASSIFICATION	3.56475198459392E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9992628628461709	WITHOUT_CLASSIFICATION	7.371371538291645E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999974087338	WITHOUT_CLASSIFICATION	2.591266196983789E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999675686761337	WITHOUT_CLASSIFICATION	3.243132386631483E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999480073453058	WITHOUT_CLASSIFICATION	5.19926546943193E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9986340312228335	WITHOUT_CLASSIFICATION	0.001365968777166533	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9998996149147065	WITHOUT_CLASSIFICATION	1.0038508529358689E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999977250833783	WITHOUT_CLASSIFICATION	2.2749166216177713E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999921561625523	WITHOUT_CLASSIFICATION	7.843837447748654E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999990529982835	WITHOUT_CLASSIFICATION	9.470017164799403E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999991689309227	WITHOUT_CLASSIFICATION	8.310690772604792E-7	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999715390181573	WITHOUT_CLASSIFICATION	2.846098184268127E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999998526052649	WITHOUT_CLASSIFICATION	1.4739473502445378E-7	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999998622	WITHOUT_CLASSIFICATION	1.377173545329594E-13	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999986353512345	WITHOUT_CLASSIFICATION	1.3646487656146154E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999977250833783	WITHOUT_CLASSIFICATION	2.2749166216177713E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999921561625523	WITHOUT_CLASSIFICATION	7.843837447748654E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999785101816598	WITHOUT_CLASSIFICATION	2.1489818340157276E-5	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9999803739707258	WITHOUT_CLASSIFICATION	1.962602927420316E-5	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9997268583170037	WITHOUT_CLASSIFICATION	2.731416829963877E-4	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999995888201357	WITHOUT_CLASSIFICATION	4.111798642575661E-7	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999996441584669	WITHOUT_CLASSIFICATION	3.558415330804658E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999933152521591	WITHOUT_CLASSIFICATION	6.68474784091917E-6	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999942026850825	WITHOUT_CLASSIFICATION	5.797314917481726E-6	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999845782123938	WITHOUT_CLASSIFICATION	1.5421787606149133E-5	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999983174320581	WITHOUT_CLASSIFICATION	1.6825679418052135E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999962008521363	DESIGN	3.7991478636392044E-6	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999999606283398	WITHOUT_CLASSIFICATION	3.937166020070685E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9999962008521363	DESIGN	3.7991478636392044E-6	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999753847989	WITHOUT_CLASSIFICATION	2.461520111375909E-8	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9998559774099064	WITHOUT_CLASSIFICATION	1.4402259009347904E-4	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999483358417	WITHOUT_CLASSIFICATION	5.166415839275846E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996271496034	WITHOUT_CLASSIFICATION	3.728503966137681E-6	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999973182886038	WITHOUT_CLASSIFICATION	2.681711396224858E-6	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999010868956817	WITHOUT_CLASSIFICATION	9.891310431834709E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999010868956817	WITHOUT_CLASSIFICATION	9.891310431834709E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999996541846874	WITHOUT_CLASSIFICATION	3.4581531259266446E-6	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999988346854981	WITHOUT_CLASSIFICATION	1.165314501953114E-6	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999989572729112	WITHOUT_CLASSIFICATION	1.0427270887942064E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999924894900117	WITHOUT_CLASSIFICATION	7.510509988310818E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999590588319778	WITHOUT_CLASSIFICATION	4.0941168022233435E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5984523773409784	WITHOUT_CLASSIFICATION	0.40154762265902155	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999805096996494	WITHOUT_CLASSIFICATION	1.9490300350564015E-5	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997686459154	WITHOUT_CLASSIFICATION	2.313540846274909E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999594369297472	WITHOUT_CLASSIFICATION	4.056307025272157E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999840758168761	WITHOUT_CLASSIFICATION	1.5924183123880313E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999564001289325	WITHOUT_CLASSIFICATION	4.359987106749063E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999773311413	WITHOUT_CLASSIFICATION	2.2668858637645622E-8	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9996413752856255	WITHOUT_CLASSIFICATION	3.586247143744949E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999988454762586	WITHOUT_CLASSIFICATION	1.154523741292175E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999994124895206	WITHOUT_CLASSIFICATION	5.875104793552048E-7	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999999462757801	WITHOUT_CLASSIFICATION	5.372421980650164E-8	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998637702048	WITHOUT_CLASSIFICATION	1.3622979523352785E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999972551360069	WITHOUT_CLASSIFICATION	2.7448639931924805E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999409618402	WITHOUT_CLASSIFICATION	5.903815974910151E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997360405936097	WITHOUT_CLASSIFICATION	2.639594063902778E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999855942407415	WITHOUT_CLASSIFICATION	1.4405759258569512E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999964787978358	WITHOUT_CLASSIFICATION	3.5212021642241928E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999992213761502	WITHOUT_CLASSIFICATION	7.78623849781077E-7	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999999611642443	WITHOUT_CLASSIFICATION	3.8835755709767753E-8	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999999760092075	WITHOUT_CLASSIFICATION	2.3990792495690225E-7	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999803920543436	WITHOUT_CLASSIFICATION	1.9607945656389267E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999823362356678	WITHOUT_CLASSIFICATION	1.7663764332230408E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996166893388895	WITHOUT_CLASSIFICATION	3.833106611104636E-4	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9354852882847489	WITHOUT_CLASSIFICATION	0.0645147117152511	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9966823811525244	WITHOUT_CLASSIFICATION	0.003317618847475473	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9984239655739767	DESIGN	0.0015760344260233217	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999568442195917	WITHOUT_CLASSIFICATION	4.315578040836323E-5	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999805096996494	WITHOUT_CLASSIFICATION	1.9490300350564015E-5	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999814445761893	WITHOUT_CLASSIFICATION	1.8555423810662645E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999990156791386	WITHOUT_CLASSIFICATION	9.843208613135E-7	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9956972010066443	DESIGN	0.004302798993355734	WITHOUT_CLASSIFICATION
//an assertion	WITHOUT_CLASSIFICATION	0.9999967303097113	WITHOUT_CLASSIFICATION	3.269690288735975E-6	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999913851317449	WITHOUT_CLASSIFICATION	8.614868255101164E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.99999739871608	WITHOUT_CLASSIFICATION	2.6012839200716523E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999924894900117	WITHOUT_CLASSIFICATION	7.510509988310818E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999924894900117	WITHOUT_CLASSIFICATION	7.510509988310818E-6	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999990298533004	WITHOUT_CLASSIFICATION	9.701466996161507E-7	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999982187709673	WITHOUT_CLASSIFICATION	1.7812290327792928E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9975460318046427	WITHOUT_CLASSIFICATION	0.00245396819535739	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999986625435856	WITHOUT_CLASSIFICATION	1.3374564144153754E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999992884355445	WITHOUT_CLASSIFICATION	7.115644554689832E-7	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999384472061894	WITHOUT_CLASSIFICATION	6.155279381060293E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9773028425557961	WITHOUT_CLASSIFICATION	0.022697157444203832	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999942521373428	WITHOUT_CLASSIFICATION	5.7478626570688596E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999534409374469	WITHOUT_CLASSIFICATION	4.655906255318332E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999731208523389	WITHOUT_CLASSIFICATION	2.6879147660981473E-5	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999955088540214	WITHOUT_CLASSIFICATION	4.491145978562489E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999482271624542	WITHOUT_CLASSIFICATION	5.177283754568953E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999557283660637	WITHOUT_CLASSIFICATION	4.427163393635952E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999731208523389	WITHOUT_CLASSIFICATION	2.6879147660981473E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999925382976462	WITHOUT_CLASSIFICATION	7.461702353813097E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9941712507087399	WITHOUT_CLASSIFICATION	0.005828749291260118	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999692733545917	WITHOUT_CLASSIFICATION	3.072664540838617E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.999942777226352	DESIGN	5.72227736479428E-5	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999482271624542	WITHOUT_CLASSIFICATION	5.177283754568953E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999953616382694	WITHOUT_CLASSIFICATION	4.6383617306549405E-6	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996238126407	WITHOUT_CLASSIFICATION	3.7618735926893834E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999885365375	WITHOUT_CLASSIFICATION	1.1463462571672002E-8	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999970907832629	WITHOUT_CLASSIFICATION	2.9092167370052292E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998642572011534	WITHOUT_CLASSIFICATION	1.3574279884658697E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999998623121518	WITHOUT_CLASSIFICATION	1.376878481992843E-6	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999978384183643	WITHOUT_CLASSIFICATION	2.1615816357005426E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999784470040873	WITHOUT_CLASSIFICATION	2.1552995912657358E-5	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999984488151018	WITHOUT_CLASSIFICATION	1.551184898191615E-5	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999959775512186	WITHOUT_CLASSIFICATION	4.022448781470053E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9947115207101612	WITHOUT_CLASSIFICATION	0.005288479289838744	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999684130873228	WITHOUT_CLASSIFICATION	3.1586912677229784E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999731208523389	WITHOUT_CLASSIFICATION	2.6879147660981473E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999953616382694	WITHOUT_CLASSIFICATION	4.6383617306549405E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999999885365375	WITHOUT_CLASSIFICATION	1.1463462571672002E-8	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996917062717117	WITHOUT_CLASSIFICATION	3.082937282882345E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999026789798473	WITHOUT_CLASSIFICATION	9.732102015269186E-5	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999970499243365	WITHOUT_CLASSIFICATION	2.95007566362787E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999482271624542	WITHOUT_CLASSIFICATION	5.177283754568953E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999964092138792	WITHOUT_CLASSIFICATION	3.5907861208455282E-6	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999994619429395	WITHOUT_CLASSIFICATION	5.380570605117079E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999773727924655	WITHOUT_CLASSIFICATION	2.2627207534572615E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999311255697795	WITHOUT_CLASSIFICATION	6.887443022045463E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999784470040873	WITHOUT_CLASSIFICATION	2.1552995912657358E-5	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999925382976462	WITHOUT_CLASSIFICATION	7.461702353813097E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999957336620068	WITHOUT_CLASSIFICATION	4.266337993226345E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999998301060729	WITHOUT_CLASSIFICATION	1.698939271692318E-7	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999978324031813	WITHOUT_CLASSIFICATION	2.167596818702894E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9997688884902862	WITHOUT_CLASSIFICATION	2.311115097137162E-4	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9999986065162042	WITHOUT_CLASSIFICATION	1.3934837958440644E-6	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999999389176941	WITHOUT_CLASSIFICATION	6.108230589810394E-8	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9996549568734672	WITHOUT_CLASSIFICATION	3.4504312653285446E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996271496034	WITHOUT_CLASSIFICATION	3.728503966137681E-6	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999886033105798	WITHOUT_CLASSIFICATION	1.1396689420196642E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998607927059	WITHOUT_CLASSIFICATION	1.392072941049739E-7	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999994046819644	WITHOUT_CLASSIFICATION	5.95318035607127E-6	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999321311192	WITHOUT_CLASSIFICATION	6.786888081126632E-8	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999815307715	WITHOUT_CLASSIFICATION	1.8469228557123587E-8	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999811111651347	WITHOUT_CLASSIFICATION	1.8888834865372746E-5	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999781508889526	WITHOUT_CLASSIFICATION	2.1849111047492786E-5	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998684935851	WITHOUT_CLASSIFICATION	1.3150641484950264E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999311255697795	WITHOUT_CLASSIFICATION	6.887443022045463E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999982469170873	WITHOUT_CLASSIFICATION	1.7530829127196628E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999957645159477	WITHOUT_CLASSIFICATION	4.235484052290037E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999574822478297	WITHOUT_CLASSIFICATION	4.2517752170426055E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999765665424967	WITHOUT_CLASSIFICATION	2.3433457503245487E-5	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9982960681052412	WITHOUT_CLASSIFICATION	0.0017039318947587115	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9845810032032143	WITHOUT_CLASSIFICATION	0.01541899679678574	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999979031095265	WITHOUT_CLASSIFICATION	2.096890473473357E-6	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9997210788722984	WITHOUT_CLASSIFICATION	2.78921127701512E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999994526176542	WITHOUT_CLASSIFICATION	5.473823457888247E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9770135895028204	WITHOUT_CLASSIFICATION	0.022986410497179654	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999925347351074	WITHOUT_CLASSIFICATION	7.465264892589659E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999840029103076	WITHOUT_CLASSIFICATION	1.5997089692281186E-5	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9996377492490803	WITHOUT_CLASSIFICATION	3.6225075091967203E-4	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998324029018998	WITHOUT_CLASSIFICATION	1.6759709810022875E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999798749176448	WITHOUT_CLASSIFICATION	2.012508235513554E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999994333558041	WITHOUT_CLASSIFICATION	5.666441959272584E-7	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.7246726435236961	DESIGN	0.2753273564763038	WITHOUT_CLASSIFICATION
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999999028344504	WITHOUT_CLASSIFICATION	9.71655496756736E-8	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999756090644424	WITHOUT_CLASSIFICATION	2.439093555761553E-5	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999871724333132	WITHOUT_CLASSIFICATION	1.2827566686811524E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.999990769916101	WITHOUT_CLASSIFICATION	9.230083898987478E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999953231768597	WITHOUT_CLASSIFICATION	4.6768231402763084E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999954870058	WITHOUT_CLASSIFICATION	4.512994147232995E-9	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999954119123	WITHOUT_CLASSIFICATION	4.5880876862709534E-9	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999999378003592	WITHOUT_CLASSIFICATION	6.219964079942946E-8	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.9996348264284894	DESIGN	3.651735715105771E-4	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999949337410006	WITHOUT_CLASSIFICATION	5.066258999400323E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999997169031511	WITHOUT_CLASSIFICATION	2.830968488347615E-7	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999284311491398	WITHOUT_CLASSIFICATION	7.156885086023508E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9375673802357317	DESIGN	0.062432619764268366	WITHOUT_CLASSIFICATION
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9991287502252855	WITHOUT_CLASSIFICATION	8.712497747144145E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999909728507147	WITHOUT_CLASSIFICATION	9.027149285344798E-6	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999848304563725	WITHOUT_CLASSIFICATION	1.5169543627545921E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7944687505178193	WITHOUT_CLASSIFICATION	0.20553124948218074	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999340050094082	WITHOUT_CLASSIFICATION	6.599499059181778E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999256633011	WITHOUT_CLASSIFICATION	7.433669893497691E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.999933367026674	WITHOUT_CLASSIFICATION	6.663297332599365E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9895843238081911	WITHOUT_CLASSIFICATION	0.010415676191808925	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999256633011	WITHOUT_CLASSIFICATION	7.433669893497691E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999340050094082	WITHOUT_CLASSIFICATION	6.599499059181778E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.999933367026674	WITHOUT_CLASSIFICATION	6.663297332599365E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9997923378767841	WITHOUT_CLASSIFICATION	2.0766212321590518E-4	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999979197554066	WITHOUT_CLASSIFICATION	2.0802445933372503E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999996875623	WITHOUT_CLASSIFICATION	3.1243774672632154E-10	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.999547992997149	WITHOUT_CLASSIFICATION	4.520070028509269E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9995967544258191	WITHOUT_CLASSIFICATION	4.032455741808857E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9999672171972683	DESIGN	3.2782802731674364E-5	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.971262377795149	WITHOUT_CLASSIFICATION	0.028737622204850957	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999994556765999	WITHOUT_CLASSIFICATION	5.443234001270148E-7	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9972120034675898	WITHOUT_CLASSIFICATION	0.002787996532410131	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999876840758755	WITHOUT_CLASSIFICATION	1.231592412451146E-5	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999953629618701	WITHOUT_CLASSIFICATION	4.637038129980213E-6	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9991675650903654	WITHOUT_CLASSIFICATION	8.32434909634639E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999993640658839	WITHOUT_CLASSIFICATION	6.359341160901168E-7	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9994819002226314	WITHOUT_CLASSIFICATION	5.18099777368645E-4	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999987016717856	WITHOUT_CLASSIFICATION	1.2983282143472748E-6	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999376860261624	WITHOUT_CLASSIFICATION	6.231397383758277E-5	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999765358041899	WITHOUT_CLASSIFICATION	2.346419581012583E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9795600076532797	WITHOUT_CLASSIFICATION	0.020439992346720292	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9996508919838101	WITHOUT_CLASSIFICATION	3.4910801618992293E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999985561350736	WITHOUT_CLASSIFICATION	1.4438649265010152E-6	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8531106426970266	WITHOUT_CLASSIFICATION	0.14688935730297342	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998836452743	WITHOUT_CLASSIFICATION	1.163547257219043E-7	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999782133877563	WITHOUT_CLASSIFICATION	2.178661224372864E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999989035913117	WITHOUT_CLASSIFICATION	1.0964086882518182E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999244429343	WITHOUT_CLASSIFICATION	7.555706575609867E-8	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999999244429343	WITHOUT_CLASSIFICATION	7.555706575609867E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999963365532	WITHOUT_CLASSIFICATION	3.6634466475842306E-9	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999963365532	WITHOUT_CLASSIFICATION	3.6634466475842306E-9	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9993329148773368	WITHOUT_CLASSIFICATION	6.670851226632888E-4	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999765358041899	WITHOUT_CLASSIFICATION	2.346419581012583E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9997360379524323	WITHOUT_CLASSIFICATION	2.6396204756772105E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.999996102774692	WITHOUT_CLASSIFICATION	3.897225308071516E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999711000058712	WITHOUT_CLASSIFICATION	2.8899994128798805E-5	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9999711000058712	WITHOUT_CLASSIFICATION	2.8899994128798805E-5	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999984139887582	WITHOUT_CLASSIFICATION	1.586011241714961E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.999982035670879	WITHOUT_CLASSIFICATION	1.7964329121097498E-5	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998933436990226	WITHOUT_CLASSIFICATION	1.0665630097731588E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999937632284871	WITHOUT_CLASSIFICATION	6.236771512940534E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9771363659051507	WITHOUT_CLASSIFICATION	0.022863634094849206	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9973662462078795	WITHOUT_CLASSIFICATION	0.0026337537921205605	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998225551381894	WITHOUT_CLASSIFICATION	1.774448618106749E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.989946540205741	WITHOUT_CLASSIFICATION	0.010053459794258984	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9995405700604901	WITHOUT_CLASSIFICATION	4.5942993950990165E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999371683489603	WITHOUT_CLASSIFICATION	6.283165103977637E-5	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999960742285471	WITHOUT_CLASSIFICATION	3.9257714529054816E-6	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999934004484179	WITHOUT_CLASSIFICATION	6.59955158206852E-6	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999895219739523	WITHOUT_CLASSIFICATION	1.047802604759968E-5	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999501407097631	WITHOUT_CLASSIFICATION	4.9859290237011655E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9899917200016397	WITHOUT_CLASSIFICATION	0.010008279998360329	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9994019243909175	WITHOUT_CLASSIFICATION	5.980756090825729E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998963226428286	WITHOUT_CLASSIFICATION	1.036773571714093E-4	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999985759291513	WITHOUT_CLASSIFICATION	1.4240708486086954E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999891238592556	WITHOUT_CLASSIFICATION	1.0876140744328666E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999649888694	WITHOUT_CLASSIFICATION	3.501113049469056E-8	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999998905843329	WITHOUT_CLASSIFICATION	1.094156670975327E-7	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999998662867	WITHOUT_CLASSIFICATION	1.3371320792507728E-10	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999952812546944	WITHOUT_CLASSIFICATION	4.718745305590789E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999961310895732	WITHOUT_CLASSIFICATION	3.868910426845425E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995768246833444	WITHOUT_CLASSIFICATION	4.2317531665552523E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999170203169	WITHOUT_CLASSIFICATION	8.297968309099842E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999840029103076	WITHOUT_CLASSIFICATION	1.5997089692281186E-5	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998912387291	WITHOUT_CLASSIFICATION	1.0876127090567133E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999993502590477	WITHOUT_CLASSIFICATION	6.49740952254133E-7	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999797484790087	WITHOUT_CLASSIFICATION	2.0251520991296826E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997210164314	WITHOUT_CLASSIFICATION	2.7898356850854873E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999165304842603	WITHOUT_CLASSIFICATION	8.346951573959325E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999165304842603	WITHOUT_CLASSIFICATION	8.346951573959325E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999999912909995	WITHOUT_CLASSIFICATION	8.70900049591459E-8	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999967183112718	WITHOUT_CLASSIFICATION	3.281688728130324E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9979073704228743	WITHOUT_CLASSIFICATION	0.0020926295771256896	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9979073704228743	WITHOUT_CLASSIFICATION	0.0020926295771256896	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.999987790035738	WITHOUT_CLASSIFICATION	1.220996426196749E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998329105116873	WITHOUT_CLASSIFICATION	1.670894883127696E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9998416614854069	WITHOUT_CLASSIFICATION	1.5833851459308253E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999976315340005	WITHOUT_CLASSIFICATION	2.3684659995969417E-6	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.999839731975798	WITHOUT_CLASSIFICATION	1.6026802420197634E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999108442651463	WITHOUT_CLASSIFICATION	8.915573485370004E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9995606760410679	WITHOUT_CLASSIFICATION	4.393239589320101E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998401737076443	WITHOUT_CLASSIFICATION	1.598262923557232E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.6834017862146068	WITHOUT_CLASSIFICATION	0.31659821378539327	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.6834017862146068	WITHOUT_CLASSIFICATION	0.31659821378539327	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9969995206264636	WITHOUT_CLASSIFICATION	0.00300047937353636	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.986488602766599	WITHOUT_CLASSIFICATION	0.01351139723340089	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.986488602766599	WITHOUT_CLASSIFICATION	0.01351139723340089	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9786132313252655	WITHOUT_CLASSIFICATION	0.0213867686747346	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999792771801006	WITHOUT_CLASSIFICATION	2.0722819899367308E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.7476745712671907	DESIGN	0.25232542873280933	WITHOUT_CLASSIFICATION
// Get the caller	WITHOUT_CLASSIFICATION	0.999998691302073	WITHOUT_CLASSIFICATION	1.3086979270570335E-6	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999944676226618	WITHOUT_CLASSIFICATION	5.532377338258972E-6	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999940596028	WITHOUT_CLASSIFICATION	5.9403972210942635E-9	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999221123910809	WITHOUT_CLASSIFICATION	7.788760891918311E-5	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999996624249161	WITHOUT_CLASSIFICATION	3.375750839967301E-7	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999999582738113	WITHOUT_CLASSIFICATION	4.172618873617151E-8	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9999183138434868	WITHOUT_CLASSIFICATION	8.168615651309555E-5	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999999939910709	WITHOUT_CLASSIFICATION	6.008929085034525E-9	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998880034379841	WITHOUT_CLASSIFICATION	1.119965620158668E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999853368695455	WITHOUT_CLASSIFICATION	1.466313045441764E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999853368695455	WITHOUT_CLASSIFICATION	1.466313045441764E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999853368695455	WITHOUT_CLASSIFICATION	1.466313045441764E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999853368695455	WITHOUT_CLASSIFICATION	1.466313045441764E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999989469008704	WITHOUT_CLASSIFICATION	1.053099129630685E-6	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999574626966389	WITHOUT_CLASSIFICATION	4.253730336100615E-5	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999866451646958	WITHOUT_CLASSIFICATION	1.3354835304171393E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9998661933582967	WITHOUT_CLASSIFICATION	1.3380664170333938E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999999810066034	WITHOUT_CLASSIFICATION	1.8993396597886708E-7	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9600068366100206	WITHOUT_CLASSIFICATION	0.03999316338997942	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9693852758124775	WITHOUT_CLASSIFICATION	0.030614724187522594	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999957399597105	WITHOUT_CLASSIFICATION	4.2600402895253584E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999811960043	WITHOUT_CLASSIFICATION	1.8803995685359563E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998192230154	WITHOUT_CLASSIFICATION	1.8077698467701504E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9956482356656482	WITHOUT_CLASSIFICATION	0.004351764334351833	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999872491000117	WITHOUT_CLASSIFICATION	1.2750899988302176E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999994955310795	WITHOUT_CLASSIFICATION	5.044689204336637E-7	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999996263429	WITHOUT_CLASSIFICATION	3.736570615161639E-10	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999995616260083	WITHOUT_CLASSIFICATION	4.383739916304546E-7	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999872491000117	WITHOUT_CLASSIFICATION	1.2750899988302176E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999872091024	WITHOUT_CLASSIFICATION	1.2790897688840332E-8	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999989282982907	WITHOUT_CLASSIFICATION	1.0717017093004454E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999998067661459	WITHOUT_CLASSIFICATION	1.9323385409475497E-6	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9967189857398442	WITHOUT_CLASSIFICATION	0.0032810142601557585	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999947069378755	WITHOUT_CLASSIFICATION	5.293062124595287E-6	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9993934921597523	WITHOUT_CLASSIFICATION	6.065078402477182E-4	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999748060911133	WITHOUT_CLASSIFICATION	2.519390888666478E-5	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999984836189902	WITHOUT_CLASSIFICATION	1.5163810097386405E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999534439339	WITHOUT_CLASSIFICATION	4.655606609749103E-7	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999972936059084	WITHOUT_CLASSIFICATION	2.706394091676305E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996069279015	WITHOUT_CLASSIFICATION	3.930720985563788E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999994574134534	WITHOUT_CLASSIFICATION	5.425865466692371E-7	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9969846383972889	WITHOUT_CLASSIFICATION	0.003015361602711021	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9993675526985074	WITHOUT_CLASSIFICATION	6.324473014925631E-4	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999933038197377	WITHOUT_CLASSIFICATION	6.69618026234887E-6	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.8881809237324284	WITHOUT_CLASSIFICATION	0.11181907626757168	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948740262393	WITHOUT_CLASSIFICATION	5.125973760684463E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999881060123207	WITHOUT_CLASSIFICATION	1.1893987679374786E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999928350036058	WITHOUT_CLASSIFICATION	7.164996394186696E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999881060123207	WITHOUT_CLASSIFICATION	1.1893987679374786E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999752743534	WITHOUT_CLASSIFICATION	2.472564660990867E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9995107248874665	WITHOUT_CLASSIFICATION	4.89275112533477E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9997396185593935	WITHOUT_CLASSIFICATION	2.6038144060651857E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999791750647549	WITHOUT_CLASSIFICATION	2.0824935245098894E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948740262393	WITHOUT_CLASSIFICATION	5.125973760684463E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999928350036058	WITHOUT_CLASSIFICATION	7.164996394186696E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999752743534	WITHOUT_CLASSIFICATION	2.472564660990867E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999779008856677	WITHOUT_CLASSIFICATION	2.2099114332278667E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999802967889919	WITHOUT_CLASSIFICATION	1.970321100803836E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999198968929667	WITHOUT_CLASSIFICATION	8.010310703333894E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.999989529150461	WITHOUT_CLASSIFICATION	1.0470849538988432E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9993020380486397	WITHOUT_CLASSIFICATION	6.979619513602616E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999977085608006	WITHOUT_CLASSIFICATION	2.2914391993727426E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998963226428286	WITHOUT_CLASSIFICATION	1.036773571714093E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9995107248874665	WITHOUT_CLASSIFICATION	4.89275112533477E-4	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999411233830642	WITHOUT_CLASSIFICATION	5.8876616935746796E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997866925170121	WITHOUT_CLASSIFICATION	2.1330748298780953E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999817117521218	WITHOUT_CLASSIFICATION	1.8288247878208118E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998963226428286	WITHOUT_CLASSIFICATION	1.036773571714093E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999709592351548	WITHOUT_CLASSIFICATION	2.904076484524522E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998963226428286	WITHOUT_CLASSIFICATION	1.036773571714093E-4	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998864965528	WITHOUT_CLASSIFICATION	1.1350344723565428E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994858098409	WITHOUT_CLASSIFICATION	5.141901590850106E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999624927945816	WITHOUT_CLASSIFICATION	3.750720541835333E-5	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999638316266477	WITHOUT_CLASSIFICATION	3.616837335233329E-5	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999714067232018	WITHOUT_CLASSIFICATION	2.8593276798234692E-5	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999946098799402	WITHOUT_CLASSIFICATION	5.3901200598867515E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999971879624891	WITHOUT_CLASSIFICATION	2.8120375108980642E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999893741724444	WITHOUT_CLASSIFICATION	1.0625827555584288E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999999399347234	WITHOUT_CLASSIFICATION	6.006527659096076E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9990440280819433	WITHOUT_CLASSIFICATION	9.559719180566648E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9990827417671764	WITHOUT_CLASSIFICATION	9.172582328236546E-4	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999999783989211	WITHOUT_CLASSIFICATION	2.16010788994213E-8	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.7476745712671907	DESIGN	0.25232542873280933	WITHOUT_CLASSIFICATION
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9989609812785953	WITHOUT_CLASSIFICATION	0.001039018721404668	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997418787980611	WITHOUT_CLASSIFICATION	2.581212019388586E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999803235368245	WITHOUT_CLASSIFICATION	1.9676463175505612E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9986600274021024	WITHOUT_CLASSIFICATION	0.0013399725978976641	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9998773229613931	WITHOUT_CLASSIFICATION	1.2267703860692545E-4	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999957700361792	WITHOUT_CLASSIFICATION	4.2299638208241315E-6	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999865610090699	WITHOUT_CLASSIFICATION	1.343899093005346E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8118420504243515	WITHOUT_CLASSIFICATION	0.1881579495756485	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999986572247173	WITHOUT_CLASSIFICATION	1.3427752827768535E-6	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.999985256707949	WITHOUT_CLASSIFICATION	1.4743292050945654E-5	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9505036612108363	DESIGN	0.0494963387891636	WITHOUT_CLASSIFICATION
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999994733580857	WITHOUT_CLASSIFICATION	5.266419141849121E-7	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999983629276261	WITHOUT_CLASSIFICATION	1.6370723738950536E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999999534536309	WITHOUT_CLASSIFICATION	4.654636912887558E-8	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999918391177496	WITHOUT_CLASSIFICATION	8.160882250427735E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999500678986941	WITHOUT_CLASSIFICATION	4.993210130587961E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999993624312368	WITHOUT_CLASSIFICATION	6.375687632692662E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999936560289191	WITHOUT_CLASSIFICATION	6.343971080940119E-6	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.99999414034906	WITHOUT_CLASSIFICATION	5.859650939960561E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9906559974974404	WITHOUT_CLASSIFICATION	0.009344002502559626	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.999208197677873	WITHOUT_CLASSIFICATION	7.918023221270806E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9920067829610761	WITHOUT_CLASSIFICATION	0.007993217038923871	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999994611016096	WITHOUT_CLASSIFICATION	5.388983902964866E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9964753913433738	WITHOUT_CLASSIFICATION	0.0035246086566260927	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.996656110651004	WITHOUT_CLASSIFICATION	0.0033438893489960734	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999374867811002	WITHOUT_CLASSIFICATION	6.25132188998124E-5	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9997511163746281	WITHOUT_CLASSIFICATION	2.488836253719553E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.927924317025654	DESIGN	0.07207568297434593	WITHOUT_CLASSIFICATION
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999993049920284	WITHOUT_CLASSIFICATION	6.950079716159512E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9459128735126685	WITHOUT_CLASSIFICATION	0.0540871264873315	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999816335185181	WITHOUT_CLASSIFICATION	1.836648148191511E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999816335185181	WITHOUT_CLASSIFICATION	1.836648148191511E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999983949988	WITHOUT_CLASSIFICATION	1.6050013057300544E-9	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999893741724444	WITHOUT_CLASSIFICATION	1.0625827555584288E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.992356370907973	WITHOUT_CLASSIFICATION	0.007643629092026938	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999997771815486	WITHOUT_CLASSIFICATION	2.2281845126488168E-7	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999996111477097	WITHOUT_CLASSIFICATION	3.888522903535722E-7	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999821485022	WITHOUT_CLASSIFICATION	1.785149781673839E-8	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998417172911327	WITHOUT_CLASSIFICATION	1.5828270886738738E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998001466955019	WITHOUT_CLASSIFICATION	1.9985330449815526E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999599530685	WITHOUT_CLASSIFICATION	4.004693156767666E-8	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999991373696983	WITHOUT_CLASSIFICATION	8.62630301876867E-7	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9991387339844975	WITHOUT_CLASSIFICATION	8.612660155024782E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999899484020849	WITHOUT_CLASSIFICATION	1.0051597915083648E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.8821049699686798	WITHOUT_CLASSIFICATION	0.11789503003132018	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9994027312255123	WITHOUT_CLASSIFICATION	5.972687744877545E-4	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9997262984450593	WITHOUT_CLASSIFICATION	2.737015549406703E-4	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999990938219213	WITHOUT_CLASSIFICATION	9.061780787920642E-7	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999994028529802	WITHOUT_CLASSIFICATION	5.97147019904579E-7	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999993229941606	WITHOUT_CLASSIFICATION	6.770058394098745E-7	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999999437464305	WITHOUT_CLASSIFICATION	5.62535694694514E-8	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9893306611472403	WITHOUT_CLASSIFICATION	0.010669338852759757	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9998195964310079	WITHOUT_CLASSIFICATION	1.8040356899219097E-4	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999908561148121	WITHOUT_CLASSIFICATION	9.143885187897076E-6	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999999815564837	WITHOUT_CLASSIFICATION	1.8443516216361127E-8	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999944378748195	WITHOUT_CLASSIFICATION	5.5621251805253365E-6	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.927924317025654	DESIGN	0.07207568297434593	WITHOUT_CLASSIFICATION
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999695034944333	WITHOUT_CLASSIFICATION	3.0496505566661747E-5	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999880666933668	WITHOUT_CLASSIFICATION	1.1933306633203093E-5	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999996231800653	WITHOUT_CLASSIFICATION	3.768199347199952E-7	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999998913475221	WITHOUT_CLASSIFICATION	1.0865247790688745E-7	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9993762363314362	WITHOUT_CLASSIFICATION	6.237636685638459E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999816076622681	WITHOUT_CLASSIFICATION	1.8392337731971414E-5	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999897810147776	WITHOUT_CLASSIFICATION	1.0218985222328536E-5	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999977638459555	WITHOUT_CLASSIFICATION	2.2361540444448698E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999834881034	WITHOUT_CLASSIFICATION	1.651189671930367E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999967266641301	WITHOUT_CLASSIFICATION	3.2733358699219823E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999922473461	WITHOUT_CLASSIFICATION	7.752653858289129E-9	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999993502792	WITHOUT_CLASSIFICATION	6.497208624933672E-10	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9998085226099651	WITHOUT_CLASSIFICATION	1.9147739003482744E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999845498421692	WITHOUT_CLASSIFICATION	1.5450157830776747E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9942263566229446	WITHOUT_CLASSIFICATION	0.005773643377055456	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9942263566229446	WITHOUT_CLASSIFICATION	0.005773643377055456	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999266857180321	WITHOUT_CLASSIFICATION	7.331428196781589E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999102347043709	WITHOUT_CLASSIFICATION	8.976529562906447E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9956973856315083	WITHOUT_CLASSIFICATION	0.004302614368491717	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9956973856315083	WITHOUT_CLASSIFICATION	0.004302614368491717	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999950837520302	WITHOUT_CLASSIFICATION	4.916247969854418E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9688803492931776	WITHOUT_CLASSIFICATION	0.031119650706822478	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8920491396475664	WITHOUT_CLASSIFICATION	0.10795086035243355	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999975148876327	WITHOUT_CLASSIFICATION	2.485112367330154E-6	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998832308301	WITHOUT_CLASSIFICATION	1.1676916977335137E-7	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999558065894	WITHOUT_CLASSIFICATION	4.419341070917872E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999989134053088	WITHOUT_CLASSIFICATION	1.0865946911897193E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999989134053088	WITHOUT_CLASSIFICATION	1.0865946911897193E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999405541148	WITHOUT_CLASSIFICATION	5.94458852952182E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9890179953416645	WITHOUT_CLASSIFICATION	0.010982004658335449	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.99994840010976	WITHOUT_CLASSIFICATION	5.1599890240032596E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999924011381611	WITHOUT_CLASSIFICATION	7.598861838898035E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999924011381611	WITHOUT_CLASSIFICATION	7.598861838898035E-5	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999056666203	WITHOUT_CLASSIFICATION	9.433337973353334E-8	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999997170757386	WITHOUT_CLASSIFICATION	2.829242613726692E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9284805169346917	WITHOUT_CLASSIFICATION	0.0715194830653083	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999979986090436	WITHOUT_CLASSIFICATION	2.001390956443262E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999982412956008	WITHOUT_CLASSIFICATION	1.7587043991464609E-6	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999506007016074	WITHOUT_CLASSIFICATION	4.939929839261891E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999551919770344	WITHOUT_CLASSIFICATION	4.480802296553492E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999591115057749	WITHOUT_CLASSIFICATION	4.088849422505732E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9969262307982972	WITHOUT_CLASSIFICATION	0.0030737692017026924	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999981213290657	WITHOUT_CLASSIFICATION	1.8786709343449676E-6	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9964004497415095	WITHOUT_CLASSIFICATION	0.0035995502584904933	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9946220911624728	WITHOUT_CLASSIFICATION	0.005377908837527163	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999994696282151	WITHOUT_CLASSIFICATION	5.303717849566783E-7	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9981765146710357	WITHOUT_CLASSIFICATION	0.0018234853289641661	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9998943791093844	WITHOUT_CLASSIFICATION	1.0562089061565223E-4	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999998856120539	WITHOUT_CLASSIFICATION	1.1438794611644996E-7	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999994680545794	WITHOUT_CLASSIFICATION	5.319454206302643E-7	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999924836891	WITHOUT_CLASSIFICATION	7.516310895727323E-9	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999944129527355	WITHOUT_CLASSIFICATION	5.587047264569362E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999799856249597	WITHOUT_CLASSIFICATION	2.0014375040330675E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999837736732928	WITHOUT_CLASSIFICATION	1.622632670713585E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9969294731015799	WITHOUT_CLASSIFICATION	0.0030705268984200706	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9999805673063756	WITHOUT_CLASSIFICATION	1.9432693624416814E-5	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999994027882524	WITHOUT_CLASSIFICATION	5.972117476983209E-7	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.977985323672591	WITHOUT_CLASSIFICATION	0.02201467632740903	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999745672404244	WITHOUT_CLASSIFICATION	2.54327595755996E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999869562727209	WITHOUT_CLASSIFICATION	1.3043727279032E-5	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999995404904188	WITHOUT_CLASSIFICATION	4.595095811433998E-7	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999996682338588	WITHOUT_CLASSIFICATION	3.317661412834121E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999982130338624	WITHOUT_CLASSIFICATION	1.786966137568035E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9536283910983961	WITHOUT_CLASSIFICATION	0.04637160890160393	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999716587115313	WITHOUT_CLASSIFICATION	2.8341288468772607E-5	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999941773602308	WITHOUT_CLASSIFICATION	5.8226397692216555E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999334841789751	WITHOUT_CLASSIFICATION	6.651582102492346E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998630953006946	WITHOUT_CLASSIFICATION	1.3690469930549342E-4	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999924543403688	WITHOUT_CLASSIFICATION	7.545659631200116E-6	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9993822808112038	WITHOUT_CLASSIFICATION	6.177191887961146E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999989196536427	WITHOUT_CLASSIFICATION	1.0803463573125069E-6	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999956524758589	WITHOUT_CLASSIFICATION	4.347524141139555E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999992984707457	WITHOUT_CLASSIFICATION	7.015292543010628E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9949643724263709	WITHOUT_CLASSIFICATION	0.005035627573629055	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999530089539739	WITHOUT_CLASSIFICATION	4.699104602608963E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.999931187241975	WITHOUT_CLASSIFICATION	6.88127580250312E-5	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999271880413917	WITHOUT_CLASSIFICATION	7.281195860821258E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999990158970372	WITHOUT_CLASSIFICATION	9.841029627657269E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999795789283443	WITHOUT_CLASSIFICATION	2.0421071655577362E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9996576485758546	WITHOUT_CLASSIFICATION	3.4235142414548465E-4	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9394028457269507	WITHOUT_CLASSIFICATION	0.06059715427304937	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999986836255623	WITHOUT_CLASSIFICATION	1.3163744377126898E-6	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999843568299	WITHOUT_CLASSIFICATION	1.564317007678981E-8	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.999889724031597	WITHOUT_CLASSIFICATION	1.1027596840300759E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999620729584888	WITHOUT_CLASSIFICATION	3.792704151126563E-5	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999998648712	WITHOUT_CLASSIFICATION	1.3512873997407662E-10	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999189510426	WITHOUT_CLASSIFICATION	8.104895751430793E-8	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9992281592626447	WITHOUT_CLASSIFICATION	7.718407373551785E-4	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999992721423377	WITHOUT_CLASSIFICATION	7.278576622307308E-7	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9996958577738991	WITHOUT_CLASSIFICATION	3.0414222610094626E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999719143491171	WITHOUT_CLASSIFICATION	2.8085650882782302E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9997155301606148	WITHOUT_CLASSIFICATION	2.844698393852433E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9985400143262807	WITHOUT_CLASSIFICATION	0.0014599856737193264	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999956001957	WITHOUT_CLASSIFICATION	4.399804248905217E-9	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999956001957	WITHOUT_CLASSIFICATION	4.399804248905217E-9	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999993992230013	WITHOUT_CLASSIFICATION	6.007769985993076E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999908374088201	WITHOUT_CLASSIFICATION	9.162591179751223E-6	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999712614107	WITHOUT_CLASSIFICATION	2.873858930078229E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999738294814398	WITHOUT_CLASSIFICATION	2.6170518560235532E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999379268232222	WITHOUT_CLASSIFICATION	6.207317677782918E-5	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995577958724	WITHOUT_CLASSIFICATION	4.4220412763647847E-7	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999998478607676	WITHOUT_CLASSIFICATION	1.5213923237692241E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999999999156	WITHOUT_CLASSIFICATION	8.439906782581955E-13	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999889955728681	WITHOUT_CLASSIFICATION	1.1004427131776668E-5	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999942220290868	WITHOUT_CLASSIFICATION	5.7779709131886015E-6	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999939331736897	WITHOUT_CLASSIFICATION	6.066826310303862E-5	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9998468756000832	WITHOUT_CLASSIFICATION	1.5312439991678963E-4	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999990507531189	WITHOUT_CLASSIFICATION	9.492468811115074E-6	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9983429139297549	WITHOUT_CLASSIFICATION	0.0016570860702450874	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999990804969412	WITHOUT_CLASSIFICATION	9.195030587767724E-7	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999990804969412	WITHOUT_CLASSIFICATION	9.195030587767724E-7	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999992778289175	WITHOUT_CLASSIFICATION	7.221710825891218E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999993862209277	WITHOUT_CLASSIFICATION	6.13779072303272E-7	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999978212336	WITHOUT_CLASSIFICATION	2.178766330090614E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999996244876311	WITHOUT_CLASSIFICATION	3.7551236890511846E-7	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999992453324807	WITHOUT_CLASSIFICATION	7.546675193269015E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925555159381	WITHOUT_CLASSIFICATION	7.444484061859549E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999975597171087	WITHOUT_CLASSIFICATION	2.4402828912735057E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9745780585977516	WITHOUT_CLASSIFICATION	0.02542194140224843	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999944236168243	WITHOUT_CLASSIFICATION	5.576383175678037E-6	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999994539276	WITHOUT_CLASSIFICATION	5.46072456076584E-10	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999971049515	WITHOUT_CLASSIFICATION	2.895048422494077E-9	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999995907695984	WITHOUT_CLASSIFICATION	4.092304016191047E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999996428544	WITHOUT_CLASSIFICATION	3.5714569694290747E-10	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999987866978501	WITHOUT_CLASSIFICATION	1.2133021498554283E-6	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.8964712070356086	DESIGN	0.10352879296439146	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999776572889615	WITHOUT_CLASSIFICATION	2.2342711038510345E-5	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9987867748767492	WITHOUT_CLASSIFICATION	0.001213225123250913	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999565613624444	WITHOUT_CLASSIFICATION	4.343863755558577E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999887630718967	WITHOUT_CLASSIFICATION	1.1236928103453776E-5	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999911242128	WITHOUT_CLASSIFICATION	8.87578709384826E-9	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999957704427063	WITHOUT_CLASSIFICATION	4.229557293716198E-6	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999999994658	WITHOUT_CLASSIFICATION	5.34192762989411E-12	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999994788551242	WITHOUT_CLASSIFICATION	5.211448757226841E-7	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998942666620281	WITHOUT_CLASSIFICATION	1.0573333797182167E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9815697875199674	WITHOUT_CLASSIFICATION	0.018430212480032713	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9999092293785222	WITHOUT_CLASSIFICATION	9.077062147785692E-5	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999601794914	WITHOUT_CLASSIFICATION	3.98205085652904E-8	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.999998914353036	WITHOUT_CLASSIFICATION	1.085646964054925E-6	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999996133208038	WITHOUT_CLASSIFICATION	3.866791961597431E-7	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9996912274680791	WITHOUT_CLASSIFICATION	3.087725319208479E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9999752429290334	WITHOUT_CLASSIFICATION	2.4757070966681618E-5	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999990541921235	WITHOUT_CLASSIFICATION	9.458078764950042E-7	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999314363050412	WITHOUT_CLASSIFICATION	6.856369495882932E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999778525406089	WITHOUT_CLASSIFICATION	2.214745939107331E-5	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9189951369766706	WITHOUT_CLASSIFICATION	0.08100486302332945	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999958965648768	WITHOUT_CLASSIFICATION	4.103435123254313E-6	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999990438360054	WITHOUT_CLASSIFICATION	9.56163994598743E-6	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999051038072	WITHOUT_CLASSIFICATION	9.489619272964097E-8	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999712031407296	WITHOUT_CLASSIFICATION	2.8796859270407543E-5	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9963761966150264	WITHOUT_CLASSIFICATION	0.0036238033849735132	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997450392464239	WITHOUT_CLASSIFICATION	2.549607535761234E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9997450392464239	WITHOUT_CLASSIFICATION	2.549607535761234E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999881839806	WITHOUT_CLASSIFICATION	1.1816019348594104E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999076228041882	WITHOUT_CLASSIFICATION	9.23771958117919E-5	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9740535131518555	WITHOUT_CLASSIFICATION	0.02594648684814449	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999969669962725	WITHOUT_CLASSIFICATION	3.0330037275744007E-6	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999630219193439	WITHOUT_CLASSIFICATION	3.697808065603615E-5	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999987266459951	WITHOUT_CLASSIFICATION	1.273354004897494E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.999760370521007	WITHOUT_CLASSIFICATION	2.396294789931489E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999967962613062	WITHOUT_CLASSIFICATION	3.2037386937992225E-5	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9668002242651996	DESIGN	0.03319977573480035	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990679679466	WITHOUT_CLASSIFICATION	9.320320533642472E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988929392182	WITHOUT_CLASSIFICATION	1.1070607817785938E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.5541023022384298	DESIGN	0.4458976977615701	WITHOUT_CLASSIFICATION
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.999999341629801	WITHOUT_CLASSIFICATION	6.583701989660324E-7	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999997715636526	WITHOUT_CLASSIFICATION	2.2843634743654658E-7	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999999684752413	WITHOUT_CLASSIFICATION	3.1524758769136365E-8	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9999975952116542	WITHOUT_CLASSIFICATION	2.4047883458640577E-6	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9997186971476976	WITHOUT_CLASSIFICATION	2.813028523023917E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999997804874581	WITHOUT_CLASSIFICATION	2.195125418095535E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999982380899659	WITHOUT_CLASSIFICATION	1.7619100340879227E-6	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9945923923022641	WITHOUT_CLASSIFICATION	0.005407607697735834	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9876223228457655	WITHOUT_CLASSIFICATION	0.012377677154234459	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999559234822059	WITHOUT_CLASSIFICATION	4.4076517794199474E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9998505840520049	WITHOUT_CLASSIFICATION	1.4941594799509694E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9937284835893819	WITHOUT_CLASSIFICATION	0.006271516410618094	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9438193820878678	WITHOUT_CLASSIFICATION	0.05618061791213229	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.999909945172338	WITHOUT_CLASSIFICATION	9.00548276619916E-5	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999995986142747	WITHOUT_CLASSIFICATION	4.013857253549197E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.999999999023515	WITHOUT_CLASSIFICATION	9.764850424489357E-10	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999962465258094	WITHOUT_CLASSIFICATION	3.7534741905978396E-6	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9998528487561643	WITHOUT_CLASSIFICATION	1.4715124383564825E-4	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999900782623706	WITHOUT_CLASSIFICATION	9.921737629378473E-6	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999052011081746	WITHOUT_CLASSIFICATION	9.479889182539928E-5	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999487850740068	WITHOUT_CLASSIFICATION	5.121492599333031E-5	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999998310316414	WITHOUT_CLASSIFICATION	1.6896835864588598E-7	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9977878273987854	WITHOUT_CLASSIFICATION	0.0022121726012146103	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999998908350148	WITHOUT_CLASSIFICATION	1.0916498512619057E-7	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999952783270263	WITHOUT_CLASSIFICATION	4.721672973731052E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999975654627143	WITHOUT_CLASSIFICATION	2.4345372855768656E-6	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9998057908595259	WITHOUT_CLASSIFICATION	1.9420914047412944E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999960658951671	WITHOUT_CLASSIFICATION	3.934104832933473E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999997288644265	WITHOUT_CLASSIFICATION	2.7113557354625077E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999992599926651	WITHOUT_CLASSIFICATION	7.400073348710629E-7	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999883930449285	WITHOUT_CLASSIFICATION	1.160695507147161E-5	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.99999999999997	WITHOUT_CLASSIFICATION	2.993033974480648E-14	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999996845783198	WITHOUT_CLASSIFICATION	3.154216801853711E-7	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9999977357758123	WITHOUT_CLASSIFICATION	2.2642241877508295E-6	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999930129311804	WITHOUT_CLASSIFICATION	6.987068819595958E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.999990507531189	WITHOUT_CLASSIFICATION	9.492468811115074E-6	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999997373363	WITHOUT_CLASSIFICATION	2.626636597788402E-10	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999986403725	WITHOUT_CLASSIFICATION	1.3596275815573087E-9	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999943246200256	WITHOUT_CLASSIFICATION	5.67537997437761E-6	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9999969679060706	WITHOUT_CLASSIFICATION	3.032093929342217E-6	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999950471572	WITHOUT_CLASSIFICATION	4.952842890714858E-9	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.997353697217104	WITHOUT_CLASSIFICATION	0.0026463027828960406	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999998599092671	WITHOUT_CLASSIFICATION	1.4009073291698414E-7	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.99999999879478	WITHOUT_CLASSIFICATION	1.2052200833016995E-9	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999997438218302	WITHOUT_CLASSIFICATION	2.561781698157509E-7	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999997508124	WITHOUT_CLASSIFICATION	2.4918753443829476E-10	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999993264255	WITHOUT_CLASSIFICATION	6.735745638370707E-10	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.778245132064649	WITHOUT_CLASSIFICATION	0.22175486793535112	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999463320162	WITHOUT_CLASSIFICATION	5.366798386343899E-8	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999757524983	WITHOUT_CLASSIFICATION	2.4247501688993374E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995892487509	WITHOUT_CLASSIFICATION	4.1075124906344624E-7	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999854394145	WITHOUT_CLASSIFICATION	1.4560585540520366E-8	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999998062014162	WITHOUT_CLASSIFICATION	1.9379858383227713E-7	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999977561694	WITHOUT_CLASSIFICATION	2.243830546326498E-9	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999465370701485	WITHOUT_CLASSIFICATION	5.346292985148354E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995892487509	WITHOUT_CLASSIFICATION	4.1075124906344624E-7	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999999944837824	WITHOUT_CLASSIFICATION	5.516217563538101E-9	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999977977044311	WITHOUT_CLASSIFICATION	2.202295568820552E-6	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9998917494781009	WITHOUT_CLASSIFICATION	1.0825052189918061E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999974070047841	WITHOUT_CLASSIFICATION	2.5929952157827043E-6	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999971547975186	WITHOUT_CLASSIFICATION	2.8452024813831815E-6	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999158823511053	WITHOUT_CLASSIFICATION	8.41176488946598E-5	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999774694274	WITHOUT_CLASSIFICATION	2.2530572700200303E-8	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9999961326908009	WITHOUT_CLASSIFICATION	3.867309199183172E-6	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999994947447584	WITHOUT_CLASSIFICATION	5.052552416157547E-7	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999587076450361	WITHOUT_CLASSIFICATION	4.129235496389182E-4	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.99998586260304	WITHOUT_CLASSIFICATION	1.413739695999612E-5	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.5455336050223688	WITHOUT_CLASSIFICATION	0.4544663949776312	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9988076399106877	WITHOUT_CLASSIFICATION	0.0011923600893123147	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.999979634097241	WITHOUT_CLASSIFICATION	2.036590275897688E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999888325685587	WITHOUT_CLASSIFICATION	1.1167431441204362E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999944378748195	WITHOUT_CLASSIFICATION	5.5621251805253365E-6	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999976067926479	WITHOUT_CLASSIFICATION	2.393207352173E-6	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999998065255088	WITHOUT_CLASSIFICATION	1.9347449119518007E-7	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999971159632529	WITHOUT_CLASSIFICATION	2.884036747108017E-5	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.7853911648418754	DESIGN	0.21460883515812454	WITHOUT_CLASSIFICATION
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999979289783241	WITHOUT_CLASSIFICATION	2.071021675909095E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999981115016954	WITHOUT_CLASSIFICATION	1.8884983045509763E-6	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999996913272486	WITHOUT_CLASSIFICATION	3.08672751347625E-7	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999993983849	WITHOUT_CLASSIFICATION	6.016150771842796E-10	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999994371351	WITHOUT_CLASSIFICATION	5.628648725627144E-10	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999980476469	WITHOUT_CLASSIFICATION	1.952353124261866E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9995778297525801	WITHOUT_CLASSIFICATION	4.22170247419772E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999998671845277	WITHOUT_CLASSIFICATION	1.328154722005345E-7	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9940669232808739	WITHOUT_CLASSIFICATION	0.005933076719126147	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999871300540458	WITHOUT_CLASSIFICATION	1.2869945954170072E-5	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999998021710067	WITHOUT_CLASSIFICATION	1.9782899339188293E-7	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9951487055710466	WITHOUT_CLASSIFICATION	0.004851294428953362	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9915042740812842	WITHOUT_CLASSIFICATION	0.008495725918715825	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999815363227875	WITHOUT_CLASSIFICATION	1.846367721240791E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999541753135	WITHOUT_CLASSIFICATION	4.5824686511200564E-8	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9996690767708174	WITHOUT_CLASSIFICATION	3.309232291825854E-4	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999565198849736	WITHOUT_CLASSIFICATION	4.348011502634501E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9999896257060906	WITHOUT_CLASSIFICATION	1.0374293909289185E-5	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999238287098	WITHOUT_CLASSIFICATION	7.617129006316742E-8	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999999067576	WITHOUT_CLASSIFICATION	9.324240273829765E-10	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999994185448494	WITHOUT_CLASSIFICATION	5.814551505613818E-7	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999994185448494	WITHOUT_CLASSIFICATION	5.814551505613818E-7	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999504367980009	WITHOUT_CLASSIFICATION	4.9563201999098756E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998196851987	WITHOUT_CLASSIFICATION	1.8031480136668684E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999979521198548	WITHOUT_CLASSIFICATION	2.047880145175441E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8924391459571072	DESIGN	0.10756085404289291	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999976315340005	WITHOUT_CLASSIFICATION	2.3684659995969417E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999976315340005	WITHOUT_CLASSIFICATION	2.3684659995969417E-6	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999909327274273	WITHOUT_CLASSIFICATION	9.067272572724706E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999732827507424	WITHOUT_CLASSIFICATION	2.6717249257607083E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9962916737748923	WITHOUT_CLASSIFICATION	0.0037083262251078166	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998502448973865	WITHOUT_CLASSIFICATION	1.497551026136184E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999682329361	WITHOUT_CLASSIFICATION	3.1767063741084815E-8	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999993771531692	WITHOUT_CLASSIFICATION	6.228468307909E-7	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999935824424968	WITHOUT_CLASSIFICATION	6.417557503149904E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999994103542157	WITHOUT_CLASSIFICATION	5.896457842765154E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9994336314577449	WITHOUT_CLASSIFICATION	5.663685422551939E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999739290503593	WITHOUT_CLASSIFICATION	2.6070949640754548E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999739290503593	WITHOUT_CLASSIFICATION	2.6070949640754548E-5	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999527936865424	WITHOUT_CLASSIFICATION	4.7206313457620484E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999784470040873	WITHOUT_CLASSIFICATION	2.1552995912657358E-5	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999998623121518	WITHOUT_CLASSIFICATION	1.376878481992843E-6	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9221828515112993	WITHOUT_CLASSIFICATION	0.07781714848870061	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9343310585816272	WITHOUT_CLASSIFICATION	0.06566894141837273	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999886033105798	WITHOUT_CLASSIFICATION	1.1396689420196642E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929824524958	WITHOUT_CLASSIFICATION	7.017547504198826E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999978963851784	WITHOUT_CLASSIFICATION	2.103614821466739E-6	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998664157044996	WITHOUT_CLASSIFICATION	1.335842955003861E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9703457856855867	WITHOUT_CLASSIFICATION	0.029654214314413216	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.916293146773391	WITHOUT_CLASSIFICATION	0.08370685322660897	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.999587076450361	WITHOUT_CLASSIFICATION	4.129235496389182E-4	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9912840017192478	WITHOUT_CLASSIFICATION	0.008715998280752216	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9994668752516022	WITHOUT_CLASSIFICATION	5.331247483978006E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999975563582	WITHOUT_CLASSIFICATION	2.443641933497412E-9	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999975449738815	WITHOUT_CLASSIFICATION	2.4550261185397687E-6	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999351897193	WITHOUT_CLASSIFICATION	6.481028066333886E-8	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999989010134201	WITHOUT_CLASSIFICATION	1.0989865798050323E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9975654252185501	WITHOUT_CLASSIFICATION	0.0024345747814499864	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999569413151344	WITHOUT_CLASSIFICATION	4.305868486559874E-5	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999993229351229	WITHOUT_CLASSIFICATION	6.770648771017697E-6	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999981166041098	WITHOUT_CLASSIFICATION	1.8833958902591416E-6	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9999981166041098	WITHOUT_CLASSIFICATION	1.8833958902591416E-6	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999872491000117	WITHOUT_CLASSIFICATION	1.2750899988302176E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999699392181	WITHOUT_CLASSIFICATION	3.006078194390225E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9995577086795226	WITHOUT_CLASSIFICATION	4.42291320477238E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999932492258423	WITHOUT_CLASSIFICATION	6.750774157722842E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998321508038	WITHOUT_CLASSIFICATION	1.6784919628196338E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.999997069033986	WITHOUT_CLASSIFICATION	2.9309660140289932E-6	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999933038197377	WITHOUT_CLASSIFICATION	6.69618026234887E-6	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999997987814795	WITHOUT_CLASSIFICATION	2.0121852047352856E-7	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999779008856677	WITHOUT_CLASSIFICATION	2.2099114332278667E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999872927686754	WITHOUT_CLASSIFICATION	1.2707231324638549E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998963226428286	WITHOUT_CLASSIFICATION	1.036773571714093E-4	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9984744128950663	DESIGN	0.0015255871049336038	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9850297826402434	WITHOUT_CLASSIFICATION	0.014970217359756654	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999949023065	WITHOUT_CLASSIFICATION	5.09769346234484E-9	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9869189672111878	WITHOUT_CLASSIFICATION	0.013081032788812192	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999975248449121	WITHOUT_CLASSIFICATION	2.47515508790662E-6	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9747887870826755	WITHOUT_CLASSIFICATION	0.025211212917324505	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999124527909	WITHOUT_CLASSIFICATION	8.754720910542502E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999990447567068	WITHOUT_CLASSIFICATION	9.552432932059624E-7	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9798047267868721	WITHOUT_CLASSIFICATION	0.020195273213127772	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9858871017503349	WITHOUT_CLASSIFICATION	0.014112898249665138	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999998514302066	WITHOUT_CLASSIFICATION	1.4856979332764918E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9284805169346917	WITHOUT_CLASSIFICATION	0.0715194830653083	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999627706187567	WITHOUT_CLASSIFICATION	3.722938124337351E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994619338353	WITHOUT_CLASSIFICATION	5.380661647587198E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999994619338353	WITHOUT_CLASSIFICATION	5.380661647587198E-7	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999982461497203	WITHOUT_CLASSIFICATION	1.7538502796355722E-6	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9972979308957578	WITHOUT_CLASSIFICATION	0.0027020691042422464	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999999909132132	WITHOUT_CLASSIFICATION	9.086786803980982E-8	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999999038484771	WITHOUT_CLASSIFICATION	9.615152280187709E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999906237637272	WITHOUT_CLASSIFICATION	9.376236272902439E-6	DESIGN
// todo : what else to do here?	DESIGN	0.9002919787610291	WITHOUT_CLASSIFICATION	0.09970802123897092	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9997609732456262	WITHOUT_CLASSIFICATION	2.390267543737318E-4	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9279018110226271	WITHOUT_CLASSIFICATION	0.07209818897737286	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.999985332687982	DESIGN	1.4667312018102352E-5	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.999985332687982	DESIGN	1.4667312018102352E-5	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9962951633988903	WITHOUT_CLASSIFICATION	0.0037048366011096876	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.997429524416736	WITHOUT_CLASSIFICATION	0.0025704755832639467	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9873663913073016	WITHOUT_CLASSIFICATION	0.012633608692698329	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9997569038087324	DESIGN	2.4309619126755165E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9997569038087324	DESIGN	2.4309619126755165E-4	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999730212055	DESIGN	2.6978794428066973E-8	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999730212055	DESIGN	2.6978794428066973E-8	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999993994544341	DESIGN	6.005455658665618E-7	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9649703384544416	DESIGN	0.035029661545558435	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9649703384544416	DESIGN	0.035029661545558435	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999987979162702	DESIGN	1.2020837297706027E-6	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.997429524416736	WITHOUT_CLASSIFICATION	0.0025704755832639467	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.993415479313259	WITHOUT_CLASSIFICATION	0.006584520686740958	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999874450756192	WITHOUT_CLASSIFICATION	1.255492438082886E-5	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999108330463926	WITHOUT_CLASSIFICATION	8.916695360733948E-5	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.988341369543831	DESIGN	0.011658630456168894	WITHOUT_CLASSIFICATION
//TODO: reenable if we also fix the above todo	DESIGN	0.999444836758149	DESIGN	5.55163241851047E-4	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9810160215506646	DESIGN	0.01898397844933549	WITHOUT_CLASSIFICATION
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999990653280427	WITHOUT_CLASSIFICATION	9.34671957392684E-7	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.997912788203255	WITHOUT_CLASSIFICATION	0.0020872117967449177	DESIGN
// todo : what else to do here?	DESIGN	0.9002919787610291	WITHOUT_CLASSIFICATION	0.09970802123897092	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9999933943706582	WITHOUT_CLASSIFICATION	6.60562934178572E-6	DESIGN
// todo : what else to do here?	DESIGN	0.9002919787610291	WITHOUT_CLASSIFICATION	0.09970802123897092	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.5144046502303863	WITHOUT_CLASSIFICATION	0.48559534976961377	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.6290278675711715	WITHOUT_CLASSIFICATION	0.3709721324288285	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999999887773293	DESIGN	1.1222670663939357E-8	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9997609732456262	WITHOUT_CLASSIFICATION	2.390267543737318E-4	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9999958147955842	DESIGN	4.185204415802596E-6	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.8499733665949457	DESIGN	0.15002663340505432	WITHOUT_CLASSIFICATION
//TODO: reuse the PreLoadEvent	DESIGN	0.9851470080110563	DESIGN	0.01485299198894389	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8839123721689075	DESIGN	0.11608762783109247	WITHOUT_CLASSIFICATION
// todo : what is the implication of this?	DESIGN	0.8837497423291734	DESIGN	0.11625025767082657	WITHOUT_CLASSIFICATION
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9985838808485158	WITHOUT_CLASSIFICATION	0.0014161191514842169	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9999913838831105	DESIGN	8.616116889532977E-6	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9999999063855939	DESIGN	9.36144061291763E-8	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9981557555048332	WITHOUT_CLASSIFICATION	0.0018442444951667638	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9956668105928698	DESIGN	0.0043331894071302595	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9975586450057586	DESIGN	0.0024413549942414	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9999480612668402	DESIGN	5.19387331599205E-5	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9704175250414855	DESIGN	0.029582474958514602	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.993848456850787	DESIGN	0.006151543149213008	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9992272647257181	DESIGN	7.727352742819336E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999988456640868	DESIGN	1.1543359132016068E-6	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7622281942202572	WITHOUT_CLASSIFICATION	0.2377718057797427	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.7622281942202572	WITHOUT_CLASSIFICATION	0.2377718057797427	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9986646212354994	DESIGN	0.0013353787645006047	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9966989185553873	DESIGN	0.0033010814446127416	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9710327124925717	DESIGN	0.028967287507428306	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9710327124925717	DESIGN	0.028967287507428306	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.9710327124925717	DESIGN	0.028967287507428306	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9992272647257181	DESIGN	7.727352742819336E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9979033657547021	WITHOUT_CLASSIFICATION	0.0020966342452979052	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9546430405479612	DESIGN	0.04535695945203884	WITHOUT_CLASSIFICATION
//note that i parameter is now unused (delete it?)	DESIGN	0.8751452046026732	DESIGN	0.12485479539732687	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9928326829130639	WITHOUT_CLASSIFICATION	0.007167317086936013	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.978205018144115	DESIGN	0.02179498185588503	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8976930635919256	WITHOUT_CLASSIFICATION	0.10230693640807442	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.999985332687982	DESIGN	1.4667312018102352E-5	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.999985332687982	DESIGN	1.4667312018102352E-5	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.7410280002510727	WITHOUT_CLASSIFICATION	0.2589719997489273	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.999985332687982	DESIGN	1.4667312018102352E-5	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999972624185728	DESIGN	2.7375814271600294E-6	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9760017746891255	WITHOUT_CLASSIFICATION	0.023998225310874463	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9463849153778899	DESIGN	0.053615084622110086	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.999996832205453	WITHOUT_CLASSIFICATION	3.1677945469940087E-6	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.733516707879531	DESIGN	0.2664832921204689	WITHOUT_CLASSIFICATION
// TBD should this be varbinary($1)? //	DESIGN	0.5312269371294723	DESIGN	0.4687730628705275	WITHOUT_CLASSIFICATION
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9996755713416217	WITHOUT_CLASSIFICATION	3.2442865837831067E-4	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999863474093873	WITHOUT_CLASSIFICATION	1.3652590612816909E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9982983203337719	WITHOUT_CLASSIFICATION	0.0017016796662281482	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9999940058439747	WITHOUT_CLASSIFICATION	5.994156025225422E-6	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9958499015778747	WITHOUT_CLASSIFICATION	0.0041500984221252745	DESIGN
// Does this dialect support check constraints?	DESIGN	0.994180480736947	WITHOUT_CLASSIFICATION	0.005819519263052982	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.8607230221471187	WITHOUT_CLASSIFICATION	0.13927697785288135	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9725166138442717	WITHOUT_CLASSIFICATION	0.027483386155728352	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9770241214379125	WITHOUT_CLASSIFICATION	0.022975878562087486	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.993071476808867	DESIGN	0.0069285231911329756	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.999997684373515	WITHOUT_CLASSIFICATION	2.315626484962987E-6	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9854078616904091	DESIGN	0.014592138309590883	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9534370793247624	DESIGN	0.04656292067523769	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.686733442238653	DESIGN	0.3132665577613471	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9999998090023111	DESIGN	1.9099768884229322E-7	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9991719696214589	WITHOUT_CLASSIFICATION	8.280303785411429E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9986751829717008	WITHOUT_CLASSIFICATION	0.0013248170282992272	DESIGN
//I suppose?	DESIGN	0.983989910264119	WITHOUT_CLASSIFICATION	0.01601008973588104	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9999997758495052	DESIGN	2.2415049474174855E-7	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9734662380317184	DESIGN	0.02653376196828167	WITHOUT_CLASSIFICATION
//TODO:refactor + make this method private	DESIGN	0.9999928531545362	DESIGN	7.146845463713264E-6	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9979237523327739	WITHOUT_CLASSIFICATION	0.00207624766722624	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999049107459568	DESIGN	9.508925404324876E-5	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9999998874173346	DESIGN	1.125826655057568E-7	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9972996744681584	WITHOUT_CLASSIFICATION	0.0027003255318416787	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999980979276568	DESIGN	1.902072343139175E-6	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999980979276568	DESIGN	1.902072343139175E-6	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9992483197145637	DESIGN	7.516802854362541E-4	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.6820202006366998	DESIGN	0.31797979936330034	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.6820202006366998	DESIGN	0.31797979936330034	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9999984692487403	DESIGN	1.5307512597239378E-6	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.973622593003104	WITHOUT_CLASSIFICATION	0.026377406996895843	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9994280087825188	DESIGN	5.719912174812541E-4	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.994821351161795	DESIGN	0.005178648838204941	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9951233856612829	WITHOUT_CLASSIFICATION	0.004876614338717079	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9999937659566942	DESIGN	6.234043305787145E-6	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9902559451113739	DESIGN	0.009744054888626112	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9940384433148961	DESIGN	0.005961556685103901	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9999906931037029	DESIGN	9.30689629701482E-6	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9999586100390059	DESIGN	4.1389960994085225E-5	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.5993212597399916	DESIGN	0.40067874026000827	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.9999997313445299	DESIGN	2.686554701519707E-7	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.8240924112921809	DESIGN	0.17590758870781906	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9922219069749678	DESIGN	0.007778093025032151	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999997045703665	DESIGN	2.954296336205958E-7	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9999992196863211	DESIGN	7.803136788593441E-7	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999947304533692	WITHOUT_CLASSIFICATION	5.2695466308373E-6	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.5690981193051722	WITHOUT_CLASSIFICATION	0.43090188069482777	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9999994718419368	DESIGN	5.281580631006852E-7	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9918896120098494	WITHOUT_CLASSIFICATION	0.008110387990150637	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9999923715001203	DESIGN	7.62849987962527E-6	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9999993550693645	DESIGN	6.449306353947985E-7	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9997528935574883	DESIGN	2.471064425117323E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9999999854427946	DESIGN	1.4557205414850329E-8	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999999419791186	DESIGN	5.802088155102994E-8	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9936204666305164	DESIGN	0.006379533369483656	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.6019423980620381	DESIGN	0.39805760193796197	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.9997294191419551	DESIGN	2.705808580448808E-4	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9999211770467864	DESIGN	7.88229532135576E-5	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999999996149244	DESIGN	3.8507569885447195E-10	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999997918188693	DESIGN	2.0818113062054772E-7	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.6261789520769534	WITHOUT_CLASSIFICATION	0.3738210479230466	DESIGN
// TODO : better way?!?	DESIGN	0.9999999971342616	DESIGN	2.8657383631386332E-9	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999757104685071	WITHOUT_CLASSIFICATION	2.4289531492969563E-5	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9730525658701203	DESIGN	0.026947434129879645	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999997299507	DESIGN	2.7004928533858775E-10	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999846495446182	DESIGN	1.5350455381811633E-5	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9999929367780706	DESIGN	7.063221929424047E-6	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9994182044018727	DESIGN	5.817955981273376E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999991689816004	WITHOUT_CLASSIFICATION	8.31018399656712E-7	DESIGN
//yuck!	DESIGN	0.7410280002510727	WITHOUT_CLASSIFICATION	0.2589719997489273	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9987475620416689	WITHOUT_CLASSIFICATION	0.0012524379583311273	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9551460110155414	DESIGN	0.044853988984458505	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9923458200492666	WITHOUT_CLASSIFICATION	0.007654179950733323	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999993673769754	DESIGN	6.326230245450582E-7	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.99989635163419	DESIGN	1.0364836581001095E-4	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999999999866178	DESIGN	1.338216813026106E-11	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.999985332687982	DESIGN	1.4667312018102352E-5	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9811891218781519	WITHOUT_CLASSIFICATION	0.018810878121848205	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.7637161420502522	WITHOUT_CLASSIFICATION	0.23628385794974788	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999942735434277	DESIGN	5.72645657222534E-6	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9999902773741537	WITHOUT_CLASSIFICATION	9.72262584627409E-6	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5513812224178781	DESIGN	0.4486187775821218	WITHOUT_CLASSIFICATION
//TODO: is this a bit ugly?	DESIGN	0.9999999999468592	DESIGN	5.3140748974887006E-11	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.5161933278939396	WITHOUT_CLASSIFICATION	0.48380667210606054	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9995638821533207	DESIGN	4.3611784667920025E-4	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9991752391723387	DESIGN	8.247608276613597E-4	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999774764605883	DESIGN	2.2523539411656907E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.6009673084959637	WITHOUT_CLASSIFICATION	0.3990326915040362	DESIGN
//The class is now way to complex!	DESIGN	0.996374901223477	WITHOUT_CLASSIFICATION	0.0036250987765228775	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9998244560946473	DESIGN	1.7554390535279136E-4	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.999999998072261	DESIGN	1.9277389254365585E-9	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9754507881198892	WITHOUT_CLASSIFICATION	0.024549211880110826	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.5496182459407852	DESIGN	0.4503817540592149	WITHOUT_CLASSIFICATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9982676020214374	WITHOUT_CLASSIFICATION	0.0017323979785626013	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.818422965507136	WITHOUT_CLASSIFICATION	0.18157703449286408	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9978754802977613	DESIGN	0.002124519702238687	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9999999353499067	DESIGN	6.46500932410186E-8	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999999219435222	DESIGN	7.805647789109795E-8	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9839638485832464	DESIGN	0.01603615141675354	WITHOUT_CLASSIFICATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9999407160856196	DESIGN	5.9283914380362884E-5	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9995066227622786	DESIGN	4.933772377212698E-4	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9999789605344127	DESIGN	2.1039465587223848E-5	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9405880470190495	WITHOUT_CLASSIFICATION	0.059411952980950436	DESIGN
// short-circuit for performance...	DESIGN	0.9999973782367789	WITHOUT_CLASSIFICATION	2.6217632210164044E-6	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9996354805808677	WITHOUT_CLASSIFICATION	3.6451941913231983E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9761561763941068	DESIGN	0.02384382360589328	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.8973748026040845	DESIGN	0.1026251973959155	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999904198894	DESIGN	9.580110640712967E-9	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9999997913685995	DESIGN	2.0863140047485118E-7	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9996838456228705	DESIGN	3.161543771295208E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8924391459571072	DESIGN	0.10756085404289291	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9999965810103243	DESIGN	3.4189896757236166E-6	WITHOUT_CLASSIFICATION
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9999945360986702	DESIGN	5.463901329825583E-6	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.5766118336454034	DESIGN	0.42338816635459675	WITHOUT_CLASSIFICATION
//use of trim() here is ugly?	DESIGN	0.6037254051481158	WITHOUT_CLASSIFICATION	0.3962745948518843	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.999999717963451	DESIGN	2.820365490164089E-7	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9941503242952879	DESIGN	0.005849675704712101	WITHOUT_CLASSIFICATION
//TODO: inefficient	DESIGN	0.9999696320436741	DESIGN	3.0367956326016067E-5	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.8875813275976566	DESIGN	0.11241867240234328	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999979751114264	DESIGN	2.0248885736204925E-6	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999994629982739	DESIGN	5.370017261622635E-7	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999990458131044	DESIGN	9.541868955656688E-7	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9995995090748281	DESIGN	4.0049092517195254E-4	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999979764173577	WITHOUT_CLASSIFICATION	2.023582642380202E-6	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9833826109895331	DESIGN	0.016617389010466974	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.8581861466771951	DESIGN	0.1418138533228049	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.7995537939737973	DESIGN	0.2004462060262026	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.99999943830925	DESIGN	5.616907499740906E-7	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999923506309	DESIGN	7.649369168293781E-9	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.7855706170531418	WITHOUT_CLASSIFICATION	0.2144293829468583	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9999993842889714	DESIGN	6.15711028544439E-7	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8950463049526093	WITHOUT_CLASSIFICATION	0.1049536950473907	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.8038451721256286	DESIGN	0.1961548278743714	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999992648033733	WITHOUT_CLASSIFICATION	7.351966267813962E-7	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9965709540814618	DESIGN	0.003429045918538178	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999992648033733	WITHOUT_CLASSIFICATION	7.351966267813962E-7	DESIGN
//TODO: improve this hack!	DESIGN	0.9999999999582811	DESIGN	4.171895603995967E-11	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999989771291191	WITHOUT_CLASSIFICATION	1.022870880825964E-6	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9999570928244171	DESIGN	4.290717558278584E-5	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9996325732660334	WITHOUT_CLASSIFICATION	3.674267339665973E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9169561434612643	DESIGN	0.08304385653873565	WITHOUT_CLASSIFICATION
// create an index on the key columns??	DESIGN	0.999999910264973	WITHOUT_CLASSIFICATION	8.973502701525129E-8	DESIGN
// todo : remove	DESIGN	0.9873149333079584	WITHOUT_CLASSIFICATION	0.012685066692041568	DESIGN
// todo : remove	DESIGN	0.9873149333079584	WITHOUT_CLASSIFICATION	0.012685066692041568	DESIGN
// todo : remove	DESIGN	0.9873149333079584	WITHOUT_CLASSIFICATION	0.012685066692041568	DESIGN
// todo : throw exception?	DESIGN	0.9367406855179448	WITHOUT_CLASSIFICATION	0.06325931448205534	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.7523673383522492	WITHOUT_CLASSIFICATION	0.24763266164775086	DESIGN
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9995950740113478	DESIGN	4.049259886522137E-4	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999999671062729	DESIGN	3.289372706723435E-8	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.9931886908697896	DESIGN	0.006811309130210392	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999998892890105	DESIGN	1.1071098939871121E-7	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9819299878265447	DESIGN	0.0180700121734552	WITHOUT_CLASSIFICATION
//TODO: copy/paste from recreate()	DESIGN	0.9764272195254068	DESIGN	0.02357278047459322	WITHOUT_CLASSIFICATION
//should this interface extend PropertyMapping?	DESIGN	0.7996151004873849	DESIGN	0.20038489951261498	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9693883806373668	WITHOUT_CLASSIFICATION	0.03061161936263328	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9999829837971229	DESIGN	1.7016202877005435E-5	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9979483991038154	DESIGN	0.0020516008961845435	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999998072892	DESIGN	1.9271076452002276E-10	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.9766444883587563	DESIGN	0.023355511641243724	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.962452339497639	DESIGN	0.03754766050236112	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.947604386929863	WITHOUT_CLASSIFICATION	0.052395613070137	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.5935180693412859	DESIGN	0.40648193065871396	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.7315657047760413	DESIGN	0.2684342952239587	WITHOUT_CLASSIFICATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999999549704163	DESIGN	4.502958360459092E-8	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9999919356912206	DESIGN	8.064308779341078E-6	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9999999403556296	DESIGN	5.964437039562666E-8	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.8570496931595284	DESIGN	0.14295030684047164	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.999998139602426	DESIGN	1.8603975739528106E-6	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.8621084583593686	DESIGN	0.13789154164063133	WITHOUT_CLASSIFICATION
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9900252929473253	DESIGN	0.009974707052674751	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9999655917715529	DESIGN	3.440822844714082E-5	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999985709195071	DESIGN	1.429080492939679E-6	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9999998272871791	DESIGN	1.7271282093075895E-7	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.988431963513533	DESIGN	0.011568036486467058	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8930636836419119	WITHOUT_CLASSIFICATION	0.10693631635808813	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999970920153373	WITHOUT_CLASSIFICATION	2.9079846627802707E-6	DESIGN
//is this ok?	DESIGN	0.8705036681318704	WITHOUT_CLASSIFICATION	0.1294963318681296	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999999082391	DESIGN	9.176099903403095E-11	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9999999120928283	DESIGN	8.790717169389805E-8	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9264009334654828	WITHOUT_CLASSIFICATION	0.07359906653451719	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.999999999749055	DESIGN	2.50945120670766E-10	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8924391459571072	DESIGN	0.10756085404289291	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9976227053211589	DESIGN	0.002377294678841085	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999999496104096	DESIGN	5.038959045605591E-8	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9995793060057935	DESIGN	4.206939942066311E-4	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.8962244096188197	WITHOUT_CLASSIFICATION	0.10377559038118042	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9996776811066463	DESIGN	3.223188933536823E-4	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999973050030888	DESIGN	2.6949969110681454E-6	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9432502797737798	DESIGN	0.05674972022622005	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9999998723411809	DESIGN	1.276588190917672E-7	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.9766125382258898	DESIGN	0.023387461774110226	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9999766241873953	DESIGN	2.3375812604786E-5	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9998906292552715	DESIGN	1.093707447283777E-4	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.999987312364888	DESIGN	1.2687635111945749E-5	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999999849794964	DESIGN	1.5020503622075492E-8	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.8071112092452498	WITHOUT_CLASSIFICATION	0.19288879075475018	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9664178734414844	DESIGN	0.03358212655851558	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9776286077028454	DESIGN	0.02237139229715462	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.958125254862382	DESIGN	0.04187474513761793	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999999478	DESIGN	5.225017650738116E-14	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999853071965	DESIGN	1.4692803423400986E-8	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9999734058412882	WITHOUT_CLASSIFICATION	2.659415871177642E-5	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999999915520694	DESIGN	8.447930487557347E-9	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.998117688208939	DESIGN	0.0018823117910609748	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999961461278539	DESIGN	3.853872146020013E-6	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9931116219532096	WITHOUT_CLASSIFICATION	0.0068883780467904766	DESIGN
// short cut check...	DESIGN	0.9993183380486298	WITHOUT_CLASSIFICATION	6.816619513701795E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9081918815608324	WITHOUT_CLASSIFICATION	0.09180811843916759	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9998225989372863	DESIGN	1.7740106271374757E-4	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9999999876751002	DESIGN	1.2324899723842825E-8	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999999910691	DESIGN	8.930927789178483E-12	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9999998074200601	DESIGN	1.925799399823775E-7	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9999978671782997	WITHOUT_CLASSIFICATION	2.1328217002031105E-6	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9993413720478029	DESIGN	6.586279521970951E-4	WITHOUT_CLASSIFICATION
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9622603026058899	WITHOUT_CLASSIFICATION	0.03773969739411004	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999998806085	DESIGN	1.1939141713556609E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9947954793994501	WITHOUT_CLASSIFICATION	0.005204520600549861	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9972938447411107	DESIGN	0.00270615525888928	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9880373630635783	WITHOUT_CLASSIFICATION	0.011962636936421689	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9440747932828393	WITHOUT_CLASSIFICATION	0.05592520671716078	DESIGN
// merges don't cascade to uninitialized collections //	DESIGN	0.9999886057010745	WITHOUT_CLASSIFICATION	1.1394298925467803E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9913602397583922	DESIGN	0.00863976024160774	WITHOUT_CLASSIFICATION
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999978462450343	DESIGN	2.153754965789306E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9997384840356268	DESIGN	2.6151596437314555E-4	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.8769879380581364	DESIGN	0.12301206194186365	WITHOUT_CLASSIFICATION
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.6380805001857204	WITHOUT_CLASSIFICATION	0.3619194998142797	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.999825664042036	DESIGN	1.743359579640877E-4	WITHOUT_CLASSIFICATION
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.999913356518849	DESIGN	8.664348115091829E-5	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999998224497653	DESIGN	1.7755023477848366E-7	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.7684514148499245	WITHOUT_CLASSIFICATION	0.23154858515007548	DESIGN
// todo : remove	DESIGN	0.9873149333079584	WITHOUT_CLASSIFICATION	0.012685066692041568	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9999984936144681	DESIGN	1.5063855317763906E-6	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9999840199534278	DESIGN	1.5980046572208393E-5	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.999934296936184	DESIGN	6.570306381603551E-5	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.5214308162784519	DESIGN	0.47856918372154805	WITHOUT_CLASSIFICATION
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999995576315293	DESIGN	4.4236847077123363E-7	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9999997887521102	DESIGN	2.1124788971816134E-7	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.8320594795445585	WITHOUT_CLASSIFICATION	0.16794052045544144	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.99990289062895	DESIGN	9.710937104995233E-5	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9992998044110489	DESIGN	7.00195588950986E-4	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9999991493099274	DESIGN	8.506900726278612E-7	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9999749352322435	DESIGN	2.5064767756665168E-5	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.6798156020195449	DESIGN	0.32018439798045506	WITHOUT_CLASSIFICATION
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9999905972615201	DESIGN	9.402738479924795E-6	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999998485658677	WITHOUT_CLASSIFICATION	1.514341323750195E-7	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999964341233402	DESIGN	3.5658766597909036E-6	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9963756463734242	DESIGN	0.0036243536265758666	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999999959589624	DESIGN	4.041037627817105E-9	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.8803702707479765	WITHOUT_CLASSIFICATION	0.11962972925202342	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.8882269736794193	DESIGN	0.11177302632058077	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9998275397644384	DESIGN	1.724602355616585E-4	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9996004430535699	DESIGN	3.9955694643001684E-4	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999993888736	DESIGN	6.111264115359052E-10	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.999999999945591	DESIGN	5.440907516975427E-11	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9791487417698964	DESIGN	0.02085125823010361	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.8111081803912036	DESIGN	0.18889181960879642	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9935539121951216	DESIGN	0.00644608780487838	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9997210230850069	WITHOUT_CLASSIFICATION	2.789769149932141E-4	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999978231008808	WITHOUT_CLASSIFICATION	2.1768991191920445E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999998858	DESIGN	1.1416899061427286E-13	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.5665426277470195	DESIGN	0.4334573722529806	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9998898614028082	DESIGN	1.1013859719169052E-4	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.998466210765276	DESIGN	0.0015337892347240547	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9999957364067582	DESIGN	4.2635932418192194E-6	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.5715248164642798	DESIGN	0.4284751835357203	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9999985709195071	DESIGN	1.429080492939679E-6	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9237563371074433	DESIGN	0.07624366289255663	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999999477522419	DESIGN	5.2247758162612996E-8	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.8930636836419119	WITHOUT_CLASSIFICATION	0.10693631635808813	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9999999120928283	DESIGN	8.790717169389805E-8	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9838174995978279	DESIGN	0.016182500402172097	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9997569038087324	DESIGN	2.4309619126755165E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9997569038087324	DESIGN	2.4309619126755165E-4	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9997569038087324	DESIGN	2.4309619126755165E-4	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999997278756325	DESIGN	2.7212436749702876E-7	WITHOUT_CLASSIFICATION
