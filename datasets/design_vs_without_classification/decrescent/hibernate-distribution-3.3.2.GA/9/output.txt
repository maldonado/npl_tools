//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999926150739681	WITHOUT_CLASSIFICATION	7.384926031995645E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999969860285839	WITHOUT_CLASSIFICATION	3.0139714161088696E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999969860285839	WITHOUT_CLASSIFICATION	3.0139714161088696E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9995021839102047	WITHOUT_CLASSIFICATION	4.978160897952792E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967903143829	WITHOUT_CLASSIFICATION	3.2096856169643177E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.99999952354797	WITHOUT_CLASSIFICATION	4.764520300745249E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998267097191	WITHOUT_CLASSIFICATION	1.7329028097372768E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998267097191	WITHOUT_CLASSIFICATION	1.7329028097372768E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999100765181	WITHOUT_CLASSIFICATION	8.99234819618061E-8	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999849454998	WITHOUT_CLASSIFICATION	1.505450018272189E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.999988341101367	WITHOUT_CLASSIFICATION	1.1658898632916095E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764294371236	WITHOUT_CLASSIFICATION	2.357056287643298E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981171683223	WITHOUT_CLASSIFICATION	1.8828316776482998E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981171683223	WITHOUT_CLASSIFICATION	1.8828316776482998E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959889263063	WITHOUT_CLASSIFICATION	4.011073693814119E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.999411642733928	WITHOUT_CLASSIFICATION	5.883572660720553E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.999413697997258	WITHOUT_CLASSIFICATION	5.86302002742035E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999917514703176	WITHOUT_CLASSIFICATION	8.248529682397588E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999602971091	WITHOUT_CLASSIFICATION	3.970289087083624E-8	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999842225565916	WITHOUT_CLASSIFICATION	1.577744340841325E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999875903192832	WITHOUT_CLASSIFICATION	1.2409680716840932E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999996776104614	WITHOUT_CLASSIFICATION	3.2238953858429564E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950935581806	WITHOUT_CLASSIFICATION	4.906441819360445E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9420875138101353	WITHOUT_CLASSIFICATION	0.057912486189864616	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999990940839829	WITHOUT_CLASSIFICATION	9.059160170973919E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957526046336	WITHOUT_CLASSIFICATION	4.247395366361201E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999944467450802	WITHOUT_CLASSIFICATION	5.553254919862852E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892334410672	WITHOUT_CLASSIFICATION	1.0766558932766417E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892334410672	WITHOUT_CLASSIFICATION	1.0766558932766417E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999724772797364	WITHOUT_CLASSIFICATION	2.752272026361523E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999982673866257	WITHOUT_CLASSIFICATION	1.7326133743340725E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999921064425297	WITHOUT_CLASSIFICATION	7.893557470288573E-6	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999958417024821	WITHOUT_CLASSIFICATION	4.158297517914554E-6	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9087794029038777	DESIGN	0.09122059709612224	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.9098491049459183	DESIGN	0.09015089505408172	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9098491049459183	DESIGN	0.09015089505408172	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999999617932	WITHOUT_CLASSIFICATION	3.8206868698012694E-11	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999902851881398	WITHOUT_CLASSIFICATION	9.714811860121848E-6	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999493570404	WITHOUT_CLASSIFICATION	5.064295955561583E-8	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9987282983380235	WITHOUT_CLASSIFICATION	0.0012717016619765613	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999947817605128	WITHOUT_CLASSIFICATION	5.218239487210305E-6	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989693884089	WITHOUT_CLASSIFICATION	1.0306115911159401E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951683090579	WITHOUT_CLASSIFICATION	4.831690942107751E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999927298469265	WITHOUT_CLASSIFICATION	7.270153073497533E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999960162640579	WITHOUT_CLASSIFICATION	3.983735942179088E-6	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999926468800502	WITHOUT_CLASSIFICATION	7.35311994976373E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999887382660386	WITHOUT_CLASSIFICATION	1.1261733961479866E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999960162640579	WITHOUT_CLASSIFICATION	3.983735942179088E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999887382660386	WITHOUT_CLASSIFICATION	1.1261733961479866E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999995673719578	WITHOUT_CLASSIFICATION	4.326280421688851E-7	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9598896273672629	DESIGN	0.0401103726327371	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999998121135419	WITHOUT_CLASSIFICATION	1.878864581173669E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999867900700903	WITHOUT_CLASSIFICATION	1.320992990971648E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999311268523805	WITHOUT_CLASSIFICATION	6.887314761949419E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999569089622005	WITHOUT_CLASSIFICATION	4.309103779953444E-5	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.994179751354306	WITHOUT_CLASSIFICATION	0.005820248645693956	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9691216639022634	WITHOUT_CLASSIFICATION	0.030878336097736672	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999956953417	WITHOUT_CLASSIFICATION	4.304658218242421E-9	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999559504185043	WITHOUT_CLASSIFICATION	4.404958149581944E-5	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999113870269845	WITHOUT_CLASSIFICATION	8.861297301562693E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999990488262125	WITHOUT_CLASSIFICATION	9.511737873858706E-7	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999657912046	WITHOUT_CLASSIFICATION	3.420879547253422E-8	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9998210890863692	WITHOUT_CLASSIFICATION	1.7891091363077586E-4	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9877197861726623	WITHOUT_CLASSIFICATION	0.012280213827337646	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999634330713993	WITHOUT_CLASSIFICATION	3.656692860061178E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999412880783083	WITHOUT_CLASSIFICATION	5.871192169172314E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999643136352016	WITHOUT_CLASSIFICATION	3.56863647984437E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999993656230476	WITHOUT_CLASSIFICATION	6.343769524577399E-7	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999999182755168	WITHOUT_CLASSIFICATION	8.172448317093036E-8	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999749408815881	WITHOUT_CLASSIFICATION	2.5059118411959425E-5	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999996279025541	WITHOUT_CLASSIFICATION	3.720974457768204E-7	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.99990440600826	WITHOUT_CLASSIFICATION	9.559399173996706E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999993060577378	WITHOUT_CLASSIFICATION	6.939422622571143E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7462692562673936	DESIGN	0.25373074373260635	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999996169141059	WITHOUT_CLASSIFICATION	3.830858940298279E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999613161562	WITHOUT_CLASSIFICATION	3.8683843766954416E-8	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9054779466098302	DESIGN	0.09452205339016978	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999605688971	WITHOUT_CLASSIFICATION	3.943110296162679E-8	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999975235260158	WITHOUT_CLASSIFICATION	2.4764739842469927E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999999583244	WITHOUT_CLASSIFICATION	4.167554256994979E-11	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999748509817	WITHOUT_CLASSIFICATION	2.514901831611366E-8	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999572457863456	WITHOUT_CLASSIFICATION	4.275421365448204E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999763115991385	WITHOUT_CLASSIFICATION	2.3688400861505632E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.999999993369379	WITHOUT_CLASSIFICATION	6.630621054691509E-9	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999616586	WITHOUT_CLASSIFICATION	3.834153218747218E-11	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999763115991385	WITHOUT_CLASSIFICATION	2.3688400861505632E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999993083947	WITHOUT_CLASSIFICATION	6.916053748416473E-10	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999097007329	WITHOUT_CLASSIFICATION	9.02992670556341E-8	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999998534055364	WITHOUT_CLASSIFICATION	1.4659446359764012E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998907646709	WITHOUT_CLASSIFICATION	1.0923532918035525E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999835745753753	WITHOUT_CLASSIFICATION	1.642542462466237E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999975011505945	WITHOUT_CLASSIFICATION	2.4988494054056776E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999975011505945	WITHOUT_CLASSIFICATION	2.4988494054056776E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999938541547679	WITHOUT_CLASSIFICATION	6.1458452320227855E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999509409601044	WITHOUT_CLASSIFICATION	4.905903989570444E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999768571130179	WITHOUT_CLASSIFICATION	2.3142886982183075E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999959551626055	WITHOUT_CLASSIFICATION	4.044837394499345E-6	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999996620408409	WITHOUT_CLASSIFICATION	3.3795915901658746E-7	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999935635329626	WITHOUT_CLASSIFICATION	6.4364670373674606E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999699471154	WITHOUT_CLASSIFICATION	3.005288470423101E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999270007703317	WITHOUT_CLASSIFICATION	7.299922966826903E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.999968620515392	WITHOUT_CLASSIFICATION	3.137948460791028E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999992459823	WITHOUT_CLASSIFICATION	7.540176385041547E-10	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995931699974	WITHOUT_CLASSIFICATION	4.068300024893773E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995931699974	WITHOUT_CLASSIFICATION	4.068300024893773E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999907171198	WITHOUT_CLASSIFICATION	9.282880186952355E-9	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999999978833586	WITHOUT_CLASSIFICATION	2.1166414011643982E-8	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9995121731773596	WITHOUT_CLASSIFICATION	4.8782682264035906E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999995931699974	WITHOUT_CLASSIFICATION	4.068300024893773E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999907171198	WITHOUT_CLASSIFICATION	9.282880186952355E-9	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999907171198	WITHOUT_CLASSIFICATION	9.282880186952355E-9	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.99986912618551	WITHOUT_CLASSIFICATION	1.308738144898845E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999590207122769	WITHOUT_CLASSIFICATION	4.097928772304413E-5	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999438648	WITHOUT_CLASSIFICATION	5.613520494334875E-11	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999905926971501	WITHOUT_CLASSIFICATION	9.407302849934902E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993082264607313	WITHOUT_CLASSIFICATION	6.917735392686841E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993082264607313	WITHOUT_CLASSIFICATION	6.917735392686841E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999998735673803	WITHOUT_CLASSIFICATION	1.264326196656367E-7	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9972741799217855	WITHOUT_CLASSIFICATION	0.0027258200782144908	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999988209613111	WITHOUT_CLASSIFICATION	1.1790386889139426E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999910679947034	WITHOUT_CLASSIFICATION	8.932005296674532E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999910679947034	WITHOUT_CLASSIFICATION	8.932005296674532E-6	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999797131358306	WITHOUT_CLASSIFICATION	2.0286864169434798E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992885382914334	WITHOUT_CLASSIFICATION	7.114617085665774E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9695272119335024	WITHOUT_CLASSIFICATION	0.03047278806649761	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999918755956	WITHOUT_CLASSIFICATION	8.124404321186897E-9	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999758483514333	WITHOUT_CLASSIFICATION	2.4151648566715158E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999616739833	WITHOUT_CLASSIFICATION	3.8326016714962E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999977804539674	WITHOUT_CLASSIFICATION	2.21954603255227E-6	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9994087086233794	WITHOUT_CLASSIFICATION	5.912913766205024E-4	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999400693332083	WITHOUT_CLASSIFICATION	5.993066679161299E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9695272119335024	WITHOUT_CLASSIFICATION	0.03047278806649761	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9995861065102056	WITHOUT_CLASSIFICATION	4.138934897944153E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999703222042079	WITHOUT_CLASSIFICATION	2.967779579217015E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999703222042079	WITHOUT_CLASSIFICATION	2.967779579217015E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9990254089585918	WITHOUT_CLASSIFICATION	9.745910414083016E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999653449555177	WITHOUT_CLASSIFICATION	3.4655044482197696E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9491738117408934	WITHOUT_CLASSIFICATION	0.05082618825910657	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999693691995187	WITHOUT_CLASSIFICATION	3.063080048133353E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998290120609985	WITHOUT_CLASSIFICATION	1.7098793900150738E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9960112268362411	WITHOUT_CLASSIFICATION	0.003988773163758851	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998125343747659	WITHOUT_CLASSIFICATION	1.8746562523414063E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.999997756911221	WITHOUT_CLASSIFICATION	2.2430887790117414E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999990113026	WITHOUT_CLASSIFICATION	9.886973950478822E-9	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999990113026	WITHOUT_CLASSIFICATION	9.886973950478822E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999977888567408	WITHOUT_CLASSIFICATION	2.211143259198142E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999926150739681	WITHOUT_CLASSIFICATION	7.384926031995645E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999991135619628	WITHOUT_CLASSIFICATION	8.864380373203412E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997695196596	WITHOUT_CLASSIFICATION	2.3048034035324982E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999969860285839	WITHOUT_CLASSIFICATION	3.0139714161088696E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999988945975111	WITHOUT_CLASSIFICATION	1.1054024889454276E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999990667179184	WITHOUT_CLASSIFICATION	9.332820816044538E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999997965211094	WITHOUT_CLASSIFICATION	2.0347889060263353E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999996947848993	WITHOUT_CLASSIFICATION	3.052151006931635E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999995578581886	WITHOUT_CLASSIFICATION	4.421418113641409E-7	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998983748843865	WITHOUT_CLASSIFICATION	1.0162511561342483E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999781489696746	WITHOUT_CLASSIFICATION	2.185103032535056E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.999998782758503	WITHOUT_CLASSIFICATION	1.2172414970744756E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967903143829	WITHOUT_CLASSIFICATION	3.2096856169643177E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997798853123	WITHOUT_CLASSIFICATION	2.2011468766058756E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997798853123	WITHOUT_CLASSIFICATION	2.2011468766058756E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999996005479285	WITHOUT_CLASSIFICATION	3.994520715485837E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9976357720177984	WITHOUT_CLASSIFICATION	0.0023642279822014777	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999947048157216	WITHOUT_CLASSIFICATION	5.295184278321896E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999989530366754	WITHOUT_CLASSIFICATION	1.046963324673012E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999979290311143	WITHOUT_CLASSIFICATION	2.0709688856509514E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999137943804102	WITHOUT_CLASSIFICATION	8.620561958980135E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999998267097191	WITHOUT_CLASSIFICATION	1.7329028097372768E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9986501925807195	WITHOUT_CLASSIFICATION	0.0013498074192804298	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999985188404531	WITHOUT_CLASSIFICATION	1.4811595467955328E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999971106346891	WITHOUT_CLASSIFICATION	2.889365310894341E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998899039154	WITHOUT_CLASSIFICATION	1.1009608457820249E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999826609314529	WITHOUT_CLASSIFICATION	1.733906854699434E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999954433056366	WITHOUT_CLASSIFICATION	4.556694363342835E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979410813769	WITHOUT_CLASSIFICATION	2.0589186231928226E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999922541397	WITHOUT_CLASSIFICATION	7.74586019633538E-9	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999993975070902	WITHOUT_CLASSIFICATION	6.024929097581034E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999999707612219	WITHOUT_CLASSIFICATION	2.923877809634636E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9785348946353762	WITHOUT_CLASSIFICATION	0.02146510536462373	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999766442674033	WITHOUT_CLASSIFICATION	2.33557325966891E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999994244655928	WITHOUT_CLASSIFICATION	5.755344072029651E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999969860285839	WITHOUT_CLASSIFICATION	3.0139714161088696E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999969860285839	WITHOUT_CLASSIFICATION	3.0139714161088696E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999781489696746	WITHOUT_CLASSIFICATION	2.185103032535056E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997798853123	WITHOUT_CLASSIFICATION	2.2011468766058756E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979410813769	WITHOUT_CLASSIFICATION	2.0589186231928226E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999999100765181	WITHOUT_CLASSIFICATION	8.99234819618061E-8	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999967073947271	WITHOUT_CLASSIFICATION	3.2926052728956087E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999307234680636	WITHOUT_CLASSIFICATION	6.927653193640426E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.999980855765323	WITHOUT_CLASSIFICATION	1.9144234676960277E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999997540083156	WITHOUT_CLASSIFICATION	2.459916843513616E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999659430848	WITHOUT_CLASSIFICATION	3.405691516820846E-8	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999989581165509	WITHOUT_CLASSIFICATION	1.0418834490067487E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999984048043498	WITHOUT_CLASSIFICATION	1.5951956502564734E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999980656531924	WITHOUT_CLASSIFICATION	1.934346807586998E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999825161016958	WITHOUT_CLASSIFICATION	1.7483898304301606E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999869202260318	WITHOUT_CLASSIFICATION	1.3079773968240026E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999869202260318	WITHOUT_CLASSIFICATION	1.3079773968240026E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999996735002521	WITHOUT_CLASSIFICATION	3.2649974790274183E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999994062114973	WITHOUT_CLASSIFICATION	5.937885028022992E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9993723888089172	WITHOUT_CLASSIFICATION	6.276111910827739E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999958488362829	WITHOUT_CLASSIFICATION	4.151163717095092E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999997963772194	WITHOUT_CLASSIFICATION	2.0362278070649744E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999994386222805	WITHOUT_CLASSIFICATION	5.613777194631091E-7	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999842879368144	WITHOUT_CLASSIFICATION	1.5712063185566935E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999849454998	WITHOUT_CLASSIFICATION	1.505450018272189E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.999998496365598	WITHOUT_CLASSIFICATION	1.5036344019773293E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995630167474	WITHOUT_CLASSIFICATION	4.3698325248575913E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999995630167474	WITHOUT_CLASSIFICATION	4.3698325248575913E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999673602806	WITHOUT_CLASSIFICATION	3.26397193377853E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999627435112389	WITHOUT_CLASSIFICATION	3.7256488761104164E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999577455785	WITHOUT_CLASSIFICATION	4.225442156338369E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999998241614373	WITHOUT_CLASSIFICATION	1.758385626679651E-7	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999847108634291	WITHOUT_CLASSIFICATION	1.5289136570863365E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999969860285839	WITHOUT_CLASSIFICATION	3.0139714161088696E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999781489696746	WITHOUT_CLASSIFICATION	2.185103032535056E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999967903143829	WITHOUT_CLASSIFICATION	3.2096856169643177E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979410813769	WITHOUT_CLASSIFICATION	2.0589186231928226E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999979410813769	WITHOUT_CLASSIFICATION	2.0589186231928226E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999985053395	WITHOUT_CLASSIFICATION	1.494660495824187E-8	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999985053395	WITHOUT_CLASSIFICATION	1.494660495824187E-8	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.999997289369716	WITHOUT_CLASSIFICATION	2.710630284028457E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999993655777583	WITHOUT_CLASSIFICATION	6.34422241809374E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999993655777583	WITHOUT_CLASSIFICATION	6.34422241809374E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.999987759728801	WITHOUT_CLASSIFICATION	1.2240271198986235E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999696643709605	WITHOUT_CLASSIFICATION	3.0335629039480596E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.999999110189361	WITHOUT_CLASSIFICATION	8.898106390592209E-7	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999997421533507	WITHOUT_CLASSIFICATION	2.5784664930192428E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999995090397417	WITHOUT_CLASSIFICATION	4.909602582607957E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764294371236	WITHOUT_CLASSIFICATION	2.357056287643298E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764294371236	WITHOUT_CLASSIFICATION	2.357056287643298E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9998965433123452	WITHOUT_CLASSIFICATION	1.0345668765471038E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999978820684192	WITHOUT_CLASSIFICATION	2.1179315808902074E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999996280888204	WITHOUT_CLASSIFICATION	3.7191117961713506E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999865660570436	WITHOUT_CLASSIFICATION	1.3433942956404535E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.999999905580326	WITHOUT_CLASSIFICATION	9.44196739445345E-8	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999334611373508	WITHOUT_CLASSIFICATION	6.653886264918005E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981171683223	WITHOUT_CLASSIFICATION	1.8828316776482998E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987377436613	WITHOUT_CLASSIFICATION	1.2622563387105859E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987377436613	WITHOUT_CLASSIFICATION	1.2622563387105859E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959889263063	WITHOUT_CLASSIFICATION	4.011073693814119E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959889263063	WITHOUT_CLASSIFICATION	4.011073693814119E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999994573461664	WITHOUT_CLASSIFICATION	5.426538335940174E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999994573461664	WITHOUT_CLASSIFICATION	5.426538335940174E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999948326661	WITHOUT_CLASSIFICATION	5.167333933552531E-9	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999948326661	WITHOUT_CLASSIFICATION	5.167333933552531E-9	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999764294371236	WITHOUT_CLASSIFICATION	2.357056287643298E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999981171683223	WITHOUT_CLASSIFICATION	1.8828316776482998E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987377436613	WITHOUT_CLASSIFICATION	1.2622563387105859E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999987377436613	WITHOUT_CLASSIFICATION	1.2622563387105859E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999959889263063	WITHOUT_CLASSIFICATION	4.011073693814119E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999994573461664	WITHOUT_CLASSIFICATION	5.426538335940174E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999994573461664	WITHOUT_CLASSIFICATION	5.426538335940174E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999948326661	WITHOUT_CLASSIFICATION	5.167333933552531E-9	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999479470745681	WITHOUT_CLASSIFICATION	5.2052925431939965E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999424083410292	WITHOUT_CLASSIFICATION	5.7591658970735805E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998644002921369	WITHOUT_CLASSIFICATION	1.3559970786314042E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999996128739294	WITHOUT_CLASSIFICATION	3.8712607069175263E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.99970800857059	WITHOUT_CLASSIFICATION	2.9199142941007734E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.999985754755461	WITHOUT_CLASSIFICATION	1.4245244538972567E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9934506184950802	WITHOUT_CLASSIFICATION	0.006549381504919736	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.6414743918585838	DESIGN	0.35852560814141615	WITHOUT_CLASSIFICATION
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.99983154219717	WITHOUT_CLASSIFICATION	1.6845780283011841E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999331762	WITHOUT_CLASSIFICATION	6.682381853640926E-11	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999890742568	WITHOUT_CLASSIFICATION	1.092574333978476E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999998541683002	WITHOUT_CLASSIFICATION	1.4583169975097494E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999938541547679	WITHOUT_CLASSIFICATION	6.1458452320227855E-6	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.999985754755461	WITHOUT_CLASSIFICATION	1.4245244538972567E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.99996662494852	WITHOUT_CLASSIFICATION	3.337505148001675E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.99996662494852	WITHOUT_CLASSIFICATION	3.337505148001675E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999918474110273	WITHOUT_CLASSIFICATION	8.152588972749363E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999132045148104	WITHOUT_CLASSIFICATION	8.679548518970983E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999132045148104	WITHOUT_CLASSIFICATION	8.679548518970983E-5	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999988471232363	WITHOUT_CLASSIFICATION	1.1528767636648301E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.999842530604332	WITHOUT_CLASSIFICATION	1.574693956679002E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999878262559	WITHOUT_CLASSIFICATION	1.2173744099243355E-8	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999168145806798	WITHOUT_CLASSIFICATION	8.318541932014676E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999168145806798	WITHOUT_CLASSIFICATION	8.318541932014676E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999602971091	WITHOUT_CLASSIFICATION	3.970289087083624E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999990033060342	WITHOUT_CLASSIFICATION	9.966939657426E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999990033060342	WITHOUT_CLASSIFICATION	9.966939657426E-7	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999941392663567	WITHOUT_CLASSIFICATION	5.860733643289342E-6	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999996539648963	WITHOUT_CLASSIFICATION	3.460351037059974E-7	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999982697044064	WITHOUT_CLASSIFICATION	1.7302955936948544E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999980357129882	WITHOUT_CLASSIFICATION	1.9642870118192054E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999962692509311	WITHOUT_CLASSIFICATION	3.7307490689123496E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999920960514566	WITHOUT_CLASSIFICATION	7.903948543422583E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999842225565916	WITHOUT_CLASSIFICATION	1.577744340841325E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999948351664231	WITHOUT_CLASSIFICATION	5.1648335769117335E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9933256255937317	WITHOUT_CLASSIFICATION	0.006674374406268288	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999971297250316	WITHOUT_CLASSIFICATION	2.870274968393022E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999997660164801	WITHOUT_CLASSIFICATION	2.3398351984885459E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950935581806	WITHOUT_CLASSIFICATION	4.906441819360445E-6	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997517029167	WITHOUT_CLASSIFICATION	2.482970834015347E-7	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998758305885	WITHOUT_CLASSIFICATION	1.2416941156234926E-7	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999959571252	WITHOUT_CLASSIFICATION	4.042874790019353E-9	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950935581806	WITHOUT_CLASSIFICATION	4.906441819360445E-6	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999954636162031	WITHOUT_CLASSIFICATION	4.536383796879419E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997434204374	WITHOUT_CLASSIFICATION	2.5657956268474475E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999960142265552	WITHOUT_CLASSIFICATION	3.985773444802141E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999960700377348	WITHOUT_CLASSIFICATION	3.929962265141074E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.99998868611269	WITHOUT_CLASSIFICATION	1.1313887310069502E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999983231995175	WITHOUT_CLASSIFICATION	1.6768004824624745E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999995300860297	WITHOUT_CLASSIFICATION	4.699139703599332E-7	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999957526046336	WITHOUT_CLASSIFICATION	4.247395366361201E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999786084289963	WITHOUT_CLASSIFICATION	2.139157100361391E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999944467450802	WITHOUT_CLASSIFICATION	5.553254919862852E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999988511573399	WITHOUT_CLASSIFICATION	1.1488426600426956E-6	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999986913895341	WITHOUT_CLASSIFICATION	1.308610465825053E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999904337326129	WITHOUT_CLASSIFICATION	9.566267387228105E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999842225565916	WITHOUT_CLASSIFICATION	1.577744340841325E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999786084289963	WITHOUT_CLASSIFICATION	2.139157100361391E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999988511573399	WITHOUT_CLASSIFICATION	1.1488426600426956E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999904337326129	WITHOUT_CLASSIFICATION	9.566267387228105E-6	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999913658125	WITHOUT_CLASSIFICATION	8.63418753657053E-9	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999973206411242	WITHOUT_CLASSIFICATION	2.6793588758887266E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999980042105	WITHOUT_CLASSIFICATION	1.9957895623708393E-9	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892334410672	WITHOUT_CLASSIFICATION	1.0766558932766417E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999993079504724	WITHOUT_CLASSIFICATION	6.920495274716394E-7	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999998641176263	WITHOUT_CLASSIFICATION	1.358823736458808E-7	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999864875483887	WITHOUT_CLASSIFICATION	1.351245161124262E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9993847751295067	WITHOUT_CLASSIFICATION	6.152248704932899E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999992735629959	WITHOUT_CLASSIFICATION	7.264370040561598E-7	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999293032	WITHOUT_CLASSIFICATION	7.069681250200517E-11	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999972704486043	WITHOUT_CLASSIFICATION	2.7295513956324105E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999552977553717	WITHOUT_CLASSIFICATION	4.4702244628276105E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999381822	WITHOUT_CLASSIFICATION	6.181786128740054E-11	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992585030044	WITHOUT_CLASSIFICATION	7.414969955009965E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999959285413824	WITHOUT_CLASSIFICATION	4.071458617579967E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999906347323905	WITHOUT_CLASSIFICATION	9.3652676095637E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999982673866257	WITHOUT_CLASSIFICATION	1.7326133743340725E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999315830642	WITHOUT_CLASSIFICATION	6.841693572887365E-8	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999922708936356	WITHOUT_CLASSIFICATION	7.729106364276882E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999786084289963	WITHOUT_CLASSIFICATION	2.139157100361391E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999992495453609	WITHOUT_CLASSIFICATION	7.504546390481065E-7	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999995167488079	WITHOUT_CLASSIFICATION	4.832511920231474E-7	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999984350670742	WITHOUT_CLASSIFICATION	1.564932925838114E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998439291484459	WITHOUT_CLASSIFICATION	1.560708515541147E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999988560912645	WITHOUT_CLASSIFICATION	1.1439087354743787E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999985214303575	WITHOUT_CLASSIFICATION	1.4785696425013712E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999991278569	WITHOUT_CLASSIFICATION	8.721430527926576E-10	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999600073126	WITHOUT_CLASSIFICATION	3.999268734111544E-8	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999880209325739	WITHOUT_CLASSIFICATION	1.1979067426143992E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999942464014705	WITHOUT_CLASSIFICATION	5.753598529570065E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999989575919592	WITHOUT_CLASSIFICATION	1.0424080407283208E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999999847698347	WITHOUT_CLASSIFICATION	1.523016528800116E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9996859653920542	WITHOUT_CLASSIFICATION	3.1403460794581075E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999958417024821	WITHOUT_CLASSIFICATION	4.158297517914554E-6	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999972631650227	WITHOUT_CLASSIFICATION	2.7368349774127853E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999918144108085	WITHOUT_CLASSIFICATION	8.185589191482047E-6	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999158511816544	WITHOUT_CLASSIFICATION	8.414881834564161E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999955831842883	WITHOUT_CLASSIFICATION	4.416815711721318E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999947144613107	WITHOUT_CLASSIFICATION	5.28553868925454E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999484217713088	WITHOUT_CLASSIFICATION	5.157822869130066E-5	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999889518	WITHOUT_CLASSIFICATION	1.1048137980333273E-11	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999999416957491	WITHOUT_CLASSIFICATION	5.830425082434109E-8	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8473504768835374	WITHOUT_CLASSIFICATION	0.15264952311646263	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9993412207907648	WITHOUT_CLASSIFICATION	6.587792092351355E-4	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999513633244121	WITHOUT_CLASSIFICATION	4.863667558781277E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999513633244121	WITHOUT_CLASSIFICATION	4.863667558781277E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999917391978463	WITHOUT_CLASSIFICATION	8.26080215364044E-6	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999914811369427	WITHOUT_CLASSIFICATION	8.518863057265968E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999965224777126	WITHOUT_CLASSIFICATION	3.477522287305537E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999229420814749	WITHOUT_CLASSIFICATION	7.705791852511346E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996172644412681	WITHOUT_CLASSIFICATION	3.8273555873197853E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9982985182421895	WITHOUT_CLASSIFICATION	0.0017014817578105237	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998469724264746	WITHOUT_CLASSIFICATION	1.530275735254251E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999334089755596	WITHOUT_CLASSIFICATION	6.659102444044544E-5	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999301767171027	WITHOUT_CLASSIFICATION	6.982328289732259E-5	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999775425481312	WITHOUT_CLASSIFICATION	2.2457451868833423E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999628848343546	WITHOUT_CLASSIFICATION	3.7115165645419845E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999140022083219	WITHOUT_CLASSIFICATION	8.599779167802466E-5	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9853084324614405	WITHOUT_CLASSIFICATION	0.014691567538559587	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999999938454436	WITHOUT_CLASSIFICATION	6.154556438407435E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999172222263474	WITHOUT_CLASSIFICATION	8.277777365271803E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999866283415822	WITHOUT_CLASSIFICATION	1.3371658417806387E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999990243340421	WITHOUT_CLASSIFICATION	9.756659578444022E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999725514494371	WITHOUT_CLASSIFICATION	2.7448550562909352E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9784989225763133	WITHOUT_CLASSIFICATION	0.021501077423686715	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.998362356197167	WITHOUT_CLASSIFICATION	0.0016376438028330958	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999640470066102	WITHOUT_CLASSIFICATION	3.5952993389699395E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999640470066102	WITHOUT_CLASSIFICATION	3.5952993389699395E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999510272200667	WITHOUT_CLASSIFICATION	4.8972779933392546E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999510272200667	WITHOUT_CLASSIFICATION	4.8972779933392546E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8473504768835374	WITHOUT_CLASSIFICATION	0.15264952311646263	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.999999779859105	WITHOUT_CLASSIFICATION	2.2014089494596017E-7	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995684515294269	WITHOUT_CLASSIFICATION	4.3154847057311766E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999389810208	WITHOUT_CLASSIFICATION	6.10189792261986E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999977888567408	WITHOUT_CLASSIFICATION	2.211143259198142E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995684515294269	WITHOUT_CLASSIFICATION	4.3154847057311766E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999999389810208	WITHOUT_CLASSIFICATION	6.10189792261986E-8	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990584770121	WITHOUT_CLASSIFICATION	9.415229880141381E-7	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999995730556527	WITHOUT_CLASSIFICATION	4.2694434733905435E-7	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999752656281546	WITHOUT_CLASSIFICATION	2.4734371845447707E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.999985089739947	WITHOUT_CLASSIFICATION	1.4910260053059346E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9993547622524301	WITHOUT_CLASSIFICATION	6.452377475699052E-4	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9700473485505142	WITHOUT_CLASSIFICATION	0.02995265144948576	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999992544637464	WITHOUT_CLASSIFICATION	7.455362536795773E-7	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999911629519106	WITHOUT_CLASSIFICATION	8.837048089437533E-6	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9995576312264582	WITHOUT_CLASSIFICATION	4.423687735416447E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999999158443	WITHOUT_CLASSIFICATION	8.415572896327908E-11	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999999256937668	WITHOUT_CLASSIFICATION	7.43062331544177E-8	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999921211742051	WITHOUT_CLASSIFICATION	7.878825794778543E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999999852480065	WITHOUT_CLASSIFICATION	1.4751993509143537E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999973200666097	WITHOUT_CLASSIFICATION	2.6799333903913844E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999977888567408	WITHOUT_CLASSIFICATION	2.211143259198142E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999925311273753	WITHOUT_CLASSIFICATION	7.468872624587751E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999639472192983	WITHOUT_CLASSIFICATION	3.605278070182228E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999639472192983	WITHOUT_CLASSIFICATION	3.605278070182228E-5	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9994118002368246	WITHOUT_CLASSIFICATION	5.881997631753875E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990584770121	WITHOUT_CLASSIFICATION	9.415229880141381E-7	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9994720689914961	WITHOUT_CLASSIFICATION	5.279310085038752E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9978827166230737	DESIGN	0.002117283376926377	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8671628035846517	WITHOUT_CLASSIFICATION	0.13283719641534822	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998866064945	WITHOUT_CLASSIFICATION	1.1339350546158173E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9976219325065264	WITHOUT_CLASSIFICATION	0.002378067493473525	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990584770121	WITHOUT_CLASSIFICATION	9.415229880141381E-7	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998866064945	WITHOUT_CLASSIFICATION	1.1339350546158173E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9976219325065264	WITHOUT_CLASSIFICATION	0.002378067493473525	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9741184507836262	WITHOUT_CLASSIFICATION	0.025881549216373718	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999491997598	WITHOUT_CLASSIFICATION	5.0800240268469536E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999869821259	WITHOUT_CLASSIFICATION	1.3017874116314593E-8	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990584770121	WITHOUT_CLASSIFICATION	9.415229880141381E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990584770121	WITHOUT_CLASSIFICATION	9.415229880141381E-7	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999967202192968	WITHOUT_CLASSIFICATION	3.2797807032039426E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999950032079462	WITHOUT_CLASSIFICATION	4.99679205372443E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999131314972233	WITHOUT_CLASSIFICATION	8.686850277672779E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999750201920484	WITHOUT_CLASSIFICATION	2.497980795166098E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999996109003794	WITHOUT_CLASSIFICATION	3.890996206335159E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999998773013	WITHOUT_CLASSIFICATION	1.2269880209808733E-10	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999868593659	WITHOUT_CLASSIFICATION	1.314063426172648E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9992263996709919	WITHOUT_CLASSIFICATION	7.736003290079915E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999969721574307	WITHOUT_CLASSIFICATION	3.0278425694453714E-6	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.999875334557624	WITHOUT_CLASSIFICATION	1.2466544237588304E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999951074983233	WITHOUT_CLASSIFICATION	4.892501676678621E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999974172902306	WITHOUT_CLASSIFICATION	2.5827097693526177E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999943669235791	WITHOUT_CLASSIFICATION	5.633076420931445E-6	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.998938246389786	WITHOUT_CLASSIFICATION	0.001061753610214052	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999336928926	WITHOUT_CLASSIFICATION	6.630710736622766E-8	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999976712388098	WITHOUT_CLASSIFICATION	2.3287611901386518E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9987282983380235	WITHOUT_CLASSIFICATION	0.0012717016619765613	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9986210418706094	WITHOUT_CLASSIFICATION	0.0013789581293905807	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9739321219868637	WITHOUT_CLASSIFICATION	0.0260678780131363	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.99999995781596	WITHOUT_CLASSIFICATION	4.218404013446947E-8	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999838405520897	WITHOUT_CLASSIFICATION	1.6159447910330393E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9997819635185988	WITHOUT_CLASSIFICATION	2.1803648140115384E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9997819635185988	WITHOUT_CLASSIFICATION	2.1803648140115384E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9987282983380235	WITHOUT_CLASSIFICATION	0.0012717016619765613	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999975799802135	WITHOUT_CLASSIFICATION	2.4200197864378403E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.978546757685198	WITHOUT_CLASSIFICATION	0.021453242314801946	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.7671615391944646	WITHOUT_CLASSIFICATION	0.23283846080553533	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998609195883	WITHOUT_CLASSIFICATION	1.3908041174301514E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720187505815	WITHOUT_CLASSIFICATION	2.7981249418446246E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999997366855043	WITHOUT_CLASSIFICATION	2.633144956501429E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9992965459767963	WITHOUT_CLASSIFICATION	7.034540232036671E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999885932971998	WITHOUT_CLASSIFICATION	1.1406702800277455E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998094414	WITHOUT_CLASSIFICATION	1.9055854964406236E-10	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999985700520715	WITHOUT_CLASSIFICATION	1.4299479286072708E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996430104685	WITHOUT_CLASSIFICATION	3.5698953149208794E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999828393242034	WITHOUT_CLASSIFICATION	1.7160675796620224E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999951842339264	WITHOUT_CLASSIFICATION	4.815766073636193E-6	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999955416995	WITHOUT_CLASSIFICATION	4.458300444318685E-9	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999989602703	WITHOUT_CLASSIFICATION	1.039729734079709E-9	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996192471439421	WITHOUT_CLASSIFICATION	3.8075285605791633E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999995388498705	WITHOUT_CLASSIFICATION	4.611501294959403E-6	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999908336445792	WITHOUT_CLASSIFICATION	9.166355420716509E-6	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999048435902235	WITHOUT_CLASSIFICATION	9.515640977659079E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999991287837474	WITHOUT_CLASSIFICATION	8.712162526010454E-6	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999853279754047	WITHOUT_CLASSIFICATION	1.467202459534171E-5	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9974807807118293	WITHOUT_CLASSIFICATION	0.0025192192881707196	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998956891189	WITHOUT_CLASSIFICATION	1.0431088110317232E-6	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999763691455223	WITHOUT_CLASSIFICATION	2.363085447766773E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988061750852	WITHOUT_CLASSIFICATION	1.193824914914821E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999444082240527	WITHOUT_CLASSIFICATION	5.559177594724957E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972088935343	WITHOUT_CLASSIFICATION	2.791106465756121E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723937153481	WITHOUT_CLASSIFICATION	2.760628465192744E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999967071255475	WITHOUT_CLASSIFICATION	3.292874452496057E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992411653853	WITHOUT_CLASSIFICATION	7.588346147874566E-7	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9997952463815034	WITHOUT_CLASSIFICATION	2.0475361849662182E-4	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9930716667198423	WITHOUT_CLASSIFICATION	0.006928333280157827	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999591583157	WITHOUT_CLASSIFICATION	4.0841684303184387E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800521479761	WITHOUT_CLASSIFICATION	1.994785202386631E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462461548142	WITHOUT_CLASSIFICATION	5.3753845185701874E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999007605003	WITHOUT_CLASSIFICATION	9.92394998131152E-8	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999129333579089	WITHOUT_CLASSIFICATION	8.706664209116605E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944123633295	WITHOUT_CLASSIFICATION	5.587636670441588E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939309851241	WITHOUT_CLASSIFICATION	6.069014875922263E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898808680223	WITHOUT_CLASSIFICATION	1.0119131977674543E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999999648250529	WITHOUT_CLASSIFICATION	3.517494710079045E-7	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995637165003	WITHOUT_CLASSIFICATION	4.3628349967919885E-7	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.612768381131825	DESIGN	0.38723161886817503	WITHOUT_CLASSIFICATION
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999222068190708	WITHOUT_CLASSIFICATION	7.779318092918113E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999963338397	WITHOUT_CLASSIFICATION	3.6661603065885248E-9	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900765572757	WITHOUT_CLASSIFICATION	2.0992344272428444E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.999964347262501	WITHOUT_CLASSIFICATION	3.5652737498970466E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999995901146518	WITHOUT_CLASSIFICATION	4.098853482852181E-7	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.8538737903003079	DESIGN	0.14612620969969217	WITHOUT_CLASSIFICATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999996255339836	WITHOUT_CLASSIFICATION	3.744660164606738E-7	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999994251838665	WITHOUT_CLASSIFICATION	5.74816133489399E-7	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999991144440755	WITHOUT_CLASSIFICATION	8.8555592437544E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998617065760226	WITHOUT_CLASSIFICATION	1.382934239773092E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999961194044192	WITHOUT_CLASSIFICATION	3.8805955807433995E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999698020782017	WITHOUT_CLASSIFICATION	3.019792179830347E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9998725652063224	WITHOUT_CLASSIFICATION	1.2743479367754608E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998264733121438	WITHOUT_CLASSIFICATION	1.7352668785630815E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999782468105212	WITHOUT_CLASSIFICATION	2.1753189478742297E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998471783128732	WITHOUT_CLASSIFICATION	1.5282168712683162E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999742865202	WITHOUT_CLASSIFICATION	2.5713479798594117E-7	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994042758641	WITHOUT_CLASSIFICATION	5.957241358528549E-7	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989450822107	WITHOUT_CLASSIFICATION	1.054917789323795E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964496104478	WITHOUT_CLASSIFICATION	3.550389552224273E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9949165869120165	WITHOUT_CLASSIFICATION	0.005083413087983564	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999999703798	WITHOUT_CLASSIFICATION	2.9620127876996446E-11	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999954973675348	WITHOUT_CLASSIFICATION	4.502632465169141E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999781868824408	WITHOUT_CLASSIFICATION	2.1813117559268157E-5	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996246249161	WITHOUT_CLASSIFICATION	3.753750837889971E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999986727207729	WITHOUT_CLASSIFICATION	1.327279227036714E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.971463539128109	WITHOUT_CLASSIFICATION	0.028536460871890885	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999997887467719	WITHOUT_CLASSIFICATION	2.1125322810374276E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999994669171854	WITHOUT_CLASSIFICATION	5.330828145945928E-7	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9998644115399311	WITHOUT_CLASSIFICATION	1.3558846006886128E-4	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9994710760440172	WITHOUT_CLASSIFICATION	5.289239559827121E-4	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9998633983670566	WITHOUT_CLASSIFICATION	1.3660163294331755E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9938553579360149	WITHOUT_CLASSIFICATION	0.006144642063985194	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900765572757	WITHOUT_CLASSIFICATION	2.0992344272428444E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9966766139506498	WITHOUT_CLASSIFICATION	0.0033233860493502984	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998073231992	WITHOUT_CLASSIFICATION	1.926768007554032E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999997802889014	WITHOUT_CLASSIFICATION	2.1971109866050175E-7	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9992083604073848	WITHOUT_CLASSIFICATION	7.916395926152409E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999992410947339	WITHOUT_CLASSIFICATION	7.589052661625839E-7	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.999999224479911	WITHOUT_CLASSIFICATION	7.755200890107804E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9946738384603417	WITHOUT_CLASSIFICATION	0.005326161539658213	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.999207902151365	WITHOUT_CLASSIFICATION	7.920978486350206E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999966019172116	WITHOUT_CLASSIFICATION	3.398082788442533E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992362892702	WITHOUT_CLASSIFICATION	7.63710729829327E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999997970795345	WITHOUT_CLASSIFICATION	2.0292046549124647E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999984782187933	WITHOUT_CLASSIFICATION	1.5217812067986023E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999829172941672	WITHOUT_CLASSIFICATION	1.7082705832862132E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.967224461923037	WITHOUT_CLASSIFICATION	0.03277553807696302	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999922029854962	WITHOUT_CLASSIFICATION	7.797014503706504E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9998937383636218	WITHOUT_CLASSIFICATION	1.0626163637814662E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999131297286902	WITHOUT_CLASSIFICATION	8.687027130979309E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999917883743348	WITHOUT_CLASSIFICATION	8.211625665274979E-6	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999491411515	WITHOUT_CLASSIFICATION	5.0858848411054154E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999999510451835	WITHOUT_CLASSIFICATION	4.8954816593110375E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999993353717248	WITHOUT_CLASSIFICATION	6.646282752086571E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999580875209795	WITHOUT_CLASSIFICATION	4.191247902041627E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.999972298616772	WITHOUT_CLASSIFICATION	2.770138322809543E-5	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999998071364499	WITHOUT_CLASSIFICATION	1.928635501665066E-7	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9994529792633003	WITHOUT_CLASSIFICATION	5.470207366997085E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999431390527	WITHOUT_CLASSIFICATION	5.6860947409666104E-8	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9420875138101353	WITHOUT_CLASSIFICATION	0.057912486189864616	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994120611023	WITHOUT_CLASSIFICATION	5.879388976907305E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998114751972	WITHOUT_CLASSIFICATION	1.8852480268006544E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999876121256221	WITHOUT_CLASSIFICATION	1.2387874377804233E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900765572757	WITHOUT_CLASSIFICATION	2.0992344272428444E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.989459557352856	WITHOUT_CLASSIFICATION	0.01054044264714398	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999906842551578	WITHOUT_CLASSIFICATION	9.31574484220766E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.997921387504155	WITHOUT_CLASSIFICATION	0.002078612495844876	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900765572757	WITHOUT_CLASSIFICATION	2.0992344272428444E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948144398603	WITHOUT_CLASSIFICATION	5.1855601397226575E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999993353717248	WITHOUT_CLASSIFICATION	6.646282752086571E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9957073627295925	WITHOUT_CLASSIFICATION	0.004292637270407468	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.985431170604162	WITHOUT_CLASSIFICATION	0.014568829395837906	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9076735234544102	WITHOUT_CLASSIFICATION	0.09232647654558986	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992362892702	WITHOUT_CLASSIFICATION	7.63710729829327E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999997970795345	WITHOUT_CLASSIFICATION	2.0292046549124647E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999984782187933	WITHOUT_CLASSIFICATION	1.5217812067986023E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999998430826	WITHOUT_CLASSIFICATION	1.569174458598163E-10	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999899302142272	WITHOUT_CLASSIFICATION	1.0069785772710941E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996660358689	WITHOUT_CLASSIFICATION	3.3396413106417017E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999997759731907	WITHOUT_CLASSIFICATION	2.240268093399983E-7	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999872430158	WITHOUT_CLASSIFICATION	1.275698427050031E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9997900765572757	WITHOUT_CLASSIFICATION	2.0992344272428444E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999829172941672	WITHOUT_CLASSIFICATION	1.7082705832862132E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.967224461923037	WITHOUT_CLASSIFICATION	0.03277553807696302	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999275429738125	WITHOUT_CLASSIFICATION	7.245702618743383E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998554367314	WITHOUT_CLASSIFICATION	1.445632686388201E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998686592885	WITHOUT_CLASSIFICATION	1.3134071159743872E-7	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999945741919	WITHOUT_CLASSIFICATION	5.425808233735288E-9	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9991264372829839	WITHOUT_CLASSIFICATION	8.735627170161155E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999576715679458	WITHOUT_CLASSIFICATION	4.2328432054310764E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898808680223	WITHOUT_CLASSIFICATION	1.0119131977674543E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9993164017073937	WITHOUT_CLASSIFICATION	6.835982926063753E-4	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9934021060609967	WITHOUT_CLASSIFICATION	0.0065978939390033565	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9953630136888253	WITHOUT_CLASSIFICATION	0.004636986311174788	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999992086364394	WITHOUT_CLASSIFICATION	7.913635606114845E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999567258144	WITHOUT_CLASSIFICATION	4.3274185591749986E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972088935343	WITHOUT_CLASSIFICATION	2.791106465756121E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999723937153481	WITHOUT_CLASSIFICATION	2.760628465192744E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800521479761	WITHOUT_CLASSIFICATION	1.994785202386631E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999567258144	WITHOUT_CLASSIFICATION	4.3274185591749986E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.999775677701463	WITHOUT_CLASSIFICATION	2.243222985370438E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999998414626338	WITHOUT_CLASSIFICATION	1.585373663469867E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921740568964	WITHOUT_CLASSIFICATION	7.825943103622877E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981989470398	WITHOUT_CLASSIFICATION	1.8010529602376034E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999932019362876	WITHOUT_CLASSIFICATION	6.798063712355794E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9997794862878168	WITHOUT_CLASSIFICATION	2.205137121831683E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999462461548142	WITHOUT_CLASSIFICATION	5.3753845185701874E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944123633295	WITHOUT_CLASSIFICATION	5.587636670441588E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999994669171854	WITHOUT_CLASSIFICATION	5.330828145945928E-7	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9914313344181825	WITHOUT_CLASSIFICATION	0.008568665581817372	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997797516957958	WITHOUT_CLASSIFICATION	2.202483042041597E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999672866505	WITHOUT_CLASSIFICATION	3.2713349381373446E-8	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999943960922887	WITHOUT_CLASSIFICATION	5.603907711278546E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999578829395	WITHOUT_CLASSIFICATION	4.2117060533722255E-8	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999977798215	WITHOUT_CLASSIFICATION	2.2201785055989904E-9	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999849961700915	WITHOUT_CLASSIFICATION	1.5003829908485597E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998094414	WITHOUT_CLASSIFICATION	1.9055854964406236E-10	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999978241497661	WITHOUT_CLASSIFICATION	2.1758502338786273E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999929155613488	WITHOUT_CLASSIFICATION	7.0844386511805646E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999996202043616	WITHOUT_CLASSIFICATION	3.79795638418158E-7	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999996726966517	WITHOUT_CLASSIFICATION	3.273033483402972E-7	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.99999993609364	WITHOUT_CLASSIFICATION	6.390635997247139E-8	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9995553341428868	WITHOUT_CLASSIFICATION	4.446658571131522E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819599569217	WITHOUT_CLASSIFICATION	1.804004307827885E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999721877965804	WITHOUT_CLASSIFICATION	2.7812203419591424E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999752380421	WITHOUT_CLASSIFICATION	2.476195789656124E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999985198821772	WITHOUT_CLASSIFICATION	1.4801178228076712E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999657346031255	WITHOUT_CLASSIFICATION	3.4265396874447305E-5	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993592617908	WITHOUT_CLASSIFICATION	6.40738209170765E-7	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998490694094	WITHOUT_CLASSIFICATION	1.5093059068656963E-7	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998195350175	WITHOUT_CLASSIFICATION	1.8046498254386539E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999160710992	WITHOUT_CLASSIFICATION	8.392890084337894E-8	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999984492839301	WITHOUT_CLASSIFICATION	1.5507160698764987E-6	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999954851550847	WITHOUT_CLASSIFICATION	4.51484491521749E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991568274486	WITHOUT_CLASSIFICATION	8.431725514519254E-7	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998861311365966	WITHOUT_CLASSIFICATION	1.1386886340332568E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991659520074	WITHOUT_CLASSIFICATION	8.340479925287267E-7	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975276879182	WITHOUT_CLASSIFICATION	2.472312081803356E-6	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9983838113598165	WITHOUT_CLASSIFICATION	0.001616188640183515	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999822753965	WITHOUT_CLASSIFICATION	1.7724603397793675E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999997225552846	WITHOUT_CLASSIFICATION	2.7744471538494395E-7	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999974129227998	WITHOUT_CLASSIFICATION	2.58707720024691E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9996190711304926	WITHOUT_CLASSIFICATION	3.809288695073101E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9991777485697596	WITHOUT_CLASSIFICATION	8.222514302404671E-4	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.999999995570216	WITHOUT_CLASSIFICATION	4.429784009408843E-9	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999865378036	WITHOUT_CLASSIFICATION	1.3462196377298159E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999622740120473	WITHOUT_CLASSIFICATION	3.7725987952808574E-5	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999984827265288	WITHOUT_CLASSIFICATION	1.5172734712993483E-6	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9955678082501864	WITHOUT_CLASSIFICATION	0.0044321917498135405	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9972200362386264	WITHOUT_CLASSIFICATION	0.002779963761373475	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999910329581	WITHOUT_CLASSIFICATION	8.967041966066102E-9	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999992024881167	WITHOUT_CLASSIFICATION	7.975118833267945E-7	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999996874468496	WITHOUT_CLASSIFICATION	3.125531502728262E-7	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.999999934502135	WITHOUT_CLASSIFICATION	6.549786501155035E-8	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.999924561686463	WITHOUT_CLASSIFICATION	7.543831353696189E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999931991797	WITHOUT_CLASSIFICATION	6.800820294040279E-8	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999909246414	WITHOUT_CLASSIFICATION	9.075358547960855E-9	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9922808487191092	WITHOUT_CLASSIFICATION	0.007719151280890869	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999966659057867	WITHOUT_CLASSIFICATION	3.334094213396381E-6	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9735252002003194	WITHOUT_CLASSIFICATION	0.026474799799680516	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999998853223152	WITHOUT_CLASSIFICATION	1.146776847197959E-7	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9994448568485078	WITHOUT_CLASSIFICATION	5.551431514922269E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.996610339990008	WITHOUT_CLASSIFICATION	0.003389660009991878	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999974176281041	WITHOUT_CLASSIFICATION	2.582371895825527E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999647600317	WITHOUT_CLASSIFICATION	3.523996828680873E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993703941231	WITHOUT_CLASSIFICATION	6.296058767801748E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999798925800422	WITHOUT_CLASSIFICATION	2.0107419957903836E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999990864956237	WITHOUT_CLASSIFICATION	9.135043761766963E-7	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998375431471	WITHOUT_CLASSIFICATION	1.6245685289137025E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999985894258069	WITHOUT_CLASSIFICATION	1.4105741931364754E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998869018334	WITHOUT_CLASSIFICATION	1.1309816655880073E-7	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999981553688	WITHOUT_CLASSIFICATION	1.8446312854090568E-9	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9964224659014933	WITHOUT_CLASSIFICATION	0.00357753409850664	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999535246881647	WITHOUT_CLASSIFICATION	4.647531183523653E-5	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999999013621567	WITHOUT_CLASSIFICATION	9.86378433800105E-8	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999794965478163	WITHOUT_CLASSIFICATION	2.050345218378346E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999990627301882	WITHOUT_CLASSIFICATION	9.372698118048787E-7	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9995588740669095	WITHOUT_CLASSIFICATION	4.411259330905293E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999973169540137	WITHOUT_CLASSIFICATION	2.6830459863790957E-6	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999359068800331	WITHOUT_CLASSIFICATION	6.409311996698215E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9867702806028393	WITHOUT_CLASSIFICATION	0.013229719397160616	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999894749598589	WITHOUT_CLASSIFICATION	1.0525040141090245E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7428311448276567	WITHOUT_CLASSIFICATION	0.2571688551723434	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999839278706	WITHOUT_CLASSIFICATION	1.6072129484938675E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.8200777993459772	WITHOUT_CLASSIFICATION	0.17992220065402276	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999290336523162	WITHOUT_CLASSIFICATION	7.096634768381866E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9998331963196625	WITHOUT_CLASSIFICATION	1.6680368033743077E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.999161163763997	WITHOUT_CLASSIFICATION	8.388362360030971E-4	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998821029971197	WITHOUT_CLASSIFICATION	1.1789700288037058E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998485341523917	WITHOUT_CLASSIFICATION	1.5146584760832783E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999962523927	WITHOUT_CLASSIFICATION	3.747607286465017E-9	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999999273779141	WITHOUT_CLASSIFICATION	7.262208585373362E-8	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9966636498030021	WITHOUT_CLASSIFICATION	0.0033363501969978955	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999858563149999	WITHOUT_CLASSIFICATION	1.4143685000167335E-5	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999737416135	WITHOUT_CLASSIFICATION	2.625838647480122E-8	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999250289998	WITHOUT_CLASSIFICATION	7.497100019940584E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999968247662641	WITHOUT_CLASSIFICATION	3.1752337358898646E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9974975904754491	WITHOUT_CLASSIFICATION	0.002502409524550954	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993012428853	WITHOUT_CLASSIFICATION	6.987571147772828E-7	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.993554844562541	WITHOUT_CLASSIFICATION	0.006445155437459061	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999999192900001	WITHOUT_CLASSIFICATION	8.070999983119748E-8	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999643353369094	WITHOUT_CLASSIFICATION	3.5664663090595035E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.999863191626381	WITHOUT_CLASSIFICATION	1.368083736189932E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999155466884354	WITHOUT_CLASSIFICATION	8.445331156466595E-5	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.999894336434434	WITHOUT_CLASSIFICATION	1.0566356556594451E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999799215268482	WITHOUT_CLASSIFICATION	2.0078473151819702E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999978728753948	WITHOUT_CLASSIFICATION	2.1271246051725255E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998735953139055	WITHOUT_CLASSIFICATION	1.2640468609438342E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999631468741501	WITHOUT_CLASSIFICATION	3.685312584979282E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999774478121843	WITHOUT_CLASSIFICATION	2.255218781559071E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998735953139055	WITHOUT_CLASSIFICATION	1.2640468609438342E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999995091731412	WITHOUT_CLASSIFICATION	4.90826858878535E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999966645239896	WITHOUT_CLASSIFICATION	3.3354760105025206E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999978059500371	WITHOUT_CLASSIFICATION	2.194049962989283E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999912806272724	WITHOUT_CLASSIFICATION	8.719372727653245E-6	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999417415807	WITHOUT_CLASSIFICATION	5.825841938611021E-8	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999999523825631	WITHOUT_CLASSIFICATION	4.7617436984297696E-8	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999738830238242	WITHOUT_CLASSIFICATION	2.6116976175881575E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999995827506925	WITHOUT_CLASSIFICATION	4.1724930746840894E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999559681053534	WITHOUT_CLASSIFICATION	4.403189464667664E-5	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999987799076377	WITHOUT_CLASSIFICATION	1.22009236229836E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999999292095809	WITHOUT_CLASSIFICATION	7.079041908385056E-8	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999952162692791	WITHOUT_CLASSIFICATION	4.783730720903059E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9997720421651591	WITHOUT_CLASSIFICATION	2.2795783484076934E-4	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999999373895	WITHOUT_CLASSIFICATION	6.261042355275843E-11	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999989483551079	WITHOUT_CLASSIFICATION	1.0516448919795992E-6	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9870972019306244	WITHOUT_CLASSIFICATION	0.012902798069375642	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998463345903411	WITHOUT_CLASSIFICATION	1.536654096589907E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998463345903411	WITHOUT_CLASSIFICATION	1.536654096589907E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999619074434	WITHOUT_CLASSIFICATION	3.8092556529772806E-8	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999909120131889	WITHOUT_CLASSIFICATION	9.087986811218143E-6	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.999999516758352	WITHOUT_CLASSIFICATION	4.832416480259563E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9997575629609938	WITHOUT_CLASSIFICATION	2.4243703900613033E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999990396203041	WITHOUT_CLASSIFICATION	9.603796958434615E-7	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8997993577022944	DESIGN	0.10020064229770564	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999982852310284	WITHOUT_CLASSIFICATION	1.7147689715710655E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999558317817793	WITHOUT_CLASSIFICATION	4.4168218220641875E-5	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.999907874671159	WITHOUT_CLASSIFICATION	9.212532884087806E-5	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998948152825001	WITHOUT_CLASSIFICATION	1.0518471749988973E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9977349469162802	WITHOUT_CLASSIFICATION	0.002265053083719857	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999960615753648	WITHOUT_CLASSIFICATION	3.9384246351977156E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999122867634879	WITHOUT_CLASSIFICATION	8.771323651213903E-5	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9893576814428815	WITHOUT_CLASSIFICATION	0.010642318557118472	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999999232436125	WITHOUT_CLASSIFICATION	7.675638743279232E-8	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9995553341428868	WITHOUT_CLASSIFICATION	4.446658571131522E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999997864067357	WITHOUT_CLASSIFICATION	2.135932643513766E-7	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999995412872653	WITHOUT_CLASSIFICATION	4.587127346552468E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.999653406363024	WITHOUT_CLASSIFICATION	3.4659363697606816E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999975876258895	WITHOUT_CLASSIFICATION	2.412374110476575E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999962359367605	WITHOUT_CLASSIFICATION	3.764063239552804E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999713069056336	WITHOUT_CLASSIFICATION	2.8693094366332712E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999888316258673	WITHOUT_CLASSIFICATION	1.1168374132671284E-5	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999993552931745	WITHOUT_CLASSIFICATION	6.447068255882819E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999744548478	WITHOUT_CLASSIFICATION	2.5545152165781967E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999965660890795	WITHOUT_CLASSIFICATION	3.433910920567457E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999976961962367	WITHOUT_CLASSIFICATION	2.3038037633083243E-6	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.574736284870553	DESIGN	0.4252637151294469	WITHOUT_CLASSIFICATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999959321333873	WITHOUT_CLASSIFICATION	4.067866612740948E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999935564049987	WITHOUT_CLASSIFICATION	6.443595001281668E-6	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.999999474587704	WITHOUT_CLASSIFICATION	5.254122959398561E-7	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999922805371707	WITHOUT_CLASSIFICATION	7.719462829295724E-6	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9996382341831241	WITHOUT_CLASSIFICATION	3.617658168758693E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999764415490516	WITHOUT_CLASSIFICATION	2.3558450948418357E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997980687115936	WITHOUT_CLASSIFICATION	2.0193128840648001E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.99999880125014	WITHOUT_CLASSIFICATION	1.198749859937452E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999995351467814	WITHOUT_CLASSIFICATION	4.648532185198271E-7	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9974384884494676	WITHOUT_CLASSIFICATION	0.002561511550532499	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999996613661	WITHOUT_CLASSIFICATION	3.3863391467989694E-10	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999984826707407	WITHOUT_CLASSIFICATION	1.5173292593513503E-6	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999097195257411	WITHOUT_CLASSIFICATION	9.028047425893855E-5	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999978179172911	WITHOUT_CLASSIFICATION	2.182082708781429E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.999999926994095	WITHOUT_CLASSIFICATION	7.30059050183926E-8	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999925624057848	WITHOUT_CLASSIFICATION	7.437594215157532E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999999965502559	WITHOUT_CLASSIFICATION	3.4497441022330455E-8	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999954520606565	WITHOUT_CLASSIFICATION	4.5479393435074195E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998228470992944	WITHOUT_CLASSIFICATION	1.7715290070558862E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999918574749	WITHOUT_CLASSIFICATION	8.142525117878314E-9	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996790895205	WITHOUT_CLASSIFICATION	3.209104795602619E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9974050729729249	WITHOUT_CLASSIFICATION	0.00259492702707521	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999526421296	WITHOUT_CLASSIFICATION	4.735787046665136E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999992128756	WITHOUT_CLASSIFICATION	7.871244013539984E-9	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9996842708613713	WITHOUT_CLASSIFICATION	3.1572913862862567E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999179228625928	WITHOUT_CLASSIFICATION	8.207713740707729E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999860217951495	WITHOUT_CLASSIFICATION	1.3978204850592299E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999179228625928	WITHOUT_CLASSIFICATION	8.207713740707729E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9974464163681428	WITHOUT_CLASSIFICATION	0.002553583631857306	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9992023440736945	WITHOUT_CLASSIFICATION	7.976559263056213E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9995882563236799	WITHOUT_CLASSIFICATION	4.1174367632019544E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999948811669563	WITHOUT_CLASSIFICATION	5.118833043578479E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999994830111394	WITHOUT_CLASSIFICATION	5.169888606157957E-7	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999998011265706	WITHOUT_CLASSIFICATION	1.9887342936260218E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993911815603	WITHOUT_CLASSIFICATION	6.088184396149174E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999999167226096	WITHOUT_CLASSIFICATION	8.327739041425291E-8	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999997179055883	WITHOUT_CLASSIFICATION	2.820944117389566E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999851014544199	WITHOUT_CLASSIFICATION	1.4898545580128267E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999668285587732	WITHOUT_CLASSIFICATION	3.317144122683554E-5	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9996370875927714	WITHOUT_CLASSIFICATION	3.629124072287304E-4	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999780052774686	WITHOUT_CLASSIFICATION	2.1994722531470418E-5	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.996783781274596	WITHOUT_CLASSIFICATION	0.0032162187254039147	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9994919458443454	WITHOUT_CLASSIFICATION	5.080541556546424E-4	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9999091838869413	WITHOUT_CLASSIFICATION	9.081611305865617E-5	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999924140348359	WITHOUT_CLASSIFICATION	7.585965164034838E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999924140348359	WITHOUT_CLASSIFICATION	7.585965164034838E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.999638345190409	WITHOUT_CLASSIFICATION	3.616548095910356E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999938696645	WITHOUT_CLASSIFICATION	6.130335496254225E-9	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999982770858673	WITHOUT_CLASSIFICATION	1.722914132716197E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999992539054423	WITHOUT_CLASSIFICATION	7.460945577311458E-7	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9896695282825251	WITHOUT_CLASSIFICATION	0.010330471717474983	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.999997935229242	WITHOUT_CLASSIFICATION	2.0647707581240354E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999823550623819	WITHOUT_CLASSIFICATION	1.7644937618046313E-5	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.999944096107599	WITHOUT_CLASSIFICATION	5.5903892400895256E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999986668452178	WITHOUT_CLASSIFICATION	1.3331547822103626E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999995044655	WITHOUT_CLASSIFICATION	4.955344589316627E-10	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999967583976044	WITHOUT_CLASSIFICATION	3.2416023955002423E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999993232215706	WITHOUT_CLASSIFICATION	6.767784294287184E-7	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999981075645	WITHOUT_CLASSIFICATION	1.8924355105731003E-9	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999964923740096	WITHOUT_CLASSIFICATION	3.5076259904099865E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9996001047746769	WITHOUT_CLASSIFICATION	3.99895225323175E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999999800657173	WITHOUT_CLASSIFICATION	1.9934282678042693E-8	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999490021320785	WITHOUT_CLASSIFICATION	5.099786792149807E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.8068710962769081	WITHOUT_CLASSIFICATION	0.19312890372309194	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999670648111852	WITHOUT_CLASSIFICATION	3.2935188814726626E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999881526985	WITHOUT_CLASSIFICATION	1.1847301336388693E-8	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998509207353	WITHOUT_CLASSIFICATION	1.4907926476405907E-7	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999994887529459	WITHOUT_CLASSIFICATION	5.11247054223292E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.99995001764661	WITHOUT_CLASSIFICATION	4.998235338999199E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9991919357832167	WITHOUT_CLASSIFICATION	8.08064216783331E-4	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999999454885268	WITHOUT_CLASSIFICATION	5.451147311849526E-8	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999623053730089	WITHOUT_CLASSIFICATION	3.769462699104726E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999990233220986	WITHOUT_CLASSIFICATION	9.766779014449482E-7	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.51447466319939	DESIGN	0.48552533680061005	WITHOUT_CLASSIFICATION
/// HHH-2378	WITHOUT_CLASSIFICATION	0.999988381562141	WITHOUT_CLASSIFICATION	1.1618437859123894E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9997155996414523	WITHOUT_CLASSIFICATION	2.8440035854771336E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.999202461169553	WITHOUT_CLASSIFICATION	7.975388304469823E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999901358636505	WITHOUT_CLASSIFICATION	9.864136349567564E-6	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999936603413141	WITHOUT_CLASSIFICATION	6.33965868588195E-6	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999564146743094	WITHOUT_CLASSIFICATION	4.3585325690733264E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9998640869023475	WITHOUT_CLASSIFICATION	1.3591309765250998E-4	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999998470687119	WITHOUT_CLASSIFICATION	1.5293128820702538E-7	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999996365840716	WITHOUT_CLASSIFICATION	3.634159284037098E-7	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9995638605900774	WITHOUT_CLASSIFICATION	4.3613940992265533E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.999360082040432	WITHOUT_CLASSIFICATION	6.399179595680294E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999763861891	WITHOUT_CLASSIFICATION	2.3613810833640216E-8	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999921198611	WITHOUT_CLASSIFICATION	7.880138865974372E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999825788651	WITHOUT_CLASSIFICATION	1.742113487966758E-8	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998912099002687	WITHOUT_CLASSIFICATION	1.087900997312322E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9993531127487405	WITHOUT_CLASSIFICATION	6.468872512595882E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999985309352	WITHOUT_CLASSIFICATION	1.4690647576087278E-9	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9995770776005685	WITHOUT_CLASSIFICATION	4.2292239943154605E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.6505094283739478	DESIGN	0.3494905716260522	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999996825358158	WITHOUT_CLASSIFICATION	3.174641842292338E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998752209548	WITHOUT_CLASSIFICATION	1.2477904517437906E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.999995220793465	WITHOUT_CLASSIFICATION	4.779206534900338E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999898311174	WITHOUT_CLASSIFICATION	1.0168882586030363E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999963870947153	WITHOUT_CLASSIFICATION	3.6129052846087857E-6	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999765884973	WITHOUT_CLASSIFICATION	2.3411502700393327E-7	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999840207708309	WITHOUT_CLASSIFICATION	1.5979229169085486E-5	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999565069453686	WITHOUT_CLASSIFICATION	4.3493054631466504E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948144398603	WITHOUT_CLASSIFICATION	5.1855601397226575E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999948144398603	WITHOUT_CLASSIFICATION	5.1855601397226575E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999998930972	WITHOUT_CLASSIFICATION	1.0690277333790506E-10	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999189431908483	WITHOUT_CLASSIFICATION	8.105680915176971E-5	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9996192642604828	WITHOUT_CLASSIFICATION	3.807357395171757E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999917488480504	WITHOUT_CLASSIFICATION	8.251151949481695E-6	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999977082744	WITHOUT_CLASSIFICATION	2.2917256285818374E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999991949080655	WITHOUT_CLASSIFICATION	8.050919343767753E-7	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.999733198147601	WITHOUT_CLASSIFICATION	2.668018523990465E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999997014748089	WITHOUT_CLASSIFICATION	2.9852519112608815E-7	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999716510688175	WITHOUT_CLASSIFICATION	2.8348931182500188E-5	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999974758749	WITHOUT_CLASSIFICATION	2.5241250761430963E-9	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999980683557216	WITHOUT_CLASSIFICATION	1.931644278439178E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9991025806063069	WITHOUT_CLASSIFICATION	8.974193936930747E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999981677095094	WITHOUT_CLASSIFICATION	1.8322904905604078E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999847353086208	WITHOUT_CLASSIFICATION	1.526469137927682E-5	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5479844384668218	DESIGN	0.4520155615331781	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999096224726061	WITHOUT_CLASSIFICATION	9.037752739389188E-5	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999263827356	WITHOUT_CLASSIFICATION	7.3617264400593E-8	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.999888744351465	WITHOUT_CLASSIFICATION	1.1125564853501491E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9993164796564517	WITHOUT_CLASSIFICATION	6.835203435483363E-4	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999764437648724	WITHOUT_CLASSIFICATION	2.355623512755997E-5	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999810330961343	WITHOUT_CLASSIFICATION	1.8966903865792658E-5	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999998475241367	WITHOUT_CLASSIFICATION	1.524758632102128E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999969378623738	WITHOUT_CLASSIFICATION	3.0621376261916735E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9999430867749598	WITHOUT_CLASSIFICATION	5.691322504021538E-5	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.983695237704968	WITHOUT_CLASSIFICATION	0.016304762295032037	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9998436836702292	DESIGN	1.5631632977078282E-4	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999731573818477	WITHOUT_CLASSIFICATION	2.684261815235085E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997296722633807	WITHOUT_CLASSIFICATION	2.703277366192614E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999946867465253	WITHOUT_CLASSIFICATION	5.313253474710451E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999969378623738	WITHOUT_CLASSIFICATION	3.0621376261916735E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9999634910666603	WITHOUT_CLASSIFICATION	3.650893333985539E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9997921178997238	WITHOUT_CLASSIFICATION	2.078821002762143E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9995784745191804	WITHOUT_CLASSIFICATION	4.2152548081961396E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999318421950556	WITHOUT_CLASSIFICATION	6.815780494442031E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999837869108	WITHOUT_CLASSIFICATION	1.6213089161533524E-8	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.78632445150428	WITHOUT_CLASSIFICATION	0.21367554849572015	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9982549241822499	WITHOUT_CLASSIFICATION	0.0017450758177500068	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999989219814694	WITHOUT_CLASSIFICATION	1.0780185305523154E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999951163046463	WITHOUT_CLASSIFICATION	4.88369535372258E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999318421950556	WITHOUT_CLASSIFICATION	6.815780494442031E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999990764437277	WITHOUT_CLASSIFICATION	9.235562723715098E-7	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999904684901646	WITHOUT_CLASSIFICATION	9.531509835313377E-6	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9997868335704978	WITHOUT_CLASSIFICATION	2.1316642950218334E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999807067624485	WITHOUT_CLASSIFICATION	1.9293237551408526E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999998662025844	WITHOUT_CLASSIFICATION	1.3379741556038613E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999967583976044	WITHOUT_CLASSIFICATION	3.2416023955002423E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999999996598936	WITHOUT_CLASSIFICATION	3.4010639600958186E-9	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999992012700278	WITHOUT_CLASSIFICATION	7.987299721464527E-7	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999746799722414	WITHOUT_CLASSIFICATION	2.5320027758617695E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9989106181041111	WITHOUT_CLASSIFICATION	0.00108938189588893	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999866689889652	WITHOUT_CLASSIFICATION	1.3331011034805541E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9998347097764908	WITHOUT_CLASSIFICATION	1.652902235092938E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998419587750506	WITHOUT_CLASSIFICATION	1.580412249494406E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999992796772794	WITHOUT_CLASSIFICATION	7.203227206019311E-7	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999865159502881	WITHOUT_CLASSIFICATION	1.3484049711994082E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999765728646576	WITHOUT_CLASSIFICATION	2.3427135342407096E-5	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999441571122824	WITHOUT_CLASSIFICATION	5.5842887717571596E-5	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999991416942234	WITHOUT_CLASSIFICATION	8.58305776670073E-7	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999982692524865	WITHOUT_CLASSIFICATION	1.730747513546847E-6	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9983324932285073	WITHOUT_CLASSIFICATION	0.001667506771492796	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999980808094353	WITHOUT_CLASSIFICATION	1.9191905646608554E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999980832672506	WITHOUT_CLASSIFICATION	1.916732749281431E-6	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999970082437	WITHOUT_CLASSIFICATION	2.991756202443086E-9	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999987639187502	WITHOUT_CLASSIFICATION	1.2360812497515331E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999974373795542	WITHOUT_CLASSIFICATION	2.562620445792166E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9961818115383906	WITHOUT_CLASSIFICATION	0.003818188461609379	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999982125289618	WITHOUT_CLASSIFICATION	1.7874710381925032E-5	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999580479397	WITHOUT_CLASSIFICATION	4.1952060367873016E-8	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999991730678909	WITHOUT_CLASSIFICATION	8.269321092274892E-7	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999979733080088	WITHOUT_CLASSIFICATION	2.026691991195046E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999987611261865	WITHOUT_CLASSIFICATION	1.2388738135764744E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9987862877068386	WITHOUT_CLASSIFICATION	0.0012137122931612971	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999952426679577	WITHOUT_CLASSIFICATION	4.757332042321316E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950045671216	WITHOUT_CLASSIFICATION	4.995432878403542E-6	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991751281071194	WITHOUT_CLASSIFICATION	8.248718928806031E-4	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.8732893796281525	WITHOUT_CLASSIFICATION	0.12671062037184755	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999596378650427	WITHOUT_CLASSIFICATION	4.036213495731436E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999978948908544	WITHOUT_CLASSIFICATION	2.1051091455455655E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993116102205	WITHOUT_CLASSIFICATION	6.883897794721057E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993116102205	WITHOUT_CLASSIFICATION	6.883897794721057E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999944322192111	WITHOUT_CLASSIFICATION	5.567780788803521E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9997354742653627	WITHOUT_CLASSIFICATION	2.6452573463731446E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999993841947439	WITHOUT_CLASSIFICATION	6.158052562282708E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999984119525774	WITHOUT_CLASSIFICATION	1.5880474225496534E-6	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999627477128	WITHOUT_CLASSIFICATION	3.7252287197679113E-7	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.7536579846532454	WITHOUT_CLASSIFICATION	0.24634201534675454	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9992849444343035	WITHOUT_CLASSIFICATION	7.15055565696477E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999992392507853	WITHOUT_CLASSIFICATION	7.607492147452292E-7	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999999947049081	WITHOUT_CLASSIFICATION	5.295091953633943E-9	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999789546723	WITHOUT_CLASSIFICATION	2.1045327768393117E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999943306068	WITHOUT_CLASSIFICATION	5.669393074505273E-9	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999987586152339	WITHOUT_CLASSIFICATION	1.241384766113831E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999999912862781	WITHOUT_CLASSIFICATION	8.713721910802397E-8	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993116102205	WITHOUT_CLASSIFICATION	6.883897794721057E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999966520835583	WITHOUT_CLASSIFICATION	3.3479164417701723E-6	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9993812080528737	WITHOUT_CLASSIFICATION	6.187919471262332E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9991963844977073	WITHOUT_CLASSIFICATION	8.036155022927838E-4	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999907234054621	WITHOUT_CLASSIFICATION	9.27659453779712E-6	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999953213669435	WITHOUT_CLASSIFICATION	4.678633056554636E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999371303390892	WITHOUT_CLASSIFICATION	6.286966091086912E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999781110638907	WITHOUT_CLASSIFICATION	2.1888936109297754E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999976030818873	WITHOUT_CLASSIFICATION	2.3969181126448444E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999905151622436	WITHOUT_CLASSIFICATION	9.484837756403167E-6	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998255555229113	WITHOUT_CLASSIFICATION	1.744444770887595E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998980230502733	WITHOUT_CLASSIFICATION	1.0197694972672606E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999950045671216	WITHOUT_CLASSIFICATION	4.995432878403542E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993116102205	WITHOUT_CLASSIFICATION	6.883897794721057E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999997748831	WITHOUT_CLASSIFICATION	2.251169335534422E-10	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998673196154	WITHOUT_CLASSIFICATION	1.3268038446417314E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999851834990562	WITHOUT_CLASSIFICATION	1.4816500943764136E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999969694413332	WITHOUT_CLASSIFICATION	3.030558666712065E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.7560854750045696	WITHOUT_CLASSIFICATION	0.24391452499543043	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999993705914999	WITHOUT_CLASSIFICATION	6.294085001131748E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778053944854	WITHOUT_CLASSIFICATION	2.219460551461156E-5	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999997783560792	WITHOUT_CLASSIFICATION	2.216439207420219E-7	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999985604545	WITHOUT_CLASSIFICATION	1.4395453989078226E-9	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999975975139839	WITHOUT_CLASSIFICATION	2.4024860161690135E-6	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999926006529	WITHOUT_CLASSIFICATION	7.399347198602513E-9	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519895618779	WITHOUT_CLASSIFICATION	1.4801043812198275E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999973820952655	WITHOUT_CLASSIFICATION	2.6179047345626323E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999999044009944	WITHOUT_CLASSIFICATION	9.559900554050739E-8	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9974464163681428	WITHOUT_CLASSIFICATION	0.002553583631857306	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999997810814059	WITHOUT_CLASSIFICATION	2.189185941597854E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999985117929	WITHOUT_CLASSIFICATION	1.4882072238236523E-9	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999988273482775	WITHOUT_CLASSIFICATION	1.172651722563914E-6	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999996633770629	WITHOUT_CLASSIFICATION	3.366229371543339E-7	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999899226217	WITHOUT_CLASSIFICATION	1.0077378251821621E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997665955053628	WITHOUT_CLASSIFICATION	2.334044946370073E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997665955053628	WITHOUT_CLASSIFICATION	2.334044946370073E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9993504328778162	WITHOUT_CLASSIFICATION	6.495671221837206E-4	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.99999219799577	WITHOUT_CLASSIFICATION	7.802004230004621E-6	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999800236271	WITHOUT_CLASSIFICATION	1.9976372950855972E-8	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999851316142542	WITHOUT_CLASSIFICATION	1.4868385745811254E-5	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999786920283681	WITHOUT_CLASSIFICATION	2.130797163196162E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999283170814997	WITHOUT_CLASSIFICATION	7.168291850033952E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9941837680649502	WITHOUT_CLASSIFICATION	0.005816231935049799	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999979040265	WITHOUT_CLASSIFICATION	2.095973498152151E-9	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999979040265	WITHOUT_CLASSIFICATION	2.095973498152151E-9	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999999066827675	WITHOUT_CLASSIFICATION	9.331723260446055E-8	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999992679311484	WITHOUT_CLASSIFICATION	7.320688516960085E-7	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999839587717182	WITHOUT_CLASSIFICATION	1.6041228281722343E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999977565477432	WITHOUT_CLASSIFICATION	2.243452256802414E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999977565477432	WITHOUT_CLASSIFICATION	2.243452256802414E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999977565477432	WITHOUT_CLASSIFICATION	2.243452256802414E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9927779391394316	WITHOUT_CLASSIFICATION	0.007222060860568515	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999629764484974	WITHOUT_CLASSIFICATION	3.702355150267285E-5	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999811598373	WITHOUT_CLASSIFICATION	1.8840162638072186E-8	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9660620842409005	WITHOUT_CLASSIFICATION	0.03393791575909951	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998768460510764	WITHOUT_CLASSIFICATION	1.2315394892357948E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993116102205	WITHOUT_CLASSIFICATION	6.883897794721057E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993116102205	WITHOUT_CLASSIFICATION	6.883897794721057E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999996212347015	WITHOUT_CLASSIFICATION	3.78765298452767E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9995451234325731	WITHOUT_CLASSIFICATION	4.548765674268316E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999609220820561	WITHOUT_CLASSIFICATION	3.907791794394342E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999912691920275	WITHOUT_CLASSIFICATION	8.730807972514506E-6	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999866962235744	WITHOUT_CLASSIFICATION	1.330377642553516E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999999262305302	WITHOUT_CLASSIFICATION	7.376946975434499E-8	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9885435537583992	WITHOUT_CLASSIFICATION	0.011456446241600863	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998232731630525	WITHOUT_CLASSIFICATION	1.7672683694753926E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998418597916	WITHOUT_CLASSIFICATION	1.5814020830283701E-7	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999923928469	WITHOUT_CLASSIFICATION	7.607153112271649E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999971182177314	WITHOUT_CLASSIFICATION	2.881782268652687E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999713688185385	WITHOUT_CLASSIFICATION	2.8631181461391795E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999713688185385	WITHOUT_CLASSIFICATION	2.8631181461391795E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999746512211566	WITHOUT_CLASSIFICATION	2.534877884336992E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999746512211566	WITHOUT_CLASSIFICATION	2.534877884336992E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999737923641578	WITHOUT_CLASSIFICATION	2.6207635842156462E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999985404798355	WITHOUT_CLASSIFICATION	1.4595201645643417E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999985404798355	WITHOUT_CLASSIFICATION	1.4595201645643417E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999888191048542	WITHOUT_CLASSIFICATION	1.118089514581309E-5	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967182306072	WITHOUT_CLASSIFICATION	3.281769392832243E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997714946417	WITHOUT_CLASSIFICATION	2.2850535834133114E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997665955053628	WITHOUT_CLASSIFICATION	2.334044946370073E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999915725130115	WITHOUT_CLASSIFICATION	8.427486988452706E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999967182306072	WITHOUT_CLASSIFICATION	3.281769392832243E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.997814655234008	WITHOUT_CLASSIFICATION	0.0021853447659920346	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999666188185999	WITHOUT_CLASSIFICATION	3.338118140010932E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999995887955195	WITHOUT_CLASSIFICATION	4.1120448044487306E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999995730103636	WITHOUT_CLASSIFICATION	4.269896364510005E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999981641606461	WITHOUT_CLASSIFICATION	1.8358393538413544E-6	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9998226184922211	WITHOUT_CLASSIFICATION	1.7738150777902833E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999951930531	WITHOUT_CLASSIFICATION	4.806946894395188E-8	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.995135839054723	WITHOUT_CLASSIFICATION	0.004864160945276994	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999623428206	WITHOUT_CLASSIFICATION	3.76571794572923E-8	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.97409525755782	WITHOUT_CLASSIFICATION	0.025904742442179943	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999892200265	WITHOUT_CLASSIFICATION	1.0779973596702588E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999395538690865	WITHOUT_CLASSIFICATION	6.044613091343299E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998177816625	WITHOUT_CLASSIFICATION	1.8221833742325228E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999920670303613	WITHOUT_CLASSIFICATION	7.932969638777638E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999990869861097	WITHOUT_CLASSIFICATION	9.130138901664039E-7	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9950989595289027	WITHOUT_CLASSIFICATION	0.004901040471097234	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999015325663	WITHOUT_CLASSIFICATION	9.846743373368572E-8	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998872938708935	WITHOUT_CLASSIFICATION	1.1270612910644975E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998872938708935	WITHOUT_CLASSIFICATION	1.1270612910644975E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999993999322033	WITHOUT_CLASSIFICATION	6.000677966603168E-7	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997629473231	WITHOUT_CLASSIFICATION	2.370526769040919E-7	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999995561934726	WITHOUT_CLASSIFICATION	4.438065274868282E-7	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999656361809844	WITHOUT_CLASSIFICATION	3.4363819015620693E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999709820883717	WITHOUT_CLASSIFICATION	2.9017911628339376E-5	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999896734591102	WITHOUT_CLASSIFICATION	1.0326540889950693E-5	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999955071046962	WITHOUT_CLASSIFICATION	4.492895303773916E-6	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999997802601973	WITHOUT_CLASSIFICATION	2.1973980264675336E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999790325907856	WITHOUT_CLASSIFICATION	2.0967409214377398E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998128831194997	WITHOUT_CLASSIFICATION	1.8711688050023279E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999788557713297	WITHOUT_CLASSIFICATION	2.1144228670335877E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519895618779	WITHOUT_CLASSIFICATION	1.4801043812198275E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999966541543541	WITHOUT_CLASSIFICATION	3.3458456458710778E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999994231571828	WITHOUT_CLASSIFICATION	5.76842817144217E-7	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9998116937230112	WITHOUT_CLASSIFICATION	1.883062769889672E-4	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999864145337825	WITHOUT_CLASSIFICATION	1.3585466217610676E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999815867875	WITHOUT_CLASSIFICATION	1.8413212483353398E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999815867875	WITHOUT_CLASSIFICATION	1.8413212483353398E-8	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999871790652885	WITHOUT_CLASSIFICATION	1.2820934711504976E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9999339810674052	WITHOUT_CLASSIFICATION	6.601893259477444E-5	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.99997323815437	WITHOUT_CLASSIFICATION	2.6761845630072673E-5	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999695773578455	WITHOUT_CLASSIFICATION	3.0422642154403722E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999407816846869	WITHOUT_CLASSIFICATION	5.9218315313025304E-5	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999976247482208	WITHOUT_CLASSIFICATION	2.3752517792205793E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9978489774897747	WITHOUT_CLASSIFICATION	0.0021510225102253	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999962792209895	WITHOUT_CLASSIFICATION	3.720779010351629E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999710425049982	WITHOUT_CLASSIFICATION	2.8957495001708846E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999977320577	WITHOUT_CLASSIFICATION	2.2679422177854252E-9	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998967606138645	WITHOUT_CLASSIFICATION	1.032393861355264E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999962792209895	WITHOUT_CLASSIFICATION	3.720779010351629E-6	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.5367022384259272	DESIGN	0.4632977615740729	WITHOUT_CLASSIFICATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9984494234647687	WITHOUT_CLASSIFICATION	0.0015505765352312997	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9951935521351322	WITHOUT_CLASSIFICATION	0.004806447864867901	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999996732639621	WITHOUT_CLASSIFICATION	3.2673603784471716E-7	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999997490117098	WITHOUT_CLASSIFICATION	2.509882902189698E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999998571802419	WITHOUT_CLASSIFICATION	1.4281975817524206E-7	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999996821786753	WITHOUT_CLASSIFICATION	3.1782132475245315E-7	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999630361576	WITHOUT_CLASSIFICATION	3.696384247421224E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9993333965992055	WITHOUT_CLASSIFICATION	6.666034007944843E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999457499764255	WITHOUT_CLASSIFICATION	5.425002357449678E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999528681672694	WITHOUT_CLASSIFICATION	4.7131832730574065E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999984492877771	WITHOUT_CLASSIFICATION	1.550712222926927E-6	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999926157253892	WITHOUT_CLASSIFICATION	7.3842746107558445E-6	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999975591079828	WITHOUT_CLASSIFICATION	2.440892017164772E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999970021659711	WITHOUT_CLASSIFICATION	2.997834028935375E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.999998054268981	WITHOUT_CLASSIFICATION	1.9457310188913916E-6	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999981134080687	WITHOUT_CLASSIFICATION	1.8865919314373815E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9944888316726805	WITHOUT_CLASSIFICATION	0.005511168327319557	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9992455023845739	WITHOUT_CLASSIFICATION	7.544976154261909E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999996998611835	WITHOUT_CLASSIFICATION	3.001388164568703E-7	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999710460063499	WITHOUT_CLASSIFICATION	2.8953993650013506E-5	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6586390133737972	DESIGN	0.3413609866262028	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9999120620460201	WITHOUT_CLASSIFICATION	8.793795397997254E-5	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999983202631191	WITHOUT_CLASSIFICATION	1.6797368808772504E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999383377003	WITHOUT_CLASSIFICATION	6.166229973317756E-8	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999703222042079	WITHOUT_CLASSIFICATION	2.967779579217015E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999954332263392	WITHOUT_CLASSIFICATION	4.566773660895219E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999643340359	WITHOUT_CLASSIFICATION	3.5665964027816296E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999999293247833	WITHOUT_CLASSIFICATION	7.067521671410815E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9684247122799584	WITHOUT_CLASSIFICATION	0.031575287720041686	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999992606647	WITHOUT_CLASSIFICATION	7.393352344092852E-10	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999484336734324	WITHOUT_CLASSIFICATION	5.156632656749525E-5	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999925744043847	WITHOUT_CLASSIFICATION	7.4255956151979E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9988027299456742	WITHOUT_CLASSIFICATION	0.0011972700543258262	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999864653383543	WITHOUT_CLASSIFICATION	1.3534661645654494E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999998558596696	WITHOUT_CLASSIFICATION	1.441403305153882E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9996757576185017	WITHOUT_CLASSIFICATION	3.2424238149832634E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.99999992866742	WITHOUT_CLASSIFICATION	7.133258001411944E-8	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999621237824	WITHOUT_CLASSIFICATION	3.7876217538732834E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999962442219834	WITHOUT_CLASSIFICATION	3.7557780166232405E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999602812487	WITHOUT_CLASSIFICATION	3.971875131693281E-8	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999996183537854	WITHOUT_CLASSIFICATION	3.816462146323545E-7	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999897286520495	WITHOUT_CLASSIFICATION	1.027134795059144E-5	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999658429757	WITHOUT_CLASSIFICATION	3.4157024350045306E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999587759354013	WITHOUT_CLASSIFICATION	4.1224064598668066E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9989646150365064	WITHOUT_CLASSIFICATION	0.0010353849634936279	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999929313691861	WITHOUT_CLASSIFICATION	7.068630813942959E-6	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999983072110337	WITHOUT_CLASSIFICATION	1.6927889662588555E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999991056401937	WITHOUT_CLASSIFICATION	8.943598062241997E-7	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999626671898135	WITHOUT_CLASSIFICATION	3.733281018642142E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980307715536	WITHOUT_CLASSIFICATION	1.9692284464277506E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999853739168638	WITHOUT_CLASSIFICATION	1.462608313613891E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999689368514278	WITHOUT_CLASSIFICATION	3.10631485721847E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999999952427084	WITHOUT_CLASSIFICATION	4.757291595101398E-8	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998325975112	WITHOUT_CLASSIFICATION	1.6740248866473709E-7	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999999201550444	WITHOUT_CLASSIFICATION	7.984495568786006E-8	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999896345288665	WITHOUT_CLASSIFICATION	1.036547113362368E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999999090470932	WITHOUT_CLASSIFICATION	9.095290678733697E-8	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999780308773856	WITHOUT_CLASSIFICATION	2.1969122614432787E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999997821757632	WITHOUT_CLASSIFICATION	2.178242367403672E-7	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.999964560676313	WITHOUT_CLASSIFICATION	3.543932368700468E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999983017395888	WITHOUT_CLASSIFICATION	1.6982604112020074E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999080444391923	WITHOUT_CLASSIFICATION	9.19555608076702E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9831062112818351	DESIGN	0.01689378871816496	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9968136188465351	WITHOUT_CLASSIFICATION	0.003186381153464873	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999767708258444	WITHOUT_CLASSIFICATION	2.322917415573197E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980307715536	WITHOUT_CLASSIFICATION	1.9692284464277506E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999936844437515	WITHOUT_CLASSIFICATION	6.315556248565514E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999958259611	WITHOUT_CLASSIFICATION	4.1740389562505314E-9	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999634228237906	WITHOUT_CLASSIFICATION	3.65771762094383E-5	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999863604114654	WITHOUT_CLASSIFICATION	1.3639588534696395E-5	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999923471536375	WITHOUT_CLASSIFICATION	7.652846362396182E-6	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999850706816599	WITHOUT_CLASSIFICATION	1.4929318340221943E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999710425049982	WITHOUT_CLASSIFICATION	2.8957495001708846E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9843388260934439	WITHOUT_CLASSIFICATION	0.015661173906555952	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999864653383543	WITHOUT_CLASSIFICATION	1.3534661645654494E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.971338697389889	WITHOUT_CLASSIFICATION	0.028661302610110993	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999998524936865	WITHOUT_CLASSIFICATION	1.4750631336157472E-7	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999996692372155	WITHOUT_CLASSIFICATION	3.3076278455164203E-7	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994993279366	WITHOUT_CLASSIFICATION	5.006720633520933E-7	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999639216107068	WITHOUT_CLASSIFICATION	3.60783892931563E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.916954406491418	WITHOUT_CLASSIFICATION	0.08304559350858196	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9994657736830593	WITHOUT_CLASSIFICATION	5.342263169406356E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9959849222327839	WITHOUT_CLASSIFICATION	0.004015077767216004	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9994644047016258	WITHOUT_CLASSIFICATION	5.355952983743448E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997428494355	WITHOUT_CLASSIFICATION	2.571505645803403E-7	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999811206927249	WITHOUT_CLASSIFICATION	1.8879307275028413E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.999528684278963	WITHOUT_CLASSIFICATION	4.713157210369551E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998071121749932	WITHOUT_CLASSIFICATION	1.9288782500682797E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998071121749932	WITHOUT_CLASSIFICATION	1.9288782500682797E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998891307951814	WITHOUT_CLASSIFICATION	1.1086920481869691E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999989288338612	WITHOUT_CLASSIFICATION	1.0711661387456408E-6	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997327439502	WITHOUT_CLASSIFICATION	2.672560498444001E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999919377705955	WITHOUT_CLASSIFICATION	8.06222940444499E-6	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999943663458601	WITHOUT_CLASSIFICATION	5.633654139846984E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998445586661843	WITHOUT_CLASSIFICATION	1.5544133381572282E-4	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994159493508	WITHOUT_CLASSIFICATION	5.840506492065854E-7	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999771652226543	WITHOUT_CLASSIFICATION	2.2834777345630155E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999982175918024	WITHOUT_CLASSIFICATION	1.7824081975817112E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999869363493514	WITHOUT_CLASSIFICATION	1.3063650648512224E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999736629960402	WITHOUT_CLASSIFICATION	2.633700395976056E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999997734743012	WITHOUT_CLASSIFICATION	2.2652569883148972E-7	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999997235118325	WITHOUT_CLASSIFICATION	2.764881674242338E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999998663	WITHOUT_CLASSIFICATION	1.3378115441683165E-13	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9990832185060442	WITHOUT_CLASSIFICATION	9.16781493955864E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999930503913942	WITHOUT_CLASSIFICATION	6.949608605777303E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9970890116359895	WITHOUT_CLASSIFICATION	0.0029109883640105814	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999997386338	WITHOUT_CLASSIFICATION	2.6136614647057704E-10	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999260307837	WITHOUT_CLASSIFICATION	7.396921623652045E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998566259743756	WITHOUT_CLASSIFICATION	1.4337402562435787E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999969076608631	WITHOUT_CLASSIFICATION	3.0923391368348697E-6	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999724327582369	WITHOUT_CLASSIFICATION	2.7567241763080213E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.999999231607047	WITHOUT_CLASSIFICATION	7.683929529734584E-7	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9992790453768099	WITHOUT_CLASSIFICATION	7.209546231901377E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999960147394458	WITHOUT_CLASSIFICATION	3.985260554261279E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998130137935	WITHOUT_CLASSIFICATION	1.8698620649508374E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996430104685	WITHOUT_CLASSIFICATION	3.5698953149208794E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999949685633744	WITHOUT_CLASSIFICATION	5.031436625493944E-6	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996605128566589	WITHOUT_CLASSIFICATION	3.3948714334099144E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999651206023505	WITHOUT_CLASSIFICATION	3.4879397649379146E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9420875138101353	WITHOUT_CLASSIFICATION	0.057912486189864616	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.5139436230390788	DESIGN	0.48605637696092124	WITHOUT_CLASSIFICATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999877892814216	WITHOUT_CLASSIFICATION	1.2210718578242645E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999424405339368	WITHOUT_CLASSIFICATION	5.755946606329149E-5	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998976264066048	WITHOUT_CLASSIFICATION	1.0237359339517134E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.99999983734741	WITHOUT_CLASSIFICATION	1.6265258989709237E-7	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999675500244136	WITHOUT_CLASSIFICATION	3.2449975586381124E-5	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999885534974768	WITHOUT_CLASSIFICATION	1.1446502523170525E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999938174162684	WITHOUT_CLASSIFICATION	6.182583731611973E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998693226314	WITHOUT_CLASSIFICATION	1.306773686408336E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999660999723239	WITHOUT_CLASSIFICATION	3.390002767610625E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999987410161	WITHOUT_CLASSIFICATION	1.2589839632352063E-9	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999414728071006	WITHOUT_CLASSIFICATION	5.852719289957684E-5	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999998094384518	WITHOUT_CLASSIFICATION	1.90561548161894E-7	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999997648122794	WITHOUT_CLASSIFICATION	2.3518772066252643E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999921740568964	WITHOUT_CLASSIFICATION	7.825943103622877E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9895683709945937	WITHOUT_CLASSIFICATION	0.010431629005406349	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965234016557	WITHOUT_CLASSIFICATION	3.476598344244989E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999975909881	WITHOUT_CLASSIFICATION	2.409011786582165E-9	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999958827521	WITHOUT_CLASSIFICATION	4.117247944519468E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884259495323	WITHOUT_CLASSIFICATION	1.1574050467699483E-4	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999990803464804	WITHOUT_CLASSIFICATION	9.196535196895803E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999989585013163	WITHOUT_CLASSIFICATION	1.0414986837082664E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999998097377673	WITHOUT_CLASSIFICATION	1.9026223270577323E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.999998906277866	WITHOUT_CLASSIFICATION	1.0937221338920681E-6	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9994180657689664	WITHOUT_CLASSIFICATION	5.819342310334966E-4	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999998674212454	WITHOUT_CLASSIFICATION	1.3257875466069935E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.99996216382978	WITHOUT_CLASSIFICATION	3.783617021992967E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999990712976876	WITHOUT_CLASSIFICATION	9.287023124118461E-7	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999979261598522	WITHOUT_CLASSIFICATION	2.073840147771881E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999664756114012	WITHOUT_CLASSIFICATION	3.352438859879014E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996966840069	WITHOUT_CLASSIFICATION	3.033159931604468E-7	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9960806745489681	WITHOUT_CLASSIFICATION	0.003919325451032016	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999925573688785	WITHOUT_CLASSIFICATION	7.442631121489464E-6	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999362917278263	WITHOUT_CLASSIFICATION	6.370827217370832E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999715458175364	WITHOUT_CLASSIFICATION	2.8454182463565045E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999956831411	WITHOUT_CLASSIFICATION	4.316858897624049E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998642397546	WITHOUT_CLASSIFICATION	1.3576024540926497E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999995564466	WITHOUT_CLASSIFICATION	4.4355339938007085E-9	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999932015895	WITHOUT_CLASSIFICATION	6.798410455177013E-9	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999999995564466	WITHOUT_CLASSIFICATION	4.4355339938007085E-9	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999796270774958	WITHOUT_CLASSIFICATION	2.0372922504199092E-5	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999943817560684	WITHOUT_CLASSIFICATION	5.618243931588776E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999965422211862	WITHOUT_CLASSIFICATION	3.4577788138729486E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999892083273	WITHOUT_CLASSIFICATION	1.079167261182422E-8	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999996556969512	WITHOUT_CLASSIFICATION	3.443030487991023E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999993109482571	WITHOUT_CLASSIFICATION	6.890517428458444E-7	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999911886170106	WITHOUT_CLASSIFICATION	8.811382989328156E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9995710090885523	WITHOUT_CLASSIFICATION	4.289909114476614E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999577382842064	WITHOUT_CLASSIFICATION	4.226171579354636E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999999274991903	WITHOUT_CLASSIFICATION	7.25008096135491E-8	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999786362915	WITHOUT_CLASSIFICATION	2.1363708372454096E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999903799661463	WITHOUT_CLASSIFICATION	9.620033853879394E-6	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999653037118	WITHOUT_CLASSIFICATION	3.469628811002176E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999961237362498	DESIGN	3.876263750143891E-6	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999998102231918	WITHOUT_CLASSIFICATION	1.8977680802348403E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999994098577	WITHOUT_CLASSIFICATION	5.901423382142745E-10	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999985400866659	WITHOUT_CLASSIFICATION	1.459913334139727E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999976617330365	WITHOUT_CLASSIFICATION	2.338266963579916E-6	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999678166628	WITHOUT_CLASSIFICATION	3.2183337261100926E-8	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9997303394661883	WITHOUT_CLASSIFICATION	2.6966053381168053E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999973760315806	WITHOUT_CLASSIFICATION	2.6239684194461857E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999576177427003	WITHOUT_CLASSIFICATION	4.238225729966091E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9659035682565414	WITHOUT_CLASSIFICATION	0.03409643174345865	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999366318784471	WITHOUT_CLASSIFICATION	6.336812155291329E-5	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999996338604749	WITHOUT_CLASSIFICATION	3.661395251359532E-7	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9992641614591726	WITHOUT_CLASSIFICATION	7.358385408273803E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9993589231497682	WITHOUT_CLASSIFICATION	6.410768502318455E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999940420162556	WITHOUT_CLASSIFICATION	5.957983744403253E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999994381901489	WITHOUT_CLASSIFICATION	5.61809851162356E-7	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999971657584705	WITHOUT_CLASSIFICATION	2.8342415294002066E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999948123437287	WITHOUT_CLASSIFICATION	5.187656271425255E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999911952018963	WITHOUT_CLASSIFICATION	8.804798103720955E-6	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9996532521292069	WITHOUT_CLASSIFICATION	3.4674787079322074E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999973840775322	WITHOUT_CLASSIFICATION	2.615922467814926E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999936805381301	WITHOUT_CLASSIFICATION	6.319461869948343E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999879241915943	WITHOUT_CLASSIFICATION	1.2075808405589222E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9989924629907858	WITHOUT_CLASSIFICATION	0.0010075370092141392	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998040368235	WITHOUT_CLASSIFICATION	1.9596317633717914E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.999778633256414	WITHOUT_CLASSIFICATION	2.213667435859946E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999993989474059	WITHOUT_CLASSIFICATION	6.010525941319991E-7	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.999998093144772	WITHOUT_CLASSIFICATION	1.906855228026582E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999994573318182	WITHOUT_CLASSIFICATION	5.426681818881363E-7	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.997921387504155	WITHOUT_CLASSIFICATION	0.002078612495844876	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9992641614591726	WITHOUT_CLASSIFICATION	7.358385408273803E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9998055877001183	WITHOUT_CLASSIFICATION	1.944122998816979E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999994536030989	WITHOUT_CLASSIFICATION	5.463969010292824E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9991524620889444	WITHOUT_CLASSIFICATION	8.475379110557057E-4	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999997087763975	WITHOUT_CLASSIFICATION	2.9122360251130204E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999996524737205	WITHOUT_CLASSIFICATION	3.475262795044298E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999935801050555	WITHOUT_CLASSIFICATION	6.419894944643059E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9994995083731999	WITHOUT_CLASSIFICATION	5.004916267999867E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9971613026184383	DESIGN	0.0028386973815617608	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999954343500163	WITHOUT_CLASSIFICATION	4.565649983637671E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9992074655480422	WITHOUT_CLASSIFICATION	7.925344519577639E-4	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999893956804403	WITHOUT_CLASSIFICATION	1.0604319559641646E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999579712352	WITHOUT_CLASSIFICATION	4.202876488979573E-8	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999996216800717	WITHOUT_CLASSIFICATION	3.783199282021751E-7	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998607718856408	WITHOUT_CLASSIFICATION	1.39228114359119E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999999517358975	WITHOUT_CLASSIFICATION	4.826410250728598E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999995080030827	WITHOUT_CLASSIFICATION	4.919969172972221E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999820738952	WITHOUT_CLASSIFICATION	1.792610484671994E-8	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999708155606	WITHOUT_CLASSIFICATION	2.9184439511285984E-8	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999970256801672	WITHOUT_CLASSIFICATION	2.974319832805643E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9998055877001183	WITHOUT_CLASSIFICATION	1.944122998816979E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999999746367257	WITHOUT_CLASSIFICATION	2.5363274299539137E-7	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999946141984284	WITHOUT_CLASSIFICATION	5.385801571637005E-6	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999989280420524	WITHOUT_CLASSIFICATION	1.0719579476038581E-6	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9848467360808428	WITHOUT_CLASSIFICATION	0.015153263919157159	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9997783499875462	WITHOUT_CLASSIFICATION	2.21650012453813E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979262170967625	WITHOUT_CLASSIFICATION	0.0020737829032373366	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979262170967625	WITHOUT_CLASSIFICATION	0.0020737829032373366	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999943848986677	WITHOUT_CLASSIFICATION	5.6151013323541944E-6	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979262170967625	WITHOUT_CLASSIFICATION	0.0020737829032373366	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979262170967625	WITHOUT_CLASSIFICATION	0.0020737829032373366	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.8748123700763051	DESIGN	0.1251876299236949	WITHOUT_CLASSIFICATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999997986398357	WITHOUT_CLASSIFICATION	2.0136016428924257E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998605787979097	WITHOUT_CLASSIFICATION	1.3942120209030776E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999764922802413	WITHOUT_CLASSIFICATION	2.3507719758686835E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9848421414419872	WITHOUT_CLASSIFICATION	0.015157858558012674	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9990644882924166	WITHOUT_CLASSIFICATION	9.355117075834538E-4	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999853233899277	WITHOUT_CLASSIFICATION	1.46766100722087E-5	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999999968926094	WITHOUT_CLASSIFICATION	3.107390597456337E-8	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999002610701362	WITHOUT_CLASSIFICATION	9.973892986373996E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998765133609022	WITHOUT_CLASSIFICATION	1.2348663909774664E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9989462913091675	WITHOUT_CLASSIFICATION	0.0010537086908325346	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997608774130552	WITHOUT_CLASSIFICATION	2.39122586944682E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999560954330343	WITHOUT_CLASSIFICATION	4.390456696566814E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999932453038906	WITHOUT_CLASSIFICATION	6.754696109381911E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999995269270278	WITHOUT_CLASSIFICATION	4.730729721925423E-6	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998395799842387	WITHOUT_CLASSIFICATION	1.6042001576130064E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999992128756	WITHOUT_CLASSIFICATION	7.871244013539984E-9	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.999999996523809	WITHOUT_CLASSIFICATION	3.4761910531830668E-9	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9135824793143477	WITHOUT_CLASSIFICATION	0.08641752068565228	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999629934555979	WITHOUT_CLASSIFICATION	3.700654440212035E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999588074496684	WITHOUT_CLASSIFICATION	4.11925503315416E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999989619274586	WITHOUT_CLASSIFICATION	1.0380725413779002E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.999999992128756	WITHOUT_CLASSIFICATION	7.871244013539984E-9	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9993589231497682	WITHOUT_CLASSIFICATION	6.410768502318455E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999961803010584	WITHOUT_CLASSIFICATION	3.819698941589803E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999160710992	WITHOUT_CLASSIFICATION	8.392890084337894E-8	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999991568274486	WITHOUT_CLASSIFICATION	8.431725514519254E-7	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999996857098803	WITHOUT_CLASSIFICATION	3.142901196372421E-7	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999959126958206	WITHOUT_CLASSIFICATION	4.087304179431548E-6	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.999977209105134	WITHOUT_CLASSIFICATION	2.2790894866079594E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999912618780317	WITHOUT_CLASSIFICATION	8.738121968460392E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999994689891887	WITHOUT_CLASSIFICATION	5.310108112570016E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999278437027246	WITHOUT_CLASSIFICATION	7.21562972754023E-4	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9995398542181815	WITHOUT_CLASSIFICATION	4.6014578181858456E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998671814487	WITHOUT_CLASSIFICATION	1.328185513059398E-7	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.999983301902947	WITHOUT_CLASSIFICATION	1.6698097052942497E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999996586304	WITHOUT_CLASSIFICATION	3.413696225330764E-10	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999923050792954	WITHOUT_CLASSIFICATION	7.694920704623334E-6	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999989682961797	WITHOUT_CLASSIFICATION	1.0317038202694087E-6	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999990709025671	WITHOUT_CLASSIFICATION	9.290974329005788E-6	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999995199601438	WITHOUT_CLASSIFICATION	4.800398562789279E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999911807162961	WITHOUT_CLASSIFICATION	8.819283703973472E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999990279131197	WITHOUT_CLASSIFICATION	9.720868803654107E-7	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9959316595116173	WITHOUT_CLASSIFICATION	0.004068340488382606	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999870677021333	WITHOUT_CLASSIFICATION	1.293229786658327E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999983524919552	WITHOUT_CLASSIFICATION	1.6475080448211915E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999994689891887	WITHOUT_CLASSIFICATION	5.310108112570016E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.999997264650457	WITHOUT_CLASSIFICATION	2.735349542942208E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999797273843047	WITHOUT_CLASSIFICATION	2.0272615695317868E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999873106558741	WITHOUT_CLASSIFICATION	1.2689344125976414E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9921817680956018	WITHOUT_CLASSIFICATION	0.007818231904398157	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996031157928	WITHOUT_CLASSIFICATION	3.9688420705933334E-7	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999910167898152	WITHOUT_CLASSIFICATION	8.983210184848081E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.999986989167956	WITHOUT_CLASSIFICATION	1.3010832043979015E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999916075756176	WITHOUT_CLASSIFICATION	8.392424382482207E-6	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999949510963216	WITHOUT_CLASSIFICATION	5.04890367831653E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999364084690611	WITHOUT_CLASSIFICATION	6.35915309389832E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994693887558	WITHOUT_CLASSIFICATION	5.306112442217681E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999999944156684	WITHOUT_CLASSIFICATION	5.584331599051175E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9491053294276128	WITHOUT_CLASSIFICATION	0.05089467057238722	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999956767612	WITHOUT_CLASSIFICATION	4.3232387524621E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999977888567408	WITHOUT_CLASSIFICATION	2.211143259198142E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999967136453027	WITHOUT_CLASSIFICATION	3.2863546972963466E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999958612275845	WITHOUT_CLASSIFICATION	4.138772415485464E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994693887558	WITHOUT_CLASSIFICATION	5.306112442217681E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999909141223565	WITHOUT_CLASSIFICATION	9.085877643506357E-6	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.8248523300674175	WITHOUT_CLASSIFICATION	0.17514766993258238	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999992396502938	WITHOUT_CLASSIFICATION	7.603497061637517E-7	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998891466508945	WITHOUT_CLASSIFICATION	1.1085334910560196E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999683554085812	WITHOUT_CLASSIFICATION	3.164459141882155E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999986769425125	WITHOUT_CLASSIFICATION	1.3230574874838302E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999977888567408	WITHOUT_CLASSIFICATION	2.211143259198142E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999859527807	WITHOUT_CLASSIFICATION	1.4047219232736297E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999168183628	WITHOUT_CLASSIFICATION	8.318163734566036E-8	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998281665192	WITHOUT_CLASSIFICATION	1.7183348079179967E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999910151760137	WITHOUT_CLASSIFICATION	8.984823986280768E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985230269786	WITHOUT_CLASSIFICATION	1.476973021392138E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997561752803	WITHOUT_CLASSIFICATION	2.4382471971148795E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999622734054	WITHOUT_CLASSIFICATION	3.772659459560773E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999622734054	WITHOUT_CLASSIFICATION	3.772659459560773E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9981153652766956	WITHOUT_CLASSIFICATION	0.0018846347233044032	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.999999232050111	WITHOUT_CLASSIFICATION	7.67949889017997E-7	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999929703379222	WITHOUT_CLASSIFICATION	7.0296620777587215E-6	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999985003694911	WITHOUT_CLASSIFICATION	1.4996305088985414E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999911261787672	WITHOUT_CLASSIFICATION	8.873821232803701E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891904906678	WITHOUT_CLASSIFICATION	1.0809509332183201E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990725054146	WITHOUT_CLASSIFICATION	9.274945853814338E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986073872369	WITHOUT_CLASSIFICATION	1.3926127630842728E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997981463259678	WITHOUT_CLASSIFICATION	2.0185367403221952E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999718026681	WITHOUT_CLASSIFICATION	2.8197331896423446E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891904906678	WITHOUT_CLASSIFICATION	1.0809509332183201E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990725054146	WITHOUT_CLASSIFICATION	9.274945853814338E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986073872369	WITHOUT_CLASSIFICATION	1.3926127630842728E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999965995735801	WITHOUT_CLASSIFICATION	3.400426420003836E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9982704115828449	WITHOUT_CLASSIFICATION	0.0017295884171551468	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999852642483731	WITHOUT_CLASSIFICATION	1.4735751626897204E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9994282559990808	WITHOUT_CLASSIFICATION	5.717440009191327E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999979391108516	WITHOUT_CLASSIFICATION	2.0608891484537543E-6	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999998333707226	WITHOUT_CLASSIFICATION	1.6662927730471616E-7	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999995414612379	WITHOUT_CLASSIFICATION	4.5853876201804295E-7	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9876161249040141	WITHOUT_CLASSIFICATION	0.012383875095985973	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9996994198936711	WITHOUT_CLASSIFICATION	3.0058010632901075E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999318543361637	WITHOUT_CLASSIFICATION	6.814566383631242E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999991679513554	WITHOUT_CLASSIFICATION	8.320486445895204E-6	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.934040001925904	WITHOUT_CLASSIFICATION	0.06595999807409607	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9994277931516772	WITHOUT_CLASSIFICATION	5.722068483228456E-4	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999410040476963	WITHOUT_CLASSIFICATION	5.8995952303726355E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999289367131718	WITHOUT_CLASSIFICATION	7.106328682821299E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999906324720781	WITHOUT_CLASSIFICATION	9.36752792187109E-6	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996554778271275	WITHOUT_CLASSIFICATION	3.445221728725103E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999648154236417	WITHOUT_CLASSIFICATION	3.5184576358269495E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999793430980894	WITHOUT_CLASSIFICATION	2.0656901910606675E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999812957872	WITHOUT_CLASSIFICATION	1.8704212952194878E-8	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999983113529298	WITHOUT_CLASSIFICATION	1.6886470701268386E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9070185038729439	WITHOUT_CLASSIFICATION	0.09298149612705614	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999999954773162	WITHOUT_CLASSIFICATION	4.522683811782992E-8	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999937910054514	WITHOUT_CLASSIFICATION	6.208994548598716E-6	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999990537053824	WITHOUT_CLASSIFICATION	9.462946174861897E-7	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998949722223279	WITHOUT_CLASSIFICATION	1.0502777767210531E-4	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990648478927	WITHOUT_CLASSIFICATION	9.351521074239252E-7	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977324331769	WITHOUT_CLASSIFICATION	2.267566823114072E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999116957703417	WITHOUT_CLASSIFICATION	8.830422965825852E-5	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979883561789	WITHOUT_CLASSIFICATION	2.011643821002628E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999617710529	WITHOUT_CLASSIFICATION	3.822894716922063E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993012428853	WITHOUT_CLASSIFICATION	6.987571147772828E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999993012428853	WITHOUT_CLASSIFICATION	6.987571147772828E-7	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999953371921902	WITHOUT_CLASSIFICATION	4.662807809712857E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999999740462	WITHOUT_CLASSIFICATION	2.5953782134694246E-11	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999817773125891	WITHOUT_CLASSIFICATION	1.82226874109808E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519895618779	WITHOUT_CLASSIFICATION	1.4801043812198275E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998508208164814	WITHOUT_CLASSIFICATION	1.491791835185719E-4	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999600825223669	WITHOUT_CLASSIFICATION	3.991747763309677E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999318449466883	WITHOUT_CLASSIFICATION	6.815505331170946E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999997341642175	WITHOUT_CLASSIFICATION	2.658357825715836E-7	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999799215268482	WITHOUT_CLASSIFICATION	2.0078473151819702E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999673332219	WITHOUT_CLASSIFICATION	3.2666778074973526E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996474896723	WITHOUT_CLASSIFICATION	3.525103277644079E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999640302821	WITHOUT_CLASSIFICATION	3.5969717933450494E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998121494135	WITHOUT_CLASSIFICATION	1.8785058657661385E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998613369938	WITHOUT_CLASSIFICATION	1.3866300619292194E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999237346262	WITHOUT_CLASSIFICATION	7.626537382252415E-8	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999348061911	WITHOUT_CLASSIFICATION	6.519380894890372E-8	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998654459551	WITHOUT_CLASSIFICATION	1.345540449539244E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999987645193	WITHOUT_CLASSIFICATION	1.2354806982430712E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997824916309	WITHOUT_CLASSIFICATION	2.1750836915633007E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993964843545	WITHOUT_CLASSIFICATION	6.03515645359373E-7	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999790869707234	WITHOUT_CLASSIFICATION	2.091302927661591E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999760709666725	WITHOUT_CLASSIFICATION	2.3929033327486903E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9786959889971655	WITHOUT_CLASSIFICATION	0.021304011002834456	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999677794263562	WITHOUT_CLASSIFICATION	3.222057364375106E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9999445399823748	WITHOUT_CLASSIFICATION	5.546001762522617E-5	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.990536040071257	WITHOUT_CLASSIFICATION	0.009463959928743047	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999999983973519	WITHOUT_CLASSIFICATION	1.602648096616883E-8	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999722638405528	WITHOUT_CLASSIFICATION	2.773615944707424E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9786959889971655	WITHOUT_CLASSIFICATION	0.021304011002834456	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9786959889971655	WITHOUT_CLASSIFICATION	0.021304011002834456	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9983489877900298	WITHOUT_CLASSIFICATION	0.0016510122099701481	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999999967565569	WITHOUT_CLASSIFICATION	3.24344310499032E-8	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999970585757954	WITHOUT_CLASSIFICATION	2.94142420458713E-6	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999984268872364	WITHOUT_CLASSIFICATION	1.5731127636028868E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998177816625	WITHOUT_CLASSIFICATION	1.8221833742325228E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999812957872	WITHOUT_CLASSIFICATION	1.8704212952194878E-8	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999988643549755	WITHOUT_CLASSIFICATION	1.1356450244742783E-6	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999998502154347	WITHOUT_CLASSIFICATION	1.4978456530091376E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999737788588139	WITHOUT_CLASSIFICATION	2.622114118609211E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999831287575462	WITHOUT_CLASSIFICATION	1.6871242453688624E-5	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999996105395552	WITHOUT_CLASSIFICATION	3.894604448081627E-7	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859298010618	WITHOUT_CLASSIFICATION	1.4070198938193515E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.99800006137169	WITHOUT_CLASSIFICATION	0.00199993862831005	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.99800006137169	WITHOUT_CLASSIFICATION	0.00199993862831005	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999338649504604	WITHOUT_CLASSIFICATION	6.613504953958788E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.999338649504604	WITHOUT_CLASSIFICATION	6.613504953958788E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994348304586	WITHOUT_CLASSIFICATION	5.651695413961398E-6	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978678600839	WITHOUT_CLASSIFICATION	2.1321399160889646E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999994123241603	WITHOUT_CLASSIFICATION	5.876758397042959E-6	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999152486478751	WITHOUT_CLASSIFICATION	8.475135212492509E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997026183780693	WITHOUT_CLASSIFICATION	2.9738162193064424E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.7988313284890577	DESIGN	0.20116867151094237	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998847592512	WITHOUT_CLASSIFICATION	1.1524074875151903E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985248838257	WITHOUT_CLASSIFICATION	1.4751161743107917E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9720927463312758	WITHOUT_CLASSIFICATION	0.027907253668724135	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998785178655052	WITHOUT_CLASSIFICATION	1.2148213449478567E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999505313855	WITHOUT_CLASSIFICATION	4.946861466247631E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999919545269053	WITHOUT_CLASSIFICATION	8.045473094703561E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9997858113100707	WITHOUT_CLASSIFICATION	2.1418868992928146E-4	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998417307805	WITHOUT_CLASSIFICATION	1.5826921958300036E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999920937251262	WITHOUT_CLASSIFICATION	7.906274873856212E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999854846118053	WITHOUT_CLASSIFICATION	1.4515388194820316E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999854846118053	WITHOUT_CLASSIFICATION	1.4515388194820316E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996834352894	WITHOUT_CLASSIFICATION	3.1656471052867033E-7	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999988264348547	WITHOUT_CLASSIFICATION	1.173565145292538E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999997862937872	WITHOUT_CLASSIFICATION	2.1370621280242883E-6	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999136916130764	WITHOUT_CLASSIFICATION	8.630838692361187E-5	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276819420265	WITHOUT_CLASSIFICATION	7.231805797348046E-5	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526423325263	WITHOUT_CLASSIFICATION	4.735766747353907E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999999954486037	WITHOUT_CLASSIFICATION	4.551396315135075E-8	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998835232750259	WITHOUT_CLASSIFICATION	1.1647672497398524E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999882581151832	WITHOUT_CLASSIFICATION	1.1741884816677123E-5	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9996509505476106	WITHOUT_CLASSIFICATION	3.4904945238951835E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9993032053011032	WITHOUT_CLASSIFICATION	6.967946988968568E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999891310829059	WITHOUT_CLASSIFICATION	1.0868917094070012E-5	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999336928926	WITHOUT_CLASSIFICATION	6.630710736622766E-8	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999477293131	WITHOUT_CLASSIFICATION	5.227068688657625E-8	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999965963214393	WITHOUT_CLASSIFICATION	3.4036785607427093E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9997454382242595	WITHOUT_CLASSIFICATION	2.5456177574049077E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992869947721	WITHOUT_CLASSIFICATION	7.1300522788846E-7	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999840169431605	WITHOUT_CLASSIFICATION	1.5983056839443755E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9999806606468936	WITHOUT_CLASSIFICATION	1.9339353106357744E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999972295276	WITHOUT_CLASSIFICATION	2.770472373550548E-9	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999838351881	WITHOUT_CLASSIFICATION	1.6164811895187742E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999999977454	WITHOUT_CLASSIFICATION	2.2545874071161358E-11	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999992581204643	WITHOUT_CLASSIFICATION	7.418795356384448E-7	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999530651752	WITHOUT_CLASSIFICATION	4.693482479155567E-8	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999996224445891	WITHOUT_CLASSIFICATION	3.7755541089411916E-7	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999714868357744	WITHOUT_CLASSIFICATION	2.851316422548962E-5	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999117071003628	WITHOUT_CLASSIFICATION	8.82928996371996E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9998664595176887	WITHOUT_CLASSIFICATION	1.3354048231124959E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999988916917	WITHOUT_CLASSIFICATION	1.108308368671093E-9	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999764415490516	WITHOUT_CLASSIFICATION	2.3558450948418357E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999992805875	WITHOUT_CLASSIFICATION	7.194125779721522E-10	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999999043604113	WITHOUT_CLASSIFICATION	9.563958858248799E-8	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9982219214624931	WITHOUT_CLASSIFICATION	0.001778078537506901	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9998069238376225	WITHOUT_CLASSIFICATION	1.9307616237751373E-4	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999992918348249	WITHOUT_CLASSIFICATION	7.081651750479551E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9993334173827528	WITHOUT_CLASSIFICATION	6.665826172471684E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999263827356	WITHOUT_CLASSIFICATION	7.3617264400593E-8	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9994179516063042	WITHOUT_CLASSIFICATION	5.820483936957934E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.999999991752574	WITHOUT_CLASSIFICATION	8.247425933928028E-9	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999881038333273	WITHOUT_CLASSIFICATION	1.1896166672712393E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999972928532392	WITHOUT_CLASSIFICATION	2.707146760830634E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999995339696085	WITHOUT_CLASSIFICATION	4.6603039152422624E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.529760336673479	DESIGN	0.4702396633265211	WITHOUT_CLASSIFICATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999862767937148	WITHOUT_CLASSIFICATION	1.3723206285130439E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999881751556144	WITHOUT_CLASSIFICATION	1.18248443855466E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998936297243352	WITHOUT_CLASSIFICATION	1.0637027566479614E-4	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999940407867253	WITHOUT_CLASSIFICATION	5.9592132746377575E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999924140348359	WITHOUT_CLASSIFICATION	7.585965164034838E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999893625570425	WITHOUT_CLASSIFICATION	1.0637442957531796E-5	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999996081608057	WITHOUT_CLASSIFICATION	3.91839194304346E-6	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.99997034187015	WITHOUT_CLASSIFICATION	2.9658129850035085E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999969558481114	WITHOUT_CLASSIFICATION	3.0441518885635407E-6	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998683861131041	WITHOUT_CLASSIFICATION	1.3161388689582202E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999998618860265	WITHOUT_CLASSIFICATION	1.3811397353107525E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999998367744645	WITHOUT_CLASSIFICATION	1.6322553548480618E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999979294307998	WITHOUT_CLASSIFICATION	2.07056920012017E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9959554131525452	WITHOUT_CLASSIFICATION	0.004044586847454737	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999993486096099	WITHOUT_CLASSIFICATION	6.513903901336167E-7	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999470673884056	WITHOUT_CLASSIFICATION	5.2932611594436696E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9942975303700791	WITHOUT_CLASSIFICATION	0.00570246962992096	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.999978740793444	WITHOUT_CLASSIFICATION	2.1259206556068254E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999998808460007	WITHOUT_CLASSIFICATION	1.1915399930514311E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999960933805	WITHOUT_CLASSIFICATION	3.906619464961561E-9	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9996024085465157	WITHOUT_CLASSIFICATION	3.97591453484218E-4	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999999739669609	WITHOUT_CLASSIFICATION	2.603303911168972E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9921738261913852	WITHOUT_CLASSIFICATION	0.007826173808614804	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.999997079827656	WITHOUT_CLASSIFICATION	2.920172344127167E-6	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999999890052101	WITHOUT_CLASSIFICATION	1.0994789906736281E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999969378623738	WITHOUT_CLASSIFICATION	3.0621376261916735E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999969378623738	WITHOUT_CLASSIFICATION	3.0621376261916735E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999859585093	WITHOUT_CLASSIFICATION	1.4041490718798135E-8	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9979524853291687	WITHOUT_CLASSIFICATION	0.002047514670831225	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999732926243947	WITHOUT_CLASSIFICATION	2.670737560536283E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9983834080415976	WITHOUT_CLASSIFICATION	0.0016165919584024393	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999997482202525	WITHOUT_CLASSIFICATION	2.5177974743619103E-7	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.999761424101145	WITHOUT_CLASSIFICATION	2.3857589885504675E-4	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.999916152755515	WITHOUT_CLASSIFICATION	8.384724448493681E-5	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.999999774511498	WITHOUT_CLASSIFICATION	2.2548850194458068E-7	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998010361154309	WITHOUT_CLASSIFICATION	1.9896388456905087E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999995040041748	WITHOUT_CLASSIFICATION	4.959958252649635E-7	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999553426968	WITHOUT_CLASSIFICATION	4.4657303258374756E-8	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996867802825	WITHOUT_CLASSIFICATION	3.1321971754526616E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.999999193352177	WITHOUT_CLASSIFICATION	8.066478229236095E-7	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.999999505174957	WITHOUT_CLASSIFICATION	4.948250430367567E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999662177345529	WITHOUT_CLASSIFICATION	3.378226544721294E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9490864113508026	WITHOUT_CLASSIFICATION	0.05091358864919742	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999813791093114	WITHOUT_CLASSIFICATION	1.862089068870294E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998192777475473	WITHOUT_CLASSIFICATION	1.8072225245272436E-4	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9988658751183118	WITHOUT_CLASSIFICATION	0.0011341248816881236	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999868989923205	WITHOUT_CLASSIFICATION	1.3101007679465E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999692928427103	WITHOUT_CLASSIFICATION	3.070715728982728E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999801834681734	WITHOUT_CLASSIFICATION	1.9816531826506788E-5	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9984342203789823	WITHOUT_CLASSIFICATION	0.0015657796210176544	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9971313939570674	WITHOUT_CLASSIFICATION	0.002868606042932549	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999999679144	WITHOUT_CLASSIFICATION	3.208560323261716E-10	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9996084917152087	WITHOUT_CLASSIFICATION	3.9150828479129725E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999997391430616	WITHOUT_CLASSIFICATION	2.60856938322673E-7	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999980069926517	WITHOUT_CLASSIFICATION	1.993007348355937E-6	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999631527863072	WITHOUT_CLASSIFICATION	3.684721369286406E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999428288007421	WITHOUT_CLASSIFICATION	5.717119925771627E-5	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999984735215773	WITHOUT_CLASSIFICATION	1.5264784226847825E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.999972287438933	WITHOUT_CLASSIFICATION	2.7712561067129583E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9998712157568146	WITHOUT_CLASSIFICATION	1.2878424318546534E-4	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.999965468622789	WITHOUT_CLASSIFICATION	3.453137721093244E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996997215134085	WITHOUT_CLASSIFICATION	3.002784865915273E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996997215134085	WITHOUT_CLASSIFICATION	3.002784865915273E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991984997622	WITHOUT_CLASSIFICATION	8.015002379029547E-7	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9990605747720492	WITHOUT_CLASSIFICATION	9.394252279506276E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999675411600447	WITHOUT_CLASSIFICATION	3.245883995532083E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999850150906902	WITHOUT_CLASSIFICATION	1.4984909309848295E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.99999995972475	WITHOUT_CLASSIFICATION	4.027525003219789E-8	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999419484747463	WITHOUT_CLASSIFICATION	5.80515252537378E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999971517309902	WITHOUT_CLASSIFICATION	2.8482690097288897E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999980414188546	WITHOUT_CLASSIFICATION	1.958581145392435E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9738582947383194	WITHOUT_CLASSIFICATION	0.02614170526168061	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997356264417	WITHOUT_CLASSIFICATION	2.6437355825153413E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999997555329128	WITHOUT_CLASSIFICATION	2.4446708724978376E-7	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999637536808795	WITHOUT_CLASSIFICATION	3.624631912038845E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999919100255394	WITHOUT_CLASSIFICATION	8.089974460604032E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999436532600822	WITHOUT_CLASSIFICATION	5.63467399179078E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999907661691	WITHOUT_CLASSIFICATION	9.233830872509666E-9	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999217393974067	WITHOUT_CLASSIFICATION	7.826060259325006E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999217393974067	WITHOUT_CLASSIFICATION	7.826060259325006E-5	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999963680845319	WITHOUT_CLASSIFICATION	3.631915468231417E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999991970112088	WITHOUT_CLASSIFICATION	8.029887913413795E-7	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9955156248828108	WITHOUT_CLASSIFICATION	0.004484375117189196	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999950078390051	WITHOUT_CLASSIFICATION	4.992160994915502E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997296722633807	WITHOUT_CLASSIFICATION	2.703277366192614E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999988805610196	WITHOUT_CLASSIFICATION	1.1194389803586174E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999807964500811	WITHOUT_CLASSIFICATION	1.9203549918878886E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999807964500811	WITHOUT_CLASSIFICATION	1.9203549918878886E-5	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999989682775753	WITHOUT_CLASSIFICATION	1.031722424666175E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.999832368059304	WITHOUT_CLASSIFICATION	1.676319406959196E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999997845607376	WITHOUT_CLASSIFICATION	2.1543926254172066E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999991285054906	WITHOUT_CLASSIFICATION	8.714945093586388E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9555052106384215	WITHOUT_CLASSIFICATION	0.044494789361578524	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999807067624485	WITHOUT_CLASSIFICATION	1.9293237551408526E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999332144334995	WITHOUT_CLASSIFICATION	6.67855665005902E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999997714946417	WITHOUT_CLASSIFICATION	2.2850535834133114E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999993116102205	WITHOUT_CLASSIFICATION	6.883897794721057E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9998346040523356	WITHOUT_CLASSIFICATION	1.653959476645053E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9991963844977073	WITHOUT_CLASSIFICATION	8.036155022927838E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999969694413332	WITHOUT_CLASSIFICATION	3.030558666712065E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9995242834435917	WITHOUT_CLASSIFICATION	4.7571655640823676E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999737923641578	WITHOUT_CLASSIFICATION	2.6207635842156462E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996605128566589	WITHOUT_CLASSIFICATION	3.3948714334099144E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999434665795642	WITHOUT_CLASSIFICATION	5.653342043589354E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999999988683511	WITHOUT_CLASSIFICATION	1.1316488907446499E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.999878935336193	WITHOUT_CLASSIFICATION	1.2106466380702896E-4	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999431180166511	WITHOUT_CLASSIFICATION	5.688198334890601E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999990925814597	WITHOUT_CLASSIFICATION	9.074185402346482E-7	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.999999974400856	WITHOUT_CLASSIFICATION	2.559914394674356E-8	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999888191048542	WITHOUT_CLASSIFICATION	1.118089514581309E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999840241319965	WITHOUT_CLASSIFICATION	1.5975868003532568E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.999977631695705	WITHOUT_CLASSIFICATION	2.2368304295058135E-5	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999942583806352	WITHOUT_CLASSIFICATION	5.741619364876529E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999980778774863	WITHOUT_CLASSIFICATION	1.9221225136262526E-6	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999883306274981	WITHOUT_CLASSIFICATION	1.1669372501983862E-5	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9997542771296788	WITHOUT_CLASSIFICATION	2.45722870321257E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999860653544924	WITHOUT_CLASSIFICATION	1.3934645507637711E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999815867875	WITHOUT_CLASSIFICATION	1.8413212483353398E-8	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9974709179468542	WITHOUT_CLASSIFICATION	0.0025290820531458057	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.999897347046292	WITHOUT_CLASSIFICATION	1.0265295370797908E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999562721877286	WITHOUT_CLASSIFICATION	4.372781227122402E-5	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999974463964	WITHOUT_CLASSIFICATION	2.5536035631796828E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999992875112559	WITHOUT_CLASSIFICATION	7.124887441435387E-7	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999454477943278	WITHOUT_CLASSIFICATION	5.4552205672227305E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9991348934273049	WITHOUT_CLASSIFICATION	8.651065726951415E-4	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.999955463157372	WITHOUT_CLASSIFICATION	4.453684262791433E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.999993991734734	WITHOUT_CLASSIFICATION	6.008265266070185E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999998154734908	WITHOUT_CLASSIFICATION	1.8452650919923106E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999589994962	WITHOUT_CLASSIFICATION	4.100050378616352E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999982173466659	WITHOUT_CLASSIFICATION	1.782653334081196E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999062298978044	WITHOUT_CLASSIFICATION	9.377010219560455E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999721468983	WITHOUT_CLASSIFICATION	2.785310175064591E-8	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999998938	WITHOUT_CLASSIFICATION	1.0635216011393979E-13	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999990096795888	WITHOUT_CLASSIFICATION	9.903204112152773E-7	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.999993991734734	WITHOUT_CLASSIFICATION	6.008265266070185E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.999998154734908	WITHOUT_CLASSIFICATION	1.8452650919923106E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999932208226152	WITHOUT_CLASSIFICATION	6.779177384788847E-6	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996597477240327	WITHOUT_CLASSIFICATION	3.40252275967355E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999938267463457	WITHOUT_CLASSIFICATION	6.173253654227552E-6	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999996002949613	WITHOUT_CLASSIFICATION	3.9970503876377757E-7	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999998005815017	WITHOUT_CLASSIFICATION	1.994184981859051E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999896991154748	WITHOUT_CLASSIFICATION	1.0300884525224246E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996289184067	WITHOUT_CLASSIFICATION	3.7108159340714996E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999952738340685	WITHOUT_CLASSIFICATION	4.726165931405543E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999988404465938	WITHOUT_CLASSIFICATION	1.159553406189014E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7070908379453603	DESIGN	0.29290916205463974	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999997575829	WITHOUT_CLASSIFICATION	2.4241706009298343E-10	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.7070908379453603	DESIGN	0.29290916205463974	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999996543906	WITHOUT_CLASSIFICATION	3.456094294691106E-10	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999954644268644	WITHOUT_CLASSIFICATION	4.535573135540082E-6	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999939666401	WITHOUT_CLASSIFICATION	6.033359840025217E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990413425002	WITHOUT_CLASSIFICATION	9.58657499881009E-7	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999824061703432	WITHOUT_CLASSIFICATION	1.7593829656880027E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999941302511967	WITHOUT_CLASSIFICATION	5.8697488032898E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999941302511967	WITHOUT_CLASSIFICATION	5.8697488032898E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999906959127655	WITHOUT_CLASSIFICATION	9.304087234573112E-6	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999792811627504	WITHOUT_CLASSIFICATION	2.0718837249556696E-5	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999974876460789	WITHOUT_CLASSIFICATION	2.5123539211652293E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999962561819763	WITHOUT_CLASSIFICATION	3.7438180235829098E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997495977333198	WITHOUT_CLASSIFICATION	2.50402266680155E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.8489220172227755	WITHOUT_CLASSIFICATION	0.1510779827772246	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.999998782228202	WITHOUT_CLASSIFICATION	1.2177717979232175E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997046859616	WITHOUT_CLASSIFICATION	2.9531403842180335E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999904337326129	WITHOUT_CLASSIFICATION	9.566267387228105E-6	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999545713590992	WITHOUT_CLASSIFICATION	4.542864090076225E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999850829368843	WITHOUT_CLASSIFICATION	1.4917063115674867E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999031232667	WITHOUT_CLASSIFICATION	9.687673334842176E-8	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9996804052240419	WITHOUT_CLASSIFICATION	3.195947759581491E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.999999420765458	WITHOUT_CLASSIFICATION	5.792345419458363E-7	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999945108479148	WITHOUT_CLASSIFICATION	5.489152085180465E-6	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999993912607659	WITHOUT_CLASSIFICATION	6.087392340719318E-7	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998420698336	WITHOUT_CLASSIFICATION	1.5793016646803973E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999910996069805	WITHOUT_CLASSIFICATION	8.90039301949719E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.99999998700311	WITHOUT_CLASSIFICATION	1.2996890053042725E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998596269498299	WITHOUT_CLASSIFICATION	1.4037305017021526E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998740642553717	WITHOUT_CLASSIFICATION	1.2593574462834662E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999996310328229	WITHOUT_CLASSIFICATION	3.689671770961733E-7	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999791485545084	WITHOUT_CLASSIFICATION	2.085144549154675E-5	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999996638027918	WITHOUT_CLASSIFICATION	3.361972081586667E-7	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999987085444142	WITHOUT_CLASSIFICATION	1.291455585811695E-6	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998437385133927	WITHOUT_CLASSIFICATION	1.5626148660723664E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999878085389365	WITHOUT_CLASSIFICATION	1.2191461063367567E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9996744081087335	WITHOUT_CLASSIFICATION	3.255918912664214E-4	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.8965680823998626	WITHOUT_CLASSIFICATION	0.10343191760013737	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9350037912808736	WITHOUT_CLASSIFICATION	0.06499620871912642	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.7118044103943676	DESIGN	0.28819558960563235	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9986824713880172	WITHOUT_CLASSIFICATION	0.0013175286119827471	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.999998782228202	WITHOUT_CLASSIFICATION	1.2177717979232175E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999893863027923	WITHOUT_CLASSIFICATION	1.0613697207614033E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999850617253461	WITHOUT_CLASSIFICATION	1.4938274653907666E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9473528636266981	WITHOUT_CLASSIFICATION	0.05264713637330193	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999999055967271	WITHOUT_CLASSIFICATION	9.440327283936302E-8	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999927753217571	WITHOUT_CLASSIFICATION	7.224678242917551E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999988463535592	WITHOUT_CLASSIFICATION	1.1536464407686282E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999962561819763	WITHOUT_CLASSIFICATION	3.7438180235829098E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999962561819763	WITHOUT_CLASSIFICATION	3.7438180235829098E-6	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999990320239738	WITHOUT_CLASSIFICATION	9.679760261877404E-7	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999993486749608	WITHOUT_CLASSIFICATION	6.513250393013671E-7	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9988286145461486	WITHOUT_CLASSIFICATION	0.0011713854538514669	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999967645777047	WITHOUT_CLASSIFICATION	3.2354222953392647E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999953194295895	WITHOUT_CLASSIFICATION	4.680570410407059E-6	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9997077049375043	WITHOUT_CLASSIFICATION	2.9229506249570884E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.992008684028291	WITHOUT_CLASSIFICATION	0.007991315971708912	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999991067566786	WITHOUT_CLASSIFICATION	8.932433214256272E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997916642753127	WITHOUT_CLASSIFICATION	2.083357246872462E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999228766106	WITHOUT_CLASSIFICATION	7.712338940065811E-6	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999830712984935	WITHOUT_CLASSIFICATION	1.6928701506525284E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999875110512837	WITHOUT_CLASSIFICATION	1.2488948716363536E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998856132211615	WITHOUT_CLASSIFICATION	1.1438677883852168E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999228766106	WITHOUT_CLASSIFICATION	7.712338940065811E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999882232652635	WITHOUT_CLASSIFICATION	1.1776734736448623E-5	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9958824853125563	WITHOUT_CLASSIFICATION	0.004117514687443721	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999951122228438	WITHOUT_CLASSIFICATION	4.887777156250085E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9790444398498104	DESIGN	0.02095556015018962	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999875110512837	WITHOUT_CLASSIFICATION	1.2488948716363536E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999948580995764	WITHOUT_CLASSIFICATION	5.1419004235177804E-6	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999975819739297	WITHOUT_CLASSIFICATION	2.4180260701859334E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996771737099	WITHOUT_CLASSIFICATION	3.228262901189175E-7	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999948147278248	WITHOUT_CLASSIFICATION	5.1852721752482735E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998887104343107	WITHOUT_CLASSIFICATION	1.1128956568920557E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999999128665003	WITHOUT_CLASSIFICATION	8.713349970461983E-7	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999980643053044	WITHOUT_CLASSIFICATION	1.9356946955919196E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935543870139	WITHOUT_CLASSIFICATION	6.445612986120365E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999154726122096	WITHOUT_CLASSIFICATION	8.452738779036148E-5	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999921659179556	WITHOUT_CLASSIFICATION	7.834082044343638E-6	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9791718781202318	WITHOUT_CLASSIFICATION	0.02082812187976831	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998911729034691	WITHOUT_CLASSIFICATION	1.0882709653090964E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999228766106	WITHOUT_CLASSIFICATION	7.712338940065811E-6	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999948580995764	WITHOUT_CLASSIFICATION	5.1419004235177804E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999996771737099	WITHOUT_CLASSIFICATION	3.228262901189175E-7	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999846801720549	WITHOUT_CLASSIFICATION	1.5319827945126206E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9999103822264392	WITHOUT_CLASSIFICATION	8.961777356074742E-5	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999899882435848	WITHOUT_CLASSIFICATION	1.0011756415156517E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999875110512837	WITHOUT_CLASSIFICATION	1.2488948716363536E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999894120710433	WITHOUT_CLASSIFICATION	1.0587928956758258E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999999879373595	WITHOUT_CLASSIFICATION	1.206264049425782E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999950935581806	WITHOUT_CLASSIFICATION	4.906441819360445E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892334410672	WITHOUT_CLASSIFICATION	1.0766558932766417E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935543870139	WITHOUT_CLASSIFICATION	6.445612986120365E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999882232652635	WITHOUT_CLASSIFICATION	1.1776734736448623E-5	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999992000978749	WITHOUT_CLASSIFICATION	7.999021250942088E-7	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999995044567045	WITHOUT_CLASSIFICATION	4.955432954911426E-7	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998707195447912	WITHOUT_CLASSIFICATION	1.2928045520886443E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9988932986421311	WITHOUT_CLASSIFICATION	0.0011067013578689967	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9975851303630351	WITHOUT_CLASSIFICATION	0.0024148696369649097	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999480020173062	WITHOUT_CLASSIFICATION	5.19979826937694E-5	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.999160450570638	WITHOUT_CLASSIFICATION	8.395494293620915E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990413425002	WITHOUT_CLASSIFICATION	9.58657499881009E-7	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997551669109506	WITHOUT_CLASSIFICATION	2.4483308904943625E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999982313728006	WITHOUT_CLASSIFICATION	1.7686271993447932E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999560371588172	WITHOUT_CLASSIFICATION	4.396284118276452E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997982375262	WITHOUT_CLASSIFICATION	2.0176247395004594E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999565434446	WITHOUT_CLASSIFICATION	4.345655535979485E-8	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999996602878513	WITHOUT_CLASSIFICATION	3.397121487141679E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999990321639546	WITHOUT_CLASSIFICATION	9.678360454096396E-7	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999491073849	WITHOUT_CLASSIFICATION	5.0892615114700296E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999892334410672	WITHOUT_CLASSIFICATION	1.0766558932766417E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999992017026413	WITHOUT_CLASSIFICATION	7.982973587897268E-7	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999993564893159	WITHOUT_CLASSIFICATION	6.435106840526078E-7	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.999995645546782	WITHOUT_CLASSIFICATION	4.35445321797032E-6	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999951462650288	WITHOUT_CLASSIFICATION	4.853734971092654E-6	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9952273026660189	WITHOUT_CLASSIFICATION	0.004772697333981115	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9982411149043773	WITHOUT_CLASSIFICATION	0.0017588850956227007	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999985094011684	WITHOUT_CLASSIFICATION	1.4905988315835386E-6	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.997785621570657	WITHOUT_CLASSIFICATION	0.002214378429342898	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999990276463568	WITHOUT_CLASSIFICATION	9.723536431569053E-7	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9946055102081137	WITHOUT_CLASSIFICATION	0.005394489791886346	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999993154680005	WITHOUT_CLASSIFICATION	6.845319994986228E-7	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999973903183478	WITHOUT_CLASSIFICATION	2.6096816521636477E-6	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9508626762559763	WITHOUT_CLASSIFICATION	0.04913732374402382	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999827589907787	WITHOUT_CLASSIFICATION	1.72410092212079E-5	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998942674881862	WITHOUT_CLASSIFICATION	1.0573251181378124E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999988724925664	WITHOUT_CLASSIFICATION	1.1275074336293603E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.958907740230744	WITHOUT_CLASSIFICATION	0.04109225976925594	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999974135765177	WITHOUT_CLASSIFICATION	2.5864234822936267E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999910045958924	WITHOUT_CLASSIFICATION	8.995404107596252E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9991057405247651	WITHOUT_CLASSIFICATION	8.942594752348934E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999970362751743	WITHOUT_CLASSIFICATION	2.9637248257221433E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999728390212975	WITHOUT_CLASSIFICATION	2.7160978702519927E-5	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999821825893	WITHOUT_CLASSIFICATION	1.7817410669847384E-8	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999972233966	WITHOUT_CLASSIFICATION	2.7766034034695875E-8	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999998205141842	WITHOUT_CLASSIFICATION	1.7948581579578456E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6766861526045946	DESIGN	0.3233138473954053	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999923197762148	WITHOUT_CLASSIFICATION	7.680223785156409E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999999075425947	WITHOUT_CLASSIFICATION	9.245740532216637E-8	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999919627286717	WITHOUT_CLASSIFICATION	8.037271328262688E-6	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.918753949516143	WITHOUT_CLASSIFICATION	0.0812460504838571	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999531855232151	WITHOUT_CLASSIFICATION	4.68144767849106E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999457499764255	WITHOUT_CLASSIFICATION	5.425002357449678E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999422147442281	WITHOUT_CLASSIFICATION	5.778525577194343E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9843388260934439	WITHOUT_CLASSIFICATION	0.015661173906555952	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999983842123126	WITHOUT_CLASSIFICATION	1.6157876874012113E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999319242744	WITHOUT_CLASSIFICATION	6.807572566457861E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999398200909765	WITHOUT_CLASSIFICATION	6.017990902347561E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.7928085698032064	WITHOUT_CLASSIFICATION	0.20719143019679356	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999319242744	WITHOUT_CLASSIFICATION	6.807572566457861E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.999983842123126	WITHOUT_CLASSIFICATION	1.6157876874012113E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999398200909765	WITHOUT_CLASSIFICATION	6.017990902347561E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999815870914638	WITHOUT_CLASSIFICATION	1.841290853620633E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999907226434671	WITHOUT_CLASSIFICATION	9.277356532835086E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999819248856	WITHOUT_CLASSIFICATION	1.8075114380835295E-8	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9979237548965051	WITHOUT_CLASSIFICATION	0.002076245103494808	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999680255773539	WITHOUT_CLASSIFICATION	3.197442264612019E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998220562516023	DESIGN	1.7794374839780064E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.6456261785562871	DESIGN	0.354373821443713	WITHOUT_CLASSIFICATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999863767024607	WITHOUT_CLASSIFICATION	1.3623297539302058E-4	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998931408069583	WITHOUT_CLASSIFICATION	1.0685919304165874E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999969948494548	WITHOUT_CLASSIFICATION	3.0051505451971144E-6	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999978578331407	WITHOUT_CLASSIFICATION	2.1421668593461863E-6	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998230179706824	WITHOUT_CLASSIFICATION	1.7698202931767742E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999901870703571	WITHOUT_CLASSIFICATION	9.812929642845555E-6	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9969701546084966	WITHOUT_CLASSIFICATION	0.0030298453915033603	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996279901718	WITHOUT_CLASSIFICATION	3.72009828072927E-7	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998625467549	WITHOUT_CLASSIFICATION	1.374532451286055E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999689712054675	WITHOUT_CLASSIFICATION	3.102879453259725E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.999974668100019	WITHOUT_CLASSIFICATION	2.533189998105983E-5	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9997790066791369	WITHOUT_CLASSIFICATION	2.2099332086309911E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999999632275557	WITHOUT_CLASSIFICATION	3.6772444295900687E-7	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.6434322658834307	DESIGN	0.3565677341165692	WITHOUT_CLASSIFICATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999790149741	WITHOUT_CLASSIFICATION	2.09850259369432E-8	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999756748225807	WITHOUT_CLASSIFICATION	2.4325177419343606E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999998696629127	WITHOUT_CLASSIFICATION	1.3033708736737853E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999993531935164	WITHOUT_CLASSIFICATION	6.468064836158988E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999993531935164	WITHOUT_CLASSIFICATION	6.468064836158988E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999945289021	WITHOUT_CLASSIFICATION	5.4710979403354645E-9	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999945289021	WITHOUT_CLASSIFICATION	5.4710979403354645E-9	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.998860771910817	WITHOUT_CLASSIFICATION	0.0011392280891829468	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999689712054675	WITHOUT_CLASSIFICATION	3.102879453259725E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999431042227869	WITHOUT_CLASSIFICATION	5.689577721322246E-5	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999984069884491	WITHOUT_CLASSIFICATION	1.5930115509053529E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996986762746038	WITHOUT_CLASSIFICATION	3.01323725396112E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996986762746038	WITHOUT_CLASSIFICATION	3.01323725396112E-4	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999997347238436	WITHOUT_CLASSIFICATION	2.6527615637268675E-7	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999952302675261	WITHOUT_CLASSIFICATION	4.7697324738421996E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998262298571401	WITHOUT_CLASSIFICATION	1.7377014285990857E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999988675775727	WITHOUT_CLASSIFICATION	1.1324224272605896E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7787984740504457	WITHOUT_CLASSIFICATION	0.22120152594955428	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999889354607174	WITHOUT_CLASSIFICATION	1.1064539282623021E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997347074278692	WITHOUT_CLASSIFICATION	2.652925721308358E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9514756458816696	WITHOUT_CLASSIFICATION	0.048524354118330414	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9994028600783027	WITHOUT_CLASSIFICATION	5.971399216972058E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999908933565088	WITHOUT_CLASSIFICATION	9.10664349108317E-6	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999994961561272	WITHOUT_CLASSIFICATION	5.038438727959597E-7	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999870552560781	WITHOUT_CLASSIFICATION	1.2944743921963643E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999934677818282	WITHOUT_CLASSIFICATION	6.532218171836601E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999853708513337	WITHOUT_CLASSIFICATION	1.4629148666364494E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9952410230197405	WITHOUT_CLASSIFICATION	0.00475897698025949	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999075115606267	WITHOUT_CLASSIFICATION	9.248843937328347E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995558283310648	WITHOUT_CLASSIFICATION	4.4417166893517715E-4	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999957334877687	WITHOUT_CLASSIFICATION	4.266512231343079E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999785793419264	WITHOUT_CLASSIFICATION	2.142065807373739E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999976501686	WITHOUT_CLASSIFICATION	2.349831504610277E-9	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999943241178219	WITHOUT_CLASSIFICATION	5.675882178188848E-6	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999971202894	WITHOUT_CLASSIFICATION	2.8797107069279267E-9	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999970808238264	WITHOUT_CLASSIFICATION	2.919176173607812E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999986453151234	WITHOUT_CLASSIFICATION	1.35468487663918E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9998519895618779	WITHOUT_CLASSIFICATION	1.4801043812198275E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999999132460671	WITHOUT_CLASSIFICATION	8.675393292504049E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999973903183478	WITHOUT_CLASSIFICATION	2.6096816521636477E-6	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999498623774	WITHOUT_CLASSIFICATION	5.013762270777705E-8	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999986298860136	WITHOUT_CLASSIFICATION	1.3701139863432566E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999848492646425	WITHOUT_CLASSIFICATION	1.5150735357430798E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997357939528	WITHOUT_CLASSIFICATION	2.6420604711325076E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9997423209792421	WITHOUT_CLASSIFICATION	2.576790207578705E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9997423209792421	WITHOUT_CLASSIFICATION	2.576790207578705E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999975477091219	WITHOUT_CLASSIFICATION	2.4522908782132206E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999945088414829	WITHOUT_CLASSIFICATION	5.4911585170922785E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9998227162679636	WITHOUT_CLASSIFICATION	1.7728373203649962E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9998227162679636	WITHOUT_CLASSIFICATION	1.7728373203649962E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999896345288665	WITHOUT_CLASSIFICATION	1.036547113362368E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999601577287787	WITHOUT_CLASSIFICATION	3.984227122143468E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999984878902002	WITHOUT_CLASSIFICATION	1.5121097997922528E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998177816625	WITHOUT_CLASSIFICATION	1.8221833742325228E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9982291376852104	WITHOUT_CLASSIFICATION	0.0017708623147895872	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999357939503176	WITHOUT_CLASSIFICATION	6.420604968236085E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9982736134381877	WITHOUT_CLASSIFICATION	0.0017263865618123496	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999479470745681	WITHOUT_CLASSIFICATION	5.2052925431939965E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9893440384540589	WITHOUT_CLASSIFICATION	0.010655961545941043	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9893440384540589	WITHOUT_CLASSIFICATION	0.010655961545941043	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9856860576505543	WITHOUT_CLASSIFICATION	0.014313942349445706	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999731485932235	WITHOUT_CLASSIFICATION	2.6851406776527454E-5	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999731485932235	WITHOUT_CLASSIFICATION	2.6851406776527454E-5	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993391362472446	WITHOUT_CLASSIFICATION	6.60863752755503E-4	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999974795608201	WITHOUT_CLASSIFICATION	2.5204391799989025E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9152257768340195	WITHOUT_CLASSIFICATION	0.08477422316598046	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999997123736099	WITHOUT_CLASSIFICATION	2.876263902357222E-7	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999998071807377	WITHOUT_CLASSIFICATION	1.9281926241128976E-7	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999988401054	WITHOUT_CLASSIFICATION	1.1598946562545548E-9	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999998087832962	WITHOUT_CLASSIFICATION	1.9121670389226188E-7	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999890703248454	WITHOUT_CLASSIFICATION	1.092967515466388E-5	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999994059290008	WITHOUT_CLASSIFICATION	5.940709991267878E-7	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9989705191841054	WITHOUT_CLASSIFICATION	0.0010294808158946346	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999999526099415	WITHOUT_CLASSIFICATION	4.7390058498703185E-7	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999974428256522	WITHOUT_CLASSIFICATION	2.5571743478582698E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720187505815	WITHOUT_CLASSIFICATION	2.7981249418446246E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720187505815	WITHOUT_CLASSIFICATION	2.7981249418446246E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720187505815	WITHOUT_CLASSIFICATION	2.7981249418446246E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999720187505815	WITHOUT_CLASSIFICATION	2.7981249418446246E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999999319619709	WITHOUT_CLASSIFICATION	6.803802910822179E-8	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999498022896464	WITHOUT_CLASSIFICATION	5.0197710353760034E-5	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999939360930965	WITHOUT_CLASSIFICATION	6.0639069034506036E-6	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9996288083433534	WITHOUT_CLASSIFICATION	3.711916566465755E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997863154061	WITHOUT_CLASSIFICATION	2.1368459391083782E-7	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9984161953650305	WITHOUT_CLASSIFICATION	0.0015838046349696169	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9982853198651545	WITHOUT_CLASSIFICATION	0.0017146801348455686	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999962299661538	WITHOUT_CLASSIFICATION	3.7700338461964884E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999631994374	WITHOUT_CLASSIFICATION	3.680056252977668E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998357109777	WITHOUT_CLASSIFICATION	1.6428902226634718E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9969044965675268	WITHOUT_CLASSIFICATION	0.0030955034324731527	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998974537590949	WITHOUT_CLASSIFICATION	1.0254624090514584E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999973674922363	WITHOUT_CLASSIFICATION	2.6325077636858135E-6	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999766040969	WITHOUT_CLASSIFICATION	2.3395903051275757E-8	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999221975183588	WITHOUT_CLASSIFICATION	7.780248164126772E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998974537590949	WITHOUT_CLASSIFICATION	1.0254624090514584E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999527806385	WITHOUT_CLASSIFICATION	4.721936162768839E-8	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.999852862875991	WITHOUT_CLASSIFICATION	1.4713712400905287E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999993953555474	WITHOUT_CLASSIFICATION	6.046444525203579E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9997233566805315	WITHOUT_CLASSIFICATION	2.766433194685643E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999554753164014	WITHOUT_CLASSIFICATION	4.452468359866946E-5	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.996890351645611	WITHOUT_CLASSIFICATION	0.003109648354388953	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999969392849746	WITHOUT_CLASSIFICATION	3.0607150253788714E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999944907390131	WITHOUT_CLASSIFICATION	5.509260986893482E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992815023725	WITHOUT_CLASSIFICATION	7.184976273930293E-7	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999974042242268	WITHOUT_CLASSIFICATION	2.595775773218521E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997704316509	WITHOUT_CLASSIFICATION	2.295683491123246E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999995053545138	WITHOUT_CLASSIFICATION	4.9464548630447E-7	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9987026083934258	WITHOUT_CLASSIFICATION	0.0012973916065741641	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9471849125453148	WITHOUT_CLASSIFICATION	0.05281508745468517	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999890404196274	WITHOUT_CLASSIFICATION	1.0959580372523587E-5	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9264013607624287	WITHOUT_CLASSIFICATION	0.0735986392375713	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999934802521107	WITHOUT_CLASSIFICATION	6.519747889435201E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999947243825746	WITHOUT_CLASSIFICATION	5.275617425451987E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999539983858595	WITHOUT_CLASSIFICATION	4.600161414051977E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999947243825746	WITHOUT_CLASSIFICATION	5.275617425451987E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999823665092	WITHOUT_CLASSIFICATION	1.763349086557536E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998831604235348	WITHOUT_CLASSIFICATION	1.1683957646521731E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9994823842057129	WITHOUT_CLASSIFICATION	5.176157942870953E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998011171841283	WITHOUT_CLASSIFICATION	1.9888281587177557E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999934802521107	WITHOUT_CLASSIFICATION	6.519747889435201E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999539983858595	WITHOUT_CLASSIFICATION	4.600161414051977E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999823665092	WITHOUT_CLASSIFICATION	1.763349086557536E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999165392901591	WITHOUT_CLASSIFICATION	8.346070984094375E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999718993220943	WITHOUT_CLASSIFICATION	2.8100677905714777E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9998697563623814	WITHOUT_CLASSIFICATION	1.3024363761851964E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.999986192773248	WITHOUT_CLASSIFICATION	1.3807226752065104E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.996279273411881	WITHOUT_CLASSIFICATION	0.003720726588119037	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999749867077	WITHOUT_CLASSIFICATION	2.5013292392630632E-8	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995558283310648	WITHOUT_CLASSIFICATION	4.4417166893517715E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998831604235348	WITHOUT_CLASSIFICATION	1.1683957646521731E-4	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998785716974287	WITHOUT_CLASSIFICATION	1.2142830257134823E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.99993185437001	WITHOUT_CLASSIFICATION	6.814562999003368E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999995049683874	WITHOUT_CLASSIFICATION	4.9503161260272805E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995558283310648	WITHOUT_CLASSIFICATION	4.4417166893517715E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999838313794251	WITHOUT_CLASSIFICATION	1.6168620574868188E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995558283310648	WITHOUT_CLASSIFICATION	4.4417166893517715E-4	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999997378015615	WITHOUT_CLASSIFICATION	2.62198438628364E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998693226314	WITHOUT_CLASSIFICATION	1.306773686408336E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999856476900496	WITHOUT_CLASSIFICATION	1.4352309950392862E-5	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999999361391196	WITHOUT_CLASSIFICATION	6.386088039789177E-7	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999965234016557	WITHOUT_CLASSIFICATION	3.476598344244989E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999955829632948	WITHOUT_CLASSIFICATION	4.417036705120292E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999579708269657	WITHOUT_CLASSIFICATION	4.202917303424813E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999919528327238	WITHOUT_CLASSIFICATION	8.047167276189127E-6	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999998129465264	WITHOUT_CLASSIFICATION	1.8705347357464044E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9995871834579712	WITHOUT_CLASSIFICATION	4.128165420288396E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999969378623738	WITHOUT_CLASSIFICATION	3.0621376261916735E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999992554764539	WITHOUT_CLASSIFICATION	7.445235461220819E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9152257768340195	WITHOUT_CLASSIFICATION	0.08477422316598046	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9996386850630224	WITHOUT_CLASSIFICATION	3.6131493697758656E-4	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9993726481326632	WITHOUT_CLASSIFICATION	6.273518673366406E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999693399741604	WITHOUT_CLASSIFICATION	3.066002583960042E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999414728071006	WITHOUT_CLASSIFICATION	5.852719289957684E-5	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999950482736811	WITHOUT_CLASSIFICATION	4.951726318774285E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999975776349423	WITHOUT_CLASSIFICATION	2.4223650577229287E-6	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999976057354789	WITHOUT_CLASSIFICATION	2.3942645211235906E-6	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9614378214666345	WITHOUT_CLASSIFICATION	0.03856217853336562	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999995089157848	WITHOUT_CLASSIFICATION	4.910842151116873E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999375930051366	WITHOUT_CLASSIFICATION	6.240699486339369E-5	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.6119636978379033	WITHOUT_CLASSIFICATION	0.38803630216209667	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999988606344549	WITHOUT_CLASSIFICATION	1.1393655451934557E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999991985183908	WITHOUT_CLASSIFICATION	8.014816092053142E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998456483833	WITHOUT_CLASSIFICATION	1.5435161672428664E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999919454843874	WITHOUT_CLASSIFICATION	8.054515612484688E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.99996662494852	WITHOUT_CLASSIFICATION	3.337505148001675E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999991987843101	WITHOUT_CLASSIFICATION	8.012156899665074E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998471491349493	WITHOUT_CLASSIFICATION	1.5285086505070406E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999990355323451	WITHOUT_CLASSIFICATION	9.644676548152773E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.998370868548907	WITHOUT_CLASSIFICATION	0.001629131451092897	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9993197826732931	WITHOUT_CLASSIFICATION	6.802173267068232E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9973363346248297	WITHOUT_CLASSIFICATION	0.002663665375170227	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.999999956831411	WITHOUT_CLASSIFICATION	4.316858897624049E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9994353402497286	WITHOUT_CLASSIFICATION	5.646597502714218E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9977330986466236	WITHOUT_CLASSIFICATION	0.0022669013533764015	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999902417968353	WITHOUT_CLASSIFICATION	9.758203164773618E-6	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998817351640157	WITHOUT_CLASSIFICATION	1.1826483598431251E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.7666387802854729	WITHOUT_CLASSIFICATION	0.23336121971452703	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999113936431	WITHOUT_CLASSIFICATION	8.860635683214963E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.6118610386144473	DESIGN	0.38813896138555265	WITHOUT_CLASSIFICATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999747462263607	WITHOUT_CLASSIFICATION	2.525377363920867E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999747462263607	WITHOUT_CLASSIFICATION	2.525377363920867E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999719786852	WITHOUT_CLASSIFICATION	2.8021314806248758E-8	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999919528327238	WITHOUT_CLASSIFICATION	8.047167276189127E-6	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9153457893030671	WITHOUT_CLASSIFICATION	0.08465421069693292	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999204267207	WITHOUT_CLASSIFICATION	7.95732792169759E-8	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999384555114	WITHOUT_CLASSIFICATION	6.15444886533615E-8	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999999646589688	WITHOUT_CLASSIFICATION	3.53410312060379E-8	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999724003120349	WITHOUT_CLASSIFICATION	2.7599687965119454E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998839049729278	WITHOUT_CLASSIFICATION	1.1609502707227848E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999472792076	WITHOUT_CLASSIFICATION	5.272079234231135E-8	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999614873053593	WITHOUT_CLASSIFICATION	3.851269464075415E-5	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9986142789380462	WITHOUT_CLASSIFICATION	0.0013857210619537224	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999775551269022	WITHOUT_CLASSIFICATION	2.2444873097814913E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5933042732714887	DESIGN	0.4066957267285114	WITHOUT_CLASSIFICATION
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999991141205458	WITHOUT_CLASSIFICATION	8.858794543208175E-7	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999853911160185	WITHOUT_CLASSIFICATION	1.4608883981513353E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999998923130515	WITHOUT_CLASSIFICATION	1.0768694844417722E-7	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999988647955	WITHOUT_CLASSIFICATION	1.135204417219487E-9	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999993934483	WITHOUT_CLASSIFICATION	6.065516985707376E-9	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999989146417643	WITHOUT_CLASSIFICATION	1.0853582357333707E-6	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9957380292849266	WITHOUT_CLASSIFICATION	0.004261970715073334	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999988297743853	WITHOUT_CLASSIFICATION	1.1702256147086587E-6	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999858586401588	WITHOUT_CLASSIFICATION	1.4141359841110187E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.99999989307414	WITHOUT_CLASSIFICATION	1.0692585998716956E-7	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999544502969	WITHOUT_CLASSIFICATION	4.554970318648251E-8	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.7666387802854729	WITHOUT_CLASSIFICATION	0.23336121971452703	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999907960896232	WITHOUT_CLASSIFICATION	9.203910376903874E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999919080275856	WITHOUT_CLASSIFICATION	8.091972414325939E-6	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999588719631	WITHOUT_CLASSIFICATION	4.112803674565846E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999988482202716	WITHOUT_CLASSIFICATION	1.15177972832114E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996567373412414	WITHOUT_CLASSIFICATION	3.4326265875861726E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999914160522198	WITHOUT_CLASSIFICATION	8.583947780243948E-6	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999979499815208	WITHOUT_CLASSIFICATION	2.050018479137274E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999992786690719	WITHOUT_CLASSIFICATION	7.213309281696343E-7	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999765171496	WITHOUT_CLASSIFICATION	2.348285045111866E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999930546075738	WITHOUT_CLASSIFICATION	6.945392426105027E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.999999968802483	WITHOUT_CLASSIFICATION	3.1197517110063693E-8	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999926222033	WITHOUT_CLASSIFICATION	7.377796694162806E-9	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.998474896130339	WITHOUT_CLASSIFICATION	0.001525103869660963	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998772277037185	WITHOUT_CLASSIFICATION	1.2277229628153866E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999695073560138	WITHOUT_CLASSIFICATION	3.049264398627879E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999695073560138	WITHOUT_CLASSIFICATION	3.049264398627879E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999377109604984	WITHOUT_CLASSIFICATION	6.228903950155207E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999207702577495	WITHOUT_CLASSIFICATION	7.922974225044184E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999239465411334	WITHOUT_CLASSIFICATION	7.605345886658595E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999239465411334	WITHOUT_CLASSIFICATION	7.605345886658595E-5	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.999955794128321	WITHOUT_CLASSIFICATION	4.4205871678970576E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997608774130552	WITHOUT_CLASSIFICATION	2.39122586944682E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.874320886751896	WITHOUT_CLASSIFICATION	0.12567911324810402	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999996437077419	WITHOUT_CLASSIFICATION	3.56292258189657E-7	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999714131893	WITHOUT_CLASSIFICATION	2.8586810724229223E-8	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999846861947	WITHOUT_CLASSIFICATION	1.5313805394970247E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999998862187205	WITHOUT_CLASSIFICATION	1.1378127949375958E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.999998862187205	WITHOUT_CLASSIFICATION	1.1378127949375958E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999836418594	WITHOUT_CLASSIFICATION	1.635814066306727E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.99650097294219	WITHOUT_CLASSIFICATION	0.0034990270578100593	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999946326375312	WITHOUT_CLASSIFICATION	5.367362468736085E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999901402375571	WITHOUT_CLASSIFICATION	9.859762442968702E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999901402375571	WITHOUT_CLASSIFICATION	9.859762442968702E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999999338943945	WITHOUT_CLASSIFICATION	6.610560556850541E-8	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999999920841182	WITHOUT_CLASSIFICATION	7.915881792980012E-8	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998140856384464	WITHOUT_CLASSIFICATION	0.0018591436155360362	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999989792003124	WITHOUT_CLASSIFICATION	1.020799687521951E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999972325964695	WITHOUT_CLASSIFICATION	2.7674035305074263E-5	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999865537869475	WITHOUT_CLASSIFICATION	1.3446213052499015E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999931965677949	WITHOUT_CLASSIFICATION	6.803432205106655E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999645201376476	WITHOUT_CLASSIFICATION	3.5479862352336556E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9991888518576735	WITHOUT_CLASSIFICATION	8.11148142326654E-4	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999891420845787	WITHOUT_CLASSIFICATION	1.0857915421339376E-5	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9896992122287129	WITHOUT_CLASSIFICATION	0.010300787771287156	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9977071590770491	WITHOUT_CLASSIFICATION	0.002292840922950866	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999554300148563	WITHOUT_CLASSIFICATION	4.4569985143684294E-5	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999715785394056	WITHOUT_CLASSIFICATION	2.8421460594396766E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999908211933481	WITHOUT_CLASSIFICATION	9.178806651832611E-6	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999859958753	WITHOUT_CLASSIFICATION	1.4004124700091638E-8	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999985575568109	WITHOUT_CLASSIFICATION	1.4424431891171629E-6	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999997616473	WITHOUT_CLASSIFICATION	2.3835262290943197E-10	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999812920807818	WITHOUT_CLASSIFICATION	1.8707919218263978E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999389328763159	WITHOUT_CLASSIFICATION	6.106712368407595E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999579076591121	WITHOUT_CLASSIFICATION	4.209234088802037E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9995453780054627	WITHOUT_CLASSIFICATION	4.5462199453721907E-4	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9972225718152506	WITHOUT_CLASSIFICATION	0.002777428184749344	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999999720038137	WITHOUT_CLASSIFICATION	2.799618630697042E-8	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9705295233948161	WITHOUT_CLASSIFICATION	0.029470476605183853	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999502305591311	WITHOUT_CLASSIFICATION	4.976944086874661E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999915216147263	WITHOUT_CLASSIFICATION	8.478385273733939E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999993039682035	WITHOUT_CLASSIFICATION	6.960317965896112E-7	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999990090271	WITHOUT_CLASSIFICATION	9.90972908768881E-9	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999289367131718	WITHOUT_CLASSIFICATION	7.106328682821299E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9070185038729439	WITHOUT_CLASSIFICATION	0.09298149612705614	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999985013856545	WITHOUT_CLASSIFICATION	1.4986143454797863E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999994497074274	WITHOUT_CLASSIFICATION	5.502925727339575E-7	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999034147263	WITHOUT_CLASSIFICATION	9.65852737000384E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999098651290743	WITHOUT_CLASSIFICATION	9.013487092567521E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999537820724442	WITHOUT_CLASSIFICATION	4.6217927555792016E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9991848349986527	WITHOUT_CLASSIFICATION	8.15165001347286E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999766679115	WITHOUT_CLASSIFICATION	2.3332088527313246E-8	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999988663020034	WITHOUT_CLASSIFICATION	1.1336979965493116E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999960592535454	WITHOUT_CLASSIFICATION	3.94074645460588E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999174539051816	WITHOUT_CLASSIFICATION	8.254609481839375E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999891406222919	WITHOUT_CLASSIFICATION	1.0859377708065126E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999173074218365	WITHOUT_CLASSIFICATION	8.269257816353116E-5	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999017898954429	WITHOUT_CLASSIFICATION	9.821010455718105E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999996643583622	WITHOUT_CLASSIFICATION	3.3564163789219787E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999898757684178	WITHOUT_CLASSIFICATION	1.0124231582230692E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999704763637343	WITHOUT_CLASSIFICATION	2.9523636265686675E-5	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9924411012980587	WITHOUT_CLASSIFICATION	0.007558898701941326	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.999999338360827	WITHOUT_CLASSIFICATION	6.616391730334603E-7	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999993398182	WITHOUT_CLASSIFICATION	6.601817722655599E-10	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.99967840227726	WITHOUT_CLASSIFICATION	3.2159772273991074E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999703937812112	WITHOUT_CLASSIFICATION	2.9606218788819724E-5	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999989614113	WITHOUT_CLASSIFICATION	1.0385886606446891E-9	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999997362627	WITHOUT_CLASSIFICATION	2.637372319142349E-10	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.999989627677009	WITHOUT_CLASSIFICATION	1.0372322990954828E-5	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999899061890132	WITHOUT_CLASSIFICATION	1.0093810986776572E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999969846278342	WITHOUT_CLASSIFICATION	3.015372165805506E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999772131427512	WITHOUT_CLASSIFICATION	2.278685724879575E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9996438610871321	WITHOUT_CLASSIFICATION	3.56138912867978E-4	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999454524279192	WITHOUT_CLASSIFICATION	5.45475720807969E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999999997093742	WITHOUT_CLASSIFICATION	2.9062580858504264E-9	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999999997093742	WITHOUT_CLASSIFICATION	2.9062580858504264E-9	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999996551513255	WITHOUT_CLASSIFICATION	3.4484867443423586E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999852862510084	WITHOUT_CLASSIFICATION	1.4713748991606629E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999643660596	WITHOUT_CLASSIFICATION	3.563394030634919E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9998070358029195	WITHOUT_CLASSIFICATION	1.9296419708052668E-4	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999969207621155	WITHOUT_CLASSIFICATION	3.079237884398272E-6	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999994416269243	WITHOUT_CLASSIFICATION	5.58373075752569E-7	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999922550659612	WITHOUT_CLASSIFICATION	7.744934038736428E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999952826	WITHOUT_CLASSIFICATION	4.717378693044648E-12	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999995668821002	WITHOUT_CLASSIFICATION	4.3311789981912353E-7	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999995859557118	WITHOUT_CLASSIFICATION	4.140442881586988E-7	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.998251683670801	WITHOUT_CLASSIFICATION	0.0017483163291990985	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999222804788116	WITHOUT_CLASSIFICATION	7.771952118840258E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999684314613	WITHOUT_CLASSIFICATION	3.15685386470786E-8	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9972299207582016	WITHOUT_CLASSIFICATION	0.0027700792417984163	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999958612275845	WITHOUT_CLASSIFICATION	4.138772415485464E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999958612275845	WITHOUT_CLASSIFICATION	4.138772415485464E-6	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999997205964224	WITHOUT_CLASSIFICATION	2.794035776304729E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999994030899935	WITHOUT_CLASSIFICATION	5.969100064089984E-7	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999965549946	WITHOUT_CLASSIFICATION	3.4450055049183767E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999807951951	WITHOUT_CLASSIFICATION	1.9204804857003176E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999994693887558	WITHOUT_CLASSIFICATION	5.306112442217681E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995252588718	WITHOUT_CLASSIFICATION	4.7474112820025645E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999995251926405	WITHOUT_CLASSIFICATION	4.7480735962504764E-7	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.975373864668206	WITHOUT_CLASSIFICATION	0.02462613533179405	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999543158551111	WITHOUT_CLASSIFICATION	4.5684144889016256E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999991126709	WITHOUT_CLASSIFICATION	8.873291080846008E-10	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999999436044	WITHOUT_CLASSIFICATION	5.639562648219972E-11	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999797327976	WITHOUT_CLASSIFICATION	2.0267202328384536E-8	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999999199265	WITHOUT_CLASSIFICATION	8.007357279710533E-11	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999936655674714	WITHOUT_CLASSIFICATION	6.334432528577452E-6	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9932687475545268	DESIGN	0.006731252445473217	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9966766139506498	WITHOUT_CLASSIFICATION	0.0033233860493502984	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9076735234544102	WITHOUT_CLASSIFICATION	0.09232647654558986	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999645794252336	WITHOUT_CLASSIFICATION	3.542057476632525E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999998373167479	WITHOUT_CLASSIFICATION	1.6268325218907717E-7	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999995185171	WITHOUT_CLASSIFICATION	4.814829507589743E-10	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999495161839093	WITHOUT_CLASSIFICATION	5.04838160907439E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999972542	WITHOUT_CLASSIFICATION	2.74572819263681E-12	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999931959456223	WITHOUT_CLASSIFICATION	6.8040543776814674E-6	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998945257160612	WITHOUT_CLASSIFICATION	1.0547428393887832E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.934040001925904	WITHOUT_CLASSIFICATION	0.06595999807409607	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9948244361410308	WITHOUT_CLASSIFICATION	0.005175563858969288	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999991933831	WITHOUT_CLASSIFICATION	8.066168029399358E-10	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999727769600937	WITHOUT_CLASSIFICATION	2.722303990622099E-5	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999928365616817	WITHOUT_CLASSIFICATION	7.1634383182973824E-6	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.99993593739115	WITHOUT_CLASSIFICATION	6.406260884990894E-5	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9996550750709764	WITHOUT_CLASSIFICATION	3.449249290236105E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.999999979632064	WITHOUT_CLASSIFICATION	2.0367935963208952E-8	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999495256409949	WITHOUT_CLASSIFICATION	5.0474359005117665E-5	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998505898783	WITHOUT_CLASSIFICATION	1.4941012168561968E-7	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.5912318822033696	WITHOUT_CLASSIFICATION	0.40876811779663025	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999633883979265	WITHOUT_CLASSIFICATION	3.661160207343205E-5	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999973682427968	WITHOUT_CLASSIFICATION	2.6317572031105867E-6	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999667515341	WITHOUT_CLASSIFICATION	3.324846578653667E-8	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999986397539224	WITHOUT_CLASSIFICATION	1.3602460775390123E-6	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9860242110018372	WITHOUT_CLASSIFICATION	0.013975788998162856	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995469041978667	WITHOUT_CLASSIFICATION	4.530958021333003E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9995469041978667	WITHOUT_CLASSIFICATION	4.530958021333003E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999939953323	WITHOUT_CLASSIFICATION	6.004667620372516E-9	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9977698035376875	WITHOUT_CLASSIFICATION	0.0022301964623124794	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9190927536196202	WITHOUT_CLASSIFICATION	0.08090724638037977	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9989553102506842	WITHOUT_CLASSIFICATION	0.001044689749315877	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999954769024616	WITHOUT_CLASSIFICATION	4.523097538365979E-6	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.999994469900519	WITHOUT_CLASSIFICATION	5.530099481016806E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999986181782788	WITHOUT_CLASSIFICATION	1.3818217211914578E-6	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999987908007871	WITHOUT_CLASSIFICATION	1.2091992129326287E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9782423471253071	DESIGN	0.021757652874692907	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997283956414	WITHOUT_CLASSIFICATION	2.71604358593861E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997830390593	WITHOUT_CLASSIFICATION	2.1696094065862032E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9786959889971655	WITHOUT_CLASSIFICATION	0.021304011002834456	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999999791973534	WITHOUT_CLASSIFICATION	2.080264658737518E-8	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999999974101808	WITHOUT_CLASSIFICATION	2.5898192058957533E-8	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999960365999518	WITHOUT_CLASSIFICATION	3.963400048132174E-6	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9995304439037582	WITHOUT_CLASSIFICATION	4.695560962417815E-4	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9994884522758103	WITHOUT_CLASSIFICATION	5.115477241897521E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999999970811648	WITHOUT_CLASSIFICATION	2.918835186678633E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999999263265803	WITHOUT_CLASSIFICATION	7.367341969877698E-8	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999172450531039	WITHOUT_CLASSIFICATION	8.27549468961616E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9853866364421532	WITHOUT_CLASSIFICATION	0.014613363557846912	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999860134855129	WITHOUT_CLASSIFICATION	1.3986514487165954E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9996998125762182	WITHOUT_CLASSIFICATION	3.001874237818004E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9200836116334399	WITHOUT_CLASSIFICATION	0.07991638836656012	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9818491592501439	WITHOUT_CLASSIFICATION	0.018150840749856085	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997038571872713	WITHOUT_CLASSIFICATION	2.96142812728723E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999995569638568	WITHOUT_CLASSIFICATION	4.430361431502073E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999999362844	WITHOUT_CLASSIFICATION	6.371553212872726E-11	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999857392977	WITHOUT_CLASSIFICATION	1.4260702341738929E-8	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999648942617604	WITHOUT_CLASSIFICATION	3.5105738239582255E-5	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9999750168105866	WITHOUT_CLASSIFICATION	2.498318941332057E-5	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998437181681914	WITHOUT_CLASSIFICATION	1.5628183180859914E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999738729583296	WITHOUT_CLASSIFICATION	2.6127041670365657E-5	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999997428494355	WITHOUT_CLASSIFICATION	2.571505645803403E-7	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999933310231803	WITHOUT_CLASSIFICATION	6.668976819702151E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999366318784471	WITHOUT_CLASSIFICATION	6.336812155291329E-5	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999990988733217	WITHOUT_CLASSIFICATION	9.011266781952573E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999973454942	WITHOUT_CLASSIFICATION	2.654505905051759E-9	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9996952219841502	WITHOUT_CLASSIFICATION	3.0477801584993623E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999924102932355	WITHOUT_CLASSIFICATION	7.589706764509431E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998702334452	WITHOUT_CLASSIFICATION	1.2976655474374474E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999932541407858	WITHOUT_CLASSIFICATION	6.7458592143413455E-6	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999998416106172	WITHOUT_CLASSIFICATION	1.583893828973335E-7	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999999941794	WITHOUT_CLASSIFICATION	5.820483445549444E-12	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999638893861221	WITHOUT_CLASSIFICATION	3.6110613877901316E-5	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.999688571133545	WITHOUT_CLASSIFICATION	3.114288664549347E-4	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999859192518117	WITHOUT_CLASSIFICATION	1.4080748188342218E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999684314613	WITHOUT_CLASSIFICATION	3.15685386470786E-8	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999999999756444	WITHOUT_CLASSIFICATION	2.435559805624044E-10	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999998749821	WITHOUT_CLASSIFICATION	1.2501789171452033E-9	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9999829986353697	WITHOUT_CLASSIFICATION	1.7001364630351065E-5	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9650766890083319	WITHOUT_CLASSIFICATION	0.03492331099166818	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999997681516	WITHOUT_CLASSIFICATION	2.3184842327056468E-10	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999490799651648	WITHOUT_CLASSIFICATION	5.0920034835271685E-5	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999989985288914	WITHOUT_CLASSIFICATION	1.0014711086600617E-6	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999880729242	WITHOUT_CLASSIFICATION	1.1927075695124749E-8	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999505313855	WITHOUT_CLASSIFICATION	4.946861466247631E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999999648296493	WITHOUT_CLASSIFICATION	3.5170350778386865E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999672827465	WITHOUT_CLASSIFICATION	3.271725336229382E-8	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9848467360808428	WITHOUT_CLASSIFICATION	0.015153263919157159	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999649534713	WITHOUT_CLASSIFICATION	3.504652872482533E-8	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999996771954122	WITHOUT_CLASSIFICATION	3.22804587843132E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997774299081	WITHOUT_CLASSIFICATION	2.2257009182809056E-7	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999905646084	WITHOUT_CLASSIFICATION	9.435391557752237E-9	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999945897654	WITHOUT_CLASSIFICATION	5.410234599906062E-9	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999999286887076	WITHOUT_CLASSIFICATION	7.131129252345397E-8	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9997863140437633	WITHOUT_CLASSIFICATION	2.1368595623672386E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997774299081	WITHOUT_CLASSIFICATION	2.2257009182809056E-7	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999994759354733	WITHOUT_CLASSIFICATION	5.24064526701102E-7	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.999999998129696	WITHOUT_CLASSIFICATION	1.8703040326155017E-9	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9998953193514984	WITHOUT_CLASSIFICATION	1.0468064850153984E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999993597316883	WITHOUT_CLASSIFICATION	6.40268311697851E-7	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999930728302733	WITHOUT_CLASSIFICATION	6.927169726712428E-6	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998929573763816	WITHOUT_CLASSIFICATION	1.0704262361845891E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999998071707478	WITHOUT_CLASSIFICATION	1.9282925213262596E-7	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9945623473209773	WITHOUT_CLASSIFICATION	0.005437652679022648	DESIGN
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999831212409	WITHOUT_CLASSIFICATION	1.687875909481516E-8	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999994371890104	WITHOUT_CLASSIFICATION	5.62810989552483E-7	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999982130050583	WITHOUT_CLASSIFICATION	1.7869949416836492E-6	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9885899893344132	WITHOUT_CLASSIFICATION	0.011410010665586813	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999909476266685	WITHOUT_CLASSIFICATION	9.052373331459872E-6	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999925520206691	WITHOUT_CLASSIFICATION	7.44797933089604E-6	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999957814741562	WITHOUT_CLASSIFICATION	4.218525843758665E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999544502969	WITHOUT_CLASSIFICATION	4.554970318648251E-8	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999999956020989	WITHOUT_CLASSIFICATION	4.397901096679017E-8	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999509816303	WITHOUT_CLASSIFICATION	4.901836976823005E-8	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.999875264540246	WITHOUT_CLASSIFICATION	1.247354597540244E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.7795031931891194	WITHOUT_CLASSIFICATION	0.22049680681088066	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999998570199682	WITHOUT_CLASSIFICATION	1.4298003172807104E-7	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999146484084	WITHOUT_CLASSIFICATION	8.535159159655813E-8	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999999514463737	WITHOUT_CLASSIFICATION	4.8553626333021623E-8	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999329969	WITHOUT_CLASSIFICATION	6.700312228125403E-11	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999998893048	WITHOUT_CLASSIFICATION	1.1069523494610347E-10	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999996070381	WITHOUT_CLASSIFICATION	3.929619339590372E-10	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999704492695488	WITHOUT_CLASSIFICATION	2.9550730451116358E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999992869947721	WITHOUT_CLASSIFICATION	7.1300522788846E-7	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9988263472684855	WITHOUT_CLASSIFICATION	0.001173652731514433	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999725361753086	WITHOUT_CLASSIFICATION	2.7463824691330916E-5	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999994052906057	WITHOUT_CLASSIFICATION	5.947093942622556E-7	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.8366114129410116	WITHOUT_CLASSIFICATION	0.16338858705898834	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.997844594826565	WITHOUT_CLASSIFICATION	0.002155405173435144	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999655744598159	WITHOUT_CLASSIFICATION	3.442554018414771E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.999999997799738	WITHOUT_CLASSIFICATION	2.2002619455196116E-9	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.999999454736102	WITHOUT_CLASSIFICATION	5.452638981311526E-7	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999617960623841	WITHOUT_CLASSIFICATION	3.8203937615920675E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9954503700435845	WITHOUT_CLASSIFICATION	0.004549629956415459	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999924560077	WITHOUT_CLASSIFICATION	7.543992271880727E-9	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.999999999679144	WITHOUT_CLASSIFICATION	3.208560323261716E-10	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999947146244369	WITHOUT_CLASSIFICATION	5.285375563125146E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999947146244369	WITHOUT_CLASSIFICATION	5.285375563125146E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999419484747463	WITHOUT_CLASSIFICATION	5.80515252537378E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999997356264417	WITHOUT_CLASSIFICATION	2.6437355825153413E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999950078390051	WITHOUT_CLASSIFICATION	4.992160994915502E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9098491049459183	DESIGN	0.09015089505408172	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999998177816625	WITHOUT_CLASSIFICATION	1.8221833742325228E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998177816625	WITHOUT_CLASSIFICATION	1.8221833742325228E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999983611769206	WITHOUT_CLASSIFICATION	1.6388230794235148E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999434665795642	WITHOUT_CLASSIFICATION	5.653342043589354E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9966660484398139	WITHOUT_CLASSIFICATION	0.0033339515601861565	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999840241319965	WITHOUT_CLASSIFICATION	1.5975868003532568E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999737152853	WITHOUT_CLASSIFICATION	2.628471475697874E-8	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999989853739218	WITHOUT_CLASSIFICATION	1.0146260781133325E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999987092795596	WITHOUT_CLASSIFICATION	1.2907204404142114E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999994428147203	WITHOUT_CLASSIFICATION	5.571852796715989E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999638927266	WITHOUT_CLASSIFICATION	3.610727329216617E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999295792053	WITHOUT_CLASSIFICATION	7.042079469566289E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999295792053	WITHOUT_CLASSIFICATION	7.042079469566289E-7	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9999257521189759	WITHOUT_CLASSIFICATION	7.424788102401365E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999935543870139	WITHOUT_CLASSIFICATION	6.445612986120365E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.999999128665003	WITHOUT_CLASSIFICATION	8.713349970461983E-7	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.7827400841842147	WITHOUT_CLASSIFICATION	0.21725991581578527	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.8306769303038666	WITHOUT_CLASSIFICATION	0.16932306969613345	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997551669109506	WITHOUT_CLASSIFICATION	2.4483308904943625E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987445922448	WITHOUT_CLASSIFICATION	1.2554077552965788E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997430452768	WITHOUT_CLASSIFICATION	2.5695472308363705E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999198306434913	WITHOUT_CLASSIFICATION	8.016935650873181E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.8933808922177405	WITHOUT_CLASSIFICATION	0.10661910778225953	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9469968382333374	WITHOUT_CLASSIFICATION	0.053003161766662546	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999994371890104	WITHOUT_CLASSIFICATION	5.62810989552483E-7	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.5956753079068051	WITHOUT_CLASSIFICATION	0.4043246920931948	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999195046979207	WITHOUT_CLASSIFICATION	8.049530207938037E-5	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999872374702	WITHOUT_CLASSIFICATION	1.2762529875949908E-8	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999849739835542	WITHOUT_CLASSIFICATION	1.5026016445653668E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999993920238	WITHOUT_CLASSIFICATION	6.079763167906081E-10	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999971854824736	WITHOUT_CLASSIFICATION	2.8145175263589477E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9544662656391678	WITHOUT_CLASSIFICATION	0.04553373436083226	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999191840120796	WITHOUT_CLASSIFICATION	8.081598792042924E-5	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999539492347	WITHOUT_CLASSIFICATION	4.6050765189517184E-8	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998537426283528	WITHOUT_CLASSIFICATION	1.462573716471981E-4	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998537426283528	WITHOUT_CLASSIFICATION	1.462573716471981E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998974537590949	WITHOUT_CLASSIFICATION	1.0254624090514584E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999932280844	WITHOUT_CLASSIFICATION	6.771915571735209E-9	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.999809430585897	WITHOUT_CLASSIFICATION	1.905694141030046E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999729834854711	WITHOUT_CLASSIFICATION	2.7016514528852125E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998907646709	WITHOUT_CLASSIFICATION	1.0923532918035525E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999876992033965	WITHOUT_CLASSIFICATION	1.2300796603549921E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999890404196274	WITHOUT_CLASSIFICATION	1.0959580372523587E-5	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999330829573204	WITHOUT_CLASSIFICATION	6.691704267965303E-5	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999165392901591	WITHOUT_CLASSIFICATION	8.346070984094375E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999867900700903	WITHOUT_CLASSIFICATION	1.320992990971648E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995558283310648	WITHOUT_CLASSIFICATION	4.4417166893517715E-4	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9990489034194031	DESIGN	9.510965805968472E-4	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.7256473067821713	WITHOUT_CLASSIFICATION	0.2743526932178286	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999657912046	WITHOUT_CLASSIFICATION	3.420879547253422E-8	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9838856187149468	WITHOUT_CLASSIFICATION	0.016114381285053152	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.99990440600826	WITHOUT_CLASSIFICATION	9.559399173996706E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.71979093402503	DESIGN	0.28020906597497003	WITHOUT_CLASSIFICATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999993060577378	WITHOUT_CLASSIFICATION	6.939422622571143E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999947828598094	WITHOUT_CLASSIFICATION	5.217140190672726E-6	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.99996719645888	WITHOUT_CLASSIFICATION	3.280354111995623E-5	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999995458215217	WITHOUT_CLASSIFICATION	4.5417847820593864E-7	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999993765099887	WITHOUT_CLASSIFICATION	6.234900112586426E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998140856384464	WITHOUT_CLASSIFICATION	0.0018591436155360362	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.99999992182802	WITHOUT_CLASSIFICATION	7.817198006418476E-8	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999975011505945	WITHOUT_CLASSIFICATION	2.4988494054056776E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999975011505945	WITHOUT_CLASSIFICATION	2.4988494054056776E-6	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9992885382914334	WITHOUT_CLASSIFICATION	7.114617085665774E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9491738117408934	WITHOUT_CLASSIFICATION	0.05082618825910657	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999911454994506	WITHOUT_CLASSIFICATION	8.85450054950385E-6	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999888466121553	WITHOUT_CLASSIFICATION	1.1153387844741935E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999977888567408	WITHOUT_CLASSIFICATION	2.211143259198142E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9950868104265503	WITHOUT_CLASSIFICATION	0.004913189573449713	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9238654723107766	WITHOUT_CLASSIFICATION	0.07613452768922344	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.6541053483505063	WITHOUT_CLASSIFICATION	0.34589465164949373	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.941428862821112	DESIGN	0.05857113717888786	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.941428862821112	DESIGN	0.05857113717888786	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9999681084117866	WITHOUT_CLASSIFICATION	3.1891588213462764E-5	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996134007215549	WITHOUT_CLASSIFICATION	3.8659927844519247E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.5573471008039703	DESIGN	0.4426528991960297	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992416933193	DESIGN	7.583066807021038E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992416933193	DESIGN	7.583066807021038E-6	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999984589136	DESIGN	1.5410863669555825E-9	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999984589136	DESIGN	1.5410863669555825E-9	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9998453592750264	DESIGN	1.5464072497363012E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9957174786221248	DESIGN	0.004282521377875173	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9957174786221248	DESIGN	0.004282521377875173	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.999999911450645	DESIGN	8.854935494464714E-8	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9996134007215549	WITHOUT_CLASSIFICATION	3.8659927844519247E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.6586326825369041	WITHOUT_CLASSIFICATION	0.3413673174630958	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999768040255629	WITHOUT_CLASSIFICATION	2.3195974437174492E-5	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999941141446621	WITHOUT_CLASSIFICATION	5.885855337924448E-6	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.8131569529646212	WITHOUT_CLASSIFICATION	0.18684304703537882	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.9940476365388635	DESIGN	0.005952363461136586	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.982056869909411	WITHOUT_CLASSIFICATION	0.017943130090589076	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999989628587292	WITHOUT_CLASSIFICATION	1.0371412707908412E-6	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9617116559749745	WITHOUT_CLASSIFICATION	0.03828834402502538	DESIGN
// todo : what else to do here?	DESIGN	0.9950868104265503	WITHOUT_CLASSIFICATION	0.004913189573449713	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9998176527516884	WITHOUT_CLASSIFICATION	1.823472483115141E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9950868104265503	WITHOUT_CLASSIFICATION	0.004913189573449713	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.958182772802136	WITHOUT_CLASSIFICATION	0.041817227197863904	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9849577840293819	WITHOUT_CLASSIFICATION	0.015042215970617976	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999891292312622	DESIGN	1.0870768737970528E-5	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9238654723107766	WITHOUT_CLASSIFICATION	0.07613452768922344	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9141740105278277	DESIGN	0.08582598947217236	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9999662687413777	WITHOUT_CLASSIFICATION	3.3731258622356786E-5	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.5954852637681383	DESIGN	0.4045147362318617	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8537638401932958	WITHOUT_CLASSIFICATION	0.14623615980670424	DESIGN
// todo : what is the implication of this?	DESIGN	0.7027534391585932	WITHOUT_CLASSIFICATION	0.29724656084140677	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9068780103988228	WITHOUT_CLASSIFICATION	0.09312198960117732	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9845874690929539	DESIGN	0.015412530907046041	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9995385884382911	DESIGN	4.6141156170879407E-4	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9976345842398135	WITHOUT_CLASSIFICATION	0.002365415760186451	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6689145075543098	DESIGN	0.33108549244569035	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9662110491137935	DESIGN	0.03378895088620647	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9979976230436362	DESIGN	0.002002376956363775	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9797597003372402	DESIGN	0.020240299662759753	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9930179519442326	DESIGN	0.006982048055767425	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9994748001806196	DESIGN	5.251998193803201E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999875754654	DESIGN	1.2424534496964567E-8	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.5788862957155361	WITHOUT_CLASSIFICATION	0.4211137042844638	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.5788862957155361	WITHOUT_CLASSIFICATION	0.4211137042844638	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9976381227726654	DESIGN	0.0023618772273346945	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9550566053763714	WITHOUT_CLASSIFICATION	0.044943394623628584	DESIGN
//TODO possibly relax that	DESIGN	0.732431388623418	DESIGN	0.2675686113765821	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.732431388623418	DESIGN	0.2675686113765821	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.732431388623418	DESIGN	0.2675686113765821	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9994748001806196	DESIGN	5.251998193803201E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9977993084178531	WITHOUT_CLASSIFICATION	0.002200691582146895	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.602340786203235	WITHOUT_CLASSIFICATION	0.397659213796765	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9908442569825496	DESIGN	0.009155743017450268	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9995803172307862	WITHOUT_CLASSIFICATION	4.1968276921381905E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5383292702929537	DESIGN	0.46167072970704637	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8994338201562783	WITHOUT_CLASSIFICATION	0.1005661798437218	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.941428862821112	DESIGN	0.05857113717888786	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.941428862821112	DESIGN	0.05857113717888786	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9605993519252606	WITHOUT_CLASSIFICATION	0.03940064807473941	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.941428862821112	DESIGN	0.05857113717888786	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999999705016922	DESIGN	2.9498307865129527E-8	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9968654238542293	WITHOUT_CLASSIFICATION	0.0031345761457706885	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.8597718765128736	DESIGN	0.14022812348712643	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9995504190886025	WITHOUT_CLASSIFICATION	4.4958091139746145E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9088954514092297	WITHOUT_CLASSIFICATION	0.09110454859077033	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9905252592939109	WITHOUT_CLASSIFICATION	0.009474740706089148	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9956933034318781	WITHOUT_CLASSIFICATION	0.004306696568121875	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999985933649048	WITHOUT_CLASSIFICATION	1.4066350951022269E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9984062868778963	WITHOUT_CLASSIFICATION	0.0015937131221037048	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9998879468383469	WITHOUT_CLASSIFICATION	1.1205316165313214E-4	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9976417987936701	WITHOUT_CLASSIFICATION	0.002358201206329918	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9930904181629585	WITHOUT_CLASSIFICATION	0.00690958183704145	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9569787110193476	WITHOUT_CLASSIFICATION	0.043021288980652356	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.979243116644829	WITHOUT_CLASSIFICATION	0.020756883355170945	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9915597708355469	WITHOUT_CLASSIFICATION	0.008440229164453188	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.998746631348816	DESIGN	0.0012533686511838982	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999761638969973	WITHOUT_CLASSIFICATION	2.3836103002704714E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6496814334075475	WITHOUT_CLASSIFICATION	0.3503185665924525	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9762888276377293	DESIGN	0.023711172362270702	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.7941598142417801	DESIGN	0.20584018575822002	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9775425950155066	DESIGN	0.022457404984493477	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9997900220429973	WITHOUT_CLASSIFICATION	2.0997795700276582E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9998405511377625	WITHOUT_CLASSIFICATION	1.5944886223753142E-4	DESIGN
//I suppose?	DESIGN	0.9907061702315302	WITHOUT_CLASSIFICATION	0.009293829768469777	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9996070694142386	DESIGN	3.929305857613662E-4	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.7304684983330776	WITHOUT_CLASSIFICATION	0.2695315016669224	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9990891952600081	DESIGN	9.108047399920751E-4	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9998836167286834	WITHOUT_CLASSIFICATION	1.1638327131657346E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9984934999720884	DESIGN	0.0015065000279116789	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.999278173173578	DESIGN	7.218268264221039E-4	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9992987406700327	WITHOUT_CLASSIFICATION	7.012593299673246E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999875702523867	DESIGN	1.2429747613188542E-5	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999875702523867	DESIGN	1.2429747613188542E-5	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9983053315839322	DESIGN	0.0016946684160678489	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8406306706596134	WITHOUT_CLASSIFICATION	0.15936932934038664	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.8406306706596134	WITHOUT_CLASSIFICATION	0.15936932934038664	DESIGN
//TODO: ugly here:	DESIGN	0.9998118975666294	DESIGN	1.8810243337058586E-4	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9848883117511773	WITHOUT_CLASSIFICATION	0.015111688248822742	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9968157723929734	DESIGN	0.0031842276070266377	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9452779677870636	DESIGN	0.05472203221293634	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9956043676655562	WITHOUT_CLASSIFICATION	0.004395632334443816	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9998155144717703	DESIGN	1.8448552822971045E-4	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.8423337908082819	DESIGN	0.15766620919171806	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9975970410483298	DESIGN	0.002402958951670314	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9998251777759101	DESIGN	1.7482222408985777E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9886195892825753	DESIGN	0.011380410717424608	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.7552489246574992	WITHOUT_CLASSIFICATION	0.24475107534250096	DESIGN
//TODO: suck into event class	DESIGN	0.9999442793700104	DESIGN	5.572062998956193E-5	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.5762002932296816	DESIGN	0.4237997067703185	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999970378710943	DESIGN	2.962128905784828E-6	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999697778034771	DESIGN	3.022219652285324E-5	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9991746353866033	DESIGN	8.253646133967084E-4	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999800660281056	WITHOUT_CLASSIFICATION	1.993397189438988E-5	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.7617351779653785	WITHOUT_CLASSIFICATION	0.23826482203462152	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9960201477930269	DESIGN	0.003979852206973019	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9472631005064606	WITHOUT_CLASSIFICATION	0.05273689949353944	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9975391017924291	DESIGN	0.0024608982075709925	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9659525594389433	DESIGN	0.03404744056105668	WITHOUT_CLASSIFICATION
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.999348018134009	DESIGN	6.519818659909812E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9834171437182355	DESIGN	0.01658285628176449	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.999999986917579	DESIGN	1.3082420986094129E-8	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9945764305207199	DESIGN	0.005423569479280214	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9823816227340759	WITHOUT_CLASSIFICATION	0.01761837726592399	DESIGN
//TODO: merge into one method!	DESIGN	0.9684258095290801	DESIGN	0.03157419047091988	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9879338329741834	DESIGN	0.012066167025816643	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999999495891101	DESIGN	5.041088987840084E-8	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999932463106983	DESIGN	6.753689301699693E-6	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.7794998740945178	DESIGN	0.22050012590548218	WITHOUT_CLASSIFICATION
// TODO : better way?!?	DESIGN	0.9999999962280702	DESIGN	3.7719297899046616E-9	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999993486123709	WITHOUT_CLASSIFICATION	6.513876290506482E-7	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9973032978069931	DESIGN	0.0026967021930068683	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999940389791	DESIGN	5.961020928707284E-9	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999913943297	DESIGN	8.605670325215116E-9	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9678753505623756	DESIGN	0.032124649437624435	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9814297228913174	DESIGN	0.018570277108682556	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999999958006902	WITHOUT_CLASSIFICATION	4.199309747969728E-9	DESIGN
//yuck!	DESIGN	0.9605993519252606	WITHOUT_CLASSIFICATION	0.03940064807473941	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9960002623975075	WITHOUT_CLASSIFICATION	0.003999737602492521	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9995235286285118	DESIGN	4.7647137148818474E-4	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9997867722096611	WITHOUT_CLASSIFICATION	2.1322779033881774E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999952523075	DESIGN	4.747692505070935E-9	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999684718540451	DESIGN	3.1528145954896546E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999998440431117	DESIGN	1.5595688832321585E-7	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.941428862821112	DESIGN	0.05857113717888786	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9988972583605802	WITHOUT_CLASSIFICATION	0.0011027416394198029	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9698265842738844	WITHOUT_CLASSIFICATION	0.030173415726115663	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999693675454392	DESIGN	3.063245456077368E-5	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9998767038540155	WITHOUT_CLASSIFICATION	1.2329614598453198E-4	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9345321706911173	WITHOUT_CLASSIFICATION	0.06546782930888265	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999996121138944	DESIGN	3.8788610548763985E-7	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.7463853937634507	DESIGN	0.25361460623654936	WITHOUT_CLASSIFICATION
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999816461824964	DESIGN	1.8353817503635277E-5	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9969438696363384	DESIGN	0.0030561303636616574	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999269460331842	DESIGN	7.305396681580388E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.7530675925749054	DESIGN	0.2469324074250946	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9996869530096467	WITHOUT_CLASSIFICATION	3.1304699035337573E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9706230279860103	DESIGN	0.0293769720139897	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.999999707386147	DESIGN	2.926138530540323E-7	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9683841202948106	WITHOUT_CLASSIFICATION	0.03161587970518944	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.7774947024661247	DESIGN	0.22250529753387535	WITHOUT_CLASSIFICATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.6729097610737469	WITHOUT_CLASSIFICATION	0.327090238926253	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.5482130728047667	WITHOUT_CLASSIFICATION	0.45178692719523333	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9999970973667318	DESIGN	2.902633268191421E-6	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9996120160469135	DESIGN	3.8798395308653255E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999999965915016	DESIGN	3.4084984203192404E-9	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9595284208670207	WITHOUT_CLASSIFICATION	0.0404715791329792	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9999792321650571	DESIGN	2.07678349428164E-5	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9561071031988182	DESIGN	0.04389289680118179	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9926690890871285	DESIGN	0.007330910912871591	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9969842731447821	WITHOUT_CLASSIFICATION	0.003015726855217777	DESIGN
// short-circuit for performance...	DESIGN	0.9999799360326517	WITHOUT_CLASSIFICATION	2.006396734836757E-5	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9999566028788048	WITHOUT_CLASSIFICATION	4.339712119523396E-5	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9654034020037068	DESIGN	0.034596597996293124	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.8154260764599699	DESIGN	0.18457392354003016	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999999572398	DESIGN	4.276027463346399E-11	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9944142585568395	DESIGN	0.005585741443160448	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9997829876952457	DESIGN	2.1701230475433292E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9098491049459183	DESIGN	0.09015089505408172	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9653656890381567	WITHOUT_CLASSIFICATION	0.03463431096184332	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9939064320499339	DESIGN	0.00609356795006605	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.6495438116260674	WITHOUT_CLASSIFICATION	0.3504561883739326	DESIGN
//use of trim() here is ugly?	DESIGN	0.5813981015810196	WITHOUT_CLASSIFICATION	0.41860189841898054	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9995201533017456	DESIGN	4.798466982544706E-4	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9957816049163404	WITHOUT_CLASSIFICATION	0.004218395083659683	DESIGN
//TODO: inefficient	DESIGN	0.9929909834642181	DESIGN	0.007009016535781922	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.750908117983182	DESIGN	0.2490918820168181	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999997881791388	DESIGN	2.118208612739825E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999997812827994	DESIGN	2.1871720064006476E-7	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999356946597531	DESIGN	6.430534024699565E-5	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999961429624267	DESIGN	3.857037573282008E-6	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999626468129228	WITHOUT_CLASSIFICATION	3.7353187077279855E-5	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9640922116070689	DESIGN	0.03590778839293107	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.993055509013233	DESIGN	0.006944490986766942	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.5782656491148557	DESIGN	0.4217343508851444	WITHOUT_CLASSIFICATION
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9997558860182306	DESIGN	2.4411398176943673E-4	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999867455233	DESIGN	1.3254476724497255E-8	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.5715913996155688	WITHOUT_CLASSIFICATION	0.4284086003844313	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9999840524338323	DESIGN	1.594756616779126E-5	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8582019036230328	WITHOUT_CLASSIFICATION	0.14179809637696722	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9151143051662459	WITHOUT_CLASSIFICATION	0.08488569483375406	DESIGN
//create an index on the key columns??	DESIGN	0.9999979739293285	WITHOUT_CLASSIFICATION	2.026070671548485E-6	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9800704953835104	DESIGN	0.019929504616489527	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999979739293285	WITHOUT_CLASSIFICATION	2.026070671548485E-6	DESIGN
//TODO: improve this hack!	DESIGN	0.9999999141400608	DESIGN	8.585993922613013E-8	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999820865196869	WITHOUT_CLASSIFICATION	1.791348031308969E-5	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9910823654913179	DESIGN	0.008917634508682127	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9993780195773907	WITHOUT_CLASSIFICATION	6.219804226092828E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9979187003610972	WITHOUT_CLASSIFICATION	0.002081299638902871	DESIGN
// create an index on the key columns??	DESIGN	0.9999997648393251	WITHOUT_CLASSIFICATION	2.3516067482025663E-7	DESIGN
// todo : remove	DESIGN	0.9841179870785057	WITHOUT_CLASSIFICATION	0.01588201292149426	DESIGN
// todo : remove	DESIGN	0.9841179870785057	WITHOUT_CLASSIFICATION	0.01588201292149426	DESIGN
// todo : remove	DESIGN	0.9841179870785057	WITHOUT_CLASSIFICATION	0.01588201292149426	DESIGN
// todo : throw exception?	DESIGN	0.8424783334817608	WITHOUT_CLASSIFICATION	0.15752166651823915	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.6965693697519865	DESIGN	0.3034306302480135	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9975163109844469	DESIGN	0.0024836890155531684	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999952935992464	DESIGN	4.706400753611379E-6	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.6861272549520984	DESIGN	0.31387274504790175	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999968803785942	DESIGN	3.119621405653915E-6	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.5189460220752767	WITHOUT_CLASSIFICATION	0.4810539779247232	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.5277955087540311	WITHOUT_CLASSIFICATION	0.4722044912459688	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9034264133793565	DESIGN	0.09657358662064351	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9801712039595366	WITHOUT_CLASSIFICATION	0.01982879604046346	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9830811702759032	DESIGN	0.01691882972409683	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9896182069589377	DESIGN	0.010381793041062399	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999826991912	DESIGN	1.7300808788574398E-8	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.5200860389368893	DESIGN	0.4799139610631106	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9409054896960554	DESIGN	0.059094510303944595	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.7978097874745821	WITHOUT_CLASSIFICATION	0.202190212525418	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6746359690242584	WITHOUT_CLASSIFICATION	0.32536403097574174	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6108472929016978	WITHOUT_CLASSIFICATION	0.3891527070983023	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9998941352578665	DESIGN	1.0586474213347742E-4	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9991013948472254	DESIGN	8.986051527745439E-4	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.999786160614087	DESIGN	2.138393859131204E-4	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9517377038801983	DESIGN	0.04826229611980166	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999997891087302	DESIGN	2.108912697251449E-7	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9911362701158781	WITHOUT_CLASSIFICATION	0.008863729884121825	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.8878228110099728	DESIGN	0.11217718899002715	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9998444595991376	DESIGN	1.5554040086251396E-4	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9990178779073255	DESIGN	9.821220926744235E-4	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.999503799728537	DESIGN	4.962002714630345E-4	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999944158774356	DESIGN	5.584122564394387E-6	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9439814709055299	WITHOUT_CLASSIFICATION	0.05601852909447001	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9999413998683726	WITHOUT_CLASSIFICATION	5.860013162740662E-5	DESIGN
//is this ok?	DESIGN	0.9931136296361925	WITHOUT_CLASSIFICATION	0.006886370363807436	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999275182354	DESIGN	7.24817645499502E-8	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9998902170485796	DESIGN	1.0978295142039017E-4	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.7650637965128678	WITHOUT_CLASSIFICATION	0.23493620348713215	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999999959637942	DESIGN	4.0362057578687756E-9	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9098491049459183	DESIGN	0.09015089505408172	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.99970281636925	DESIGN	2.9718363074998416E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.99999986315057	DESIGN	1.368494300021976E-7	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9989102354966433	DESIGN	0.0010897645033567493	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9902233451212046	WITHOUT_CLASSIFICATION	0.009776654878795515	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.999977066494598	DESIGN	2.2933505401933912E-5	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999319760950229	DESIGN	6.802390497711883E-5	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9002521717968639	WITHOUT_CLASSIFICATION	0.09974782820313605	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9985267876448334	DESIGN	0.001473212355166567	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.7663444117222439	DESIGN	0.2336555882777561	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9951422450039795	DESIGN	0.004857754996020495	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9052811303606999	DESIGN	0.09471886963930007	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9947106279848956	DESIGN	0.005289372015104404	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.999990158688933	DESIGN	9.841311066879043E-6	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.875085436020361	WITHOUT_CLASSIFICATION	0.12491456397963893	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9647899116996638	DESIGN	0.03521008830033622	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.830188711740443	DESIGN	0.16981128825955707	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9967665676889317	DESIGN	0.003233432311068202	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999997884	DESIGN	2.1150428395559977E-13	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999996977264133	DESIGN	3.022735867505534E-7	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9992553757764986	WITHOUT_CLASSIFICATION	7.446242235014328E-4	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999994249035663	DESIGN	5.750964337437023E-7	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9920203109239767	DESIGN	0.00797968907602332	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999881902831226	DESIGN	1.1809716877363578E-5	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9998753506396522	WITHOUT_CLASSIFICATION	1.2464936034789622E-4	DESIGN
// short cut check...	DESIGN	0.999442397523991	WITHOUT_CLASSIFICATION	5.576024760090189E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9871279632651305	WITHOUT_CLASSIFICATION	0.012872036734869544	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9999309313364328	DESIGN	6.906866356722437E-5	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9998256970099898	DESIGN	1.743029900101712E-4	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999997580429	DESIGN	2.419570807927991E-10	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.999920938450251	DESIGN	7.906154974910977E-5	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9811665244307297	WITHOUT_CLASSIFICATION	0.018833475569270206	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.5550215616746017	WITHOUT_CLASSIFICATION	0.4449784383253984	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.8145966113500553	WITHOUT_CLASSIFICATION	0.18540338864994457	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999993204429	DESIGN	6.795571526579754E-10	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9968723084912288	WITHOUT_CLASSIFICATION	0.0031276915087712362	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9999358920985826	DESIGN	6.41079014174112E-5	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9999782433509448	WITHOUT_CLASSIFICATION	2.1756649055322014E-5	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9915197228206193	DESIGN	0.008480277179380645	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999976094583414	WITHOUT_CLASSIFICATION	2.3905416586426637E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.8577278178327525	WITHOUT_CLASSIFICATION	0.14227218216724757	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999993709467	DESIGN	6.290532890998273E-10	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999757366421616	DESIGN	2.4263357838442093E-5	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.6728214901295682	DESIGN	0.32717850987043184	WITHOUT_CLASSIFICATION
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9628733766543573	WITHOUT_CLASSIFICATION	0.037126623345642686	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.993201809514471	WITHOUT_CLASSIFICATION	0.006798190485529021	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9957118814332365	DESIGN	0.004288118566763571	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999996450859852	DESIGN	3.5491401487824796E-7	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.7820059702660284	WITHOUT_CLASSIFICATION	0.21799402973397172	DESIGN
// todo : remove	DESIGN	0.9841179870785057	WITHOUT_CLASSIFICATION	0.01588201292149426	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.994540910745409	DESIGN	0.005459089254591039	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9997920916155275	DESIGN	2.0790838447250123E-4	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.99998518279216	DESIGN	1.4817207839966445E-5	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9508670713133512	WITHOUT_CLASSIFICATION	0.04913292868664882	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999983112194606	DESIGN	1.6887805393881353E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9414784942309197	DESIGN	0.05852150576908044	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.6001686161092236	DESIGN	0.39983138389077644	WITHOUT_CLASSIFICATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9985016944761033	DESIGN	0.001498305523896763	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9999828847879102	DESIGN	1.7115212089818697E-5	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9764703108027675	DESIGN	0.023529689197232515	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9975938333539675	DESIGN	0.0024061666460325733	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.5781278647483576	DESIGN	0.4218721352516424	WITHOUT_CLASSIFICATION
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9975727130799911	DESIGN	0.002427286920008864	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999998776789852	WITHOUT_CLASSIFICATION	1.2232101486388083E-7	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999948623264097	DESIGN	5.137673590404411E-6	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.5702030063726856	DESIGN	0.4297969936273143	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999994598970753	DESIGN	5.401029247517522E-7	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9652560023727176	WITHOUT_CLASSIFICATION	0.034743997627282336	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9935267082275877	DESIGN	0.006473291772412232	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9960779592427179	DESIGN	0.003922040757282038	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9910260481680204	DESIGN	0.008973951831979616	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999810965	DESIGN	1.8903431703801642E-11	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999994754792	DESIGN	5.245207824364997E-10	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.5364280365681532	DESIGN	0.4635719634318467	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999841925478129	DESIGN	1.5807452187022658E-5	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9761015769917522	DESIGN	0.02389842300824775	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999414887736702	WITHOUT_CLASSIFICATION	5.851122632985445E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.999999851868369	WITHOUT_CLASSIFICATION	1.4813163086831706E-7	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999534204	DESIGN	4.657957489382111E-11	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9991259276620198	DESIGN	8.740723379802261E-4	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.99999496739053	DESIGN	5.032609470132898E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9997594578735757	DESIGN	2.4054212642436753E-4	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9995698186887997	DESIGN	4.301813112002715E-4	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9310602104236412	DESIGN	0.06893978957635878	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9990178779073255	DESIGN	9.821220926744235E-4	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6121048988616151	WITHOUT_CLASSIFICATION	0.38789510113838493	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999998319131547	DESIGN	1.680868453544382E-7	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9439814709055299	WITHOUT_CLASSIFICATION	0.05601852909447001	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9998902170485796	DESIGN	1.0978295142039017E-4	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9947020666177049	DESIGN	0.005297933382295098	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992416933193	DESIGN	7.583066807021038E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992416933193	DESIGN	7.583066807021038E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999992416933193	DESIGN	7.583066807021038E-6	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999999406963967	DESIGN	5.930360321328382E-8	WITHOUT_CLASSIFICATION
