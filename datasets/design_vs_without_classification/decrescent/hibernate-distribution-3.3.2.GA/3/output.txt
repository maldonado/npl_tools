test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999956036210254	WITHOUT_CLASSIFICATION	4.396378974624025E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.99975598014972	WITHOUT_CLASSIFICATION	2.4401985027994747E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.99975598014972	WITHOUT_CLASSIFICATION	2.4401985027994747E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9998013822497507	WITHOUT_CLASSIFICATION	1.9861775024940882E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999864804489025	WITHOUT_CLASSIFICATION	1.3519551097593736E-5	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999213150168346	WITHOUT_CLASSIFICATION	7.868498316546611E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999844123685687	WITHOUT_CLASSIFICATION	1.558763143127749E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999844123685687	WITHOUT_CLASSIFICATION	1.558763143127749E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999973305787655	WITHOUT_CLASSIFICATION	2.6694212344649435E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999945821298846	WITHOUT_CLASSIFICATION	5.417870115396355E-6	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999994148337952	WITHOUT_CLASSIFICATION	5.851662048115685E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999975481979121	WITHOUT_CLASSIFICATION	2.4518020879376613E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999212517174745	WITHOUT_CLASSIFICATION	7.874828252553217E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999212517174745	WITHOUT_CLASSIFICATION	7.874828252553217E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993298789790325	WITHOUT_CLASSIFICATION	6.70121020967537E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9975750688096389	WITHOUT_CLASSIFICATION	0.0024249311903610797	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9998963846508581	WITHOUT_CLASSIFICATION	1.0361534914192311E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999991884595796	WITHOUT_CLASSIFICATION	8.115404203641233E-7	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999972982170482	WITHOUT_CLASSIFICATION	2.7017829518167793E-6	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9987780649342607	WITHOUT_CLASSIFICATION	0.0012219350657393332	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9999046068785209	WITHOUT_CLASSIFICATION	9.539312147909993E-5	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999722236130615	WITHOUT_CLASSIFICATION	2.7776386938572386E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277066912404	WITHOUT_CLASSIFICATION	7.229330875952249E-5	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999993740247516	WITHOUT_CLASSIFICATION	6.2597524838335E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999472637496284	WITHOUT_CLASSIFICATION	5.2736250371626336E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999103443001347	WITHOUT_CLASSIFICATION	8.965569986526976E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999719904323581	WITHOUT_CLASSIFICATION	2.8009567641914215E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999047708002214	WITHOUT_CLASSIFICATION	9.52291997786207E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999047708002214	WITHOUT_CLASSIFICATION	9.52291997786207E-5	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999847304216917	WITHOUT_CLASSIFICATION	1.52695783083195E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999896124853624	WITHOUT_CLASSIFICATION	1.038751463759149E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999802502269782	WITHOUT_CLASSIFICATION	1.9749773021693816E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999835454233074	WITHOUT_CLASSIFICATION	1.6454576692544645E-5	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.8459521268384514	WITHOUT_CLASSIFICATION	0.15404787316154847	DESIGN
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999987874530032	WITHOUT_CLASSIFICATION	1.2125469967981507E-6	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9991381254275221	WITHOUT_CLASSIFICATION	8.618745724778278E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999488696422125	WITHOUT_CLASSIFICATION	5.113035778738387E-5	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9999209352087371	WITHOUT_CLASSIFICATION	7.906479126294202E-5	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999985920626138	WITHOUT_CLASSIFICATION	1.4079373861653353E-6	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999864218243	WITHOUT_CLASSIFICATION	1.3578175620850406E-8	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9998562186250731	WITHOUT_CLASSIFICATION	1.4378137492681407E-4	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999998425127571	WITHOUT_CLASSIFICATION	1.5748724289890883E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996068607800351	WITHOUT_CLASSIFICATION	3.931392199648146E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9998917494878015	WITHOUT_CLASSIFICATION	1.0825051219847553E-4	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934304100125	WITHOUT_CLASSIFICATION	6.569589987406608E-6	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886817959481	WITHOUT_CLASSIFICATION	1.1318204051846748E-5	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999997974202518	WITHOUT_CLASSIFICATION	2.0257974818212597E-7	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999610486790208	WITHOUT_CLASSIFICATION	3.895132097908421E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999778688491172	WITHOUT_CLASSIFICATION	2.213115088282377E-5	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9890165698696605	WITHOUT_CLASSIFICATION	0.010983430130339486	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999039573377229	WITHOUT_CLASSIFICATION	9.604266227721338E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999778688491172	WITHOUT_CLASSIFICATION	2.213115088282377E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999039573377229	WITHOUT_CLASSIFICATION	9.604266227721338E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999974137871753	WITHOUT_CLASSIFICATION	2.5862128247628085E-6	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9868915318876399	WITHOUT_CLASSIFICATION	0.01310846811236002	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999895333531598	WITHOUT_CLASSIFICATION	1.0466646840167972E-5	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999647635684846	WITHOUT_CLASSIFICATION	3.52364315154192E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.98756673368414	WITHOUT_CLASSIFICATION	0.012433266315859996	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999700809969861	WITHOUT_CLASSIFICATION	2.9919003013890694E-5	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999947402738704	WITHOUT_CLASSIFICATION	5.259726129609933E-6	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.7770130447930986	WITHOUT_CLASSIFICATION	0.22298695520690137	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999708001522479	WITHOUT_CLASSIFICATION	2.919984775211023E-5	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9999914354373635	WITHOUT_CLASSIFICATION	8.564562636502077E-6	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999841145615674	WITHOUT_CLASSIFICATION	1.5885438432571408E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999039573377229	WITHOUT_CLASSIFICATION	9.604266227721338E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999925742031	WITHOUT_CLASSIFICATION	7.425796846760389E-9	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999775195895642	WITHOUT_CLASSIFICATION	2.2480410435826956E-5	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9973785614036872	WITHOUT_CLASSIFICATION	0.0026214385963128604	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999888702681892	WITHOUT_CLASSIFICATION	1.112973181092549E-5	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999910573112615	WITHOUT_CLASSIFICATION	8.942688738500057E-5	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999242633225182	WITHOUT_CLASSIFICATION	7.573667748183008E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998517653155182	WITHOUT_CLASSIFICATION	1.482346844816814E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999874905929947	WITHOUT_CLASSIFICATION	1.2509407005246351E-5	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9995117234637176	WITHOUT_CLASSIFICATION	4.882765362823407E-4	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999993227772	WITHOUT_CLASSIFICATION	6.7722279995494E-7	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996955963210546	WITHOUT_CLASSIFICATION	3.0440367894536176E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999981394359178	WITHOUT_CLASSIFICATION	1.8605640822310828E-6	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9993689825913195	WITHOUT_CLASSIFICATION	6.310174086806176E-4	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999681199778954	WITHOUT_CLASSIFICATION	3.1880022104609396E-5	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999976637347233	WITHOUT_CLASSIFICATION	2.3362652766140517E-6	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.7867909781947684	WITHOUT_CLASSIFICATION	0.21320902180523155	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999961049094171	WITHOUT_CLASSIFICATION	3.8950905828697674E-6	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999998121361781	WITHOUT_CLASSIFICATION	1.8786382202561738E-7	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999466406576	WITHOUT_CLASSIFICATION	5.33593423172105E-8	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999563987769	WITHOUT_CLASSIFICATION	4.3601223152230796E-8	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999659079807761	WITHOUT_CLASSIFICATION	3.4092019223773755E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9989451639974569	WITHOUT_CLASSIFICATION	0.0010548360025431664	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999979230932976	WITHOUT_CLASSIFICATION	2.076906702382903E-6	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999807301756	WITHOUT_CLASSIFICATION	1.926982434725647E-8	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9989451639974569	WITHOUT_CLASSIFICATION	0.0010548360025431664	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999996688550534	WITHOUT_CLASSIFICATION	3.3114494652973285E-7	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999016317369823	WITHOUT_CLASSIFICATION	9.836826301770818E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999778688491172	WITHOUT_CLASSIFICATION	2.213115088282377E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999947412667799	WITHOUT_CLASSIFICATION	5.258733220093582E-6	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999941648016111	WITHOUT_CLASSIFICATION	5.835198388869129E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999981041000635	WITHOUT_CLASSIFICATION	1.8958999363999604E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999981041000635	WITHOUT_CLASSIFICATION	1.8958999363999604E-6	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999941100514149	WITHOUT_CLASSIFICATION	5.889948585090355E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.986163118695812	WITHOUT_CLASSIFICATION	0.013836881304188111	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999245947889	WITHOUT_CLASSIFICATION	7.540521106487361E-8	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999339146584	WITHOUT_CLASSIFICATION	6.608534163306629E-8	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999979462773305	WITHOUT_CLASSIFICATION	2.0537226695120127E-6	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9997572536596917	WITHOUT_CLASSIFICATION	2.4274634030835393E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999996258086158	WITHOUT_CLASSIFICATION	3.7419138416297235E-7	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999854471047469	WITHOUT_CLASSIFICATION	1.455289525298517E-5	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999290889899178	WITHOUT_CLASSIFICATION	7.09110100822588E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999948759195055	WITHOUT_CLASSIFICATION	5.124080494579999E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999754902387441	WITHOUT_CLASSIFICATION	2.450976125590388E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999754902387441	WITHOUT_CLASSIFICATION	2.450976125590388E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999011600883494	WITHOUT_CLASSIFICATION	9.883991165057673E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998222829921	WITHOUT_CLASSIFICATION	1.777170079925724E-7	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999288150547397	WITHOUT_CLASSIFICATION	7.118494526026969E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.999754902387441	WITHOUT_CLASSIFICATION	2.450976125590388E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999011600883494	WITHOUT_CLASSIFICATION	9.883991165057673E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999011600883494	WITHOUT_CLASSIFICATION	9.883991165057673E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999604412394325	WITHOUT_CLASSIFICATION	3.9558760567457724E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9928976854458056	WITHOUT_CLASSIFICATION	0.007102314554194335	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999998508284	WITHOUT_CLASSIFICATION	1.491716245510229E-10	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999997130464697	WITHOUT_CLASSIFICATION	2.8695353032871226E-7	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997396288067152	WITHOUT_CLASSIFICATION	2.603711932847651E-4	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9997396288067152	WITHOUT_CLASSIFICATION	2.603711932847651E-4	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999882347249887	WITHOUT_CLASSIFICATION	1.176527501130226E-5	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999727726368909	WITHOUT_CLASSIFICATION	2.72273631091125E-5	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999987013239036	WITHOUT_CLASSIFICATION	1.29867609645127E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999629889700441	WITHOUT_CLASSIFICATION	3.7011029955911024E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999629889700441	WITHOUT_CLASSIFICATION	3.7011029955911024E-5	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999331560582275	WITHOUT_CLASSIFICATION	6.684394177248199E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9993467146160396	WITHOUT_CLASSIFICATION	6.532853839603341E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9943485822764032	WITHOUT_CLASSIFICATION	0.005651417723596817	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999997517764434	WITHOUT_CLASSIFICATION	2.4822355668730537E-7	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9999871861538789	WITHOUT_CLASSIFICATION	1.2813846121107709E-5	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999987682733266	WITHOUT_CLASSIFICATION	1.2317266733376194E-6	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999867283435306	WITHOUT_CLASSIFICATION	1.3271656469392603E-5	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.999760971129005	WITHOUT_CLASSIFICATION	2.390288709948922E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999966772551384	WITHOUT_CLASSIFICATION	3.322744861678126E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9943485822764032	WITHOUT_CLASSIFICATION	0.005651417723596817	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9999217073405349	WITHOUT_CLASSIFICATION	7.829265946518262E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.99993184628342	WITHOUT_CLASSIFICATION	6.815371658002643E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.99993184628342	WITHOUT_CLASSIFICATION	6.815371658002643E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9997380598999033	WITHOUT_CLASSIFICATION	2.6194010009677755E-4	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9470883704740162	WITHOUT_CLASSIFICATION	0.05291162952598379	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999825391694089	WITHOUT_CLASSIFICATION	1.746083059107964E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9994645429253912	WITHOUT_CLASSIFICATION	5.354570746088034E-4	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998957552313209	WITHOUT_CLASSIFICATION	1.0424476867907505E-4	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999770969209201	WITHOUT_CLASSIFICATION	2.2903079079997105E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.999943919334884	WITHOUT_CLASSIFICATION	5.608066511592204E-5	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9999660271617485	WITHOUT_CLASSIFICATION	3.397283825141652E-5	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999999194231897	WITHOUT_CLASSIFICATION	8.057681028347245E-8	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999931207302	WITHOUT_CLASSIFICATION	6.879269805792351E-9	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999931207302	WITHOUT_CLASSIFICATION	6.879269805792351E-9	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999895677082679	WITHOUT_CLASSIFICATION	1.043229173212641E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999956036210254	WITHOUT_CLASSIFICATION	4.396378974624025E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999989812135426	WITHOUT_CLASSIFICATION	1.0187864573999713E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999976916880203	WITHOUT_CLASSIFICATION	2.3083119796926497E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.99975598014972	WITHOUT_CLASSIFICATION	2.4401985027994747E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.999968003698763	WITHOUT_CLASSIFICATION	3.1996301237017274E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999365609377735	WITHOUT_CLASSIFICATION	6.343906222645341E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999480850470696	WITHOUT_CLASSIFICATION	5.1914952930513894E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999988446030524	WITHOUT_CLASSIFICATION	1.1553969475240864E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999636802329892	WITHOUT_CLASSIFICATION	3.631976701069376E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9988674965286766	WITHOUT_CLASSIFICATION	0.0011325034713235312	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995461783518018	WITHOUT_CLASSIFICATION	4.538216481981919E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999689694775474	WITHOUT_CLASSIFICATION	3.103052245256654E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999864804489025	WITHOUT_CLASSIFICATION	1.3519551097593736E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999968230111151	WITHOUT_CLASSIFICATION	3.1769888848186816E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999968230111151	WITHOUT_CLASSIFICATION	3.1769888848186816E-6	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999986540469296	WITHOUT_CLASSIFICATION	1.3459530704003066E-6	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9994795474061469	WITHOUT_CLASSIFICATION	5.204525938531495E-4	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999916606236599	WITHOUT_CLASSIFICATION	8.33937634008859E-6	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999979153320282	WITHOUT_CLASSIFICATION	2.0846679718420995E-6	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999419120164321	WITHOUT_CLASSIFICATION	5.8087983567765246E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9938590573759168	WITHOUT_CLASSIFICATION	0.006140942624083151	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999844123685687	WITHOUT_CLASSIFICATION	1.558763143127749E-5	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9986819803473294	WITHOUT_CLASSIFICATION	0.0013180196526706533	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976078445062	WITHOUT_CLASSIFICATION	2.3921554936811004E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999226220075155	WITHOUT_CLASSIFICATION	7.737799248453843E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999995341252947	WITHOUT_CLASSIFICATION	4.65874705253294E-7	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9998340277991344	WITHOUT_CLASSIFICATION	1.659722008656363E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9998669070387372	WITHOUT_CLASSIFICATION	1.330929612628831E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998353141903598	WITHOUT_CLASSIFICATION	1.6468580964023907E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999973893332396	WITHOUT_CLASSIFICATION	2.6106667604598194E-6	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999907634354528	WITHOUT_CLASSIFICATION	9.236564547155939E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999904514358112	WITHOUT_CLASSIFICATION	9.548564188860165E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.870927697777908	WITHOUT_CLASSIFICATION	0.12907230222209198	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999843004223959	WITHOUT_CLASSIFICATION	1.569957760402384E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999327519826784	WITHOUT_CLASSIFICATION	6.72480173215492E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.99975598014972	WITHOUT_CLASSIFICATION	2.4401985027994747E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.99975598014972	WITHOUT_CLASSIFICATION	2.4401985027994747E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995461783518018	WITHOUT_CLASSIFICATION	4.538216481981919E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999968230111151	WITHOUT_CLASSIFICATION	3.1769888848186816E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998353141903598	WITHOUT_CLASSIFICATION	1.6468580964023907E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999973305787655	WITHOUT_CLASSIFICATION	2.6694212344649435E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999944480485009	WITHOUT_CLASSIFICATION	5.55195149910108E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.999981935063537	WITHOUT_CLASSIFICATION	1.8064936462986995E-5	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999910046847926	WITHOUT_CLASSIFICATION	8.99531520737208E-6	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999975917532977	WITHOUT_CLASSIFICATION	2.4082467022855144E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999989127089144	WITHOUT_CLASSIFICATION	1.0872910855675954E-6	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9997621308254905	WITHOUT_CLASSIFICATION	2.378691745095409E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999917362422162	WITHOUT_CLASSIFICATION	8.263757783781097E-6	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.999768259410788	WITHOUT_CLASSIFICATION	2.3174058921203648E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9999623130035864	WITHOUT_CLASSIFICATION	3.768699641351048E-5	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999984029556389	WITHOUT_CLASSIFICATION	1.5970443611556484E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999984029556389	WITHOUT_CLASSIFICATION	1.5970443611556484E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9996420710874475	WITHOUT_CLASSIFICATION	3.579289125524663E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999940764811303	WITHOUT_CLASSIFICATION	5.923518869772234E-6	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.997767352849974	WITHOUT_CLASSIFICATION	0.002232647150025977	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999785747827444	WITHOUT_CLASSIFICATION	2.1425217255621332E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999952521560034	WITHOUT_CLASSIFICATION	4.747843996594835E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.999999548063476	WITHOUT_CLASSIFICATION	4.5193652404725967E-7	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999699823411764	WITHOUT_CLASSIFICATION	3.0017658823674856E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999945821298846	WITHOUT_CLASSIFICATION	5.417870115396355E-6	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999705780963353	WITHOUT_CLASSIFICATION	2.9421903664664533E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999891390192229	WITHOUT_CLASSIFICATION	1.0860980777015942E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999891390192229	WITHOUT_CLASSIFICATION	1.0860980777015942E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999993045337571	WITHOUT_CLASSIFICATION	6.95466242998937E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999934591481087	WITHOUT_CLASSIFICATION	6.540851891422959E-6	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999994664262377	WITHOUT_CLASSIFICATION	5.335737623363901E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999998066192712	WITHOUT_CLASSIFICATION	1.9338072874221802E-7	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999622202667349	WITHOUT_CLASSIFICATION	3.7779733265233416E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.99975598014972	WITHOUT_CLASSIFICATION	2.4401985027994747E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995461783518018	WITHOUT_CLASSIFICATION	4.538216481981919E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999864804489025	WITHOUT_CLASSIFICATION	1.3519551097593736E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998353141903598	WITHOUT_CLASSIFICATION	1.6468580964023907E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998353141903598	WITHOUT_CLASSIFICATION	1.6468580964023907E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999963072635552	WITHOUT_CLASSIFICATION	3.6927364448491517E-6	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999963072635552	WITHOUT_CLASSIFICATION	3.6927364448491517E-6	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999879272434281	WITHOUT_CLASSIFICATION	1.2072756571899865E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999767668165543	WITHOUT_CLASSIFICATION	2.3233183445684508E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999767668165543	WITHOUT_CLASSIFICATION	2.3233183445684508E-5	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9999207837531515	WITHOUT_CLASSIFICATION	7.921624684846202E-5	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999282907855289	WITHOUT_CLASSIFICATION	7.170921447114618E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999960917006496	WITHOUT_CLASSIFICATION	3.908299350421379E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999955368781953	WITHOUT_CLASSIFICATION	4.463121804652291E-6	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999984434900149	WITHOUT_CLASSIFICATION	1.5565099851048031E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999975481979121	WITHOUT_CLASSIFICATION	2.4518020879376613E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999975481979121	WITHOUT_CLASSIFICATION	2.4518020879376613E-6	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9986790067598655	WITHOUT_CLASSIFICATION	0.0013209932401345161	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999981505098032	WITHOUT_CLASSIFICATION	1.8494901967466158E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.999557693395017	WITHOUT_CLASSIFICATION	4.4230660498305346E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.999707588877249	WITHOUT_CLASSIFICATION	2.924111227510363E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999816430402166	WITHOUT_CLASSIFICATION	1.8356959783351545E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9997416215000917	WITHOUT_CLASSIFICATION	2.5837849990823983E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999212517174745	WITHOUT_CLASSIFICATION	7.874828252553217E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999753393495758	WITHOUT_CLASSIFICATION	2.4660650424171612E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999753393495758	WITHOUT_CLASSIFICATION	2.4660650424171612E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993298789790325	WITHOUT_CLASSIFICATION	6.70121020967537E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993298789790325	WITHOUT_CLASSIFICATION	6.70121020967537E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999845544224388	WITHOUT_CLASSIFICATION	1.544557756118427E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999845544224388	WITHOUT_CLASSIFICATION	1.544557756118427E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999982634218895	WITHOUT_CLASSIFICATION	1.7365781106020257E-6	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999982634218895	WITHOUT_CLASSIFICATION	1.7365781106020257E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999975481979121	WITHOUT_CLASSIFICATION	2.4518020879376613E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999212517174745	WITHOUT_CLASSIFICATION	7.874828252553217E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999753393495758	WITHOUT_CLASSIFICATION	2.4660650424171612E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999753393495758	WITHOUT_CLASSIFICATION	2.4660650424171612E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993298789790325	WITHOUT_CLASSIFICATION	6.70121020967537E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999845544224388	WITHOUT_CLASSIFICATION	1.544557756118427E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999845544224388	WITHOUT_CLASSIFICATION	1.544557756118427E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999982634218895	WITHOUT_CLASSIFICATION	1.7365781106020257E-6	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999748909137283	WITHOUT_CLASSIFICATION	2.510908627179921E-5	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999964537310263	WITHOUT_CLASSIFICATION	3.546268973740338E-6	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999765181896907	WITHOUT_CLASSIFICATION	2.348181030940688E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999949687474108	WITHOUT_CLASSIFICATION	5.031252589261695E-6	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999962947451043	WITHOUT_CLASSIFICATION	3.705254895793762E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9994059659266384	WITHOUT_CLASSIFICATION	5.940340733615898E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996512176284454	WITHOUT_CLASSIFICATION	3.487823715545322E-4	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9987569454975371	WITHOUT_CLASSIFICATION	0.0012430545024628543	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999805677821129	WITHOUT_CLASSIFICATION	1.9432217887038496E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999998994045	WITHOUT_CLASSIFICATION	1.0059550475044761E-10	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999963389875374	WITHOUT_CLASSIFICATION	3.661012462660241E-6	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999993221373663	WITHOUT_CLASSIFICATION	6.778626336572943E-7	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999941100514149	WITHOUT_CLASSIFICATION	5.889948585090355E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9994059659266384	WITHOUT_CLASSIFICATION	5.940340733615898E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9994059659266384	WITHOUT_CLASSIFICATION	5.940340733615898E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9994059659266384	WITHOUT_CLASSIFICATION	5.940340733615898E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9997027801242271	WITHOUT_CLASSIFICATION	2.9721987577292455E-4	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998441160871	WITHOUT_CLASSIFICATION	1.5588391282960802E-7	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999998441160871	WITHOUT_CLASSIFICATION	1.5588391282960802E-7	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999949734726745	WITHOUT_CLASSIFICATION	5.026527325471764E-6	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999979721347655	WITHOUT_CLASSIFICATION	2.027865234456846E-6	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.999999466911118	WITHOUT_CLASSIFICATION	5.330888820694109E-7	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999946340738887	WITHOUT_CLASSIFICATION	5.365926111369379E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999946340738887	WITHOUT_CLASSIFICATION	5.365926111369379E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999972982170482	WITHOUT_CLASSIFICATION	2.7017829518167793E-6	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996915382547376	WITHOUT_CLASSIFICATION	3.0846174526245207E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9996915382547376	WITHOUT_CLASSIFICATION	3.0846174526245207E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998444778882669	WITHOUT_CLASSIFICATION	1.5552211173311804E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999981447084385	WITHOUT_CLASSIFICATION	1.8552915613991914E-6	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999797386525502	WITHOUT_CLASSIFICATION	2.0261347449837684E-5	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999241508310336	WITHOUT_CLASSIFICATION	7.584916896646263E-5	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9998548739270251	WITHOUT_CLASSIFICATION	1.4512607297498888E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.999616607416881	WITHOUT_CLASSIFICATION	3.8339258311899057E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9987780649342607	WITHOUT_CLASSIFICATION	0.0012219350657393332	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999566085937067	WITHOUT_CLASSIFICATION	4.3391406293246136E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9815098925308242	WITHOUT_CLASSIFICATION	0.018490107469175836	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9996375391509538	WITHOUT_CLASSIFICATION	3.624608490462708E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999965344411946	WITHOUT_CLASSIFICATION	3.465558805352722E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277066912404	WITHOUT_CLASSIFICATION	7.229330875952249E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999212849875	WITHOUT_CLASSIFICATION	7.871501250354945E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998172495301	WITHOUT_CLASSIFICATION	1.8275046987351964E-7	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9968779868204984	WITHOUT_CLASSIFICATION	0.0031220131795016057	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277066912404	WITHOUT_CLASSIFICATION	7.229330875952249E-5	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999997128702582	WITHOUT_CLASSIFICATION	2.8712974179944186E-6	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999982887108593	WITHOUT_CLASSIFICATION	1.7112891406362001E-6	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999877361637002	WITHOUT_CLASSIFICATION	1.2263836299703514E-5	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999455677858655	WITHOUT_CLASSIFICATION	5.4432214134467384E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999279961490299	WITHOUT_CLASSIFICATION	7.200385097007165E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999952399565546	WITHOUT_CLASSIFICATION	4.760043445399251E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999803026978538	WITHOUT_CLASSIFICATION	1.96973021462726E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999103443001347	WITHOUT_CLASSIFICATION	8.965569986526976E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999808161599714	WITHOUT_CLASSIFICATION	1.9183840028590127E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999719904323581	WITHOUT_CLASSIFICATION	2.8009567641914215E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999189742859828	WITHOUT_CLASSIFICATION	8.102571401729153E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999984878176089	WITHOUT_CLASSIFICATION	1.512182391050104E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991254279369572	WITHOUT_CLASSIFICATION	8.745720630428244E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9987780649342607	WITHOUT_CLASSIFICATION	0.0012219350657393332	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999808161599714	WITHOUT_CLASSIFICATION	1.9183840028590127E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999189742859828	WITHOUT_CLASSIFICATION	8.102571401729153E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991254279369572	WITHOUT_CLASSIFICATION	8.745720630428244E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999994891735584	WITHOUT_CLASSIFICATION	5.108264415470755E-7	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9998009390830137	WITHOUT_CLASSIFICATION	1.9906091698629984E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999998588434281	WITHOUT_CLASSIFICATION	1.411565719248814E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999047708002214	WITHOUT_CLASSIFICATION	9.52291997786207E-5	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999347495508056	WITHOUT_CLASSIFICATION	6.525044919443406E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.999974907443191	WITHOUT_CLASSIFICATION	2.5092556808997364E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999749571452254	WITHOUT_CLASSIFICATION	2.5042854774533867E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9974873825790096	WITHOUT_CLASSIFICATION	0.002512617420990406	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999491631242465	WITHOUT_CLASSIFICATION	5.083687575345956E-5	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999975345075	WITHOUT_CLASSIFICATION	2.4654925009134736E-9	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999975109422949	WITHOUT_CLASSIFICATION	2.489057704951741E-6	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.999993311601405	WITHOUT_CLASSIFICATION	6.68839859484162E-6	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999989836045	WITHOUT_CLASSIFICATION	1.0163955107725315E-9	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999990883714474	WITHOUT_CLASSIFICATION	9.116285526641334E-7	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9997864647936037	WITHOUT_CLASSIFICATION	2.1353520639631757E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999881302804513	WITHOUT_CLASSIFICATION	1.1869719548651117E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999896124853624	WITHOUT_CLASSIFICATION	1.038751463759149E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999999643279001	WITHOUT_CLASSIFICATION	3.567209984063868E-8	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9999161877754215	WITHOUT_CLASSIFICATION	8.381222457846228E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999808161599714	WITHOUT_CLASSIFICATION	1.9183840028590127E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999842771233892	WITHOUT_CLASSIFICATION	1.5722876610734156E-5	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9997222338451717	WITHOUT_CLASSIFICATION	2.7776615482831866E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999980627547236	WITHOUT_CLASSIFICATION	1.9372452764937844E-6	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998901532150803	WITHOUT_CLASSIFICATION	1.0984678491965837E-4	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999958380786068	WITHOUT_CLASSIFICATION	4.161921393260167E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998964341647916	WITHOUT_CLASSIFICATION	1.0356583520845821E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999985608498732	WITHOUT_CLASSIFICATION	1.4391501268334373E-6	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999373718673	WITHOUT_CLASSIFICATION	6.262813267685977E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999993069123657	WITHOUT_CLASSIFICATION	6.930876344021558E-7	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9998067156823255	WITHOUT_CLASSIFICATION	1.9328431767448196E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999854612905469	WITHOUT_CLASSIFICATION	1.4538709453084266E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.999977825490193	WITHOUT_CLASSIFICATION	2.2174509806943773E-5	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999382323921481	WITHOUT_CLASSIFICATION	6.17676078519583E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999835454233074	WITHOUT_CLASSIFICATION	1.6454576692544645E-5	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999966401364971	WITHOUT_CLASSIFICATION	3.359863502857472E-6	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999828020468595	WITHOUT_CLASSIFICATION	1.7197953140526556E-5	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999787780542172	WITHOUT_CLASSIFICATION	2.1221945782897253E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999971017038711	WITHOUT_CLASSIFICATION	2.8982961289244172E-6	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999996763188793	WITHOUT_CLASSIFICATION	3.2368112062794405E-7	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999956264448471	WITHOUT_CLASSIFICATION	4.3735551528703356E-6	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999974783383	WITHOUT_CLASSIFICATION	2.5216616948329728E-9	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9995936731212673	WITHOUT_CLASSIFICATION	4.063268787327232E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8816397916796821	WITHOUT_CLASSIFICATION	0.11836020832031785	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999520265076051	WITHOUT_CLASSIFICATION	4.797349239497655E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999920201266687	WITHOUT_CLASSIFICATION	7.979873331344438E-6	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999920201266687	WITHOUT_CLASSIFICATION	7.979873331344438E-6	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997718882299851	WITHOUT_CLASSIFICATION	2.2811177001482664E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999293960434733	WITHOUT_CLASSIFICATION	7.060395652672432E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999918904987278	WITHOUT_CLASSIFICATION	8.109501272239734E-6	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999786589972911	WITHOUT_CLASSIFICATION	2.134100270897392E-5	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999944362412748	WITHOUT_CLASSIFICATION	5.563758725095517E-6	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999671890358601	WITHOUT_CLASSIFICATION	3.281096413990426E-5	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999315117242431	WITHOUT_CLASSIFICATION	6.84882757568932E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999685653371174	WITHOUT_CLASSIFICATION	3.1434662882656526E-5	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999955273427613	WITHOUT_CLASSIFICATION	4.4726572386665985E-6	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999989557570014	WITHOUT_CLASSIFICATION	1.0442429986489357E-6	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999992170716573	WITHOUT_CLASSIFICATION	7.829283428363889E-7	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999984682700851	WITHOUT_CLASSIFICATION	1.531729914856261E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999791524175977	WITHOUT_CLASSIFICATION	2.0847582402281535E-5	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999979156183553	WITHOUT_CLASSIFICATION	2.0843816447057028E-6	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999736724739169	WITHOUT_CLASSIFICATION	2.632752608310304E-4	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9995454823080968	WITHOUT_CLASSIFICATION	4.545176919031331E-4	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.999999642430724	WITHOUT_CLASSIFICATION	3.575692759016206E-7	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9980655685306826	WITHOUT_CLASSIFICATION	0.001934431469317427	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998993390188472	WITHOUT_CLASSIFICATION	1.0066098115282399E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9992481731826303	WITHOUT_CLASSIFICATION	7.518268173696601E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9961590412330303	WITHOUT_CLASSIFICATION	0.003840958766969795	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999997280937795	WITHOUT_CLASSIFICATION	2.7190622049089313E-7	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9998840331562487	WITHOUT_CLASSIFICATION	1.1596684375137253E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999479601140075	WITHOUT_CLASSIFICATION	5.203988599249501E-4	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9985892892177384	WITHOUT_CLASSIFICATION	0.0014107107822616924	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.999898611535233	WITHOUT_CLASSIFICATION	1.0138846476710074E-4	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999989083214381	WITHOUT_CLASSIFICATION	1.091678561818862E-6	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999972171842629	WITHOUT_CLASSIFICATION	2.782815737177272E-6	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9996342850047958	WITHOUT_CLASSIFICATION	3.657149952042662E-4	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.8484953814174295	WITHOUT_CLASSIFICATION	0.15150461858257053	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9992481731826303	WITHOUT_CLASSIFICATION	7.518268173696601E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9998712952786816	WITHOUT_CLASSIFICATION	1.287047213184367E-4	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999911258364632	WITHOUT_CLASSIFICATION	8.874163536665436E-6	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999927733751709	WITHOUT_CLASSIFICATION	7.226624829168119E-6	DESIGN
found	WITHOUT_CLASSIFICATION	0.9993062307085138	WITHOUT_CLASSIFICATION	6.937692914861195E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9993062307085138	WITHOUT_CLASSIFICATION	6.937692914861195E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999942335950673	WITHOUT_CLASSIFICATION	5.766404932625013E-6	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999784687598438	WITHOUT_CLASSIFICATION	2.1531240156322127E-5	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999996117219733	WITHOUT_CLASSIFICATION	3.88278026743323E-7	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999996117219733	WITHOUT_CLASSIFICATION	3.88278026743323E-7	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8816397916796821	WITHOUT_CLASSIFICATION	0.11836020832031785	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999991300220711	WITHOUT_CLASSIFICATION	8.699779289036166E-7	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9982402472702805	WITHOUT_CLASSIFICATION	0.0017597527297194824	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999913607341845	WITHOUT_CLASSIFICATION	8.63926581557261E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999895677082679	WITHOUT_CLASSIFICATION	1.043229173212641E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9982402472702805	WITHOUT_CLASSIFICATION	0.0017597527297194824	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999913607341845	WITHOUT_CLASSIFICATION	8.63926581557261E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999939374580459	WITHOUT_CLASSIFICATION	6.062541954030045E-6	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9979542183914221	WITHOUT_CLASSIFICATION	0.002045781608577904	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9998845138400216	WITHOUT_CLASSIFICATION	1.1548615997828988E-4	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.999916022868899	WITHOUT_CLASSIFICATION	8.397713110100703E-5	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999518066300598	WITHOUT_CLASSIFICATION	4.8193369940202005E-5	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.5764376952722429	DESIGN	0.4235623047277571	WITHOUT_CLASSIFICATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999764525168614	WITHOUT_CLASSIFICATION	2.354748313854285E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999764525168614	WITHOUT_CLASSIFICATION	2.354748313854285E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998057968905487	WITHOUT_CLASSIFICATION	1.942031094512898E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999996479791	WITHOUT_CLASSIFICATION	3.520208359654593E-10	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999672565103671	WITHOUT_CLASSIFICATION	3.274348963283606E-5	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999942323178464	WITHOUT_CLASSIFICATION	5.767682153614972E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999971746641326	WITHOUT_CLASSIFICATION	2.8253358675140262E-6	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999997269604779	WITHOUT_CLASSIFICATION	2.7303952208210965E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999895677082679	WITHOUT_CLASSIFICATION	1.043229173212641E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999939773448239	WITHOUT_CLASSIFICATION	6.022655176073388E-6	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998593320597	WITHOUT_CLASSIFICATION	1.4066794029405272E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999998593320597	WITHOUT_CLASSIFICATION	1.4066794029405272E-7	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999989353264113	WITHOUT_CLASSIFICATION	1.0646735888119565E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999939374580459	WITHOUT_CLASSIFICATION	6.062541954030045E-6	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9995938356703996	WITHOUT_CLASSIFICATION	4.061643296004266E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9948187271936041	DESIGN	0.00518127280639589	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.88191585427126	WITHOUT_CLASSIFICATION	0.1180841457287401	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999979814899357	WITHOUT_CLASSIFICATION	2.0185100643650736E-6	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9478746820617913	WITHOUT_CLASSIFICATION	0.05212531793820886	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999939374580459	WITHOUT_CLASSIFICATION	6.062541954030045E-6	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999979814899357	WITHOUT_CLASSIFICATION	2.0185100643650736E-6	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9478746820617913	WITHOUT_CLASSIFICATION	0.05212531793820886	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999897043290469	WITHOUT_CLASSIFICATION	1.0295670953035482E-5	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999744019559	WITHOUT_CLASSIFICATION	2.5598044183413175E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999995249340482	WITHOUT_CLASSIFICATION	4.7506595191256E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999939374580459	WITHOUT_CLASSIFICATION	6.062541954030045E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999939374580459	WITHOUT_CLASSIFICATION	6.062541954030045E-6	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.999958284447996	WITHOUT_CLASSIFICATION	4.171555200393517E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9999558936901154	WITHOUT_CLASSIFICATION	4.4106309884674833E-5	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999980584921435	WITHOUT_CLASSIFICATION	1.9415078563813546E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996068607800351	WITHOUT_CLASSIFICATION	3.931392199648146E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999995356184369	WITHOUT_CLASSIFICATION	4.6438156321067137E-7	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999983992644661	WITHOUT_CLASSIFICATION	1.6007355339311639E-6	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999998623339108	WITHOUT_CLASSIFICATION	1.3766608914185066E-7	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999842262875486	WITHOUT_CLASSIFICATION	1.5773712451421832E-5	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9990996596731447	WITHOUT_CLASSIFICATION	9.00340326855265E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999901086540658	WITHOUT_CLASSIFICATION	9.891345934272602E-6	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9997829660085845	WITHOUT_CLASSIFICATION	2.1703399141540566E-4	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9996963084758191	WITHOUT_CLASSIFICATION	3.036915241808755E-4	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999501262730597	WITHOUT_CLASSIFICATION	4.987372694046023E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9946191112558294	WITHOUT_CLASSIFICATION	0.005380888744170656	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974220616424	WITHOUT_CLASSIFICATION	2.577938357644695E-6	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999060236082763	WITHOUT_CLASSIFICATION	9.397639172376468E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996068607800351	WITHOUT_CLASSIFICATION	3.931392199648146E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9982925100233145	WITHOUT_CLASSIFICATION	0.0017074899766855263	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999363086862282	WITHOUT_CLASSIFICATION	6.369131377186053E-5	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999987916615137	WITHOUT_CLASSIFICATION	1.2083384862707867E-6	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.999971504963081	WITHOUT_CLASSIFICATION	2.8495036919074752E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9994838206749974	WITHOUT_CLASSIFICATION	5.161793250025498E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9994838206749974	WITHOUT_CLASSIFICATION	5.161793250025498E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996068607800351	WITHOUT_CLASSIFICATION	3.931392199648146E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999999929525383	WITHOUT_CLASSIFICATION	7.047461693539184E-9	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999874208573709	WITHOUT_CLASSIFICATION	1.257914262903496E-5	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.6105715717220569	DESIGN	0.3894284282779431	WITHOUT_CLASSIFICATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999992470649537	WITHOUT_CLASSIFICATION	7.529350462685754E-7	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743268610087	WITHOUT_CLASSIFICATION	2.5673138991344143E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999995097113406	WITHOUT_CLASSIFICATION	4.902886594003711E-6	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9995150711488805	WITHOUT_CLASSIFICATION	4.849288511195298E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9968357615692285	WITHOUT_CLASSIFICATION	0.0031642384307715636	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999905445566	WITHOUT_CLASSIFICATION	9.455443523600244E-9	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999911640019731	WITHOUT_CLASSIFICATION	8.835998026852265E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999964818795883	WITHOUT_CLASSIFICATION	3.5181204116326954E-6	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998262651576304	WITHOUT_CLASSIFICATION	1.7373484236970515E-4	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9988703005201801	WITHOUT_CLASSIFICATION	0.0011296994798199067	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999986055514161	WITHOUT_CLASSIFICATION	1.3944485839519717E-6	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991091463749	WITHOUT_CLASSIFICATION	8.908536252101117E-7	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997419983612761	WITHOUT_CLASSIFICATION	2.5800163872390563E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.999996078654261	WITHOUT_CLASSIFICATION	3.9213457390000585E-6	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999767573943044	WITHOUT_CLASSIFICATION	2.324260569573572E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999631929358604	WITHOUT_CLASSIFICATION	3.680706413945208E-5	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.99927133694867	WITHOUT_CLASSIFICATION	7.286630513300391E-4	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999863687779838	WITHOUT_CLASSIFICATION	1.3631222016199677E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.855391356244997	WITHOUT_CLASSIFICATION	0.14460864375500307	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996480278797694	WITHOUT_CLASSIFICATION	3.519721202306845E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995458888509576	WITHOUT_CLASSIFICATION	4.5411114904239604E-4	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991806770369788	WITHOUT_CLASSIFICATION	8.193229630212269E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947079662894	WITHOUT_CLASSIFICATION	5.292033710488993E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995277726213379	WITHOUT_CLASSIFICATION	4.7222737866206777E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99813675087224	WITHOUT_CLASSIFICATION	0.0018632491277600102	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987202682049038	WITHOUT_CLASSIFICATION	0.0012797317950962398	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998684764696881	WITHOUT_CLASSIFICATION	1.315235303118528E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9956862079520348	WITHOUT_CLASSIFICATION	0.004313792047965207	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.957449470191775	WITHOUT_CLASSIFICATION	0.04255052980822509	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999494626299186	WITHOUT_CLASSIFICATION	5.05373700814995E-5	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975264736716652	WITHOUT_CLASSIFICATION	0.0024735263283346244	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989906905840329	WITHOUT_CLASSIFICATION	0.0010093094159670734	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671375161431	WITHOUT_CLASSIFICATION	3.286248385698633E-5	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995899686995403	WITHOUT_CLASSIFICATION	4.1003130045972675E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988104326813254	WITHOUT_CLASSIFICATION	0.001189567318674617	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996536044595046	WITHOUT_CLASSIFICATION	3.4639554049549736E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995965781426351	WITHOUT_CLASSIFICATION	4.034218573647832E-4	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999305614913998	WITHOUT_CLASSIFICATION	6.943850860017743E-5	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996589989471603	WITHOUT_CLASSIFICATION	3.410010528397622E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9934548951199915	WITHOUT_CLASSIFICATION	0.006545104880008484	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999331489017934	WITHOUT_CLASSIFICATION	6.68510982066048E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9991680795401681	WITHOUT_CLASSIFICATION	8.31920459831862E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991381721912	WITHOUT_CLASSIFICATION	8.618278087602812E-7	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999887726191563	WITHOUT_CLASSIFICATION	1.1227380843610482E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999996153082933	WITHOUT_CLASSIFICATION	3.8469170666104286E-7	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999718924173681	WITHOUT_CLASSIFICATION	2.810758263195637E-5	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999978547566314	WITHOUT_CLASSIFICATION	2.145243368574972E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999983183925876	WITHOUT_CLASSIFICATION	1.681607412367293E-6	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999922153749262	WITHOUT_CLASSIFICATION	7.784625073821769E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999955862541763	WITHOUT_CLASSIFICATION	4.413745823763813E-6	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999892426670521	WITHOUT_CLASSIFICATION	1.0757332947888505E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998221056160492	WITHOUT_CLASSIFICATION	1.778943839508344E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.999820217819367	WITHOUT_CLASSIFICATION	1.797821806328714E-4	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9991061304021273	WITHOUT_CLASSIFICATION	8.938695978726919E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9996659941327228	WITHOUT_CLASSIFICATION	3.3400586727711857E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999894186022767	WITHOUT_CLASSIFICATION	1.058139772321507E-5	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999245366821801	WITHOUT_CLASSIFICATION	7.546331781992903E-5	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999827668821597	WITHOUT_CLASSIFICATION	1.7233117840366912E-5	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999951799553478	WITHOUT_CLASSIFICATION	4.820044652200781E-5	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998685340556629	WITHOUT_CLASSIFICATION	1.314659443371889E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9981948183331262	WITHOUT_CLASSIFICATION	0.0018051816668739186	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999644684513	WITHOUT_CLASSIFICATION	3.553154875748675E-8	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999980040793183	WITHOUT_CLASSIFICATION	1.9959206816839988E-6	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999987097054074	WITHOUT_CLASSIFICATION	1.290294592611459E-6	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956149992478	WITHOUT_CLASSIFICATION	4.385000752175056E-6	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999729808949801	WITHOUT_CLASSIFICATION	2.7019105019799877E-5	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999428441587372	WITHOUT_CLASSIFICATION	5.715584126280246E-4	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999776120609646	WITHOUT_CLASSIFICATION	2.2387939035349456E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999975362311463	WITHOUT_CLASSIFICATION	2.463768853653835E-6	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999981225903829	WITHOUT_CLASSIFICATION	1.877409617119429E-6	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999223000367046	WITHOUT_CLASSIFICATION	7.769996329549277E-5	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9985612576367259	WITHOUT_CLASSIFICATION	0.0014387423632740658	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9996722288681877	WITHOUT_CLASSIFICATION	3.277711318122156E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991381721912	WITHOUT_CLASSIFICATION	8.618278087602812E-7	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9979977795332063	WITHOUT_CLASSIFICATION	0.002002220466793654	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996762257357	WITHOUT_CLASSIFICATION	3.237742642547291E-7	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999990302012065	WITHOUT_CLASSIFICATION	9.69798793518771E-7	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996662401868098	WITHOUT_CLASSIFICATION	3.337598131901844E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999960780489514	WITHOUT_CLASSIFICATION	3.92195104862334E-6	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999975530274523	WITHOUT_CLASSIFICATION	2.446972547727432E-6	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9981948183331262	WITHOUT_CLASSIFICATION	0.0018051816668739186	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9662142865882503	WITHOUT_CLASSIFICATION	0.03378571341174965	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999866931625943	WITHOUT_CLASSIFICATION	1.3306837405816935E-5	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999980128863384	WITHOUT_CLASSIFICATION	1.987113661652961E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999888129485129	WITHOUT_CLASSIFICATION	1.1187051487115991E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999930784396581	WITHOUT_CLASSIFICATION	6.921560341839338E-6	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997964349988	WITHOUT_CLASSIFICATION	2.0356500112073532E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9987475325533591	WITHOUT_CLASSIFICATION	0.0012524674466408965	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9993461146964369	WITHOUT_CLASSIFICATION	6.538853035630612E-4	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999998382661163	WITHOUT_CLASSIFICATION	1.617338836142834E-7	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999819702991408	WITHOUT_CLASSIFICATION	1.8029700859232086E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9998655119471732	WITHOUT_CLASSIFICATION	1.3448805282673113E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99976757177327	WITHOUT_CLASSIFICATION	2.324282267298761E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999984423777957	WITHOUT_CLASSIFICATION	1.5576222043884694E-6	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999983851974141	WITHOUT_CLASSIFICATION	1.614802585792098E-6	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999924706345686	WITHOUT_CLASSIFICATION	7.529365431255237E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999994165281949	WITHOUT_CLASSIFICATION	5.834718050398252E-7	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999795922627045	WITHOUT_CLASSIFICATION	2.040773729559909E-5	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999920347490626	WITHOUT_CLASSIFICATION	7.96525093739595E-6	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.999670628112498	WITHOUT_CLASSIFICATION	3.293718875020668E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999770044440396	WITHOUT_CLASSIFICATION	2.2995555960381565E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999955657101214	WITHOUT_CLASSIFICATION	4.4342898785901746E-5	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9993483898580137	WITHOUT_CLASSIFICATION	6.516101419862193E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.999999925898876	WITHOUT_CLASSIFICATION	7.410112395944026E-8	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.925444812855083	DESIGN	0.074555187144917	WITHOUT_CLASSIFICATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999999064286985	WITHOUT_CLASSIFICATION	9.357130154163044E-8	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998841400758	WITHOUT_CLASSIFICATION	1.158599241854024E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998876459043785	WITHOUT_CLASSIFICATION	1.1235409562156385E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991381721912	WITHOUT_CLASSIFICATION	8.618278087602812E-7	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9977452204807812	WITHOUT_CLASSIFICATION	0.002254779519218802	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999988115463045	WITHOUT_CLASSIFICATION	1.1884536954884473E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999478616127148	WITHOUT_CLASSIFICATION	5.2138387285144534E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999999826941345	WITHOUT_CLASSIFICATION	1.7305865505370878E-7	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999996743825366	WITHOUT_CLASSIFICATION	3.256174633836507E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999914743158796	WITHOUT_CLASSIFICATION	8.525684120423211E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991381721912	WITHOUT_CLASSIFICATION	8.618278087602812E-7	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999085138960194	WITHOUT_CLASSIFICATION	9.148610398048695E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999795922627045	WITHOUT_CLASSIFICATION	2.040773729559909E-5	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9949258625154351	WITHOUT_CLASSIFICATION	0.005074137484564894	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999994165281949	WITHOUT_CLASSIFICATION	5.834718050398252E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999993007357562	WITHOUT_CLASSIFICATION	6.992642439170613E-7	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9966469870787782	WITHOUT_CLASSIFICATION	0.0033530129212217463	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9185296042015865	WITHOUT_CLASSIFICATION	0.08147039579841352	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999980128863384	WITHOUT_CLASSIFICATION	1.987113661652961E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999888129485129	WITHOUT_CLASSIFICATION	1.1187051487115991E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999930784396581	WITHOUT_CLASSIFICATION	6.921560341839338E-6	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999998509555377	WITHOUT_CLASSIFICATION	1.4904446227312474E-7	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999942947776864	WITHOUT_CLASSIFICATION	5.7052223136276785E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999963271907434	WITHOUT_CLASSIFICATION	3.672809256653887E-6	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999994165281949	WITHOUT_CLASSIFICATION	5.834718050398252E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999993007357562	WITHOUT_CLASSIFICATION	6.992642439170613E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999991381721912	WITHOUT_CLASSIFICATION	8.618278087602812E-7	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999997964349988	WITHOUT_CLASSIFICATION	2.0356500112073532E-7	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9987475325533591	WITHOUT_CLASSIFICATION	0.0012524674466408965	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9993461146964369	WITHOUT_CLASSIFICATION	6.538853035630612E-4	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999480481875131	WITHOUT_CLASSIFICATION	5.195181248677551E-5	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961061616875	WITHOUT_CLASSIFICATION	3.893838312521137E-6	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999996141941076	WITHOUT_CLASSIFICATION	3.858058923978793E-6	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999999973363334	WITHOUT_CLASSIFICATION	2.6636666026926034E-8	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999810966248425	WITHOUT_CLASSIFICATION	1.8903375157518724E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999938273916941	WITHOUT_CLASSIFICATION	6.1726083059521395E-6	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995965781426351	WITHOUT_CLASSIFICATION	4.034218573647832E-4	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.999536504989182	WITHOUT_CLASSIFICATION	4.634950108179331E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9949291922467417	WITHOUT_CLASSIFICATION	0.005070807753258307	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9999277941018071	WITHOUT_CLASSIFICATION	7.220589819294998E-5	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999973884698593	WITHOUT_CLASSIFICATION	2.61153014074591E-6	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999996034145381	WITHOUT_CLASSIFICATION	3.9658546196080946E-7	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995277726213379	WITHOUT_CLASSIFICATION	4.7222737866206777E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99813675087224	WITHOUT_CLASSIFICATION	0.0018632491277600102	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975264736716652	WITHOUT_CLASSIFICATION	0.0024735263283346244	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999996034145381	WITHOUT_CLASSIFICATION	3.9658546196080946E-7	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9975117300120603	WITHOUT_CLASSIFICATION	0.002488269987939632	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999970578497286	WITHOUT_CLASSIFICATION	2.9421502714085754E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997910746030475	WITHOUT_CLASSIFICATION	2.0892539695251401E-4	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996025826209031	WITHOUT_CLASSIFICATION	3.97417379096959E-4	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9914672837790438	WITHOUT_CLASSIFICATION	0.008532716220956168	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999635049698731	WITHOUT_CLASSIFICATION	3.649503012694568E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989906905840329	WITHOUT_CLASSIFICATION	0.0010093094159670734	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988104326813254	WITHOUT_CLASSIFICATION	0.001189567318674617	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999975362311463	WITHOUT_CLASSIFICATION	2.463768853653835E-6	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9868896236746891	WITHOUT_CLASSIFICATION	0.013110376325310931	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999434878823752	WITHOUT_CLASSIFICATION	5.651211762481835E-5	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999979396368048	WITHOUT_CLASSIFICATION	2.0603631950633227E-6	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999882735413939	WITHOUT_CLASSIFICATION	1.1726458606209273E-5	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999995800310051	WITHOUT_CLASSIFICATION	4.1996899490617917E-7	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999816458246	WITHOUT_CLASSIFICATION	1.8354175431222048E-8	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998948686483026	WITHOUT_CLASSIFICATION	1.0513135169736307E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999905445566	WITHOUT_CLASSIFICATION	9.455443523600244E-9	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999938990862356	WITHOUT_CLASSIFICATION	6.100913764330923E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999982476728828	WITHOUT_CLASSIFICATION	1.752327117196464E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999071625022197	WITHOUT_CLASSIFICATION	9.283749778029831E-5	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999401976618351	WITHOUT_CLASSIFICATION	5.980233816483549E-5	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999945693425837	WITHOUT_CLASSIFICATION	5.4306574162975416E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999226114721775	WITHOUT_CLASSIFICATION	7.738852782245905E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907341562292	WITHOUT_CLASSIFICATION	9.265843770878198E-6	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933299687773	WITHOUT_CLASSIFICATION	6.670031222661045E-6	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999938214481696	WITHOUT_CLASSIFICATION	6.178551830380202E-6	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9992354765729673	WITHOUT_CLASSIFICATION	7.645234270326887E-4	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999990303897301	WITHOUT_CLASSIFICATION	9.696102698946849E-6	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984864076739	WITHOUT_CLASSIFICATION	1.5135923261529222E-6	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996821623445	WITHOUT_CLASSIFICATION	3.178376555347205E-7	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998622810063	WITHOUT_CLASSIFICATION	1.3771899369285326E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999053168167	WITHOUT_CLASSIFICATION	9.468318331063078E-8	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9997789619372566	WITHOUT_CLASSIFICATION	2.210380627435057E-4	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9986625820264841	WITHOUT_CLASSIFICATION	0.0013374179735159285	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993231372916	WITHOUT_CLASSIFICATION	6.768627085636478E-7	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9996465360027543	WITHOUT_CLASSIFICATION	3.534639972456603E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998773180913363	WITHOUT_CLASSIFICATION	1.2268190866368038E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914453194735	WITHOUT_CLASSIFICATION	8.554680526434194E-6	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999554706477466	WITHOUT_CLASSIFICATION	4.452935225331694E-5	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999989793315023	WITHOUT_CLASSIFICATION	1.0206684977843464E-6	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999835931347881	WITHOUT_CLASSIFICATION	1.6406865211858086E-5	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.999996189857335	WITHOUT_CLASSIFICATION	3.810142665089367E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999969906998868	WITHOUT_CLASSIFICATION	3.0093001132090677E-6	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.999994154706083	WITHOUT_CLASSIFICATION	5.845293917013935E-6	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999998564100271	WITHOUT_CLASSIFICATION	1.435899729517485E-7	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999997096185487	WITHOUT_CLASSIFICATION	2.903814513234435E-7	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9987358799331157	WITHOUT_CLASSIFICATION	0.0012641200668841916	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999871068032632	WITHOUT_CLASSIFICATION	1.2893196736844259E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9999295337050785	WITHOUT_CLASSIFICATION	7.0466294921401E-5	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.99976376954351	WITHOUT_CLASSIFICATION	2.3623045649007207E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.999997923258346	WITHOUT_CLASSIFICATION	2.0767416540079478E-6	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999995775489553	WITHOUT_CLASSIFICATION	4.224510446177179E-7	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999909489639287	WITHOUT_CLASSIFICATION	9.051036071374024E-6	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999985386078402	WITHOUT_CLASSIFICATION	1.461392159824912E-6	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999431202251924	WITHOUT_CLASSIFICATION	5.687977480756284E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999914089717	WITHOUT_CLASSIFICATION	8.591028305649951E-8	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.999858636437454	WITHOUT_CLASSIFICATION	1.41363562546046E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9987271257111696	WITHOUT_CLASSIFICATION	0.0012728742888303908	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999873753488437	WITHOUT_CLASSIFICATION	1.2624651156290944E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.992087192008546	WITHOUT_CLASSIFICATION	0.007912807991453986	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999546538126	WITHOUT_CLASSIFICATION	4.534618725859339E-8	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997165620791281	WITHOUT_CLASSIFICATION	2.8343792087201324E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999896774627376	WITHOUT_CLASSIFICATION	1.0322537262411423E-5	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999981290873502	WITHOUT_CLASSIFICATION	1.8709126497313422E-6	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998055691318	WITHOUT_CLASSIFICATION	1.9443086810558692E-7	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999920811995843	WITHOUT_CLASSIFICATION	7.918800415813278E-6	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.99999815143802	WITHOUT_CLASSIFICATION	1.8485619800893521E-6	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999970690621757	WITHOUT_CLASSIFICATION	2.9309378243127196E-6	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.999991452607978	WITHOUT_CLASSIFICATION	8.547392022077192E-6	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999885897355453	WITHOUT_CLASSIFICATION	1.1410264454682551E-5	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999994769118113	WITHOUT_CLASSIFICATION	5.230881886304073E-7	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999982385050247	WITHOUT_CLASSIFICATION	1.7614949752992543E-6	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.997490596674887	WITHOUT_CLASSIFICATION	0.002509403325112833	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999621605161774	WITHOUT_CLASSIFICATION	3.7839483822601186E-5	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999624873751805	WITHOUT_CLASSIFICATION	3.751262481943716E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.99999878263929	WITHOUT_CLASSIFICATION	1.217360709991473E-6	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999997303329009	WITHOUT_CLASSIFICATION	2.696670991023177E-7	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999792400600194	WITHOUT_CLASSIFICATION	2.075993998063241E-5	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999994686633461	WITHOUT_CLASSIFICATION	5.313366538965401E-7	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9999939735937171	WITHOUT_CLASSIFICATION	6.026406282871521E-6	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9226484916469901	WITHOUT_CLASSIFICATION	0.07735150835300979	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999749177352114	WITHOUT_CLASSIFICATION	2.5082264788570452E-5	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9795708968289065	WITHOUT_CLASSIFICATION	0.02042910317109357	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999995253777834	WITHOUT_CLASSIFICATION	4.746222167245668E-7	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9996340096696563	WITHOUT_CLASSIFICATION	3.659903303437389E-4	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999940559156629	WITHOUT_CLASSIFICATION	5.944084337027832E-6	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999860167187191	WITHOUT_CLASSIFICATION	1.3983281280829845E-5	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9965721434134351	WITHOUT_CLASSIFICATION	0.003427856586564746	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9992247258309457	WITHOUT_CLASSIFICATION	7.75274169054422E-4	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999988418447625	WITHOUT_CLASSIFICATION	1.158155237505274E-6	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999127570204	WITHOUT_CLASSIFICATION	8.724297960133398E-8	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999941852934233	WITHOUT_CLASSIFICATION	5.8147065766673024E-6	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9999878448592775	WITHOUT_CLASSIFICATION	1.2155140722482859E-5	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999536608972112	WITHOUT_CLASSIFICATION	4.6339102788746886E-5	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9997314711352355	WITHOUT_CLASSIFICATION	2.6852886476445864E-4	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999806988209	WITHOUT_CLASSIFICATION	1.9301179097869872E-8	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999930497955926	WITHOUT_CLASSIFICATION	6.9502044075076255E-6	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999914870163741	WITHOUT_CLASSIFICATION	8.512983625913817E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999418556012148	WITHOUT_CLASSIFICATION	5.8144398785203215E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9985325739661898	WITHOUT_CLASSIFICATION	0.001467426033810228	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999991667761662	WITHOUT_CLASSIFICATION	8.332238336832027E-7	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999851951605881	WITHOUT_CLASSIFICATION	1.4804839411851626E-5	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999998830269359	WITHOUT_CLASSIFICATION	1.1697306412009993E-7	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998609828376385	WITHOUT_CLASSIFICATION	1.3901716236146977E-4	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9999609917808389	WITHOUT_CLASSIFICATION	3.900821916124227E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9991504108563556	WITHOUT_CLASSIFICATION	8.495891436444203E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999998540481766	WITHOUT_CLASSIFICATION	1.4595182341389363E-7	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999037523325093	WITHOUT_CLASSIFICATION	9.624766749063843E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9999192684267534	WITHOUT_CLASSIFICATION	8.073157324663592E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999965439204482	WITHOUT_CLASSIFICATION	3.4560795518878636E-6	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999037523325093	WITHOUT_CLASSIFICATION	9.624766749063843E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999970702533334	WITHOUT_CLASSIFICATION	2.9297466666090156E-6	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.999992478294829	WITHOUT_CLASSIFICATION	7.521705171138867E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999231099620606	WITHOUT_CLASSIFICATION	7.689003793936158E-5	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9967113776563506	WITHOUT_CLASSIFICATION	0.003288622343649329	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999996184098462	WITHOUT_CLASSIFICATION	3.815901537964702E-7	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999989583080724	WITHOUT_CLASSIFICATION	1.0416919276482142E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9997583193113461	WITHOUT_CLASSIFICATION	2.4168068865407826E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999946873452762	WITHOUT_CLASSIFICATION	5.312654723883602E-6	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9995447446383927	WITHOUT_CLASSIFICATION	4.5525536160731175E-4	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9994770796484765	WITHOUT_CLASSIFICATION	5.229203515235146E-4	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999973542067632	WITHOUT_CLASSIFICATION	2.6457932367658823E-6	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.999966043931026	WITHOUT_CLASSIFICATION	3.395606897406903E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9995546781930192	WITHOUT_CLASSIFICATION	4.4532180698083165E-4	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999988948061082	WITHOUT_CLASSIFICATION	1.105193891855863E-6	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999994920398175	WITHOUT_CLASSIFICATION	5.079601824374578E-7	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9960650374747202	WITHOUT_CLASSIFICATION	0.003934962525279792	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998669921139002	WITHOUT_CLASSIFICATION	1.3300788609985862E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998669921139002	WITHOUT_CLASSIFICATION	1.3300788609985862E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999999264702476	WITHOUT_CLASSIFICATION	7.35297524637708E-8	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999951269089753	WITHOUT_CLASSIFICATION	4.873091024691806E-6	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999988842582145	WITHOUT_CLASSIFICATION	1.1157417855681976E-6	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999296904440939	WITHOUT_CLASSIFICATION	7.030955590622528E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999914478070415	WITHOUT_CLASSIFICATION	8.552192958424628E-6	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6992214183381715	WITHOUT_CLASSIFICATION	0.30077858166182847	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999993408486556	WITHOUT_CLASSIFICATION	6.591513443727619E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999998264937031	WITHOUT_CLASSIFICATION	1.7350629689623318E-6	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9999488717417423	WITHOUT_CLASSIFICATION	5.112825825763696E-5	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999378134389435	WITHOUT_CLASSIFICATION	6.218656105650366E-4	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999599280102046	WITHOUT_CLASSIFICATION	4.007198979537686E-5	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999999314268847	WITHOUT_CLASSIFICATION	6.857311523033852E-8	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999921617934221	WITHOUT_CLASSIFICATION	7.838206577884725E-6	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999928594952847	WITHOUT_CLASSIFICATION	7.140504715318263E-6	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.999953985960369	WITHOUT_CLASSIFICATION	4.601403963097325E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999226114721775	WITHOUT_CLASSIFICATION	7.738852782245905E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999972421358546	WITHOUT_CLASSIFICATION	2.7578641454347593E-6	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999979731537549	WITHOUT_CLASSIFICATION	2.0268462450308334E-6	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999870685139236	WITHOUT_CLASSIFICATION	1.293148607645366E-5	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999936447706169	WITHOUT_CLASSIFICATION	6.355229383055357E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999990290828699	WITHOUT_CLASSIFICATION	9.70917130197961E-7	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999968966505917	WITHOUT_CLASSIFICATION	3.1033494082960495E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999697944356117	WITHOUT_CLASSIFICATION	3.020556438832349E-5	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999993545506694	WITHOUT_CLASSIFICATION	6.454493306982647E-7	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999985751360392	WITHOUT_CLASSIFICATION	1.4248639608594585E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999914350381477	WITHOUT_CLASSIFICATION	8.564961852208674E-6	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999723381847	WITHOUT_CLASSIFICATION	2.7661815315006058E-8	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9982284399267873	WITHOUT_CLASSIFICATION	0.0017715600732125887	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9993131928339761	WITHOUT_CLASSIFICATION	6.868071660239131E-4	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999987927346384	WITHOUT_CLASSIFICATION	1.2072653615056373E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999746661787519	WITHOUT_CLASSIFICATION	2.533382124809407E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999981261478752	WITHOUT_CLASSIFICATION	1.8738521246996678E-6	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.999539482398341	WITHOUT_CLASSIFICATION	4.605176016590268E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997875069280645	WITHOUT_CLASSIFICATION	2.1249307193548384E-4	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999544598102778	WITHOUT_CLASSIFICATION	4.554018972217349E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997727054266	WITHOUT_CLASSIFICATION	2.2729457323298325E-7	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999737327865862	WITHOUT_CLASSIFICATION	2.626721341387713E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.999970044543532	WITHOUT_CLASSIFICATION	2.9955456467989567E-5	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999997727037065	WITHOUT_CLASSIFICATION	2.2729629336275314E-7	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999999717193097	WITHOUT_CLASSIFICATION	2.828069027086307E-8	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9999215614006038	WITHOUT_CLASSIFICATION	7.84385993962046E-5	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999794269407839	WITHOUT_CLASSIFICATION	2.057305921610181E-5	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999662247273086	WITHOUT_CLASSIFICATION	3.3775272691490984E-5	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999763451457296	WITHOUT_CLASSIFICATION	2.365485427025099E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999901160399468	WITHOUT_CLASSIFICATION	9.883960053244225E-6	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999890586313323	WITHOUT_CLASSIFICATION	1.0941368667823689E-5	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989227045034029	WITHOUT_CLASSIFICATION	0.0010772954965970686	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987739330894	WITHOUT_CLASSIFICATION	1.2260669105428177E-6	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999746764195431	WITHOUT_CLASSIFICATION	2.53235804568638E-5	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9978582636908314	WITHOUT_CLASSIFICATION	0.0021417363091686503	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999988870734097	WITHOUT_CLASSIFICATION	1.112926590287693E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993955882911	WITHOUT_CLASSIFICATION	6.044117088563711E-7	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9881665508366103	WITHOUT_CLASSIFICATION	0.011833449163389765	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998968058713854	WITHOUT_CLASSIFICATION	1.0319412861467856E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998940872658161	WITHOUT_CLASSIFICATION	1.0591273418398505E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998968058713854	WITHOUT_CLASSIFICATION	1.0319412861467856E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999297879107416	WITHOUT_CLASSIFICATION	7.02120892584041E-5	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999839041770766	WITHOUT_CLASSIFICATION	1.6095822923330795E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999841435470541	WITHOUT_CLASSIFICATION	1.5856452945843818E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998454169260584	WITHOUT_CLASSIFICATION	1.5458307394155266E-4	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999915832316171	WITHOUT_CLASSIFICATION	8.416768382914752E-6	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999840844714941	WITHOUT_CLASSIFICATION	1.5915528505891932E-5	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9996923603689605	WITHOUT_CLASSIFICATION	3.0763963103958117E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999551922376642	WITHOUT_CLASSIFICATION	4.4807762335811746E-5	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999957390236814	WITHOUT_CLASSIFICATION	4.2609763185449296E-6	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999711281345366	WITHOUT_CLASSIFICATION	2.8871865463379282E-5	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999939077523511	WITHOUT_CLASSIFICATION	6.092247649013982E-6	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.992939820300571	WITHOUT_CLASSIFICATION	0.007060179699429008	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999566549721478	WITHOUT_CLASSIFICATION	4.334502785223286E-5	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9980209942704306	WITHOUT_CLASSIFICATION	0.001979005729569522	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9774021782022516	WITHOUT_CLASSIFICATION	0.02259782179774831	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9975854348569879	WITHOUT_CLASSIFICATION	0.002414565143012059	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999970954296892	WITHOUT_CLASSIFICATION	2.904570310776638E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999970954296892	WITHOUT_CLASSIFICATION	2.904570310776638E-6	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999221063102506	WITHOUT_CLASSIFICATION	7.789368974950279E-5	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999687513252369	WITHOUT_CLASSIFICATION	3.1248674763183204E-5	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998668578977	WITHOUT_CLASSIFICATION	1.3314210241486712E-7	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999844841945645	WITHOUT_CLASSIFICATION	1.551580543539175E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999918438010427	WITHOUT_CLASSIFICATION	8.156198957340592E-6	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999671388609985	WITHOUT_CLASSIFICATION	3.28611390015026E-5	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9880647243803377	WITHOUT_CLASSIFICATION	0.011935275619662265	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998236286336748	WITHOUT_CLASSIFICATION	1.7637136632524313E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999911688759643	WITHOUT_CLASSIFICATION	8.831124035703704E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999692670447	WITHOUT_CLASSIFICATION	3.0732955298361423E-8	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999892322261937	WITHOUT_CLASSIFICATION	1.0767773806262495E-5	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999970887599049	WITHOUT_CLASSIFICATION	2.911240095128481E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999976494461784	WITHOUT_CLASSIFICATION	2.350553821658975E-6	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999964868622114	WITHOUT_CLASSIFICATION	3.513137788554549E-6	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9990848141798757	WITHOUT_CLASSIFICATION	9.151858201242297E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999991914401869	WITHOUT_CLASSIFICATION	8.085598131084299E-6	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999271947306667	WITHOUT_CLASSIFICATION	7.280526933326263E-5	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9886703349463368	WITHOUT_CLASSIFICATION	0.011329665053663215	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.999995553737816	WITHOUT_CLASSIFICATION	4.446262184022111E-6	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999985074574113	WITHOUT_CLASSIFICATION	1.4925425887879912E-6	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999998526024476	WITHOUT_CLASSIFICATION	1.4739755232909855E-7	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999919620871454	WITHOUT_CLASSIFICATION	8.037912854630849E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998859909432974	WITHOUT_CLASSIFICATION	1.1400905670260813E-4	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999988575382386	WITHOUT_CLASSIFICATION	1.1424617613328282E-6	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999661845445853	WITHOUT_CLASSIFICATION	3.381545541473407E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999978662862858	WITHOUT_CLASSIFICATION	2.133713714165E-6	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999991587953955	WITHOUT_CLASSIFICATION	8.412046046195796E-7	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9989902520647613	WITHOUT_CLASSIFICATION	0.001009747935238636	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999901951086437	WITHOUT_CLASSIFICATION	9.804891356265924E-6	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999994534828377	WITHOUT_CLASSIFICATION	5.465171623111018E-6	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999768111723413	WITHOUT_CLASSIFICATION	2.3188827658724964E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999874249841906	WITHOUT_CLASSIFICATION	1.2575015809359908E-5	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999924013117497	WITHOUT_CLASSIFICATION	7.598688250229223E-6	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999283256396733	WITHOUT_CLASSIFICATION	7.167436032666506E-5	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9992488228745503	WITHOUT_CLASSIFICATION	7.511771254496689E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999997382591648	WITHOUT_CLASSIFICATION	2.6174083519254893E-7	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999953354822017	WITHOUT_CLASSIFICATION	4.6645177983855715E-6	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999825646366318	WITHOUT_CLASSIFICATION	1.7435363368246335E-5	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9997445545240748	WITHOUT_CLASSIFICATION	2.5544547592519403E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999990113931105	WITHOUT_CLASSIFICATION	9.886068894405648E-7	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999999876316779	WITHOUT_CLASSIFICATION	1.2368322108294977E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999863282730433	WITHOUT_CLASSIFICATION	1.3671726956651573E-5	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.999996630401854	WITHOUT_CLASSIFICATION	3.3695981458555963E-6	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999918742881336	WITHOUT_CLASSIFICATION	8.125711866404143E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999999329316	WITHOUT_CLASSIFICATION	6.706830836907651E-11	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9997733431089132	WITHOUT_CLASSIFICATION	2.2665689108673917E-4	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8864279678988478	DESIGN	0.11357203210115226	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999994853508221	WITHOUT_CLASSIFICATION	5.146491779273176E-7	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999996724921203	WITHOUT_CLASSIFICATION	3.275078797342533E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9998704501058374	WITHOUT_CLASSIFICATION	1.2954989416252857E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999939861659063	WITHOUT_CLASSIFICATION	6.013834093675944E-6	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999927169222371	WITHOUT_CLASSIFICATION	7.283077762846233E-6	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999994531580562	WITHOUT_CLASSIFICATION	5.468419439266315E-7	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999037445238798	WITHOUT_CLASSIFICATION	9.625547612028647E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999584715608402	WITHOUT_CLASSIFICATION	4.1528439159871947E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999085138960194	WITHOUT_CLASSIFICATION	9.148610398048695E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999085138960194	WITHOUT_CLASSIFICATION	9.148610398048695E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999996034350616	WITHOUT_CLASSIFICATION	3.965649384652262E-7	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999967622641235	WITHOUT_CLASSIFICATION	3.23773587665584E-6	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999676515532285	WITHOUT_CLASSIFICATION	3.2348446771490466E-5	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999726501041452	WITHOUT_CLASSIFICATION	2.7349895854782787E-5	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998089600496	WITHOUT_CLASSIFICATION	1.9103995036099933E-7	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999997409698332	WITHOUT_CLASSIFICATION	2.590301666759942E-7	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999979329340793	WITHOUT_CLASSIFICATION	2.067065920653278E-6	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999240255995746	WITHOUT_CLASSIFICATION	7.597440042545667E-5	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999979763856343	WITHOUT_CLASSIFICATION	2.023614365682185E-6	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999966060332175	WITHOUT_CLASSIFICATION	3.393966782482611E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999998015734151	WITHOUT_CLASSIFICATION	1.9842658504234422E-7	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999995740180021	WITHOUT_CLASSIFICATION	4.2598199786544093E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999855099378159	WITHOUT_CLASSIFICATION	1.4490062184116617E-5	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.99999866070261	WITHOUT_CLASSIFICATION	1.3392973900794073E-6	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999975043248158	WITHOUT_CLASSIFICATION	2.4956751841561843E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5730925239659909	WITHOUT_CLASSIFICATION	0.4269074760340092	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998607972107969	WITHOUT_CLASSIFICATION	1.3920278920309852E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999991570312028	WITHOUT_CLASSIFICATION	8.42968797159379E-7	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999781127484498	WITHOUT_CLASSIFICATION	2.188725155013481E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999997080342928	WITHOUT_CLASSIFICATION	2.919657071482176E-7	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9994006549378526	WITHOUT_CLASSIFICATION	5.993450621473149E-4	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999832503853283	WITHOUT_CLASSIFICATION	1.6749614671650027E-5	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999979452711397	WITHOUT_CLASSIFICATION	2.054728860297255E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999979912639424	WITHOUT_CLASSIFICATION	2.0087360576007558E-6	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9853679944715712	WITHOUT_CLASSIFICATION	0.014632005528428879	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.996653931080808	WITHOUT_CLASSIFICATION	0.003346068919192013	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9716493541808457	DESIGN	0.028350645819154276	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999849173417902	WITHOUT_CLASSIFICATION	1.5082658209762833E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846147757226	WITHOUT_CLASSIFICATION	1.538522427735526E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9972259193126257	WITHOUT_CLASSIFICATION	0.0027740806873743076	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999979912639424	WITHOUT_CLASSIFICATION	2.0087360576007558E-6	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9976688102549036	WITHOUT_CLASSIFICATION	0.002331189745096473	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999987389541504	WITHOUT_CLASSIFICATION	1.2610458495742562E-6	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9998143805095578	WITHOUT_CLASSIFICATION	1.8561949044216768E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999905171902602	WITHOUT_CLASSIFICATION	9.482809739861454E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999160694187	WITHOUT_CLASSIFICATION	8.393058120001164E-8	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5972183610128271	WITHOUT_CLASSIFICATION	0.40278163898717284	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9994339584724145	WITHOUT_CLASSIFICATION	5.660415275856102E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999937589437086	WITHOUT_CLASSIFICATION	6.241056291424697E-6	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999968061455564	WITHOUT_CLASSIFICATION	3.19385444360192E-6	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999905171902602	WITHOUT_CLASSIFICATION	9.482809739861454E-6	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.999992817701221	WITHOUT_CLASSIFICATION	7.182298778988853E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999937589437086	WITHOUT_CLASSIFICATION	6.241056291424697E-6	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9999962881944476	WITHOUT_CLASSIFICATION	3.7118055523432216E-6	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999928170709091	WITHOUT_CLASSIFICATION	7.182929090860301E-6	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999996425316145	WITHOUT_CLASSIFICATION	3.57468385495207E-6	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999892322261937	WITHOUT_CLASSIFICATION	1.0767773806262495E-5	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999985774013437	WITHOUT_CLASSIFICATION	1.4225986563642874E-6	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999910146591797	WITHOUT_CLASSIFICATION	8.98534082032359E-6	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999974226329926	WITHOUT_CLASSIFICATION	2.5773670073127957E-6	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999084995879252	WITHOUT_CLASSIFICATION	9.150041207479974E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999874447503	WITHOUT_CLASSIFICATION	1.2555249858779496E-8	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9999267879039991	WITHOUT_CLASSIFICATION	7.321209600085385E-5	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999771216419993	WITHOUT_CLASSIFICATION	2.2878358000672303E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999912815200146	WITHOUT_CLASSIFICATION	8.718479985344776E-6	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999963404171995	WITHOUT_CLASSIFICATION	3.6595828005647143E-6	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997258962938317	WITHOUT_CLASSIFICATION	2.741037061683579E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999976851595778	WITHOUT_CLASSIFICATION	2.3148404221597726E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9978885965158343	WITHOUT_CLASSIFICATION	0.002111403484165813	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999973062337663	WITHOUT_CLASSIFICATION	2.693766233767946E-6	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9999777783171361	WITHOUT_CLASSIFICATION	2.22216828638104E-5	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999724025456	WITHOUT_CLASSIFICATION	2.7597454388798418E-8	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998767697252191	WITHOUT_CLASSIFICATION	1.232302747809232E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999909468223764	WITHOUT_CLASSIFICATION	9.053177623617859E-6	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.999990861976464	WITHOUT_CLASSIFICATION	9.138023535901492E-6	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9998081210303459	WITHOUT_CLASSIFICATION	1.9187896965415114E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999457934571416	WITHOUT_CLASSIFICATION	5.4206542858425905E-5	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999961191477402	WITHOUT_CLASSIFICATION	3.880852259804982E-5	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999987900014359	WITHOUT_CLASSIFICATION	1.2099985640420109E-6	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999998969353816	WITHOUT_CLASSIFICATION	1.0306461838376767E-7	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999992752322454	WITHOUT_CLASSIFICATION	7.247677545919854E-6	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999999801535608	WITHOUT_CLASSIFICATION	1.9846439207073367E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.999933718613997	WITHOUT_CLASSIFICATION	6.628138600297717E-5	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999870978367869	WITHOUT_CLASSIFICATION	1.2902163213189176E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995928934226	WITHOUT_CLASSIFICATION	4.07106577414578E-7	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9915873698019576	WITHOUT_CLASSIFICATION	0.008412630198042517	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9994449717150738	WITHOUT_CLASSIFICATION	5.550282849261631E-4	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999812967266436	WITHOUT_CLASSIFICATION	1.8703273356301774E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9997778959996613	WITHOUT_CLASSIFICATION	2.2210400033882645E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997025013991	WITHOUT_CLASSIFICATION	2.974986008767262E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997025013991	WITHOUT_CLASSIFICATION	2.974986008767262E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999980829284173	WITHOUT_CLASSIFICATION	1.917071582710863E-5	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9995998151521597	WITHOUT_CLASSIFICATION	4.001848478403001E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999914288373851	WITHOUT_CLASSIFICATION	8.571162614846681E-6	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999996485755194	WITHOUT_CLASSIFICATION	3.5142448059679075E-6	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999998210268402	WITHOUT_CLASSIFICATION	1.78973159804318E-6	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9297115414797654	WITHOUT_CLASSIFICATION	0.0702884585202345	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999361103191893	WITHOUT_CLASSIFICATION	6.388968081078845E-5	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998847666662352	WITHOUT_CLASSIFICATION	1.1523333376485045E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999921189922681	WITHOUT_CLASSIFICATION	7.881007731928693E-6	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999045536907493	WITHOUT_CLASSIFICATION	9.544630925074951E-5	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999604116116944	WITHOUT_CLASSIFICATION	3.958838830559454E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999875640101883	WITHOUT_CLASSIFICATION	1.2435989811625898E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999987454440162	WITHOUT_CLASSIFICATION	1.2545559837104691E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997025013991	WITHOUT_CLASSIFICATION	2.974986008767262E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999866096652119	WITHOUT_CLASSIFICATION	1.3390334788149134E-5	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9973164529369704	WITHOUT_CLASSIFICATION	0.002683547063029735	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994799482353399	WITHOUT_CLASSIFICATION	5.200517646600648E-4	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999596427639019	WITHOUT_CLASSIFICATION	4.035723609809845E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999846398646808	WITHOUT_CLASSIFICATION	1.5360135319295058E-5	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999933778635025	WITHOUT_CLASSIFICATION	6.6221364974904425E-6	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997952284770094	WITHOUT_CLASSIFICATION	2.047715229906482E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999993973372658	WITHOUT_CLASSIFICATION	6.026627342608962E-7	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999314272905022	WITHOUT_CLASSIFICATION	6.857270949775389E-5	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9997586110978556	WITHOUT_CLASSIFICATION	2.4138890214440458E-4	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.999935208572549	WITHOUT_CLASSIFICATION	6.479142745100715E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995928934226	WITHOUT_CLASSIFICATION	4.07106577414578E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997025013991	WITHOUT_CLASSIFICATION	2.974986008767262E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999967335792341	WITHOUT_CLASSIFICATION	3.2664207658534272E-6	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999997205379623	WITHOUT_CLASSIFICATION	2.794620376671878E-7	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999913436109148	WITHOUT_CLASSIFICATION	8.65638908528701E-6	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999676974096592	WITHOUT_CLASSIFICATION	3.2302590340773935E-5	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9916471830887789	WITHOUT_CLASSIFICATION	0.008352816911221222	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999989012912707	WITHOUT_CLASSIFICATION	1.0987087292982299E-6	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972831627049653	WITHOUT_CLASSIFICATION	0.0027168372950346557	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999994289069627	WITHOUT_CLASSIFICATION	5.71093037260707E-7	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998615512075	WITHOUT_CLASSIFICATION	1.3844879255381284E-7	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9988682629917294	WITHOUT_CLASSIFICATION	0.0011317370082706692	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999997007917636	WITHOUT_CLASSIFICATION	2.9920823642840645E-7	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997642996399865	WITHOUT_CLASSIFICATION	2.3570036001345146E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999982387551047	WITHOUT_CLASSIFICATION	1.7612448952448043E-6	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9995110020306799	WITHOUT_CLASSIFICATION	4.889979693200586E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999297879107416	WITHOUT_CLASSIFICATION	7.02120892584041E-5	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.999990843570271	WITHOUT_CLASSIFICATION	9.15642972905636E-6	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999693827158	WITHOUT_CLASSIFICATION	3.061728416470459E-8	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999978391446647	WITHOUT_CLASSIFICATION	2.1608553354293786E-6	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999908057683549	WITHOUT_CLASSIFICATION	9.194231645216225E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999996636640354	WITHOUT_CLASSIFICATION	3.3633596452979404E-7	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996435799549886	WITHOUT_CLASSIFICATION	3.564200450114629E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996435799549886	WITHOUT_CLASSIFICATION	3.564200450114629E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9890839670418796	WITHOUT_CLASSIFICATION	0.010916032958120268	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9860288041222237	WITHOUT_CLASSIFICATION	0.013971195877776314	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999733769777566	WITHOUT_CLASSIFICATION	2.6623022243474785E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9994826752938661	WITHOUT_CLASSIFICATION	5.17324706133873E-4	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999345267163086	WITHOUT_CLASSIFICATION	6.547328369149128E-5	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999662327472695	WITHOUT_CLASSIFICATION	3.376725273062664E-5	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9837313282538451	WITHOUT_CLASSIFICATION	0.016268671746154872	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999871150058	WITHOUT_CLASSIFICATION	1.2884994193754097E-8	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999871150058	WITHOUT_CLASSIFICATION	1.2884994193754097E-8	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999840733794746	WITHOUT_CLASSIFICATION	1.592662052533493E-5	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999943007110779	WITHOUT_CLASSIFICATION	5.699288922158821E-6	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999600825633191	WITHOUT_CLASSIFICATION	3.9917436680971545E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997730528980566	WITHOUT_CLASSIFICATION	2.2694710194344763E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997730528980566	WITHOUT_CLASSIFICATION	2.2694710194344763E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997730528980566	WITHOUT_CLASSIFICATION	2.2694710194344763E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999915587388445	WITHOUT_CLASSIFICATION	8.441261155436433E-6	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9989412013639472	WITHOUT_CLASSIFICATION	0.00105879863605284	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999997905457536	WITHOUT_CLASSIFICATION	2.0945424640145784E-7	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9999581210183954	WITHOUT_CLASSIFICATION	4.1878981604440825E-5	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.999934074037401	WITHOUT_CLASSIFICATION	6.592596259902504E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997025013991	WITHOUT_CLASSIFICATION	2.974986008767262E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997025013991	WITHOUT_CLASSIFICATION	2.974986008767262E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999647732497398	WITHOUT_CLASSIFICATION	3.5226750260287935E-5	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999004168588	WITHOUT_CLASSIFICATION	9.958314127834509E-8	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9977507030711187	WITHOUT_CLASSIFICATION	0.002249296928881397	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999986490324475	WITHOUT_CLASSIFICATION	1.350967552518914E-6	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999121888800719	WITHOUT_CLASSIFICATION	8.78111199281223E-5	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9999369330660243	WITHOUT_CLASSIFICATION	6.306693397570076E-5	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.999988584039065	WITHOUT_CLASSIFICATION	1.1415960934922036E-5	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9984149667134957	WITHOUT_CLASSIFICATION	0.00158503328650425	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999287779951628	WITHOUT_CLASSIFICATION	7.122200483727938E-5	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998080108876	WITHOUT_CLASSIFICATION	1.9198911228049154E-7	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999193773418	WITHOUT_CLASSIFICATION	8.062265816016759E-8	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999293533536341	WITHOUT_CLASSIFICATION	7.064664636581814E-5	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.999982533663209	WITHOUT_CLASSIFICATION	1.7466336790988207E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.999982533663209	WITHOUT_CLASSIFICATION	1.746633679098818E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999922708310013	WITHOUT_CLASSIFICATION	7.729168998706246E-6	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999922708310013	WITHOUT_CLASSIFICATION	7.729168998706246E-6	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999943422934898	WITHOUT_CLASSIFICATION	5.657706510177337E-6	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999894712489046	WITHOUT_CLASSIFICATION	1.052875109535221E-5	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999894712489046	WITHOUT_CLASSIFICATION	1.052875109535221E-5	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999970267816054	WITHOUT_CLASSIFICATION	2.9732183945757725E-6	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999756494310771	WITHOUT_CLASSIFICATION	2.4350568922956748E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999834239111363	WITHOUT_CLASSIFICATION	1.6576088863665424E-5	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996435799549886	WITHOUT_CLASSIFICATION	3.564200450114629E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999145127149	WITHOUT_CLASSIFICATION	8.548728518254771E-8	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999756494310771	WITHOUT_CLASSIFICATION	2.4350568922956748E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999912292670039	WITHOUT_CLASSIFICATION	8.770732996070092E-6	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997051356699626	WITHOUT_CLASSIFICATION	2.9486433003739215E-4	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999996103526071	WITHOUT_CLASSIFICATION	3.8964739292422344E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999992195457714	WITHOUT_CLASSIFICATION	7.80454228685445E-7	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999999500185586	WITHOUT_CLASSIFICATION	4.998144153605855E-8	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999988064663914	WITHOUT_CLASSIFICATION	1.1935336086034938E-5	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999958371353425	WITHOUT_CLASSIFICATION	4.162864657522317E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9999649901181237	WITHOUT_CLASSIFICATION	3.500988187636178E-5	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999927087537407	WITHOUT_CLASSIFICATION	7.291246259268804E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999807997396072	WITHOUT_CLASSIFICATION	1.920026039281713E-5	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999996810344733	WITHOUT_CLASSIFICATION	3.189655266116786E-7	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999724615453306	WITHOUT_CLASSIFICATION	2.7538454669360043E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999710423126859	WITHOUT_CLASSIFICATION	2.895768731412381E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999984316390257	WITHOUT_CLASSIFICATION	1.5683609742769107E-6	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999772025388276	WITHOUT_CLASSIFICATION	2.279746117233165E-5	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9994533939322522	WITHOUT_CLASSIFICATION	5.466060677477932E-4	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999997533189848	WITHOUT_CLASSIFICATION	2.4668101509984995E-7	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997589110969376	WITHOUT_CLASSIFICATION	2.410889030624776E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997589110969376	WITHOUT_CLASSIFICATION	2.410889030624776E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999850981878154	WITHOUT_CLASSIFICATION	1.4901812184540025E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999997679316306	WITHOUT_CLASSIFICATION	2.3206836939184623E-7	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999871486101103	WITHOUT_CLASSIFICATION	1.2851389889697348E-5	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999770534395963	WITHOUT_CLASSIFICATION	2.294656040370146E-5	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999980214648582	WITHOUT_CLASSIFICATION	1.9785351418355083E-6	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999978445637906	WITHOUT_CLASSIFICATION	2.15543620934062E-6	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9991027758552121	WITHOUT_CLASSIFICATION	8.972241447878477E-4	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999998181314982	WITHOUT_CLASSIFICATION	1.8186850175010706E-7	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999991311016389	WITHOUT_CLASSIFICATION	8.68898361096749E-6	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999973598597884	WITHOUT_CLASSIFICATION	2.640140211661727E-6	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9975855717306757	WITHOUT_CLASSIFICATION	0.002414428269324194	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997642996399865	WITHOUT_CLASSIFICATION	2.3570036001345146E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999998708283195	WITHOUT_CLASSIFICATION	1.2917168046674532E-7	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999999990001563	WITHOUT_CLASSIFICATION	9.998436931223148E-9	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999994825157892	WITHOUT_CLASSIFICATION	5.174842107112656E-7	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999999593260851	WITHOUT_CLASSIFICATION	4.0673914885222437E-8	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999809842872656	WITHOUT_CLASSIFICATION	1.901571273441444E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999809842872656	WITHOUT_CLASSIFICATION	1.901571273441444E-5	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998346834702623	WITHOUT_CLASSIFICATION	1.6531652973769985E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9822384596230351	WITHOUT_CLASSIFICATION	0.017761540376964893	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999994897629361	WITHOUT_CLASSIFICATION	5.102370638574583E-7	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999969531760148	WITHOUT_CLASSIFICATION	3.0468239853226546E-6	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999989767800899	WITHOUT_CLASSIFICATION	1.0232199101094115E-6	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999990712909426	WITHOUT_CLASSIFICATION	9.28709057405015E-7	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.999602131535382	WITHOUT_CLASSIFICATION	3.9786846461802554E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999982340147804	WITHOUT_CLASSIFICATION	1.7659852195922528E-6	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998999019586317	WITHOUT_CLASSIFICATION	1.0009804136842174E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999900465213684	WITHOUT_CLASSIFICATION	9.95347863162022E-6	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9990547055405313	WITHOUT_CLASSIFICATION	9.452944594687266E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999982340147804	WITHOUT_CLASSIFICATION	1.7659852195922528E-6	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.995296074005008	WITHOUT_CLASSIFICATION	0.004703925994991996	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9804249589189364	WITHOUT_CLASSIFICATION	0.01957504108106346	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9962009281953038	WITHOUT_CLASSIFICATION	0.0037990718046962127	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999950765585346	WITHOUT_CLASSIFICATION	4.923441465522124E-6	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999910733642644	WITHOUT_CLASSIFICATION	8.926635735670096E-6	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9995672861043908	WITHOUT_CLASSIFICATION	4.327138956092498E-4	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999953834397468	WITHOUT_CLASSIFICATION	4.616560253180912E-6	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999543624599	WITHOUT_CLASSIFICATION	4.5637540010268296E-8	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999027530796789	WITHOUT_CLASSIFICATION	9.72469203210761E-5	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997424568103174	WITHOUT_CLASSIFICATION	2.575431896825879E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999413396508748	WITHOUT_CLASSIFICATION	5.866034912504196E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999992474927317	WITHOUT_CLASSIFICATION	7.525072682791895E-7	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999599680872969	WITHOUT_CLASSIFICATION	4.0031912703128275E-5	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999484429759222	WITHOUT_CLASSIFICATION	5.155702407783873E-5	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999664886360455	WITHOUT_CLASSIFICATION	3.351136395447682E-5	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999991334552774	WITHOUT_CLASSIFICATION	8.665447225806018E-7	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999982093173873	WITHOUT_CLASSIFICATION	1.7906826127685995E-6	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9935776700036947	WITHOUT_CLASSIFICATION	0.006422329996305198	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9986443524443512	WITHOUT_CLASSIFICATION	0.001355647555648843	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999971024133648	WITHOUT_CLASSIFICATION	2.8975866352670186E-6	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999946794706581	WITHOUT_CLASSIFICATION	5.3205293418814154E-6	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9456884401471863	DESIGN	0.05431155985281374	WITHOUT_CLASSIFICATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9990744775153878	WITHOUT_CLASSIFICATION	9.255224846121449E-4	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9998285449802514	WITHOUT_CLASSIFICATION	1.7145501974861132E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999935646230803	WITHOUT_CLASSIFICATION	6.435376919704242E-6	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.99993184628342	WITHOUT_CLASSIFICATION	6.815371658002643E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999999049951047	WITHOUT_CLASSIFICATION	9.500489520133155E-8	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999995226275049	WITHOUT_CLASSIFICATION	4.773724951462711E-7	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999880033030099	WITHOUT_CLASSIFICATION	1.1996696990148068E-5	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998653335729956	WITHOUT_CLASSIFICATION	1.34666427004461E-4	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999929178232	WITHOUT_CLASSIFICATION	7.082176921068412E-9	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999989851832582	WITHOUT_CLASSIFICATION	1.0148167417967434E-5	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999747892052747	WITHOUT_CLASSIFICATION	2.521079472524615E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.998907361985378	WITHOUT_CLASSIFICATION	0.0010926380146219377	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999672583647418	WITHOUT_CLASSIFICATION	3.2741635258171774E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999806343680618	WITHOUT_CLASSIFICATION	1.9365631938268948E-5	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999993638125685	WITHOUT_CLASSIFICATION	6.361874316166443E-7	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999665683109	WITHOUT_CLASSIFICATION	3.343168918279027E-8	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999992064371243	WITHOUT_CLASSIFICATION	7.935628758286028E-7	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999873418606179	WITHOUT_CLASSIFICATION	1.2658139382134081E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999114074812	WITHOUT_CLASSIFICATION	8.859251874034865E-8	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999511869390462	WITHOUT_CLASSIFICATION	4.88130609537965E-5	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999911562538174	WITHOUT_CLASSIFICATION	8.84374618268331E-6	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998323149802	WITHOUT_CLASSIFICATION	1.6768501977979163E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999417097792277	WITHOUT_CLASSIFICATION	5.829022077225259E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999400847106275	WITHOUT_CLASSIFICATION	5.991528937254354E-5	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999984092893801	WITHOUT_CLASSIFICATION	1.5907106198390733E-6	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999985986315194	WITHOUT_CLASSIFICATION	1.401368480572008E-6	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999938929166424	WITHOUT_CLASSIFICATION	6.107083357610557E-6	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999949183496665	WITHOUT_CLASSIFICATION	5.0816503335129014E-6	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516762672148	WITHOUT_CLASSIFICATION	4.832373278519705E-5	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999886400123568	WITHOUT_CLASSIFICATION	1.135998764319561E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999875387312587	WITHOUT_CLASSIFICATION	1.2461268741248235E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999970515790341	WITHOUT_CLASSIFICATION	2.9484209660412366E-6	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999917525476365	WITHOUT_CLASSIFICATION	8.247452363364806E-6	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998373115443	WITHOUT_CLASSIFICATION	1.6268845558671642E-7	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999487656388635	WITHOUT_CLASSIFICATION	5.12343611364008E-5	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.999999626570013	WITHOUT_CLASSIFICATION	3.734299870379554E-7	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999960533377374	WITHOUT_CLASSIFICATION	3.946662262559162E-6	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999881994497966	WITHOUT_CLASSIFICATION	1.1800550203418574E-5	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999953856340343	WITHOUT_CLASSIFICATION	4.61436596562681E-6	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999992532308168	WITHOUT_CLASSIFICATION	7.467691830574422E-7	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9995953579215595	WITHOUT_CLASSIFICATION	4.046420784405246E-4	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9995220087021743	WITHOUT_CLASSIFICATION	4.779912978257889E-4	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9984511244976819	WITHOUT_CLASSIFICATION	0.0015488755023180523	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.99983287759778	WITHOUT_CLASSIFICATION	1.6712240221998387E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516762672148	WITHOUT_CLASSIFICATION	4.832373278519705E-5	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999787495823066	WITHOUT_CLASSIFICATION	2.1250417693398242E-5	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.999999839467056	WITHOUT_CLASSIFICATION	1.605329441045208E-7	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999908515807974	WITHOUT_CLASSIFICATION	9.14841920259331E-6	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999965065913873	WITHOUT_CLASSIFICATION	3.493408612645702E-6	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999986337253648	WITHOUT_CLASSIFICATION	1.3662746352448268E-6	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999919442927971	WITHOUT_CLASSIFICATION	8.055707202786546E-6	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998999019586317	WITHOUT_CLASSIFICATION	1.0009804136842174E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999508839340261	WITHOUT_CLASSIFICATION	4.911606597393364E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999672583647418	WITHOUT_CLASSIFICATION	3.2741635258171774E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9240921830944704	WITHOUT_CLASSIFICATION	0.07590781690552961	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999779085860319	WITHOUT_CLASSIFICATION	2.209141396809652E-5	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999997373804457	WITHOUT_CLASSIFICATION	2.6261955431030475E-6	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999934019748982	WITHOUT_CLASSIFICATION	6.598025101806685E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999746783873552	WITHOUT_CLASSIFICATION	2.5321612644817852E-5	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9466123713344102	WITHOUT_CLASSIFICATION	0.053387628665589645	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998993233609482	WITHOUT_CLASSIFICATION	1.0067663905174323E-4	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9977908321134867	WITHOUT_CLASSIFICATION	0.0022091678865132826	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999564764488751	WITHOUT_CLASSIFICATION	4.352355112502332E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.999978224276969	WITHOUT_CLASSIFICATION	2.1775723030912866E-5	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997814334654603	WITHOUT_CLASSIFICATION	2.1856653453958695E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9948114119886465	WITHOUT_CLASSIFICATION	0.005188588011353485	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999964637005596	WITHOUT_CLASSIFICATION	3.5362994404661925E-6	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999964637005596	WITHOUT_CLASSIFICATION	3.5362994404661925E-6	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998659753633682	WITHOUT_CLASSIFICATION	1.3402463663178077E-4	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998877920358791	WITHOUT_CLASSIFICATION	1.1220796412100234E-4	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999989814997913	WITHOUT_CLASSIFICATION	1.0185002086845258E-6	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999945422337406	WITHOUT_CLASSIFICATION	5.45776625934562E-6	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998908407921	WITHOUT_CLASSIFICATION	1.0915920790686564E-7	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998860760416051	WITHOUT_CLASSIFICATION	1.1392395839498588E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999984393299447	WITHOUT_CLASSIFICATION	1.5606700553244092E-6	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9997233997713667	WITHOUT_CLASSIFICATION	2.766002286333399E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999991368924703	WITHOUT_CLASSIFICATION	8.631075297117612E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9997603762213003	WITHOUT_CLASSIFICATION	2.3962377869972079E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999895294140572	WITHOUT_CLASSIFICATION	1.0470585942834457E-5	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999960078346286	WITHOUT_CLASSIFICATION	3.992165371482462E-6	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999945859732255	WITHOUT_CLASSIFICATION	5.414026774405055E-6	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998776445692	WITHOUT_CLASSIFICATION	1.2235543077743462E-7	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995737729815863	WITHOUT_CLASSIFICATION	4.2622701841367043E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999840051468232	WITHOUT_CLASSIFICATION	1.599485317691554E-5	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999669304261574	WITHOUT_CLASSIFICATION	3.3069573842526704E-5	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9589957194925582	WITHOUT_CLASSIFICATION	0.041004280507441766	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999431715408	WITHOUT_CLASSIFICATION	5.682845918980925E-8	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999995462077033	WITHOUT_CLASSIFICATION	4.537922966811952E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999998262817522	WITHOUT_CLASSIFICATION	1.7371824780128559E-6	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999943453497935	WITHOUT_CLASSIFICATION	5.654650206536307E-6	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999965998186818	WITHOUT_CLASSIFICATION	3.40018131809069E-6	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998826687942526	WITHOUT_CLASSIFICATION	1.1733120574737257E-4	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9997004566109438	WITHOUT_CLASSIFICATION	2.9954338905631547E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999917252500682	WITHOUT_CLASSIFICATION	8.274749931762925E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992916998375693	WITHOUT_CLASSIFICATION	7.083001624306722E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999964818795883	WITHOUT_CLASSIFICATION	3.5181204116326954E-6	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999990837538885	WITHOUT_CLASSIFICATION	9.162461115460876E-7	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999624321425352	WITHOUT_CLASSIFICATION	3.75678574648144E-4	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999640316606544	WITHOUT_CLASSIFICATION	3.5968339345615E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999966246307332	WITHOUT_CLASSIFICATION	3.375369266771013E-6	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.999369068992747	WITHOUT_CLASSIFICATION	6.309310072531033E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999679461013001	WITHOUT_CLASSIFICATION	3.205389869996774E-5	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999652013284875	WITHOUT_CLASSIFICATION	3.479867151235321E-5	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996973960897	WITHOUT_CLASSIFICATION	3.026039103449636E-7	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999993610177338	WITHOUT_CLASSIFICATION	6.389822662545222E-7	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999998637373456	WITHOUT_CLASSIFICATION	1.3626265431715224E-7	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999777547148259	WITHOUT_CLASSIFICATION	2.2245285174098142E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999996409950519	WITHOUT_CLASSIFICATION	3.59004948116289E-7	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995332284829	WITHOUT_CLASSIFICATION	4.667715171115614E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997943720552174	WITHOUT_CLASSIFICATION	2.0562794478269677E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999200147863	WITHOUT_CLASSIFICATION	7.998521369698576E-7	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999997984484288	WITHOUT_CLASSIFICATION	2.015515713552103E-7	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999472266798	WITHOUT_CLASSIFICATION	5.2773320213225835E-8	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999595530579	WITHOUT_CLASSIFICATION	4.0446942155665074E-8	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997910746030475	WITHOUT_CLASSIFICATION	2.0892539695251401E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9815098925308242	WITHOUT_CLASSIFICATION	0.018490107469175836	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992956583234	WITHOUT_CLASSIFICATION	7.043416766874993E-7	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999950545112	WITHOUT_CLASSIFICATION	4.9454888327809006E-9	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999926958837846	WITHOUT_CLASSIFICATION	7.304116215500515E-6	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996971544555943	WITHOUT_CLASSIFICATION	3.028455444057077E-4	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999678303857	WITHOUT_CLASSIFICATION	3.216961437970751E-8	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999917483094052	WITHOUT_CLASSIFICATION	8.251690594787525E-6	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999938608400171	WITHOUT_CLASSIFICATION	6.139159982946485E-6	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999997944898111	WITHOUT_CLASSIFICATION	2.055101888484913E-7	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.8407779056047628	WITHOUT_CLASSIFICATION	0.1592220943952372	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999996287254378	WITHOUT_CLASSIFICATION	3.7127456226047856E-7	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999444523866867	WITHOUT_CLASSIFICATION	5.55476133133079E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999991602235061	WITHOUT_CLASSIFICATION	8.397764938630585E-7	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999982738666161	WITHOUT_CLASSIFICATION	1.7261333838631047E-6	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9997731105541203	WITHOUT_CLASSIFICATION	2.2688944587963587E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.999996475929869	WITHOUT_CLASSIFICATION	3.5240701310160145E-6	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9996766024339643	WITHOUT_CLASSIFICATION	3.2339756603572644E-4	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998203789817	WITHOUT_CLASSIFICATION	1.7962101829639144E-7	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999703617899374	WITHOUT_CLASSIFICATION	2.963821006259748E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999650684186067	WITHOUT_CLASSIFICATION	3.493158139333321E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995922048481	WITHOUT_CLASSIFICATION	4.077951518239817E-7	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999977750442935	WITHOUT_CLASSIFICATION	2.224955706550292E-6	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999984464304493	WITHOUT_CLASSIFICATION	1.5535695507002122E-5	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999309601015	WITHOUT_CLASSIFICATION	6.903989840953223E-8	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999984464304493	WITHOUT_CLASSIFICATION	1.5535695507002122E-5	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999752133393	WITHOUT_CLASSIFICATION	2.4786660752546355E-8	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999948271363227	WITHOUT_CLASSIFICATION	5.172863677266439E-6	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999935192310993	WITHOUT_CLASSIFICATION	6.480768900702557E-5	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998843660609	WITHOUT_CLASSIFICATION	1.1563393901366838E-7	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999998946413214	WITHOUT_CLASSIFICATION	1.0535867855784283E-7	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998056563086635	WITHOUT_CLASSIFICATION	1.9434369133648606E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999995286998762	WITHOUT_CLASSIFICATION	4.7130012393414633E-7	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998956279686764	WITHOUT_CLASSIFICATION	1.0437203132362318E-4	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999934895650556	WITHOUT_CLASSIFICATION	6.510434944334968E-6	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999810727687041	WITHOUT_CLASSIFICATION	1.8927231295917688E-5	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999994260834855	WITHOUT_CLASSIFICATION	5.739165145779974E-7	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999560442769169	WITHOUT_CLASSIFICATION	4.395572308318694E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999783861926	WITHOUT_CLASSIFICATION	2.1613807363232658E-8	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9976179586580172	DESIGN	0.0023820413419828068	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999982579065896	WITHOUT_CLASSIFICATION	1.7420934103866714E-6	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999144426877	WITHOUT_CLASSIFICATION	8.555731227645108E-8	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999990169991015	WITHOUT_CLASSIFICATION	9.83000898394781E-7	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.999999866322821	WITHOUT_CLASSIFICATION	1.3367717907098316E-7	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999995947444878	WITHOUT_CLASSIFICATION	4.052555121987127E-6	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9635785047446267	WITHOUT_CLASSIFICATION	0.036421495255373346	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9998663206612828	WITHOUT_CLASSIFICATION	1.3367933871718146E-4	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999813192104656	WITHOUT_CLASSIFICATION	1.8680789534324042E-5	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9950834983345672	WITHOUT_CLASSIFICATION	0.004916501665432788	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999444854478636	WITHOUT_CLASSIFICATION	5.5514552136497964E-5	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999446104630816	WITHOUT_CLASSIFICATION	5.538953691836632E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999988019017586	WITHOUT_CLASSIFICATION	1.1980982414539532E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.998809117367099	WITHOUT_CLASSIFICATION	0.0011908826329009548	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999663346436418	WITHOUT_CLASSIFICATION	3.366535635822517E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999947049965002	WITHOUT_CLASSIFICATION	5.295003499818998E-6	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999989434436952	WITHOUT_CLASSIFICATION	1.0565563047953708E-6	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999992195879158	WITHOUT_CLASSIFICATION	7.804120841564363E-7	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9995304435280484	WITHOUT_CLASSIFICATION	4.6955647195147263E-4	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.999992431213023	WITHOUT_CLASSIFICATION	7.5687869771341285E-6	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9996512635583349	WITHOUT_CLASSIFICATION	3.4873644166503824E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999483276167389	WITHOUT_CLASSIFICATION	5.167238326119301E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999976924504997	WITHOUT_CLASSIFICATION	2.3075495001536174E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999986392448186	WITHOUT_CLASSIFICATION	1.3607551813283433E-6	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999998652112401	WITHOUT_CLASSIFICATION	1.3478875989423753E-6	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999170549164212	WITHOUT_CLASSIFICATION	8.294508357876324E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999967592527571	WITHOUT_CLASSIFICATION	3.24074724285456E-6	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999984599028913	WITHOUT_CLASSIFICATION	1.540097108776748E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999973276070988	WITHOUT_CLASSIFICATION	2.672392901100664E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999478616127148	WITHOUT_CLASSIFICATION	5.2138387285144534E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999988019017586	WITHOUT_CLASSIFICATION	1.1980982414539532E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998507519854141	WITHOUT_CLASSIFICATION	1.4924801458585527E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999983948853793	WITHOUT_CLASSIFICATION	1.6051146207098866E-6	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.999379016301419	WITHOUT_CLASSIFICATION	6.209836985810203E-4	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999994329687896	WITHOUT_CLASSIFICATION	5.670312105669353E-7	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999991766459808	WITHOUT_CLASSIFICATION	8.233540191001165E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999995156787181	WITHOUT_CLASSIFICATION	4.843212818790448E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999303326790069	WITHOUT_CLASSIFICATION	6.966732099318052E-5	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.5415916592779698	DESIGN	0.4584083407220301	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9996551865248986	WITHOUT_CLASSIFICATION	3.448134751013697E-4	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9942886195630105	WITHOUT_CLASSIFICATION	0.0057113804369894605	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999210836361814	WITHOUT_CLASSIFICATION	7.891636381863494E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999902549817314	WITHOUT_CLASSIFICATION	9.745018268640524E-6	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999913484658021	WITHOUT_CLASSIFICATION	8.651534197929468E-6	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998851251089717	WITHOUT_CLASSIFICATION	1.1487489102831992E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999988976274515	WITHOUT_CLASSIFICATION	1.1023725484390667E-6	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.999995876042701	WITHOUT_CLASSIFICATION	4.123957299034864E-6	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998494369884	WITHOUT_CLASSIFICATION	1.5056301166493871E-7	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999983164997344	WITHOUT_CLASSIFICATION	1.6835002656798393E-6	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999984039797353	WITHOUT_CLASSIFICATION	1.5960202647198328E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998507519854141	WITHOUT_CLASSIFICATION	1.4924801458585527E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999991465074318	WITHOUT_CLASSIFICATION	8.534925681256074E-7	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9956638979971144	WITHOUT_CLASSIFICATION	0.004336102002885599	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999773303979149	WITHOUT_CLASSIFICATION	2.2669602085155532E-5	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994005563913154	WITHOUT_CLASSIFICATION	5.994436086846853E-4	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999721810137615	WITHOUT_CLASSIFICATION	2.7818986238449933E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.997244973551485	WITHOUT_CLASSIFICATION	0.002755026448515	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.997244973551485	WITHOUT_CLASSIFICATION	0.002755026448515	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999983110393201	WITHOUT_CLASSIFICATION	1.6889606799596678E-6	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.997244973551485	WITHOUT_CLASSIFICATION	0.002755026448515	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.997244973551485	WITHOUT_CLASSIFICATION	0.002755026448515	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9997072601459857	WITHOUT_CLASSIFICATION	2.927398540143048E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999945636649145	WITHOUT_CLASSIFICATION	5.436335085527582E-6	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999796907461298	WITHOUT_CLASSIFICATION	2.030925387022114E-5	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999848172390168	WITHOUT_CLASSIFICATION	1.5182760983149973E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998437341449208	WITHOUT_CLASSIFICATION	1.562658550792705E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9935932223285392	WITHOUT_CLASSIFICATION	0.006406777671460745	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9889490401260876	WITHOUT_CLASSIFICATION	0.011050959873912438	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999989397010502	WITHOUT_CLASSIFICATION	1.0602989497080748E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999879318836331	WITHOUT_CLASSIFICATION	1.20681163668431E-5	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999898496562535	WITHOUT_CLASSIFICATION	1.0150343746508845E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998476354261508	WITHOUT_CLASSIFICATION	1.523645738490727E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999805584828381	WITHOUT_CLASSIFICATION	1.9441517161974685E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999818848259344	WITHOUT_CLASSIFICATION	1.8115174065512006E-5	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999946395365117	WITHOUT_CLASSIFICATION	5.3604634883229655E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999960215710483	WITHOUT_CLASSIFICATION	3.97842895166277E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9978252924365878	WITHOUT_CLASSIFICATION	0.0021747075634122133	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993955882911	WITHOUT_CLASSIFICATION	6.044117088563711E-7	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999995459553511	WITHOUT_CLASSIFICATION	4.540446488422077E-7	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9802120616543457	WITHOUT_CLASSIFICATION	0.019787938345654274	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999810359705524	WITHOUT_CLASSIFICATION	1.8964029447624525E-5	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999553571377453	WITHOUT_CLASSIFICATION	4.4642862254606234E-5	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999946605610714	WITHOUT_CLASSIFICATION	5.339438928591528E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999993955882911	WITHOUT_CLASSIFICATION	6.044117088563711E-7	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.998809117367099	WITHOUT_CLASSIFICATION	0.0011908826329009548	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999985187276343	WITHOUT_CLASSIFICATION	1.4812723656510366E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999053168167	WITHOUT_CLASSIFICATION	9.468318331063078E-8	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993231372916	WITHOUT_CLASSIFICATION	6.768627085636478E-7	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999989964165582	WITHOUT_CLASSIFICATION	1.0035834417685534E-6	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999435733655486	WITHOUT_CLASSIFICATION	5.642663445137996E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999957843662641	WITHOUT_CLASSIFICATION	4.215633735780059E-6	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999213376358312	WITHOUT_CLASSIFICATION	7.866236416867713E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999980291808508	WITHOUT_CLASSIFICATION	1.9708191491758243E-6	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9995356200240121	WITHOUT_CLASSIFICATION	4.6437997598801464E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999668977239481	WITHOUT_CLASSIFICATION	3.3102276051908345E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999393564583	WITHOUT_CLASSIFICATION	6.064354174776147E-8	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9997935666804091	WITHOUT_CLASSIFICATION	2.064333195908721E-4	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999741585499	WITHOUT_CLASSIFICATION	2.5841449986922973E-8	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999968887575965	WITHOUT_CLASSIFICATION	3.111242403495453E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999883129372503	WITHOUT_CLASSIFICATION	1.1687062749818398E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9999959345694129	WITHOUT_CLASSIFICATION	4.0654305870333496E-6	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999979514875631	WITHOUT_CLASSIFICATION	2.04851243686589E-6	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999863299868382	WITHOUT_CLASSIFICATION	1.3670013161780784E-5	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999532915339503	WITHOUT_CLASSIFICATION	4.67084660495764E-5	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9966277517987121	WITHOUT_CLASSIFICATION	0.003372248201287902	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999895864102248	WITHOUT_CLASSIFICATION	1.0413589775120639E-5	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999981005562677	WITHOUT_CLASSIFICATION	1.8994437322852748E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999980291808508	WITHOUT_CLASSIFICATION	1.9708191491758243E-6	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999018985517	WITHOUT_CLASSIFICATION	9.810144829257257E-8	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9995687903497171	WITHOUT_CLASSIFICATION	4.3120965028291676E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999699133966281	WITHOUT_CLASSIFICATION	3.0086603371910936E-5	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9991858655635709	WITHOUT_CLASSIFICATION	8.141344364289773E-4	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984278567913	WITHOUT_CLASSIFICATION	1.57214320869875E-5	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999984308037871	WITHOUT_CLASSIFICATION	1.5691962129415531E-6	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999867655324239	WITHOUT_CLASSIFICATION	1.3234467576108237E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999283489412236	WITHOUT_CLASSIFICATION	7.165105877635852E-5	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999991461743757	WITHOUT_CLASSIFICATION	8.538256243110476E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999969554935435	WITHOUT_CLASSIFICATION	3.0445064564515947E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999970992837454	WITHOUT_CLASSIFICATION	2.900716254674908E-6	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998277606087	WITHOUT_CLASSIFICATION	1.7223939142176873E-7	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9995173580274359	WITHOUT_CLASSIFICATION	4.8264197256415146E-4	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999797680358	WITHOUT_CLASSIFICATION	2.0231964306362103E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999895677082679	WITHOUT_CLASSIFICATION	1.043229173212641E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999998674947881	WITHOUT_CLASSIFICATION	1.325052118827817E-7	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999952088238231	WITHOUT_CLASSIFICATION	4.791176176903913E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999970992837454	WITHOUT_CLASSIFICATION	2.900716254674908E-6	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999979502718275	WITHOUT_CLASSIFICATION	2.0497281725127147E-6	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9646378362647318	WITHOUT_CLASSIFICATION	0.035362163735268216	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999989762439013	WITHOUT_CLASSIFICATION	1.023756098672663E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999952462364695	WITHOUT_CLASSIFICATION	4.753763530504431E-6	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9999901769713967	WITHOUT_CLASSIFICATION	9.823028603428117E-6	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.99999963968779	WITHOUT_CLASSIFICATION	3.60312209945418E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999895677082679	WITHOUT_CLASSIFICATION	1.043229173212641E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999955030702787	WITHOUT_CLASSIFICATION	4.496929721295921E-6	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995433071952884	WITHOUT_CLASSIFICATION	4.566928047116197E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989411704613	WITHOUT_CLASSIFICATION	1.0588295386955863E-6	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999785333270284	WITHOUT_CLASSIFICATION	2.146667297164801E-5	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999516631906655	WITHOUT_CLASSIFICATION	4.83368093345795E-5	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999972777670904	WITHOUT_CLASSIFICATION	2.7222329096033564E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999986497302484	WITHOUT_CLASSIFICATION	1.3502697515631199E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999986497302484	WITHOUT_CLASSIFICATION	1.3502697515631199E-6	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997239571293971	WITHOUT_CLASSIFICATION	2.7604287060289045E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999969433368859	WITHOUT_CLASSIFICATION	3.056663114025317E-6	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999804370585709	WITHOUT_CLASSIFICATION	1.956294142918126E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999834812070076	WITHOUT_CLASSIFICATION	1.651879299230928E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999919111387016	WITHOUT_CLASSIFICATION	8.0888612984855E-6	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657361529366	WITHOUT_CLASSIFICATION	3.426384706336375E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798078392187	WITHOUT_CLASSIFICATION	2.0192160781236505E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802095221233	WITHOUT_CLASSIFICATION	1.9790477876716475E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9587365942249173	WITHOUT_CLASSIFICATION	0.04126340577508267	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966345422066	WITHOUT_CLASSIFICATION	3.365457793506405E-6	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999657361529366	WITHOUT_CLASSIFICATION	3.426384706336375E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999798078392187	WITHOUT_CLASSIFICATION	2.0192160781236505E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999802095221233	WITHOUT_CLASSIFICATION	1.9790477876716475E-5	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999036003088183	WITHOUT_CLASSIFICATION	9.639969118164669E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9997681209327264	WITHOUT_CLASSIFICATION	2.3187906727366203E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999816900282573	WITHOUT_CLASSIFICATION	1.8309971742740792E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999972810701532	WITHOUT_CLASSIFICATION	2.7189298468731207E-6	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9998477621243916	WITHOUT_CLASSIFICATION	1.5223787560838235E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9798760734149998	DESIGN	0.02012392658500027	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999983890772328	WITHOUT_CLASSIFICATION	1.610922767279891E-6	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9998735648462878	WITHOUT_CLASSIFICATION	1.2643515371219257E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.999955835257138	WITHOUT_CLASSIFICATION	4.416474286195224E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9948509200801059	WITHOUT_CLASSIFICATION	0.00514907991989402	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999949091489865	WITHOUT_CLASSIFICATION	5.090851013502854E-6	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9638033237179106	WITHOUT_CLASSIFICATION	0.036196676282089474	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9986583126225796	WITHOUT_CLASSIFICATION	0.0013416873774203563	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.999698003985834	WITHOUT_CLASSIFICATION	3.019960141660291E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999680659724406	WITHOUT_CLASSIFICATION	3.1934027559396384E-5	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999863981346239	WITHOUT_CLASSIFICATION	1.3601865376197295E-5	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9996243813189265	WITHOUT_CLASSIFICATION	3.7561868107354195E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999975511023864	WITHOUT_CLASSIFICATION	2.448897613571265E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999892324910233	WITHOUT_CLASSIFICATION	1.0767508976672599E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999992290965732	WITHOUT_CLASSIFICATION	7.709034267235686E-7	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999971525127561	WITHOUT_CLASSIFICATION	2.847487244009319E-6	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9993887685565886	WITHOUT_CLASSIFICATION	6.112314434113712E-4	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998899425642	WITHOUT_CLASSIFICATION	1.1005743573545276E-7	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999167860425952	WITHOUT_CLASSIFICATION	8.321395740481242E-5	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999906316908385	WITHOUT_CLASSIFICATION	9.368309161570179E-6	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999464056867942	WITHOUT_CLASSIFICATION	5.3594313205868876E-5	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941612852569	WITHOUT_CLASSIFICATION	5.838714743166013E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999815373892852	WITHOUT_CLASSIFICATION	1.8462610714817077E-5	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9995072977657768	WITHOUT_CLASSIFICATION	4.927022342231668E-4	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916748480916	WITHOUT_CLASSIFICATION	8.325151908415023E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971240273956	WITHOUT_CLASSIFICATION	2.8759726044877324E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999418556012148	WITHOUT_CLASSIFICATION	5.8144398785203215E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999418556012148	WITHOUT_CLASSIFICATION	5.8144398785203215E-5	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999978619820694	WITHOUT_CLASSIFICATION	2.1380179306266436E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999971315207	WITHOUT_CLASSIFICATION	2.868479346928481E-9	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999962548188152	WITHOUT_CLASSIFICATION	3.7451811848009295E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997642996399865	WITHOUT_CLASSIFICATION	2.3570036001345146E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9975865831541558	WITHOUT_CLASSIFICATION	0.0024134168458441753	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999995963953386	WITHOUT_CLASSIFICATION	4.036046614086426E-6	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9998771728750188	WITHOUT_CLASSIFICATION	1.2282712498129847E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999959280006137	WITHOUT_CLASSIFICATION	4.0719993863603425E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9991504108563556	WITHOUT_CLASSIFICATION	8.495891436444203E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999790771759	WITHOUT_CLASSIFICATION	2.0922824134133625E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999522299989	WITHOUT_CLASSIFICATION	4.7770001156658393E-8	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999245779463	WITHOUT_CLASSIFICATION	7.542205375576727E-8	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998236495488	WITHOUT_CLASSIFICATION	1.7635045123337797E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998867662222	WITHOUT_CLASSIFICATION	1.1323377786605224E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999475599081	WITHOUT_CLASSIFICATION	5.2440091950985474E-8	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998951488451	WITHOUT_CLASSIFICATION	1.0485115483703517E-7	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999671166084	WITHOUT_CLASSIFICATION	3.2883391533250584E-8	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999675326683	WITHOUT_CLASSIFICATION	3.246733168250203E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999615418874	WITHOUT_CLASSIFICATION	3.845811261459307E-8	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989396062585	WITHOUT_CLASSIFICATION	1.0603937415210202E-6	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999628650417824	WITHOUT_CLASSIFICATION	3.7134958217547776E-5	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999888863329951	WITHOUT_CLASSIFICATION	1.1113667004921381E-5	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994724980928597	WITHOUT_CLASSIFICATION	5.275019071403734E-4	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999752053859372	WITHOUT_CLASSIFICATION	2.479461406283796E-5	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9970428247344909	WITHOUT_CLASSIFICATION	0.002957175265508982	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9771956116306999	WITHOUT_CLASSIFICATION	0.022804388369300155	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999977375617853	WITHOUT_CLASSIFICATION	2.262438214682809E-6	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9965254600324438	WITHOUT_CLASSIFICATION	0.0034745399675561676	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994724980928597	WITHOUT_CLASSIFICATION	5.275019071403734E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994724980928597	WITHOUT_CLASSIFICATION	5.275019071403734E-4	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9993539258136503	WITHOUT_CLASSIFICATION	6.460741863496609E-4	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999861203382213	WITHOUT_CLASSIFICATION	1.3879661778661954E-5	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9998496804638064	WITHOUT_CLASSIFICATION	1.503195361935864E-4	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9986949234827409	WITHOUT_CLASSIFICATION	0.0013050765172590469	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999710423126859	WITHOUT_CLASSIFICATION	2.895768731412381E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999992290965732	WITHOUT_CLASSIFICATION	7.709034267235686E-7	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999892989784351	WITHOUT_CLASSIFICATION	1.0701021564872768E-5	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999987669475454	WITHOUT_CLASSIFICATION	1.2330524546015887E-5	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999959328064144	WITHOUT_CLASSIFICATION	4.067193585599583E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979660182093681	WITHOUT_CLASSIFICATION	0.0020339817906318333	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999593239213724	WITHOUT_CLASSIFICATION	4.0676078627548166E-5	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998740383705695	WITHOUT_CLASSIFICATION	1.2596162943044817E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998906663319727	WITHOUT_CLASSIFICATION	1.0933366802732567E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998906663319727	WITHOUT_CLASSIFICATION	1.0933366802732567E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996340046286188	WITHOUT_CLASSIFICATION	3.6599537138110163E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996340046286188	WITHOUT_CLASSIFICATION	3.6599537138110163E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991641850702939	WITHOUT_CLASSIFICATION	8.358149297061347E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941681863194	WITHOUT_CLASSIFICATION	5.831813680662985E-6	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999989430696	WITHOUT_CLASSIFICATION	1.056930408425899E-9	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994266156255127	WITHOUT_CLASSIFICATION	5.733843744872821E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999509997225369	WITHOUT_CLASSIFICATION	4.90002774631571E-5	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9939895648374018	WITHOUT_CLASSIFICATION	0.006010435162598233	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919886223715	WITHOUT_CLASSIFICATION	8.011377628461968E-6	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999536283446683	WITHOUT_CLASSIFICATION	4.637165533169629E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9881559659929762	WITHOUT_CLASSIFICATION	0.011844034007023746	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9999975367415906	WITHOUT_CLASSIFICATION	2.4632584093441414E-6	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999985334422985	WITHOUT_CLASSIFICATION	1.466557701558611E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999975683523419	WITHOUT_CLASSIFICATION	2.4316476580947275E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9991577129763498	WITHOUT_CLASSIFICATION	8.422870236501396E-4	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999993713369126	WITHOUT_CLASSIFICATION	6.286630873062491E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999980947915337	WITHOUT_CLASSIFICATION	1.905208466380517E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999980947915337	WITHOUT_CLASSIFICATION	1.905208466380517E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999980947915337	WITHOUT_CLASSIFICATION	1.905208466380517E-6	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9992267874331918	WITHOUT_CLASSIFICATION	7.732125668082679E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999985121493022	WITHOUT_CLASSIFICATION	1.4878506976761989E-6	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999746210384	WITHOUT_CLASSIFICATION	2.5378961503849683E-8	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999967668776907	WITHOUT_CLASSIFICATION	3.233122309366745E-6	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998301010648774	WITHOUT_CLASSIFICATION	1.6989893512266816E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998826211766438	WITHOUT_CLASSIFICATION	1.1737882335611059E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999936405791058	WITHOUT_CLASSIFICATION	6.359420894217247E-6	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998650312690096	WITHOUT_CLASSIFICATION	1.349687309903555E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999995863867998	WITHOUT_CLASSIFICATION	4.1361320022912127E-7	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999980669254427	WITHOUT_CLASSIFICATION	1.933074557314853E-6	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997342506932145	WITHOUT_CLASSIFICATION	2.657493067854772E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999563412891925	WITHOUT_CLASSIFICATION	4.365871080740374E-5	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974220616424	WITHOUT_CLASSIFICATION	2.577938357644695E-6	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999998793481603	WITHOUT_CLASSIFICATION	1.2065183976663505E-7	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999717652543617	WITHOUT_CLASSIFICATION	2.82347456382457E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.998899766509651	WITHOUT_CLASSIFICATION	0.0011002334903490517	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998346381303607	WITHOUT_CLASSIFICATION	1.653618696393822E-4	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9997018473306921	WITHOUT_CLASSIFICATION	2.98152669307898E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9996338900434539	WITHOUT_CLASSIFICATION	3.661099565460071E-4	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999963470823605	WITHOUT_CLASSIFICATION	3.6529176394754188E-6	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999249509374	WITHOUT_CLASSIFICATION	7.50490626522181E-8	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999298304713	WITHOUT_CLASSIFICATION	7.016952870961639E-8	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999933732514138	WITHOUT_CLASSIFICATION	6.626748586130699E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999981607119307	WITHOUT_CLASSIFICATION	1.8392880693263033E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999445920922316	WITHOUT_CLASSIFICATION	5.5407907768412915E-5	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9982980691725792	WITHOUT_CLASSIFICATION	0.001701930827420727	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999652561935413	WITHOUT_CLASSIFICATION	3.474380645877616E-5	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999800097158512	WITHOUT_CLASSIFICATION	1.99902841488092E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999927322779	WITHOUT_CLASSIFICATION	7.2677221390146635E-9	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9997875069280645	WITHOUT_CLASSIFICATION	2.1249307193548384E-4	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9997312231458445	WITHOUT_CLASSIFICATION	2.6877685415550455E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999894661427494	WITHOUT_CLASSIFICATION	1.0533857250602814E-5	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999677658874907	WITHOUT_CLASSIFICATION	3.223411250936589E-5	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9475966777948174	WITHOUT_CLASSIFICATION	0.05240332220518252	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999997542231713	WITHOUT_CLASSIFICATION	2.4577682861373414E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998039073141229	WITHOUT_CLASSIFICATION	1.9609268587715458E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999991570312028	WITHOUT_CLASSIFICATION	8.42968797159379E-7	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999771555401674	WITHOUT_CLASSIFICATION	2.2844459832483428E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999985564904841	WITHOUT_CLASSIFICATION	1.4435095159063677E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999800673962775	WITHOUT_CLASSIFICATION	1.993260372249799E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999931029658214	WITHOUT_CLASSIFICATION	6.8970341785260704E-6	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999899009078774	WITHOUT_CLASSIFICATION	1.0099092122612652E-5	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.5989236852528569	WITHOUT_CLASSIFICATION	0.40107631474714317	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.99947706575555	WITHOUT_CLASSIFICATION	5.229342444500549E-4	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999933558234875	WITHOUT_CLASSIFICATION	6.6441765125360365E-6	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998576931015577	WITHOUT_CLASSIFICATION	1.423068984423164E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999768295798	WITHOUT_CLASSIFICATION	2.3170420245186753E-8	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999970954296892	WITHOUT_CLASSIFICATION	2.904570310776638E-6	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999968922016105	WITHOUT_CLASSIFICATION	3.1077983895310267E-6	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999870390545256	WITHOUT_CLASSIFICATION	1.2960945474486559E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999989369803397	WITHOUT_CLASSIFICATION	1.0630196602559445E-6	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999569640415003	WITHOUT_CLASSIFICATION	4.3035958499696616E-5	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997370745438438	WITHOUT_CLASSIFICATION	2.6292545615620456E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999974337675535	WITHOUT_CLASSIFICATION	2.5662324465255436E-6	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999994860489384	WITHOUT_CLASSIFICATION	5.139510615691607E-7	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999911554141434	WITHOUT_CLASSIFICATION	8.844585856725819E-6	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9994911147725277	WITHOUT_CLASSIFICATION	5.088852274723029E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999998130175004	WITHOUT_CLASSIFICATION	1.8698249950767035E-7	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999645904117379	WITHOUT_CLASSIFICATION	3.5409588262110444E-5	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9969112035995669	WITHOUT_CLASSIFICATION	0.0030887964004331107	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999988215932035	WITHOUT_CLASSIFICATION	1.1784067964919907E-5	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999812783713	WITHOUT_CLASSIFICATION	1.8721628604338587E-8	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999976968029438	WITHOUT_CLASSIFICATION	2.3031970560599527E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998063910422339	WITHOUT_CLASSIFICATION	1.936089577661585E-4	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999982978765476	WITHOUT_CLASSIFICATION	1.702123452351537E-6	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.997389068023541	WITHOUT_CLASSIFICATION	0.0026109319764590763	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9849702044474635	WITHOUT_CLASSIFICATION	0.01502979555253649	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999984377092358	WITHOUT_CLASSIFICATION	1.562290764235461E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999979912639424	WITHOUT_CLASSIFICATION	2.0087360576007558E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999979912639424	WITHOUT_CLASSIFICATION	2.0087360576007558E-6	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998203048529	WITHOUT_CLASSIFICATION	1.796951470971369E-7	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998730690328428	WITHOUT_CLASSIFICATION	1.2693096715709536E-4	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998763026737294	WITHOUT_CLASSIFICATION	1.2369732627058797E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998122727683899	WITHOUT_CLASSIFICATION	1.8772723161000833E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999422685917174	WITHOUT_CLASSIFICATION	5.773140828267092E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999952266489841	WITHOUT_CLASSIFICATION	4.773351015874674E-6	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999997305796241	WITHOUT_CLASSIFICATION	2.694203759179617E-7	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999782511809919	WITHOUT_CLASSIFICATION	2.1748819008000426E-5	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.999966243906434	WITHOUT_CLASSIFICATION	3.3756093566040115E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.999999973565424	WITHOUT_CLASSIFICATION	2.6434575938013982E-8	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996793712908	WITHOUT_CLASSIFICATION	3.20628709254919E-7	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999345082408	WITHOUT_CLASSIFICATION	6.549175928941841E-8	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999976794517506	WITHOUT_CLASSIFICATION	2.320548249434842E-6	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999976131319351	WITHOUT_CLASSIFICATION	2.3868680648835623E-6	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.999966731760306	WITHOUT_CLASSIFICATION	3.326823969404383E-5	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.904465832285498	WITHOUT_CLASSIFICATION	0.09553416771450199	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999973506468416	WITHOUT_CLASSIFICATION	2.649353158536581E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9323970982232923	WITHOUT_CLASSIFICATION	0.06760290177670769	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.839249797195588	WITHOUT_CLASSIFICATION	0.16075020280441196	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9996058970770839	WITHOUT_CLASSIFICATION	3.9410292291603555E-4	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999959725088152	WITHOUT_CLASSIFICATION	4.027491184827105E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999687864110812	WITHOUT_CLASSIFICATION	3.12135889187924E-5	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9983638679166733	WITHOUT_CLASSIFICATION	0.00163613208332672	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999473459480037	WITHOUT_CLASSIFICATION	5.265405199624445E-5	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996958420054	WITHOUT_CLASSIFICATION	3.0415799457967586E-7	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999552826362347	WITHOUT_CLASSIFICATION	4.471736376528164E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999923685738765	WITHOUT_CLASSIFICATION	7.631426123445547E-6	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999968809803207	WITHOUT_CLASSIFICATION	3.1190196792819083E-6	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999829963939767	WITHOUT_CLASSIFICATION	1.700360602325812E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999922353837499	WITHOUT_CLASSIFICATION	7.764616250098096E-6	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999955080423777	WITHOUT_CLASSIFICATION	4.491957622410899E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999932707359782	WITHOUT_CLASSIFICATION	6.729264021778402E-6	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999954024619955	WITHOUT_CLASSIFICATION	4.597538004518443E-6	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999961359578668	WITHOUT_CLASSIFICATION	3.864042133138339E-6	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997006856652393	WITHOUT_CLASSIFICATION	2.9931433476078264E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997006856652393	WITHOUT_CLASSIFICATION	2.9931433476078264E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999987556366438	WITHOUT_CLASSIFICATION	1.244363356197449E-6	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999685971946641	WITHOUT_CLASSIFICATION	3.14028053358106E-5	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9998245938502864	WITHOUT_CLASSIFICATION	1.754061497136787E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9998990880393929	WITHOUT_CLASSIFICATION	1.009119606070673E-4	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9994837189972674	WITHOUT_CLASSIFICATION	5.162810027327015E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999935503224594	WITHOUT_CLASSIFICATION	6.449677540591709E-6	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.999999599722504	WITHOUT_CLASSIFICATION	4.0027749603729746E-7	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.999323995406808	WITHOUT_CLASSIFICATION	6.760045931918613E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9976962757825362	WITHOUT_CLASSIFICATION	0.0023037242174637515	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9970930736241255	WITHOUT_CLASSIFICATION	0.0029069263758745396	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999907079899788	WITHOUT_CLASSIFICATION	9.292010021174874E-6	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999188813416378	WITHOUT_CLASSIFICATION	8.111865836229614E-5	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9980632348205163	WITHOUT_CLASSIFICATION	0.001936765179483682	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999996275102434	WITHOUT_CLASSIFICATION	3.724897566331118E-7	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999848364114954	WITHOUT_CLASSIFICATION	1.516358850449691E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998088555961	WITHOUT_CLASSIFICATION	1.9114440378714847E-7	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.994586903209007	WITHOUT_CLASSIFICATION	0.005413096790992976	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.994586903209007	WITHOUT_CLASSIFICATION	0.005413096790992976	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999992780154625	WITHOUT_CLASSIFICATION	7.219845375706686E-7	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.999999724295434	WITHOUT_CLASSIFICATION	2.7570456600171324E-7	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9884721365283077	WITHOUT_CLASSIFICATION	0.011527863471692315	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999987635870031	WITHOUT_CLASSIFICATION	1.236412996823224E-6	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999974672766028	WITHOUT_CLASSIFICATION	2.532723397145E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999846147757226	WITHOUT_CLASSIFICATION	1.538522427735526E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994751378968	WITHOUT_CLASSIFICATION	5.248621030921055E-7	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999977914399282	WITHOUT_CLASSIFICATION	2.2085600718188903E-6	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999892456766	WITHOUT_CLASSIFICATION	1.0754323539866958E-8	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9998031375854511	WITHOUT_CLASSIFICATION	1.9686241454892046E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9998031375854511	WITHOUT_CLASSIFICATION	1.9686241454892046E-4	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999928287556133	WITHOUT_CLASSIFICATION	7.171244386664399E-6	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9952109473545783	WITHOUT_CLASSIFICATION	0.004789052645421754	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999995875499783	WITHOUT_CLASSIFICATION	4.124500217293527E-7	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999449786258455	WITHOUT_CLASSIFICATION	5.5021374154432216E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999994039221547	WITHOUT_CLASSIFICATION	5.960778453250689E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999843462993344	WITHOUT_CLASSIFICATION	1.565370066555158E-5	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9663803285164019	WITHOUT_CLASSIFICATION	0.03361967148359821	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999928170709091	WITHOUT_CLASSIFICATION	7.182929090860301E-6	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999636968314227	WITHOUT_CLASSIFICATION	3.630316857725542E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999834239111363	WITHOUT_CLASSIFICATION	1.6576088863665424E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997025013991	WITHOUT_CLASSIFICATION	2.974986008767262E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9983795106593061	WITHOUT_CLASSIFICATION	0.0016204893406939122	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9994799482353399	WITHOUT_CLASSIFICATION	5.200517646600648E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999676974096592	WITHOUT_CLASSIFICATION	3.2302590340773935E-5	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999895914749215	WITHOUT_CLASSIFICATION	1.0408525078521174E-5	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999943422934898	WITHOUT_CLASSIFICATION	5.657706510177347E-6	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.999624321425352	WITHOUT_CLASSIFICATION	3.75678574648144E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999996440777381	WITHOUT_CLASSIFICATION	3.559222618288375E-7	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999712837703	WITHOUT_CLASSIFICATION	2.8716229725543095E-8	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999786398470405	WITHOUT_CLASSIFICATION	2.1360152959592802E-5	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999804206490108	WITHOUT_CLASSIFICATION	1.9579350989223698E-5	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999951802080195	WITHOUT_CLASSIFICATION	4.819791980540409E-6	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.999999566635682	WITHOUT_CLASSIFICATION	4.3336431795892536E-7	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999970267816054	WITHOUT_CLASSIFICATION	2.9732183945757725E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999998710061148	WITHOUT_CLASSIFICATION	1.2899388527621268E-7	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9995389191069249	WITHOUT_CLASSIFICATION	4.6108089307499823E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9989612617762679	WITHOUT_CLASSIFICATION	0.0010387382237321825	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9995668039411755	WITHOUT_CLASSIFICATION	4.331960588245237E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.999099915441786	WITHOUT_CLASSIFICATION	9.000845582141082E-4	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9997545556823111	WITHOUT_CLASSIFICATION	2.4544431768888945E-4	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.997478572517133	WITHOUT_CLASSIFICATION	0.002521427482866948	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999809842872656	WITHOUT_CLASSIFICATION	1.901571273441444E-5	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9994965062936988	WITHOUT_CLASSIFICATION	5.03493706301194E-4	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9997814008902745	WITHOUT_CLASSIFICATION	2.1859910972553222E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999799068917216	WITHOUT_CLASSIFICATION	2.0093108278340574E-5	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999985855930876	WITHOUT_CLASSIFICATION	1.4144069123536977E-6	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999999453823163	WITHOUT_CLASSIFICATION	5.461768370019548E-7	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999670676941651	WITHOUT_CLASSIFICATION	3.293230583486655E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999978774434425	WITHOUT_CLASSIFICATION	2.1225565574522983E-6	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999978774434425	WITHOUT_CLASSIFICATION	2.1225565574522983E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999228186882342	WITHOUT_CLASSIFICATION	7.718131176581776E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999212849875	WITHOUT_CLASSIFICATION	7.871501250354945E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999999954670761	WITHOUT_CLASSIFICATION	4.532923907739371E-8	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999817853247545	WITHOUT_CLASSIFICATION	1.8214675245516157E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999991823448528	WITHOUT_CLASSIFICATION	8.176551472004949E-6	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999991164053658	WITHOUT_CLASSIFICATION	8.83594634294175E-7	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999966455246	WITHOUT_CLASSIFICATION	3.3544753398785303E-9	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999998914150234	WITHOUT_CLASSIFICATION	1.0858497656333294E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999228186882342	WITHOUT_CLASSIFICATION	7.718131176581776E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999212849875	WITHOUT_CLASSIFICATION	7.871501250354945E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999562782948601	WITHOUT_CLASSIFICATION	4.372170513995928E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9984578282954715	WITHOUT_CLASSIFICATION	0.0015421717045286086	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999693380094695	WITHOUT_CLASSIFICATION	3.066199053053267E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9998059074092098	WITHOUT_CLASSIFICATION	1.9409259079013338E-4	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999994569838612	WITHOUT_CLASSIFICATION	5.430161388233706E-7	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999795313937019	WITHOUT_CLASSIFICATION	2.046860629817479E-5	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999989407078	WITHOUT_CLASSIFICATION	1.0592922459068962E-9	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997552410588473	WITHOUT_CLASSIFICATION	2.447589411526927E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999750398551027	WITHOUT_CLASSIFICATION	2.496014489718241E-5	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5254296937789983	WITHOUT_CLASSIFICATION	0.47457030622100166	DESIGN
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999857283632	WITHOUT_CLASSIFICATION	1.4271636749320363E-8	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5254296937789983	WITHOUT_CLASSIFICATION	0.47457030622100166	DESIGN
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999824339012	WITHOUT_CLASSIFICATION	1.7566098777524684E-8	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999909851812034	WITHOUT_CLASSIFICATION	9.014818796670785E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999998200942868	WITHOUT_CLASSIFICATION	1.7990571310277865E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981510700404	WITHOUT_CLASSIFICATION	1.8489299596955196E-6	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9996931773022063	WITHOUT_CLASSIFICATION	3.068226977936486E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997552410588473	WITHOUT_CLASSIFICATION	2.447589411526927E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997552410588473	WITHOUT_CLASSIFICATION	2.447589411526927E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998957717322801	WITHOUT_CLASSIFICATION	1.0422826771999627E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9989751928618916	WITHOUT_CLASSIFICATION	0.0010248071381083782	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999849370434084	WITHOUT_CLASSIFICATION	1.5062956591697456E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999955778742727	WITHOUT_CLASSIFICATION	4.422125727256203E-6	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999887958699036	WITHOUT_CLASSIFICATION	1.1204130096318212E-5	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999669608122732	WITHOUT_CLASSIFICATION	3.3039187726841925E-5	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9416429648234649	WITHOUT_CLASSIFICATION	0.058357035176535114	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.999999903648867	WITHOUT_CLASSIFICATION	9.63511328653204E-8	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999899599856522	WITHOUT_CLASSIFICATION	1.0040014347714586E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991254279369572	WITHOUT_CLASSIFICATION	8.745720630428244E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9992751887650633	WITHOUT_CLASSIFICATION	7.248112349367498E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999993888891153	WITHOUT_CLASSIFICATION	6.111108846661426E-7	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.999985742866627	WITHOUT_CLASSIFICATION	1.4257133373084547E-5	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998330713689145	WITHOUT_CLASSIFICATION	1.6692863108542234E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999041847717313	WITHOUT_CLASSIFICATION	9.581522826877777E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9996309452249025	WITHOUT_CLASSIFICATION	3.6905477509755326E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999855873972013	WITHOUT_CLASSIFICATION	1.4412602798602384E-5	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999994475163051	WITHOUT_CLASSIFICATION	5.524836949040903E-6	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998765558316735	WITHOUT_CLASSIFICATION	1.234441683265444E-4	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999980380778423	WITHOUT_CLASSIFICATION	1.9619221577615673E-6	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9998751327803335	WITHOUT_CLASSIFICATION	1.2486721966655176E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998611112651146	WITHOUT_CLASSIFICATION	1.3888873488539856E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999942276037181	WITHOUT_CLASSIFICATION	5.7723962819532165E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994284248808716	WITHOUT_CLASSIFICATION	5.715751191284403E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999915963022881	WITHOUT_CLASSIFICATION	8.403697711906109E-6	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999881813620555	WITHOUT_CLASSIFICATION	1.1818637944476007E-5	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999926601002107	WITHOUT_CLASSIFICATION	7.33989978928208E-6	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999985356904554	WITHOUT_CLASSIFICATION	1.4643095445785385E-6	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9967732358099013	WITHOUT_CLASSIFICATION	0.003226764190098697	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9998345523672567	WITHOUT_CLASSIFICATION	1.654476327432585E-4	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9986529896200358	WITHOUT_CLASSIFICATION	0.0013470103799641516	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9682949343267593	WITHOUT_CLASSIFICATION	0.03170506567324059	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9974853054508428	WITHOUT_CLASSIFICATION	0.0025146945491571087	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.999999903648867	WITHOUT_CLASSIFICATION	9.63511328653204E-8	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.999591919249012	WITHOUT_CLASSIFICATION	4.0808075098803354E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9998963891570133	WITHOUT_CLASSIFICATION	1.0361084298666142E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9525169375955317	WITHOUT_CLASSIFICATION	0.047483062404468285	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999999663489536	WITHOUT_CLASSIFICATION	3.365104634324935E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999592627875687	WITHOUT_CLASSIFICATION	4.073721243131098E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999983017916421	WITHOUT_CLASSIFICATION	1.6982083578907987E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999955778742727	WITHOUT_CLASSIFICATION	4.422125727256203E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999955778742727	WITHOUT_CLASSIFICATION	4.422125727256203E-6	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999980011882648	WITHOUT_CLASSIFICATION	1.998811735329449E-6	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.999999047675306	WITHOUT_CLASSIFICATION	9.523246939287267E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999975152566857	WITHOUT_CLASSIFICATION	2.4847433142205067E-6	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999963913555908	WITHOUT_CLASSIFICATION	3.608644409212018E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999750737726969	WITHOUT_CLASSIFICATION	2.49262273030303E-5	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999982274983578	WITHOUT_CLASSIFICATION	1.7725016422130962E-5	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9331577820990711	WITHOUT_CLASSIFICATION	0.06684221790092898	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999998262416883	WITHOUT_CLASSIFICATION	1.7375831176560775E-7	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999984963608609	WITHOUT_CLASSIFICATION	1.5036391389920674E-6	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9993444041537805	WITHOUT_CLASSIFICATION	6.555958462196821E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999946507461462	WITHOUT_CLASSIFICATION	5.349253853713295E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998135686506326	WITHOUT_CLASSIFICATION	1.8643134936734807E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999954616169507	WITHOUT_CLASSIFICATION	4.538383049242674E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999228186882342	WITHOUT_CLASSIFICATION	7.718131176581776E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999946507461462	WITHOUT_CLASSIFICATION	5.349253853713295E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999957393542049	WITHOUT_CLASSIFICATION	4.260645795073986E-6	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9891607444632967	WITHOUT_CLASSIFICATION	0.010839255536703318	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999867912586244	WITHOUT_CLASSIFICATION	1.320874137547861E-5	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.9206208440433736	WITHOUT_CLASSIFICATION	0.07937915595662638	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999954616169507	WITHOUT_CLASSIFICATION	4.538383049242674E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999345228299945	WITHOUT_CLASSIFICATION	6.547717000548426E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999887002845087	WITHOUT_CLASSIFICATION	1.1299715491318926E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998745994063448	WITHOUT_CLASSIFICATION	1.2540059365527458E-4	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999906288132993	WITHOUT_CLASSIFICATION	9.371186700769239E-6	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999729908111575	WITHOUT_CLASSIFICATION	2.7009188842483543E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998510155066745	WITHOUT_CLASSIFICATION	1.489844933254739E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999970147777376	WITHOUT_CLASSIFICATION	2.985222262351294E-6	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998095576829056	WITHOUT_CLASSIFICATION	1.904423170944265E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998131470540985	WITHOUT_CLASSIFICATION	1.8685294590144123E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999629949980473	WITHOUT_CLASSIFICATION	3.700500195275581E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9992979974498519	WITHOUT_CLASSIFICATION	7.020025501479755E-4	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999176745366684	WITHOUT_CLASSIFICATION	8.23254633317001E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999946507461462	WITHOUT_CLASSIFICATION	5.349253853713295E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999345228299945	WITHOUT_CLASSIFICATION	6.547717000548426E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998745994063448	WITHOUT_CLASSIFICATION	1.2540059365527458E-4	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999897336198402	WITHOUT_CLASSIFICATION	1.0266380159714226E-5	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998045120986693	WITHOUT_CLASSIFICATION	1.9548790133069424E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.999951536202621	WITHOUT_CLASSIFICATION	4.846379737892261E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999954616169507	WITHOUT_CLASSIFICATION	4.538383049242674E-6	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998599546744837	WITHOUT_CLASSIFICATION	1.4004532551631206E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999990860000805	WITHOUT_CLASSIFICATION	9.139999195314539E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999277066912404	WITHOUT_CLASSIFICATION	7.229330875952249E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999047708002214	WITHOUT_CLASSIFICATION	9.52291997786207E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998095576829056	WITHOUT_CLASSIFICATION	1.904423170944265E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999957393542049	WITHOUT_CLASSIFICATION	4.260645795073986E-6	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9998969576895699	WITHOUT_CLASSIFICATION	1.0304231043013497E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999989161506624	WITHOUT_CLASSIFICATION	1.0838493376344955E-6	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999899571163583	WITHOUT_CLASSIFICATION	1.004288364168371E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999216121424528	WITHOUT_CLASSIFICATION	7.838785754717508E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9985029026496577	WITHOUT_CLASSIFICATION	0.001497097350342373	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9992516913687172	WITHOUT_CLASSIFICATION	7.483086312828468E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999784680484812	WITHOUT_CLASSIFICATION	2.1531951518825765E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981510700404	WITHOUT_CLASSIFICATION	1.8489299596955196E-6	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992192056242648	WITHOUT_CLASSIFICATION	7.807943757351193E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999407679747	WITHOUT_CLASSIFICATION	5.923202531722116E-8	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9998402884133423	WITHOUT_CLASSIFICATION	1.5971158665780674E-4	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999852639150211	WITHOUT_CLASSIFICATION	1.4736084978788284E-5	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999661447537187	WITHOUT_CLASSIFICATION	3.385524628119983E-5	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999996637997206	WITHOUT_CLASSIFICATION	3.362002793974558E-7	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9999996017574018	WITHOUT_CLASSIFICATION	3.9824259816919017E-7	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999994744056575	WITHOUT_CLASSIFICATION	5.255943424704149E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999047708002214	WITHOUT_CLASSIFICATION	9.52291997786207E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997262395208678	WITHOUT_CLASSIFICATION	2.737604791320943E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.999903372391074	WITHOUT_CLASSIFICATION	9.662760892612233E-5	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999962533798902	WITHOUT_CLASSIFICATION	3.746620109943031E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999976723911213	WITHOUT_CLASSIFICATION	2.3276088787941097E-6	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999871252683654	WITHOUT_CLASSIFICATION	1.287473163458891E-5	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999976448974941	WITHOUT_CLASSIFICATION	2.3551025058588903E-6	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999996629066903	WITHOUT_CLASSIFICATION	3.3709330972141653E-7	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9988518331232492	WITHOUT_CLASSIFICATION	0.0011481668767507366	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999980400588627	WITHOUT_CLASSIFICATION	1.9599411372939294E-6	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.997725203131397	WITHOUT_CLASSIFICATION	0.0022747968686029144	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999998540084585	WITHOUT_CLASSIFICATION	1.4599154146881392E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999595522385	WITHOUT_CLASSIFICATION	4.0447761478398E-8	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9964583752380562	WITHOUT_CLASSIFICATION	0.0035416247619437986	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999338316715874	WITHOUT_CLASSIFICATION	6.616832841254838E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999417574518674	WITHOUT_CLASSIFICATION	5.824254813260821E-5	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999997787330622	WITHOUT_CLASSIFICATION	2.212669377968759E-6	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9999336580571977	WITHOUT_CLASSIFICATION	6.634194280228914E-5	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9996552911110442	WITHOUT_CLASSIFICATION	3.4470888895580756E-4	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.999995748183569	WITHOUT_CLASSIFICATION	4.251816431037862E-6	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999929063572264	WITHOUT_CLASSIFICATION	7.093642773533243E-6	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9998124112456953	WITHOUT_CLASSIFICATION	1.8758875430466106E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999901901774604	WITHOUT_CLASSIFICATION	9.809822539510154E-6	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999981536695297	WITHOUT_CLASSIFICATION	1.8463304702422338E-6	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999948064410611	WITHOUT_CLASSIFICATION	5.193558938907698E-6	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999976232432114	WITHOUT_CLASSIFICATION	2.37675678856441E-6	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6834446492370183	DESIGN	0.31655535076298175	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.999997470710562	WITHOUT_CLASSIFICATION	2.5292894381164595E-6	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999990554459769	WITHOUT_CLASSIFICATION	9.445540230166549E-7	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999962344791173	WITHOUT_CLASSIFICATION	3.765520882788592E-6	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.733317241169927	DESIGN	0.26668275883007303	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999718004752	WITHOUT_CLASSIFICATION	2.819952484925095E-8	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997424568103174	WITHOUT_CLASSIFICATION	2.575431896825879E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999972547292272	WITHOUT_CLASSIFICATION	2.7452707729048057E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999508839340261	WITHOUT_CLASSIFICATION	4.911606597393364E-5	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999944353571059	WITHOUT_CLASSIFICATION	5.56464289413807E-6	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999985302728451	WITHOUT_CLASSIFICATION	1.469727154893802E-6	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.999982813069628	WITHOUT_CLASSIFICATION	1.718693037192731E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.8504217352440789	WITHOUT_CLASSIFICATION	0.149578264755921	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999985302728451	WITHOUT_CLASSIFICATION	1.469727154893802E-6	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999944353571059	WITHOUT_CLASSIFICATION	5.56464289413807E-6	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.999982813069628	WITHOUT_CLASSIFICATION	1.718693037192731E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999983569643136	WITHOUT_CLASSIFICATION	1.6430356863870573E-6	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998110712951978	WITHOUT_CLASSIFICATION	1.8892870480224553E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999968701239	WITHOUT_CLASSIFICATION	3.1298760298643207E-9	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999092459712927	WITHOUT_CLASSIFICATION	9.075402870722738E-5	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999970595004457	WITHOUT_CLASSIFICATION	2.9404995543277136E-6	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9930755570733303	DESIGN	0.006924442926669659	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998203342398503	WITHOUT_CLASSIFICATION	1.796657601497447E-4	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999677164683991	WITHOUT_CLASSIFICATION	3.22835316008893E-4	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999999675912754	WITHOUT_CLASSIFICATION	3.240872458076167E-8	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999928679864768	WITHOUT_CLASSIFICATION	7.132013523198678E-6	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999995528805412	WITHOUT_CLASSIFICATION	4.471194588398756E-7	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999947637059831	WITHOUT_CLASSIFICATION	5.236294016995603E-6	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993860912903304	WITHOUT_CLASSIFICATION	6.139087096694719E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999092459712927	WITHOUT_CLASSIFICATION	9.075402870722738E-5	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.999999910799468	WITHOUT_CLASSIFICATION	8.92005319186614E-8	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999663879252	WITHOUT_CLASSIFICATION	3.361207475524937E-8	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999903485640319	WITHOUT_CLASSIFICATION	9.651435967995301E-6	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9995824583299104	WITHOUT_CLASSIFICATION	4.1754167008953324E-4	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9991105911391727	WITHOUT_CLASSIFICATION	8.894088608272265E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.999998141100977	WITHOUT_CLASSIFICATION	1.8588990229265627E-6	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9960633474840441	WITHOUT_CLASSIFICATION	0.003936652515955851	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999175117714	WITHOUT_CLASSIFICATION	8.248822856901413E-8	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999971932170788	WITHOUT_CLASSIFICATION	2.8067829211721473E-6	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999989604396148	WITHOUT_CLASSIFICATION	1.0395603851910285E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999920366033815	WITHOUT_CLASSIFICATION	7.963396618484613E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999920366033815	WITHOUT_CLASSIFICATION	7.963396618484613E-6	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999518147447	WITHOUT_CLASSIFICATION	4.818525535456496E-8	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999518147447	WITHOUT_CLASSIFICATION	4.818525535456496E-8	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.993943311537452	WITHOUT_CLASSIFICATION	0.006056688462548002	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999903485640319	WITHOUT_CLASSIFICATION	9.651435967995301E-6	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999864611264668	WITHOUT_CLASSIFICATION	1.353887353323226E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999996897326098	WITHOUT_CLASSIFICATION	3.102673901901947E-7	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9993139367654705	WITHOUT_CLASSIFICATION	6.86063234529362E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9993139367654705	WITHOUT_CLASSIFICATION	6.86063234529362E-4	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999994238297062	WITHOUT_CLASSIFICATION	5.761702938794669E-7	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999503455027875	WITHOUT_CLASSIFICATION	4.965449721253517E-5	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999985463395359	WITHOUT_CLASSIFICATION	1.4536604640972377E-5	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999972508279087	WITHOUT_CLASSIFICATION	2.7491720913574076E-6	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9281495072203064	WITHOUT_CLASSIFICATION	0.07185049277969349	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999889891369	WITHOUT_CLASSIFICATION	1.1010863174687419E-8	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9998992146943859	WITHOUT_CLASSIFICATION	1.00785305613998E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9570703505453128	WITHOUT_CLASSIFICATION	0.04292964945468722	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999789984893385	WITHOUT_CLASSIFICATION	2.1001510661561547E-5	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999908079404632	WITHOUT_CLASSIFICATION	9.192059536699268E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999460914030992	WITHOUT_CLASSIFICATION	5.390859690075842E-5	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999530094400132	WITHOUT_CLASSIFICATION	4.6990559986692924E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999996891708426	WITHOUT_CLASSIFICATION	3.108291573974546E-7	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999961518097092	WITHOUT_CLASSIFICATION	3.848190290705579E-6	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.999998756220825	WITHOUT_CLASSIFICATION	1.2437791749972152E-6	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999995827574848	WITHOUT_CLASSIFICATION	4.172425152004898E-7	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9901223210496207	WITHOUT_CLASSIFICATION	0.009877678950379335	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.999996710331233	WITHOUT_CLASSIFICATION	3.289668766939863E-6	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999993155692837	WITHOUT_CLASSIFICATION	6.844307162951917E-6	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9998544439673521	WITHOUT_CLASSIFICATION	1.4555603264790456E-4	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999976212938858	WITHOUT_CLASSIFICATION	2.3787061142142033E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999984297701016	WITHOUT_CLASSIFICATION	1.5702298984280947E-6	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999996059296322	WITHOUT_CLASSIFICATION	3.940703677982981E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.999984598469775	WITHOUT_CLASSIFICATION	1.540153022497294E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997642996399865	WITHOUT_CLASSIFICATION	2.3570036001345146E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999998884687951	WITHOUT_CLASSIFICATION	1.1153120490423242E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999595522385	WITHOUT_CLASSIFICATION	4.0447761478398E-8	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998280395531	WITHOUT_CLASSIFICATION	1.7196044683879853E-7	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999325859852671	WITHOUT_CLASSIFICATION	6.741401473283828E-5	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999561747541573	WITHOUT_CLASSIFICATION	4.382524584277616E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999668977624184	WITHOUT_CLASSIFICATION	3.3102237581632084E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.999974620074808	WITHOUT_CLASSIFICATION	2.537992519192725E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.999974620074808	WITHOUT_CLASSIFICATION	2.537992519192725E-5	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9997167151987391	WITHOUT_CLASSIFICATION	2.832848012609486E-4	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999782716506586	WITHOUT_CLASSIFICATION	2.1728349341496946E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999963042432436	WITHOUT_CLASSIFICATION	3.6957567562702756E-6	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999963042432436	WITHOUT_CLASSIFICATION	3.6957567562702756E-6	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999487656388635	WITHOUT_CLASSIFICATION	5.12343611364008E-5	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999667603289528	WITHOUT_CLASSIFICATION	3.323967104707233E-5	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999928451801573	WITHOUT_CLASSIFICATION	7.154819842716262E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999710423126859	WITHOUT_CLASSIFICATION	2.895768731412381E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9999700244424591	WITHOUT_CLASSIFICATION	2.9975557540945747E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999983099538517	WITHOUT_CLASSIFICATION	1.6900461483239224E-6	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9980727947910596	WITHOUT_CLASSIFICATION	0.0019272052089404888	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999748909137283	WITHOUT_CLASSIFICATION	2.510908627179921E-5	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999417326042535	WITHOUT_CLASSIFICATION	5.826739574650541E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999417326042535	WITHOUT_CLASSIFICATION	5.826739574650541E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9951699835177126	WITHOUT_CLASSIFICATION	0.0048300164822873875	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999993885241529	WITHOUT_CLASSIFICATION	6.114758470199396E-7	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999993885241529	WITHOUT_CLASSIFICATION	6.114758470199396E-7	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9994737724439982	WITHOUT_CLASSIFICATION	5.262275560018175E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999993584786219	WITHOUT_CLASSIFICATION	6.415213781474296E-7	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9844821805835258	WITHOUT_CLASSIFICATION	0.015517819416474376	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999996633842025	WITHOUT_CLASSIFICATION	3.3661579748349467E-7	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999984716416151	WITHOUT_CLASSIFICATION	1.5283583848137512E-6	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999759558887	WITHOUT_CLASSIFICATION	2.404411129172763E-8	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999999764392671	WITHOUT_CLASSIFICATION	2.356073297591541E-8	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997078449445929	WITHOUT_CLASSIFICATION	2.9215505540712756E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999265508135973	WITHOUT_CLASSIFICATION	7.344918640264714E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9924459556655099	WITHOUT_CLASSIFICATION	0.007554044334490197	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999948204377695	WITHOUT_CLASSIFICATION	5.179562230452875E-6	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999623801478323	WITHOUT_CLASSIFICATION	3.7619852167593794E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743268610087	WITHOUT_CLASSIFICATION	2.5673138991344143E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743268610087	WITHOUT_CLASSIFICATION	2.5673138991344143E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743268610087	WITHOUT_CLASSIFICATION	2.5673138991344143E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999743268610087	WITHOUT_CLASSIFICATION	2.5673138991344143E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999996879562424	WITHOUT_CLASSIFICATION	3.1204375758370587E-7	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999914907601111	WITHOUT_CLASSIFICATION	8.509239889014939E-6	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.999996760732607	WITHOUT_CLASSIFICATION	3.2392673929423537E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9998056312914628	WITHOUT_CLASSIFICATION	1.9436870853717567E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999956687307111	WITHOUT_CLASSIFICATION	4.3312692888396484E-6	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9912808764439369	WITHOUT_CLASSIFICATION	0.008719123556063031	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9959815754472869	WITHOUT_CLASSIFICATION	0.004018424552712994	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999822368885484	WITHOUT_CLASSIFICATION	1.7763111451578024E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999012436164	WITHOUT_CLASSIFICATION	9.875638359536739E-8	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999994593864502	WITHOUT_CLASSIFICATION	5.406135497317822E-7	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9999394550661417	WITHOUT_CLASSIFICATION	6.054493385833195E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976753578432	WITHOUT_CLASSIFICATION	2.32464215678349E-6	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997004777428885	WITHOUT_CLASSIFICATION	2.9952225711150595E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999198000713272	WITHOUT_CLASSIFICATION	8.019992867282894E-5	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9995839751381717	WITHOUT_CLASSIFICATION	4.16024861828262E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976753578432	WITHOUT_CLASSIFICATION	2.32464215678349E-6	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.998681439243774	WITHOUT_CLASSIFICATION	0.0013185607562260454	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999518709374033	WITHOUT_CLASSIFICATION	4.812906259665507E-5	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999915729374331	WITHOUT_CLASSIFICATION	8.427062566902643E-6	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999891651544103	WITHOUT_CLASSIFICATION	1.0834845589815684E-5	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9965366092069549	WITHOUT_CLASSIFICATION	0.003463390793045124	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999924867296541	WITHOUT_CLASSIFICATION	7.513270345912106E-6	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999874693651801	WITHOUT_CLASSIFICATION	1.2530634819878043E-5	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999852550649563	WITHOUT_CLASSIFICATION	1.4744935043678102E-5	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999610652552033	WITHOUT_CLASSIFICATION	3.893474479661277E-5	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999842910394484	WITHOUT_CLASSIFICATION	1.570896055158889E-5	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999846197877316	WITHOUT_CLASSIFICATION	1.5380212268399918E-5	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999789173864828	WITHOUT_CLASSIFICATION	2.1082613517182135E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998564227516761	WITHOUT_CLASSIFICATION	1.435772483239392E-4	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9989165566064574	WITHOUT_CLASSIFICATION	0.0010834433935426706	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999990958926632	WITHOUT_CLASSIFICATION	9.04107336696788E-7	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9688360341534374	WITHOUT_CLASSIFICATION	0.031163965846562582	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999973049576091	WITHOUT_CLASSIFICATION	2.6950423908864474E-6	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999972354042578	WITHOUT_CLASSIFICATION	2.764595742233119E-6	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999641252544904	WITHOUT_CLASSIFICATION	3.587474550963297E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999972354042578	WITHOUT_CLASSIFICATION	2.764595742233119E-6	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999791100641832	WITHOUT_CLASSIFICATION	2.0889935816801427E-5	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999423899122856	WITHOUT_CLASSIFICATION	5.761008771441938E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9928370505485123	WITHOUT_CLASSIFICATION	0.007162949451487598	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9909223100387989	WITHOUT_CLASSIFICATION	0.009077689961201106	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.8772231311906237	WITHOUT_CLASSIFICATION	0.12277686880937631	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999773443238197	WITHOUT_CLASSIFICATION	2.2655676180339655E-5	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999960872724384	WITHOUT_CLASSIFICATION	3.91272756165802E-6	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999973049576091	WITHOUT_CLASSIFICATION	2.6950423908864474E-6	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999641252544904	WITHOUT_CLASSIFICATION	3.587474550963297E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999791100641832	WITHOUT_CLASSIFICATION	2.0889935816801427E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997574230459488	WITHOUT_CLASSIFICATION	2.425769540511724E-4	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9999871571787108	WITHOUT_CLASSIFICATION	1.2842821289252593E-5	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999996423336168	WITHOUT_CLASSIFICATION	3.5766638316703157E-7	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999926583327	WITHOUT_CLASSIFICATION	7.341667271662772E-9	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999996672157891	WITHOUT_CLASSIFICATION	3.327842107768572E-7	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9996293173004026	WITHOUT_CLASSIFICATION	3.7068269959743294E-4	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999899809388	WITHOUT_CLASSIFICATION	1.0019061226350768E-8	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9901223210496207	WITHOUT_CLASSIFICATION	0.009877678950379335	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999423899122856	WITHOUT_CLASSIFICATION	5.761008771441938E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999442022795421	WITHOUT_CLASSIFICATION	5.579772045799729E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9998915968431848	WITHOUT_CLASSIFICATION	1.0840315681520709E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9986636434570726	WITHOUT_CLASSIFICATION	0.0013363565429273829	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999965454400909	WITHOUT_CLASSIFICATION	3.4545599092703755E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9901223210496207	WITHOUT_CLASSIFICATION	0.009877678950379335	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999971203904663	WITHOUT_CLASSIFICATION	2.879609533789585E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9901223210496207	WITHOUT_CLASSIFICATION	0.009877678950379335	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999934155150703	WITHOUT_CLASSIFICATION	6.5844849297931296E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995332284829	WITHOUT_CLASSIFICATION	4.667715171115614E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997724654904317	WITHOUT_CLASSIFICATION	2.2753450956818753E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999950482079155	WITHOUT_CLASSIFICATION	4.951792084510939E-6	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992956583234	WITHOUT_CLASSIFICATION	7.043416766874993E-7	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999921458111133	WITHOUT_CLASSIFICATION	7.854188886609177E-6	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.999996916568031	WITHOUT_CLASSIFICATION	3.0834319689755947E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996946933601567	WITHOUT_CLASSIFICATION	3.053066398432039E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997193356693	WITHOUT_CLASSIFICATION	2.806643307651308E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999980229528629	WITHOUT_CLASSIFICATION	1.977047137106318E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999979912639424	WITHOUT_CLASSIFICATION	2.0087360576007558E-6	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9996828168888556	WITHOUT_CLASSIFICATION	3.171831111443226E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9844821805835258	WITHOUT_CLASSIFICATION	0.015517819416474376	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.999997496021296	WITHOUT_CLASSIFICATION	2.5039787041788043E-6	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999119647426946	WITHOUT_CLASSIFICATION	8.803525730530359E-5	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999965078008055	WITHOUT_CLASSIFICATION	3.4921991945007905E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999997984484288	WITHOUT_CLASSIFICATION	2.015515713552103E-7	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999987346452196	WITHOUT_CLASSIFICATION	1.2653547803805078E-6	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9988912614553208	WITHOUT_CLASSIFICATION	0.0011087385446792004	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999882577484157	WITHOUT_CLASSIFICATION	1.1742251584224301E-5	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9941902411935771	WITHOUT_CLASSIFICATION	0.005809758806422814	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999975445076981	WITHOUT_CLASSIFICATION	2.455492301890432E-6	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9996360051956811	WITHOUT_CLASSIFICATION	3.639948043188987E-4	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9752231599946563	WITHOUT_CLASSIFICATION	0.024776840005343734	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998925887587	WITHOUT_CLASSIFICATION	1.0741124138149718E-7	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999998559251272	WITHOUT_CLASSIFICATION	1.4407487272343182E-7	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999953708151587	WITHOUT_CLASSIFICATION	4.6291848413650035E-6	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999739510861392	WITHOUT_CLASSIFICATION	2.6048913860745814E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9994059659266384	WITHOUT_CLASSIFICATION	5.940340733615898E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999999935030798	WITHOUT_CLASSIFICATION	6.496920204136144E-8	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999960681492102	WITHOUT_CLASSIFICATION	3.931850789848032E-6	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999978641933336	WITHOUT_CLASSIFICATION	2.1358066664905534E-6	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9997640324278957	WITHOUT_CLASSIFICATION	2.359675721041644E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999804057659893	WITHOUT_CLASSIFICATION	1.9594234010673102E-5	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9660272279057308	WITHOUT_CLASSIFICATION	0.03397277209426916	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995922048481	WITHOUT_CLASSIFICATION	4.077951518239817E-7	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999759224946724	WITHOUT_CLASSIFICATION	2.407750532762333E-5	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9999510410778404	WITHOUT_CLASSIFICATION	4.895892215954148E-5	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9989399935849735	WITHOUT_CLASSIFICATION	0.0010600064150264811	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9982175371679018	WITHOUT_CLASSIFICATION	0.001782462832098122	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9925502141319105	WITHOUT_CLASSIFICATION	0.0074497858680895365	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999517602434	WITHOUT_CLASSIFICATION	4.8239756678471964E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9985555489123414	WITHOUT_CLASSIFICATION	0.0014444510876585228	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.99993184628342	WITHOUT_CLASSIFICATION	6.815371658002643E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.99993184628342	WITHOUT_CLASSIFICATION	6.815371658002643E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.999979112204838	WITHOUT_CLASSIFICATION	2.088779516201605E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996946933601567	WITHOUT_CLASSIFICATION	3.053066398432039E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9863231119205628	WITHOUT_CLASSIFICATION	0.013676888079437226	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999980921158	WITHOUT_CLASSIFICATION	1.907884208745907E-9	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999924290531103	WITHOUT_CLASSIFICATION	7.570946889863404E-6	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998416590766294	WITHOUT_CLASSIFICATION	1.583409233705411E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999423991533074	WITHOUT_CLASSIFICATION	5.760084669252554E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999113369696159	WITHOUT_CLASSIFICATION	8.866303038413953E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999991278887596	WITHOUT_CLASSIFICATION	8.721112403949581E-7	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9988905590725667	WITHOUT_CLASSIFICATION	0.0011094409274332974	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999952214907395	WITHOUT_CLASSIFICATION	4.778509260544524E-6	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999925290810737	WITHOUT_CLASSIFICATION	7.4709189262362055E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.5299726090538733	WITHOUT_CLASSIFICATION	0.4700273909461267	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999490303003	WITHOUT_CLASSIFICATION	5.09696996422058E-8	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999968076217075	WITHOUT_CLASSIFICATION	3.192378292546876E-6	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999999993063374	WITHOUT_CLASSIFICATION	6.936626039445112E-9	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997412689483	WITHOUT_CLASSIFICATION	2.587310516846871E-7	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.999999677820144	WITHOUT_CLASSIFICATION	3.221798560685036E-7	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999928565681794	WITHOUT_CLASSIFICATION	7.143431820665402E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9928637066120676	WITHOUT_CLASSIFICATION	0.007136293387932454	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999996920140481	WITHOUT_CLASSIFICATION	3.079859517842685E-7	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998957147582571	WITHOUT_CLASSIFICATION	1.0428524174291171E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999916045340878	WITHOUT_CLASSIFICATION	8.395465912191635E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999984020800737	WITHOUT_CLASSIFICATION	1.5979199263436805E-6	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9925502141319105	WITHOUT_CLASSIFICATION	0.0074497858680895365	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9997744477703575	WITHOUT_CLASSIFICATION	2.2555222964253433E-4	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9991358108214484	WITHOUT_CLASSIFICATION	8.641891785515719E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999678162156	WITHOUT_CLASSIFICATION	3.218378445596044E-8	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999991709221334	WITHOUT_CLASSIFICATION	8.290778666273183E-7	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.999968919583366	WITHOUT_CLASSIFICATION	3.108041663407422E-5	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999964364112467	WITHOUT_CLASSIFICATION	3.563588753438038E-6	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999996087098236	WITHOUT_CLASSIFICATION	3.912901764161931E-7	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999825238400852	WITHOUT_CLASSIFICATION	1.7476159914823937E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999146409693552	WITHOUT_CLASSIFICATION	8.535903064483145E-5	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999997952364869	WITHOUT_CLASSIFICATION	2.0476351312605976E-7	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998607116512743	WITHOUT_CLASSIFICATION	1.3928834872570814E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999927037855019	WITHOUT_CLASSIFICATION	7.296214498108687E-6	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999374007313	WITHOUT_CLASSIFICATION	6.259926865861368E-8	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9992118861524192	WITHOUT_CLASSIFICATION	7.881138475808064E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999985954003157	WITHOUT_CLASSIFICATION	1.404599684250886E-6	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998413649274056	WITHOUT_CLASSIFICATION	1.586350725945004E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998413649274056	WITHOUT_CLASSIFICATION	1.586350725945004E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999839785623023	WITHOUT_CLASSIFICATION	1.6021437697807148E-5	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.999896103291037	WITHOUT_CLASSIFICATION	1.0389670896302065E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983949864429	WITHOUT_CLASSIFICATION	1.6050135571086106E-6	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999983949864429	WITHOUT_CLASSIFICATION	1.6050135571086106E-6	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999927180510495	WITHOUT_CLASSIFICATION	7.2819489504070514E-6	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999805584828381	WITHOUT_CLASSIFICATION	1.9441517161974685E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9150883741595469	WITHOUT_CLASSIFICATION	0.08491162584045304	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9970439740879103	WITHOUT_CLASSIFICATION	0.0029560259120896795	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999766232920068	WITHOUT_CLASSIFICATION	2.337670799315456E-5	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999994443548268	WITHOUT_CLASSIFICATION	5.556451732002746E-6	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998667945884	WITHOUT_CLASSIFICATION	1.3320541167634336E-7	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999998667945884	WITHOUT_CLASSIFICATION	1.3320541167634336E-7	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999971881706028	WITHOUT_CLASSIFICATION	2.8118293972260165E-6	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9998745888859406	WITHOUT_CLASSIFICATION	1.254111140593877E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999999142265178	WITHOUT_CLASSIFICATION	8.577348213155017E-8	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999989168132567	WITHOUT_CLASSIFICATION	1.0831867433162263E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999989168132567	WITHOUT_CLASSIFICATION	1.0831867433162263E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999997629215985	WITHOUT_CLASSIFICATION	2.370784014085147E-7	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999992991796772	WITHOUT_CLASSIFICATION	7.008203227473616E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999793442478951	WITHOUT_CLASSIFICATION	2.065575210488E-5	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999987652473893	WITHOUT_CLASSIFICATION	1.2347526107089349E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997975106970981	WITHOUT_CLASSIFICATION	2.024893029019548E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999985452571739	WITHOUT_CLASSIFICATION	1.45474282613151E-6	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998679092356555	WITHOUT_CLASSIFICATION	1.3209076434449781E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999901066663839	WITHOUT_CLASSIFICATION	9.893333616031871E-6	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9992818321491823	WITHOUT_CLASSIFICATION	7.181678508176182E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998712637794688	WITHOUT_CLASSIFICATION	1.2873622053129639E-4	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999981436622695	WITHOUT_CLASSIFICATION	1.8563377306312244E-6	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.7949846111470635	WITHOUT_CLASSIFICATION	0.2050153888529364	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999655114965842	WITHOUT_CLASSIFICATION	3.4488503415802465E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999539537886608	WITHOUT_CLASSIFICATION	4.60462113391284E-5	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.999962946249378	WITHOUT_CLASSIFICATION	3.705375062201704E-5	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999997399723765	WITHOUT_CLASSIFICATION	2.600276234932412E-7	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9990986358066597	WITHOUT_CLASSIFICATION	9.01364193340409E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999898851549706	WITHOUT_CLASSIFICATION	1.0114845029443897E-5	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999905323619314	WITHOUT_CLASSIFICATION	9.46763806856175E-6	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999864997712512	WITHOUT_CLASSIFICATION	1.3500228748741279E-5	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999838382994254	WITHOUT_CLASSIFICATION	1.616170057458471E-5	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9884636152903881	WITHOUT_CLASSIFICATION	0.011536384709611951	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9914540458062816	WITHOUT_CLASSIFICATION	0.008545954193718371	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999985652968842	WITHOUT_CLASSIFICATION	1.4347031157263303E-6	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9989523543595646	WITHOUT_CLASSIFICATION	0.0010476456404352882	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999854196636816	WITHOUT_CLASSIFICATION	1.4580336318438423E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999990888440633	WITHOUT_CLASSIFICATION	9.111559367354587E-7	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999812462873199	WITHOUT_CLASSIFICATION	1.8753712680067984E-5	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999995683177174	WITHOUT_CLASSIFICATION	4.3168228262342205E-7	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999680659724406	WITHOUT_CLASSIFICATION	3.1934027559396384E-5	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9993887685565886	WITHOUT_CLASSIFICATION	6.112314434113712E-4	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999799268975034	WITHOUT_CLASSIFICATION	2.0073102496630136E-5	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999871478873682	WITHOUT_CLASSIFICATION	1.2852112631752466E-5	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999930641846289	WITHOUT_CLASSIFICATION	6.935815371195116E-6	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999505666132864	WITHOUT_CLASSIFICATION	4.943338671360492E-5	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9996719467042009	WITHOUT_CLASSIFICATION	3.280532957991526E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9998672824383585	WITHOUT_CLASSIFICATION	1.3271756164144727E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999787586391	WITHOUT_CLASSIFICATION	2.1241360883627223E-8	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999915597664879	WITHOUT_CLASSIFICATION	8.440233512138481E-6	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999071952001732	WITHOUT_CLASSIFICATION	9.280479982676676E-5	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999492989663569	WITHOUT_CLASSIFICATION	5.070103364304602E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999812710356816	WITHOUT_CLASSIFICATION	1.8728964318326208E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999996642675832	WITHOUT_CLASSIFICATION	3.357324167547821E-7	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999852877295091	WITHOUT_CLASSIFICATION	1.4712270490891493E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.999997297189461	WITHOUT_CLASSIFICATION	2.7028105391246655E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999998039680129	WITHOUT_CLASSIFICATION	1.9603198709262604E-7	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999876567672048	WITHOUT_CLASSIFICATION	1.2343232795117749E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9852671224139212	WITHOUT_CLASSIFICATION	0.014732877586078816	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9988067159300755	WITHOUT_CLASSIFICATION	0.0011932840699244737	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999935927576193	WITHOUT_CLASSIFICATION	6.407242380670408E-6	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9937863262551215	WITHOUT_CLASSIFICATION	0.006213673744878491	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9996752032604114	WITHOUT_CLASSIFICATION	3.2479673958867115E-4	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999079710257824	WITHOUT_CLASSIFICATION	9.202897421755863E-5	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999096263837	WITHOUT_CLASSIFICATION	9.037361633941966E-8	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999170884983508	WITHOUT_CLASSIFICATION	8.291150164920665E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999342703362495	WITHOUT_CLASSIFICATION	6.572966375051231E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998864377272788	WITHOUT_CLASSIFICATION	1.1356227272115205E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999764073551309	WITHOUT_CLASSIFICATION	2.359264486903936E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999911072031278	WITHOUT_CLASSIFICATION	8.892796872230475E-6	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999970661157607	WITHOUT_CLASSIFICATION	2.933884239254713E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999936018988008	WITHOUT_CLASSIFICATION	6.3981011991380854E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999936018988008	WITHOUT_CLASSIFICATION	6.3981011991380854E-6	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999998480156	WITHOUT_CLASSIFICATION	1.5198444034314E-10	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9993236610841503	WITHOUT_CLASSIFICATION	6.76338915849633E-4	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999995598676465	WITHOUT_CLASSIFICATION	4.401323534958498E-7	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9991885322923613	WITHOUT_CLASSIFICATION	8.114677076387439E-4	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999999940996169	WITHOUT_CLASSIFICATION	5.900383109218288E-8	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999970147907802	WITHOUT_CLASSIFICATION	2.9852092197963367E-6	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999993278150853	WITHOUT_CLASSIFICATION	6.721849146863336E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999212072475	WITHOUT_CLASSIFICATION	7.879275251299459E-7	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999975489517722	WITHOUT_CLASSIFICATION	2.4510482278314273E-6	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999968657268153	WITHOUT_CLASSIFICATION	3.134273184647081E-6	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999971505223234	WITHOUT_CLASSIFICATION	2.849477676609383E-6	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999769604495626	WITHOUT_CLASSIFICATION	2.3039550437296326E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999891521679	WITHOUT_CLASSIFICATION	1.0847832162300274E-8	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999412525668401	WITHOUT_CLASSIFICATION	5.874743315978344E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999952088238231	WITHOUT_CLASSIFICATION	4.791176176903913E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999952088238231	WITHOUT_CLASSIFICATION	4.791176176903913E-5	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999877298555405	WITHOUT_CLASSIFICATION	1.2270144459487996E-5	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999199332632009	WITHOUT_CLASSIFICATION	8.006673679907466E-5	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999814206551	WITHOUT_CLASSIFICATION	1.857934488882799E-7	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999969871626727	WITHOUT_CLASSIFICATION	3.012837327262921E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999970992837454	WITHOUT_CLASSIFICATION	2.900716254674908E-6	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999814050361296	WITHOUT_CLASSIFICATION	1.859496387036859E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999843806566605	WITHOUT_CLASSIFICATION	1.5619343339519468E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999986134299474	WITHOUT_CLASSIFICATION	1.3865700525331875E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9924305363176715	WITHOUT_CLASSIFICATION	0.007569463682328454	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999959254018007	WITHOUT_CLASSIFICATION	4.0745981993596E-6	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999868329892111	WITHOUT_CLASSIFICATION	1.3167010788824918E-5	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999998877297228	WITHOUT_CLASSIFICATION	1.1227027721443322E-7	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999991462059571	WITHOUT_CLASSIFICATION	8.53794042875229E-7	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999999991257443	WITHOUT_CLASSIFICATION	8.74255702860854E-9	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999788075236344	WITHOUT_CLASSIFICATION	2.1192476365577084E-5	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9999751986962816	WITHOUT_CLASSIFICATION	2.480130371842047E-5	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9979977795332063	WITHOUT_CLASSIFICATION	0.002002220466793654	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9185296042015865	WITHOUT_CLASSIFICATION	0.08147039579841352	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999988770429868	WITHOUT_CLASSIFICATION	1.1229570131596614E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999993007357562	WITHOUT_CLASSIFICATION	6.992642439170613E-7	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999982639101603	WITHOUT_CLASSIFICATION	1.7360898397432012E-6	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999997578236	WITHOUT_CLASSIFICATION	2.4217640531945095E-10	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9979566128636157	WITHOUT_CLASSIFICATION	0.002043387136384316	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999993345245967	WITHOUT_CLASSIFICATION	6.654754032752973E-7	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.998677145607388	WITHOUT_CLASSIFICATION	0.0013228543926120512	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999865891687947	WITHOUT_CLASSIFICATION	1.341083120540278E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9638033237179106	WITHOUT_CLASSIFICATION	0.036196676282089474	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9912865110445466	WITHOUT_CLASSIFICATION	0.008713488955453503	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999944963605	WITHOUT_CLASSIFICATION	5.503639520219789E-9	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9950480885149849	WITHOUT_CLASSIFICATION	0.004951911485014964	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999933536984	WITHOUT_CLASSIFICATION	6.646301616466553E-9	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9984846304478484	WITHOUT_CLASSIFICATION	0.0015153695521516826	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.998415909969126	WITHOUT_CLASSIFICATION	0.0015840900308739555	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999555175617	WITHOUT_CLASSIFICATION	4.448243826032978E-8	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999998187927151	WITHOUT_CLASSIFICATION	1.8120728489631937E-6	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999989928482417	WITHOUT_CLASSIFICATION	1.0071517583208349E-6	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9984357923095731	WITHOUT_CLASSIFICATION	0.0015642076904267845	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999967270791418	WITHOUT_CLASSIFICATION	3.2729208581727864E-6	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999990242032846	WITHOUT_CLASSIFICATION	9.75796715473444E-7	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999998045173377	WITHOUT_CLASSIFICATION	1.9548266223917505E-7	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9911996667887285	WITHOUT_CLASSIFICATION	0.00880033321127152	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.8216814056284019	WITHOUT_CLASSIFICATION	0.17831859437159814	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996000187031093	WITHOUT_CLASSIFICATION	3.9998129689061056E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9996000187031093	WITHOUT_CLASSIFICATION	3.9998129689061056E-4	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999993120996484	WITHOUT_CLASSIFICATION	6.879003516167457E-7	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9976205100936122	WITHOUT_CLASSIFICATION	0.0023794899063878066	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.6347172994325783	WITHOUT_CLASSIFICATION	0.36528270056742174	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9986579227201895	WITHOUT_CLASSIFICATION	0.0013420772798105132	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999940785005623	WITHOUT_CLASSIFICATION	5.92149943767534E-6	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999997056478855	WITHOUT_CLASSIFICATION	2.9435211440605227E-7	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.994243545298803	WITHOUT_CLASSIFICATION	0.005756454701196998	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999998818595194	WITHOUT_CLASSIFICATION	1.1814048060316402E-6	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9121805475986704	DESIGN	0.08781945240132964	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999537936725	WITHOUT_CLASSIFICATION	4.62063275094295E-8	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998917367019	WITHOUT_CLASSIFICATION	1.0826329812597688E-7	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994724980928597	WITHOUT_CLASSIFICATION	5.275019071403734E-4	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999992619716571	WITHOUT_CLASSIFICATION	7.380283428293371E-7	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999169361197	WITHOUT_CLASSIFICATION	8.306388036144293E-8	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9998177884423166	WITHOUT_CLASSIFICATION	1.822115576832975E-4	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9996338181694019	WITHOUT_CLASSIFICATION	3.661818305981208E-4	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.999980247100318	WITHOUT_CLASSIFICATION	1.9752899682002326E-5	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999996933000191	WITHOUT_CLASSIFICATION	3.0669998078737435E-7	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999812641679	WITHOUT_CLASSIFICATION	1.8735832145697207E-8	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.999132541622295	WITHOUT_CLASSIFICATION	8.67458377705017E-4	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999994215146607	WITHOUT_CLASSIFICATION	5.78485339267406E-7	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9909347398192951	WITHOUT_CLASSIFICATION	0.009065260180704839	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999993582853606	WITHOUT_CLASSIFICATION	6.417146393999722E-7	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999670367039185	WITHOUT_CLASSIFICATION	3.296329608154369E-5	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999833105370745	WITHOUT_CLASSIFICATION	1.668946292550231E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999999615375418	WITHOUT_CLASSIFICATION	3.8462458219423856E-8	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999588740017824	WITHOUT_CLASSIFICATION	4.1125998217534554E-5	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9994497203057336	WITHOUT_CLASSIFICATION	5.502796942663453E-4	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999997867985	WITHOUT_CLASSIFICATION	2.13201365783465E-10	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.997581183202513	WITHOUT_CLASSIFICATION	0.002418816797487033	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9976103797373943	WITHOUT_CLASSIFICATION	0.0023896202626057335	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9981068399682339	WITHOUT_CLASSIFICATION	0.001893160031765976	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999955811880751	WITHOUT_CLASSIFICATION	4.418811924857161E-6	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999866290830565	WITHOUT_CLASSIFICATION	1.337091694361415E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.999978224276969	WITHOUT_CLASSIFICATION	2.1775723030912866E-5	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999999147069881	WITHOUT_CLASSIFICATION	8.529301197333614E-8	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999444854478636	WITHOUT_CLASSIFICATION	5.5514552136497964E-5	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999992214275225	WITHOUT_CLASSIFICATION	7.785724775247202E-7	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.999991986618343	WITHOUT_CLASSIFICATION	8.013381656964742E-6	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999983353947	WITHOUT_CLASSIFICATION	1.664605355730242E-9	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9887130878791206	WITHOUT_CLASSIFICATION	0.011286912120879403	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999870831753	WITHOUT_CLASSIFICATION	1.2916824694477332E-7	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999974126680856	WITHOUT_CLASSIFICATION	2.5873319144681294E-6	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999523080589461	WITHOUT_CLASSIFICATION	4.7691941054005996E-5	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999996854253668	WITHOUT_CLASSIFICATION	3.14574633187572E-7	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999992315076974	WITHOUT_CLASSIFICATION	7.684923026250861E-7	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.999998794365818	WITHOUT_CLASSIFICATION	1.2056341820843046E-6	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9587633667132391	WITHOUT_CLASSIFICATION	0.04123663328676089	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999377614442966	WITHOUT_CLASSIFICATION	6.223855570342713E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999891521679	WITHOUT_CLASSIFICATION	1.0847832162300274E-8	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999147134923	WITHOUT_CLASSIFICATION	8.52865077599418E-8	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999440826868148	WITHOUT_CLASSIFICATION	5.591731318522719E-5	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9642929758014521	WITHOUT_CLASSIFICATION	0.03570702419854786	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9052713944741867	WITHOUT_CLASSIFICATION	0.09472860552581339	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999991831770237	WITHOUT_CLASSIFICATION	8.16822976297124E-6	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999578423050098	WITHOUT_CLASSIFICATION	4.21576949902126E-5	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9997898151423177	WITHOUT_CLASSIFICATION	2.101848576823893E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999997891801257	WITHOUT_CLASSIFICATION	2.108198743228026E-7	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999985334422985	WITHOUT_CLASSIFICATION	1.466557701558611E-6	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999491212080146	WITHOUT_CLASSIFICATION	5.0878791985474404E-5	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999110195886	WITHOUT_CLASSIFICATION	8.898041142630348E-8	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999960696625513	WITHOUT_CLASSIFICATION	3.930337448690997E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9994005563913154	WITHOUT_CLASSIFICATION	5.994436086846853E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999577910296268	WITHOUT_CLASSIFICATION	4.2208970373277384E-5	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998897483532	WITHOUT_CLASSIFICATION	1.1025164683415241E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997705314561641	WITHOUT_CLASSIFICATION	2.2946854383590324E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999986480044957	WITHOUT_CLASSIFICATION	1.3519955044002971E-6	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999996323355581	WITHOUT_CLASSIFICATION	3.676644419061851E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999409193845058	WITHOUT_CLASSIFICATION	5.908061549419748E-4	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9992557501006237	WITHOUT_CLASSIFICATION	7.442498993761838E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997705314561641	WITHOUT_CLASSIFICATION	2.2946854383590324E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999396150524479	WITHOUT_CLASSIFICATION	6.0384947552124664E-5	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999780826975752	WITHOUT_CLASSIFICATION	2.1917302424826173E-5	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999842200135514	WITHOUT_CLASSIFICATION	1.5779986448545375E-5	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999876429855	WITHOUT_CLASSIFICATION	1.2357014628038914E-8	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999980431116893	WITHOUT_CLASSIFICATION	1.956888310684541E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999951662496668	WITHOUT_CLASSIFICATION	4.8337503332727416E-6	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9960606269624831	WITHOUT_CLASSIFICATION	0.0039393730375168945	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.796325558902316	WITHOUT_CLASSIFICATION	0.203674441097684	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999174263559	WITHOUT_CLASSIFICATION	8.257364416543092E-8	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999838866199164	WITHOUT_CLASSIFICATION	1.6113380083627115E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999769243304282	WITHOUT_CLASSIFICATION	2.307566957177685E-5	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999729427498635	WITHOUT_CLASSIFICATION	2.7057250136409997E-5	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.5943769427201563	WITHOUT_CLASSIFICATION	0.4056230572798436	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999820222543103	WITHOUT_CLASSIFICATION	1.797774568969686E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999983677175557	WITHOUT_CLASSIFICATION	1.6322824444179062E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999805062895529	WITHOUT_CLASSIFICATION	1.9493710447064393E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999984020800737	WITHOUT_CLASSIFICATION	1.5979199263436805E-6	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998841117318	WITHOUT_CLASSIFICATION	1.1588826816004999E-7	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999359987742	WITHOUT_CLASSIFICATION	6.40012257645459E-8	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997103723034911	WITHOUT_CLASSIFICATION	2.8962769650891905E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9986400920290266	WITHOUT_CLASSIFICATION	0.0013599079709734336	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999483867258436	WITHOUT_CLASSIFICATION	5.1613274156469454E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999822331951488	WITHOUT_CLASSIFICATION	1.7766804851260646E-5	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999995652927528	WITHOUT_CLASSIFICATION	4.3470724717385343E-7	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999852523069618	WITHOUT_CLASSIFICATION	1.4747693038192236E-4	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999964924403	WITHOUT_CLASSIFICATION	3.5075597551890667E-9	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999995257411705	WITHOUT_CLASSIFICATION	4.7425882957845696E-7	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999198012459036	WITHOUT_CLASSIFICATION	8.019875409640734E-5	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998346381303607	WITHOUT_CLASSIFICATION	1.653618696393822E-4	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9802335147959015	WITHOUT_CLASSIFICATION	0.019766485204098558	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.8221801420337406	DESIGN	0.1778198579662595	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999732901509409	WITHOUT_CLASSIFICATION	2.6709849059000663E-5	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.8098134600125159	WITHOUT_CLASSIFICATION	0.1901865399874842	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9992750997032486	WITHOUT_CLASSIFICATION	7.249002967513778E-4	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999892141312724	WITHOUT_CLASSIFICATION	1.078586872758599E-5	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999983065158	WITHOUT_CLASSIFICATION	1.693484316029789E-9	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999389931189	WITHOUT_CLASSIFICATION	6.10068811773294E-8	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999995591206091	WITHOUT_CLASSIFICATION	4.408793908941283E-6	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9602459579390339	WITHOUT_CLASSIFICATION	0.03975404206096607	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999982941639746	WITHOUT_CLASSIFICATION	1.7058360254698432E-6	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996958420054	WITHOUT_CLASSIFICATION	3.0415799457967586E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999609352687542	WITHOUT_CLASSIFICATION	3.9064731245854996E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999609352687542	WITHOUT_CLASSIFICATION	3.9064731245854996E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999935503224594	WITHOUT_CLASSIFICATION	6.449677540591709E-6	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999907079899788	WITHOUT_CLASSIFICATION	9.292010021174874E-6	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999987635870031	WITHOUT_CLASSIFICATION	1.236412996823224E-6	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9987120209094544	WITHOUT_CLASSIFICATION	0.0012879790905455442	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999710423126859	WITHOUT_CLASSIFICATION	2.895768731412381E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999710423126859	WITHOUT_CLASSIFICATION	2.895768731412381E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9997552410588473	WITHOUT_CLASSIFICATION	2.447589411526927E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.999925612954786	WITHOUT_CLASSIFICATION	7.438704521404183E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999998683169013	WITHOUT_CLASSIFICATION	1.3168309870748325E-6	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999996440777381	WITHOUT_CLASSIFICATION	3.559222618288375E-7	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999776022224606	WITHOUT_CLASSIFICATION	2.239777753946594E-5	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999998710061148	WITHOUT_CLASSIFICATION	1.2899388527621268E-7	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999969875109114	WITHOUT_CLASSIFICATION	3.0124890886342737E-6	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999512051226618	WITHOUT_CLASSIFICATION	4.8794877338256685E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999999376356474	WITHOUT_CLASSIFICATION	6.236435248353853E-8	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999974302259081	WITHOUT_CLASSIFICATION	2.5697740918386195E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999989488707584	WITHOUT_CLASSIFICATION	1.0511292416361851E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995038429562	WITHOUT_CLASSIFICATION	4.96157043842316E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995038429562	WITHOUT_CLASSIFICATION	4.96157043842316E-7	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999998685876065	WITHOUT_CLASSIFICATION	1.314123935747961E-7	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9998095576829056	WITHOUT_CLASSIFICATION	1.904423170944265E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998510155066745	WITHOUT_CLASSIFICATION	1.489844933254739E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9987674257586013	WITHOUT_CLASSIFICATION	0.0012325742413986634	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9953659971690842	WITHOUT_CLASSIFICATION	0.004634002830915745	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992192056242648	WITHOUT_CLASSIFICATION	7.807943757351193E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995237846168302	WITHOUT_CLASSIFICATION	4.7621538316986443E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999997184850341	WITHOUT_CLASSIFICATION	2.8151496590340374E-6	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999956488522745	WITHOUT_CLASSIFICATION	4.351147725475626E-6	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999827809372328	WITHOUT_CLASSIFICATION	1.721906276729147E-5	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.5165769070939383	DESIGN	0.4834230929060616	WITHOUT_CLASSIFICATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999838866199164	WITHOUT_CLASSIFICATION	1.6113380083627115E-5	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9167304309698817	WITHOUT_CLASSIFICATION	0.08326956903011828	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999906739198568	WITHOUT_CLASSIFICATION	9.32608014320547E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9991427455598486	WITHOUT_CLASSIFICATION	8.572544401513959E-4	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999936768836539	WITHOUT_CLASSIFICATION	6.323116346055346E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998204969035	WITHOUT_CLASSIFICATION	1.7950309647326364E-7	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999980587100401	WITHOUT_CLASSIFICATION	1.9412899598981692E-5	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9985416204800454	WITHOUT_CLASSIFICATION	0.001458379519954609	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9997817495085062	WITHOUT_CLASSIFICATION	2.18250491493893E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999992723211938	WITHOUT_CLASSIFICATION	7.276788061133562E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9969828422657067	WITHOUT_CLASSIFICATION	0.00301715773429336	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9969828422657067	WITHOUT_CLASSIFICATION	0.00301715773429336	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999976753578432	WITHOUT_CLASSIFICATION	2.32464215678349E-6	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999926230991435	WITHOUT_CLASSIFICATION	7.376900856498153E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993648075943178	WITHOUT_CLASSIFICATION	6.351924056821438E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999938320215669	WITHOUT_CLASSIFICATION	6.167978433152967E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999947412667799	WITHOUT_CLASSIFICATION	5.258733220093582E-6	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999776444444941	WITHOUT_CLASSIFICATION	2.2355555505921673E-5	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999990958926632	WITHOUT_CLASSIFICATION	9.04107336696788E-7	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999580032118774	WITHOUT_CLASSIFICATION	4.1996788122546475E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9997574230459488	WITHOUT_CLASSIFICATION	2.425769540511724E-4	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999647635684846	WITHOUT_CLASSIFICATION	3.52364315154192E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9901223210496207	WITHOUT_CLASSIFICATION	0.009877678950379335	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9997632858586343	DESIGN	2.3671414136565162E-4	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8482142464760114	WITHOUT_CLASSIFICATION	0.1517857535239887	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999925742031	WITHOUT_CLASSIFICATION	7.425796846760389E-9	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9587563805227555	DESIGN	0.04124361947724456	WITHOUT_CLASSIFICATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996955963210546	WITHOUT_CLASSIFICATION	3.0440367894536176E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9346144802463252	DESIGN	0.0653855197536747	WITHOUT_CLASSIFICATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999981394359178	WITHOUT_CLASSIFICATION	1.8605640822310828E-6	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9996677997357384	WITHOUT_CLASSIFICATION	3.3220026426160327E-4	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999546023005911	WITHOUT_CLASSIFICATION	4.5397699408927285E-5	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999579657093	WITHOUT_CLASSIFICATION	4.203429082472762E-8	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9913665621000228	WITHOUT_CLASSIFICATION	0.00863343789997722	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999793442478951	WITHOUT_CLASSIFICATION	2.065575210488E-5	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999959487164	WITHOUT_CLASSIFICATION	4.051283627522871E-9	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999981041000635	WITHOUT_CLASSIFICATION	1.8958999363999604E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999981041000635	WITHOUT_CLASSIFICATION	1.8958999363999604E-6	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9993467146160396	WITHOUT_CLASSIFICATION	6.532853839603341E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9994645429253912	WITHOUT_CLASSIFICATION	5.354570746088034E-4	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.999989020294458	WITHOUT_CLASSIFICATION	1.097970554191906E-5	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.5959287214920663	WITHOUT_CLASSIFICATION	0.4040712785079338	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999895677082679	WITHOUT_CLASSIFICATION	1.043229173212641E-5	DESIGN
todo : what else to do here?	DESIGN	0.9681579358536485	WITHOUT_CLASSIFICATION	0.03184206414635149	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.7161626299337105	WITHOUT_CLASSIFICATION	0.28383737006628934	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9644792532771146	WITHOUT_CLASSIFICATION	0.035520746722885306	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8620317121382995	DESIGN	0.13796828786170057	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8620317121382995	DESIGN	0.13796828786170057	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9997245617999574	WITHOUT_CLASSIFICATION	2.7543820004269744E-4	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999942990666071	WITHOUT_CLASSIFICATION	5.700933392935649E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9997183436693589	WITHOUT_CLASSIFICATION	2.8165633064112513E-4	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9876959142245928	DESIGN	0.01230408577540711	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9876959142245928	DESIGN	0.01230408577540711	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999997632292553	DESIGN	2.3677074475822196E-7	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999997632292553	DESIGN	2.3677074475822196E-7	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.5229073251468463	DESIGN	0.47709267485315365	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9990587226605411	DESIGN	9.412773394588057E-4	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9990587226605411	DESIGN	9.412773394588057E-4	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.99999377937203	DESIGN	6.220627969928568E-6	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999942990666071	WITHOUT_CLASSIFICATION	5.700933392935649E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9997183436693589	WITHOUT_CLASSIFICATION	2.8165633064112513E-4	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.999748799811983	WITHOUT_CLASSIFICATION	2.512001880170484E-4	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999980290451379	WITHOUT_CLASSIFICATION	1.970954862152145E-6	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.8997952562678733	DESIGN	0.10020474373212673	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.8856863517269846	DESIGN	0.1143136482730155	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.8149826179252366	WITHOUT_CLASSIFICATION	0.18501738207476337	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9999198124585947	WITHOUT_CLASSIFICATION	8.018754140522086E-5	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.7976814468441557	DESIGN	0.2023185531558444	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9681579358536485	WITHOUT_CLASSIFICATION	0.03184206414635149	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.961534401588609	WITHOUT_CLASSIFICATION	0.03846559841139098	DESIGN
todo : what else to do here?	DESIGN	0.9681579358536485	WITHOUT_CLASSIFICATION	0.03184206414635149	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.8834327816255235	DESIGN	0.11656721837447652	WITHOUT_CLASSIFICATION
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.937623928308243	DESIGN	0.06237607169175685	WITHOUT_CLASSIFICATION
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999874994630297	DESIGN	1.250053697023744E-5	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.7161626299337105	WITHOUT_CLASSIFICATION	0.28383737006628934	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9613392642064705	DESIGN	0.0386607357935294	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9987063696973828	WITHOUT_CLASSIFICATION	0.0012936303026171833	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.8030380042482614	DESIGN	0.19696199575173853	WITHOUT_CLASSIFICATION
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.5351346115955115	DESIGN	0.4648653884044886	WITHOUT_CLASSIFICATION
todo : what is the implication of this?	DESIGN	0.9856542814737685	WITHOUT_CLASSIFICATION	0.014345718526231307	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9892944552102573	WITHOUT_CLASSIFICATION	0.010705544789742685	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.999999767778246	DESIGN	2.3222175410276332E-7	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.98244411125704	DESIGN	0.017555888742959998	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9986870723716555	WITHOUT_CLASSIFICATION	0.001312927628344371	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6212545823081662	WITHOUT_CLASSIFICATION	0.37874541769183373	DESIGN
todo : again, how should this work for non-pojo entities?	DESIGN	0.9915542365504393	WITHOUT_CLASSIFICATION	0.008445763449560722	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9578757697847623	DESIGN	0.0421242302152378	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.5825180490025943	WITHOUT_CLASSIFICATION	0.41748195099740587	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9951787429794087	DESIGN	0.004821257020591287	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.6651505277606192	DESIGN	0.3348494722393808	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997987374415608	DESIGN	2.012625584392412E-4	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.5520834051596553	DESIGN	0.4479165948403446	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.5520834051596553	DESIGN	0.4479165948403446	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.5789039641729815	DESIGN	0.4210960358270184	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9554996728483811	WITHOUT_CLASSIFICATION	0.04450032715161879	DESIGN
TODO possibly relax that	DESIGN	0.69808222806665	DESIGN	0.30191777193334984	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.69808222806665	DESIGN	0.30191777193334984	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.69808222806665	DESIGN	0.30191777193334984	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.6651505277606192	DESIGN	0.3348494722393808	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9999701183347128	WITHOUT_CLASSIFICATION	2.9881665287114618E-5	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9998919495397802	WITHOUT_CLASSIFICATION	1.0805046021969219E-4	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9982354420136036	WITHOUT_CLASSIFICATION	0.001764557986396279	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9999305406710246	WITHOUT_CLASSIFICATION	6.945932897540674E-5	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.7892123739092823	WITHOUT_CLASSIFICATION	0.2107876260907177	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.995709907738706	WITHOUT_CLASSIFICATION	0.004290092261293951	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8620317121382995	DESIGN	0.13796828786170057	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8620317121382995	DESIGN	0.13796828786170057	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9961380775189883	WITHOUT_CLASSIFICATION	0.003861922481011552	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8620317121382995	DESIGN	0.13796828786170057	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999967532436194	DESIGN	3.246756380493955E-6	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9998236079415972	WITHOUT_CLASSIFICATION	1.7639205840279577E-4	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.5227663305161849	DESIGN	0.4772336694838151	WITHOUT_CLASSIFICATION
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999065042164604	WITHOUT_CLASSIFICATION	9.349578353958375E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.999802818978252	WITHOUT_CLASSIFICATION	1.9718102174809163E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9989953543468292	WITHOUT_CLASSIFICATION	0.0010046456531708503	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.5633987770611547	WITHOUT_CLASSIFICATION	0.43660122293884535	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999985317861961	WITHOUT_CLASSIFICATION	1.4682138037899598E-6	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9990779562183663	WITHOUT_CLASSIFICATION	9.220437816337448E-4	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9809091842238726	WITHOUT_CLASSIFICATION	0.019090815776127323	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9970076270955783	WITHOUT_CLASSIFICATION	0.0029923729044216757	DESIGN
Does this dialect support check constraints?	DESIGN	0.999902693531728	WITHOUT_CLASSIFICATION	9.730646827203833E-5	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9999571715571953	WITHOUT_CLASSIFICATION	4.2828442804702076E-5	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9983765327591553	WITHOUT_CLASSIFICATION	0.0016234672408447573	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.999769294216765	WITHOUT_CLASSIFICATION	2.30705783234965E-4	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9778002984017321	WITHOUT_CLASSIFICATION	0.02219970159826789	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9999421265482634	WITHOUT_CLASSIFICATION	5.78734517365958E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9196740304112913	WITHOUT_CLASSIFICATION	0.08032596958870869	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9503400255446603	DESIGN	0.049659974455339664	WITHOUT_CLASSIFICATION
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9486285564079646	DESIGN	0.05137144359203532	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.8049940762981525	DESIGN	0.19500592370184744	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9885379535224343	WITHOUT_CLASSIFICATION	0.011462046477565633	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9942982418639387	WITHOUT_CLASSIFICATION	0.005701758136061289	DESIGN
I suppose?	DESIGN	0.9935695270677932	WITHOUT_CLASSIFICATION	0.006430472932206689	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9625444648006665	DESIGN	0.03745553519933346	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9618638126057326	WITHOUT_CLASSIFICATION	0.038136187394267385	DESIGN
TODO:refactor + make this method private	DESIGN	0.5407931298928168	WITHOUT_CLASSIFICATION	0.45920687010718336	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9826150463525647	WITHOUT_CLASSIFICATION	0.017384953647435315	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9998167564527114	DESIGN	1.8324354728852261E-4	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.6589184902289766	DESIGN	0.3410815097710234	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.9999328915011311	WITHOUT_CLASSIFICATION	6.710849886890805E-5	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9596664305669456	WITHOUT_CLASSIFICATION	0.04033356943305439	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9596664305669456	WITHOUT_CLASSIFICATION	0.04033356943305439	DESIGN
TODO: temporary	DESIGN	0.983317853626519	DESIGN	0.016682146373480908	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.8332519697097188	DESIGN	0.16674803029028112	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.8332519697097188	DESIGN	0.16674803029028112	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9618886421955124	DESIGN	0.03811135780448761	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9496062486051396	WITHOUT_CLASSIFICATION	0.05039375139486042	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.942586264707143	DESIGN	0.057413735292856996	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9667759225926307	WITHOUT_CLASSIFICATION	0.0332240774073693	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9987328153106788	WITHOUT_CLASSIFICATION	0.0012671846893211895	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.5543549838872927	DESIGN	0.44564501611270735	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.8997445350888484	WITHOUT_CLASSIFICATION	0.10025546491115159	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9353363914295579	DESIGN	0.0646636085704421	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9995466427615651	DESIGN	4.533572384348374E-4	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9864766125328069	DESIGN	0.013523387467193077	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.8808023194516035	DESIGN	0.11919768054839645	WITHOUT_CLASSIFICATION
TODO: suck into event class	DESIGN	0.9738106431939633	DESIGN	0.026189356806036703	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9660313908396009	WITHOUT_CLASSIFICATION	0.03396860916039917	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9993078620708727	DESIGN	6.921379291271819E-4	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9997219339751058	DESIGN	2.780660248941928E-4	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.8731390695678484	WITHOUT_CLASSIFICATION	0.12686093043215163	DESIGN
this class has no proxies (so do a shortcut)	DESIGN	0.9970740474973625	WITHOUT_CLASSIFICATION	0.0029259525026374637	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.9512474095176249	DESIGN	0.04875259048237521	WITHOUT_CLASSIFICATION
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9999454317788536	DESIGN	5.456822114630055E-5	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9923859710687228	WITHOUT_CLASSIFICATION	0.007614028931277124	DESIGN
TODO: is this 100% correct?	DESIGN	0.9747531923196333	DESIGN	0.025246807680366596	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9801812253366221	WITHOUT_CLASSIFICATION	0.01981877466337793	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9998882011723361	DESIGN	1.1179882766396161E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9394948261040788	DESIGN	0.060505173895921326	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.999999897131277	DESIGN	1.0286872297046022E-7	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9038351509584192	DESIGN	0.0961648490415808	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.9548085666194336	WITHOUT_CLASSIFICATION	0.04519143338056642	DESIGN
TODO: merge into one method!	DESIGN	0.8194607524854651	DESIGN	0.18053924751453485	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9931210755092847	DESIGN	0.006878924490715344	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9943674517633485	DESIGN	0.005632548236651549	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9989469374906464	DESIGN	0.0010530625093534895	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9617225640753911	WITHOUT_CLASSIFICATION	0.03827743592460895	DESIGN
TODO : better way?!?	DESIGN	0.9999831217834401	DESIGN	1.6878216559895925E-5	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999944397286634	WITHOUT_CLASSIFICATION	5.560271336600156E-6	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9969485124916562	DESIGN	0.003051487508343739	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999930868396314	DESIGN	6.913160368607083E-6	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999998835311269	DESIGN	1.1646887319699065E-7	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.5827399716253809	DESIGN	0.41726002837461895	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999909796184616	DESIGN	9.020381538499884E-6	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.999842910561358	WITHOUT_CLASSIFICATION	1.57089438641971E-4	DESIGN
yuck!	DESIGN	0.9961380775189883	WITHOUT_CLASSIFICATION	0.003861922481011552	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9012827764110889	WITHOUT_CLASSIFICATION	0.09871722358891108	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9999178548562206	DESIGN	8.214514377935304E-5	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9997936288067599	WITHOUT_CLASSIFICATION	2.0637119323995147E-4	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999984000275716	DESIGN	1.599972428531096E-6	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999190468415283	DESIGN	8.095315847168577E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9986459627027946	DESIGN	0.0013540372972055187	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8620317121382995	DESIGN	0.13796828786170057	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9961380775189883	WITHOUT_CLASSIFICATION	0.003861922481011552	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9971874019040029	WITHOUT_CLASSIFICATION	0.002812598095997025	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999392371311887	DESIGN	6.0762868811289214E-5	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.8733326313438796	WITHOUT_CLASSIFICATION	0.12666736865612035	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.6039890981901398	DESIGN	0.3960109018098602	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9966510989011362	DESIGN	0.0033489010988636755	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8236232030157916	WITHOUT_CLASSIFICATION	0.17637679698420836	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999883366295841	DESIGN	1.1663370415952712E-5	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9999996047603786	DESIGN	3.9523962141627396E-7	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9947852666109841	DESIGN	0.005214733389015925	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.6550209462251975	DESIGN	0.3449790537748025	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9999798943862451	WITHOUT_CLASSIFICATION	2.010561375488051E-5	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9225453955829968	DESIGN	0.07745460441700318	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9978444957628717	DESIGN	0.0021555042371283343	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9965877203839911	WITHOUT_CLASSIFICATION	0.0034122796160088766	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9780194216113239	WITHOUT_CLASSIFICATION	0.02198057838867612	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9922672509934332	DESIGN	0.007732749006566791	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9994774692127756	WITHOUT_CLASSIFICATION	5.225307872244411E-4	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9907369016000684	DESIGN	0.009263098399931538	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999893898773551	DESIGN	1.0610122644854765E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9999999793295109	DESIGN	2.0670489197103385E-8	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.9627546901849411	DESIGN	0.03724530981505891	WITHOUT_CLASSIFICATION
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9997950485656483	DESIGN	2.0495143435176857E-4	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.6043117696693652	WITHOUT_CLASSIFICATION	0.39568823033063477	DESIGN
TODO: what type?	DESIGN	0.8502201119967712	DESIGN	0.14977988800322892	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9931968459071414	WITHOUT_CLASSIFICATION	0.006803154092858548	DESIGN
short-circuit for performance...	DESIGN	0.9993362968858853	WITHOUT_CLASSIFICATION	6.637031141146376E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9410393338970671	WITHOUT_CLASSIFICATION	0.058960666102932824	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9693435661060525	DESIGN	0.030656433893947427	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9988068428956418	WITHOUT_CLASSIFICATION	0.0011931571043581552	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999999999898368	DESIGN	1.0163219590818508E-11	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9987320910811781	DESIGN	0.001267908918821966	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.988433068493719	DESIGN	0.011566931506281011	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.99659656457764	DESIGN	0.003403435422360043	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9982396976245472	WITHOUT_CLASSIFICATION	0.0017603023754527727	DESIGN
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9975046880582072	DESIGN	0.0024953119417927432	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9952301544321014	WITHOUT_CLASSIFICATION	0.004769845567898619	DESIGN
use of trim() here is ugly?	DESIGN	0.9999290167257917	WITHOUT_CLASSIFICATION	7.098327420834502E-5	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.7343455601495249	DESIGN	0.2656544398504751	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.9997220496583834	WITHOUT_CLASSIFICATION	2.779503416165123E-4	DESIGN
TODO: inefficient	DESIGN	0.7438791299398623	DESIGN	0.25612087006013756	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.994130557369558	WITHOUT_CLASSIFICATION	0.005869442630442005	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999999900123179	DESIGN	9.987682148442656E-9	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999942163009548	DESIGN	5.7836990452556236E-6	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9997066863284634	DESIGN	2.933136715365695E-4	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9999919662299365	DESIGN	8.033770063502443E-6	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999447087446675	WITHOUT_CLASSIFICATION	5.529125533248941E-5	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.8588116455108564	DESIGN	0.1411883544891435	WITHOUT_CLASSIFICATION
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9976768968307552	DESIGN	0.002323103169244784	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9995747326463632	WITHOUT_CLASSIFICATION	4.252673536367549E-4	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9924234081129015	DESIGN	0.007576591887098425	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9994182150315026	DESIGN	5.817849684972791E-4	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.5765504602614089	DESIGN	0.42344953973859106	WITHOUT_CLASSIFICATION
TODO should we just collect these like with the collections above?	DESIGN	0.9998753388422746	DESIGN	1.2466115772532792E-4	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.7864940541044182	DESIGN	0.21350594589558175	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9549346905307345	WITHOUT_CLASSIFICATION	0.04506530946926552	DESIGN
create an index on the key columns??	DESIGN	0.9999803763820582	WITHOUT_CLASSIFICATION	1.9623617941765416E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9988722348842636	DESIGN	0.0011277651157363623	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999803763820582	WITHOUT_CLASSIFICATION	1.9623617941765416E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9999748452822805	DESIGN	2.5154717719526606E-5	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9997529279859433	WITHOUT_CLASSIFICATION	2.470720140566801E-4	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9487364318495618	DESIGN	0.051263568150438095	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9998729161000945	WITHOUT_CLASSIFICATION	1.2708389990551982E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.570105643437908	DESIGN	0.42989435656209185	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999803763820582	WITHOUT_CLASSIFICATION	1.9623617941765416E-5	DESIGN
todo : remove	DESIGN	0.9891297113007865	WITHOUT_CLASSIFICATION	0.010870288699213606	DESIGN
todo : remove	DESIGN	0.9891297113007865	WITHOUT_CLASSIFICATION	0.010870288699213606	DESIGN
todo : remove	DESIGN	0.9891297113007865	WITHOUT_CLASSIFICATION	0.010870288699213606	DESIGN
todo : throw exception?	DESIGN	0.8627057871754921	WITHOUT_CLASSIFICATION	0.13729421282450788	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9943326958580946	DESIGN	0.005667304141905411	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9998976089834033	DESIGN	1.0239101659672518E-4	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9999134644755021	DESIGN	8.653552449784417E-5	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.9775477803765636	DESIGN	0.02245221962343629	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.99997539489152	DESIGN	2.460510847995494E-5	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.9690647732305542	WITHOUT_CLASSIFICATION	0.030935226769445916	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.8730450884998161	WITHOUT_CLASSIFICATION	0.1269549115001839	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.5225861236175813	WITHOUT_CLASSIFICATION	0.47741387638241883	DESIGN
ie. the subquery! yuck!	DESIGN	0.99961110123471	WITHOUT_CLASSIFICATION	3.8889876528999114E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9958136993486996	DESIGN	0.0041863006513004584	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9927853715266677	DESIGN	0.0072146284733323055	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9997922304514051	DESIGN	2.0776954859493652E-4	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.6522334284009975	WITHOUT_CLASSIFICATION	0.3477665715990026	DESIGN
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9988547670864898	DESIGN	0.0011452329135101147	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9037680583913121	WITHOUT_CLASSIFICATION	0.09623194160868792	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8105955071577006	WITHOUT_CLASSIFICATION	0.18940449284229938	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.757801854861272	WITHOUT_CLASSIFICATION	0.242198145138728	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9997177576911409	DESIGN	2.822423088591161E-4	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.9611280957956008	DESIGN	0.03887190420439925	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.99771188583325	DESIGN	0.0022881141667499814	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9944766204463239	WITHOUT_CLASSIFICATION	0.005523379553676191	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.7534765803964656	WITHOUT_CLASSIFICATION	0.2465234196035345	DESIGN
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9790405301060215	WITHOUT_CLASSIFICATION	0.020959469893978448	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9840123498395087	DESIGN	0.015987650160491317	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9979557908872518	DESIGN	0.0020442091127481	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.8478494457622516	DESIGN	0.1521505542377483	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9897035656084484	DESIGN	0.010296434391551642	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999999980371913	DESIGN	1.962808700416018E-9	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.8865161432833517	WITHOUT_CLASSIFICATION	0.11348385671664832	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9995708111506846	WITHOUT_CLASSIFICATION	4.2918884931544767E-4	DESIGN
is this ok?	DESIGN	0.9999801424149362	WITHOUT_CLASSIFICATION	1.9857585063893318E-5	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999942277814303	DESIGN	5.77221856965134E-6	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9230540048895247	DESIGN	0.07694599511047533	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9909424535888128	WITHOUT_CLASSIFICATION	0.00905754641118723	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9997640572477342	DESIGN	2.3594275226573535E-4	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.9857599658657187	DESIGN	0.0142400341342812	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9986271019457285	DESIGN	0.0013728980542715525	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9997279755023819	DESIGN	2.7202449761804E-4	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9846264467600392	DESIGN	0.015373553239960865	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9983093608531088	WITHOUT_CLASSIFICATION	0.0016906391468910935	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.999909961022926	DESIGN	9.003897707403386E-5	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9997093531618716	DESIGN	2.906468381284475E-4	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.7239496957706836	WITHOUT_CLASSIFICATION	0.2760503042293164	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.97837466772877	DESIGN	0.021625332271229942	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6990990851642872	DESIGN	0.3009009148357127	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9986814989602719	DESIGN	0.0013185010397280526	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9902426318037172	DESIGN	0.009757368196282786	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9894870229852515	DESIGN	0.010512977014748478	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.7287908722971234	DESIGN	0.27120912770287664	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.999389088934808	WITHOUT_CLASSIFICATION	6.109110651919219E-4	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9821788713766327	DESIGN	0.017821128623367353	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9847615577955295	DESIGN	0.01523844220447055	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7918081795531245	DESIGN	0.20819182044687554	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999955520759	DESIGN	4.447924122029497E-9	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9992249144290044	DESIGN	7.750855709956423E-4	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9999770698389543	WITHOUT_CLASSIFICATION	2.2930161045698796E-5	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999970725962909	DESIGN	2.927403709125914E-6	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.960729700643236	WITHOUT_CLASSIFICATION	0.03927029935676395	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.9963859553314425	DESIGN	0.003614044668557503	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9998464603336412	WITHOUT_CLASSIFICATION	1.535396663587717E-4	DESIGN
short cut check...	DESIGN	0.9999104499340705	WITHOUT_CLASSIFICATION	8.955006592945852E-5	DESIGN
todo : move to StringHelper?	DESIGN	0.964897589177478	WITHOUT_CLASSIFICATION	0.03510241082252199	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.996824828637079	DESIGN	0.003175171362921034	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9985296533698104	DESIGN	0.0014703466301896053	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.999430661411588	DESIGN	5.69338588411913E-4	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.6034032735952369	WITHOUT_CLASSIFICATION	0.3965967264047631	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.6381758557626439	DESIGN	0.36182414423735604	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.5617720157883929	DESIGN	0.43822798421160714	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.536226290110879	DESIGN	0.463773709889121	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999990215119631	DESIGN	9.784880368470916E-7	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.7256215250375804	WITHOUT_CLASSIFICATION	0.2743784749624196	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9999186695979027	DESIGN	8.133040209734089E-5	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9974497135536092	WITHOUT_CLASSIFICATION	0.0025502864463908003	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.993743685800082	DESIGN	0.006256314199917971	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9998869084987537	DESIGN	1.1309150124618699E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9941944837435046	WITHOUT_CLASSIFICATION	0.005805516256495397	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999814217554331	DESIGN	1.8578244566926878E-5	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999999083569029	DESIGN	9.164309718775445E-8	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.843016094333148	WITHOUT_CLASSIFICATION	0.15698390566685205	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.8721104372413665	WITHOUT_CLASSIFICATION	0.12788956275863353	DESIGN
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.9709466478049587	WITHOUT_CLASSIFICATION	0.029053352195041265	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9989739192107091	DESIGN	0.0010260807892908499	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999946936240968	DESIGN	5.306375903295478E-6	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9998570886605976	DESIGN	1.4291133940240805E-4	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9891297113007865	WITHOUT_CLASSIFICATION	0.010870288699213606	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9760261518162714	DESIGN	0.023973848183728587	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9999999879418707	DESIGN	1.205812921070636E-8	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9957640345888921	DESIGN	0.004235965411107856	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9172203402115061	WITHOUT_CLASSIFICATION	0.08277965978849394	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9999997569897723	DESIGN	2.430102277451362E-7	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.8284074799720686	DESIGN	0.1715925200279313	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.9367337163522762	WITHOUT_CLASSIFICATION	0.06326628364772373	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.999826525087534	DESIGN	1.7347491246606E-4	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9736296818161874	DESIGN	0.026370318183812656	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.877759992902119	WITHOUT_CLASSIFICATION	0.12224000709788091	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9998122635589779	DESIGN	1.8773644102205365E-4	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.8938674755494465	WITHOUT_CLASSIFICATION	0.10613252445055348	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.981769833161738	DESIGN	0.018230166838261914	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9990834695515948	WITHOUT_CLASSIFICATION	9.165304484052674E-4	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999696195659862	DESIGN	3.0380434013846828E-5	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9812868730459482	WITHOUT_CLASSIFICATION	0.01871312695405186	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9999654596244134	DESIGN	3.4540375586575585E-5	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9999864801074452	WITHOUT_CLASSIFICATION	1.3519892554736453E-5	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.5077727336124866	DESIGN	0.4922272663875134	WITHOUT_CLASSIFICATION
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.997766980909031	DESIGN	0.0022330190909688953	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9991710502871295	DESIGN	8.289497128706348E-4	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999989622	DESIGN	1.0377764338167812E-12	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999712266958	DESIGN	2.8773304269780195E-8	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9994729074051137	DESIGN	5.270925948861884E-4	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999996768539714	DESIGN	3.231460285534095E-7	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9999245283810447	DESIGN	7.547161895531019E-5	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999968558276374	WITHOUT_CLASSIFICATION	3.1441723625540945E-6	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999950847961	WITHOUT_CLASSIFICATION	4.9152039991813925E-9	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999971629223611	DESIGN	2.8370776389602053E-6	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9184131762196762	DESIGN	0.0815868237803237	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9991114497570844	DESIGN	8.885502429156203E-4	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9923383549927429	DESIGN	0.007661645007257116	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9881726343847684	DESIGN	0.011827365615231433	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9476455502575788	DESIGN	0.052354449742421164	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.8478494457622516	DESIGN	0.1521505542377483	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.5114315144513611	DESIGN	0.4885684855486388	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9791210356161605	DESIGN	0.020878964383839516	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.8865161432833517	WITHOUT_CLASSIFICATION	0.11348385671664832	DESIGN
TODO: make this a bit nicer	DESIGN	0.9230540048895247	DESIGN	0.07694599511047533	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9836068718321309	DESIGN	0.016393128167869093	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9876959142245928	DESIGN	0.01230408577540711	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9876959142245928	DESIGN	0.01230408577540711	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9876959142245928	DESIGN	0.01230408577540711	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999908876225237	DESIGN	9.112377476189043E-6	WITHOUT_CLASSIFICATION
