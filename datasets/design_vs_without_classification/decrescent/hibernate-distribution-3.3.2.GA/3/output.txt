//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999843715853812	WITHOUT_CLASSIFICATION	1.5628414618785157E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999907329611617	WITHOUT_CLASSIFICATION	9.267038838265264E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999907329611617	WITHOUT_CLASSIFICATION	9.267038838265264E-6	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999891437028954	WITHOUT_CLASSIFICATION	1.0856297104583358E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999978510167485	WITHOUT_CLASSIFICATION	2.148983251441005E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999475174200103	WITHOUT_CLASSIFICATION	5.2482579989686395E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996189526208	WITHOUT_CLASSIFICATION	3.810473791418937E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996189526208	WITHOUT_CLASSIFICATION	3.810473791418937E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999996061238863	WITHOUT_CLASSIFICATION	3.9387611375575616E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995367502476	WITHOUT_CLASSIFICATION	4.6324975244548255E-7	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999984697108876	WITHOUT_CLASSIFICATION	1.5302891124892489E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999991094671656	WITHOUT_CLASSIFICATION	8.905328344199897E-7	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999992445111228	WITHOUT_CLASSIFICATION	7.554888773287805E-7	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999992445111228	WITHOUT_CLASSIFICATION	7.554888773287805E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999598345443169	WITHOUT_CLASSIFICATION	4.016545568300372E-5	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9988869788622157	WITHOUT_CLASSIFICATION	0.0011130211377842368	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999687123564681	WITHOUT_CLASSIFICATION	3.128764353191275E-5	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999677144902653	WITHOUT_CLASSIFICATION	3.228550973471877E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998759019753	WITHOUT_CLASSIFICATION	1.240980246631065E-7	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999775696930473	WITHOUT_CLASSIFICATION	2.2430306952652542E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999898549175914	WITHOUT_CLASSIFICATION	1.0145082408695968E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999977027261967	WITHOUT_CLASSIFICATION	2.2972738033241806E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999931820171053	WITHOUT_CLASSIFICATION	6.8179828947560385E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9973883132502047	WITHOUT_CLASSIFICATION	0.002611686749795273	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999680455026194	WITHOUT_CLASSIFICATION	3.195449738067147E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999974266444823	WITHOUT_CLASSIFICATION	2.573355517798484E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999921856645152	WITHOUT_CLASSIFICATION	7.81433548482643E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999971311796355	WITHOUT_CLASSIFICATION	2.868820364583119E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999971311796355	WITHOUT_CLASSIFICATION	2.868820364583119E-6	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999736571213762	WITHOUT_CLASSIFICATION	2.6342878623862152E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999996047201483	WITHOUT_CLASSIFICATION	3.9527985170075895E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9956395860712434	WITHOUT_CLASSIFICATION	0.004360413928756674	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999754423208008	WITHOUT_CLASSIFICATION	2.455767919908967E-5	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9844456580339211	WITHOUT_CLASSIFICATION	0.015554341966078966	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9536600626601272	DESIGN	0.04633993733987282	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9536600626601272	DESIGN	0.04633993733987282	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999797420238	WITHOUT_CLASSIFICATION	2.0257976120985422E-8	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999552824684464	WITHOUT_CLASSIFICATION	4.4717531553588075E-4	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999988624445788	WITHOUT_CLASSIFICATION	1.1375554211154647E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9990491865611689	WITHOUT_CLASSIFICATION	9.50813438830968E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999322259538121	WITHOUT_CLASSIFICATION	6.777404618780967E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997124266037	WITHOUT_CLASSIFICATION	2.8757339630019646E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976721995751	WITHOUT_CLASSIFICATION	2.3278004249297404E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999869897807061	WITHOUT_CLASSIFICATION	1.3010219293889965E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999456766163295	WITHOUT_CLASSIFICATION	5.432338367055607E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9949335183324904	WITHOUT_CLASSIFICATION	0.0050664816675094725	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999135464079563	WITHOUT_CLASSIFICATION	8.645359204363938E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999456766163295	WITHOUT_CLASSIFICATION	5.432338367055607E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999135464079563	WITHOUT_CLASSIFICATION	8.645359204363938E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999991904088484	WITHOUT_CLASSIFICATION	8.095911516046539E-6	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.951695321320763	DESIGN	0.048304678679237024	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.999991890265042	WITHOUT_CLASSIFICATION	8.10973495788632E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999547211059061	WITHOUT_CLASSIFICATION	4.527889409388608E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.8932942265534486	WITHOUT_CLASSIFICATION	0.10670577344655137	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9998942094684123	WITHOUT_CLASSIFICATION	1.0579053158763622E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998203021977053	WITHOUT_CLASSIFICATION	1.7969780229453236E-4	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9210019230174734	WITHOUT_CLASSIFICATION	0.07899807698252666	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998926240391259	WITHOUT_CLASSIFICATION	1.0737596087404652E-4	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999959892538961	WITHOUT_CLASSIFICATION	4.010746103902532E-6	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999964474741085	WITHOUT_CLASSIFICATION	3.5525258914185964E-6	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999883955330541	WITHOUT_CLASSIFICATION	1.1604466945923333E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999990223878	WITHOUT_CLASSIFICATION	9.776123164139304E-10	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999482357562169	WITHOUT_CLASSIFICATION	5.176424378302088E-5	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9997474699018709	WITHOUT_CLASSIFICATION	2.52530098129158E-4	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999925087286669	WITHOUT_CLASSIFICATION	7.49127133322683E-6	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999795510426941	WITHOUT_CLASSIFICATION	2.044895730598257E-5	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9985340797029845	WITHOUT_CLASSIFICATION	0.001465920297015566	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999534971056923	WITHOUT_CLASSIFICATION	4.650289430777575E-5	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999974944406763	WITHOUT_CLASSIFICATION	2.5055593236997912E-6	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9986387978985145	WITHOUT_CLASSIFICATION	0.0013612021014854454	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.999998835758598	WITHOUT_CLASSIFICATION	1.1642414019962157E-6	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996758081747337	WITHOUT_CLASSIFICATION	3.2419182526638294E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999230251935	WITHOUT_CLASSIFICATION	7.697480649120548E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9960189926027833	WITHOUT_CLASSIFICATION	0.003981007397216764	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999932120890915	WITHOUT_CLASSIFICATION	6.787910908406065E-6	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999958593704077	WITHOUT_CLASSIFICATION	4.1406295923661965E-6	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.963150653750658	WITHOUT_CLASSIFICATION	0.03684934624934189	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999981641919411	WITHOUT_CLASSIFICATION	1.8358080588930707E-6	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999006219261	WITHOUT_CLASSIFICATION	9.937807385906644E-8	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999893264029	WITHOUT_CLASSIFICATION	1.0673597068531317E-8	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999941884082	WITHOUT_CLASSIFICATION	5.811591791849908E-9	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999358900598437	WITHOUT_CLASSIFICATION	6.410994015628043E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997364524184132	WITHOUT_CLASSIFICATION	2.635475815867262E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999996395395714	WITHOUT_CLASSIFICATION	3.6046042863838814E-7	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999997424507	WITHOUT_CLASSIFICATION	2.5754929961491875E-9	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9997364524184132	WITHOUT_CLASSIFICATION	2.635475815867262E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999990371292289	WITHOUT_CLASSIFICATION	9.62870771041781E-7	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999550118306523	WITHOUT_CLASSIFICATION	4.498816934778853E-5	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999990151350165	WITHOUT_CLASSIFICATION	9.848649834144168E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999990060125462	WITHOUT_CLASSIFICATION	9.93987453815239E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999954376767479	WITHOUT_CLASSIFICATION	4.562323252036841E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999986093635482	WITHOUT_CLASSIFICATION	1.390636451751768E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999986093635482	WITHOUT_CLASSIFICATION	1.390636451751768E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999816156021537	WITHOUT_CLASSIFICATION	1.8384397846353262E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9940181563521922	WITHOUT_CLASSIFICATION	0.005981843647807913	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9998547846593501	WITHOUT_CLASSIFICATION	1.4521534065001305E-4	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999998647769283	WITHOUT_CLASSIFICATION	1.3522307169214195E-7	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999877885229339	WITHOUT_CLASSIFICATION	1.2211477066214819E-5	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9995726153599852	WITHOUT_CLASSIFICATION	4.2738464001470063E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999105429359	WITHOUT_CLASSIFICATION	8.945706405148807E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999892912397689	WITHOUT_CLASSIFICATION	1.0708760231191094E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9998769543966581	WITHOUT_CLASSIFICATION	1.230456033418038E-4	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999999489456613	WITHOUT_CLASSIFICATION	5.105433869749906E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998146935347081	WITHOUT_CLASSIFICATION	1.853064652919689E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998146935347081	WITHOUT_CLASSIFICATION	1.853064652919689E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999377367106287	WITHOUT_CLASSIFICATION	6.226328937131533E-5	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999998641086931	WITHOUT_CLASSIFICATION	1.3589130682539544E-7	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999130034029745	WITHOUT_CLASSIFICATION	8.69965970254793E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998146935347081	WITHOUT_CLASSIFICATION	1.853064652919689E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999377367106287	WITHOUT_CLASSIFICATION	6.226328937131533E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999377367106287	WITHOUT_CLASSIFICATION	6.226328937131533E-5	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999448130448909	WITHOUT_CLASSIFICATION	5.518695510904409E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9962316405756909	WITHOUT_CLASSIFICATION	0.0037683594243091063	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999999229856	WITHOUT_CLASSIFICATION	7.701438993766743E-10	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999996539726793	WITHOUT_CLASSIFICATION	3.460273206999451E-7	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9991048008781362	WITHOUT_CLASSIFICATION	8.951991218638885E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9991048008781362	WITHOUT_CLASSIFICATION	8.951991218638885E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9995397102155232	WITHOUT_CLASSIFICATION	4.6028978447680845E-4	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998636698985146	WITHOUT_CLASSIFICATION	1.3633010148548429E-4	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.999999510319612	WITHOUT_CLASSIFICATION	4.89680387991501E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999819098497265	WITHOUT_CLASSIFICATION	1.8090150273460492E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999819098497265	WITHOUT_CLASSIFICATION	1.8090150273460492E-5	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999384525691299	WITHOUT_CLASSIFICATION	6.154743087006734E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997139107671003	WITHOUT_CLASSIFICATION	2.860892328996861E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.7790362780553688	WITHOUT_CLASSIFICATION	0.2209637219446313	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999971873109759	WITHOUT_CLASSIFICATION	2.812689024233958E-6	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999974795953255	WITHOUT_CLASSIFICATION	2.5204046745667835E-6	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999867710010881	WITHOUT_CLASSIFICATION	1.3228998911912877E-5	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9998254914724329	WITHOUT_CLASSIFICATION	1.7450852756706808E-4	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9964506668941453	WITHOUT_CLASSIFICATION	0.0035493331058547547	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9998756748701352	WITHOUT_CLASSIFICATION	1.2432512986491393E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.7790362780553688	WITHOUT_CLASSIFICATION	0.2209637219446313	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9999317763892398	WITHOUT_CLASSIFICATION	6.82236107602482E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999652037595688	WITHOUT_CLASSIFICATION	3.4796240431255705E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999652037595688	WITHOUT_CLASSIFICATION	3.4796240431255705E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9998584146073405	WITHOUT_CLASSIFICATION	1.4158539265949962E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9510047079528154	WITHOUT_CLASSIFICATION	0.04899529204718458	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9993958633464133	WITHOUT_CLASSIFICATION	6.041366535866562E-4	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998938472369633	WITHOUT_CLASSIFICATION	1.0615276303674079E-4	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9996942645977673	WITHOUT_CLASSIFICATION	3.057354022326501E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9999378021676264	WITHOUT_CLASSIFICATION	6.219783237359853E-5	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9999792983048079	WITHOUT_CLASSIFICATION	2.0701695192091553E-5	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999994046923553	WITHOUT_CLASSIFICATION	5.953076447025742E-7	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999906000859	WITHOUT_CLASSIFICATION	9.399914100078184E-9	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999906000859	WITHOUT_CLASSIFICATION	9.399914100078184E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999670114800369	WITHOUT_CLASSIFICATION	3.298851996302808E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999843715853812	WITHOUT_CLASSIFICATION	1.5628414618785157E-5	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999962984607947	WITHOUT_CLASSIFICATION	3.7015392052988327E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998824358552	WITHOUT_CLASSIFICATION	1.1756414471149284E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999907329611617	WITHOUT_CLASSIFICATION	9.267038838265264E-6	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999960855252349	WITHOUT_CLASSIFICATION	3.914474765088747E-5	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999585206035712	WITHOUT_CLASSIFICATION	4.147939642879439E-5	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.999960214120343	WITHOUT_CLASSIFICATION	3.978587965702037E-5	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999994089949977	WITHOUT_CLASSIFICATION	5.910050022017426E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999979510131186	WITHOUT_CLASSIFICATION	2.0489868813134407E-6	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998159160422639	WITHOUT_CLASSIFICATION	1.8408395773604854E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999964295266777	WITHOUT_CLASSIFICATION	3.5704733222336383E-6	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999550229904952	WITHOUT_CLASSIFICATION	4.4977009504798844E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999978510167485	WITHOUT_CLASSIFICATION	2.148983251441005E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996466446605	WITHOUT_CLASSIFICATION	3.5335533951138234E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996466446605	WITHOUT_CLASSIFICATION	3.5335533951138234E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999993474509924	WITHOUT_CLASSIFICATION	6.525490075892648E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999565311827789	WITHOUT_CLASSIFICATION	4.3468817221149514E-5	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999999463733199	WITHOUT_CLASSIFICATION	5.362668009921059E-7	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999994349441308	WITHOUT_CLASSIFICATION	5.650558692450841E-7	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999746157178631	WITHOUT_CLASSIFICATION	2.538428213704475E-5	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9978385369801216	WITHOUT_CLASSIFICATION	0.0021614630198783925	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996189526208	WITHOUT_CLASSIFICATION	3.810473791418937E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9953022669093324	WITHOUT_CLASSIFICATION	0.004697733090667579	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999996651084474	WITHOUT_CLASSIFICATION	3.348915525764528E-7	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999036536016125	WITHOUT_CLASSIFICATION	9.634639838746768E-5	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996688791735	WITHOUT_CLASSIFICATION	3.311208265050136E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999908790720403	WITHOUT_CLASSIFICATION	9.120927959668522E-6	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999923488896756	WITHOUT_CLASSIFICATION	7.651110324421599E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999978921797337	WITHOUT_CLASSIFICATION	2.1078202663528214E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999850634472	WITHOUT_CLASSIFICATION	1.4936552802646634E-7	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999960304260513	WITHOUT_CLASSIFICATION	3.96957394862367E-6	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999993441416345	WITHOUT_CLASSIFICATION	6.558583654903399E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.5312927471481055	DESIGN	0.4687072528518947	WITHOUT_CLASSIFICATION
// register in exception table	WITHOUT_CLASSIFICATION	0.9999908920355034	WITHOUT_CLASSIFICATION	9.107964496691897E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999964801042508	WITHOUT_CLASSIFICATION	3.5198957491528938E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999907329611617	WITHOUT_CLASSIFICATION	9.267038838265264E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999907329611617	WITHOUT_CLASSIFICATION	9.267038838265264E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999964295266777	WITHOUT_CLASSIFICATION	3.5704733222336383E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999996466446605	WITHOUT_CLASSIFICATION	3.5335533951138234E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999978921797337	WITHOUT_CLASSIFICATION	2.1078202663528214E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999996061238863	WITHOUT_CLASSIFICATION	3.9387611375575616E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999987805271309	WITHOUT_CLASSIFICATION	1.2194728691374149E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999882149452884	WITHOUT_CLASSIFICATION	1.1785054711587125E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999941270021112	WITHOUT_CLASSIFICATION	5.872997888739683E-6	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999998965720402	WITHOUT_CLASSIFICATION	1.0342795975626081E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999994394105514	WITHOUT_CLASSIFICATION	5.605894486570763E-7	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999912508285284	WITHOUT_CLASSIFICATION	8.749171471620923E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999933733869676	WITHOUT_CLASSIFICATION	6.626613032412923E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999247931043419	WITHOUT_CLASSIFICATION	7.52068956580153E-5	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999965349677384	WITHOUT_CLASSIFICATION	3.46503226155913E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999943243685061	WITHOUT_CLASSIFICATION	5.675631493902364E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999943243685061	WITHOUT_CLASSIFICATION	5.675631493902364E-6	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999955327307053	WITHOUT_CLASSIFICATION	4.46726929468924E-5	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.999997163650686	WITHOUT_CLASSIFICATION	2.83634931392635E-6	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9999220641614115	WITHOUT_CLASSIFICATION	7.79358385885649E-5	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999834060033614	WITHOUT_CLASSIFICATION	1.6593996638567595E-5	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999962825663022	WITHOUT_CLASSIFICATION	3.7174336976972707E-6	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999998508814414	WITHOUT_CLASSIFICATION	1.491185586871637E-7	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999971725424989	WITHOUT_CLASSIFICATION	2.8274575011174415E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999995367502476	WITHOUT_CLASSIFICATION	4.6324975244548255E-7	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999995546124438	WITHOUT_CLASSIFICATION	4.453875562002388E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999989375893661	WITHOUT_CLASSIFICATION	1.0624106338669114E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999989375893661	WITHOUT_CLASSIFICATION	1.0624106338669114E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.999999797377735	WITHOUT_CLASSIFICATION	2.0262226509682323E-7	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999672099231462	WITHOUT_CLASSIFICATION	3.2790076853808666E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998866449571	WITHOUT_CLASSIFICATION	1.1335504291334178E-7	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999680483963	WITHOUT_CLASSIFICATION	3.1951603723559416E-8	DESIGN
// int	WITHOUT_CLASSIFICATION	0.999999107832273	WITHOUT_CLASSIFICATION	8.921677270279963E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999907329611617	WITHOUT_CLASSIFICATION	9.267038838265264E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999964295266777	WITHOUT_CLASSIFICATION	3.5704733222336383E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999978510167485	WITHOUT_CLASSIFICATION	2.148983251441005E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999978921797337	WITHOUT_CLASSIFICATION	2.1078202663528214E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999978921797337	WITHOUT_CLASSIFICATION	2.1078202663528214E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993125146263	WITHOUT_CLASSIFICATION	6.874853737222897E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993125146263	WITHOUT_CLASSIFICATION	6.874853737222897E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999593552870021	WITHOUT_CLASSIFICATION	4.064471299792503E-5	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999995138460125	WITHOUT_CLASSIFICATION	4.86153987550992E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999995138460125	WITHOUT_CLASSIFICATION	4.86153987550992E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999993078932702	WITHOUT_CLASSIFICATION	6.92106729769748E-7	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999842297732535	WITHOUT_CLASSIFICATION	1.5770226746439533E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999944901309997	WITHOUT_CLASSIFICATION	5.5098690002640724E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999985169772295	WITHOUT_CLASSIFICATION	1.483022770536975E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999997034164871	WITHOUT_CLASSIFICATION	2.965835129359447E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999991094671656	WITHOUT_CLASSIFICATION	8.905328344199897E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999991094671656	WITHOUT_CLASSIFICATION	8.905328344199897E-7	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9994907442771883	WITHOUT_CLASSIFICATION	5.092557228116947E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999991179476116	WITHOUT_CLASSIFICATION	8.82052388339775E-7	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999923614719785	WITHOUT_CLASSIFICATION	7.638528021632982E-6	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.999995665113759	WITHOUT_CLASSIFICATION	4.334886240989106E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999999606282888	WITHOUT_CLASSIFICATION	3.937171132272171E-8	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999894788639986	WITHOUT_CLASSIFICATION	1.0521136001491883E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999992445111228	WITHOUT_CLASSIFICATION	7.554888773287805E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998944214101	WITHOUT_CLASSIFICATION	1.0557858990264966E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998944214101	WITHOUT_CLASSIFICATION	1.0557858990264966E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999598345443169	WITHOUT_CLASSIFICATION	4.016545568300372E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999598345443169	WITHOUT_CLASSIFICATION	4.016545568300372E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999997315149045	WITHOUT_CLASSIFICATION	2.684850955767333E-7	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999997315149045	WITHOUT_CLASSIFICATION	2.684850955767333E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998388161428	WITHOUT_CLASSIFICATION	1.611838570511603E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998388161428	WITHOUT_CLASSIFICATION	1.611838570511603E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999991094671656	WITHOUT_CLASSIFICATION	8.905328344199897E-7	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999992445111228	WITHOUT_CLASSIFICATION	7.554888773287805E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998944214101	WITHOUT_CLASSIFICATION	1.0557858990264966E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.999998944214101	WITHOUT_CLASSIFICATION	1.0557858990264966E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999598345443169	WITHOUT_CLASSIFICATION	4.016545568300372E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999997315149045	WITHOUT_CLASSIFICATION	2.684850955767333E-7	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999997315149045	WITHOUT_CLASSIFICATION	2.684850955767333E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998388161428	WITHOUT_CLASSIFICATION	1.611838570511603E-7	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999937311073402	WITHOUT_CLASSIFICATION	6.268892659642119E-6	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9995680915600874	WITHOUT_CLASSIFICATION	4.3190843991256287E-4	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9990732186331738	WITHOUT_CLASSIFICATION	9.26781366826255E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999982546657377	WITHOUT_CLASSIFICATION	1.7453342623803447E-6	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999928133587594	WITHOUT_CLASSIFICATION	7.186641240609169E-6	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999681321117946	WITHOUT_CLASSIFICATION	3.1867888205349234E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9996931834839508	WITHOUT_CLASSIFICATION	3.0681651604933376E-4	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9904673390066482	WITHOUT_CLASSIFICATION	0.009532660993351772	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9987107125330013	WITHOUT_CLASSIFICATION	0.0012892874669986564	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999974529976	WITHOUT_CLASSIFICATION	2.54700238412557E-9	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999994628608627	WITHOUT_CLASSIFICATION	5.371391372356391E-7	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997751924038	WITHOUT_CLASSIFICATION	2.248075962905542E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999816156021537	WITHOUT_CLASSIFICATION	1.8384397846353262E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999681321117946	WITHOUT_CLASSIFICATION	3.1867888205349234E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998647779527664	WITHOUT_CLASSIFICATION	1.3522204723368617E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998647779527664	WITHOUT_CLASSIFICATION	1.3522204723368617E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999881827477137	WITHOUT_CLASSIFICATION	1.1817252286253634E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997787153317	WITHOUT_CLASSIFICATION	2.212846682332908E-7	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997787153317	WITHOUT_CLASSIFICATION	2.212846682332908E-7	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999798456314634	WITHOUT_CLASSIFICATION	2.0154368536619757E-5	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9996105457285531	WITHOUT_CLASSIFICATION	3.894542714469537E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999882251971852	WITHOUT_CLASSIFICATION	1.1774802814880181E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999390826346997	WITHOUT_CLASSIFICATION	6.091736530038966E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999390826346997	WITHOUT_CLASSIFICATION	6.091736530038966E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998759019753	WITHOUT_CLASSIFICATION	1.240980246631065E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999981405131432	WITHOUT_CLASSIFICATION	1.8594868568735685E-6	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999981405131432	WITHOUT_CLASSIFICATION	1.8594868568735685E-6	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998563228404521	WITHOUT_CLASSIFICATION	1.4367715954785774E-4	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999972359713254	WITHOUT_CLASSIFICATION	2.7640286746563952E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999931024966783	WITHOUT_CLASSIFICATION	6.897503321634019E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999991334638308	WITHOUT_CLASSIFICATION	8.665361691862447E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999942024925351	WITHOUT_CLASSIFICATION	5.797507464939493E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999976611350982	WITHOUT_CLASSIFICATION	2.338864901826385E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999775696930473	WITHOUT_CLASSIFICATION	2.2430306952652542E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999989326650967	WITHOUT_CLASSIFICATION	1.0673349033786835E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9927008264170833	WITHOUT_CLASSIFICATION	0.007299173582916726	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999929626468514	WITHOUT_CLASSIFICATION	7.0373531485060815E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999957883534044	WITHOUT_CLASSIFICATION	4.211646595590612E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999931820171053	WITHOUT_CLASSIFICATION	6.8179828947560385E-6	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999983914931835	WITHOUT_CLASSIFICATION	1.6085068164366257E-6	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999999398111692	WITHOUT_CLASSIFICATION	6.018883086817338E-8	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9971212210718104	WITHOUT_CLASSIFICATION	0.002878778928189563	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999931820171053	WITHOUT_CLASSIFICATION	6.8179828947560385E-6	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999728772577997	WITHOUT_CLASSIFICATION	2.712274220028275E-5	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999984913530312	WITHOUT_CLASSIFICATION	1.508646968814264E-6	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999946090487537	WITHOUT_CLASSIFICATION	5.390951246318842E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999982669635991	WITHOUT_CLASSIFICATION	1.7330364010574934E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999970502739991	WITHOUT_CLASSIFICATION	2.949726000840424E-6	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999965036917202	WITHOUT_CLASSIFICATION	3.496308279777583E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999939542997601	WITHOUT_CLASSIFICATION	6.045700239826476E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999974266444823	WITHOUT_CLASSIFICATION	2.573355517798484E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999984542588636	WITHOUT_CLASSIFICATION	1.5457411364528471E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999921856645152	WITHOUT_CLASSIFICATION	7.81433548482643E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999992383228361	WITHOUT_CLASSIFICATION	7.616771639758369E-7	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999429270418	WITHOUT_CLASSIFICATION	5.70729582002718E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999923612806759	WITHOUT_CLASSIFICATION	7.638719324038E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999775696930473	WITHOUT_CLASSIFICATION	2.2430306952652542E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999984542588636	WITHOUT_CLASSIFICATION	1.5457411364528471E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999992383228361	WITHOUT_CLASSIFICATION	7.616771639758369E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999923612806759	WITHOUT_CLASSIFICATION	7.638719324038E-6	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999984409016764	WITHOUT_CLASSIFICATION	1.559098323489608E-6	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999938001643657	WITHOUT_CLASSIFICATION	6.199835634366678E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999663501908	WITHOUT_CLASSIFICATION	3.3649809199240803E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999971311796355	WITHOUT_CLASSIFICATION	2.868820364583119E-6	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999986749526557	WITHOUT_CLASSIFICATION	1.325047344288717E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999901588510834	WITHOUT_CLASSIFICATION	9.841148916610013E-6	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9997672103935183	WITHOUT_CLASSIFICATION	2.327896064815467E-4	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9962614599186337	WITHOUT_CLASSIFICATION	0.0037385400813662816	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999928548292524	WITHOUT_CLASSIFICATION	7.145170747607455E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999970744513	WITHOUT_CLASSIFICATION	2.925548757882477E-9	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999984019629163	WITHOUT_CLASSIFICATION	1.5980370835746224E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999961433646081	WITHOUT_CLASSIFICATION	3.856635392024834E-6	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999940529779	WITHOUT_CLASSIFICATION	5.947021993013634E-9	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999992128483615	WITHOUT_CLASSIFICATION	7.871516386247399E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999972752015064	WITHOUT_CLASSIFICATION	2.724798493608569E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999954533943719	WITHOUT_CLASSIFICATION	4.546605628069214E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999996047201483	WITHOUT_CLASSIFICATION	3.9527985170075895E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999985683570254	WITHOUT_CLASSIFICATION	1.4316429746500567E-6	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999974350132725	WITHOUT_CLASSIFICATION	2.564986727429067E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999984542588636	WITHOUT_CLASSIFICATION	1.5457411364528471E-6	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999665747294786	WITHOUT_CLASSIFICATION	3.3425270521463574E-5	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9991797571896689	WITHOUT_CLASSIFICATION	8.20242810331132E-4	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999857033609749	WITHOUT_CLASSIFICATION	1.4296639025104657E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998847304253458	WITHOUT_CLASSIFICATION	1.1526957465428698E-4	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999987260324059	WITHOUT_CLASSIFICATION	1.2739675941217067E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.999984043211258	WITHOUT_CLASSIFICATION	1.5956788742040716E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999919730275644	WITHOUT_CLASSIFICATION	8.026972435559093E-6	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999998023600327	WITHOUT_CLASSIFICATION	1.976399672976183E-7	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999963326717287	WITHOUT_CLASSIFICATION	3.667328271161222E-6	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999926934363896	WITHOUT_CLASSIFICATION	7.306563610374411E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999907827780913	WITHOUT_CLASSIFICATION	9.217221908675637E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999955273591259	WITHOUT_CLASSIFICATION	4.4726408740705595E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999890301828096	WITHOUT_CLASSIFICATION	1.0969817190395779E-5	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999754423208008	WITHOUT_CLASSIFICATION	2.455767919908967E-5	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999929107639443	WITHOUT_CLASSIFICATION	7.089236055688846E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9997997282570739	WITHOUT_CLASSIFICATION	2.0027174292613047E-4	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.999985556558158	WITHOUT_CLASSIFICATION	1.4443441841995073E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999930600351716	WITHOUT_CLASSIFICATION	6.939964828263427E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999993171052816	WITHOUT_CLASSIFICATION	6.828947185044561E-7	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999912640439238	WITHOUT_CLASSIFICATION	8.735956076228519E-6	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999990222356	WITHOUT_CLASSIFICATION	9.777643768933123E-10	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.999500229426228	WITHOUT_CLASSIFICATION	4.997705737719423E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7404096037565157	WITHOUT_CLASSIFICATION	0.25959039624348434	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9975812686683022	WITHOUT_CLASSIFICATION	0.002418731331697878	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999573376627154	WITHOUT_CLASSIFICATION	4.2662337284651935E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999573376627154	WITHOUT_CLASSIFICATION	4.2662337284651935E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9990977719555294	WITHOUT_CLASSIFICATION	9.02228044470571E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999149552218688	WITHOUT_CLASSIFICATION	8.504477813116879E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999623115963268	WITHOUT_CLASSIFICATION	3.768840367324188E-5	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999904621484768	WITHOUT_CLASSIFICATION	9.537851523143274E-6	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999894955772217	WITHOUT_CLASSIFICATION	1.0504422778232433E-5	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999757135516099	WITHOUT_CLASSIFICATION	2.4286448390151768E-5	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999379603912858	WITHOUT_CLASSIFICATION	6.203960871420611E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9998833445138534	WITHOUT_CLASSIFICATION	1.1665548614654847E-4	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999916531538039	WITHOUT_CLASSIFICATION	8.346846196177244E-6	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999940404349489	WITHOUT_CLASSIFICATION	5.959565051184588E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9996975164232198	WITHOUT_CLASSIFICATION	3.0248357678023315E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9994945960549094	WITHOUT_CLASSIFICATION	5.054039450905701E-4	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9998786129117558	WITHOUT_CLASSIFICATION	1.2138708824417218E-4	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.999996903968765	WITHOUT_CLASSIFICATION	3.096031235025025E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958494810699	WITHOUT_CLASSIFICATION	4.150518930086485E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997442509565595	WITHOUT_CLASSIFICATION	2.5574904344048986E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9997442562127977	WITHOUT_CLASSIFICATION	2.557437872022007E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999544703842555	WITHOUT_CLASSIFICATION	4.5529615744501357E-4	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.7237648457712418	WITHOUT_CLASSIFICATION	0.2762351542287582	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9999182504353955	WITHOUT_CLASSIFICATION	8.174956460456572E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999932744347844	WITHOUT_CLASSIFICATION	6.725565215621934E-6	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999932744347844	WITHOUT_CLASSIFICATION	6.725565215621934E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.999997839020651	WITHOUT_CLASSIFICATION	2.160979348963474E-6	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.999997839020651	WITHOUT_CLASSIFICATION	2.160979348963474E-6	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7404096037565157	WITHOUT_CLASSIFICATION	0.25959039624348434	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999907982996855	WITHOUT_CLASSIFICATION	9.201700314364701E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9899210577526247	WITHOUT_CLASSIFICATION	0.010078942247375282	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999666546868157	WITHOUT_CLASSIFICATION	3.33453131842579E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999670114800369	WITHOUT_CLASSIFICATION	3.298851996302808E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9899210577526247	WITHOUT_CLASSIFICATION	0.010078942247375282	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999666546868157	WITHOUT_CLASSIFICATION	3.33453131842579E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999893656256986	WITHOUT_CLASSIFICATION	1.0634374301347057E-5	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.994856486056782	WITHOUT_CLASSIFICATION	0.005143513943217958	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999630142244433	WITHOUT_CLASSIFICATION	3.698577555668366E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999739530674957	WITHOUT_CLASSIFICATION	2.6046932504207076E-5	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9999057608977631	WITHOUT_CLASSIFICATION	9.423910223687767E-5	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.672713368333237	WITHOUT_CLASSIFICATION	0.32728663166676303	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999976249567926	WITHOUT_CLASSIFICATION	2.375043207397794E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999836564793476	WITHOUT_CLASSIFICATION	1.634352065242346E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9999513795380748	WITHOUT_CLASSIFICATION	4.862046192515431E-5	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999973438899	WITHOUT_CLASSIFICATION	2.6561100277097695E-9	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999839810590464	WITHOUT_CLASSIFICATION	1.6018940953614493E-5	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999653861021324	WITHOUT_CLASSIFICATION	3.461389786761615E-5	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.999999940308108	WITHOUT_CLASSIFICATION	5.969189196431426E-8	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999990171523176	WITHOUT_CLASSIFICATION	9.828476823236237E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999670114800369	WITHOUT_CLASSIFICATION	3.298851996302808E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999981594374556	WITHOUT_CLASSIFICATION	1.8405625443962643E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999970538030417	WITHOUT_CLASSIFICATION	2.9461969581949625E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999970538030417	WITHOUT_CLASSIFICATION	2.9461969581949625E-6	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999952699350846	WITHOUT_CLASSIFICATION	4.730064915460954E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999893656256986	WITHOUT_CLASSIFICATION	1.0634374301347057E-5	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997047675110822	WITHOUT_CLASSIFICATION	2.952324889178581E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9966724700374795	DESIGN	0.003327529962520534	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9621571896414643	WITHOUT_CLASSIFICATION	0.03784281035853558	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999850142102359	WITHOUT_CLASSIFICATION	1.4985789764145857E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7711979555161482	WITHOUT_CLASSIFICATION	0.22880204448385164	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999893656256986	WITHOUT_CLASSIFICATION	1.0634374301347057E-5	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999850142102359	WITHOUT_CLASSIFICATION	1.4985789764145857E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7711979555161482	WITHOUT_CLASSIFICATION	0.22880204448385164	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9429028059992128	WITHOUT_CLASSIFICATION	0.0570971940007872	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999411055858	WITHOUT_CLASSIFICATION	5.8894414362592634E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999954727408921	WITHOUT_CLASSIFICATION	4.527259107890254E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999893656256986	WITHOUT_CLASSIFICATION	1.0634374301347057E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999893656256986	WITHOUT_CLASSIFICATION	1.0634374301347057E-5	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999938912142661	WITHOUT_CLASSIFICATION	6.108785733966222E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999808557163142	WITHOUT_CLASSIFICATION	1.9144283685766164E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999798590952599	WITHOUT_CLASSIFICATION	2.014090474014662E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999525397313153	WITHOUT_CLASSIFICATION	4.746026868484267E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999977040047827	WITHOUT_CLASSIFICATION	2.295995217340884E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999999170404582	WITHOUT_CLASSIFICATION	8.295954180817088E-7	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999092850121	WITHOUT_CLASSIFICATION	9.071498784577773E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999635908667447	WITHOUT_CLASSIFICATION	3.640913325532717E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9994088020402777	WITHOUT_CLASSIFICATION	5.911979597222611E-4	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999889407013804	WITHOUT_CLASSIFICATION	1.105929861954244E-5	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999524296632113	WITHOUT_CLASSIFICATION	4.7570336788650835E-5	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999713561452533	WITHOUT_CLASSIFICATION	2.864385474669462E-4	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999856328781488	WITHOUT_CLASSIFICATION	1.4367121851108566E-5	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9953336659395922	WITHOUT_CLASSIFICATION	0.004666334060407855	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991455045429	WITHOUT_CLASSIFICATION	8.544954569271276E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999014156212735	WITHOUT_CLASSIFICATION	9.858437872649903E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9990491865611689	WITHOUT_CLASSIFICATION	9.50813438830968E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9934092460682881	WITHOUT_CLASSIFICATION	0.006590753931711934	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9921563273719426	WITHOUT_CLASSIFICATION	0.007843672628057435	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999803308755358	WITHOUT_CLASSIFICATION	1.9669124464233988E-5	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999681657911288	WITHOUT_CLASSIFICATION	3.183420887118644E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9964263558855022	WITHOUT_CLASSIFICATION	0.003573644114497732	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9964263558855022	WITHOUT_CLASSIFICATION	0.003573644114497732	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9990491865611689	WITHOUT_CLASSIFICATION	9.50813438830968E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999998786809255	WITHOUT_CLASSIFICATION	1.2131907439150065E-7	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999509281985325	WITHOUT_CLASSIFICATION	4.907180146760463E-5	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9573985720830269	DESIGN	0.04260142791697297	WITHOUT_CLASSIFICATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999978070895041	WITHOUT_CLASSIFICATION	2.1929104959392425E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999798674416097	WITHOUT_CLASSIFICATION	2.0132558390279097E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999985546548794	WITHOUT_CLASSIFICATION	1.445345120674958E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9997796154497219	WITHOUT_CLASSIFICATION	2.2038455027798129E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9973072747877921	WITHOUT_CLASSIFICATION	0.0026927252122078004	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998103312	WITHOUT_CLASSIFICATION	1.8966878299398115E-10	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999861958533139	WITHOUT_CLASSIFICATION	1.3804146686151825E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998255896526	WITHOUT_CLASSIFICATION	1.7441034740125586E-6	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999485536047124	WITHOUT_CLASSIFICATION	5.144639528766886E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9998723915345097	WITHOUT_CLASSIFICATION	1.2760846549019603E-4	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999977734956879	WITHOUT_CLASSIFICATION	2.2265043120778764E-6	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996272761615	WITHOUT_CLASSIFICATION	3.7272383839811895E-7	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9986578612613413	WITHOUT_CLASSIFICATION	0.001342138738658673	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999807626932136	WITHOUT_CLASSIFICATION	1.9237306786381335E-5	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.999937813803526	WITHOUT_CLASSIFICATION	6.218619647401497E-5	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926193141796	WITHOUT_CLASSIFICATION	7.380685820335085E-6	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9982958820764388	WITHOUT_CLASSIFICATION	0.0017041179235612071	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9978619864553724	WITHOUT_CLASSIFICATION	0.0021380135446275625	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.8752347071529366	WITHOUT_CLASSIFICATION	0.1247652928470634	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999276797702827	WITHOUT_CLASSIFICATION	7.232022971722819E-5	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981042665339394	WITHOUT_CLASSIFICATION	0.0018957334660605874	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999596052843276	WITHOUT_CLASSIFICATION	4.0394715672436705E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830755562362	WITHOUT_CLASSIFICATION	1.6924443763800364E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998054135494778	WITHOUT_CLASSIFICATION	1.9458645052226585E-4	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996926286566085	WITHOUT_CLASSIFICATION	3.0737134339157805E-4	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998604891922172	WITHOUT_CLASSIFICATION	1.3951080778280375E-4	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999704673323614	WITHOUT_CLASSIFICATION	2.9532667638605602E-5	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9996865952027975	WITHOUT_CLASSIFICATION	3.1340479720261104E-4	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.958005530331174	WITHOUT_CLASSIFICATION	0.041994469668826036	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963788908579	WITHOUT_CLASSIFICATION	3.621109142049463E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996384815524335	WITHOUT_CLASSIFICATION	3.6151844756651024E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998972968852121	WITHOUT_CLASSIFICATION	1.0270311478790493E-4	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975043202175	WITHOUT_CLASSIFICATION	2.495679782519072E-6	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999097246188997	WITHOUT_CLASSIFICATION	9.027538110031194E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999803958726327	WITHOUT_CLASSIFICATION	1.9604127367300108E-4	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999955522299278	WITHOUT_CLASSIFICATION	4.44777007219886E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708357812963	WITHOUT_CLASSIFICATION	2.9164218703717802E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999861135786542	WITHOUT_CLASSIFICATION	1.3886421345897589E-5	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998527374586696	WITHOUT_CLASSIFICATION	1.4726254133026919E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9507910040589822	WITHOUT_CLASSIFICATION	0.04920899594101782	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9958905493763669	WITHOUT_CLASSIFICATION	0.0041094506236331345	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9996014950931628	WITHOUT_CLASSIFICATION	3.985049068372644E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999920317088721	WITHOUT_CLASSIFICATION	7.968291127866622E-6	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999757057558657	WITHOUT_CLASSIFICATION	2.429424413429909E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999990058809058	WITHOUT_CLASSIFICATION	9.941190941582515E-7	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.5619861174002339	DESIGN	0.4380138825997662	WITHOUT_CLASSIFICATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999987741971333	WITHOUT_CLASSIFICATION	1.225802866579457E-6	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999988826324292	WITHOUT_CLASSIFICATION	1.1173675707844514E-6	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999975186583828	WITHOUT_CLASSIFICATION	2.4813416172158582E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999895818940078	WITHOUT_CLASSIFICATION	1.0418105992257478E-5	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999995318251461	WITHOUT_CLASSIFICATION	4.681748538451502E-7	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9998166445634666	WITHOUT_CLASSIFICATION	1.8335543653344216E-4	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9999845837457509	WITHOUT_CLASSIFICATION	1.5416254248986454E-5	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9997745312307117	WITHOUT_CLASSIFICATION	2.2546876928843007E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999806217173328	WITHOUT_CLASSIFICATION	1.937828266721737E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999310827823709	WITHOUT_CLASSIFICATION	6.891721762909459E-5	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999740755171027	WITHOUT_CLASSIFICATION	2.5924482897317017E-5	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992856888061	WITHOUT_CLASSIFICATION	7.143111938932778E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999251787484905	WITHOUT_CLASSIFICATION	7.482125150948313E-5	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999212331216144	WITHOUT_CLASSIFICATION	7.876687838554075E-5	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9984861754343974	WITHOUT_CLASSIFICATION	0.0015138245656025713	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999998499574594	WITHOUT_CLASSIFICATION	1.5004254055777325E-7	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999986382896868	WITHOUT_CLASSIFICATION	1.3617103132070825E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999939784938834	WITHOUT_CLASSIFICATION	6.02150611654842E-6	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984992120965	WITHOUT_CLASSIFICATION	1.5007879035305054E-6	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999846701170281	WITHOUT_CLASSIFICATION	1.532988297191614E-5	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9989494667379528	WITHOUT_CLASSIFICATION	0.0010505332620472567	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999940915349324	WITHOUT_CLASSIFICATION	5.908465067647148E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999985677916627	WITHOUT_CLASSIFICATION	1.4322083372924374E-6	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999998969206737	WITHOUT_CLASSIFICATION	1.0307932629667361E-6	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999585001303387	WITHOUT_CLASSIFICATION	4.149986966134511E-5	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9987878588516831	WITHOUT_CLASSIFICATION	0.001212141148316907	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.999651681573852	WITHOUT_CLASSIFICATION	3.483184261481044E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999920317088721	WITHOUT_CLASSIFICATION	7.968291127866622E-6	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9990879287578807	WITHOUT_CLASSIFICATION	9.120712421193761E-4	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999983408717059	WITHOUT_CLASSIFICATION	1.6591282940129798E-6	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999991766089132	WITHOUT_CLASSIFICATION	8.233910868674975E-7	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9990847450251465	WITHOUT_CLASSIFICATION	9.152549748534795E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999970285989196	WITHOUT_CLASSIFICATION	2.971401080456037E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.999987730073986	WITHOUT_CLASSIFICATION	1.2269926014081569E-5	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9982681565224883	WITHOUT_CLASSIFICATION	0.0017318434775117403	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9796526118754674	WITHOUT_CLASSIFICATION	0.02034738812453265	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9995195997874324	WITHOUT_CLASSIFICATION	4.804002125675591E-4	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999986476028185	WITHOUT_CLASSIFICATION	1.3523971815463435E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999911596980513	WITHOUT_CLASSIFICATION	8.840301948784342E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999993149895194	WITHOUT_CLASSIFICATION	6.850104806138632E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999995343046838	WITHOUT_CLASSIFICATION	4.656953161161052E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9971315694247141	WITHOUT_CLASSIFICATION	0.002868430575285755	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999988603799985	WITHOUT_CLASSIFICATION	1.1396200015106172E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999351772870807	WITHOUT_CLASSIFICATION	6.48227129193004E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9931647334149336	WITHOUT_CLASSIFICATION	0.006835266585066477	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.998703825159996	WITHOUT_CLASSIFICATION	0.0012961748400039839	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999996220706225	WITHOUT_CLASSIFICATION	3.779293774183949E-7	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999961276846483	WITHOUT_CLASSIFICATION	3.872315351764954E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999788880328065	WITHOUT_CLASSIFICATION	2.1111967193369982E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9948437478024404	WITHOUT_CLASSIFICATION	0.005156252197559571	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9995529486976836	WITHOUT_CLASSIFICATION	4.4705130231635377E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999689875563752	WITHOUT_CLASSIFICATION	3.101244362480633E-5	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9953969978782826	WITHOUT_CLASSIFICATION	0.0046030021217174566	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999998961981859	WITHOUT_CLASSIFICATION	1.0380181410549366E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9973883132502047	WITHOUT_CLASSIFICATION	0.002611686749795273	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994935749227	WITHOUT_CLASSIFICATION	5.064250772504883E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999991638680704	WITHOUT_CLASSIFICATION	8.361319295528762E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996422011876672	WITHOUT_CLASSIFICATION	3.577988123328247E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999920317088721	WITHOUT_CLASSIFICATION	7.968291127866622E-6	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9993124924737219	WITHOUT_CLASSIFICATION	6.875075262782103E-4	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999943191164478	WITHOUT_CLASSIFICATION	5.680883552133537E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991344998353966	WITHOUT_CLASSIFICATION	8.655001646033178E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999920317088721	WITHOUT_CLASSIFICATION	7.968291127866622E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999978447005542	WITHOUT_CLASSIFICATION	2.155299445708674E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999788880328065	WITHOUT_CLASSIFICATION	2.1111967193369982E-5	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.995595890171269	WITHOUT_CLASSIFICATION	0.0044041098287310185	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9983747419428036	WITHOUT_CLASSIFICATION	0.001625258057196351	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.801830464482499	DESIGN	0.19816953551750105	WITHOUT_CLASSIFICATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999986476028185	WITHOUT_CLASSIFICATION	1.3523971815463435E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999911596980513	WITHOUT_CLASSIFICATION	8.840301948784342E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.999993149895194	WITHOUT_CLASSIFICATION	6.850104806138632E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999421403701	WITHOUT_CLASSIFICATION	5.7859629843027614E-8	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999453714866476	WITHOUT_CLASSIFICATION	5.4628513352439245E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999800689528437	WITHOUT_CLASSIFICATION	1.993104715635088E-5	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999996452675123	WITHOUT_CLASSIFICATION	3.5473248772170915E-7	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999998403989581	WITHOUT_CLASSIFICATION	1.5960104183366927E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999920317088721	WITHOUT_CLASSIFICATION	7.968291127866622E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999995343046838	WITHOUT_CLASSIFICATION	4.656953161161052E-7	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9971315694247141	WITHOUT_CLASSIFICATION	0.002868430575285755	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999991645851905	WITHOUT_CLASSIFICATION	8.354148095001967E-6	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992872921439	WITHOUT_CLASSIFICATION	7.127078560971294E-6	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999070565299	WITHOUT_CLASSIFICATION	9.294347023512962E-8	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999962965383548	WITHOUT_CLASSIFICATION	3.703461645395148E-6	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999163500818427	WITHOUT_CLASSIFICATION	8.364991815728092E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999661359710547	WITHOUT_CLASSIFICATION	3.3864028945384324E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999708357812963	WITHOUT_CLASSIFICATION	2.9164218703717802E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9986150675367235	WITHOUT_CLASSIFICATION	0.0013849324632766165	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9971839690780355	WITHOUT_CLASSIFICATION	0.0028160309219645067	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998975427887288	WITHOUT_CLASSIFICATION	1.0245721127126914E-4	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999895705704588	WITHOUT_CLASSIFICATION	1.0429429541207146E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999595593002	WITHOUT_CLASSIFICATION	4.044069975275891E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998054135494778	WITHOUT_CLASSIFICATION	1.9458645052226585E-4	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996926286566085	WITHOUT_CLASSIFICATION	3.0737134339157805E-4	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996384815524335	WITHOUT_CLASSIFICATION	3.6151844756651024E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999595593002	WITHOUT_CLASSIFICATION	4.044069975275891E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9987825425875819	WITHOUT_CLASSIFICATION	0.0012174574124179654	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999806448557537	WITHOUT_CLASSIFICATION	1.9355144246357023E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998516208074311	WITHOUT_CLASSIFICATION	1.4837919256886038E-4	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998811573234365	WITHOUT_CLASSIFICATION	1.18842676563497E-4	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9837355277073009	WITHOUT_CLASSIFICATION	0.016264472292699093	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999475953196905	WITHOUT_CLASSIFICATION	5.2404680309631364E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998972968852121	WITHOUT_CLASSIFICATION	1.0270311478790493E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999803958726327	WITHOUT_CLASSIFICATION	1.9604127367300108E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999985677916627	WITHOUT_CLASSIFICATION	1.4322083372924374E-6	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9461565634038124	WITHOUT_CLASSIFICATION	0.05384343659618748	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9991418178203229	WITHOUT_CLASSIFICATION	8.581821796770525E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999985650136447	WITHOUT_CLASSIFICATION	1.4349863553453993E-6	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999901931547264	WITHOUT_CLASSIFICATION	9.80684527358925E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999748826458	WITHOUT_CLASSIFICATION	2.5117354107639266E-8	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999969599333505	WITHOUT_CLASSIFICATION	3.040066649557307E-6	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998327787692376	WITHOUT_CLASSIFICATION	1.6722123076251522E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998103312	WITHOUT_CLASSIFICATION	1.8966878299398115E-10	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.999996582125812	WITHOUT_CLASSIFICATION	3.417874187999171E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999957255345171	WITHOUT_CLASSIFICATION	4.274465482860395E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999399817510768	WITHOUT_CLASSIFICATION	6.0018248923176105E-5	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.999952005170608	WITHOUT_CLASSIFICATION	4.7994829392042236E-5	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999447300684474	WITHOUT_CLASSIFICATION	5.5269931552636844E-5	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9994743565931712	WITHOUT_CLASSIFICATION	5.25643406828769E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961801393897	WITHOUT_CLASSIFICATION	3.819860610325656E-6	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927183306531	WITHOUT_CLASSIFICATION	7.281669347048548E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999652434367	WITHOUT_CLASSIFICATION	3.475656330248259E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9998885873912996	WITHOUT_CLASSIFICATION	1.1141260870041736E-4	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.999849969586069	WITHOUT_CLASSIFICATION	1.5003041393103439E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999994569786896	WITHOUT_CLASSIFICATION	5.430213103817971E-7	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999913542375	WITHOUT_CLASSIFICATION	8.645762496054393E-8	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999078750487	WITHOUT_CLASSIFICATION	9.212495124759457E-8	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999787053103	WITHOUT_CLASSIFICATION	2.1294689641219042E-8	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999958176103704	WITHOUT_CLASSIFICATION	4.18238962960441E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9996269514688797	WITHOUT_CLASSIFICATION	3.7304853112030053E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998901007765	WITHOUT_CLASSIFICATION	1.0989922345657809E-7	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9992019540156223	WITHOUT_CLASSIFICATION	7.980459843776596E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999494833176443	WITHOUT_CLASSIFICATION	5.05166823556489E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999889933810036	WITHOUT_CLASSIFICATION	1.100661899642503E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9988130468097831	WITHOUT_CLASSIFICATION	0.0011869531902168654	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999952190114816	WITHOUT_CLASSIFICATION	4.7809885184908265E-6	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999976786321579	WITHOUT_CLASSIFICATION	2.3213678421576052E-6	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999986785720589	WITHOUT_CLASSIFICATION	1.3214279410701976E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999489609569506	WITHOUT_CLASSIFICATION	5.103904304925402E-5	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999271886551977	WITHOUT_CLASSIFICATION	7.281134480224458E-5	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999993879808254	WITHOUT_CLASSIFICATION	6.120191745322255E-7	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999998049701389	WITHOUT_CLASSIFICATION	1.9502986101145783E-7	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9955095766270815	WITHOUT_CLASSIFICATION	0.004490423372918445	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999893314392055	WITHOUT_CLASSIFICATION	1.0668560794483244E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997681314170895	WITHOUT_CLASSIFICATION	2.3186858291038544E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996739898868928	WITHOUT_CLASSIFICATION	3.2601011310714545E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999991641306012	WITHOUT_CLASSIFICATION	8.358693987898296E-7	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999957361015435	WITHOUT_CLASSIFICATION	4.263898456511951E-6	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999909092027094	WITHOUT_CLASSIFICATION	9.090797290596975E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999991556027328	WITHOUT_CLASSIFICATION	8.443972671337442E-7	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998695033545022	WITHOUT_CLASSIFICATION	1.3049664549776808E-4	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999999912977895	WITHOUT_CLASSIFICATION	8.702210494693288E-8	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999908847718177	WITHOUT_CLASSIFICATION	9.115228182326119E-6	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.992306321042459	WITHOUT_CLASSIFICATION	0.0076936789575409855	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999982486133049	WITHOUT_CLASSIFICATION	1.7513866950973392E-5	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9532756895042611	WITHOUT_CLASSIFICATION	0.04672431049573888	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999075813616	WITHOUT_CLASSIFICATION	9.241863835319172E-8	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9978232670671014	WITHOUT_CLASSIFICATION	0.0021767329328985516	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9998898007689724	WITHOUT_CLASSIFICATION	1.1019923102764789E-4	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999986679299938	WITHOUT_CLASSIFICATION	1.3320700061450296E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999997946263367	WITHOUT_CLASSIFICATION	2.05373663252456E-7	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999999119764555	WITHOUT_CLASSIFICATION	8.802354450638151E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999988452226369	WITHOUT_CLASSIFICATION	1.1547773630906693E-6	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999978918375837	WITHOUT_CLASSIFICATION	2.1081624162561407E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999915728081787	WITHOUT_CLASSIFICATION	8.427191821264162E-6	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999984271850976	WITHOUT_CLASSIFICATION	1.5728149025137732E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999997402702615	WITHOUT_CLASSIFICATION	2.5972973852408916E-7	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999998267206698	WITHOUT_CLASSIFICATION	1.7327933026717013E-7	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9990460435198284	WITHOUT_CLASSIFICATION	9.539564801714967E-4	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999466777346394	WITHOUT_CLASSIFICATION	5.332226536049164E-5	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999915279475347	WITHOUT_CLASSIFICATION	8.472052465347345E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999788778165736	WITHOUT_CLASSIFICATION	2.112218342643139E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999978512710248	WITHOUT_CLASSIFICATION	2.1487289751953563E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.999928613237283	WITHOUT_CLASSIFICATION	7.138676271702446E-5	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999866125542344	WITHOUT_CLASSIFICATION	1.3387445765656435E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999884030397965	WITHOUT_CLASSIFICATION	1.1596960203505773E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9466200567254456	WITHOUT_CLASSIFICATION	0.05337994327455446	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997492338061968	WITHOUT_CLASSIFICATION	2.507661938031954E-4	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9761218952715268	WITHOUT_CLASSIFICATION	0.023878104728473182	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999994344775865	WITHOUT_CLASSIFICATION	5.655224133778679E-7	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.992136352695184	WITHOUT_CLASSIFICATION	0.007863647304816061	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9988509898008134	WITHOUT_CLASSIFICATION	0.0011490101991865702	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9973080247288282	WITHOUT_CLASSIFICATION	0.0026919752711716876	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9971163499528276	WITHOUT_CLASSIFICATION	0.0028836500471724346	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998490479411111	WITHOUT_CLASSIFICATION	1.509520588889556E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999983781302192	WITHOUT_CLASSIFICATION	1.621869780885519E-6	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999299571138	WITHOUT_CLASSIFICATION	7.004288617783316E-8	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999950363893848	WITHOUT_CLASSIFICATION	4.963610615178365E-6	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9999888493150748	WITHOUT_CLASSIFICATION	1.1150684925113069E-5	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9994177966372944	WITHOUT_CLASSIFICATION	5.822033627057074E-4	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.999562913769476	WITHOUT_CLASSIFICATION	4.370862305239545E-4	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999615101121	WITHOUT_CLASSIFICATION	3.8489887874965106E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999732208363397	WITHOUT_CLASSIFICATION	2.6779163660307707E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999126223192435	WITHOUT_CLASSIFICATION	8.737768075651369E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999869260748152	WITHOUT_CLASSIFICATION	1.307392518481568E-4	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9950044636219588	WITHOUT_CLASSIFICATION	0.004995536378041102	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999988747767241	WITHOUT_CLASSIFICATION	1.1252232758729448E-6	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999448511667265	WITHOUT_CLASSIFICATION	5.514883327340314E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996473505518817	WITHOUT_CLASSIFICATION	3.526494481182187E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9989181944773021	WITHOUT_CLASSIFICATION	0.0010818055226978955	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.999776704436512	WITHOUT_CLASSIFICATION	2.2329556348806316E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9993486411784889	WITHOUT_CLASSIFICATION	6.513588215111887E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999995419732227	WITHOUT_CLASSIFICATION	4.5802677733264237E-7	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999923608117614	WITHOUT_CLASSIFICATION	7.639188238592773E-5	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999926935260665	WITHOUT_CLASSIFICATION	7.306473933544493E-6	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999988011332869	WITHOUT_CLASSIFICATION	1.1988667130899536E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.999923608117614	WITHOUT_CLASSIFICATION	7.639188238592773E-5	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999992945293406	WITHOUT_CLASSIFICATION	7.054706594791074E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999958720949471	WITHOUT_CLASSIFICATION	4.12790505287595E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999900090807756	WITHOUT_CLASSIFICATION	9.990919224374925E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9994214185221112	WITHOUT_CLASSIFICATION	5.785814778888527E-4	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999997689419308	WITHOUT_CLASSIFICATION	2.3105806924205985E-7	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999986644386759	WITHOUT_CLASSIFICATION	1.3355613241388078E-6	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996757781457246	WITHOUT_CLASSIFICATION	3.2422185427537296E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999922870263279	WITHOUT_CLASSIFICATION	7.712973672073112E-6	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9983057679786871	WITHOUT_CLASSIFICATION	0.0016942320213129568	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999582177033576	WITHOUT_CLASSIFICATION	4.178229664240145E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999987084148523	WITHOUT_CLASSIFICATION	1.2915851477659804E-6	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999863128605806	WITHOUT_CLASSIFICATION	1.3687139419549305E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9990878924004175	WITHOUT_CLASSIFICATION	9.121075995824859E-4	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.999997508294076	WITHOUT_CLASSIFICATION	2.4917059241072578E-6	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999985888098341	WITHOUT_CLASSIFICATION	1.411190165902116E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9833053823598124	WITHOUT_CLASSIFICATION	0.0166946176401877	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990092546991683	WITHOUT_CLASSIFICATION	9.907453008316846E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990092546991683	WITHOUT_CLASSIFICATION	9.907453008316846E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999823355244	WITHOUT_CLASSIFICATION	1.7664475602533747E-7	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.999987416994732	WITHOUT_CLASSIFICATION	1.2583005268079607E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999987195704363	WITHOUT_CLASSIFICATION	1.2804295637031024E-6	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9995226793678685	WITHOUT_CLASSIFICATION	4.7732063213141274E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999982113629529	WITHOUT_CLASSIFICATION	1.788637047024367E-6	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.833772678077477	DESIGN	0.16622732192252293	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999911483929186	WITHOUT_CLASSIFICATION	8.851607081439385E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999828992807038	WITHOUT_CLASSIFICATION	1.7100719296163907E-5	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999889312714548	WITHOUT_CLASSIFICATION	1.1068728545075684E-5	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9976716621430867	WITHOUT_CLASSIFICATION	0.0023283378569133617	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999800845048846	WITHOUT_CLASSIFICATION	1.991549511539446E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999985979216317	WITHOUT_CLASSIFICATION	1.4020783682425083E-6	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9995235974605441	WITHOUT_CLASSIFICATION	4.7640253945586107E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9996574098305112	WITHOUT_CLASSIFICATION	3.425901694888334E-4	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998601134053022	WITHOUT_CLASSIFICATION	1.39886594697854E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9994743565931712	WITHOUT_CLASSIFICATION	5.25643406828769E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999892370691106	WITHOUT_CLASSIFICATION	1.0762930889388623E-5	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999858575561691	WITHOUT_CLASSIFICATION	1.4142443830914383E-5	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999446435498097	WITHOUT_CLASSIFICATION	5.535645019024319E-5	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999926581944357	WITHOUT_CLASSIFICATION	7.341805564272712E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999999085296727	WITHOUT_CLASSIFICATION	9.147032728011626E-8	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999908647284199	WITHOUT_CLASSIFICATION	9.135271580038565E-6	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999969747199728	WITHOUT_CLASSIFICATION	3.02528002719047E-6	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999997328953579	WITHOUT_CLASSIFICATION	2.671046420022037E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999977904314017	WITHOUT_CLASSIFICATION	2.209568598361567E-6	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999802650913396	WITHOUT_CLASSIFICATION	1.9734908660365414E-5	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999497550093	WITHOUT_CLASSIFICATION	5.024499058490821E-8	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9727523811531539	WITHOUT_CLASSIFICATION	0.0272476188468461	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999504952529515	WITHOUT_CLASSIFICATION	4.950474704838891E-5	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999953700864119	WITHOUT_CLASSIFICATION	4.629913588153195E-6	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999682963646522	WITHOUT_CLASSIFICATION	3.17036353477693E-5	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998551505924236	WITHOUT_CLASSIFICATION	1.4484940757634088E-4	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9994159740858232	WITHOUT_CLASSIFICATION	5.840259141768459E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9990800774818444	WITHOUT_CLASSIFICATION	9.19922518155762E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998560746737706	WITHOUT_CLASSIFICATION	1.439253262294505E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999979237396759	WITHOUT_CLASSIFICATION	2.076260324114969E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999534403607857	WITHOUT_CLASSIFICATION	4.655963921428486E-5	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998239186506769	WITHOUT_CLASSIFICATION	1.76081349323171E-4	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999987181662553	WITHOUT_CLASSIFICATION	1.2818337446286375E-6	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999999489963559	WITHOUT_CLASSIFICATION	5.100364411871811E-8	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999888474097361	WITHOUT_CLASSIFICATION	1.1152590263758731E-5	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999983436326498	WITHOUT_CLASSIFICATION	1.6563673501156484E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999908356123679	WITHOUT_CLASSIFICATION	9.164387632035524E-6	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999713643395557	WITHOUT_CLASSIFICATION	2.8635660444361502E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.999988995250594	WITHOUT_CLASSIFICATION	1.1004749406010697E-5	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999735136143304	WITHOUT_CLASSIFICATION	2.648638566950661E-5	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999368461602969	WITHOUT_CLASSIFICATION	6.315383970317742E-5	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984382269193	WITHOUT_CLASSIFICATION	1.5617730807149322E-6	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953864626542	WITHOUT_CLASSIFICATION	4.6135373459010315E-6	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9995015264035997	WITHOUT_CLASSIFICATION	4.984735964003833E-4	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999929831357811	WITHOUT_CLASSIFICATION	7.0168642188656636E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997309464208	WITHOUT_CLASSIFICATION	2.690535792489566E-7	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9978121705990879	WITHOUT_CLASSIFICATION	0.0021878294009120792	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999737167105472	WITHOUT_CLASSIFICATION	2.6283289452766425E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999807223450705	WITHOUT_CLASSIFICATION	1.927765492949108E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999737167105472	WITHOUT_CLASSIFICATION	2.6283289452766425E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9985128273845914	WITHOUT_CLASSIFICATION	0.001487172615408698	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999951151848943	WITHOUT_CLASSIFICATION	4.884815105810033E-6	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9996835558451019	WITHOUT_CLASSIFICATION	3.164441548981464E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999053736304547	WITHOUT_CLASSIFICATION	9.462636954530289E-5	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999895837968829	WITHOUT_CLASSIFICATION	1.0416203117049764E-5	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999952116322292	WITHOUT_CLASSIFICATION	4.788367770853813E-6	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999790725438765	WITHOUT_CLASSIFICATION	2.0927456123448512E-5	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999424551407745	WITHOUT_CLASSIFICATION	5.754485922536909E-5	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999953665488938	WITHOUT_CLASSIFICATION	4.633451106142331E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999776544233494	WITHOUT_CLASSIFICATION	2.2345576650532558E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999983200023798	WITHOUT_CLASSIFICATION	1.6799976202578022E-6	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9902619424090496	WITHOUT_CLASSIFICATION	0.00973805759095037	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999102200219766	WITHOUT_CLASSIFICATION	8.977997802346405E-5	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9994961893059724	WITHOUT_CLASSIFICATION	5.038106940276238E-4	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9404462362777247	WITHOUT_CLASSIFICATION	0.05955376372227531	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9984239615337824	WITHOUT_CLASSIFICATION	0.00157603846621747	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999986610766957	WITHOUT_CLASSIFICATION	1.338923304299855E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999986610766957	WITHOUT_CLASSIFICATION	1.338923304299855E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9997712742044884	WITHOUT_CLASSIFICATION	2.2872579551166453E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999453101451865	WITHOUT_CLASSIFICATION	5.468985481345948E-5	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999992739297634	WITHOUT_CLASSIFICATION	7.26070236672665E-7	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999629794034107	WITHOUT_CLASSIFICATION	3.702059658924194E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9999961993752072	WITHOUT_CLASSIFICATION	3.8006247928519074E-6	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999342803411306	WITHOUT_CLASSIFICATION	6.571965886937888E-5	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.959510302840583	WITHOUT_CLASSIFICATION	0.04048969715941701	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9996248712656939	WITHOUT_CLASSIFICATION	3.751287343060529E-4	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999987964434456	WITHOUT_CLASSIFICATION	1.2035565543448933E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999640692625	WITHOUT_CLASSIFICATION	3.593073752623481E-8	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999915345669481	WITHOUT_CLASSIFICATION	8.465433051859386E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999923607802108	WITHOUT_CLASSIFICATION	7.639219789277767E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.999996273405242	WITHOUT_CLASSIFICATION	3.726594757946225E-6	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999963055612645	WITHOUT_CLASSIFICATION	3.6944387355570277E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9986122859655497	WITHOUT_CLASSIFICATION	0.0013877140344503494	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999973577097518	WITHOUT_CLASSIFICATION	2.642290248120044E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9995855735576672	WITHOUT_CLASSIFICATION	4.144264423328332E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9667120213534841	WITHOUT_CLASSIFICATION	0.03328797864651583	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999863946074365	WITHOUT_CLASSIFICATION	1.3605392563389692E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999988152816842	WITHOUT_CLASSIFICATION	1.1847183158137428E-6	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999999411586109	WITHOUT_CLASSIFICATION	5.88413890470673E-8	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999872395264403	WITHOUT_CLASSIFICATION	1.2760473559585273E-5	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999455131013782	WITHOUT_CLASSIFICATION	5.448689862167136E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999993906180429	WITHOUT_CLASSIFICATION	6.09381957121177E-7	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999453570443649	WITHOUT_CLASSIFICATION	5.464295563513875E-5	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999968625562234	WITHOUT_CLASSIFICATION	3.137443776532352E-6	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9997304040469921	WITHOUT_CLASSIFICATION	2.6959595300798245E-4	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9844207298403865	WITHOUT_CLASSIFICATION	0.01557927015961342	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999929084421472	WITHOUT_CLASSIFICATION	7.09155785278763E-6	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999565000621974	WITHOUT_CLASSIFICATION	4.3499937802558684E-5	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9989990366299707	WITHOUT_CLASSIFICATION	0.001000963370029262	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999899977780171	WITHOUT_CLASSIFICATION	1.0002221982949524E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998550567980347	WITHOUT_CLASSIFICATION	1.449432019653054E-4	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9998468167806148	WITHOUT_CLASSIFICATION	1.5318321938519682E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9955875624018878	WITHOUT_CLASSIFICATION	0.004412437598112229	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999996743813919	WITHOUT_CLASSIFICATION	3.256186080307597E-7	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999996123755312	WITHOUT_CLASSIFICATION	3.876244687979822E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999918912613309	WITHOUT_CLASSIFICATION	8.108738669154278E-6	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999582033225032	WITHOUT_CLASSIFICATION	4.179667749679189E-5	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999998900659864	WITHOUT_CLASSIFICATION	1.0993401362415645E-7	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.999999977189962	WITHOUT_CLASSIFICATION	2.281003801460677E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961997360929	WITHOUT_CLASSIFICATION	3.8002639071966682E-6	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9999826951344487	WITHOUT_CLASSIFICATION	1.7304865551263227E-5	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9993402248964545	WITHOUT_CLASSIFICATION	6.597751035455177E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999999500893	WITHOUT_CLASSIFICATION	4.991077037877322E-11	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9998307604377954	WITHOUT_CLASSIFICATION	1.69239562204609E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.5890947934623489	DESIGN	0.4109052065376511	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.999999722074077	WITHOUT_CLASSIFICATION	2.779259230447002E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999995324543629	WITHOUT_CLASSIFICATION	4.675456370867778E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9998354306620213	WITHOUT_CLASSIFICATION	1.645693379787685E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998654861884	WITHOUT_CLASSIFICATION	1.3451381159820044E-6	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999913087315591	WITHOUT_CLASSIFICATION	8.691268440929897E-6	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999998645351596	WITHOUT_CLASSIFICATION	1.3546484039078373E-6	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9991556020182919	WITHOUT_CLASSIFICATION	8.443979817081027E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9997632346962688	WITHOUT_CLASSIFICATION	2.3676530373110315E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999978447005542	WITHOUT_CLASSIFICATION	2.155299445708674E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999978447005542	WITHOUT_CLASSIFICATION	2.155299445708674E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.999999095199214	WITHOUT_CLASSIFICATION	9.048007860284202E-7	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999993178417248	WITHOUT_CLASSIFICATION	6.821582751503399E-7	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999121919004988	WITHOUT_CLASSIFICATION	8.780809950110485E-5	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999951244707667	WITHOUT_CLASSIFICATION	4.875529233356114E-6	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999921740278	WITHOUT_CLASSIFICATION	7.825972158170508E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999983971382467	WITHOUT_CLASSIFICATION	1.602861753216538E-6	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999437488142421	WITHOUT_CLASSIFICATION	5.6251185757874476E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999978975533527	WITHOUT_CLASSIFICATION	2.102446647429642E-6	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9997587482537339	WITHOUT_CLASSIFICATION	2.4125174626616773E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999991195557315	WITHOUT_CLASSIFICATION	8.804442685218651E-7	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999970807024859	WITHOUT_CLASSIFICATION	2.9192975140321375E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999192428581273	WITHOUT_CLASSIFICATION	8.07571418727916E-5	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999816231746609	WITHOUT_CLASSIFICATION	1.8376825339093488E-5	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999955727390429	WITHOUT_CLASSIFICATION	4.427260957114279E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.6780509830707269	WITHOUT_CLASSIFICATION	0.3219490169292732	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9994260748130273	WITHOUT_CLASSIFICATION	5.739251869727885E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999982967574934	WITHOUT_CLASSIFICATION	1.703242506573554E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999444707515219	WITHOUT_CLASSIFICATION	5.552924847800446E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999930617066386	WITHOUT_CLASSIFICATION	6.938293361393337E-6	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9989474511047711	WITHOUT_CLASSIFICATION	0.0010525488952288437	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999964994480138	WITHOUT_CLASSIFICATION	3.5005519862548516E-6	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999960668263418	WITHOUT_CLASSIFICATION	3.933173658210279E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99999418096537	WITHOUT_CLASSIFICATION	5.819034630025838E-6	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9604096405688196	WITHOUT_CLASSIFICATION	0.03959035943118035	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9966099894596595	WITHOUT_CLASSIFICATION	0.0033900105403404375	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9287451806232203	DESIGN	0.07125481937677972	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9992817323151506	WITHOUT_CLASSIFICATION	7.182676848493788E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999954152049348	WITHOUT_CLASSIFICATION	4.5847950652095886E-5	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9996131488272738	WITHOUT_CLASSIFICATION	3.8685117272626055E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99999418096537	WITHOUT_CLASSIFICATION	5.819034630025838E-6	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.995251237029491	WITHOUT_CLASSIFICATION	0.004748762970508982	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999996222409568	WITHOUT_CLASSIFICATION	3.7775904311617156E-7	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9998385365920429	WITHOUT_CLASSIFICATION	1.614634079570215E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999549588606342	WITHOUT_CLASSIFICATION	4.504113936580826E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999996058916045	WITHOUT_CLASSIFICATION	3.941083953542028E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.648105286346439	WITHOUT_CLASSIFICATION	0.35189471365356095	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9986888484716728	WITHOUT_CLASSIFICATION	0.0013111515283271023	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999884715805797	WITHOUT_CLASSIFICATION	1.1528419420243814E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999989211947605	WITHOUT_CLASSIFICATION	1.0788052394360354E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999549588606342	WITHOUT_CLASSIFICATION	4.504113936580826E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999982797093725	WITHOUT_CLASSIFICATION	1.7202906274636231E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999716092769649	WITHOUT_CLASSIFICATION	2.8390723035069616E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998939258099102	WITHOUT_CLASSIFICATION	1.0607419008982675E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999941371512664	WITHOUT_CLASSIFICATION	5.8628487336730165E-6	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999290848905994	WITHOUT_CLASSIFICATION	7.09151094005748E-5	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999915345669481	WITHOUT_CLASSIFICATION	8.465433051859386E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999994739863344	WITHOUT_CLASSIFICATION	5.260136656044917E-7	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999113760076621	WITHOUT_CLASSIFICATION	8.862399233779655E-5	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999555858517499	WITHOUT_CLASSIFICATION	4.4414148249996316E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9994662984784336	WITHOUT_CLASSIFICATION	5.337015215663858E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999962142387	WITHOUT_CLASSIFICATION	3.7857613119683644E-8	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999849688215084	WITHOUT_CLASSIFICATION	1.5031178491579863E-5	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999796668094676	WITHOUT_CLASSIFICATION	2.033319053237676E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999930942188734	WITHOUT_CLASSIFICATION	6.905781126562127E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999931717236589	WITHOUT_CLASSIFICATION	6.828276341110918E-6	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999027539390041	WITHOUT_CLASSIFICATION	9.724606099585332E-5	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999911110592811	WITHOUT_CLASSIFICATION	8.888940718951633E-6	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9948015751336803	WITHOUT_CLASSIFICATION	0.0051984248663196845	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999658367800386	WITHOUT_CLASSIFICATION	3.41632199614045E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.999912411840501	WITHOUT_CLASSIFICATION	8.758815949899153E-5	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999809237939	WITHOUT_CLASSIFICATION	1.9076206000175433E-8	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999468293773677	WITHOUT_CLASSIFICATION	5.317062263220113E-5	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999939583073146	WITHOUT_CLASSIFICATION	6.0416926853393076E-6	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999903590163393	WITHOUT_CLASSIFICATION	9.640983660826447E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999276015665908	WITHOUT_CLASSIFICATION	7.239843340923524E-5	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9946722742349493	WITHOUT_CLASSIFICATION	0.005327725765050709	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.999892499197801	WITHOUT_CLASSIFICATION	1.0750080219900476E-4	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999992379787708	WITHOUT_CLASSIFICATION	7.620212292552392E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999932030817296	WITHOUT_CLASSIFICATION	6.796918270395525E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999955444748494	WITHOUT_CLASSIFICATION	4.455525150601789E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999964825962879	WITHOUT_CLASSIFICATION	3.517403712107123E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9999030864933098	WITHOUT_CLASSIFICATION	9.691350669024373E-5	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999954045218777	WITHOUT_CLASSIFICATION	4.595478122327107E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944271822176	WITHOUT_CLASSIFICATION	5.572817782304578E-6	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9916662513316327	WITHOUT_CLASSIFICATION	0.00833374866836738	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9016583347081195	WITHOUT_CLASSIFICATION	0.09834166529188047	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.999981222902589	WITHOUT_CLASSIFICATION	1.877709741112219E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999108438562692	WITHOUT_CLASSIFICATION	8.915614373084587E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998166210978	WITHOUT_CLASSIFICATION	1.833789021682313E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998166210978	WITHOUT_CLASSIFICATION	1.833789021682313E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.999992219558512	WITHOUT_CLASSIFICATION	7.780441487985669E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9963197197851211	WITHOUT_CLASSIFICATION	0.003680280214878854	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999896035159086	WITHOUT_CLASSIFICATION	1.0396484091372314E-5	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999932310987584	WITHOUT_CLASSIFICATION	6.768901241606111E-6	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999996526070448	WITHOUT_CLASSIFICATION	3.47392955161118E-7	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9600915318340004	WITHOUT_CLASSIFICATION	0.0399084681659996	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999879301099407	WITHOUT_CLASSIFICATION	1.206989005929621E-5	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9996958253921284	WITHOUT_CLASSIFICATION	3.0417460787165833E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999972855963937	WITHOUT_CLASSIFICATION	2.71440360637272E-6	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999939437336045	WITHOUT_CLASSIFICATION	6.056266395422532E-6	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999224357638344	WITHOUT_CLASSIFICATION	7.756423616559167E-5	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999837732147255	WITHOUT_CLASSIFICATION	1.6226785274446143E-5	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999965502297765	WITHOUT_CLASSIFICATION	3.449770223533758E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998166210978	WITHOUT_CLASSIFICATION	1.833789021682313E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999885594117143	WITHOUT_CLASSIFICATION	1.1440588285736718E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9982839470152128	WITHOUT_CLASSIFICATION	0.0017160529847871971	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993617962230744	WITHOUT_CLASSIFICATION	6.382037769256928E-4	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999546847246303	WITHOUT_CLASSIFICATION	4.5315275369630536E-5	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999626472185125	WITHOUT_CLASSIFICATION	3.735278148753564E-5	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999885799457945	WITHOUT_CLASSIFICATION	1.1420054205588639E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999861326435815	WITHOUT_CLASSIFICATION	1.3867356418407063E-5	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999995811733279	WITHOUT_CLASSIFICATION	4.1882667204696E-7	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999836911991241	WITHOUT_CLASSIFICATION	1.6308800875873523E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9992346307915321	WITHOUT_CLASSIFICATION	7.653692084678926E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998912663155598	WITHOUT_CLASSIFICATION	1.0873368444026501E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944271822176	WITHOUT_CLASSIFICATION	5.572817782304578E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998166210978	WITHOUT_CLASSIFICATION	1.833789021682313E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999972717128875	WITHOUT_CLASSIFICATION	2.7282871123580472E-6	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.999999723044378	WITHOUT_CLASSIFICATION	2.769556219714241E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999994899526304	WITHOUT_CLASSIFICATION	5.100473695146653E-7	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999722114615403	WITHOUT_CLASSIFICATION	2.7788538459785243E-5	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.8746565479013786	WITHOUT_CLASSIFICATION	0.12534345209862152	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999995774082544	WITHOUT_CLASSIFICATION	4.225917456529339E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9971887613638891	WITHOUT_CLASSIFICATION	0.002811238636111009	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999999825198398	WITHOUT_CLASSIFICATION	1.7480160196182686E-7	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999509200177	WITHOUT_CLASSIFICATION	4.907998224751554E-8	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9994292240166661	WITHOUT_CLASSIFICATION	5.707759833339906E-4	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998845528585	WITHOUT_CLASSIFICATION	1.154471414850874E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999896395445133	WITHOUT_CLASSIFICATION	1.03604554867414E-5	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999999488093119	WITHOUT_CLASSIFICATION	5.119068810012281E-7	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9996476259164295	WITHOUT_CLASSIFICATION	3.52374083570482E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9985128273845914	WITHOUT_CLASSIFICATION	0.001487172615408698	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999985319539181	WITHOUT_CLASSIFICATION	1.4680460819423328E-6	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999837523063	WITHOUT_CLASSIFICATION	1.624769373614199E-8	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999942556117115	WITHOUT_CLASSIFICATION	5.744388288450966E-6	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999985037604905	WITHOUT_CLASSIFICATION	1.4962395095468085E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999961120260895	WITHOUT_CLASSIFICATION	3.887973910572006E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9981124470831587	WITHOUT_CLASSIFICATION	0.001887552916841227	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9981124470831587	WITHOUT_CLASSIFICATION	0.001887552916841227	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9965608306813775	WITHOUT_CLASSIFICATION	0.0034391693186225617	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.991294797697311	WITHOUT_CLASSIFICATION	0.008705202302688985	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999879439461535	WITHOUT_CLASSIFICATION	1.2056053846488225E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9990478757573498	WITHOUT_CLASSIFICATION	9.521242426502229E-4	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999425773643846	WITHOUT_CLASSIFICATION	5.742263561540777E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9998203072040968	WITHOUT_CLASSIFICATION	1.7969279590328E-4	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9978211647964332	WITHOUT_CLASSIFICATION	0.0021788352035667868	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997018163345	WITHOUT_CLASSIFICATION	2.981836655656732E-7	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999997018163345	WITHOUT_CLASSIFICATION	2.981836655656732E-7	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999064290949354	WITHOUT_CLASSIFICATION	9.357090506454149E-5	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999818906765767	WITHOUT_CLASSIFICATION	1.810932342331332E-5	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999165312406474	WITHOUT_CLASSIFICATION	8.346875935266364E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999255770854131	WITHOUT_CLASSIFICATION	7.442291458694096E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999255770854131	WITHOUT_CLASSIFICATION	7.442291458694096E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999255770854131	WITHOUT_CLASSIFICATION	7.442291458694096E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9992667444218972	WITHOUT_CLASSIFICATION	7.332555781027002E-4	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9985371615813151	WITHOUT_CLASSIFICATION	0.0014628384186849046	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999992512058054	WITHOUT_CLASSIFICATION	7.487941946921559E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998531408719353	WITHOUT_CLASSIFICATION	1.4685912806468605E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999151947324553	WITHOUT_CLASSIFICATION	8.480526754475335E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998166210978	WITHOUT_CLASSIFICATION	1.833789021682313E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998166210978	WITHOUT_CLASSIFICATION	1.833789021682313E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.999964993523964	WITHOUT_CLASSIFICATION	3.500647603595286E-5	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999039673005	WITHOUT_CLASSIFICATION	9.603269942287759E-8	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996815128597137	WITHOUT_CLASSIFICATION	3.18487140286278E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999819142933749	WITHOUT_CLASSIFICATION	1.8085706625095595E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999305410318521	WITHOUT_CLASSIFICATION	6.945896814787796E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999963731493668	WITHOUT_CLASSIFICATION	3.626850633082807E-6	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9980801883963868	WITHOUT_CLASSIFICATION	0.0019198116036131276	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998919772201416	WITHOUT_CLASSIFICATION	1.0802277985843913E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999983015084959	WITHOUT_CLASSIFICATION	1.698491504074897E-6	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999719441716	WITHOUT_CLASSIFICATION	2.8055828498191548E-8	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999886317340412	WITHOUT_CLASSIFICATION	1.1368265958810802E-5	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999907740571157	WITHOUT_CLASSIFICATION	9.225942884274388E-6	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999907740571157	WITHOUT_CLASSIFICATION	9.225942884274388E-6	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999951443862474	WITHOUT_CLASSIFICATION	4.8556137527066504E-6	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999951443862474	WITHOUT_CLASSIFICATION	4.8556137527066504E-6	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999966386727692	WITHOUT_CLASSIFICATION	3.3613272308360412E-6	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999950601184098	WITHOUT_CLASSIFICATION	4.939881590249425E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999950601184098	WITHOUT_CLASSIFICATION	4.939881590249425E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999978187198771	WITHOUT_CLASSIFICATION	2.181280122908966E-6	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999887009036945	WITHOUT_CLASSIFICATION	1.1299096305531971E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999937040050646	WITHOUT_CLASSIFICATION	6.295994935459792E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9981124470831587	WITHOUT_CLASSIFICATION	0.001887552916841227	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999999082737284	WITHOUT_CLASSIFICATION	9.172627165512716E-8	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999887009036945	WITHOUT_CLASSIFICATION	1.1299096305531971E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9875621162168369	WITHOUT_CLASSIFICATION	0.012437883783163142	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999549457133873	WITHOUT_CLASSIFICATION	4.50542866126874E-5	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999998541459377	WITHOUT_CLASSIFICATION	1.4585406223799648E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999995562603762	WITHOUT_CLASSIFICATION	4.4373962378815493E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998678878298	WITHOUT_CLASSIFICATION	1.3211217024066667E-7	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999866250249688	WITHOUT_CLASSIFICATION	1.3374975031201803E-5	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999960794549889	WITHOUT_CLASSIFICATION	3.9205450110656255E-6	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9996582763311088	WITHOUT_CLASSIFICATION	3.417236688911456E-4	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999980883561823	WITHOUT_CLASSIFICATION	1.9116438176955228E-5	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9983793786963904	WITHOUT_CLASSIFICATION	0.001620621303609637	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.999999392512308	WITHOUT_CLASSIFICATION	6.074876919457999E-7	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.999992086548513	WITHOUT_CLASSIFICATION	7.913451486959349E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994126734962	WITHOUT_CLASSIFICATION	5.873265037591843E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999967035434035	WITHOUT_CLASSIFICATION	3.2964565965114404E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999818593529464	WITHOUT_CLASSIFICATION	1.814064705364257E-5	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9997889041639554	WITHOUT_CLASSIFICATION	2.1109583604466485E-4	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999996670580947	WITHOUT_CLASSIFICATION	3.329419052515045E-7	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997259655057659	WITHOUT_CLASSIFICATION	2.740344942341508E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9997259655057659	WITHOUT_CLASSIFICATION	2.740344942341508E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999749696744173	WITHOUT_CLASSIFICATION	2.503032558267611E-5	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998604379406	WITHOUT_CLASSIFICATION	1.3956205931637611E-7	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999831466093783	WITHOUT_CLASSIFICATION	1.6853390621787753E-5	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999990356543923	WITHOUT_CLASSIFICATION	9.643456076900813E-6	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999997010678409	WITHOUT_CLASSIFICATION	2.989321591416287E-7	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999995385383227	WITHOUT_CLASSIFICATION	4.614616774316076E-7	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9993960674541534	WITHOUT_CLASSIFICATION	6.039325458466003E-4	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999998330603088	WITHOUT_CLASSIFICATION	1.6693969121406519E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999990471274411	WITHOUT_CLASSIFICATION	9.528725587611281E-7	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999994316210792	WITHOUT_CLASSIFICATION	5.683789207786354E-7	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9987976300510385	WITHOUT_CLASSIFICATION	0.0012023699489615268	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999896395445133	WITHOUT_CLASSIFICATION	1.03604554867414E-5	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999994892556755	WITHOUT_CLASSIFICATION	5.107443245698261E-7	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999619643721	WITHOUT_CLASSIFICATION	3.803562785306116E-8	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999967804979051	WITHOUT_CLASSIFICATION	3.2195020949759023E-6	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999999318811005	WITHOUT_CLASSIFICATION	6.811889948144659E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999892377152953	WITHOUT_CLASSIFICATION	1.0762284704703692E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999892377152953	WITHOUT_CLASSIFICATION	1.0762284704703692E-4	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999372125933782	WITHOUT_CLASSIFICATION	6.278740662184215E-5	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9466716873090967	WITHOUT_CLASSIFICATION	0.05332831269090329	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999956421550665	WITHOUT_CLASSIFICATION	4.357844933531614E-6	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999833594749371	WITHOUT_CLASSIFICATION	1.6640525062834543E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999977557745642	WITHOUT_CLASSIFICATION	2.2442254357471518E-6	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999998325109157	WITHOUT_CLASSIFICATION	1.6748908427814493E-7	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.998071328463275	WITHOUT_CLASSIFICATION	0.0019286715367249877	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999957070116712	WITHOUT_CLASSIFICATION	4.292988328794923E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996870367583883	WITHOUT_CLASSIFICATION	3.12963241611697E-4	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999995534439584	WITHOUT_CLASSIFICATION	4.465560415538434E-7	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9997662160483036	WITHOUT_CLASSIFICATION	2.3378395169647068E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999957070116712	WITHOUT_CLASSIFICATION	4.292988328794923E-6	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9262740289070548	WITHOUT_CLASSIFICATION	0.07372597109294518	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.6353358728814744	WITHOUT_CLASSIFICATION	0.36466412711852564	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.999550958526557	WITHOUT_CLASSIFICATION	4.490414734431373E-4	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.9999978001838045	WITHOUT_CLASSIFICATION	2.199816195510094E-6	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.99999459028389	WITHOUT_CLASSIFICATION	5.409716110013117E-6	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9996068548820203	WITHOUT_CLASSIFICATION	3.931451179796561E-4	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999959103811125	WITHOUT_CLASSIFICATION	4.089618887630185E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999998826617075	WITHOUT_CLASSIFICATION	1.1733829258169654E-7	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997741390155663	WITHOUT_CLASSIFICATION	2.2586098443376566E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997922071828432	WITHOUT_CLASSIFICATION	2.077928171567641E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999126652452148	WITHOUT_CLASSIFICATION	8.733475478524745E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999975815197364	WITHOUT_CLASSIFICATION	2.4184802635732277E-6	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999678518436995	WITHOUT_CLASSIFICATION	3.2148156300404996E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999975091777125	WITHOUT_CLASSIFICATION	2.4908222874975395E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999578944326898	WITHOUT_CLASSIFICATION	4.210556731020518E-5	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999996944219923	WITHOUT_CLASSIFICATION	3.055780077084702E-7	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999990190475567	WITHOUT_CLASSIFICATION	9.809524432358269E-7	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.997402507190905	WITHOUT_CLASSIFICATION	0.0025974928090950426	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9995521081696472	WITHOUT_CLASSIFICATION	4.4789183035270794E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999962631279256	WITHOUT_CLASSIFICATION	3.736872074399011E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999931019213698	WITHOUT_CLASSIFICATION	6.89807863008353E-6	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9856340338990501	DESIGN	0.014365966100949944	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9989252812248747	WITHOUT_CLASSIFICATION	0.001074718775125416	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999984222758147	WITHOUT_CLASSIFICATION	1.5777241853611167E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999798509716917	WITHOUT_CLASSIFICATION	2.014902830823514E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999652037595688	WITHOUT_CLASSIFICATION	3.4796240431255705E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999996619821331	WITHOUT_CLASSIFICATION	3.380178669776271E-7	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999993159936406	WITHOUT_CLASSIFICATION	6.840063595006097E-7	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999888463790345	WITHOUT_CLASSIFICATION	1.1153620965494102E-5	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9993999438161957	WITHOUT_CLASSIFICATION	6.000561838043914E-4	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999929454777	WITHOUT_CLASSIFICATION	7.054522259096613E-9	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999944936916038	WITHOUT_CLASSIFICATION	5.506308396294745E-6	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999821442409021	WITHOUT_CLASSIFICATION	1.7855759097820688E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9973165335462412	WITHOUT_CLASSIFICATION	0.0026834664537587886	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999755110635847	WITHOUT_CLASSIFICATION	2.4488936415225112E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999885813532855	WITHOUT_CLASSIFICATION	1.141864671447246E-5	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999947672126975	WITHOUT_CLASSIFICATION	5.232787302525165E-6	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999416563683	WITHOUT_CLASSIFICATION	5.8343631662227194E-8	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999989819643572	WITHOUT_CLASSIFICATION	1.018035642749171E-6	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999892104136715	WITHOUT_CLASSIFICATION	1.0789586328478112E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999106364192	WITHOUT_CLASSIFICATION	8.936358078018894E-8	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9998118846683053	WITHOUT_CLASSIFICATION	1.881153316947251E-4	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999992775640241	WITHOUT_CLASSIFICATION	7.224359758995496E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999997614958546	WITHOUT_CLASSIFICATION	2.385041454387766E-7	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.999937111777631	WITHOUT_CLASSIFICATION	6.288822236901301E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.999973838561733	WITHOUT_CLASSIFICATION	2.6161438266927133E-5	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999956511179336	WITHOUT_CLASSIFICATION	4.3488820663991015E-6	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999988882933504	WITHOUT_CLASSIFICATION	1.111706649676202E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999930424420662	WITHOUT_CLASSIFICATION	6.957557933715408E-6	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999937321988513	WITHOUT_CLASSIFICATION	6.267801148605365E-6	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852110633736	WITHOUT_CLASSIFICATION	1.4788936626426836E-5	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999982037569818	WITHOUT_CLASSIFICATION	1.796243018196195E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999891226756437	WITHOUT_CLASSIFICATION	1.0877324356444238E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999962022877674	WITHOUT_CLASSIFICATION	3.7977122326122705E-6	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999503425368439	WITHOUT_CLASSIFICATION	4.9657463156038894E-5	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998436500439	WITHOUT_CLASSIFICATION	1.5634995607385687E-7	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998393073655409	WITHOUT_CLASSIFICATION	1.6069263445908183E-4	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999994811516413	WITHOUT_CLASSIFICATION	5.188483586788716E-7	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999978395634369	WITHOUT_CLASSIFICATION	2.160436563129108E-6	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999879377243531	WITHOUT_CLASSIFICATION	1.2062275646985991E-5	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999981203903602	WITHOUT_CLASSIFICATION	1.8796096398331087E-6	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999884754102965	WITHOUT_CLASSIFICATION	1.1524589703471293E-5	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9997714274325664	WITHOUT_CLASSIFICATION	2.2857256743356497E-4	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9532902578420192	WITHOUT_CLASSIFICATION	0.04670974215798089	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9974877549752357	WITHOUT_CLASSIFICATION	0.0025122450247643197	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9997125998292927	WITHOUT_CLASSIFICATION	2.8740017070722585E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999852110633736	WITHOUT_CLASSIFICATION	1.4788936626426836E-5	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999715291032772	WITHOUT_CLASSIFICATION	2.8470896722770057E-5	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999994697175578	WITHOUT_CLASSIFICATION	5.302824421750942E-7	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999914803870676	WITHOUT_CLASSIFICATION	8.519612932276037E-6	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999963798950929	WITHOUT_CLASSIFICATION	3.620104907018886E-6	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999991034832816	WITHOUT_CLASSIFICATION	8.965167185346935E-7	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999948870530381	WITHOUT_CLASSIFICATION	5.112946961963489E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9996870367583883	WITHOUT_CLASSIFICATION	3.12963241611697E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999673520513647	WITHOUT_CLASSIFICATION	3.264794863531437E-5	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999755110635847	WITHOUT_CLASSIFICATION	2.4488936415225112E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9475336995357398	WITHOUT_CLASSIFICATION	0.05246630046426022	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999906231225812	WITHOUT_CLASSIFICATION	9.376877418734546E-6	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999888455803727	WITHOUT_CLASSIFICATION	1.1154419627384292E-5	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999835744839041	WITHOUT_CLASSIFICATION	1.642551609593131E-5	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999168791500009	WITHOUT_CLASSIFICATION	8.312084999908146E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9538216644602094	WITHOUT_CLASSIFICATION	0.04617833553979059	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9995695873855163	WITHOUT_CLASSIFICATION	4.3041261448371383E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9890196274640701	WITHOUT_CLASSIFICATION	0.010980372535929888	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9996191243824825	WITHOUT_CLASSIFICATION	3.808756175175448E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999787033341918	WITHOUT_CLASSIFICATION	2.129666580812694E-5	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999731444339702	WITHOUT_CLASSIFICATION	2.685556602977262E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9982382255900699	WITHOUT_CLASSIFICATION	0.0017617744099301372	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999773571261072	WITHOUT_CLASSIFICATION	2.2642873892713342E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999773571261072	WITHOUT_CLASSIFICATION	2.2642873892713342E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9991742496641018	WITHOUT_CLASSIFICATION	8.25750335898067E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999793714001959	WITHOUT_CLASSIFICATION	2.0628599804022222E-5	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999996231355832	WITHOUT_CLASSIFICATION	3.7686441682627564E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999927718135775	WITHOUT_CLASSIFICATION	7.2281864225216314E-6	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999998596480675	WITHOUT_CLASSIFICATION	1.403519325508479E-7	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999532221871771	WITHOUT_CLASSIFICATION	4.6777812822999855E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999976365507371	WITHOUT_CLASSIFICATION	2.363449262937618E-6	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999421651805913	WITHOUT_CLASSIFICATION	5.783481940856878E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999993606627628	WITHOUT_CLASSIFICATION	6.393372372891359E-7	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999210384572371	WITHOUT_CLASSIFICATION	7.896154276280136E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999967230277774	WITHOUT_CLASSIFICATION	3.2769722224965264E-6	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999983966110195	WITHOUT_CLASSIFICATION	1.6033889805263726E-6	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999982647114766	WITHOUT_CLASSIFICATION	1.7352885234513984E-6	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999966191538	WITHOUT_CLASSIFICATION	3.3808462043037866E-8	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997419691407319	WITHOUT_CLASSIFICATION	2.580308592681717E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999678927831263	WITHOUT_CLASSIFICATION	3.2107216873860846E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9901038963043558	WITHOUT_CLASSIFICATION	0.009896103695644183	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999999921885227	WITHOUT_CLASSIFICATION	7.811477295630409E-8	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999996031914477	WITHOUT_CLASSIFICATION	3.968085523878834E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999973205972418	WITHOUT_CLASSIFICATION	2.6794027581447967E-6	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999912885285985	WITHOUT_CLASSIFICATION	8.711471401546618E-6	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999954673863021	WITHOUT_CLASSIFICATION	4.532613697961618E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9998865140825709	WITHOUT_CLASSIFICATION	1.134859174291534E-4	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9999063789419617	WITHOUT_CLASSIFICATION	9.362105803827994E-5	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.999979319560392	WITHOUT_CLASSIFICATION	2.0680439608043353E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997094667493512	WITHOUT_CLASSIFICATION	2.9053325064877993E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998255896526	WITHOUT_CLASSIFICATION	1.7441034740125586E-6	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999963578507105	WITHOUT_CLASSIFICATION	3.6421492894809527E-6	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9990586077892213	WITHOUT_CLASSIFICATION	9.413922107787346E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9991838298901301	WITHOUT_CLASSIFICATION	8.161701098699153E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9973883132502047	WITHOUT_CLASSIFICATION	0.002611686749795273	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9842048833858413	WITHOUT_CLASSIFICATION	0.015795116614158552	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999906359114705	WITHOUT_CLASSIFICATION	9.364088529500122E-6	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999453114705126	WITHOUT_CLASSIFICATION	5.468852948746702E-5	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999940652529663	WITHOUT_CLASSIFICATION	5.9347470337444335E-6	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999992011882569	WITHOUT_CLASSIFICATION	7.988117431144359E-7	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999985024054293	WITHOUT_CLASSIFICATION	1.4975945706590065E-6	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9998274623484211	WITHOUT_CLASSIFICATION	1.7253765157893195E-4	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999997917224496	WITHOUT_CLASSIFICATION	2.0827755050060896E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999819428894	WITHOUT_CLASSIFICATION	1.805711059781761E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671914514521	WITHOUT_CLASSIFICATION	3.2808548547944164E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999993734564185	WITHOUT_CLASSIFICATION	6.265435814675308E-7	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999940869458435	WITHOUT_CLASSIFICATION	5.913054156524426E-6	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999993697251878	WITHOUT_CLASSIFICATION	6.302748122018633E-7	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999988905168585	WITHOUT_CLASSIFICATION	1.1094831413979455E-6	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998516208074311	WITHOUT_CLASSIFICATION	1.4837919256886038E-4	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9981462232801737	WITHOUT_CLASSIFICATION	0.0018537767198263952	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999994086706429	WITHOUT_CLASSIFICATION	5.913293571227465E-7	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999998363058022	WITHOUT_CLASSIFICATION	1.6369419774127118E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.999997939574108	WITHOUT_CLASSIFICATION	2.060425892006518E-6	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999727877664502	WITHOUT_CLASSIFICATION	2.721223354985187E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999630661662	WITHOUT_CLASSIFICATION	3.6933833797683953E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999754374687593	WITHOUT_CLASSIFICATION	2.456253124082101E-5	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999952240551299	WITHOUT_CLASSIFICATION	4.77594487022067E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999999226434761	WITHOUT_CLASSIFICATION	7.735652386847389E-8	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.7362591012576197	WITHOUT_CLASSIFICATION	0.2637408987423802	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999994678232635	WITHOUT_CLASSIFICATION	5.321767365583805E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9998971421395235	WITHOUT_CLASSIFICATION	1.0285786047649735E-4	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999993814193691	WITHOUT_CLASSIFICATION	6.185806310025817E-7	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999986426039108	WITHOUT_CLASSIFICATION	1.3573960892871372E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9995927850820179	WITHOUT_CLASSIFICATION	4.072149179820559E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999930661707682	WITHOUT_CLASSIFICATION	6.933829231795188E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9997071393967908	WITHOUT_CLASSIFICATION	2.9286060320916847E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999999183542057	WITHOUT_CLASSIFICATION	8.164579429350295E-8	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999590838000403	WITHOUT_CLASSIFICATION	4.0916199959716326E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999552042791262	WITHOUT_CLASSIFICATION	4.479572087372527E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999266618347	WITHOUT_CLASSIFICATION	7.333816533753534E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999977434837581	WITHOUT_CLASSIFICATION	2.256516241852741E-6	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999929398274012	WITHOUT_CLASSIFICATION	7.06017259875605E-6	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999853543088	WITHOUT_CLASSIFICATION	1.464569122547233E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999929398274012	WITHOUT_CLASSIFICATION	7.06017259875605E-6	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999985708825763	WITHOUT_CLASSIFICATION	1.4291174237148537E-6	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999495520414207	WITHOUT_CLASSIFICATION	5.0447958579345336E-5	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9995641842094128	WITHOUT_CLASSIFICATION	4.358157905871752E-4	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999992751298762	WITHOUT_CLASSIFICATION	7.248701238170985E-7	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999905513552877	WITHOUT_CLASSIFICATION	9.448644712300371E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9991227987433365	WITHOUT_CLASSIFICATION	8.772012566634327E-4	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999986210628649	WITHOUT_CLASSIFICATION	1.3789371351297432E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997851706510966	WITHOUT_CLASSIFICATION	2.1482934890326578E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999572430733779	WITHOUT_CLASSIFICATION	4.2756926622051417E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.99997874255098	WITHOUT_CLASSIFICATION	2.125744902003817E-5	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999949034611375	WITHOUT_CLASSIFICATION	5.096538862415534E-6	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999856670936746	WITHOUT_CLASSIFICATION	1.4332906325336672E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999374922877	WITHOUT_CLASSIFICATION	6.250771230675467E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999681811055598	DESIGN	3.181889444020571E-4	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999986184218366	WITHOUT_CLASSIFICATION	1.3815781633319356E-6	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.99999992823415	WITHOUT_CLASSIFICATION	7.17658500435947E-8	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999992385654655	WITHOUT_CLASSIFICATION	7.614345345917736E-7	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999986742294781	WITHOUT_CLASSIFICATION	1.3257705218800194E-6	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999909464976502	WITHOUT_CLASSIFICATION	9.053502349858415E-6	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9886204116652391	WITHOUT_CLASSIFICATION	0.011379588334760939	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.997941463668659	WITHOUT_CLASSIFICATION	0.0020585363313409357	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998341108721671	WITHOUT_CLASSIFICATION	1.658891278328246E-4	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9745635768078893	WITHOUT_CLASSIFICATION	0.025436423192110678	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999730230914347	WITHOUT_CLASSIFICATION	2.6976908565300876E-5	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999649376998571	WITHOUT_CLASSIFICATION	3.5062300142975304E-5	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999981100207243	WITHOUT_CLASSIFICATION	1.889979275705058E-5	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9988823874500193	WITHOUT_CLASSIFICATION	0.001117612549980626	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9998599515300601	WITHOUT_CLASSIFICATION	1.4004846993977718E-4	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999192581658299	WITHOUT_CLASSIFICATION	8.074183416996964E-5	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999966115035773	WITHOUT_CLASSIFICATION	3.3884964226854396E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999946880905708	WITHOUT_CLASSIFICATION	5.311909429177583E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9995350827879163	WITHOUT_CLASSIFICATION	4.6491721208366174E-4	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999951279455874	WITHOUT_CLASSIFICATION	4.872054412589312E-6	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999992512071846	WITHOUT_CLASSIFICATION	7.487928153984058E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.999991363674001	WITHOUT_CLASSIFICATION	8.63632599893363E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999937478660447	WITHOUT_CLASSIFICATION	6.252133955289394E-6	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999859207288765	WITHOUT_CLASSIFICATION	1.407927112339055E-5	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999811165544539	WITHOUT_CLASSIFICATION	1.8883445546047144E-5	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.999546343620818	WITHOUT_CLASSIFICATION	4.5365637918199687E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999676188734243	WITHOUT_CLASSIFICATION	3.238112657568314E-5	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999989411913008	WITHOUT_CLASSIFICATION	1.058808699173476E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999879896144946	WITHOUT_CLASSIFICATION	1.201038550548601E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9991344998353966	WITHOUT_CLASSIFICATION	8.655001646033178E-4	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999981100207243	WITHOUT_CLASSIFICATION	1.889979275705058E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9992029909212911	WITHOUT_CLASSIFICATION	7.970090787089498E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999996489997349	WITHOUT_CLASSIFICATION	3.510002651195935E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9993876035791108	WITHOUT_CLASSIFICATION	6.123964208891596E-4	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999997765765262	WITHOUT_CLASSIFICATION	2.2342347369067876E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999987270511114	WITHOUT_CLASSIFICATION	1.272948888624407E-6	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999997432421098	WITHOUT_CLASSIFICATION	2.567578901877439E-7	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999698185825262	WITHOUT_CLASSIFICATION	3.018141747381965E-5	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.6928716790647286	DESIGN	0.3071283209352714	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997568036185516	WITHOUT_CLASSIFICATION	2.4319638144836424E-4	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9933445192028733	WITHOUT_CLASSIFICATION	0.0066554807971266955	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9995862701920613	WITHOUT_CLASSIFICATION	4.1372980793872097E-4	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999963780986685	WITHOUT_CLASSIFICATION	3.6219013314406954E-6	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999753987075864	WITHOUT_CLASSIFICATION	2.4601292413563236E-5	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997041318835262	WITHOUT_CLASSIFICATION	2.958681164738176E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999992547252717	WITHOUT_CLASSIFICATION	7.452747282093657E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999987542092329	WITHOUT_CLASSIFICATION	1.245790767036828E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999997653280202	WITHOUT_CLASSIFICATION	2.3467197988625748E-7	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999979203930606	WITHOUT_CLASSIFICATION	2.0796069394003436E-6	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999982406890511	WITHOUT_CLASSIFICATION	1.7593109489017849E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9992029909212911	WITHOUT_CLASSIFICATION	7.970090787089498E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999847824149479	WITHOUT_CLASSIFICATION	1.5217585052212036E-5	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9997585708604038	WITHOUT_CLASSIFICATION	2.414291395962749E-4	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999962951979986	WITHOUT_CLASSIFICATION	3.7048020014368094E-6	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999252892253134	WITHOUT_CLASSIFICATION	7.471077468652819E-5	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999135160251469	WITHOUT_CLASSIFICATION	8.648397485312664E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9994955325708003	WITHOUT_CLASSIFICATION	5.044674291998022E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9994955325708003	WITHOUT_CLASSIFICATION	5.044674291998022E-4	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999995913427988	WITHOUT_CLASSIFICATION	4.086572011783738E-7	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9994955325708003	WITHOUT_CLASSIFICATION	5.044674291998022E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9994955325708003	WITHOUT_CLASSIFICATION	5.044674291998022E-4	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9973744564160459	WITHOUT_CLASSIFICATION	0.0026255435839541313	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999855306224371	WITHOUT_CLASSIFICATION	1.4469377562834975E-5	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999939024327416	WITHOUT_CLASSIFICATION	6.097567258449808E-6	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999940110799078	WITHOUT_CLASSIFICATION	5.988920092227373E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999959593699395	WITHOUT_CLASSIFICATION	4.0406300604894E-5	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9227990446331031	WITHOUT_CLASSIFICATION	0.07720095536689685	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9735720733442842	WITHOUT_CLASSIFICATION	0.026427926655715764	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999684396106965	WITHOUT_CLASSIFICATION	3.1560389303621996E-5	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9998431151535464	WITHOUT_CLASSIFICATION	1.5688484645356703E-4	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999263571385008	WITHOUT_CLASSIFICATION	7.364286149917543E-5	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9984984128701285	WITHOUT_CLASSIFICATION	0.0015015871298714378	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997162438243024	WITHOUT_CLASSIFICATION	2.837561756975855E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999627900788864	WITHOUT_CLASSIFICATION	3.7209921113547174E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999326936498052	WITHOUT_CLASSIFICATION	6.730635019475328E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999676980795145	WITHOUT_CLASSIFICATION	3.230192048548002E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9872047552295419	WITHOUT_CLASSIFICATION	0.012795244770458134	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997309464208	WITHOUT_CLASSIFICATION	2.690535792489566E-7	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999978874701713	WITHOUT_CLASSIFICATION	2.112529828793284E-6	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9562933479370461	WITHOUT_CLASSIFICATION	0.04370665206295383	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999013402498874	WITHOUT_CLASSIFICATION	9.865975011259439E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999345144858056	WITHOUT_CLASSIFICATION	6.548551419436703E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999988750609914	WITHOUT_CLASSIFICATION	1.1249390085411573E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997309464208	WITHOUT_CLASSIFICATION	2.690535792489566E-7	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9988823874500193	WITHOUT_CLASSIFICATION	0.001117612549980626	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999722968091322	WITHOUT_CLASSIFICATION	2.770319086770959E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999787053103	WITHOUT_CLASSIFICATION	2.1294689641219042E-8	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998901007765	WITHOUT_CLASSIFICATION	1.0989922345657809E-7	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999800552093366	WITHOUT_CLASSIFICATION	1.9944790663362803E-5	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999988484443575	WITHOUT_CLASSIFICATION	1.151555642498571E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.999995590205442	WITHOUT_CLASSIFICATION	4.4097945579228316E-6	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.999951131490503	WITHOUT_CLASSIFICATION	4.886850949707091E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999990691160817	WITHOUT_CLASSIFICATION	9.308839182222351E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9956442927410973	WITHOUT_CLASSIFICATION	0.004355707258902653	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9996155290606573	WITHOUT_CLASSIFICATION	3.8447093934272707E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999999386650323	WITHOUT_CLASSIFICATION	6.133496766591672E-8	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999082155146529	WITHOUT_CLASSIFICATION	9.17844853471459E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999406909188	WITHOUT_CLASSIFICATION	5.930908124281632E-8	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999399658660848	WITHOUT_CLASSIFICATION	6.003413391515471E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999994914005553	WITHOUT_CLASSIFICATION	5.085994446487475E-7	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999968517729837	WITHOUT_CLASSIFICATION	3.1482270163219525E-6	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999977231285782	WITHOUT_CLASSIFICATION	2.276871421888564E-6	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999724644611965	WITHOUT_CLASSIFICATION	2.7535538803582025E-5	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999470386422002	WITHOUT_CLASSIFICATION	5.296135779967062E-5	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9856467292183726	WITHOUT_CLASSIFICATION	0.014353270781627375	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.999994735278533	WITHOUT_CLASSIFICATION	5.264721467036709E-6	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999926881093213	WITHOUT_CLASSIFICATION	7.311890678734123E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999990691160817	WITHOUT_CLASSIFICATION	9.308839182222351E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999963992383364	WITHOUT_CLASSIFICATION	3.6007616637261777E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9993802662048853	WITHOUT_CLASSIFICATION	6.197337951147744E-4	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998965282888153	WITHOUT_CLASSIFICATION	1.034717111846885E-4	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9996439471228077	WITHOUT_CLASSIFICATION	3.5605287719236756E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938777247537	WITHOUT_CLASSIFICATION	6.12227524630779E-6	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999930905962864	WITHOUT_CLASSIFICATION	6.909403713698165E-6	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999357611377824	WITHOUT_CLASSIFICATION	6.42388622176245E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.999952434136838	WITHOUT_CLASSIFICATION	4.7565863161971954E-5	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999883390750337	WITHOUT_CLASSIFICATION	1.1660924966199E-5	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999877462552033	WITHOUT_CLASSIFICATION	1.2253744796768589E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999982090547387	WITHOUT_CLASSIFICATION	1.7909452613722458E-6	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999665362401	WITHOUT_CLASSIFICATION	3.3463759953258814E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9945429786052249	WITHOUT_CLASSIFICATION	0.005457021394775132	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999721180066	WITHOUT_CLASSIFICATION	2.7881993424902394E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999670114800369	WITHOUT_CLASSIFICATION	3.298851996302808E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999991945866322	WITHOUT_CLASSIFICATION	8.054133678669796E-7	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999647510962656	WITHOUT_CLASSIFICATION	3.5248903734402766E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999982090547387	WITHOUT_CLASSIFICATION	1.7909452613722458E-6	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999988542584257	WITHOUT_CLASSIFICATION	1.1457415743576054E-6	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.994141171475387	WITHOUT_CLASSIFICATION	0.005858828524612834	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995886003303	WITHOUT_CLASSIFICATION	4.113996697211737E-7	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999975871514254	WITHOUT_CLASSIFICATION	2.4128485745946924E-5	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.999985781434458	WITHOUT_CLASSIFICATION	1.421856554200366E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999989203821601	WITHOUT_CLASSIFICATION	1.0796178398956262E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999670114800369	WITHOUT_CLASSIFICATION	3.298851996302808E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999968207253157	WITHOUT_CLASSIFICATION	3.179274684338147E-6	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999439916143196	WITHOUT_CLASSIFICATION	5.600838568042934E-5	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996320258536	WITHOUT_CLASSIFICATION	3.679741463814672E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999824140654234	WITHOUT_CLASSIFICATION	1.7585934576601118E-5	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999963313094826	WITHOUT_CLASSIFICATION	3.668690517399371E-5	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999405804524575	WITHOUT_CLASSIFICATION	5.941954754257519E-5	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998516027995	WITHOUT_CLASSIFICATION	1.4839720046745907E-7	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998516027995	WITHOUT_CLASSIFICATION	1.4839720046745907E-7	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9966028656820818	WITHOUT_CLASSIFICATION	0.0033971343179183392	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999966128755177	WITHOUT_CLASSIFICATION	3.3871244823578013E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999641532793117	WITHOUT_CLASSIFICATION	3.584672068838079E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999665450228397	WITHOUT_CLASSIFICATION	3.345497716023665E-5	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.999985860692601	WITHOUT_CLASSIFICATION	1.4139307399049957E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957023274902	WITHOUT_CLASSIFICATION	4.29767250972436E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972457318035	WITHOUT_CLASSIFICATION	2.7542681966031246E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958410924182	WITHOUT_CLASSIFICATION	4.158907581722324E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9953969219821319	WITHOUT_CLASSIFICATION	0.004603078017868018	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995270152642	WITHOUT_CLASSIFICATION	4.729847358529478E-7	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957023274902	WITHOUT_CLASSIFICATION	4.29767250972436E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972457318035	WITHOUT_CLASSIFICATION	2.7542681966031246E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958410924182	WITHOUT_CLASSIFICATION	4.158907581722324E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999979893323653	WITHOUT_CLASSIFICATION	2.010667634685996E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9982591356162146	WITHOUT_CLASSIFICATION	0.0017408643837852783	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999948834245992	WITHOUT_CLASSIFICATION	5.116575400854693E-6	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999993822121494	WITHOUT_CLASSIFICATION	6.1778785059316E-6	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9997578260201159	WITHOUT_CLASSIFICATION	2.421739798842414E-4	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999981134485276	WITHOUT_CLASSIFICATION	1.8865514723746035E-6	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999921958387885	WITHOUT_CLASSIFICATION	7.804161211518725E-6	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9988576295792614	WITHOUT_CLASSIFICATION	0.00114237042073865	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9999757537758381	WITHOUT_CLASSIFICATION	2.4246224161886154E-5	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9998978512279204	WITHOUT_CLASSIFICATION	1.021487720795921E-4	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999938464652197	WITHOUT_CLASSIFICATION	6.153534780360034E-6	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9897519484914599	WITHOUT_CLASSIFICATION	0.01024805150854011	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9984215224603105	WITHOUT_CLASSIFICATION	0.0015784775396894956	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999508848741931	WITHOUT_CLASSIFICATION	4.91151258068406E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998938617544768	WITHOUT_CLASSIFICATION	1.0613824552320565E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9996923384455958	WITHOUT_CLASSIFICATION	3.076615544042517E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9993571611882472	WITHOUT_CLASSIFICATION	6.428388117526873E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999910441306941	WITHOUT_CLASSIFICATION	8.955869305928299E-6	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999922558803652	WITHOUT_CLASSIFICATION	7.744119634691455E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998149022559	WITHOUT_CLASSIFICATION	1.8509774417148503E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999965173913987	WITHOUT_CLASSIFICATION	3.482608601226586E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999616244564893	WITHOUT_CLASSIFICATION	3.837554351070496E-4	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999937616845735	WITHOUT_CLASSIFICATION	6.238315426495529E-6	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9998690163112705	WITHOUT_CLASSIFICATION	1.3098368872949926E-4	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.999992341821359	WITHOUT_CLASSIFICATION	7.658178641013554E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9994417269954065	WITHOUT_CLASSIFICATION	5.5827300459355E-4	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990050449434	WITHOUT_CLASSIFICATION	9.949550566466044E-7	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991329404347	WITHOUT_CLASSIFICATION	8.670595652583436E-7	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999861315712448	WITHOUT_CLASSIFICATION	1.3868428755166424E-5	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986485685732	WITHOUT_CLASSIFICATION	1.3514314268001287E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987537283653	WITHOUT_CLASSIFICATION	1.2462716346863506E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999869260748152	WITHOUT_CLASSIFICATION	1.307392518481568E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999869260748152	WITHOUT_CLASSIFICATION	1.307392518481568E-4	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999968023448507	WITHOUT_CLASSIFICATION	3.1976551494197503E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999962185419	WITHOUT_CLASSIFICATION	3.781458201582827E-9	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999934612868127	WITHOUT_CLASSIFICATION	6.5387131873748394E-6	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999896395445133	WITHOUT_CLASSIFICATION	1.03604554867414E-5	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9961671444477912	WITHOUT_CLASSIFICATION	0.003832855552208837	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999608056881042	WITHOUT_CLASSIFICATION	3.919431189579685E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9997524422033043	WITHOUT_CLASSIFICATION	2.475577966957058E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999972475996339	WITHOUT_CLASSIFICATION	2.752400365979469E-6	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9993486411784889	WITHOUT_CLASSIFICATION	6.513588215111887E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999250858695	WITHOUT_CLASSIFICATION	7.491413047190175E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999294081553	WITHOUT_CLASSIFICATION	7.059184464178527E-8	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992937287628	WITHOUT_CLASSIFICATION	7.062712372066932E-7	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998409661095	WITHOUT_CLASSIFICATION	1.5903389045242332E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995989912208	WITHOUT_CLASSIFICATION	4.0100877912932936E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999051850504	WITHOUT_CLASSIFICATION	9.481494954308055E-8	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995727378784	WITHOUT_CLASSIFICATION	4.272621216801897E-7	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999757940049	WITHOUT_CLASSIFICATION	2.420599510779607E-8	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998461934946	WITHOUT_CLASSIFICATION	1.5380650547432805E-7	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998762304191	WITHOUT_CLASSIFICATION	1.237695809252055E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999954081198752	WITHOUT_CLASSIFICATION	4.5918801247614465E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999840364326491	WITHOUT_CLASSIFICATION	1.5963567350895623E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999769672134249	WITHOUT_CLASSIFICATION	2.3032786575139755E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9981424558461096	WITHOUT_CLASSIFICATION	0.0018575441538903608	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9995961376066554	WITHOUT_CLASSIFICATION	4.038623933445482E-4	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9952919904239844	WITHOUT_CLASSIFICATION	0.004708009576015668	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9595171270955782	WITHOUT_CLASSIFICATION	0.04048287290442174	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999990411882527	WITHOUT_CLASSIFICATION	9.588117473895102E-7	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9986778585424437	WITHOUT_CLASSIFICATION	0.0013221414575562394	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9981424558461096	WITHOUT_CLASSIFICATION	0.0018575441538903608	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9981424558461096	WITHOUT_CLASSIFICATION	0.0018575441538903608	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9955249187898083	WITHOUT_CLASSIFICATION	0.004475081210191756	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999927871041617	WITHOUT_CLASSIFICATION	7.212895838204557E-6	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999758714267422	WITHOUT_CLASSIFICATION	2.4128573257818537E-5	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9986090651353808	WITHOUT_CLASSIFICATION	0.0013909348646191904	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994126734962	WITHOUT_CLASSIFICATION	5.873265037591843E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999998149022559	WITHOUT_CLASSIFICATION	1.8509774417148503E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999851449054017	WITHOUT_CLASSIFICATION	1.4855094598234286E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999931304270244	WITHOUT_CLASSIFICATION	6.869572975595213E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999976899891996	WITHOUT_CLASSIFICATION	2.310010800348307E-6	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995032798204709	WITHOUT_CLASSIFICATION	4.967201795290896E-4	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999816116197165	WITHOUT_CLASSIFICATION	1.8388380283418156E-5	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985235074379	WITHOUT_CLASSIFICATION	1.476492562102926E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999852564634099	WITHOUT_CLASSIFICATION	1.4743536590103995E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999852564634099	WITHOUT_CLASSIFICATION	1.4743536590103995E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998641935204162	WITHOUT_CLASSIFICATION	1.3580647958375358E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998641935204162	WITHOUT_CLASSIFICATION	1.3580647958375358E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996235169324664	WITHOUT_CLASSIFICATION	3.7648306753359346E-4	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991414734235	WITHOUT_CLASSIFICATION	8.58526576428028E-7	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.999999962481559	WITHOUT_CLASSIFICATION	3.751844095649695E-8	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985372896577	WITHOUT_CLASSIFICATION	1.4627103423059981E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999378527712809	WITHOUT_CLASSIFICATION	6.21472287190818E-5	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9469626265733523	WITHOUT_CLASSIFICATION	0.05303737342664772	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976062145866	WITHOUT_CLASSIFICATION	2.3937854134434325E-6	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999594895640842	WITHOUT_CLASSIFICATION	4.0510435915821286E-5	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9715445068674953	WITHOUT_CLASSIFICATION	0.02845549313250475	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999949386406068	WITHOUT_CLASSIFICATION	5.061359393170243E-6	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996957335543	WITHOUT_CLASSIFICATION	3.0426644573663933E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999895413533791	WITHOUT_CLASSIFICATION	1.0458646620912777E-5	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9921307451499193	WITHOUT_CLASSIFICATION	0.00786925485008063	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999991494677122	WITHOUT_CLASSIFICATION	8.505322877849277E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999963878783693	WITHOUT_CLASSIFICATION	3.612121630651858E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999964542524289	WITHOUT_CLASSIFICATION	3.5457475711021815E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999964542524289	WITHOUT_CLASSIFICATION	3.5457475711021815E-6	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999448056049404	WITHOUT_CLASSIFICATION	5.519439505971235E-5	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999988117894264	WITHOUT_CLASSIFICATION	1.1882105736417963E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999958254372	WITHOUT_CLASSIFICATION	4.174562774131142E-9	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999993190511086	WITHOUT_CLASSIFICATION	6.809488913796137E-7	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996717717788098	WITHOUT_CLASSIFICATION	3.2822822119026604E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999196671743389	WITHOUT_CLASSIFICATION	8.033282566113762E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999680851122876	WITHOUT_CLASSIFICATION	3.1914887712423785E-5	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999459586980322	WITHOUT_CLASSIFICATION	5.404130196781154E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999995203060197	WITHOUT_CLASSIFICATION	4.796939803563526E-7	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999989345156839	WITHOUT_CLASSIFICATION	1.0654843161049386E-6	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997663444984592	WITHOUT_CLASSIFICATION	2.3365550154068185E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999979524293687	WITHOUT_CLASSIFICATION	2.047570631255974E-6	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991455045429	WITHOUT_CLASSIFICATION	8.544954569271276E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999997303051558	WITHOUT_CLASSIFICATION	2.696948441800904E-7	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999983911423928	WITHOUT_CLASSIFICATION	1.6088576072602892E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999885452283704	WITHOUT_CLASSIFICATION	1.1454771629445394E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9978331180371787	WITHOUT_CLASSIFICATION	0.002166881962821367	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999459586330606	WITHOUT_CLASSIFICATION	5.4041366939511484E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998804100207335	WITHOUT_CLASSIFICATION	1.195899792664796E-4	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999209034208	WITHOUT_CLASSIFICATION	7.909657913004231E-8	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999824841964	WITHOUT_CLASSIFICATION	1.7515803620593687E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999600344027	WITHOUT_CLASSIFICATION	3.996559721470896E-8	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995741893878	WITHOUT_CLASSIFICATION	4.25810612314923E-7	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999745121035529	WITHOUT_CLASSIFICATION	2.5487896447073435E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999873604906176	WITHOUT_CLASSIFICATION	1.2639509382354892E-5	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999668756101161	WITHOUT_CLASSIFICATION	3.312438988390278E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998704806181269	WITHOUT_CLASSIFICATION	1.2951938187299542E-4	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999693862937866	WITHOUT_CLASSIFICATION	3.0613706213402136E-5	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999987724503	WITHOUT_CLASSIFICATION	1.2275496551851263E-9	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9990800774818444	WITHOUT_CLASSIFICATION	9.19922518155762E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999699794063591	WITHOUT_CLASSIFICATION	3.00205936408074E-5	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999885775419791	WITHOUT_CLASSIFICATION	1.1422458020848413E-5	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999652596699393	WITHOUT_CLASSIFICATION	3.474033006069347E-5	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9477466517520712	WITHOUT_CLASSIFICATION	0.05225334824792891	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999996874647779	WITHOUT_CLASSIFICATION	3.125352221251803E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9987456799383782	WITHOUT_CLASSIFICATION	0.001254320061621883	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999982967574934	WITHOUT_CLASSIFICATION	1.703242506573554E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9998155185123211	WITHOUT_CLASSIFICATION	1.8448148767895135E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999995646530264	WITHOUT_CLASSIFICATION	4.3534697357236004E-7	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.999980791831323	WITHOUT_CLASSIFICATION	1.9208168676974423E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999800371427926	WITHOUT_CLASSIFICATION	1.996285720744154E-5	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999984316700656	WITHOUT_CLASSIFICATION	1.5683299342990228E-6	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9162601498229451	WITHOUT_CLASSIFICATION	0.08373985017705478	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9995957709648509	WITHOUT_CLASSIFICATION	4.0422903514905574E-4	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999634908550091	WITHOUT_CLASSIFICATION	3.650914499083428E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9986098158317893	WITHOUT_CLASSIFICATION	0.0013901841682107884	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999995297930852	WITHOUT_CLASSIFICATION	4.7020691497268955E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999986610766957	WITHOUT_CLASSIFICATION	1.338923304299855E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999997540994376	WITHOUT_CLASSIFICATION	2.4590056236766653E-7	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9998656823292995	WITHOUT_CLASSIFICATION	1.3431767070053906E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999943149475539	WITHOUT_CLASSIFICATION	5.685052446111753E-6	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9998642183550551	WITHOUT_CLASSIFICATION	1.3578164494486628E-4	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9998266159563576	WITHOUT_CLASSIFICATION	1.7338404364245372E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999856140641452	WITHOUT_CLASSIFICATION	1.4385935854803544E-5	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999859538312974	WITHOUT_CLASSIFICATION	1.4046168702552596E-5	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999810491954816	WITHOUT_CLASSIFICATION	1.8950804518429093E-5	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9733088529527942	WITHOUT_CLASSIFICATION	0.02669114704720579	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999987924157654	WITHOUT_CLASSIFICATION	1.2075842345944107E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999906703173538	WITHOUT_CLASSIFICATION	9.329682646106706E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9826819198097599	WITHOUT_CLASSIFICATION	0.017318080190240042	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999869835766768	WITHOUT_CLASSIFICATION	1.3016423323055467E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999994065044239	WITHOUT_CLASSIFICATION	5.934955761694842E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999969787931975	WITHOUT_CLASSIFICATION	3.0212068025951E-6	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9980935895328004	WITHOUT_CLASSIFICATION	0.0019064104671996326	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999987495214373	WITHOUT_CLASSIFICATION	1.2504785626380607E-6	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9995144647702632	WITHOUT_CLASSIFICATION	4.855352297368249E-4	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.977640209676836	WITHOUT_CLASSIFICATION	0.022359790323163993	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999826385954513	WITHOUT_CLASSIFICATION	1.736140454867763E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99999418096537	WITHOUT_CLASSIFICATION	5.819034630025838E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99999418096537	WITHOUT_CLASSIFICATION	5.819034630025838E-6	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997743585122	WITHOUT_CLASSIFICATION	2.2564148774745673E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9996499560848374	WITHOUT_CLASSIFICATION	3.500439151625956E-4	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999964507977985	WITHOUT_CLASSIFICATION	3.549202201504977E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9991056417501746	WITHOUT_CLASSIFICATION	8.943582498253821E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999857398639472	WITHOUT_CLASSIFICATION	1.4260136052888296E-5	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999789608820149	WITHOUT_CLASSIFICATION	2.1039117985016694E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999996859017096	WITHOUT_CLASSIFICATION	3.1409829036258667E-7	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999698076334445	WITHOUT_CLASSIFICATION	3.0192366555466002E-5	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.999652915804278	WITHOUT_CLASSIFICATION	3.470841957221235E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.999999965742349	WITHOUT_CLASSIFICATION	3.4257650988452346E-8	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999976129607644	WITHOUT_CLASSIFICATION	2.387039235622481E-6	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996005201394	WITHOUT_CLASSIFICATION	3.994798605778686E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999911366944492	WITHOUT_CLASSIFICATION	8.863305550819102E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999991947463583	WITHOUT_CLASSIFICATION	8.05253641581214E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9996645777128261	WITHOUT_CLASSIFICATION	3.354222871738046E-4	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6390849534810397	DESIGN	0.3609150465189603	WITHOUT_CLASSIFICATION
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.99998813023973	WITHOUT_CLASSIFICATION	1.1869760270005577E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9709556642445976	WITHOUT_CLASSIFICATION	0.02904433575540239	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9988056033398726	WITHOUT_CLASSIFICATION	0.0011943966601274522	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9993446156643528	WITHOUT_CLASSIFICATION	6.553843356470895E-4	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999883374634888	WITHOUT_CLASSIFICATION	1.1662536511147118E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9995715961092047	WITHOUT_CLASSIFICATION	4.284038907952673E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9979121001766701	WITHOUT_CLASSIFICATION	0.0020878998233298074	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9998221594205638	WITHOUT_CLASSIFICATION	1.7784057943610944E-4	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999962892545978	WITHOUT_CLASSIFICATION	3.710745402220973E-6	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9997700522397965	WITHOUT_CLASSIFICATION	2.2994776020353086E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999807221845533	WITHOUT_CLASSIFICATION	1.927781544679776E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999756093941082	WITHOUT_CLASSIFICATION	2.4390605891712645E-5	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999873602634072	WITHOUT_CLASSIFICATION	1.263973659289618E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999990020462824	WITHOUT_CLASSIFICATION	9.9795371747636E-7	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999988882681459	WITHOUT_CLASSIFICATION	1.111731854133892E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999962716855518	WITHOUT_CLASSIFICATION	3.728314448101677E-6	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999952584441754	WITHOUT_CLASSIFICATION	4.741555824642964E-6	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999950358688549	WITHOUT_CLASSIFICATION	4.964131145250844E-6	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993388056929844	WITHOUT_CLASSIFICATION	6.611943070155983E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993388056929844	WITHOUT_CLASSIFICATION	6.611943070155983E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999936203102173	WITHOUT_CLASSIFICATION	6.379689782628435E-6	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9991726280327535	WITHOUT_CLASSIFICATION	8.27371967246533E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999424141967447	WITHOUT_CLASSIFICATION	5.75858032553556E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999346963892493	WITHOUT_CLASSIFICATION	6.530361075075533E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9998775219684063	WITHOUT_CLASSIFICATION	1.2247803159379315E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999414150209864	WITHOUT_CLASSIFICATION	5.858497901360967E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999998543551804	WITHOUT_CLASSIFICATION	1.4564481960317117E-7	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9998954309208392	WITHOUT_CLASSIFICATION	1.0456907916086906E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9813686259233292	WITHOUT_CLASSIFICATION	0.018631374076670853	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999965092777915	WITHOUT_CLASSIFICATION	3.490722208478079E-6	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999944795903092	WITHOUT_CLASSIFICATION	5.520409690718294E-6	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9957834815749104	WITHOUT_CLASSIFICATION	0.004216518425089575	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999999955541259	WITHOUT_CLASSIFICATION	4.4458741136681334E-8	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9997431450391538	WITHOUT_CLASSIFICATION	2.568549608461843E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999451140219	WITHOUT_CLASSIFICATION	5.488597813502635E-8	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9988581651356633	WITHOUT_CLASSIFICATION	0.0011418348643366652	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9988581651356633	WITHOUT_CLASSIFICATION	0.0011418348643366652	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999986582888867	WITHOUT_CLASSIFICATION	1.3417111133699554E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999998792972105	WITHOUT_CLASSIFICATION	1.2070278943236937E-7	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9896268530742801	WITHOUT_CLASSIFICATION	0.010373146925719869	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999960961161343	WITHOUT_CLASSIFICATION	3.903883865788033E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999954152049348	WITHOUT_CLASSIFICATION	4.5847950652095886E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999980532351668	WITHOUT_CLASSIFICATION	1.946764833225838E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9998739536118603	WITHOUT_CLASSIFICATION	1.2604638813965021E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9998739536118603	WITHOUT_CLASSIFICATION	1.2604638813965021E-4	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999893662518105	WITHOUT_CLASSIFICATION	1.0633748189593737E-5	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9982625410130956	WITHOUT_CLASSIFICATION	0.00173745898690434	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.99986858668108	WITHOUT_CLASSIFICATION	1.3141331891999592E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999994673660805	WITHOUT_CLASSIFICATION	5.326339196274411E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9042145624788999	WITHOUT_CLASSIFICATION	0.0957854375211001	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999941371512664	WITHOUT_CLASSIFICATION	5.8628487336730165E-6	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.999940830925948	WITHOUT_CLASSIFICATION	5.916907405195229E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999937040050646	WITHOUT_CLASSIFICATION	6.295994935459792E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999998166210978	WITHOUT_CLASSIFICATION	1.833789021682313E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9991846445176394	WITHOUT_CLASSIFICATION	8.153554823604483E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993617962230744	WITHOUT_CLASSIFICATION	6.382037769256928E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999722114615403	WITHOUT_CLASSIFICATION	2.7788538459785243E-5	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999926626383698	WITHOUT_CLASSIFICATION	7.337361630046236E-6	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999966386727692	WITHOUT_CLASSIFICATION	3.3613272308360412E-6	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9990586077892213	WITHOUT_CLASSIFICATION	9.413922107787346E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999961927170906	WITHOUT_CLASSIFICATION	3.8072829094717123E-6	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999090607643	WITHOUT_CLASSIFICATION	9.093923571685272E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999602419605046	WITHOUT_CLASSIFICATION	3.975803949538757E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.99997631481707	WITHOUT_CLASSIFICATION	2.3685182930032082E-5	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999936914911598	WITHOUT_CLASSIFICATION	6.308508840224445E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997186678531	WITHOUT_CLASSIFICATION	2.813321469179991E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999978187198771	WITHOUT_CLASSIFICATION	2.181280122908966E-6	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999987599537204	WITHOUT_CLASSIFICATION	1.240046279598648E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9991203739802481	WITHOUT_CLASSIFICATION	8.796260197518629E-4	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995510939097639	WITHOUT_CLASSIFICATION	4.489060902361819E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999869262698415	WITHOUT_CLASSIFICATION	1.307373015849535E-4	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9990630692032328	WITHOUT_CLASSIFICATION	9.369307967672425E-4	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9947081572969619	WITHOUT_CLASSIFICATION	0.005291842703038051	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9994788403210381	WITHOUT_CLASSIFICATION	5.211596789619397E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999892377152953	WITHOUT_CLASSIFICATION	1.0762284704703692E-4	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9982593544530058	WITHOUT_CLASSIFICATION	0.001740645546994247	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9995964842857324	WITHOUT_CLASSIFICATION	4.035157142675962E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9998893432506526	WITHOUT_CLASSIFICATION	1.1065674934736338E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999791681063267	WITHOUT_CLASSIFICATION	2.0831893673258945E-5	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999954724484472	WITHOUT_CLASSIFICATION	4.527551552740135E-6	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999500424299785	WITHOUT_CLASSIFICATION	4.995757002155893E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9999830980855453	WITHOUT_CLASSIFICATION	1.6901914454604683E-5	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999986061629741	WITHOUT_CLASSIFICATION	1.3938370259007063E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.999993257585965	WITHOUT_CLASSIFICATION	6.7424140349667686E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999940000501358	WITHOUT_CLASSIFICATION	5.999949864166823E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999859795619	WITHOUT_CLASSIFICATION	1.4020438001210838E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999842836065188	WITHOUT_CLASSIFICATION	1.5716393481163105E-5	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999747757602415	WITHOUT_CLASSIFICATION	2.5224239758454397E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.999979249739814	WITHOUT_CLASSIFICATION	2.075026018600683E-5	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999951399995	WITHOUT_CLASSIFICATION	4.860000572009541E-9	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999951268684518	WITHOUT_CLASSIFICATION	4.87313154826516E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.999993257585965	WITHOUT_CLASSIFICATION	6.7424140349667686E-6	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999940000501358	WITHOUT_CLASSIFICATION	5.999949864166823E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9993327233140749	WITHOUT_CLASSIFICATION	6.672766859252634E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.99939236387616	WITHOUT_CLASSIFICATION	6.076361238400189E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999931988537308	WITHOUT_CLASSIFICATION	6.801146269177787E-6	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999260684339992	WITHOUT_CLASSIFICATION	7.393156600074461E-5	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999881361844727	WITHOUT_CLASSIFICATION	1.1863815527175708E-5	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999982036776478	WITHOUT_CLASSIFICATION	1.796322352144251E-6	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999981082012018	WITHOUT_CLASSIFICATION	1.8917987981293103E-6	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999965908429514	WITHOUT_CLASSIFICATION	3.4091570484332E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9998995519296454	WITHOUT_CLASSIFICATION	1.0044807035461623E-4	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9374501117757036	WITHOUT_CLASSIFICATION	0.06254988822429654	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999408000159	WITHOUT_CLASSIFICATION	5.919998406435642E-8	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9374501117757036	WITHOUT_CLASSIFICATION	0.06254988822429654	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999840324507	WITHOUT_CLASSIFICATION	1.5967549304335182E-8	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999164544039559	WITHOUT_CLASSIFICATION	8.354559604403454E-5	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999998799246151	WITHOUT_CLASSIFICATION	1.2007538487887184E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996297137514	WITHOUT_CLASSIFICATION	3.7028624863082663E-7	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9997443815837664	WITHOUT_CLASSIFICATION	2.5561841623352377E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998915023616406	WITHOUT_CLASSIFICATION	1.0849763835944734E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998915023616406	WITHOUT_CLASSIFICATION	1.0849763835944734E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9977235153899083	WITHOUT_CLASSIFICATION	0.0022764846100915372	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9821885504868362	WITHOUT_CLASSIFICATION	0.01781144951316381	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9998864001755898	WITHOUT_CLASSIFICATION	1.1359982441009474E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999569738378054	WITHOUT_CLASSIFICATION	4.302616219470489E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9989533284117904	WITHOUT_CLASSIFICATION	0.001046671588209602	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9847931436226502	WITHOUT_CLASSIFICATION	0.015206856377349648	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999991904720791	WITHOUT_CLASSIFICATION	8.095279209175226E-7	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999963283230479	WITHOUT_CLASSIFICATION	3.671676952153826E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999923612806759	WITHOUT_CLASSIFICATION	7.638719324038E-6	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9995427497787163	WITHOUT_CLASSIFICATION	4.572502212836792E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.999998400103594	WITHOUT_CLASSIFICATION	1.5998964060184956E-6	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9998722653597487	WITHOUT_CLASSIFICATION	1.2773464025122707E-4	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9998643140302617	WITHOUT_CLASSIFICATION	1.3568596973836732E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999962788664316	WITHOUT_CLASSIFICATION	3.7211335682424196E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9981740073133876	WITHOUT_CLASSIFICATION	0.0018259926866124408	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999923008176193	WITHOUT_CLASSIFICATION	7.699182380762909E-6	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999970990203881	WITHOUT_CLASSIFICATION	2.9009796119775905E-6	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997679380319242	WITHOUT_CLASSIFICATION	2.3206196807584506E-4	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999931780522882	WITHOUT_CLASSIFICATION	6.821947711739486E-6	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998301984179135	WITHOUT_CLASSIFICATION	1.6980158208647177E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997956048673037	WITHOUT_CLASSIFICATION	2.0439513269629694E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999942956623005	WITHOUT_CLASSIFICATION	5.704337699571285E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9989037155935143	WITHOUT_CLASSIFICATION	0.0010962844064857373	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999386577027379	WITHOUT_CLASSIFICATION	6.134229726207312E-5	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999577555097013	WITHOUT_CLASSIFICATION	4.224449029875893E-5	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999970030153828	WITHOUT_CLASSIFICATION	2.996984617200666E-5	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999992626553955	WITHOUT_CLASSIFICATION	7.373446045668258E-7	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9965745261130379	WITHOUT_CLASSIFICATION	0.0034254738869619957	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9990389126808519	WITHOUT_CLASSIFICATION	9.610873191482248E-4	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9931862619138087	WITHOUT_CLASSIFICATION	0.0068137380861913125	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9881639468238452	WITHOUT_CLASSIFICATION	0.011836053176154729	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9999567273134304	WITHOUT_CLASSIFICATION	4.327268656957868E-5	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999991904720791	WITHOUT_CLASSIFICATION	8.095279209175226E-7	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999696061735646	WITHOUT_CLASSIFICATION	3.0393826435419507E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999337852000098	WITHOUT_CLASSIFICATION	6.621479999028444E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9848838644482318	WITHOUT_CLASSIFICATION	0.015116135551768148	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999996004870485	WITHOUT_CLASSIFICATION	3.995129514422958E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999578575139422	WITHOUT_CLASSIFICATION	4.214248605778759E-5	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999942622557493	WITHOUT_CLASSIFICATION	5.737744250663989E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999569738378054	WITHOUT_CLASSIFICATION	4.302616219470489E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999569738378054	WITHOUT_CLASSIFICATION	4.302616219470489E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999966484782258	WITHOUT_CLASSIFICATION	3.3515217742149397E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999974184260647	WITHOUT_CLASSIFICATION	2.5815739353147807E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9998486955317987	WITHOUT_CLASSIFICATION	1.5130446820134193E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999382280575506	WITHOUT_CLASSIFICATION	6.177194244939283E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9995360575210994	WITHOUT_CLASSIFICATION	4.6394247890058245E-4	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999915207374082	WITHOUT_CLASSIFICATION	8.479262591805631E-6	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9985255881110454	WITHOUT_CLASSIFICATION	0.0014744118889545754	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999991613185054	WITHOUT_CLASSIFICATION	8.386814944884459E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9991655916770835	WITHOUT_CLASSIFICATION	8.344083229165457E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999993994062705	WITHOUT_CLASSIFICATION	6.005937295113748E-7	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9976556413820193	WITHOUT_CLASSIFICATION	0.002344358617980588	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999776178994252	WITHOUT_CLASSIFICATION	2.2382100574753353E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9999518333802253	WITHOUT_CLASSIFICATION	4.81666197747128E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999993994062705	WITHOUT_CLASSIFICATION	6.005937295113748E-7	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988589032823	WITHOUT_CLASSIFICATION	1.1410967176546275E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9976366997997702	WITHOUT_CLASSIFICATION	0.0023633002002298826	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999495728308376	WITHOUT_CLASSIFICATION	5.0427169162485E-5	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9137110612664784	WITHOUT_CLASSIFICATION	0.08628893873352161	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999776178994252	WITHOUT_CLASSIFICATION	2.2382100574753353E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.99998712396744	WITHOUT_CLASSIFICATION	1.2876032559871962E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999965598984167	WITHOUT_CLASSIFICATION	3.4401015833279913E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999723637276052	WITHOUT_CLASSIFICATION	2.7636272394752243E-5	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999967842003713	WITHOUT_CLASSIFICATION	3.2157996287131286E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9997111977391995	WITHOUT_CLASSIFICATION	2.8880226080051346E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999885948864479	WITHOUT_CLASSIFICATION	1.1405113552135051E-5	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999982859605626	WITHOUT_CLASSIFICATION	1.714039437375384E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970668768735	WITHOUT_CLASSIFICATION	2.9331231265655077E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9968091109077599	WITHOUT_CLASSIFICATION	0.0031908890922399645	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996478227376887	WITHOUT_CLASSIFICATION	3.5217726231125384E-4	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999567629886273	WITHOUT_CLASSIFICATION	4.3237011372748446E-5	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999735198692788	WITHOUT_CLASSIFICATION	2.6480130721138697E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999993994062705	WITHOUT_CLASSIFICATION	6.005937295113748E-7	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.99998712396744	WITHOUT_CLASSIFICATION	1.2876032559871962E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999723637276052	WITHOUT_CLASSIFICATION	2.7636272394752243E-5	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999263457828362	WITHOUT_CLASSIFICATION	7.365421716377401E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9990467069212345	WITHOUT_CLASSIFICATION	9.532930787655189E-4	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999850518076587	WITHOUT_CLASSIFICATION	1.4948192341345347E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999776178994252	WITHOUT_CLASSIFICATION	2.2382100574753353E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9981906543809932	WITHOUT_CLASSIFICATION	0.0018093456190067692	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999997267718954	WITHOUT_CLASSIFICATION	2.7322810460601123E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999931820171053	WITHOUT_CLASSIFICATION	6.8179828947560385E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999971311796355	WITHOUT_CLASSIFICATION	2.868820364583119E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970668768735	WITHOUT_CLASSIFICATION	2.9331231265655077E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988589032823	WITHOUT_CLASSIFICATION	1.1410967176546275E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999972126699638	WITHOUT_CLASSIFICATION	2.7873300361859022E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999894678753889	WITHOUT_CLASSIFICATION	1.0532124611194098E-5	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9999707578496827	WITHOUT_CLASSIFICATION	2.9242150317299388E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9985767773404708	WITHOUT_CLASSIFICATION	0.0014232226595292542	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9776221441443498	WITHOUT_CLASSIFICATION	0.022377855855650164	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9898079378402826	WITHOUT_CLASSIFICATION	0.010192062159717422	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9999274478188718	WITHOUT_CLASSIFICATION	7.255218112814364E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996297137514	WITHOUT_CLASSIFICATION	3.7028624863082663E-7	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970294100410072	WITHOUT_CLASSIFICATION	0.0029705899589928613	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999998018010604	WITHOUT_CLASSIFICATION	1.9819893960510197E-7	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9976484520169051	WITHOUT_CLASSIFICATION	0.0023515479830949985	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998491459020084	WITHOUT_CLASSIFICATION	1.5085409799157115E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9998211604807762	WITHOUT_CLASSIFICATION	1.7883951922382892E-4	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999998038626768	WITHOUT_CLASSIFICATION	1.961373230903912E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.999999940439987	WITHOUT_CLASSIFICATION	5.956001306637951E-8	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998525954358	WITHOUT_CLASSIFICATION	1.4740456419920915E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999971311796355	WITHOUT_CLASSIFICATION	2.868820364583119E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999913005062203	WITHOUT_CLASSIFICATION	8.699493779725727E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999956283479003	WITHOUT_CLASSIFICATION	4.371652099673883E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999899392425629	WITHOUT_CLASSIFICATION	1.0060757437146477E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.99999947124977	WITHOUT_CLASSIFICATION	5.287502301238296E-7	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9997598706478069	WITHOUT_CLASSIFICATION	2.4012935219312298E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999863647206317	WITHOUT_CLASSIFICATION	1.3635279368231815E-5	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999994052992862	WITHOUT_CLASSIFICATION	5.947007137117937E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9976972333132473	WITHOUT_CLASSIFICATION	0.0023027666867526725	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999964694833784	WITHOUT_CLASSIFICATION	3.530516621666421E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9882591220451457	WITHOUT_CLASSIFICATION	0.011740877954854222	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999990298966619	WITHOUT_CLASSIFICATION	9.701033381233844E-7	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999299397847	WITHOUT_CLASSIFICATION	7.006021535642798E-8	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.98573624656329	WITHOUT_CLASSIFICATION	0.014263753436710056	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9996980735721637	WITHOUT_CLASSIFICATION	3.0192642783624586E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.999690491066807	WITHOUT_CLASSIFICATION	3.0950893319303197E-4	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999900489989764	WITHOUT_CLASSIFICATION	9.951001023666051E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9996265872636704	WITHOUT_CLASSIFICATION	3.734127363296185E-4	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9998488783347571	WITHOUT_CLASSIFICATION	1.5112166524281338E-4	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999991731444392	WITHOUT_CLASSIFICATION	8.26855560786457E-7	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9992885134186674	WITHOUT_CLASSIFICATION	7.114865813324827E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999977641661387	WITHOUT_CLASSIFICATION	2.235833861293136E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.999979658317498	WITHOUT_CLASSIFICATION	2.0341682502007506E-5	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999981550021335	WITHOUT_CLASSIFICATION	1.844997866472102E-6	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999929112565556	WITHOUT_CLASSIFICATION	7.088743444379463E-6	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999954409412536	WITHOUT_CLASSIFICATION	4.559058746375153E-6	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8324120243050774	DESIGN	0.16758797569492248	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999936197953339	WITHOUT_CLASSIFICATION	6.3802046661655375E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999977577349417	WITHOUT_CLASSIFICATION	2.242265058345561E-6	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999976420006983	WITHOUT_CLASSIFICATION	2.357999301650818E-6	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6729779789345857	WITHOUT_CLASSIFICATION	0.32702202106541434	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999148967106	WITHOUT_CLASSIFICATION	8.510328940866355E-8	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997922071828432	WITHOUT_CLASSIFICATION	2.077928171567641E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999811373967024	WITHOUT_CLASSIFICATION	1.886260329765563E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999673520513647	WITHOUT_CLASSIFICATION	3.264794863531437E-5	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999928205768819	WITHOUT_CLASSIFICATION	7.17942311811858E-6	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999968000137974	WITHOUT_CLASSIFICATION	3.1999862025244866E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999919284628807	WITHOUT_CLASSIFICATION	8.071537119309949E-6	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9792154309570985	WITHOUT_CLASSIFICATION	0.020784569042901428	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999968000137974	WITHOUT_CLASSIFICATION	3.1999862025244866E-6	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999928205768819	WITHOUT_CLASSIFICATION	7.17942311811858E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999919284628807	WITHOUT_CLASSIFICATION	8.071537119309949E-6	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999938792134079	WITHOUT_CLASSIFICATION	6.120786592113838E-6	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999759686665973	WITHOUT_CLASSIFICATION	2.4031333402719895E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999705490277	WITHOUT_CLASSIFICATION	2.945097241082189E-8	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9997832632335099	WITHOUT_CLASSIFICATION	2.167367664900529E-4	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999812570919655	WITHOUT_CLASSIFICATION	1.8742908034528985E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.999709214719869	DESIGN	2.9078528013104613E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9975180625992519	WITHOUT_CLASSIFICATION	0.0024819374007482155	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999697762631628	WITHOUT_CLASSIFICATION	3.022373683719967E-4	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999998479235638	WITHOUT_CLASSIFICATION	1.5207643620112243E-7	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999394242543076	WITHOUT_CLASSIFICATION	6.057574569232968E-5	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.999999209759875	WITHOUT_CLASSIFICATION	7.902401250668191E-7	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999908930543984	WITHOUT_CLASSIFICATION	9.106945601603144E-6	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.999341636292379	WITHOUT_CLASSIFICATION	6.583637076210138E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9988856992409318	WITHOUT_CLASSIFICATION	0.0011143007590681887	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999462312572	WITHOUT_CLASSIFICATION	5.376874270066494E-8	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999641632851	WITHOUT_CLASSIFICATION	3.58367149479403E-8	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999907173217538	WITHOUT_CLASSIFICATION	9.28267824619145E-6	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999913425436805	WITHOUT_CLASSIFICATION	8.65745631955983E-6	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9987897551577469	WITHOUT_CLASSIFICATION	0.0012102448422530805	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999854837042439	WITHOUT_CLASSIFICATION	1.4516295756221454E-5	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9967387562904605	WITHOUT_CLASSIFICATION	0.003261243709539449	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999997929366902	WITHOUT_CLASSIFICATION	2.070633099079736E-7	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999980513228768	WITHOUT_CLASSIFICATION	1.9486771232983447E-6	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999982778007503	WITHOUT_CLASSIFICATION	1.722199249656388E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999346015647016	WITHOUT_CLASSIFICATION	6.539843529835964E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999346015647016	WITHOUT_CLASSIFICATION	6.539843529835964E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999873197521	WITHOUT_CLASSIFICATION	1.2680247889045235E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999873197521	WITHOUT_CLASSIFICATION	1.2680247889045235E-7	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9944590820939011	WITHOUT_CLASSIFICATION	0.005540917906098864	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999907173217538	WITHOUT_CLASSIFICATION	9.28267824619145E-6	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999895837890812	WITHOUT_CLASSIFICATION	1.0416210918886115E-5	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999265329775	WITHOUT_CLASSIFICATION	7.346702245135816E-8	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9978709789557334	WITHOUT_CLASSIFICATION	0.0021290210442665835	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9978709789557334	WITHOUT_CLASSIFICATION	0.0021290210442665835	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999957668223743	WITHOUT_CLASSIFICATION	4.233177625608673E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999386617135174	WITHOUT_CLASSIFICATION	6.133828648254907E-5	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999198053734101	WITHOUT_CLASSIFICATION	8.019462658998663E-5	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999956228245598	WITHOUT_CLASSIFICATION	4.377175440205723E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.7231416554627483	WITHOUT_CLASSIFICATION	0.2768583445372516	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999999881085775	WITHOUT_CLASSIFICATION	1.1891422515791688E-8	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.999492783549423	WITHOUT_CLASSIFICATION	5.07216450577047E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.998443311361714	WITHOUT_CLASSIFICATION	0.0015566886382859906	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9999056327841827	WITHOUT_CLASSIFICATION	9.436721581737477E-5	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999864604438871	WITHOUT_CLASSIFICATION	1.35395561129141E-5	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999837122880175	WITHOUT_CLASSIFICATION	1.6287711982509907E-5	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9998704781774604	WITHOUT_CLASSIFICATION	1.2952182253958105E-4	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999992371775289	WITHOUT_CLASSIFICATION	7.628224711039183E-7	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.999998157771806	WITHOUT_CLASSIFICATION	1.8422281939407112E-6	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999927050058394	WITHOUT_CLASSIFICATION	7.2949941607347626E-6	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999991098616325	WITHOUT_CLASSIFICATION	8.901383674058773E-7	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985517173692633	WITHOUT_CLASSIFICATION	0.0014482826307367705	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999964328856545	WITHOUT_CLASSIFICATION	3.5671143454057215E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.999994276524771	WITHOUT_CLASSIFICATION	5.7234752289743215E-6	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999936758483542	WITHOUT_CLASSIFICATION	6.3241516458887936E-6	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999722478904092	WITHOUT_CLASSIFICATION	2.7752109590797315E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999938023482332	WITHOUT_CLASSIFICATION	6.19765176676431E-6	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999985411919892	WITHOUT_CLASSIFICATION	1.4588080108596245E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999953673998505	WITHOUT_CLASSIFICATION	4.632600149535649E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999896395445133	WITHOUT_CLASSIFICATION	1.03604554867414E-5	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999955018470471	WITHOUT_CLASSIFICATION	4.498152952913662E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999299397847	WITHOUT_CLASSIFICATION	7.006021535642798E-8	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999992725197498	WITHOUT_CLASSIFICATION	7.274802501115669E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999173542655361	WITHOUT_CLASSIFICATION	8.264573446383883E-5	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928015491791	WITHOUT_CLASSIFICATION	7.1984508208490435E-6	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999934074390662	WITHOUT_CLASSIFICATION	6.5925609338227695E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999176969787698	WITHOUT_CLASSIFICATION	8.230302123024544E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999176969787698	WITHOUT_CLASSIFICATION	8.230302123024544E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9997842306362517	WITHOUT_CLASSIFICATION	2.1576936374834466E-4	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999978806113486	WITHOUT_CLASSIFICATION	2.119388651362948E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999995930535038	WITHOUT_CLASSIFICATION	4.0694649619705515E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999995930535038	WITHOUT_CLASSIFICATION	4.0694649619705515E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998393073655409	WITHOUT_CLASSIFICATION	1.6069263445908183E-4	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9999751610016597	WITHOUT_CLASSIFICATION	2.483899834024821E-5	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999974484956299	WITHOUT_CLASSIFICATION	2.5515043701909945E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994126734962	WITHOUT_CLASSIFICATION	5.873265037591843E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9997631739904039	WITHOUT_CLASSIFICATION	2.368260095959836E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999647984345715	WITHOUT_CLASSIFICATION	3.5201565428427147E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9997556754314844	WITHOUT_CLASSIFICATION	2.443245685156002E-4	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999937311073402	WITHOUT_CLASSIFICATION	6.268892659642119E-6	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9973969392560914	WITHOUT_CLASSIFICATION	0.0026030607439085354	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9973969392560914	WITHOUT_CLASSIFICATION	0.0026030607439085354	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9569041265007903	WITHOUT_CLASSIFICATION	0.043095873499209715	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999996422391948	WITHOUT_CLASSIFICATION	3.577608051888901E-7	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999996422391948	WITHOUT_CLASSIFICATION	3.577608051888901E-7	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.998602107443348	WITHOUT_CLASSIFICATION	0.0013978925566520656	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999999704125547	WITHOUT_CLASSIFICATION	2.9587445220541447E-8	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9938362077955494	WITHOUT_CLASSIFICATION	0.006163792204450642	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999133030154	WITHOUT_CLASSIFICATION	8.669698455675773E-8	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997826799759	WITHOUT_CLASSIFICATION	2.1732002396291097E-7	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999998756375446	WITHOUT_CLASSIFICATION	1.2436245542302305E-7	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999999993530189	WITHOUT_CLASSIFICATION	6.469811988090369E-10	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999773095258405	WITHOUT_CLASSIFICATION	2.2690474159499727E-4	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9998798474027852	WITHOUT_CLASSIFICATION	1.2015259721483158E-4	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9761976492284471	WITHOUT_CLASSIFICATION	0.023802350771552856	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999575486307399	WITHOUT_CLASSIFICATION	4.245136926001231E-5	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9998294159594148	WITHOUT_CLASSIFICATION	1.7058404058524964E-4	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999798674416097	WITHOUT_CLASSIFICATION	2.0132558390279097E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999798674416097	WITHOUT_CLASSIFICATION	2.0132558390279097E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999798674416097	WITHOUT_CLASSIFICATION	2.0132558390279097E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999798674416097	WITHOUT_CLASSIFICATION	2.0132558390279097E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999998498661925	WITHOUT_CLASSIFICATION	1.5013380752509232E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999978519913755	WITHOUT_CLASSIFICATION	2.1480086246020257E-6	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999821425029674	WITHOUT_CLASSIFICATION	1.7857497032541625E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9998398094417489	WITHOUT_CLASSIFICATION	1.6019055825114884E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999966038310801	WITHOUT_CLASSIFICATION	3.3961689198954575E-5	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9921307288744907	WITHOUT_CLASSIFICATION	0.007869271125509341	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9978272862503412	WITHOUT_CLASSIFICATION	0.002172713749658794	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999605223903476	WITHOUT_CLASSIFICATION	3.947760965252984E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999998979431999	WITHOUT_CLASSIFICATION	1.0205680009811867E-7	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999988723649403	WITHOUT_CLASSIFICATION	1.127635059591958E-6	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9998250409051176	WITHOUT_CLASSIFICATION	1.749590948824084E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999421416218275	WITHOUT_CLASSIFICATION	5.7858378172580254E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9938825339272185	WITHOUT_CLASSIFICATION	0.006117466072781468	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998350362098986	WITHOUT_CLASSIFICATION	1.6496379010155684E-4	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9966991105488588	WITHOUT_CLASSIFICATION	0.0033008894511410954	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999421416218275	WITHOUT_CLASSIFICATION	5.7858378172580254E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9956651835224083	WITHOUT_CLASSIFICATION	0.004334816477591663	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998651395970429	WITHOUT_CLASSIFICATION	1.348604029570158E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999932689338489	WITHOUT_CLASSIFICATION	6.731066151062526E-6	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999708550976858	WITHOUT_CLASSIFICATION	2.9144902314185877E-5	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9929601950997156	WITHOUT_CLASSIFICATION	0.007039804900284412	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999672985673388	WITHOUT_CLASSIFICATION	3.270143266115658E-5	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999885670090882	WITHOUT_CLASSIFICATION	1.1432990911821552E-5	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999173361620953	WITHOUT_CLASSIFICATION	8.266383790458494E-5	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996979621954264	WITHOUT_CLASSIFICATION	3.020378045736916E-4	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999869515491743	WITHOUT_CLASSIFICATION	1.3048450825725522E-5	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999063272653583	WITHOUT_CLASSIFICATION	9.367273464159252E-5	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999920378168708	WITHOUT_CLASSIFICATION	7.962183129172787E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.999684694782852	WITHOUT_CLASSIFICATION	3.153052171478918E-4	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9913875646062844	WITHOUT_CLASSIFICATION	0.008612435393715583	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992302747738	WITHOUT_CLASSIFICATION	7.697252261996257E-7	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9723335427365061	WITHOUT_CLASSIFICATION	0.027666457263493927	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999965006736925	WITHOUT_CLASSIFICATION	3.499326307424211E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999998898672818	WITHOUT_CLASSIFICATION	1.1013271819731434E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999692168466766	WITHOUT_CLASSIFICATION	3.078315332330648E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999998898672818	WITHOUT_CLASSIFICATION	1.1013271819731434E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999966594236901	WITHOUT_CLASSIFICATION	3.3405763098772714E-6	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999710878766525	WITHOUT_CLASSIFICATION	2.891212334756226E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9975990821426011	WITHOUT_CLASSIFICATION	0.0024009178573988483	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9998991975785977	WITHOUT_CLASSIFICATION	1.0080242140232482E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999965006736925	WITHOUT_CLASSIFICATION	3.499326307424211E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999692168466766	WITHOUT_CLASSIFICATION	3.078315332330648E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999966594236901	WITHOUT_CLASSIFICATION	3.3405763098772714E-6	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999887997528847	WITHOUT_CLASSIFICATION	1.1200247115293041E-4	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999631400254956	WITHOUT_CLASSIFICATION	3.685997450437028E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.999995284442335	WITHOUT_CLASSIFICATION	4.71555766505073E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999931484281203	WITHOUT_CLASSIFICATION	6.851571879731847E-6	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9993354133543141	WITHOUT_CLASSIFICATION	6.645866456858839E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999902107062	WITHOUT_CLASSIFICATION	9.789293888347715E-9	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985517173692633	WITHOUT_CLASSIFICATION	0.0014482826307367705	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999710878766525	WITHOUT_CLASSIFICATION	2.891212334756226E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998785991600898	WITHOUT_CLASSIFICATION	1.2140083991017327E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9997415476992872	WITHOUT_CLASSIFICATION	2.584523007127364E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999940169426019	WITHOUT_CLASSIFICATION	5.9830573980005796E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985517173692633	WITHOUT_CLASSIFICATION	0.0014482826307367705	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999857392235907	WITHOUT_CLASSIFICATION	1.4260776409245071E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985517173692633	WITHOUT_CLASSIFICATION	0.0014482826307367705	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999917743338251	WITHOUT_CLASSIFICATION	8.225666174874394E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.999999819428894	WITHOUT_CLASSIFICATION	1.805711059781761E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9997673728882848	WITHOUT_CLASSIFICATION	2.3262711171516767E-4	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999970031479894	WITHOUT_CLASSIFICATION	2.9968520104882516E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999994086706429	WITHOUT_CLASSIFICATION	5.913293571227465E-7	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999724366055321	WITHOUT_CLASSIFICATION	2.7563394467810298E-5	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999887165564174	WITHOUT_CLASSIFICATION	1.128344358256889E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9994803274495387	WITHOUT_CLASSIFICATION	5.196725504612717E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999983352843882	WITHOUT_CLASSIFICATION	1.664715611911032E-6	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999493256205605	WITHOUT_CLASSIFICATION	5.0674379439535716E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99999418096537	WITHOUT_CLASSIFICATION	5.819034630025838E-6	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9995746323077169	WITHOUT_CLASSIFICATION	4.2536769228307007E-4	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9938362077955494	WITHOUT_CLASSIFICATION	0.006163792204450642	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999871637049073	WITHOUT_CLASSIFICATION	1.2836295092721658E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9981320350191369	WITHOUT_CLASSIFICATION	0.0018679649808631274	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999529424351029	WITHOUT_CLASSIFICATION	4.705756489707263E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999940869458435	WITHOUT_CLASSIFICATION	5.913054156524426E-6	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999995045406578	WITHOUT_CLASSIFICATION	4.95459342193097E-7	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9996748322651271	WITHOUT_CLASSIFICATION	3.251677348728554E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999640129135651	WITHOUT_CLASSIFICATION	3.598708643482954E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9038839915391326	WITHOUT_CLASSIFICATION	0.09611600846086742	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999858278618189	WITHOUT_CLASSIFICATION	1.4172138181149024E-5	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9966634438739657	WITHOUT_CLASSIFICATION	0.003336556126034375	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9872807524089912	WITHOUT_CLASSIFICATION	0.012719247591008825	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999977698973508	WITHOUT_CLASSIFICATION	2.2301026491426613E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999928758296306	WITHOUT_CLASSIFICATION	7.124170369414816E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999958593021692	WITHOUT_CLASSIFICATION	4.140697830865687E-6	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999506982720798	WITHOUT_CLASSIFICATION	4.930172792025373E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998647779527664	WITHOUT_CLASSIFICATION	1.3522204723368617E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998661390317	WITHOUT_CLASSIFICATION	1.3386096827312239E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999838059482062	WITHOUT_CLASSIFICATION	1.619405179374125E-5	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999983988355098	WITHOUT_CLASSIFICATION	1.6011644901086213E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9989455312670766	WITHOUT_CLASSIFICATION	0.0010544687329233783	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999548986489875	WITHOUT_CLASSIFICATION	4.510135101261365E-5	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9980826616114576	WITHOUT_CLASSIFICATION	0.0019173383885422632	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999266618347	WITHOUT_CLASSIFICATION	7.333816533753534E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999343035956604	WITHOUT_CLASSIFICATION	6.569640433955312E-5	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9998984848726397	WITHOUT_CLASSIFICATION	1.015151273603563E-4	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9970398806884961	WITHOUT_CLASSIFICATION	0.0029601193115038208	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9965615325005608	WITHOUT_CLASSIFICATION	0.0034384674994392727	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9931909193464782	WITHOUT_CLASSIFICATION	0.006809080653521764	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995300956839	WITHOUT_CLASSIFICATION	4.6990431617606186E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9765824853570692	WITHOUT_CLASSIFICATION	0.023417514642930834	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999620128854961	WITHOUT_CLASSIFICATION	3.798711450384641E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999620128854961	WITHOUT_CLASSIFICATION	3.798711450384641E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9998822194209581	WITHOUT_CLASSIFICATION	1.1778057904181936E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9994803274495387	WITHOUT_CLASSIFICATION	5.196725504612717E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9767388332414402	WITHOUT_CLASSIFICATION	0.02326116675855981	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999653785951	WITHOUT_CLASSIFICATION	3.462140483046157E-8	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999970075258634	WITHOUT_CLASSIFICATION	2.992474136672879E-6	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999325686119481	WITHOUT_CLASSIFICATION	6.743138805180973E-5	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998046454827476	WITHOUT_CLASSIFICATION	1.9535451725239954E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998992979974086	WITHOUT_CLASSIFICATION	1.007020025914237E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999924378337553	WITHOUT_CLASSIFICATION	7.562166244702143E-5	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.8927780991527425	WITHOUT_CLASSIFICATION	0.1072219008472575	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999982980032469	WITHOUT_CLASSIFICATION	1.7019967530239786E-6	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999735459985148	WITHOUT_CLASSIFICATION	2.6454001485150796E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.8592915711185616	WITHOUT_CLASSIFICATION	0.14070842888143847	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999952723373349	WITHOUT_CLASSIFICATION	4.72766266515092E-6	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999956928070906	WITHOUT_CLASSIFICATION	4.3071929095517255E-6	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999999899886693	WITHOUT_CLASSIFICATION	1.001133069198494E-7	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999998407950244	WITHOUT_CLASSIFICATION	1.592049756156545E-7	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999328757572	WITHOUT_CLASSIFICATION	6.712424288713693E-8	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999967669924285	WITHOUT_CLASSIFICATION	3.2330075714524556E-6	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9873486552674741	WITHOUT_CLASSIFICATION	0.012651344732525943	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998179469732	WITHOUT_CLASSIFICATION	1.8205302672074495E-7	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999472670387871	WITHOUT_CLASSIFICATION	5.27329612129229E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999933627395213	WITHOUT_CLASSIFICATION	6.6372604786455305E-6	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999663572952	WITHOUT_CLASSIFICATION	3.3642704809007425E-8	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9931909193464782	WITHOUT_CLASSIFICATION	0.006809080653521764	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999256854462331	WITHOUT_CLASSIFICATION	7.431455376694336E-5	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9988702678966609	WITHOUT_CLASSIFICATION	0.0011297321033391123	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.999999929718771	WITHOUT_CLASSIFICATION	7.028122887744242E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999877838618365	WITHOUT_CLASSIFICATION	1.2216138163414764E-5	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.999984943367983	WITHOUT_CLASSIFICATION	1.5056632016899366E-5	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999858867254859	WITHOUT_CLASSIFICATION	1.4113274514016426E-5	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999987341964318	WITHOUT_CLASSIFICATION	1.2658035680825595E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999972691422354	WITHOUT_CLASSIFICATION	2.730857764592967E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999778063273327	WITHOUT_CLASSIFICATION	2.2193672667332154E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999440647763799	WITHOUT_CLASSIFICATION	5.593522362008368E-5	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999919261500555	WITHOUT_CLASSIFICATION	8.073849944529722E-6	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999575379535	WITHOUT_CLASSIFICATION	4.246204648792413E-8	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9971646884714548	WITHOUT_CLASSIFICATION	0.002835311528545166	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998666869126892	WITHOUT_CLASSIFICATION	1.3331308731086595E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999893496310857	WITHOUT_CLASSIFICATION	1.0650368914376864E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999893496310857	WITHOUT_CLASSIFICATION	1.0650368914376864E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999962551282598	WITHOUT_CLASSIFICATION	3.7448717401460627E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999687667470232	WITHOUT_CLASSIFICATION	3.1233252976816704E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999768246409055	WITHOUT_CLASSIFICATION	2.3175359094479782E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999768246409055	WITHOUT_CLASSIFICATION	2.3175359094479782E-5	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999838737901271	WITHOUT_CLASSIFICATION	1.6126209872924718E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997162438243024	WITHOUT_CLASSIFICATION	2.837561756975855E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8910318422841257	WITHOUT_CLASSIFICATION	0.10896815771587433	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9943714973918539	WITHOUT_CLASSIFICATION	0.005628502608146033	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999992413736928	WITHOUT_CLASSIFICATION	7.586263072434034E-7	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998982239393	WITHOUT_CLASSIFICATION	1.0177606070834372E-7	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997194968026	WITHOUT_CLASSIFICATION	2.805031975410373E-7	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997194968026	WITHOUT_CLASSIFICATION	2.805031975410373E-7	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999629665962	WITHOUT_CLASSIFICATION	3.7033403868819354E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999795941084756	WITHOUT_CLASSIFICATION	2.0405891524339757E-5	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999992165249395	WITHOUT_CLASSIFICATION	7.834750605416974E-7	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999998215806529	WITHOUT_CLASSIFICATION	1.7841934709785478E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999998215806529	WITHOUT_CLASSIFICATION	1.7841934709785478E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999998532331255	WITHOUT_CLASSIFICATION	1.46766874636523E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999992904896987	WITHOUT_CLASSIFICATION	7.095103012942521E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999346181377081	WITHOUT_CLASSIFICATION	6.538186229180631E-5	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999994157581278	WITHOUT_CLASSIFICATION	5.842418721806423E-7	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9995943441293547	WITHOUT_CLASSIFICATION	4.056558706453423E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999943542148751	WITHOUT_CLASSIFICATION	5.645785124800008E-6	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999195986586527	WITHOUT_CLASSIFICATION	8.040134134739006E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999899731628015	WITHOUT_CLASSIFICATION	1.0026837198412997E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9998881212445381	WITHOUT_CLASSIFICATION	1.1187875546195438E-4	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9990761419527402	WITHOUT_CLASSIFICATION	9.238580472597625E-4	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9992595718916158	WITHOUT_CLASSIFICATION	7.404281083841267E-4	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9896590453759392	WITHOUT_CLASSIFICATION	0.010340954624060848	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9997534925377023	WITHOUT_CLASSIFICATION	2.4650746229771327E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9998774446740025	WITHOUT_CLASSIFICATION	1.225553259974592E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999980844210261	WITHOUT_CLASSIFICATION	1.915578973920012E-6	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999779641816	WITHOUT_CLASSIFICATION	2.2035818382229538E-8	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9993171528774739	WITHOUT_CLASSIFICATION	6.828471225261952E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999834804355401	WITHOUT_CLASSIFICATION	1.6519564459871943E-5	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999941211284951	WITHOUT_CLASSIFICATION	5.878871504892524E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999877236122142	WITHOUT_CLASSIFICATION	1.2276387785852655E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999847502601572	WITHOUT_CLASSIFICATION	1.5249739842752159E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9907965068066421	WITHOUT_CLASSIFICATION	0.009203493193357892	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9885010536756738	WITHOUT_CLASSIFICATION	0.011498946324326246	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999988090924252	WITHOUT_CLASSIFICATION	1.1909075747799353E-6	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9948129023407647	WITHOUT_CLASSIFICATION	0.005187097659235294	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999091779756931	WITHOUT_CLASSIFICATION	9.082202430684773E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999970412551583	WITHOUT_CLASSIFICATION	2.958744841633921E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999518099129523	WITHOUT_CLASSIFICATION	4.819008704761314E-5	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999998153004765	WITHOUT_CLASSIFICATION	1.8469952352921446E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998938617544768	WITHOUT_CLASSIFICATION	1.0613824552320565E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999616244564893	WITHOUT_CLASSIFICATION	3.837554351070496E-4	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999124452033897	WITHOUT_CLASSIFICATION	8.755479661035306E-5	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999932378893382	WITHOUT_CLASSIFICATION	6.76211066183036E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998349116398924	WITHOUT_CLASSIFICATION	1.6508836010756706E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999286162217481	WITHOUT_CLASSIFICATION	7.138377825189159E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9993336842524406	WITHOUT_CLASSIFICATION	6.663157475593755E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9990993314485619	WITHOUT_CLASSIFICATION	9.006685514381257E-4	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999995108009804	WITHOUT_CLASSIFICATION	4.891990196014391E-7	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999992685652923	WITHOUT_CLASSIFICATION	7.31434707612714E-7	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999934759588294	WITHOUT_CLASSIFICATION	6.524041170601819E-5	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9997812640245859	WITHOUT_CLASSIFICATION	2.18735975414106E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999984794069778	WITHOUT_CLASSIFICATION	1.5205930221982638E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999986572156703	WITHOUT_CLASSIFICATION	1.3427843296712818E-6	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999430452426764	WITHOUT_CLASSIFICATION	5.695475732368307E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999989604665914	WITHOUT_CLASSIFICATION	1.039533408563849E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999992796076503	WITHOUT_CLASSIFICATION	7.203923497641812E-7	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.999995651175485	WITHOUT_CLASSIFICATION	4.348824515044376E-6	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.99900573714875	WITHOUT_CLASSIFICATION	9.942628512499938E-4	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9998269572792521	WITHOUT_CLASSIFICATION	1.730427207478822E-4	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999986436344748	WITHOUT_CLASSIFICATION	1.35636552521373E-6	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9996796667377162	WITHOUT_CLASSIFICATION	3.20333262283819E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999244259347541	WITHOUT_CLASSIFICATION	7.55740652458813E-5	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999747776015623	WITHOUT_CLASSIFICATION	2.522239843767387E-5	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.999999997568907	WITHOUT_CLASSIFICATION	2.431092938457255E-9	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999918261954178	WITHOUT_CLASSIFICATION	8.173804582120229E-6	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999017739484345	WITHOUT_CLASSIFICATION	9.822605156553357E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999482892255258	WITHOUT_CLASSIFICATION	5.1710774474229856E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999764225743767	WITHOUT_CLASSIFICATION	2.3577425623280765E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999900312975891	WITHOUT_CLASSIFICATION	9.968702410913523E-6	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999991671505971	WITHOUT_CLASSIFICATION	8.328494030026238E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999980277160486	WITHOUT_CLASSIFICATION	1.97228395140284E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999980277160486	WITHOUT_CLASSIFICATION	1.97228395140284E-6	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999975573455	WITHOUT_CLASSIFICATION	2.442654500428396E-8	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9997155552445068	WITHOUT_CLASSIFICATION	2.8444475549318935E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999717832886	WITHOUT_CLASSIFICATION	2.821671140494983E-7	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9999631606306209	WITHOUT_CLASSIFICATION	3.683936937905465E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999914820712	WITHOUT_CLASSIFICATION	8.517928704165E-9	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999524330609855	WITHOUT_CLASSIFICATION	4.756693901454107E-5	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999993732236412	WITHOUT_CLASSIFICATION	6.267763588230492E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999997287423361	WITHOUT_CLASSIFICATION	2.7125766390345275E-7	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999706546057	WITHOUT_CLASSIFICATION	2.9345394330095243E-8	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999998382437979	WITHOUT_CLASSIFICATION	1.6175620209563124E-7	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999936999797229	WITHOUT_CLASSIFICATION	6.3000202771599406E-6	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999665528884872	WITHOUT_CLASSIFICATION	3.34471115126839E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999982972411	WITHOUT_CLASSIFICATION	1.7027589232356578E-9	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999032813129989	WITHOUT_CLASSIFICATION	9.67186870010554E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999647510962656	WITHOUT_CLASSIFICATION	3.5248903734402766E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999647510962656	WITHOUT_CLASSIFICATION	3.5248903734402766E-4	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999994425765859	WITHOUT_CLASSIFICATION	5.574234141332379E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999957852994446	WITHOUT_CLASSIFICATION	4.214700555427511E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999993035954066	WITHOUT_CLASSIFICATION	6.964045935080647E-7	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999978111612904	WITHOUT_CLASSIFICATION	2.188838709576571E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999982090547387	WITHOUT_CLASSIFICATION	1.7909452613722458E-6	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972212021748	WITHOUT_CLASSIFICATION	2.778797825205851E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999907163642395	WITHOUT_CLASSIFICATION	9.283635760495236E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9420431715533185	WITHOUT_CLASSIFICATION	0.057956828446681596	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999983897917425	WITHOUT_CLASSIFICATION	1.6102082574461956E-6	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999705000728878	WITHOUT_CLASSIFICATION	2.949992711225603E-5	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999998118379103	WITHOUT_CLASSIFICATION	1.881620896410662E-7	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999945657193569	WITHOUT_CLASSIFICATION	5.434280643076366E-6	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999997905997857	WITHOUT_CLASSIFICATION	2.0940021425733514E-7	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999534611155597	WITHOUT_CLASSIFICATION	4.653888444018261E-5	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.998681256528073	WITHOUT_CLASSIFICATION	0.0013187434719269416	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9990879287578807	WITHOUT_CLASSIFICATION	9.120712421193761E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.801830464482499	DESIGN	0.19816953551750105	WITHOUT_CLASSIFICATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999397556243782	WITHOUT_CLASSIFICATION	6.0244375621719006E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999994329164102	WITHOUT_CLASSIFICATION	5.670835897136553E-7	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999942524265	WITHOUT_CLASSIFICATION	5.74757353720672E-9	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999340484308629	WITHOUT_CLASSIFICATION	6.595156913704877E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998805050475	WITHOUT_CLASSIFICATION	1.1949495257971825E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9847303303916165	WITHOUT_CLASSIFICATION	0.015269669608383473	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9999278921029586	WITHOUT_CLASSIFICATION	7.210789704143319E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9897519484914599	WITHOUT_CLASSIFICATION	0.01024805150854011	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9986688743355957	WITHOUT_CLASSIFICATION	0.0013311256644043155	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999975593193	WITHOUT_CLASSIFICATION	2.440680629026219E-9	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.998924289108209	WITHOUT_CLASSIFICATION	0.0010757108917910083	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999994510175352	WITHOUT_CLASSIFICATION	5.4898246472274E-7	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9988374706324906	WITHOUT_CLASSIFICATION	0.0011625293675093281	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9952025128461717	WITHOUT_CLASSIFICATION	0.004797487153828357	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999605832601	WITHOUT_CLASSIFICATION	3.941673990536171E-8	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999961121491442	WITHOUT_CLASSIFICATION	3.887850855767569E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999982659407136	WITHOUT_CLASSIFICATION	1.7340592864724211E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.9921148500340206	WITHOUT_CLASSIFICATION	0.007885149965979367	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999985497514465	WITHOUT_CLASSIFICATION	1.4502485534148068E-6	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999999519167819	WITHOUT_CLASSIFICATION	4.808321809747456E-7	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.999999606062973	WITHOUT_CLASSIFICATION	3.939370269241317E-7	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999998281197058	WITHOUT_CLASSIFICATION	1.7188029424071428E-7	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9138739554046194	WITHOUT_CLASSIFICATION	0.0861260445953807	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998670088938147	WITHOUT_CLASSIFICATION	1.3299110618528499E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998670088938147	WITHOUT_CLASSIFICATION	1.3299110618528499E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999996207453733	WITHOUT_CLASSIFICATION	3.792546266875469E-7	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9952443976850431	WITHOUT_CLASSIFICATION	0.004755602314956862	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.6639235855670598	WITHOUT_CLASSIFICATION	0.33607641443294023	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9999274157574753	WITHOUT_CLASSIFICATION	7.258424252472279E-5	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999985048852503	WITHOUT_CLASSIFICATION	1.4951147497073228E-5	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999951422543022	WITHOUT_CLASSIFICATION	4.857745697784717E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9992029832642368	WITHOUT_CLASSIFICATION	7.970167357631107E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999795691376926	WITHOUT_CLASSIFICATION	2.0430862307441576E-5	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9909047596986098	DESIGN	0.009095240301390209	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998963671212	WITHOUT_CLASSIFICATION	1.0363287880765807E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998898152653	WITHOUT_CLASSIFICATION	1.1018473457255308E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9981424558461096	WITHOUT_CLASSIFICATION	0.0018575441538903608	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999944210315301	WITHOUT_CLASSIFICATION	5.578968469896174E-6	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999998040207154	WITHOUT_CLASSIFICATION	1.959792844849335E-7	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9981670822580324	WITHOUT_CLASSIFICATION	0.0018329177419675877	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9937022551145228	WITHOUT_CLASSIFICATION	0.0062977448854771145	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999535056788565	WITHOUT_CLASSIFICATION	4.6494321143469855E-5	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999996288949538	WITHOUT_CLASSIFICATION	3.711050462097251E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999875134673654	WITHOUT_CLASSIFICATION	1.248653263457967E-5	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999997475197858	WITHOUT_CLASSIFICATION	2.5248021420186466E-7	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9628236335076216	WITHOUT_CLASSIFICATION	0.037176366492378383	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999928947623065	WITHOUT_CLASSIFICATION	7.105237693525837E-6	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999876298792288	WITHOUT_CLASSIFICATION	1.2370120771106137E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9973470658540609	WITHOUT_CLASSIFICATION	0.002652934145939191	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999990560443411	WITHOUT_CLASSIFICATION	9.439556589111953E-7	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999292815829188	WITHOUT_CLASSIFICATION	7.071841708117058E-5	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9997246242130104	WITHOUT_CLASSIFICATION	2.75375786989589E-4	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999879071181	WITHOUT_CLASSIFICATION	1.2092881845027821E-8	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9995097692772521	WITHOUT_CLASSIFICATION	4.902307227479245E-4	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9985823399045166	WITHOUT_CLASSIFICATION	0.0014176600954833834	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9996683020931006	WITHOUT_CLASSIFICATION	3.3169790689938154E-4	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999785134953467	WITHOUT_CLASSIFICATION	2.1486504653306042E-5	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999998887048601	WITHOUT_CLASSIFICATION	1.1129513979911167E-7	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999787033341918	WITHOUT_CLASSIFICATION	2.129666580812694E-5	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999962326900823	WITHOUT_CLASSIFICATION	3.767309917577886E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999730230914347	WITHOUT_CLASSIFICATION	2.6976908565300876E-5	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999969301911865	WITHOUT_CLASSIFICATION	3.069808813491209E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999819021577	WITHOUT_CLASSIFICATION	1.8097842354383928E-8	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9887468283613173	WITHOUT_CLASSIFICATION	0.011253171638682582	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.999969129595302	WITHOUT_CLASSIFICATION	3.0870404697875534E-5	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999991185910596	WITHOUT_CLASSIFICATION	8.814089404022906E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999361944113265	WITHOUT_CLASSIFICATION	6.380558867338887E-5	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999999904112757	WITHOUT_CLASSIFICATION	9.588724296536528E-8	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999944706846187	WITHOUT_CLASSIFICATION	5.529315381298486E-6	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999867814698992	WITHOUT_CLASSIFICATION	1.3218530100696906E-5	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9960530478254702	WITHOUT_CLASSIFICATION	0.003946952174529756	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999977389540452	WITHOUT_CLASSIFICATION	2.2610459548933755E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999982972411	WITHOUT_CLASSIFICATION	1.7027589232356578E-9	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999894449527	WITHOUT_CLASSIFICATION	1.0555047335571982E-8	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999864719297722	WITHOUT_CLASSIFICATION	1.3528070227713178E-5	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9774123622472419	WITHOUT_CLASSIFICATION	0.022587637752758127	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.5403306943138393	DESIGN	0.45966930568616055	WITHOUT_CLASSIFICATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999778472699	WITHOUT_CLASSIFICATION	2.215273009561127E-8	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999971687855594	WITHOUT_CLASSIFICATION	2.8312144406275468E-6	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9987319566855286	WITHOUT_CLASSIFICATION	0.0012680433144714044	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999998612241849	WITHOUT_CLASSIFICATION	1.387758150609294E-7	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996957335543	WITHOUT_CLASSIFICATION	3.0426644573663933E-7	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999854481378833	WITHOUT_CLASSIFICATION	1.4551862116726949E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9997000903906521	WITHOUT_CLASSIFICATION	2.999096093478684E-4	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9999252892253134	WITHOUT_CLASSIFICATION	7.471077468652819E-5	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999919826464497	WITHOUT_CLASSIFICATION	8.017353550231366E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998450606083	WITHOUT_CLASSIFICATION	1.5493939159293735E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690678250734	WITHOUT_CLASSIFICATION	3.0932174926662065E-5	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999993013235294	WITHOUT_CLASSIFICATION	6.986764706041474E-7	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.999999900652164	WITHOUT_CLASSIFICATION	9.934783600485683E-8	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998674164659832	WITHOUT_CLASSIFICATION	1.3258353401683555E-4	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9896724601050898	WITHOUT_CLASSIFICATION	0.010327539894910191	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690678250734	WITHOUT_CLASSIFICATION	3.0932174926662065E-5	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9992710532636743	WITHOUT_CLASSIFICATION	7.289467363257346E-4	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999974114957181	WITHOUT_CLASSIFICATION	2.5885042819616382E-6	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9991557017184758	WITHOUT_CLASSIFICATION	8.442982815242333E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999989585056147	WITHOUT_CLASSIFICATION	1.0414943852907436E-6	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999598136029074	WITHOUT_CLASSIFICATION	4.0186397092581166E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999925390273041	WITHOUT_CLASSIFICATION	7.460972695864928E-6	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9982013573998867	WITHOUT_CLASSIFICATION	0.0017986426001132159	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.983853173707591	DESIGN	0.016146826292409055	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999987270888	WITHOUT_CLASSIFICATION	1.272911201936409E-9	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991714128932	WITHOUT_CLASSIFICATION	8.285871068217968E-7	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9997844124341987	WITHOUT_CLASSIFICATION	2.1558756580129532E-4	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.999948206836713	WITHOUT_CLASSIFICATION	5.179316328700963E-5	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999890509374477	WITHOUT_CLASSIFICATION	1.094906255222437E-5	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999977931867113	WITHOUT_CLASSIFICATION	2.2068132886890474E-6	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.999993352906945	WITHOUT_CLASSIFICATION	6.647093054927008E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999663572952	WITHOUT_CLASSIFICATION	3.3642704809007425E-8	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999971440662	WITHOUT_CLASSIFICATION	2.855933915143555E-9	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999999167941551	WITHOUT_CLASSIFICATION	8.320584493422992E-8	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9993510978443306	WITHOUT_CLASSIFICATION	6.489021556693241E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9960728343945804	WITHOUT_CLASSIFICATION	0.003927165605419675	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999973817518827	WITHOUT_CLASSIFICATION	2.6182481173208693E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999975073405015	WITHOUT_CLASSIFICATION	2.4926594984437924E-6	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999975716973529	WITHOUT_CLASSIFICATION	2.428302647136453E-6	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999989909060242	WITHOUT_CLASSIFICATION	1.0090939758084901E-5	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999884697105	WITHOUT_CLASSIFICATION	1.1530289431459652E-8	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999778512377	WITHOUT_CLASSIFICATION	2.2148762274300124E-8	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.998494171921772	WITHOUT_CLASSIFICATION	0.0015058280782279123	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9978331180371787	WITHOUT_CLASSIFICATION	0.002166881962821367	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9895539233075643	WITHOUT_CLASSIFICATION	0.0104460766924358	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.627846515127609	DESIGN	0.372153484872391	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.9998536489863404	WITHOUT_CLASSIFICATION	1.463510136596828E-4	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.569839080368724	WITHOUT_CLASSIFICATION	0.43016091963127595	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9996321069521955	WITHOUT_CLASSIFICATION	3.6789304780449544E-4	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999707407753207	WITHOUT_CLASSIFICATION	2.925922467938936E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999922379987	WITHOUT_CLASSIFICATION	7.762001185410723E-9	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999963512439	WITHOUT_CLASSIFICATION	3.6487559890275047E-9	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9998430467506441	WITHOUT_CLASSIFICATION	1.5695324935596615E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9962598017546238	WITHOUT_CLASSIFICATION	0.003740198245376216	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999997340823628	WITHOUT_CLASSIFICATION	2.659176372534471E-7	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999962892545978	WITHOUT_CLASSIFICATION	3.710745402220973E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998680805964333	WITHOUT_CLASSIFICATION	1.3191940356667442E-4	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998680805964333	WITHOUT_CLASSIFICATION	1.3191940356667442E-4	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999414150209864	WITHOUT_CLASSIFICATION	5.858497901360967E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999965092777915	WITHOUT_CLASSIFICATION	3.490722208478079E-6	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999960961161343	WITHOUT_CLASSIFICATION	3.903883865788033E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9536600626601272	DESIGN	0.04633993733987282	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999994126734962	WITHOUT_CLASSIFICATION	5.873265037591843E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994126734962	WITHOUT_CLASSIFICATION	5.873265037591843E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999991527074613	WITHOUT_CLASSIFICATION	8.472925386955366E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999961927170906	WITHOUT_CLASSIFICATION	3.8072829094717123E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999683919999736	WITHOUT_CLASSIFICATION	3.160800002649016E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999987599537204	WITHOUT_CLASSIFICATION	1.240046279598648E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999880647189832	WITHOUT_CLASSIFICATION	1.1935281016954217E-5	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999923132326214	WITHOUT_CLASSIFICATION	7.686767378672625E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999999449965282	WITHOUT_CLASSIFICATION	5.500347186313708E-8	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999988777753015	WITHOUT_CLASSIFICATION	1.1222246985511294E-6	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999978429588385	WITHOUT_CLASSIFICATION	2.157041161355056E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997836037193	WITHOUT_CLASSIFICATION	2.163962805964181E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997836037193	WITHOUT_CLASSIFICATION	2.163962805964181E-7	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995996384023691	WITHOUT_CLASSIFICATION	4.003615976309576E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999970668768735	WITHOUT_CLASSIFICATION	2.9331231265655077E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999885948864479	WITHOUT_CLASSIFICATION	1.1405113552135051E-5	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9777067433260975	WITHOUT_CLASSIFICATION	0.02229325667390252	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9882886208229152	WITHOUT_CLASSIFICATION	0.011711379177084725	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9970294100410072	WITHOUT_CLASSIFICATION	0.0029705899589928613	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975249570683	WITHOUT_CLASSIFICATION	2.4750429317089712E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999974584071745	WITHOUT_CLASSIFICATION	2.5415928255337854E-6	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999738067495313	WITHOUT_CLASSIFICATION	2.619325046868521E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9818103711372739	WITHOUT_CLASSIFICATION	0.018189628862726216	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.7380587306661005	WITHOUT_CLASSIFICATION	0.2619412693338995	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999991714128932	WITHOUT_CLASSIFICATION	8.285871068217968E-7	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9972926844119471	WITHOUT_CLASSIFICATION	0.002707315588052939	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999752137474046	WITHOUT_CLASSIFICATION	2.478625259540182E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.999399049613773	WITHOUT_CLASSIFICATION	6.00950386227005E-4	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999671727887818	WITHOUT_CLASSIFICATION	3.282721121825252E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999416721883	WITHOUT_CLASSIFICATION	5.832781161881852E-8	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999365912303935	WITHOUT_CLASSIFICATION	6.340876960644904E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.978962034129434	WITHOUT_CLASSIFICATION	0.021037965870566017	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9999859471154975	WITHOUT_CLASSIFICATION	1.4052884502425153E-5	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999889964566544	WITHOUT_CLASSIFICATION	1.1003543345575402E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9986390257375409	WITHOUT_CLASSIFICATION	0.0013609742624591044	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9986390257375409	WITHOUT_CLASSIFICATION	0.0013609742624591044	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999421416218275	WITHOUT_CLASSIFICATION	5.7858378172580254E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999978824988	WITHOUT_CLASSIFICATION	2.1175012608412576E-9	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9994690265595821	WITHOUT_CLASSIFICATION	5.309734404177354E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9995345171933474	WITHOUT_CLASSIFICATION	4.6548280665259723E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999990060125462	WITHOUT_CLASSIFICATION	9.93987453815239E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999059098168033	WITHOUT_CLASSIFICATION	9.409018319671198E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999992302747738	WITHOUT_CLASSIFICATION	7.697252261996257E-7	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998508521082606	WITHOUT_CLASSIFICATION	1.491478917393284E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999887997528847	WITHOUT_CLASSIFICATION	1.1200247115293041E-4	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999547211059061	WITHOUT_CLASSIFICATION	4.527889409388608E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985517173692633	WITHOUT_CLASSIFICATION	0.0014482826307367705	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999153595259226	DESIGN	8.464047407735748E-5	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8460052928151363	DESIGN	0.15399470718486374	WITHOUT_CLASSIFICATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999990223878	WITHOUT_CLASSIFICATION	9.776123164139304E-10	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9406484936651175	DESIGN	0.05935150633488248	WITHOUT_CLASSIFICATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996758081747337	WITHOUT_CLASSIFICATION	3.2419182526638294E-4	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9797147750701327	DESIGN	0.0202852249298672	WITHOUT_CLASSIFICATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999230251935	WITHOUT_CLASSIFICATION	7.697480649120548E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9996294643923946	WITHOUT_CLASSIFICATION	3.7053560760539413E-4	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9997979980235089	WITHOUT_CLASSIFICATION	2.0200197649111637E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999998832629602	WITHOUT_CLASSIFICATION	1.1673703981665914E-7	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9977951812644027	WITHOUT_CLASSIFICATION	0.002204818735597315	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999346181377081	WITHOUT_CLASSIFICATION	6.538186229180631E-5	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999999433679	WITHOUT_CLASSIFICATION	5.663210685518075E-11	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999986093635482	WITHOUT_CLASSIFICATION	1.390636451751768E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999986093635482	WITHOUT_CLASSIFICATION	1.390636451751768E-6	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997139107671003	WITHOUT_CLASSIFICATION	2.860892328996861E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9993958633464133	WITHOUT_CLASSIFICATION	6.041366535866562E-4	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999666077365694	WITHOUT_CLASSIFICATION	3.339226343058021E-5	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9992248481881426	WITHOUT_CLASSIFICATION	7.751518118573814E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999670114800369	WITHOUT_CLASSIFICATION	3.298851996302808E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9610315411194659	WITHOUT_CLASSIFICATION	0.03896845888053417	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8421809080087621	DESIGN	0.15781909199123792	WITHOUT_CLASSIFICATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9408362701972922	WITHOUT_CLASSIFICATION	0.05916372980270774	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.610903205286335	WITHOUT_CLASSIFICATION	0.38909679471366515	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.610903205286335	WITHOUT_CLASSIFICATION	0.38909679471366515	DESIGN
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9997272508123111	WITHOUT_CLASSIFICATION	2.7274918768892395E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999987107074316	WITHOUT_CLASSIFICATION	1.2892925683613464E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9998850970668185	WITHOUT_CLASSIFICATION	1.1490293318152014E-4	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999498131393153	DESIGN	5.01868606848069E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999498131393153	DESIGN	5.01868606848069E-5	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999995121359768	DESIGN	4.87864023199398E-7	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999995121359768	DESIGN	4.87864023199398E-7	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9917332697099446	DESIGN	0.008266730290055474	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9999129424928427	DESIGN	8.705750715733328E-5	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9999129424928427	DESIGN	8.705750715733328E-5	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999996380015223	DESIGN	3.6199847772333836E-7	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999987107074316	WITHOUT_CLASSIFICATION	1.2892925683613464E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9999290755119848	WITHOUT_CLASSIFICATION	7.092448801512825E-5	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9993781323320331	WITHOUT_CLASSIFICATION	6.218676679668718E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999948731420035	WITHOUT_CLASSIFICATION	5.126857996414151E-6	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9784364597727334	WITHOUT_CLASSIFICATION	0.021563540227266483	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.8066844475974122	WITHOUT_CLASSIFICATION	0.19331555240258785	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9596338932841931	WITHOUT_CLASSIFICATION	0.040366106715806815	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999715620809277	WITHOUT_CLASSIFICATION	2.8437919072232554E-5	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.7675863795837967	WITHOUT_CLASSIFICATION	0.23241362041620336	DESIGN
// todo : what else to do here?	DESIGN	0.9610315411194659	WITHOUT_CLASSIFICATION	0.03896845888053417	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9886190449303622	WITHOUT_CLASSIFICATION	0.011380955069637771	DESIGN
// todo : what else to do here?	DESIGN	0.9610315411194659	WITHOUT_CLASSIFICATION	0.03896845888053417	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.8115915428279569	WITHOUT_CLASSIFICATION	0.18840845717204313	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.7506169823559775	WITHOUT_CLASSIFICATION	0.24938301764402251	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9997673116735896	DESIGN	2.3268832641054442E-4	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.8421809080087621	DESIGN	0.15781909199123792	WITHOUT_CLASSIFICATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9352802061481179	DESIGN	0.06471979385188201	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9998998994164792	WITHOUT_CLASSIFICATION	1.0010058352087778E-4	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.8812294267381583	WITHOUT_CLASSIFICATION	0.11877057326184165	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.5723038699333369	WITHOUT_CLASSIFICATION	0.427696130066663	DESIGN
// todo : what is the implication of this?	DESIGN	0.9961520149969239	WITHOUT_CLASSIFICATION	0.0038479850030762376	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.8316654925444522	WITHOUT_CLASSIFICATION	0.1683345074555478	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9983077177532425	DESIGN	0.00169228224675756	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.6876275394923779	DESIGN	0.3123724605076222	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.998055383159443	WITHOUT_CLASSIFICATION	0.0019446168405570163	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.5352701297428858	DESIGN	0.4647298702571142	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9876207931601019	WITHOUT_CLASSIFICATION	0.012379206839898158	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9949698222783289	DESIGN	0.005030177721671205	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.8419772634811664	DESIGN	0.15802273651883358	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.7936179482950411	DESIGN	0.2063820517049589	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.742265471167121	DESIGN	0.25773452883287895	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999758931923781	DESIGN	2.4106807621835127E-5	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7833955627315841	DESIGN	0.216604437268416	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7833955627315841	DESIGN	0.216604437268416	WITHOUT_CLASSIFICATION
//Icky workaround for MySQL bug:	DESIGN	0.7454615537334186	DESIGN	0.2545384462665814	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9913055384544021	WITHOUT_CLASSIFICATION	0.008694461545597935	DESIGN
//TODO possibly relax that	DESIGN	0.7688831322650848	WITHOUT_CLASSIFICATION	0.23111686773491524	DESIGN
//TODO possibly relax that	DESIGN	0.7688831322650848	WITHOUT_CLASSIFICATION	0.23111686773491524	DESIGN
//TODO possibly relax that	DESIGN	0.7688831322650848	WITHOUT_CLASSIFICATION	0.23111686773491524	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.742265471167121	DESIGN	0.25773452883287895	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9997765945948056	WITHOUT_CLASSIFICATION	2.2340540519440755E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9999197894133913	WITHOUT_CLASSIFICATION	8.021058660860805E-5	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9846927287640925	WITHOUT_CLASSIFICATION	0.015307271235907395	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9973076991307788	WITHOUT_CLASSIFICATION	0.0026923008692212717	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.885754369490176	DESIGN	0.11424563050982395	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9833615509578666	WITHOUT_CLASSIFICATION	0.016638449042133498	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.610903205286335	WITHOUT_CLASSIFICATION	0.38909679471366515	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.610903205286335	WITHOUT_CLASSIFICATION	0.38909679471366515	DESIGN
//yuck!	DESIGN	0.9982985260747428	WITHOUT_CLASSIFICATION	0.0017014739252572233	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.610903205286335	WITHOUT_CLASSIFICATION	0.38909679471366515	DESIGN
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999994401658999	DESIGN	5.598341000206824E-7	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9998183175411897	WITHOUT_CLASSIFICATION	1.8168245881032457E-4	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.5743199475096828	WITHOUT_CLASSIFICATION	0.42568005249031704	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9992701251177513	WITHOUT_CLASSIFICATION	7.298748822486454E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9925746309706691	WITHOUT_CLASSIFICATION	0.007425369029330839	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9878353891301663	WITHOUT_CLASSIFICATION	0.012164610869833593	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.6842337545979124	WITHOUT_CLASSIFICATION	0.31576624540208764	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999991344949666	WITHOUT_CLASSIFICATION	8.655050335179959E-7	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9979802390158986	WITHOUT_CLASSIFICATION	0.0020197609841013852	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.8635750716345012	WITHOUT_CLASSIFICATION	0.13642492836549877	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9921430328491023	WITHOUT_CLASSIFICATION	0.007856967150897641	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9990675733005709	WITHOUT_CLASSIFICATION	9.324266994291768E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9994510135709207	WITHOUT_CLASSIFICATION	5.489864290793006E-4	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9941983062719704	WITHOUT_CLASSIFICATION	0.005801693728029538	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9977511805755341	WITHOUT_CLASSIFICATION	0.002248819424465994	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5505423659795521	DESIGN	0.449457634020448	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9998548617036267	WITHOUT_CLASSIFICATION	1.451382963734176E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.8101666461451331	WITHOUT_CLASSIFICATION	0.1898333538548668	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9936069858482898	DESIGN	0.006393014151710208	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.666844200189083	DESIGN	0.333155799810917	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.65720045142709	DESIGN	0.34279954857290995	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9970611768898054	WITHOUT_CLASSIFICATION	0.00293882311019448	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9985736832813407	WITHOUT_CLASSIFICATION	0.0014263167186593546	DESIGN
//I suppose?	DESIGN	0.9940191855864003	WITHOUT_CLASSIFICATION	0.005980814413599596	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.5098333096189274	WITHOUT_CLASSIFICATION	0.49016669038107263	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9164485731389644	WITHOUT_CLASSIFICATION	0.08355142686103559	DESIGN
//TODO:refactor + make this method private	DESIGN	0.654649603687457	DESIGN	0.34535039631254294	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9932917215399403	WITHOUT_CLASSIFICATION	0.006708278460059625	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9996458673423668	DESIGN	3.541326576332211E-4	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.543142110291018	WITHOUT_CLASSIFICATION	0.456857889708982	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9999846692497238	WITHOUT_CLASSIFICATION	1.533075027624132E-5	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9862822739405986	WITHOUT_CLASSIFICATION	0.013717726059401376	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9862822739405986	WITHOUT_CLASSIFICATION	0.013717726059401376	DESIGN
//TODO: temporary	DESIGN	0.9552017120940979	DESIGN	0.04479828790590214	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.6055908288239953	DESIGN	0.3944091711760048	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.6055908288239953	DESIGN	0.3944091711760048	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.8115372646264871	DESIGN	0.1884627353735128	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9806797104847974	WITHOUT_CLASSIFICATION	0.019320289515202645	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.6174403602389529	WITHOUT_CLASSIFICATION	0.38255963976104707	DESIGN
// todo : need map? the prob is a proper key, right?	DESIGN	0.9135476170545102	WITHOUT_CLASSIFICATION	0.08645238294548982	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.992550937118865	WITHOUT_CLASSIFICATION	0.007449062881135024	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.6758236956549659	DESIGN	0.3241763043450342	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.6597618921228603	WITHOUT_CLASSIFICATION	0.34023810787713976	DESIGN
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9986219160355209	DESIGN	0.0013780839644791235	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9998648224697605	DESIGN	1.351775302395521E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.8788760148554134	DESIGN	0.12112398514458662	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9589318425208264	DESIGN	0.04106815747917365	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.6796249741589747	DESIGN	0.3203750258410253	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.7668055572647675	WITHOUT_CLASSIFICATION	0.2331944427352326	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9998757683619632	DESIGN	1.242316380368363E-4	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9992678758564224	DESIGN	7.321241435776281E-4	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9234119620619142	WITHOUT_CLASSIFICATION	0.07658803793808576	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9980272715334135	WITHOUT_CLASSIFICATION	0.001972728466586523	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.6955057291406219	DESIGN	0.30449427085937814	WITHOUT_CLASSIFICATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9859119804758533	DESIGN	0.01408801952414684	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9829849817358038	WITHOUT_CLASSIFICATION	0.01701501826419619	DESIGN
//TODO: is this 100% correct?	DESIGN	0.6443818207490009	DESIGN	0.3556181792509993	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9992895716089122	WITHOUT_CLASSIFICATION	7.104283910878237E-4	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9985609422183284	DESIGN	0.001439057781671634	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9659674228346233	WITHOUT_CLASSIFICATION	0.03403257716537657	DESIGN
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999999963468894	DESIGN	3.6531105499290773E-9	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9073560257248231	DESIGN	0.09264397427517686	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9147201461897145	WITHOUT_CLASSIFICATION	0.08527985381028542	DESIGN
//TODO: merge into one method!	DESIGN	0.5691187467418657	WITHOUT_CLASSIFICATION	0.4308812532581344	DESIGN
//TODO: refactor to .sql package	DESIGN	0.9452316096707918	DESIGN	0.05476839032920821	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9973690834077331	DESIGN	0.0026309165922668736	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.991626609093963	DESIGN	0.008373390906036995	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9174444017586666	WITHOUT_CLASSIFICATION	0.08255559824133336	DESIGN
// TODO : better way?!?	DESIGN	0.9999987979661124	DESIGN	1.202033887727316E-6	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999990075590747	WITHOUT_CLASSIFICATION	9.924409252729366E-7	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9989929992402226	DESIGN	0.0010070007597773943	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999995345164863	DESIGN	4.654835137668998E-7	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999955568347336	DESIGN	4.443165266372501E-6	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.98754650976568	WITHOUT_CLASSIFICATION	0.012453490234319993	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9999816379238183	DESIGN	1.836207618157887E-5	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9995491074302463	WITHOUT_CLASSIFICATION	4.508925697537656E-4	DESIGN
//yuck!	DESIGN	0.9982985260747428	WITHOUT_CLASSIFICATION	0.0017014739252572233	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9759678147054659	WITHOUT_CLASSIFICATION	0.024032185294534058	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9999775951242774	DESIGN	2.2404875722648346E-5	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9997843734131241	WITHOUT_CLASSIFICATION	2.1562658687599432E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999991346108152	DESIGN	8.653891846319581E-7	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999861654092994	DESIGN	1.3834590700609955E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9998014463953168	DESIGN	1.9855360468322346E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.610903205286335	WITHOUT_CLASSIFICATION	0.38909679471366515	DESIGN
// yuck!	DESIGN	0.9999299033155786	WITHOUT_CLASSIFICATION	7.009668442139638E-5	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.999950475226782	WITHOUT_CLASSIFICATION	4.952477321798482E-5	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999941861144389	DESIGN	5.813885560992771E-6	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.7327518500351796	WITHOUT_CLASSIFICATION	0.26724814996482044	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.728071169147518	WITHOUT_CLASSIFICATION	0.27192883085248204	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9857482581228837	DESIGN	0.014251741877116258	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.8206670661417679	WITHOUT_CLASSIFICATION	0.17933293385823207	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999783183001111	DESIGN	2.1681699888935366E-5	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9999992642274198	DESIGN	7.357725803098516E-7	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9997657507504255	DESIGN	2.342492495746207E-4	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.960402575807118	DESIGN	0.039597424192882036	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9997759670379652	WITHOUT_CLASSIFICATION	2.240329620347109E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.663536094328539	WITHOUT_CLASSIFICATION	0.33646390567146106	DESIGN
//TODO: is there a better way?	DESIGN	0.9962037726187393	DESIGN	0.003796227381260816	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9448162607316031	WITHOUT_CLASSIFICATION	0.055183739268396995	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.6829165470114944	WITHOUT_CLASSIFICATION	0.31708345298850565	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9781324236461971	DESIGN	0.021867576353802848	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9995041185178647	WITHOUT_CLASSIFICATION	4.958814821353398E-4	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9832758652937925	DESIGN	0.016724134706207573	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.999986564449349	DESIGN	1.3435550650961568E-5	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999998432958511	DESIGN	1.5670414883168654E-7	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5279130561299514	DESIGN	0.47208694387004857	WITHOUT_CLASSIFICATION
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9997521850222296	DESIGN	2.478149777704667E-4	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.8139154933584347	DESIGN	0.1860845066415653	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9727882007941214	DESIGN	0.02721179920587853	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9831879810898194	WITHOUT_CLASSIFICATION	0.016812018910180523	DESIGN
// short-circuit for performance...	DESIGN	0.9994340618494292	WITHOUT_CLASSIFICATION	5.659381505708697E-4	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9670964159051488	WITHOUT_CLASSIFICATION	0.03290358409485104	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.8228299950008111	DESIGN	0.17717000499918892	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.9628525383866415	WITHOUT_CLASSIFICATION	0.03714746161335839	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999999868311	DESIGN	1.3169009482869501E-11	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.8981674065183327	DESIGN	0.10183259348166723	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9620454786357192	DESIGN	0.037954521364280874	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9536600626601272	DESIGN	0.04633993733987282	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9999809509392611	WITHOUT_CLASSIFICATION	1.9049060738842792E-5	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.5416794526586269	WITHOUT_CLASSIFICATION	0.4583205473413732	DESIGN
//This is not very nice (and quite slow):	DESIGN	0.9720395268552372	WITHOUT_CLASSIFICATION	0.027960473144762736	DESIGN
//use of trim() here is ugly?	DESIGN	0.9987522804885591	WITHOUT_CLASSIFICATION	0.0012477195114408463	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9642219771760435	WITHOUT_CLASSIFICATION	0.03577802282395648	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9999914807783992	WITHOUT_CLASSIFICATION	8.519221600776189E-6	DESIGN
//TODO: inefficient	DESIGN	0.663867374467066	WITHOUT_CLASSIFICATION	0.33613262553293394	DESIGN
// why does this matter?	DESIGN	0.988265885159844	WITHOUT_CLASSIFICATION	0.011734114840156094	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999999924703525	DESIGN	7.529647458918404E-9	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9996052154597725	DESIGN	3.947845402275154E-4	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9901030147870378	DESIGN	0.009896985212962261	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999976414045327	DESIGN	2.3585954672856127E-6	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9998126452346469	WITHOUT_CLASSIFICATION	1.8735476535309317E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.6120027611018577	WITHOUT_CLASSIFICATION	0.3879972388981423	DESIGN
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9968141284427429	DESIGN	0.0031858715572571773	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9999625331377895	WITHOUT_CLASSIFICATION	3.7466862210501675E-5	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9993146758544246	DESIGN	6.853241455754334E-4	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9998327589013897	DESIGN	1.672410986103388E-4	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9010821547636034	DESIGN	0.09891784523639655	WITHOUT_CLASSIFICATION
// TODO should we just collect these like with the collections above?	DESIGN	0.9999737919416786	DESIGN	2.6208058321317157E-5	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.7243624313441703	DESIGN	0.2756375686558296	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9684775867204106	WITHOUT_CLASSIFICATION	0.03152241327958943	DESIGN
//create an index on the key columns??	DESIGN	0.9996408667468326	WITHOUT_CLASSIFICATION	3.5913325316741203E-4	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9875838430303481	DESIGN	0.012416156969651896	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9996408667468326	WITHOUT_CLASSIFICATION	3.5913325316741203E-4	DESIGN
//TODO: improve this hack!	DESIGN	0.9997208158209134	DESIGN	2.7918417908651637E-4	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9995021659534965	WITHOUT_CLASSIFICATION	4.978340465034477E-4	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.5576594603457244	DESIGN	0.4423405396542755	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9996336415203738	WITHOUT_CLASSIFICATION	3.663584796261795E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.813567630897918	WITHOUT_CLASSIFICATION	0.1864323691020821	DESIGN
// create an index on the key columns??	DESIGN	0.9999752009249956	WITHOUT_CLASSIFICATION	2.479907500433608E-5	DESIGN
// todo : remove	DESIGN	0.9969600201158196	WITHOUT_CLASSIFICATION	0.003039979884180359	DESIGN
// todo : remove	DESIGN	0.9969600201158196	WITHOUT_CLASSIFICATION	0.003039979884180359	DESIGN
// todo : remove	DESIGN	0.9969600201158196	WITHOUT_CLASSIFICATION	0.003039979884180359	DESIGN
// todo : throw exception?	DESIGN	0.9318564409849608	WITHOUT_CLASSIFICATION	0.0681435590150392	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.987705475372522	DESIGN	0.012294524627477961	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.986002604904627	DESIGN	0.013997395095373066	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.999827411276358	DESIGN	1.7258872364189434E-4	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.995782702817477	DESIGN	0.004217297182522887	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999979735174714	DESIGN	2.0264825285189514E-6	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9812513093572285	WITHOUT_CLASSIFICATION	0.01874869064277143	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.957876622970842	WITHOUT_CLASSIFICATION	0.04212337702915805	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9487203596976497	DESIGN	0.05127964030235038	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9995265361051889	WITHOUT_CLASSIFICATION	4.734638948110872E-4	DESIGN
//TODO: move to .sql package!!	DESIGN	0.968290484505176	DESIGN	0.031709515494824085	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9870034726187972	DESIGN	0.012996527381202858	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999940468583397	DESIGN	5.95314166023568E-6	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.961004983091942	WITHOUT_CLASSIFICATION	0.038995016908057914	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.994017385881737	DESIGN	0.005982614118262936	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.6733843624014968	DESIGN	0.32661563759850315	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6717149827792889	DESIGN	0.328285017220711	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.7033990029537904	DESIGN	0.29660099704620946	WITHOUT_CLASSIFICATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9925226182850574	DESIGN	0.007477381714942623	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.6994973381504591	DESIGN	0.3005026618495409	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9190631345419288	DESIGN	0.08093686545807124	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9432892397456709	WITHOUT_CLASSIFICATION	0.056710760254329105	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9009008697198677	DESIGN	0.09909913028013224	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9769173609055998	WITHOUT_CLASSIFICATION	0.02308263909440027	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.8653760589790539	WITHOUT_CLASSIFICATION	0.13462394102094613	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9880777590652698	DESIGN	0.011922240934730106	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.5503202129363198	DESIGN	0.44967978706368006	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.953486895759164	DESIGN	0.046513104240836	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999995370679416	DESIGN	4.6293205834988197E-7	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9140602653570623	WITHOUT_CLASSIFICATION	0.08593973464293768	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9788856198908803	WITHOUT_CLASSIFICATION	0.02111438010911965	DESIGN
//is this ok?	DESIGN	0.9997365255474997	WITHOUT_CLASSIFICATION	2.6347445250032945E-4	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999929705450816	DESIGN	7.029454918427462E-6	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.6082337189709386	DESIGN	0.39176628102906136	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.9951409884479573	WITHOUT_CLASSIFICATION	0.004859011552042807	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.998489912524617	DESIGN	0.0015100874753829043	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9536600626601272	DESIGN	0.04633993733987282	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9992080949968897	DESIGN	7.919050031103375E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9997809004031523	DESIGN	2.1909959684763387E-4	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9677645604863918	DESIGN	0.0322354395136081	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9996954619188136	WITHOUT_CLASSIFICATION	3.0453808118638523E-4	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9999397472099412	DESIGN	6.0252790058909366E-5	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9984430140518067	DESIGN	0.0015569859481932358	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.8264222906676671	WITHOUT_CLASSIFICATION	0.17357770933233288	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9441767879583786	DESIGN	0.055823212041621426	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.8423039553347487	DESIGN	0.1576960446652513	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9982987463688455	DESIGN	0.0017012536311544707	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9771253916092002	DESIGN	0.02287460839079979	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.8085449650934982	DESIGN	0.1914550349065019	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.7361637990708971	WITHOUT_CLASSIFICATION	0.26383620092910287	DESIGN
// is this really necessary?	DESIGN	0.9993687521348181	WITHOUT_CLASSIFICATION	6.312478651819148E-4	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9742575942812096	DESIGN	0.02574240571879035	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9884274216274632	DESIGN	0.011572578372536786	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9386329086180565	DESIGN	0.06136709138194348	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.999999997487402	DESIGN	2.5125979975152156E-9	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9996715722125741	DESIGN	3.284277874259019E-4	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9997502128009569	WITHOUT_CLASSIFICATION	2.497871990431344E-4	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9992361841905911	DESIGN	7.638158094088993E-4	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9224976048176171	WITHOUT_CLASSIFICATION	0.07750239518238299	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.952608528629907	DESIGN	0.04739147137009311	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9998707003451719	WITHOUT_CLASSIFICATION	1.2929965482813305E-4	DESIGN
// short cut check...	DESIGN	0.9997195655416962	WITHOUT_CLASSIFICATION	2.8043445830376644E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9836551798424359	WITHOUT_CLASSIFICATION	0.016344820157564114	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9131081962712341	DESIGN	0.08689180372876598	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.994137292442891	DESIGN	0.005862707557109124	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9971368402328915	DESIGN	0.0028631597671085573	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9805210205500923	DESIGN	0.01947897944990765	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.7846257091725253	DESIGN	0.2153742908274748	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9968170595755649	WITHOUT_CLASSIFICATION	0.0031829404244350878	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9827450645540402	WITHOUT_CLASSIFICATION	0.01725493544595988	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999924690051063	DESIGN	7.530994893665617E-6	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9451277044860771	WITHOUT_CLASSIFICATION	0.05487229551392293	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9999231932042584	DESIGN	7.68067957415997E-5	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9998600408790886	WITHOUT_CLASSIFICATION	1.3995912091143954E-4	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9881056496258281	DESIGN	0.011894350374171952	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999998600879527	WITHOUT_CLASSIFICATION	1.399120473001455E-7	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9771454578270469	WITHOUT_CLASSIFICATION	0.02285454217295318	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999991258026011	DESIGN	8.741973988141775E-7	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.999991864632996	DESIGN	8.135367003982567E-6	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9099205888827755	WITHOUT_CLASSIFICATION	0.09007941111722456	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9972961233238388	WITHOUT_CLASSIFICATION	0.0027038766761612204	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9999584814399985	WITHOUT_CLASSIFICATION	4.151856000141213E-5	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9972868361159958	DESIGN	0.002713163884004239	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999985758048312	DESIGN	1.424195168805115E-6	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.998900620573786	DESIGN	0.0010993794262139178	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9969600201158196	WITHOUT_CLASSIFICATION	0.003039979884180359	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9558316524502555	DESIGN	0.044168347549744594	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9998231806753869	DESIGN	1.7681932461300457E-4	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9991947956947034	DESIGN	8.052043052966549E-4	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9170632519063239	WITHOUT_CLASSIFICATION	0.08293674809367611	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.999999454606906	DESIGN	5.45393094041873E-7	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.7100613316238854	DESIGN	0.2899386683761145	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.7823437896666745	WITHOUT_CLASSIFICATION	0.21765621033332544	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9952139148237681	DESIGN	0.0047860851762318345	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9497094585302477	DESIGN	0.050290541469752245	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.8034515812571476	WITHOUT_CLASSIFICATION	0.19654841874285237	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9833511550114208	DESIGN	0.016648844988579305	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9182901049788663	WITHOUT_CLASSIFICATION	0.08170989502113365	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9952811397762132	DESIGN	0.004718860223786679	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.998676967513363	WITHOUT_CLASSIFICATION	0.0013230324866370783	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999972155852667	DESIGN	2.7844147333893768E-6	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.7989193604936431	WITHOUT_CLASSIFICATION	0.20108063950635682	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9990910959058993	DESIGN	9.089040941006403E-4	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9987376273272289	WITHOUT_CLASSIFICATION	0.001262372672771168	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.7752523986866211	DESIGN	0.22474760131337895	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9748248247183675	DESIGN	0.02517517528163253	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9759217948458954	DESIGN	0.024078205154104738	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999666096	DESIGN	3.3390393620148254E-11	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999972550293391	DESIGN	2.7449706608214295E-6	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9992509596367433	DESIGN	7.490403632567883E-4	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999989694730151	DESIGN	1.0305269847672604E-6	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9998888368715093	DESIGN	1.1116312849066194E-4	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999675514571498	WITHOUT_CLASSIFICATION	3.2448542850207926E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999526381901	WITHOUT_CLASSIFICATION	4.736181001605971E-8	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999695829631366	DESIGN	3.0417036863279658E-5	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.8832572694838398	DESIGN	0.11674273051616017	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9126529295959729	DESIGN	0.0873470704040271	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9987967628914245	DESIGN	0.0012032371085755405	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.7723143196743252	WITHOUT_CLASSIFICATION	0.22768568032567496	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9969391212039138	DESIGN	0.0030608787960860373	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.5503202129363198	DESIGN	0.44967978706368006	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9885466625469966	WITHOUT_CLASSIFICATION	0.011453337453003368	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9704037746844295	DESIGN	0.029596225315570615	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9140602653570623	WITHOUT_CLASSIFICATION	0.08593973464293768	DESIGN
//TODO: make this a bit nicer	DESIGN	0.6082337189709386	DESIGN	0.39176628102906136	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9010397272302132	DESIGN	0.09896027276978672	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999498131393153	DESIGN	5.01868606848069E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999498131393153	DESIGN	5.01868606848069E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999498131393153	DESIGN	5.01868606848069E-5	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999993941086481	DESIGN	6.05891351854791E-7	WITHOUT_CLASSIFICATION
