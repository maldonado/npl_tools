//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999967515951576	WITHOUT_CLASSIFICATION	3.2484048424672904E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999816434784864	WITHOUT_CLASSIFICATION	1.835652151366741E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999816434784864	WITHOUT_CLASSIFICATION	1.835652151366741E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9995135539928384	WITHOUT_CLASSIFICATION	4.864460071616628E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999974491105754	WITHOUT_CLASSIFICATION	2.550889424559001E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999995651999662	WITHOUT_CLASSIFICATION	4.348000337675422E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997855086923	WITHOUT_CLASSIFICATION	2.1449130781202387E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997855086923	WITHOUT_CLASSIFICATION	2.1449130781202387E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999996273029771	WITHOUT_CLASSIFICATION	3.726970229223478E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999847929604	WITHOUT_CLASSIFICATION	1.5207039591919902E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999982873569551	WITHOUT_CLASSIFICATION	1.7126430449419737E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999654640096234	WITHOUT_CLASSIFICATION	3.4535990376649526E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999984710041596	WITHOUT_CLASSIFICATION	1.5289958403939244E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999984710041596	WITHOUT_CLASSIFICATION	1.5289958403939244E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999940979904246	WITHOUT_CLASSIFICATION	5.9020095754213905E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9996526484284217	WITHOUT_CLASSIFICATION	3.4735157157826316E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9997094550334061	WITHOUT_CLASSIFICATION	2.905449665937768E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999967608251425	WITHOUT_CLASSIFICATION	3.2391748573588917E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999791460947	WITHOUT_CLASSIFICATION	2.0853905282359262E-8	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999760009188077	WITHOUT_CLASSIFICATION	2.3999081192284007E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.999978786585407	WITHOUT_CLASSIFICATION	2.1213414592983596E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999997103425395	WITHOUT_CLASSIFICATION	2.8965746047357386E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999955476068607	WITHOUT_CLASSIFICATION	4.45239313927277E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9415736142022628	WITHOUT_CLASSIFICATION	0.05842638579773717	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999908684738036	WITHOUT_CLASSIFICATION	9.131526196497182E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999978203751603	WITHOUT_CLASSIFICATION	2.1796248397903993E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999928346306135	WITHOUT_CLASSIFICATION	7.165369386570715E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951634416027	WITHOUT_CLASSIFICATION	4.836558397321433E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951634416027	WITHOUT_CLASSIFICATION	4.836558397321433E-6	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999502686281035	WITHOUT_CLASSIFICATION	4.973137189633725E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999997547164551	WITHOUT_CLASSIFICATION	2.4528354489509866E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999709999593028	WITHOUT_CLASSIFICATION	2.9000040697200066E-5	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999689608076078	WITHOUT_CLASSIFICATION	3.103919239222923E-5	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9237774419571029	DESIGN	0.07622255804289717	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.9145630192195039	DESIGN	0.08543698078049614	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9145630192195039	DESIGN	0.08543698078049614	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999999962275	WITHOUT_CLASSIFICATION	3.7725003424178146E-11	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999955599069996	WITHOUT_CLASSIFICATION	4.4400930004094245E-6	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999999471336126	WITHOUT_CLASSIFICATION	5.286638751735898E-8	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995083148014343	WITHOUT_CLASSIFICATION	4.916851985657087E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999859076975481	WITHOUT_CLASSIFICATION	1.4092302451834433E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990232591885	WITHOUT_CLASSIFICATION	9.767408114525445E-7	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959786759275	WITHOUT_CLASSIFICATION	4.021324072597067E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999913549469167	WITHOUT_CLASSIFICATION	8.645053083321138E-6	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999912788264388	WITHOUT_CLASSIFICATION	8.721173561231828E-6	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999886855955318	WITHOUT_CLASSIFICATION	1.131440446827524E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999608792631969	WITHOUT_CLASSIFICATION	3.912073680306529E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999912788264388	WITHOUT_CLASSIFICATION	8.721173561231828E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999608792631969	WITHOUT_CLASSIFICATION	3.912073680306529E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999996887446284	WITHOUT_CLASSIFICATION	3.1125537167126634E-7	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9959595686365751	DESIGN	0.0040404313634248915	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999998465473294	WITHOUT_CLASSIFICATION	1.534526706315423E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999951586057243	WITHOUT_CLASSIFICATION	4.841394275749385E-6	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9991084117765255	WITHOUT_CLASSIFICATION	8.915882234743866E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999938258379397	WITHOUT_CLASSIFICATION	6.174162060393873E-6	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9929754184935256	WITHOUT_CLASSIFICATION	0.007024581506474448	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.7086017796156957	WITHOUT_CLASSIFICATION	0.29139822038430435	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999801664681	WITHOUT_CLASSIFICATION	1.9833531855724667E-8	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9997377575844826	WITHOUT_CLASSIFICATION	2.622424155174396E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999607253459114	WITHOUT_CLASSIFICATION	3.9274654088571565E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999969308638957	WITHOUT_CLASSIFICATION	3.0691361042448625E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999998969481	WITHOUT_CLASSIFICATION	1.0305185149972644E-10	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999000799368069	WITHOUT_CLASSIFICATION	9.992006319316029E-5	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9864601988809665	WITHOUT_CLASSIFICATION	0.013539801119033511	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999917389541821	WITHOUT_CLASSIFICATION	8.261045817894073E-6	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9993507869655794	WITHOUT_CLASSIFICATION	6.492130344206107E-4	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999620608678599	WITHOUT_CLASSIFICATION	3.793913214008672E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999937021186484	WITHOUT_CLASSIFICATION	6.297881351542052E-6	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999995524803132	WITHOUT_CLASSIFICATION	4.475196868081634E-7	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999944550076494	WITHOUT_CLASSIFICATION	5.544992350549702E-6	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999385887098	WITHOUT_CLASSIFICATION	6.141129019639344E-8	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999938628092379	WITHOUT_CLASSIFICATION	6.137190762108626E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999967093328163	WITHOUT_CLASSIFICATION	3.290667183711552E-6	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9428284388887814	DESIGN	0.0571715611112187	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999989443880124	WITHOUT_CLASSIFICATION	1.0556119876823476E-6	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999963400477	WITHOUT_CLASSIFICATION	3.6599523111826645E-9	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.8148106437012587	DESIGN	0.18518935629874134	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999996116486	WITHOUT_CLASSIFICATION	3.8835125664365494E-10	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999998401638582	WITHOUT_CLASSIFICATION	1.598361417458691E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999994936739	WITHOUT_CLASSIFICATION	5.063260490380462E-10	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999722792875	WITHOUT_CLASSIFICATION	2.7720712485151747E-8	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999682642707909	WITHOUT_CLASSIFICATION	3.173572920919843E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999852190167606	WITHOUT_CLASSIFICATION	1.4780983239431245E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999930732362	WITHOUT_CLASSIFICATION	6.9267637563497235E-9	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999992555	WITHOUT_CLASSIFICATION	7.444569849908472E-13	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999852190167606	WITHOUT_CLASSIFICATION	1.4780983239431245E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999980986396	WITHOUT_CLASSIFICATION	1.901360412945206E-9	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999999420101116	WITHOUT_CLASSIFICATION	5.7989888330110275E-8	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999998328708891	WITHOUT_CLASSIFICATION	1.671291108927439E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999996133144495	WITHOUT_CLASSIFICATION	3.866855504327391E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999485863072441	WITHOUT_CLASSIFICATION	5.141369275581015E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998275148889	WITHOUT_CLASSIFICATION	1.7248511110054481E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998275148889	WITHOUT_CLASSIFICATION	1.7248511110054481E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999661402981488	WITHOUT_CLASSIFICATION	3.385970185117467E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999734642267527	WITHOUT_CLASSIFICATION	2.6535773247293522E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999430753856735	WITHOUT_CLASSIFICATION	5.6924614326426236E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999892922838	WITHOUT_CLASSIFICATION	1.0707716205233227E-8	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999997953520472	WITHOUT_CLASSIFICATION	2.046479527011724E-7	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999908589774348	WITHOUT_CLASSIFICATION	9.141022565235448E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999911461738	WITHOUT_CLASSIFICATION	8.853826302259414E-9	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999576168766445	WITHOUT_CLASSIFICATION	4.23831233555442E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999130539686217	WITHOUT_CLASSIFICATION	8.694603137830977E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999816270775	WITHOUT_CLASSIFICATION	1.8372922474576874E-8	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999994243458193	WITHOUT_CLASSIFICATION	5.756541806746333E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999994243458193	WITHOUT_CLASSIFICATION	5.756541806746333E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998796225249	WITHOUT_CLASSIFICATION	1.2037747502287613E-7	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999851266416	WITHOUT_CLASSIFICATION	1.4873358486086303E-8	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9994371696972951	WITHOUT_CLASSIFICATION	5.628303027049261E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999994243458193	WITHOUT_CLASSIFICATION	5.756541806746333E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998796225249	WITHOUT_CLASSIFICATION	1.2037747502287613E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999998796225249	WITHOUT_CLASSIFICATION	1.2037747502287613E-7	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9996278206401017	WITHOUT_CLASSIFICATION	3.7217935989835373E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9996952924251159	WITHOUT_CLASSIFICATION	3.047075748841388E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999973413	WITHOUT_CLASSIFICATION	2.6587027903437964E-12	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999970878548587	WITHOUT_CLASSIFICATION	2.9121451413296E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993501546625981	WITHOUT_CLASSIFICATION	6.498453374019087E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9993501546625981	WITHOUT_CLASSIFICATION	6.498453374019087E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999986185497375	WITHOUT_CLASSIFICATION	1.3814502625592042E-6	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9985885843547443	WITHOUT_CLASSIFICATION	0.0014114156452556868	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.999997297658837	WITHOUT_CLASSIFICATION	2.702341163012776E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999620268086048	WITHOUT_CLASSIFICATION	3.797319139519892E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999620268086048	WITHOUT_CLASSIFICATION	3.797319139519892E-5	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999828714571997	WITHOUT_CLASSIFICATION	1.7128542800386096E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9892556102245087	WITHOUT_CLASSIFICATION	0.010744389775491288	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9920188833945518	WITHOUT_CLASSIFICATION	0.00798111660544813	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999998497999947	WITHOUT_CLASSIFICATION	1.502000052599942E-7	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999781316026258	WITHOUT_CLASSIFICATION	2.186839737422658E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999946360681788	WITHOUT_CLASSIFICATION	5.363931821153552E-6	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999983098456695	WITHOUT_CLASSIFICATION	1.6901543304847483E-6	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9986729752354925	WITHOUT_CLASSIFICATION	0.0013270247645074335	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999702508980377	WITHOUT_CLASSIFICATION	2.9749101962234855E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9920188833945518	WITHOUT_CLASSIFICATION	0.00798111660544813	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9994875725208352	WITHOUT_CLASSIFICATION	5.124274791648764E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.999988154831329	WITHOUT_CLASSIFICATION	1.1845168670932042E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.999988154831329	WITHOUT_CLASSIFICATION	1.1845168670932042E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9989948184549244	WITHOUT_CLASSIFICATION	0.001005181545075606	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9990667997085483	WITHOUT_CLASSIFICATION	9.332002914517119E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.7562897863477167	WITHOUT_CLASSIFICATION	0.24371021365228324	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999885249679428	WITHOUT_CLASSIFICATION	1.1475032057273581E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9997614066677762	WITHOUT_CLASSIFICATION	2.3859333222388767E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9984314452408254	WITHOUT_CLASSIFICATION	0.0015685547591746585	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.999774168809912	WITHOUT_CLASSIFICATION	2.2583119008803886E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9997619863213281	WITHOUT_CLASSIFICATION	2.3801367867198295E-4	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999814036948	WITHOUT_CLASSIFICATION	1.8596305180078948E-8	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999814036948	WITHOUT_CLASSIFICATION	1.8596305180078948E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999443541641795	WITHOUT_CLASSIFICATION	5.564583582045699E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999967515951576	WITHOUT_CLASSIFICATION	3.2484048424672904E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999984209689895	WITHOUT_CLASSIFICATION	1.5790310104612313E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999998940906967	WITHOUT_CLASSIFICATION	1.0590930336011689E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999816434784864	WITHOUT_CLASSIFICATION	1.835652151366741E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999982315759957	WITHOUT_CLASSIFICATION	1.7684240043418137E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999805301284699	WITHOUT_CLASSIFICATION	1.9469871530183006E-5	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999961572813336	WITHOUT_CLASSIFICATION	3.842718666404457E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999996482062017	WITHOUT_CLASSIFICATION	3.517937982826189E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999995557279	WITHOUT_CLASSIFICATION	4.44272100014828E-7	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998535102274224	WITHOUT_CLASSIFICATION	1.4648977257750945E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999661202653303	WITHOUT_CLASSIFICATION	3.3879734669697E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999990953923656	WITHOUT_CLASSIFICATION	9.046076342817518E-7	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999974491105754	WITHOUT_CLASSIFICATION	2.550889424559001E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998107660405	WITHOUT_CLASSIFICATION	1.8923395945324788E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998107660405	WITHOUT_CLASSIFICATION	1.8923395945324788E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999993749364596	WITHOUT_CLASSIFICATION	6.250635404243398E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9974507279358292	WITHOUT_CLASSIFICATION	0.0025492720641708652	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999945441773643	WITHOUT_CLASSIFICATION	5.455822635648633E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999983163086088	WITHOUT_CLASSIFICATION	1.6836913912725043E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999970854077886	WITHOUT_CLASSIFICATION	2.9145922113598126E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999522374005771	WITHOUT_CLASSIFICATION	4.7762599422862096E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999997855086923	WITHOUT_CLASSIFICATION	2.1449130781202387E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9958019746926122	WITHOUT_CLASSIFICATION	0.004198025307387727	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.999997515266012	WITHOUT_CLASSIFICATION	2.484733988007831E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.999997825712808	WITHOUT_CLASSIFICATION	2.1742871919545493E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999996819620366	WITHOUT_CLASSIFICATION	3.1803796351448435E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999815939584513	WITHOUT_CLASSIFICATION	1.8406041548679613E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999960922963251	WITHOUT_CLASSIFICATION	3.907703674803113E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980514666977	WITHOUT_CLASSIFICATION	1.9485333021757284E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999982500696	WITHOUT_CLASSIFICATION	1.7499303963426946E-9	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999987518414111	WITHOUT_CLASSIFICATION	1.2481585889142114E-6	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999995053446685	WITHOUT_CLASSIFICATION	4.946553314310548E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9466607244900661	WITHOUT_CLASSIFICATION	0.05333927550993391	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999865607714334	WITHOUT_CLASSIFICATION	1.3439228566634338E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.999999487029389	WITHOUT_CLASSIFICATION	5.12970611066963E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999816434784864	WITHOUT_CLASSIFICATION	1.835652151366741E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999816434784864	WITHOUT_CLASSIFICATION	1.835652151366741E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999661202653303	WITHOUT_CLASSIFICATION	3.3879734669697E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999998107660405	WITHOUT_CLASSIFICATION	1.8923395945324788E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980514666977	WITHOUT_CLASSIFICATION	1.9485333021757284E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999996273029771	WITHOUT_CLASSIFICATION	3.726970229223478E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999976527379013	WITHOUT_CLASSIFICATION	2.3472620986664962E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999607425243584	WITHOUT_CLASSIFICATION	3.925747564151142E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999898846330376	WITHOUT_CLASSIFICATION	1.0115366962278792E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.99999981746792	WITHOUT_CLASSIFICATION	1.8253208014445677E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999914882342	WITHOUT_CLASSIFICATION	8.511765773999655E-9	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999968465647542	WITHOUT_CLASSIFICATION	3.1534352458359084E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999967867896632	WITHOUT_CLASSIFICATION	3.213210336673531E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999945795505955	WITHOUT_CLASSIFICATION	5.420449404650034E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999525619958338	WITHOUT_CLASSIFICATION	4.743800416620036E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999860239482657	WITHOUT_CLASSIFICATION	1.3976051734209645E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999860239482657	WITHOUT_CLASSIFICATION	1.3976051734209645E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999989724947006	WITHOUT_CLASSIFICATION	1.0275052993934478E-6	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999995551431463	WITHOUT_CLASSIFICATION	4.4485685371670676E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9991430200246455	WITHOUT_CLASSIFICATION	8.569799753546196E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999979262570129	WITHOUT_CLASSIFICATION	2.073742987212284E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999999006199214	WITHOUT_CLASSIFICATION	9.93800785867959E-8	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999989123831333	WITHOUT_CLASSIFICATION	1.087616866719716E-6	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999669062874531	WITHOUT_CLASSIFICATION	3.309371254697475E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999847929604	WITHOUT_CLASSIFICATION	1.5207039591919902E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999977234571864	WITHOUT_CLASSIFICATION	2.276542813533229E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993374666332	WITHOUT_CLASSIFICATION	6.625333668145402E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993374666332	WITHOUT_CLASSIFICATION	6.625333668145402E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999375092415	WITHOUT_CLASSIFICATION	6.24907585201884E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999462399130092	WITHOUT_CLASSIFICATION	5.3760086990898805E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999999395597179	WITHOUT_CLASSIFICATION	6.044028211864653E-8	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999528470649	WITHOUT_CLASSIFICATION	4.715293505033E-8	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999917153270831	WITHOUT_CLASSIFICATION	8.284672916850565E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999816434784864	WITHOUT_CLASSIFICATION	1.835652151366741E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999661202653303	WITHOUT_CLASSIFICATION	3.3879734669697E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999974491105754	WITHOUT_CLASSIFICATION	2.550889424559001E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980514666977	WITHOUT_CLASSIFICATION	1.9485333021757284E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980514666977	WITHOUT_CLASSIFICATION	1.9485333021757284E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999966527576	WITHOUT_CLASSIFICATION	3.34724239907264E-8	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999966527576	WITHOUT_CLASSIFICATION	3.34724239907264E-8	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999994927201571	WITHOUT_CLASSIFICATION	5.072798428257216E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999996819271905	WITHOUT_CLASSIFICATION	3.1807280958758534E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999996819271905	WITHOUT_CLASSIFICATION	3.1807280958758534E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999976149970033	WITHOUT_CLASSIFICATION	2.3850029967102506E-6	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999751835287205	WITHOUT_CLASSIFICATION	2.481647127961318E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999991845917208	WITHOUT_CLASSIFICATION	8.154082793413834E-7	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999997648875937	WITHOUT_CLASSIFICATION	2.351124062986343E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999805230965	WITHOUT_CLASSIFICATION	1.9476903482474263E-8	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999654640096234	WITHOUT_CLASSIFICATION	3.4535990376649526E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999654640096234	WITHOUT_CLASSIFICATION	3.4535990376649526E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999157346943144	WITHOUT_CLASSIFICATION	8.426530568557698E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999986873383149	WITHOUT_CLASSIFICATION	1.3126616852036716E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.999999758195843	WITHOUT_CLASSIFICATION	2.4180415702136604E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.999989389706146	WITHOUT_CLASSIFICATION	1.0610293853914419E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999999383526982	WITHOUT_CLASSIFICATION	6.164730173022543E-8	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999296191177783	WITHOUT_CLASSIFICATION	7.03808822216556E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999984710041596	WITHOUT_CLASSIFICATION	1.5289958403939244E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999991370136867	WITHOUT_CLASSIFICATION	8.629863133164306E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999991370136867	WITHOUT_CLASSIFICATION	8.629863133164306E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999940979904246	WITHOUT_CLASSIFICATION	5.9020095754213905E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999940979904246	WITHOUT_CLASSIFICATION	5.9020095754213905E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999963671547475	WITHOUT_CLASSIFICATION	3.632845252486818E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999963671547475	WITHOUT_CLASSIFICATION	3.632845252486818E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999981555007	WITHOUT_CLASSIFICATION	1.844499284977067E-9	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999981555007	WITHOUT_CLASSIFICATION	1.844499284977067E-9	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999654640096234	WITHOUT_CLASSIFICATION	3.4535990376649526E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999984710041596	WITHOUT_CLASSIFICATION	1.5289958403939244E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999991370136867	WITHOUT_CLASSIFICATION	8.629863133164306E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999991370136867	WITHOUT_CLASSIFICATION	8.629863133164306E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999940979904246	WITHOUT_CLASSIFICATION	5.9020095754213905E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999963671547475	WITHOUT_CLASSIFICATION	3.632845252486818E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999963671547475	WITHOUT_CLASSIFICATION	3.632845252486818E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999981555007	WITHOUT_CLASSIFICATION	1.844499284977067E-9	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998753705375402	WITHOUT_CLASSIFICATION	1.2462946245992554E-4	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998661181604032	WITHOUT_CLASSIFICATION	1.3388183959677858E-4	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998922788000014	WITHOUT_CLASSIFICATION	1.0772119999859362E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999979871624158	WITHOUT_CLASSIFICATION	2.01283758416593E-6	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9995672678729458	WITHOUT_CLASSIFICATION	4.32732127054157E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999840153220594	WITHOUT_CLASSIFICATION	1.5984677940618694E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9988207794430691	WITHOUT_CLASSIFICATION	0.0011792205569308462	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.5575398042328895	WITHOUT_CLASSIFICATION	0.4424601957671104	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9841673777762737	WITHOUT_CLASSIFICATION	0.015832622223726295	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999435487	WITHOUT_CLASSIFICATION	5.645126513920342E-11	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999813635588	WITHOUT_CLASSIFICATION	1.8636441204689592E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999574904164	WITHOUT_CLASSIFICATION	4.250958361086569E-8	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999661402981488	WITHOUT_CLASSIFICATION	3.385970185117467E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999840153220594	WITHOUT_CLASSIFICATION	1.5984677940618694E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999341351420358	WITHOUT_CLASSIFICATION	6.586485796432272E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999341351420358	WITHOUT_CLASSIFICATION	6.586485796432272E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999982225694425	WITHOUT_CLASSIFICATION	1.7774305575291348E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999985935638964	WITHOUT_CLASSIFICATION	1.4064361036198301E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999985935638964	WITHOUT_CLASSIFICATION	1.4064361036198301E-6	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999991270826731	WITHOUT_CLASSIFICATION	8.729173267786337E-7	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9997578613721637	WITHOUT_CLASSIFICATION	2.4213862783632384E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999997317478436	WITHOUT_CLASSIFICATION	2.6825215645994045E-7	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999976698673819	WITHOUT_CLASSIFICATION	2.330132618110634E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999976698673819	WITHOUT_CLASSIFICATION	2.330132618110634E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999791460947	WITHOUT_CLASSIFICATION	2.0853905282359262E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999836828154	WITHOUT_CLASSIFICATION	1.6317184554789708E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999836828154	WITHOUT_CLASSIFICATION	1.6317184554789708E-8	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999725573346828	WITHOUT_CLASSIFICATION	2.744266531721205E-5	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999938305762539	WITHOUT_CLASSIFICATION	6.169423746036344E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999965651192753	WITHOUT_CLASSIFICATION	3.4348807246759013E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999998528464728	WITHOUT_CLASSIFICATION	1.4715352718602839E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.99999686549691	WITHOUT_CLASSIFICATION	3.134503089957373E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999952120581651	WITHOUT_CLASSIFICATION	4.787941834867005E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999760009188077	WITHOUT_CLASSIFICATION	2.3999081192284007E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999958081820413	WITHOUT_CLASSIFICATION	4.191817958793123E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.994613821567591	WITHOUT_CLASSIFICATION	0.005386178432409011	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999965152318192	WITHOUT_CLASSIFICATION	3.484768180760925E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999994196652914	WITHOUT_CLASSIFICATION	5.803347085173798E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999955476068607	WITHOUT_CLASSIFICATION	4.45239313927277E-6	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999998926664816	WITHOUT_CLASSIFICATION	1.0733351841833517E-7	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999996095292618	WITHOUT_CLASSIFICATION	3.9047073820797365E-7	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999966967326	WITHOUT_CLASSIFICATION	3.303267305406677E-9	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999955476068607	WITHOUT_CLASSIFICATION	4.45239313927277E-6	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999965910268304	WITHOUT_CLASSIFICATION	3.4089731695431127E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998369679792	WITHOUT_CLASSIFICATION	1.6303202072667949E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999997206550271	WITHOUT_CLASSIFICATION	2.7934497288851746E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999969767047315	WITHOUT_CLASSIFICATION	3.023295268459464E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999951570674475	WITHOUT_CLASSIFICATION	4.842932552641074E-6	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999987944218542	WITHOUT_CLASSIFICATION	1.2055781457514825E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999991235437544	WITHOUT_CLASSIFICATION	8.764562455734555E-7	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999978203751603	WITHOUT_CLASSIFICATION	2.1796248397903993E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999878701722302	WITHOUT_CLASSIFICATION	1.2129827769741764E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999928346306135	WITHOUT_CLASSIFICATION	7.165369386570715E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999998304026273	WITHOUT_CLASSIFICATION	1.6959737276601465E-7	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.999999848949109	WITHOUT_CLASSIFICATION	1.5105089103805732E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999988114960028	WITHOUT_CLASSIFICATION	1.1885039971884693E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999760009188077	WITHOUT_CLASSIFICATION	2.3999081192284007E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999878701722302	WITHOUT_CLASSIFICATION	1.2129827769741764E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999998304026273	WITHOUT_CLASSIFICATION	1.6959737276601465E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999988114960028	WITHOUT_CLASSIFICATION	1.1885039971884693E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999748592969	WITHOUT_CLASSIFICATION	2.514070317162007E-8	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999950937062183	WITHOUT_CLASSIFICATION	4.906293781774633E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999967686742	WITHOUT_CLASSIFICATION	3.2313257666088596E-9	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951634416027	WITHOUT_CLASSIFICATION	4.836558397321433E-6	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999986490294626	WITHOUT_CLASSIFICATION	1.3509705374951272E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999995861215295	WITHOUT_CLASSIFICATION	4.138784704804441E-7	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999587487100919	WITHOUT_CLASSIFICATION	4.12512899080745E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9935613873901364	WITHOUT_CLASSIFICATION	0.006438612609863497	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999984400432168	WITHOUT_CLASSIFICATION	1.559956783134972E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999998132131	WITHOUT_CLASSIFICATION	1.8678687419068025E-10	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.999999724228999	WITHOUT_CLASSIFICATION	2.7577100107586347E-7	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999865763604872	WITHOUT_CLASSIFICATION	1.3423639512848393E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999062589	WITHOUT_CLASSIFICATION	9.374104431147945E-11	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999259491698	WITHOUT_CLASSIFICATION	7.405083027758009E-8	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999934024214465	WITHOUT_CLASSIFICATION	6.597578553457963E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999906674965172	WITHOUT_CLASSIFICATION	9.33250348270126E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999997547164551	WITHOUT_CLASSIFICATION	2.4528354489509866E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999963432937313	WITHOUT_CLASSIFICATION	3.656706268568216E-6	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999914757293943	WITHOUT_CLASSIFICATION	8.52427060560427E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999878701722302	WITHOUT_CLASSIFICATION	1.2129827769741764E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999931721726029	WITHOUT_CLASSIFICATION	6.827827397099178E-6	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999964643517323	WITHOUT_CLASSIFICATION	3.535648267736631E-6	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999975945546278	WITHOUT_CLASSIFICATION	2.405445372300925E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999027714809431	WITHOUT_CLASSIFICATION	9.722851905693499E-5	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999987392669344	WITHOUT_CLASSIFICATION	1.2607330655893567E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999941229819311	WITHOUT_CLASSIFICATION	5.8770180689576365E-6	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999925044618	WITHOUT_CLASSIFICATION	7.495538162941266E-9	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999426719864	WITHOUT_CLASSIFICATION	5.7328013503057284E-8	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999935316785501	WITHOUT_CLASSIFICATION	6.46832144998339E-6	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999940242753652	WITHOUT_CLASSIFICATION	5.9757246348372E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999974023079397	WITHOUT_CLASSIFICATION	2.5976920603236027E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999995959220015	WITHOUT_CLASSIFICATION	4.040779985633823E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998036803763877	WITHOUT_CLASSIFICATION	1.9631962361224233E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999689608076078	WITHOUT_CLASSIFICATION	3.103919239222923E-5	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999977376141156	WITHOUT_CLASSIFICATION	2.262385884369659E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999389462609871	WITHOUT_CLASSIFICATION	6.105373901293295E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999371383266245	WITHOUT_CLASSIFICATION	6.286167337549143E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999947377757495	WITHOUT_CLASSIFICATION	5.262224250478667E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999938684128753	WITHOUT_CLASSIFICATION	6.13158712463784E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999931562062803	WITHOUT_CLASSIFICATION	6.8437937197628415E-6	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999999393788	WITHOUT_CLASSIFICATION	6.062122563110993E-11	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998464027342964	WITHOUT_CLASSIFICATION	1.535972657035151E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8434355149661276	WITHOUT_CLASSIFICATION	0.1565644850338725	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.997160649427467	WITHOUT_CLASSIFICATION	0.0028393505725329672	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999454539330794	WITHOUT_CLASSIFICATION	5.4546066920582224E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999454539330794	WITHOUT_CLASSIFICATION	5.4546066920582224E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999720420851166	WITHOUT_CLASSIFICATION	2.7957914883491265E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999709212353618	WITHOUT_CLASSIFICATION	2.907876463820612E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999772138926529	WITHOUT_CLASSIFICATION	2.2786107347100076E-5	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999707792820381	WITHOUT_CLASSIFICATION	2.922071796187255E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.999811433009913	WITHOUT_CLASSIFICATION	1.885669900869834E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9991360113699597	WITHOUT_CLASSIFICATION	8.63988630040343E-4	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999811412678066	WITHOUT_CLASSIFICATION	1.885873219350001E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999957942439821	WITHOUT_CLASSIFICATION	4.205756017911268E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999716231484687	WITHOUT_CLASSIFICATION	2.8376851531295577E-5	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999822441109543	WITHOUT_CLASSIFICATION	1.7755889045779946E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9998761342959056	WITHOUT_CLASSIFICATION	1.2386570409435267E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9997961051528989	WITHOUT_CLASSIFICATION	2.038948471011881E-4	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9978485336191637	WITHOUT_CLASSIFICATION	0.002151466380836278	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999997313559728	WITHOUT_CLASSIFICATION	2.6864402732494047E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946199513593	WITHOUT_CLASSIFICATION	5.380048640660199E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979312203867	WITHOUT_CLASSIFICATION	2.0687796132924936E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999881595282821	WITHOUT_CLASSIFICATION	1.184047171777726E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999930782779349	WITHOUT_CLASSIFICATION	6.92172206515637E-6	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9794811531667058	WITHOUT_CLASSIFICATION	0.02051884683329426	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9982307310942937	WITHOUT_CLASSIFICATION	0.00176926890570637	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999655744715148	WITHOUT_CLASSIFICATION	3.4425528485138664E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999655744715148	WITHOUT_CLASSIFICATION	3.4425528485138664E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999082967315981	WITHOUT_CLASSIFICATION	9.170326840199269E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999082967315981	WITHOUT_CLASSIFICATION	9.170326840199269E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.8434355149661276	WITHOUT_CLASSIFICATION	0.1565644850338725	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999997731765363	WITHOUT_CLASSIFICATION	2.26823463638723E-7	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999412929428908	WITHOUT_CLASSIFICATION	5.8707057109286185E-5	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998194876781	WITHOUT_CLASSIFICATION	1.805123219754883E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999443541641795	WITHOUT_CLASSIFICATION	5.564583582045699E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999412929428908	WITHOUT_CLASSIFICATION	5.8707057109286185E-5	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999998194876781	WITHOUT_CLASSIFICATION	1.805123219754883E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999998762318098	WITHOUT_CLASSIFICATION	1.2376819019114088E-6	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999904062233124	WITHOUT_CLASSIFICATION	9.593776687571825E-6	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999856361547744	WITHOUT_CLASSIFICATION	1.4363845225488781E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999931531028773	WITHOUT_CLASSIFICATION	6.846897122763566E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9988242018045929	WITHOUT_CLASSIFICATION	0.0011757981954070675	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.902968147762801	WITHOUT_CLASSIFICATION	0.09703185223719905	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999996482586427	WITHOUT_CLASSIFICATION	3.5174135729047724E-7	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999954792545487	WITHOUT_CLASSIFICATION	4.520745451368583E-6	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999747998169337	WITHOUT_CLASSIFICATION	2.520018306630251E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999990965889	WITHOUT_CLASSIFICATION	9.034109713389991E-10	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999996363120841	WITHOUT_CLASSIFICATION	3.6368791585354E-7	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999982648389636	WITHOUT_CLASSIFICATION	1.7351610364467042E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999122903162	WITHOUT_CLASSIFICATION	8.770968384608047E-8	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999992019240497	WITHOUT_CLASSIFICATION	7.980759501960701E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999443541641795	WITHOUT_CLASSIFICATION	5.564583582045699E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999956577797998	WITHOUT_CLASSIFICATION	4.342220200259095E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999950912212384	WITHOUT_CLASSIFICATION	4.908778761564333E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999950912212384	WITHOUT_CLASSIFICATION	4.908778761564333E-6	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9998783498634946	WITHOUT_CLASSIFICATION	1.2165013650540961E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999998762318098	WITHOUT_CLASSIFICATION	1.2376819019114088E-6	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9995993282183707	WITHOUT_CLASSIFICATION	4.006717816293152E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9993144565088327	DESIGN	6.85543491167389E-4	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.873018329055184	WITHOUT_CLASSIFICATION	0.12698167094481597	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.99999975027332	WITHOUT_CLASSIFICATION	2.4972668001227306E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9665651412606864	WITHOUT_CLASSIFICATION	0.033434858739313664	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999998762318098	WITHOUT_CLASSIFICATION	1.2376819019114088E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.99999975027332	WITHOUT_CLASSIFICATION	2.4972668001227306E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9665651412606864	WITHOUT_CLASSIFICATION	0.033434858739313664	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9685378410789418	WITHOUT_CLASSIFICATION	0.03146215892105824	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999730314656	WITHOUT_CLASSIFICATION	2.6968534394534227E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999993537453833	WITHOUT_CLASSIFICATION	6.462546166718375E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999998762318098	WITHOUT_CLASSIFICATION	1.2376819019114088E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999998762318098	WITHOUT_CLASSIFICATION	1.2376819019114088E-6	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999944009468329	WITHOUT_CLASSIFICATION	5.599053167133885E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.999982314117107	WITHOUT_CLASSIFICATION	1.7685882892955872E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999273173238019	WITHOUT_CLASSIFICATION	7.268267619807813E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999841689735631	WITHOUT_CLASSIFICATION	1.583102643688269E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999983580451367	WITHOUT_CLASSIFICATION	1.641954863290582E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999988137468	WITHOUT_CLASSIFICATION	1.1862531493363905E-9	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999825782787	WITHOUT_CLASSIFICATION	1.7421721224615644E-8	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998566803431008	WITHOUT_CLASSIFICATION	1.4331965689924186E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999605307051537	WITHOUT_CLASSIFICATION	3.94692948462514E-5	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999705852982348	WITHOUT_CLASSIFICATION	2.941470176521758E-5	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999987793468782	WITHOUT_CLASSIFICATION	1.2206531217816264E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999878453745007	WITHOUT_CLASSIFICATION	1.2154625499325848E-5	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999747648804649	WITHOUT_CLASSIFICATION	2.5235119535176155E-5	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9974028016684056	WITHOUT_CLASSIFICATION	0.002597198331594525	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998920824219	WITHOUT_CLASSIFICATION	1.0791757809866441E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.999947859657854	WITHOUT_CLASSIFICATION	5.214034214597782E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995083148014343	WITHOUT_CLASSIFICATION	4.916851985657087E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9977787383332971	WITHOUT_CLASSIFICATION	0.0022212616667028995	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9989736452927391	WITHOUT_CLASSIFICATION	0.001026354707260922	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.999999898209494	WITHOUT_CLASSIFICATION	1.0179050604801784E-7	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999884305454858	WITHOUT_CLASSIFICATION	1.1569454514110619E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9991612819029501	WITHOUT_CLASSIFICATION	8.387180970498883E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9991612819029501	WITHOUT_CLASSIFICATION	8.387180970498883E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9995083148014343	WITHOUT_CLASSIFICATION	4.916851985657087E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999996597678872	WITHOUT_CLASSIFICATION	3.4023211272394853E-7	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9996609568948414	WITHOUT_CLASSIFICATION	3.390431051585466E-4	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.512099963477796	WITHOUT_CLASSIFICATION	0.48790003652220415	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999995327913895	WITHOUT_CLASSIFICATION	4.6720861052336154E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999554597492765	WITHOUT_CLASSIFICATION	4.454025072349633E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999999896725341	WITHOUT_CLASSIFICATION	1.032746589969763E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9997340838851839	WITHOUT_CLASSIFICATION	2.6591611481606165E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999959170442504	WITHOUT_CLASSIFICATION	4.0829557495953215E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999502245	WITHOUT_CLASSIFICATION	4.977555434333777E-11	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999996910389255	WITHOUT_CLASSIFICATION	3.089610745857261E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998984436344	WITHOUT_CLASSIFICATION	1.0155636560240457E-6	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999762253783607	WITHOUT_CLASSIFICATION	2.3774621639351726E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999883407849289	WITHOUT_CLASSIFICATION	1.1659215071011603E-5	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999924747385	WITHOUT_CLASSIFICATION	7.52526153790064E-9	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999899447627	WITHOUT_CLASSIFICATION	1.0055237416261968E-8	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997708117835689	WITHOUT_CLASSIFICATION	2.2918821643113082E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999993923990051	WITHOUT_CLASSIFICATION	6.076009948189607E-7	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999413973512941	WITHOUT_CLASSIFICATION	5.8602648705988895E-5	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997995787301974	WITHOUT_CLASSIFICATION	2.004212698025182E-4	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999922301937745	WITHOUT_CLASSIFICATION	7.769806225597887E-6	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999041152586295	WITHOUT_CLASSIFICATION	9.588474137043346E-5	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.999823703806845	WITHOUT_CLASSIFICATION	1.762961931548333E-4	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999938140582889	WITHOUT_CLASSIFICATION	6.185941710971013E-6	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997870211203138	WITHOUT_CLASSIFICATION	2.1297887968605263E-4	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969422175851	WITHOUT_CLASSIFICATION	3.057782414976911E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999114332739607	WITHOUT_CLASSIFICATION	8.85667260392059E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960405818643	WITHOUT_CLASSIFICATION	3.959418135660607E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680024926048	WITHOUT_CLASSIFICATION	3.1997507395178016E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999735628429289	WITHOUT_CLASSIFICATION	2.6437157071043412E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994057578525	WITHOUT_CLASSIFICATION	5.942421474995788E-7	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9998444242623584	WITHOUT_CLASSIFICATION	1.5557573764158215E-4	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.969461172163763	WITHOUT_CLASSIFICATION	0.030538827836236897	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994683277615	WITHOUT_CLASSIFICATION	5.316722384544987E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864359752569	WITHOUT_CLASSIFICATION	1.356402474310691E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985360583099	WITHOUT_CLASSIFICATION	1.4639416901079422E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999365189379	WITHOUT_CLASSIFICATION	6.348106202463231E-8	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999390550981231	WITHOUT_CLASSIFICATION	6.094490187684284E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987360017293	WITHOUT_CLASSIFICATION	1.2639982706778328E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964022391433	WITHOUT_CLASSIFICATION	3.5977608566670892E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930065786532	WITHOUT_CLASSIFICATION	6.993421346734335E-6	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999996875960229	WITHOUT_CLASSIFICATION	3.1240397712368554E-7	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991508562164	WITHOUT_CLASSIFICATION	8.491437835387086E-7	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9456304396041489	WITHOUT_CLASSIFICATION	0.05436956039585113	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999061968569958	WITHOUT_CLASSIFICATION	9.380314300420758E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999959709757	WITHOUT_CLASSIFICATION	4.029024308084218E-9	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994996089789263	WITHOUT_CLASSIFICATION	5.003910210736288E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999618913100408	WITHOUT_CLASSIFICATION	3.8108689959299554E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999999465935767	WITHOUT_CLASSIFICATION	5.340642328810881E-8	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.7913173349227078	WITHOUT_CLASSIFICATION	0.2086826650772922	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999988722224106	WITHOUT_CLASSIFICATION	1.127777589414021E-6	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999993759596798	WITHOUT_CLASSIFICATION	6.240403201606843E-7	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999972729699682	WITHOUT_CLASSIFICATION	2.7270300317803775E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998669172110971	WITHOUT_CLASSIFICATION	1.330827889028865E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999957676920135	WITHOUT_CLASSIFICATION	4.23230798654027E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999637706070004	WITHOUT_CLASSIFICATION	3.6229392999743996E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9998323109329633	WITHOUT_CLASSIFICATION	1.6768906703659605E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998369072594201	WITHOUT_CLASSIFICATION	1.630927405799297E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999737766028374	WITHOUT_CLASSIFICATION	2.622339716265868E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9997943626801448	WITHOUT_CLASSIFICATION	2.0563731985523293E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967500552629	WITHOUT_CLASSIFICATION	3.2499447370552977E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947690035919	WITHOUT_CLASSIFICATION	5.230996408079386E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960747836151	WITHOUT_CLASSIFICATION	3.925216384873209E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999818478241287	WITHOUT_CLASSIFICATION	1.815217587124201E-5	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9964310489006146	WITHOUT_CLASSIFICATION	0.003568951099385423	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999999127624	WITHOUT_CLASSIFICATION	8.723749233398915E-11	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.999995741026418	WITHOUT_CLASSIFICATION	4.258973581996468E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999790819246	WITHOUT_CLASSIFICATION	2.0918075351302782E-8	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985087069887	WITHOUT_CLASSIFICATION	1.4912930112470242E-6	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.999994906436633	WITHOUT_CLASSIFICATION	5.093563366999509E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9274522668727037	WITHOUT_CLASSIFICATION	0.07254773312729634	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999939824927392	WITHOUT_CLASSIFICATION	6.017507260779662E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998650951726	WITHOUT_CLASSIFICATION	1.349048273549174E-7	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999931111966548	WITHOUT_CLASSIFICATION	6.88880334525148E-6	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9986886200842917	WITHOUT_CLASSIFICATION	0.001311379915708283	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999242726059755	WITHOUT_CLASSIFICATION	7.57273940245548E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9904465074447611	WITHOUT_CLASSIFICATION	0.009553492555238824	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994996089789263	WITHOUT_CLASSIFICATION	5.003910210736288E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999418966920991	WITHOUT_CLASSIFICATION	5.810330790084087E-5	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999999092338466	WITHOUT_CLASSIFICATION	9.07661533056927E-8	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999860794044	WITHOUT_CLASSIFICATION	1.3920595563431724E-8	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999838638657522	WITHOUT_CLASSIFICATION	1.6136134247766515E-5	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999987765191638	WITHOUT_CLASSIFICATION	1.223480836198484E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.99999638418834	WITHOUT_CLASSIFICATION	3.615811659958954E-6	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9925659984924863	WITHOUT_CLASSIFICATION	0.007434001507513796	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9987225845345802	WITHOUT_CLASSIFICATION	0.001277415465419757	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999999674700834	WITHOUT_CLASSIFICATION	3.2529916606526455E-7	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999976056102663	WITHOUT_CLASSIFICATION	2.3943897336423036E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999992196028635	WITHOUT_CLASSIFICATION	7.8039713650743E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999981321674046	WITHOUT_CLASSIFICATION	1.8678325953387519E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999976372487436	WITHOUT_CLASSIFICATION	2.3627512564668666E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9910768175723312	WITHOUT_CLASSIFICATION	0.008923182427668739	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999837012579073	WITHOUT_CLASSIFICATION	1.629874209267423E-5	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.999846639775172	WITHOUT_CLASSIFICATION	1.5336022482792698E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9999349236682399	WITHOUT_CLASSIFICATION	6.507633176009648E-5	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999924203604482	WITHOUT_CLASSIFICATION	7.579639551777959E-6	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999756145351	WITHOUT_CLASSIFICATION	2.4385464848861022E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999999552958402	WITHOUT_CLASSIFICATION	4.4704159767336804E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999901986136174	WITHOUT_CLASSIFICATION	9.801386382551481E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999746152938712	WITHOUT_CLASSIFICATION	2.538470612880744E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998824131148928	WITHOUT_CLASSIFICATION	1.1758688510720608E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999991394157443	WITHOUT_CLASSIFICATION	8.605842557279005E-7	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998275993693688	WITHOUT_CLASSIFICATION	1.724006306312525E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999997183745516	WITHOUT_CLASSIFICATION	2.816254484281568E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9415736142022628	WITHOUT_CLASSIFICATION	0.05842638579773717	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999987450926694	WITHOUT_CLASSIFICATION	1.2549073305990481E-6	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999998884900415	WITHOUT_CLASSIFICATION	1.1150995850702582E-6	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999854900775643	WITHOUT_CLASSIFICATION	1.4509922435626424E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994996089789263	WITHOUT_CLASSIFICATION	5.003910210736288E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9685289789499046	WITHOUT_CLASSIFICATION	0.0314710210500954	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999980117110019	WITHOUT_CLASSIFICATION	1.988288998081724E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9885624842877029	WITHOUT_CLASSIFICATION	0.011437515712297135	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994996089789263	WITHOUT_CLASSIFICATION	5.003910210736288E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999910860984983	WITHOUT_CLASSIFICATION	8.913901501768524E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999901986136174	WITHOUT_CLASSIFICATION	9.801386382551481E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9922920185477171	WITHOUT_CLASSIFICATION	0.007707981452282822	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.955518006970676	WITHOUT_CLASSIFICATION	0.04448199302932397	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.714142667586155	DESIGN	0.28585733241384503	WITHOUT_CLASSIFICATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999976056102663	WITHOUT_CLASSIFICATION	2.3943897336423036E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999992196028635	WITHOUT_CLASSIFICATION	7.8039713650743E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999981321674046	WITHOUT_CLASSIFICATION	1.8678325953387519E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999998503414	WITHOUT_CLASSIFICATION	1.4965861789735694E-10	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999872170212516	WITHOUT_CLASSIFICATION	1.2782978748425846E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999993344353186	WITHOUT_CLASSIFICATION	6.655646814385063E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999998972084323	WITHOUT_CLASSIFICATION	1.0279156776552008E-7	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999948500048	WITHOUT_CLASSIFICATION	5.149995261549089E-9	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994996089789263	WITHOUT_CLASSIFICATION	5.003910210736288E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999976372487436	WITHOUT_CLASSIFICATION	2.3627512564668666E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9910768175723312	WITHOUT_CLASSIFICATION	0.008923182427668739	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998806234415482	WITHOUT_CLASSIFICATION	1.1937655845188684E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993491234032	WITHOUT_CLASSIFICATION	6.508765969462502E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999999993119917	WITHOUT_CLASSIFICATION	6.880082974336703E-9	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999745984846	WITHOUT_CLASSIFICATION	2.5401515476597285E-8	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9993023325240906	WITHOUT_CLASSIFICATION	6.976674759094142E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999472192521826	WITHOUT_CLASSIFICATION	5.2780747817420434E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930065786532	WITHOUT_CLASSIFICATION	6.993421346734335E-6	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.998316019253223	WITHOUT_CLASSIFICATION	0.001683980746777037	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9990546795678346	WITHOUT_CLASSIFICATION	9.453204321653587E-4	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9998544481022124	WITHOUT_CLASSIFICATION	1.4555189778769946E-4	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998843188734	WITHOUT_CLASSIFICATION	1.1568112664123565E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999777212938	WITHOUT_CLASSIFICATION	2.2278706299801435E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960405818643	WITHOUT_CLASSIFICATION	3.959418135660607E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999680024926048	WITHOUT_CLASSIFICATION	3.1997507395178016E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864359752569	WITHOUT_CLASSIFICATION	1.356402474310691E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999777212938	WITHOUT_CLASSIFICATION	2.2278706299801435E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999633063029059	WITHOUT_CLASSIFICATION	3.669369709406786E-5	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.999999117383981	WITHOUT_CLASSIFICATION	8.826160190789954E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929881815046	WITHOUT_CLASSIFICATION	7.011818495376754E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999450186362	WITHOUT_CLASSIFICATION	5.498136379645232E-7	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999697464442717	WITHOUT_CLASSIFICATION	3.0253555728199003E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9993254659261713	WITHOUT_CLASSIFICATION	6.745340738285729E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985360583099	WITHOUT_CLASSIFICATION	1.4639416901079422E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987360017293	WITHOUT_CLASSIFICATION	1.2639982706778328E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998650951726	WITHOUT_CLASSIFICATION	1.349048273549174E-7	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9941030929966973	WITHOUT_CLASSIFICATION	0.005896907003302621	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9992304423663346	WITHOUT_CLASSIFICATION	7.695576336654839E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999431324683	WITHOUT_CLASSIFICATION	5.6867531674015386E-8	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999987511983796	WITHOUT_CLASSIFICATION	1.2488016203970765E-5	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999564169879	WITHOUT_CLASSIFICATION	4.3583012047086056E-8	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999960322479	WITHOUT_CLASSIFICATION	3.9677520684526036E-9	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999556256455068	WITHOUT_CLASSIFICATION	4.4374354493315615E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999502245	WITHOUT_CLASSIFICATION	4.977555434333777E-11	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999957322805333	WITHOUT_CLASSIFICATION	4.267719466734598E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999924853413933	WITHOUT_CLASSIFICATION	7.514658606614274E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999988821486046	WITHOUT_CLASSIFICATION	1.1178513955408181E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999993922230879	WITHOUT_CLASSIFICATION	6.077769122016809E-7	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999993121095527	WITHOUT_CLASSIFICATION	6.878904472808187E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9995125990795011	WITHOUT_CLASSIFICATION	4.874009204989363E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877696833728	WITHOUT_CLASSIFICATION	1.2230316627186616E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864049494699	WITHOUT_CLASSIFICATION	1.3595050530032401E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.99999989309892	WITHOUT_CLASSIFICATION	1.0690107998842238E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.999971624315721	WITHOUT_CLASSIFICATION	2.8375684279066625E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999187866018745	WITHOUT_CLASSIFICATION	8.121339812556623E-5	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989738161833	WITHOUT_CLASSIFICATION	1.0261838166981497E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998553758831	WITHOUT_CLASSIFICATION	1.4462411681540742E-7	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998656172606	WITHOUT_CLASSIFICATION	1.3438273930255453E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999674345706	WITHOUT_CLASSIFICATION	3.2565429406913286E-8	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999971726183879	WITHOUT_CLASSIFICATION	2.8273816119313705E-6	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999998391021278	WITHOUT_CLASSIFICATION	1.6089787220409454E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999569769894	WITHOUT_CLASSIFICATION	4.3023010515962686E-8	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.999593116897031	WITHOUT_CLASSIFICATION	4.068831029690222E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999983162322728	WITHOUT_CLASSIFICATION	1.6837677272416187E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936592729072	WITHOUT_CLASSIFICATION	6.340727092777488E-6	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.998480736059309	WITHOUT_CLASSIFICATION	0.0015192639406909536	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999160755842	WITHOUT_CLASSIFICATION	8.392441569446203E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999958756542349	WITHOUT_CLASSIFICATION	4.12434576509794E-6	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999970993285756	WITHOUT_CLASSIFICATION	2.9006714243754056E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9988097471443568	WITHOUT_CLASSIFICATION	0.0011902528556432335	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9972961885118902	WITHOUT_CLASSIFICATION	0.002703811488109851	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999998062595831	WITHOUT_CLASSIFICATION	1.9374041698301057E-7	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999400467986	WITHOUT_CLASSIFICATION	5.99532015111652E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998858302930772	WITHOUT_CLASSIFICATION	1.1416970692274557E-4	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999991616989352	WITHOUT_CLASSIFICATION	8.383010648122067E-7	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996057829829832	WITHOUT_CLASSIFICATION	3.942170170168509E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9946022016508759	WITHOUT_CLASSIFICATION	0.005397798349124067	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999671450767	WITHOUT_CLASSIFICATION	3.285492336221788E-8	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999906130840833	WITHOUT_CLASSIFICATION	9.386915916647017E-6	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999990952740058	WITHOUT_CLASSIFICATION	9.047259940906544E-7	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998085217413	WITHOUT_CLASSIFICATION	1.9147825872983326E-7	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9991469262200641	WITHOUT_CLASSIFICATION	8.530737799358767E-4	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999998052226948	WITHOUT_CLASSIFICATION	1.9477730530156183E-7	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999724649843	WITHOUT_CLASSIFICATION	2.75350156860236E-8	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.8904238600048193	WITHOUT_CLASSIFICATION	0.10957613999518073	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999967107099325	WITHOUT_CLASSIFICATION	3.289290067476992E-6	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9276456103389541	WITHOUT_CLASSIFICATION	0.07235438966104595	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999022153452	WITHOUT_CLASSIFICATION	9.778465482060012E-8	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9991376977068818	WITHOUT_CLASSIFICATION	8.623022931181472E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9985612022087368	WITHOUT_CLASSIFICATION	0.0014387977912631179	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999998663096575	WITHOUT_CLASSIFICATION	1.336903424974693E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999471636265	WITHOUT_CLASSIFICATION	5.2836373611643564E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998437895478	WITHOUT_CLASSIFICATION	1.5621045230039094E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999740273841106	WITHOUT_CLASSIFICATION	2.5972615889525057E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999993961420556	WITHOUT_CLASSIFICATION	6.038579444715385E-7	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998454180136	WITHOUT_CLASSIFICATION	1.545819863152712E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999985449168077	WITHOUT_CLASSIFICATION	1.4550831922993347E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999931953407	WITHOUT_CLASSIFICATION	6.8046591828770645E-9	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999979735925	WITHOUT_CLASSIFICATION	2.0264074396388865E-9	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9947785059052277	WITHOUT_CLASSIFICATION	0.005221494094772329	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9998739534178887	WITHOUT_CLASSIFICATION	1.260465821113152E-4	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999908534048212	WITHOUT_CLASSIFICATION	9.14659517890223E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999521802910023	WITHOUT_CLASSIFICATION	4.781970899757724E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999992789849471	WITHOUT_CLASSIFICATION	7.210150529204325E-7	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.999416529860634	WITHOUT_CLASSIFICATION	5.834701393659628E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999835866682639	WITHOUT_CLASSIFICATION	1.641333173610379E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9997827680807101	WITHOUT_CLASSIFICATION	2.1723191928985924E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9697282377841014	WITHOUT_CLASSIFICATION	0.030271762215898515	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999443436075726	WITHOUT_CLASSIFICATION	5.565639242738632E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.6943466720084269	WITHOUT_CLASSIFICATION	0.3056533279915731	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999698004248	WITHOUT_CLASSIFICATION	3.01995751750132E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9096294580408811	WITHOUT_CLASSIFICATION	0.09037054195911881	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9999634186222744	WITHOUT_CLASSIFICATION	3.6581377725585654E-5	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9999368751510127	WITHOUT_CLASSIFICATION	6.312484898731216E-5	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9985116110499485	WITHOUT_CLASSIFICATION	0.0014883889500515977	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9997192635422525	WITHOUT_CLASSIFICATION	2.807364577474415E-4	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9994923060606722	WITHOUT_CLASSIFICATION	5.076939393278071E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997395221556	WITHOUT_CLASSIFICATION	2.604778443391875E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999999950594704	WITHOUT_CLASSIFICATION	4.940529597337701E-8	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9992487721078017	WITHOUT_CLASSIFICATION	7.512278921983637E-4	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999932892043691	WITHOUT_CLASSIFICATION	6.710795630849763E-6	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999999501671402	WITHOUT_CLASSIFICATION	4.983285975473091E-8	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999478279827	WITHOUT_CLASSIFICATION	5.2172017386033295E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.999974046515882	WITHOUT_CLASSIFICATION	2.5953484118108815E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9966442791465664	WITHOUT_CLASSIFICATION	0.0033557208534336076	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999996899106158	WITHOUT_CLASSIFICATION	3.100893842013315E-6	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9937047049614705	WITHOUT_CLASSIFICATION	0.006295295038529542	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999999866143316	WITHOUT_CLASSIFICATION	1.3385668406628438E-7	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999543919294183	WITHOUT_CLASSIFICATION	4.560807058177592E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9997867198799127	WITHOUT_CLASSIFICATION	2.1328012008726583E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9996188866418281	WITHOUT_CLASSIFICATION	3.8111335817198717E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9996291064604939	WITHOUT_CLASSIFICATION	3.708935395060904E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999431803325777	WITHOUT_CLASSIFICATION	5.6819667422341006E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999996714811953	WITHOUT_CLASSIFICATION	3.28518804677813E-7	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998593531220626	WITHOUT_CLASSIFICATION	1.4064687793748648E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999704271642098	WITHOUT_CLASSIFICATION	2.9572835790134324E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999790137708297	WITHOUT_CLASSIFICATION	2.098622917031563E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998593531220626	WITHOUT_CLASSIFICATION	1.4064687793748648E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999998112929269	WITHOUT_CLASSIFICATION	1.8870707309785253E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999990309530792	WITHOUT_CLASSIFICATION	9.690469208126526E-7	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999978916506064	WITHOUT_CLASSIFICATION	2.1083493936584814E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999954772785543	WITHOUT_CLASSIFICATION	4.522721445671786E-6	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999999469963994	WITHOUT_CLASSIFICATION	5.300360073507499E-8	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999998684007345	WITHOUT_CLASSIFICATION	1.315992655674236E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.99994384187576	WITHOUT_CLASSIFICATION	5.615812424008105E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999988111847202	WITHOUT_CLASSIFICATION	1.1888152797567314E-6	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.999108545535117	WITHOUT_CLASSIFICATION	8.914544648831215E-4	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999808298314224	WITHOUT_CLASSIFICATION	1.9170168577550395E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999996388267451	WITHOUT_CLASSIFICATION	3.611732548785191E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999959731457773	WITHOUT_CLASSIFICATION	4.026854222753838E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9996968610985516	WITHOUT_CLASSIFICATION	3.031389014484429E-4	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999995694412	WITHOUT_CLASSIFICATION	4.305587983146792E-10	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999835223607733	WITHOUT_CLASSIFICATION	1.6477639226734084E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9610889832828654	WITHOUT_CLASSIFICATION	0.03891101671713467	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998674561044667	WITHOUT_CLASSIFICATION	1.3254389553317403E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998674561044667	WITHOUT_CLASSIFICATION	1.3254389553317403E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983926786319	WITHOUT_CLASSIFICATION	1.6073213680385841E-6	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999877776571696	WITHOUT_CLASSIFICATION	1.2222342830352937E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999994026531505	WITHOUT_CLASSIFICATION	5.97346849533371E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9993167555023539	WITHOUT_CLASSIFICATION	6.832444976460363E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999997038089625	WITHOUT_CLASSIFICATION	2.9619103745610544E-7	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.6883169385644908	DESIGN	0.31168306143550906	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.9999981184900845	WITHOUT_CLASSIFICATION	1.8815099156116478E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998737584310645	WITHOUT_CLASSIFICATION	1.2624156893551266E-4	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999691663635077	WITHOUT_CLASSIFICATION	3.0833636492234563E-5	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999697443352415	WITHOUT_CLASSIFICATION	3.0255664758501246E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.999383216179639	WITHOUT_CLASSIFICATION	6.16783820361012E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.99989438797958	WITHOUT_CLASSIFICATION	1.0561202042002088E-4	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998206394806629	WITHOUT_CLASSIFICATION	1.7936051933709583E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9803475703070677	WITHOUT_CLASSIFICATION	0.0196524296929324	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999983589905844	WITHOUT_CLASSIFICATION	1.6410094155481699E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9995125990795011	WITHOUT_CLASSIFICATION	4.874009204989363E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999993771380283	WITHOUT_CLASSIFICATION	6.228619715952722E-7	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999996747890977	WITHOUT_CLASSIFICATION	3.2521090229709615E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999157015355393	WITHOUT_CLASSIFICATION	8.429846446067916E-5	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999987557040383	WITHOUT_CLASSIFICATION	1.2442959617226366E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999923866323063	WITHOUT_CLASSIFICATION	7.613367693701847E-6	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999548233818322	WITHOUT_CLASSIFICATION	4.5176618167774926E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999775079069261	WITHOUT_CLASSIFICATION	2.249209307399683E-5	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999975732968642	WITHOUT_CLASSIFICATION	2.426703135810304E-6	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999509603488	WITHOUT_CLASSIFICATION	4.9039651310779385E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999961607223735	WITHOUT_CLASSIFICATION	3.839277626524912E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999979185672958	WITHOUT_CLASSIFICATION	2.081432704282694E-6	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.959126918781305	DESIGN	0.04087308121869504	WITHOUT_CLASSIFICATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.999972548996272	WITHOUT_CLASSIFICATION	2.7451003728036433E-5	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999780411872914	WITHOUT_CLASSIFICATION	2.195881270851896E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999988617184082	WITHOUT_CLASSIFICATION	1.138281591738609E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999895243428409	WITHOUT_CLASSIFICATION	1.0475657159059927E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9997579035717619	WITHOUT_CLASSIFICATION	2.4209642823805203E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998954520235676	WITHOUT_CLASSIFICATION	1.0454797643235294E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9997430574174957	WITHOUT_CLASSIFICATION	2.569425825043125E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999990114879886	WITHOUT_CLASSIFICATION	9.885120113814985E-7	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999996235123998	WITHOUT_CLASSIFICATION	3.764876001886882E-7	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9987440855573387	WITHOUT_CLASSIFICATION	0.0012559144426612591	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999975496198	WITHOUT_CLASSIFICATION	2.450380203912794E-9	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999980230080255	WITHOUT_CLASSIFICATION	1.976991974470791E-6	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999681565143326	WITHOUT_CLASSIFICATION	3.184348566745516E-5	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999961418330978	WITHOUT_CLASSIFICATION	3.858166902207357E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999989976920769	WITHOUT_CLASSIFICATION	1.0023079231036114E-6	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999954870858179	WITHOUT_CLASSIFICATION	4.5129141821223095E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999085202532	WITHOUT_CLASSIFICATION	9.147974672349673E-8	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999915160000703	WITHOUT_CLASSIFICATION	8.483999929724013E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998559012468379	WITHOUT_CLASSIFICATION	1.4409875316200138E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999914079766	WITHOUT_CLASSIFICATION	8.592023398211314E-9	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994331901298	WITHOUT_CLASSIFICATION	5.668098700788333E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.974899482798383	WITHOUT_CLASSIFICATION	0.025100517201616945	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999998692164349	WITHOUT_CLASSIFICATION	1.3078356511543855E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999751062436	WITHOUT_CLASSIFICATION	2.4893756458689338E-8	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9996949338923045	WITHOUT_CLASSIFICATION	3.05066107695546E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999567577799877	WITHOUT_CLASSIFICATION	4.324222001230432E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809061794462	WITHOUT_CLASSIFICATION	1.9093820553785463E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999567577799877	WITHOUT_CLASSIFICATION	4.324222001230432E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995583458690327	WITHOUT_CLASSIFICATION	4.4165413096730865E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9993901640323355	WITHOUT_CLASSIFICATION	6.098359676644225E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.999411639943464	WITHOUT_CLASSIFICATION	5.883600565359092E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9998887911117638	WITHOUT_CLASSIFICATION	1.1120888823621504E-4	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999997131866711	WITHOUT_CLASSIFICATION	2.8681332890304166E-6	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999990538129512	WITHOUT_CLASSIFICATION	9.461870488713513E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999993960433613	WITHOUT_CLASSIFICATION	6.039566387593669E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999997288713279	WITHOUT_CLASSIFICATION	2.7112867207372254E-7	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999994832590401	WITHOUT_CLASSIFICATION	5.16740959862268E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9997570825520345	WITHOUT_CLASSIFICATION	2.4291744796536672E-4	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999749676579194	WITHOUT_CLASSIFICATION	2.5032342080674527E-5	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9996617119132671	WITHOUT_CLASSIFICATION	3.382880867327795E-4	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999986326080179	WITHOUT_CLASSIFICATION	1.3673919820498305E-6	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9985905847542642	WITHOUT_CLASSIFICATION	0.0014094152457357417	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9992136404388707	WITHOUT_CLASSIFICATION	7.863595611292497E-4	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998872614193581	WITHOUT_CLASSIFICATION	1.1273858064175186E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999942292168291	WITHOUT_CLASSIFICATION	5.770783170891328E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999942292168291	WITHOUT_CLASSIFICATION	5.770783170891328E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9992629815809595	WITHOUT_CLASSIFICATION	7.370184190404593E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999945616358	WITHOUT_CLASSIFICATION	5.4383641981418925E-9	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999991205253256	WITHOUT_CLASSIFICATION	8.794746743531389E-7	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999995459411106	WITHOUT_CLASSIFICATION	4.540588894142749E-7	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9819004744719987	WITHOUT_CLASSIFICATION	0.018099525528001363	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999886168998331	WITHOUT_CLASSIFICATION	1.1383100166838665E-5	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998681838649076	WITHOUT_CLASSIFICATION	1.3181613509236596E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999629018536227	WITHOUT_CLASSIFICATION	3.709814637738125E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.999997503464713	WITHOUT_CLASSIFICATION	2.496535287100817E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999979162227	WITHOUT_CLASSIFICATION	2.083777367060478E-9	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999990309150503	WITHOUT_CLASSIFICATION	9.690849496499785E-7	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999991871457323	WITHOUT_CLASSIFICATION	8.128542677313845E-7	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999912708937	WITHOUT_CLASSIFICATION	8.7291063859404E-9	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.999998468860585	WITHOUT_CLASSIFICATION	1.53113941507225E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9977276410621279	WITHOUT_CLASSIFICATION	0.0022723589378721635	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999968675190597	WITHOUT_CLASSIFICATION	3.132480940185569E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998543444592681	WITHOUT_CLASSIFICATION	1.4565554073185593E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9655403599595699	WITHOUT_CLASSIFICATION	0.034459640040430194	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999336271236455	WITHOUT_CLASSIFICATION	6.637287635446619E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999998166644793	WITHOUT_CLASSIFICATION	1.8333552062236813E-7	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999993986918236	WITHOUT_CLASSIFICATION	6.01308176429688E-7	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999998005535162	WITHOUT_CLASSIFICATION	1.994464838160284E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998878124725267	WITHOUT_CLASSIFICATION	1.1218752747332923E-4	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9969802045289733	WITHOUT_CLASSIFICATION	0.0030197954710267506	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999993833312104	WITHOUT_CLASSIFICATION	6.16668789614759E-7	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999825896214253	WITHOUT_CLASSIFICATION	1.7410378574735526E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999978079967342	WITHOUT_CLASSIFICATION	2.1920032658451765E-6	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.936217936139662	WITHOUT_CLASSIFICATION	0.06378206386033805	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999844840370854	WITHOUT_CLASSIFICATION	1.551596291466275E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999699674680748	WITHOUT_CLASSIFICATION	3.003253192527515E-5	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9990750074681609	WITHOUT_CLASSIFICATION	9.249925318390795E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999919472851816	WITHOUT_CLASSIFICATION	8.052714818339986E-6	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999790087421438	WITHOUT_CLASSIFICATION	2.09912578561657E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.999960293047472	WITHOUT_CLASSIFICATION	3.9706952528079574E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9983962654225788	WITHOUT_CLASSIFICATION	0.001603734577421271	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999999730085439	WITHOUT_CLASSIFICATION	2.699145614597061E-8	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999998754878443	WITHOUT_CLASSIFICATION	1.245121557004887E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.999223911001413	WITHOUT_CLASSIFICATION	7.76088998587026E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999612734015553	WITHOUT_CLASSIFICATION	3.872659844465488E-5	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999588441963	WITHOUT_CLASSIFICATION	4.115580364244691E-8	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999678652282	WITHOUT_CLASSIFICATION	3.2134771824641836E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999430505736	WITHOUT_CLASSIFICATION	5.694942631577666E-8	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998447462159561	WITHOUT_CLASSIFICATION	1.5525378404401626E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9996841682596956	WITHOUT_CLASSIFICATION	3.1583174030439665E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999994064674	WITHOUT_CLASSIFICATION	5.935325296907649E-10	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999241407449269	WITHOUT_CLASSIFICATION	7.585925507309465E-5	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9763113497853944	DESIGN	0.02368865021460565	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999972781199357	WITHOUT_CLASSIFICATION	2.721880064287545E-6	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998873852399	WITHOUT_CLASSIFICATION	1.1261476002048652E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999250811501373	WITHOUT_CLASSIFICATION	7.491884986264989E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999778670168	WITHOUT_CLASSIFICATION	2.213298326513465E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999999132309073	WITHOUT_CLASSIFICATION	8.676909275905618E-8	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999996489315652	WITHOUT_CLASSIFICATION	3.510684347846716E-7	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9994291543697196	WITHOUT_CLASSIFICATION	5.708456302805032E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9997989948026301	WITHOUT_CLASSIFICATION	2.0100519736976789E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999910860984983	WITHOUT_CLASSIFICATION	8.913901501768524E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999910860984983	WITHOUT_CLASSIFICATION	8.913901501768524E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999912588803	WITHOUT_CLASSIFICATION	8.741119711301721E-9	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999864516607858	WITHOUT_CLASSIFICATION	1.3548339214087488E-5	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997307632994268	WITHOUT_CLASSIFICATION	2.692367005732546E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999998700672609	WITHOUT_CLASSIFICATION	1.299327390981162E-7	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999998397765	WITHOUT_CLASSIFICATION	1.602235515589704E-10	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999999565450463	WITHOUT_CLASSIFICATION	4.3454953848149405E-8	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999962782447258	WITHOUT_CLASSIFICATION	3.7217552741168802E-6	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999977758743595	WITHOUT_CLASSIFICATION	2.2241256405368663E-6	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9996095057671869	WITHOUT_CLASSIFICATION	3.904942328131229E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999996812054641	WITHOUT_CLASSIFICATION	3.18794535820516E-7	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999992238696184	WITHOUT_CLASSIFICATION	7.76130381663974E-7	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9993911750714661	WITHOUT_CLASSIFICATION	6.088249285339122E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999996434583781	WITHOUT_CLASSIFICATION	3.565416219047739E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999853531646827	WITHOUT_CLASSIFICATION	1.4646835317155526E-5	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9086500698975285	DESIGN	0.0913499301024715	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998595639128013	WITHOUT_CLASSIFICATION	1.4043608719865348E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998088436448	WITHOUT_CLASSIFICATION	1.9115635521960225E-7	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9998664987943158	WITHOUT_CLASSIFICATION	1.335012056841904E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9995197905221753	WITHOUT_CLASSIFICATION	4.8020947782478424E-4	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9998557077560952	WITHOUT_CLASSIFICATION	1.442922439047401E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999984892691584	WITHOUT_CLASSIFICATION	1.5107308417490312E-6	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.999999703324604	WITHOUT_CLASSIFICATION	2.966753960181417E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999433096502504	WITHOUT_CLASSIFICATION	5.669034974958678E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997230724590552	WITHOUT_CLASSIFICATION	2.769275409448427E-4	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999305753831333	WITHOUT_CLASSIFICATION	6.942461686659573E-5	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9246035186683468	DESIGN	0.0753964813316532	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999730382503621	WITHOUT_CLASSIFICATION	2.696174963787308E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995664062121197	WITHOUT_CLASSIFICATION	4.3359378788041935E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999891223119374	WITHOUT_CLASSIFICATION	1.0877688062612699E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999433096502504	WITHOUT_CLASSIFICATION	5.669034974958678E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9997322030688474	WITHOUT_CLASSIFICATION	2.6779693115264224E-4	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9991540472953351	WITHOUT_CLASSIFICATION	8.45952704664877E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9998881280986053	WITHOUT_CLASSIFICATION	1.1187190139472801E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.999968995240005	WITHOUT_CLASSIFICATION	3.100475999488867E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999996218875306	WITHOUT_CLASSIFICATION	3.7811246944716844E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.7244082207918433	DESIGN	0.2755917792081567	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9926739638749066	WITHOUT_CLASSIFICATION	0.0073260361250934766	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999719823662987	WITHOUT_CLASSIFICATION	2.8017633701409208E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999949226988115	WITHOUT_CLASSIFICATION	5.0773011884895E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.999968995240005	WITHOUT_CLASSIFICATION	3.100475999488867E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999973004060628	WITHOUT_CLASSIFICATION	2.699593937253457E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999191315417884	WITHOUT_CLASSIFICATION	8.086845821160325E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9976396303229529	WITHOUT_CLASSIFICATION	0.002360369677047241	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999965969904841	WITHOUT_CLASSIFICATION	3.4030095159005964E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999993329243004	WITHOUT_CLASSIFICATION	6.670756995679826E-7	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999990309150503	WITHOUT_CLASSIFICATION	9.690849496499785E-7	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999704394329	WITHOUT_CLASSIFICATION	2.956056705987781E-8	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999977785407778	WITHOUT_CLASSIFICATION	2.2214592221896044E-6	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999508106997084	WITHOUT_CLASSIFICATION	4.918930029157937E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996395957313028	WITHOUT_CLASSIFICATION	3.60404268697204E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999556459010321	WITHOUT_CLASSIFICATION	4.4354098967792636E-5	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9997098053393173	WITHOUT_CLASSIFICATION	2.901946606826955E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9997713274372348	WITHOUT_CLASSIFICATION	2.2867256276514551E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999995387838022	WITHOUT_CLASSIFICATION	4.612161978054791E-7	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999709961103429	WITHOUT_CLASSIFICATION	2.9003889657143816E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999296626510272	WITHOUT_CLASSIFICATION	7.033734897275652E-5	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998754993994986	WITHOUT_CLASSIFICATION	1.2450060050140093E-4	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999953397305171	WITHOUT_CLASSIFICATION	4.660269482827973E-6	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999961077119721	WITHOUT_CLASSIFICATION	3.892288027895134E-6	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9967083247842303	WITHOUT_CLASSIFICATION	0.00329167521576958	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999972291884232	WITHOUT_CLASSIFICATION	2.7708115767144688E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999936497343935	WITHOUT_CLASSIFICATION	6.350265606439183E-6	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999996146543509	WITHOUT_CLASSIFICATION	3.853456490652169E-7	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999994042975198	WITHOUT_CLASSIFICATION	5.957024802094153E-7	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.999998368524522	WITHOUT_CLASSIFICATION	1.631475477989475E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999499860158036	WITHOUT_CLASSIFICATION	5.001398419639605E-4	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999946602498415	WITHOUT_CLASSIFICATION	5.339750158514355E-6	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999998197132822	WITHOUT_CLASSIFICATION	1.8028671779791304E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999984811008352	WITHOUT_CLASSIFICATION	1.5188991647337477E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999931706304158	WITHOUT_CLASSIFICATION	6.829369584249439E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999987581693484	WITHOUT_CLASSIFICATION	1.2418306516609593E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9978974267652313	WITHOUT_CLASSIFICATION	0.002102573234768628	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999992218722409	WITHOUT_CLASSIFICATION	7.781277590794234E-7	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871801933405	WITHOUT_CLASSIFICATION	1.2819806659394687E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967426017312684	WITHOUT_CLASSIFICATION	0.003257398268731683	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.8743897051264042	WITHOUT_CLASSIFICATION	0.12561029487359582	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999699587961149	WITHOUT_CLASSIFICATION	3.004120388507993E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999914169337492	WITHOUT_CLASSIFICATION	8.583066250816613E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997953417595	WITHOUT_CLASSIFICATION	2.0465824050234758E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997953417595	WITHOUT_CLASSIFICATION	2.0465824050234758E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999672728897159	WITHOUT_CLASSIFICATION	3.272711028420353E-5	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999199001283222	WITHOUT_CLASSIFICATION	8.009987167784273E-5	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999996823851028	WITHOUT_CLASSIFICATION	3.176148971952604E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999992369344242	WITHOUT_CLASSIFICATION	7.63065575879075E-7	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999881868101448	WITHOUT_CLASSIFICATION	1.1813189855200573E-5	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.7431351478914254	WITHOUT_CLASSIFICATION	0.2568648521085745	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9989708637196523	WITHOUT_CLASSIFICATION	0.0010291362803477942	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999884094313	WITHOUT_CLASSIFICATION	1.159056869989683E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998725969104	WITHOUT_CLASSIFICATION	1.2740308956830315E-7	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999640755274	WITHOUT_CLASSIFICATION	3.5924472604598475E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999996082057	WITHOUT_CLASSIFICATION	3.9179429624470954E-10	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999989827890826	WITHOUT_CLASSIFICATION	1.0172109173260474E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999998524855349	WITHOUT_CLASSIFICATION	1.4751446504799972E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997953417595	WITHOUT_CLASSIFICATION	2.0465824050234758E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999883231481361	WITHOUT_CLASSIFICATION	1.1676851863856649E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9994413263954307	WITHOUT_CLASSIFICATION	5.586736045693186E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9983179855460026	WITHOUT_CLASSIFICATION	0.0016820144539973576	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999926175870429	WITHOUT_CLASSIFICATION	7.382412957075764E-6	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999930612895435	WITHOUT_CLASSIFICATION	6.938710456485522E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999967369376481	WITHOUT_CLASSIFICATION	3.263062351905475E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998422799958282	WITHOUT_CLASSIFICATION	1.5772000417181662E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999982513263895	WITHOUT_CLASSIFICATION	1.7486736103856667E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999840798089887	WITHOUT_CLASSIFICATION	1.5920191011338155E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9999365734124556	WITHOUT_CLASSIFICATION	6.342658754445467E-5	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998569827514877	WITHOUT_CLASSIFICATION	1.4301724851231753E-4	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871801933405	WITHOUT_CLASSIFICATION	1.2819806659394687E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997953417595	WITHOUT_CLASSIFICATION	2.0465824050234758E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999989651766	WITHOUT_CLASSIFICATION	1.0348234239736682E-9	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999996049908932	WITHOUT_CLASSIFICATION	3.950091068214716E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.999984483343212	WITHOUT_CLASSIFICATION	1.5516656788049835E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999908437659877	WITHOUT_CLASSIFICATION	9.156234012285386E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.523019305331527	WITHOUT_CLASSIFICATION	0.47698069466847287	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999995293317593	WITHOUT_CLASSIFICATION	4.7066824078419675E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999356363169863	WITHOUT_CLASSIFICATION	6.436368301360697E-5	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999031392408	WITHOUT_CLASSIFICATION	9.686075910799623E-8	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999389808735	WITHOUT_CLASSIFICATION	6.101912657675574E-8	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999983194610143	WITHOUT_CLASSIFICATION	1.6805389857004278E-6	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998760338471	WITHOUT_CLASSIFICATION	1.2396615296069932E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997791835443021	WITHOUT_CLASSIFICATION	2.208164556979922E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999941142681056	WITHOUT_CLASSIFICATION	5.885731894467557E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999963968997652	WITHOUT_CLASSIFICATION	3.6031002348303075E-6	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995583458690327	WITHOUT_CLASSIFICATION	4.4165413096730865E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999998080692968	WITHOUT_CLASSIFICATION	1.919307031032117E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999375587568	WITHOUT_CLASSIFICATION	6.24412431717146E-8	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999994808753541	WITHOUT_CLASSIFICATION	5.191246459164735E-7	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999993356290298	WITHOUT_CLASSIFICATION	6.643709702756422E-7	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999998622326827	WITHOUT_CLASSIFICATION	1.3776731723095084E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987013421085573	WITHOUT_CLASSIFICATION	0.0012986578914426935	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987013421085573	WITHOUT_CLASSIFICATION	0.0012986578914426935	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9932737002489311	WITHOUT_CLASSIFICATION	0.00672629975106877	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9999075189702602	WITHOUT_CLASSIFICATION	9.248102973990546E-5	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999575105669	WITHOUT_CLASSIFICATION	4.248943302448415E-8	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9996963090302586	WITHOUT_CLASSIFICATION	3.036909697412875E-4	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999939484064649	WITHOUT_CLASSIFICATION	6.051593535008046E-6	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999899979607281	WITHOUT_CLASSIFICATION	1.000203927188934E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9993051382262031	WITHOUT_CLASSIFICATION	6.948617737968373E-4	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999947987809	WITHOUT_CLASSIFICATION	5.2012191615540556E-9	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999947987809	WITHOUT_CLASSIFICATION	5.2012191615540556E-9	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.999997937147352	WITHOUT_CLASSIFICATION	2.062852648073972E-6	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999970989765491	WITHOUT_CLASSIFICATION	2.9010234508403033E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999924076650244	WITHOUT_CLASSIFICATION	7.59233497561728E-6	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.99998898531049	WITHOUT_CLASSIFICATION	1.101468950990763E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.99998898531049	WITHOUT_CLASSIFICATION	1.101468950990763E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.99998898531049	WITHOUT_CLASSIFICATION	1.101468950990763E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9993110852434716	WITHOUT_CLASSIFICATION	6.889147565283843E-4	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9998707380287011	WITHOUT_CLASSIFICATION	1.292619712988428E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999996902775551	WITHOUT_CLASSIFICATION	3.097224450064509E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9800225402964438	WITHOUT_CLASSIFICATION	0.019977459703556195	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999151862537065	WITHOUT_CLASSIFICATION	8.481374629351435E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997953417595	WITHOUT_CLASSIFICATION	2.0465824050234758E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997953417595	WITHOUT_CLASSIFICATION	2.0465824050234758E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999972104813555	WITHOUT_CLASSIFICATION	2.7895186446544443E-6	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9992163901125901	WITHOUT_CLASSIFICATION	7.836098874098982E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999711621991434	WITHOUT_CLASSIFICATION	2.883780085664346E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.999996216460835	WITHOUT_CLASSIFICATION	3.783539164919921E-6	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999189435413627	WITHOUT_CLASSIFICATION	8.105645863729027E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999994485163998	WITHOUT_CLASSIFICATION	5.514836002018563E-7	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.999576807523665	WITHOUT_CLASSIFICATION	4.2319247633496607E-4	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9994130807007012	WITHOUT_CLASSIFICATION	5.869192992987291E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.999998920725269	WITHOUT_CLASSIFICATION	1.0792747309824077E-6	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999999994042582	WITHOUT_CLASSIFICATION	5.957418070382819E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999936471743851	WITHOUT_CLASSIFICATION	6.3528256148588935E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999694746537551	WITHOUT_CLASSIFICATION	3.052534624484803E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999694746537551	WITHOUT_CLASSIFICATION	3.052534624484803E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999980995741281	WITHOUT_CLASSIFICATION	1.900425871898981E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999980995741281	WITHOUT_CLASSIFICATION	1.900425871898981E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999841793019185	WITHOUT_CLASSIFICATION	1.582069808141045E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974761134326	WITHOUT_CLASSIFICATION	2.523886567347093E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999974761134326	WITHOUT_CLASSIFICATION	2.523886567347093E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999937351587723	WITHOUT_CLASSIFICATION	6.264841227703117E-6	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999934805606798	WITHOUT_CLASSIFICATION	6.51943932023225E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998267427618	WITHOUT_CLASSIFICATION	1.732572383486607E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987013421085573	WITHOUT_CLASSIFICATION	0.0012986578914426935	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999998913330593	WITHOUT_CLASSIFICATION	1.0866694070049338E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999934805606798	WITHOUT_CLASSIFICATION	6.51943932023225E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9872451400995951	WITHOUT_CLASSIFICATION	0.012754859900404933	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9997411338951058	WITHOUT_CLASSIFICATION	2.588661048941911E-4	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999999678623817	WITHOUT_CLASSIFICATION	3.2137618307744995E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999992312359701	WITHOUT_CLASSIFICATION	7.687640298369413E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999976437376467	WITHOUT_CLASSIFICATION	2.3562623534344245E-6	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9992256663630169	WITHOUT_CLASSIFICATION	7.743336369832007E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998326911009	WITHOUT_CLASSIFICATION	1.6730889913924087E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9613487089947759	WITHOUT_CLASSIFICATION	0.03865129100522409	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999997128966598	WITHOUT_CLASSIFICATION	2.8710334017437197E-7	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9383578967892088	WITHOUT_CLASSIFICATION	0.061642103210791305	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999743341664	WITHOUT_CLASSIFICATION	2.5665833576036478E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999186205339043	WITHOUT_CLASSIFICATION	8.137946609570054E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998380588163	WITHOUT_CLASSIFICATION	1.6194118362858644E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999936165882267	WITHOUT_CLASSIFICATION	6.38341177323608E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999517313989337	WITHOUT_CLASSIFICATION	4.826860106625863E-5	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9983059821684587	WITHOUT_CLASSIFICATION	0.0016940178315412821	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999927406349	WITHOUT_CLASSIFICATION	7.259365141617189E-9	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998744933706544	WITHOUT_CLASSIFICATION	1.255066293456125E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998744933706544	WITHOUT_CLASSIFICATION	1.255066293456125E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999770547401892	WITHOUT_CLASSIFICATION	2.2945259810753293E-5	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999999766804143	WITHOUT_CLASSIFICATION	2.3319585724062676E-8	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999966475930689	WITHOUT_CLASSIFICATION	3.3524069310755614E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999035615331211	WITHOUT_CLASSIFICATION	9.643846687896165E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999994235248628	WITHOUT_CLASSIFICATION	5.764751371471847E-7	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999905839908634	WITHOUT_CLASSIFICATION	9.416009136710403E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999349892110034	WITHOUT_CLASSIFICATION	6.501078899659053E-5	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999997669844969	WITHOUT_CLASSIFICATION	2.330155029769449E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999984549438479	WITHOUT_CLASSIFICATION	1.545056152096161E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.99994240431371	WITHOUT_CLASSIFICATION	5.759568628998837E-5	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999447567743601	WITHOUT_CLASSIFICATION	5.5243225640031005E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997791835443021	WITHOUT_CLASSIFICATION	2.208164556979922E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999969080848022	WITHOUT_CLASSIFICATION	3.091915197775596E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999986393813813	WITHOUT_CLASSIFICATION	1.3606186186796484E-6	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999614917138194	WITHOUT_CLASSIFICATION	3.850828618049097E-5	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999989865872915	WITHOUT_CLASSIFICATION	1.013412708513919E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999949336049	WITHOUT_CLASSIFICATION	5.0663950995047223E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999949336049	WITHOUT_CLASSIFICATION	5.0663950995047223E-8	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998043889671858	WITHOUT_CLASSIFICATION	1.956110328141496E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9993450336547005	WITHOUT_CLASSIFICATION	6.549663452995019E-4	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999979874070184	WITHOUT_CLASSIFICATION	2.012592981671291E-6	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999977994231284	WITHOUT_CLASSIFICATION	2.200576871643096E-6	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999959690525817	WITHOUT_CLASSIFICATION	4.030947418369495E-6	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999970402388987	WITHOUT_CLASSIFICATION	2.95976110135753E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9989998763111609	WITHOUT_CLASSIFICATION	0.0010001236888390573	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999589991622974	WITHOUT_CLASSIFICATION	4.100083770261334E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999888504341193	WITHOUT_CLASSIFICATION	1.1149565880647997E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999995127752	WITHOUT_CLASSIFICATION	4.872248391965201E-10	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9994297064204081	WITHOUT_CLASSIFICATION	5.702935795919561E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999589991622974	WITHOUT_CLASSIFICATION	4.100083770261334E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.5839314016466369	DESIGN	0.416068598353363	WITHOUT_CLASSIFICATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9649595329056873	WITHOUT_CLASSIFICATION	0.03504046709431274	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.998740748984064	WITHOUT_CLASSIFICATION	0.0012592510159361524	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.999999645065556	WITHOUT_CLASSIFICATION	3.5493444389419086E-7	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999996319577761	WITHOUT_CLASSIFICATION	3.680422239699045E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.999999931629734	WITHOUT_CLASSIFICATION	6.837026602917553E-8	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999985947116414	WITHOUT_CLASSIFICATION	1.4052883586108287E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999291258156	WITHOUT_CLASSIFICATION	7.087418440632032E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9978905907901111	WITHOUT_CLASSIFICATION	0.0021094092098888784	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996601684930154	WITHOUT_CLASSIFICATION	3.3983150698447287E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999723442168575	WITHOUT_CLASSIFICATION	2.7655783142408015E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999994873226383	WITHOUT_CLASSIFICATION	5.126773616630607E-7	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999993665829188	WITHOUT_CLASSIFICATION	6.334170812081756E-6	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999985505293392	WITHOUT_CLASSIFICATION	1.449470660795917E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999965892457123	WITHOUT_CLASSIFICATION	3.41075428769101E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999969014227768	WITHOUT_CLASSIFICATION	3.098577223268175E-6	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999981053402379	WITHOUT_CLASSIFICATION	1.8946597620101083E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9970507966926072	WITHOUT_CLASSIFICATION	0.002949203307392809	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9996087415857668	WITHOUT_CLASSIFICATION	3.9125841423325925E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999983891697656	WITHOUT_CLASSIFICATION	1.6108302343817174E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999743396781862	WITHOUT_CLASSIFICATION	2.566032181385356E-5	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.8965915122949064	DESIGN	0.10340848770509359	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998973130562455	WITHOUT_CLASSIFICATION	1.0268694375452803E-4	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999975091823475	WITHOUT_CLASSIFICATION	2.4908176525467196E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999578640021	WITHOUT_CLASSIFICATION	4.2135997798606396E-8	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.999988154831329	WITHOUT_CLASSIFICATION	1.1845168670932042E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999990675311028	WITHOUT_CLASSIFICATION	9.324688971746965E-7	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999274997798	WITHOUT_CLASSIFICATION	7.250022013040387E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999985934739418	WITHOUT_CLASSIFICATION	1.4065260582654392E-6	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9708635059170977	WITHOUT_CLASSIFICATION	0.02913649408290221	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999926503423	WITHOUT_CLASSIFICATION	7.349657550155667E-9	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999962515061351	WITHOUT_CLASSIFICATION	3.7484938648141058E-6	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999905180619517	WITHOUT_CLASSIFICATION	9.481938048290875E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9993533023171559	WITHOUT_CLASSIFICATION	6.466976828440905E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999731206159524	WITHOUT_CLASSIFICATION	2.687938404749749E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999996597469707	WITHOUT_CLASSIFICATION	3.402530292458995E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998510881439999	WITHOUT_CLASSIFICATION	1.4891185599996646E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999941637675	WITHOUT_CLASSIFICATION	5.8362325034592036E-8	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998879243444	WITHOUT_CLASSIFICATION	1.120756555869201E-7	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999895907038504	WITHOUT_CLASSIFICATION	1.0409296149564747E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999997698267495	WITHOUT_CLASSIFICATION	2.3017325039154197E-7	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999990955965576	WITHOUT_CLASSIFICATION	9.044034423723612E-7	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999949515444665	WITHOUT_CLASSIFICATION	5.0484555335073316E-5	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999064974329	WITHOUT_CLASSIFICATION	9.350256713224436E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999848930924676	WITHOUT_CLASSIFICATION	1.5106907532490883E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9997029914006299	WITHOUT_CLASSIFICATION	2.9700859937003855E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999982056070938	WITHOUT_CLASSIFICATION	1.7943929061666398E-6	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999970707337019	WITHOUT_CLASSIFICATION	2.929266298068481E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999999409177592	WITHOUT_CLASSIFICATION	5.908224079092379E-7	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999943499170822	WITHOUT_CLASSIFICATION	5.650082917693335E-6	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996476713282	WITHOUT_CLASSIFICATION	3.523286718071453E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999782766931283	WITHOUT_CLASSIFICATION	2.172330687168098E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999594686288759	WITHOUT_CLASSIFICATION	4.053137112407498E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999997904166472	WITHOUT_CLASSIFICATION	2.0958335281417168E-7	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998611718449	WITHOUT_CLASSIFICATION	1.3882815510165214E-7	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999962285249792	WITHOUT_CLASSIFICATION	3.7714750208004515E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.99998359525289	WITHOUT_CLASSIFICATION	1.6404747109906927E-5	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999995706113207	WITHOUT_CLASSIFICATION	4.293886792234254E-7	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999868286790738	WITHOUT_CLASSIFICATION	1.3171320926107927E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.99999990840492	WITHOUT_CLASSIFICATION	9.159507986008401E-8	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999585545715425	WITHOUT_CLASSIFICATION	4.144542845757287E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999911729892412	WITHOUT_CLASSIFICATION	8.82701075886703E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.999978584746207	WITHOUT_CLASSIFICATION	2.1415253792982944E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6589610004494759	DESIGN	0.341038999550524	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.996225159733992	WITHOUT_CLASSIFICATION	0.003774840266008092	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999367092675694	WITHOUT_CLASSIFICATION	6.329073243067203E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996476713282	WITHOUT_CLASSIFICATION	3.523286718071453E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999916717398414	WITHOUT_CLASSIFICATION	8.328260158675829E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999984353088	WITHOUT_CLASSIFICATION	1.5646912293970813E-9	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998338933159789	WITHOUT_CLASSIFICATION	1.6610668402109444E-4	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999991852631284	WITHOUT_CLASSIFICATION	8.147368715489519E-7	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999973896958475	WITHOUT_CLASSIFICATION	2.610304152401448E-6	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999958112842435	WITHOUT_CLASSIFICATION	4.188715756489439E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999888504341193	WITHOUT_CLASSIFICATION	1.1149565880647997E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990392949631239	WITHOUT_CLASSIFICATION	9.607050368760238E-4	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999731206159524	WITHOUT_CLASSIFICATION	2.687938404749749E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9779853884706339	WITHOUT_CLASSIFICATION	0.022014611529366096	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997124029559	WITHOUT_CLASSIFICATION	2.8759704412422737E-7	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999694850735	WITHOUT_CLASSIFICATION	3.051492649388471E-7	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999991783982837	WITHOUT_CLASSIFICATION	8.216017163004058E-7	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.99995757496239	WITHOUT_CLASSIFICATION	4.242503760991723E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9949591874223597	WITHOUT_CLASSIFICATION	0.005040812577640246	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9947717174656975	WITHOUT_CLASSIFICATION	0.005228282534302426	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9932816563501936	WITHOUT_CLASSIFICATION	0.006718343649806348	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9997968301078378	WITHOUT_CLASSIFICATION	2.0316989216215056E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999960745853181	WITHOUT_CLASSIFICATION	3.925414681885054E-6	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999927418036823	WITHOUT_CLASSIFICATION	7.2581963177602946E-6	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9989633020369748	WITHOUT_CLASSIFICATION	0.0010366979630251107	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9989949844170039	WITHOUT_CLASSIFICATION	0.001005015582996217	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9989949844170039	WITHOUT_CLASSIFICATION	0.001005015582996217	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9999243653211778	WITHOUT_CLASSIFICATION	7.563467882218161E-5	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999986034637239	WITHOUT_CLASSIFICATION	1.3965362760491618E-6	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999996417970866	WITHOUT_CLASSIFICATION	3.5820291337859715E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999949391075885	WITHOUT_CLASSIFICATION	5.060892411528008E-6	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999842199072065	WITHOUT_CLASSIFICATION	1.5780092793446783E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999365511005458	WITHOUT_CLASSIFICATION	6.34488994541378E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.999998418084253	WITHOUT_CLASSIFICATION	1.5819157469552022E-6	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999852773606328	WITHOUT_CLASSIFICATION	1.4722639367192337E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999997364305361	WITHOUT_CLASSIFICATION	2.6356946387004067E-7	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999909710917049	WITHOUT_CLASSIFICATION	9.028908295086971E-6	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999976840019486	WITHOUT_CLASSIFICATION	2.3159980514433203E-6	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999999026580425	WITHOUT_CLASSIFICATION	9.734195741111635E-8	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.999999824445494	WITHOUT_CLASSIFICATION	1.7555450610887054E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999954383	WITHOUT_CLASSIFICATION	4.5617575423415636E-12	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9998235455261353	WITHOUT_CLASSIFICATION	1.7645447386469094E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999965414298202	WITHOUT_CLASSIFICATION	3.4585701797740735E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9987028071450252	WITHOUT_CLASSIFICATION	0.0012971928549747487	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999992925198	WITHOUT_CLASSIFICATION	7.074802066415185E-10	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999675459379	WITHOUT_CLASSIFICATION	3.2454062079497735E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999329914520211	WITHOUT_CLASSIFICATION	6.700854797894292E-5	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999994497437127	WITHOUT_CLASSIFICATION	5.50256287224115E-7	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999495148120215	WITHOUT_CLASSIFICATION	5.04851879783943E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999993547064362	WITHOUT_CLASSIFICATION	6.452935637307152E-7	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9988678461041525	WITHOUT_CLASSIFICATION	0.0011321538958474777	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999972871697769	WITHOUT_CLASSIFICATION	2.7128302231026893E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958881266335	WITHOUT_CLASSIFICATION	4.1118733663885405E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.999998984436344	WITHOUT_CLASSIFICATION	1.0155636560240457E-6	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999797541296741	WITHOUT_CLASSIFICATION	2.024587032591533E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998260849278003	WITHOUT_CLASSIFICATION	1.739150721996362E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999327379204873	WITHOUT_CLASSIFICATION	6.726207951264492E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9415736142022628	WITHOUT_CLASSIFICATION	0.05842638579773717	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.825061222230748	WITHOUT_CLASSIFICATION	0.17493877776925207	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999939110216512	WITHOUT_CLASSIFICATION	6.088978348809955E-6	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9998919218036053	WITHOUT_CLASSIFICATION	1.0807819639468531E-4	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.999988582627111	WITHOUT_CLASSIFICATION	1.141737288897812E-5	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999973603195533	WITHOUT_CLASSIFICATION	2.6396804467046373E-6	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999965172510757	WITHOUT_CLASSIFICATION	3.482748924265716E-6	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999915239041157	WITHOUT_CLASSIFICATION	8.47609588417284E-6	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999974136050082	WITHOUT_CLASSIFICATION	2.586394991813547E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997090031134	WITHOUT_CLASSIFICATION	2.909968865226497E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678663200672	WITHOUT_CLASSIFICATION	3.213367993280133E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999999999403149	WITHOUT_CLASSIFICATION	5.96851032724462E-10	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999768551573219	WITHOUT_CLASSIFICATION	2.3144842678043624E-5	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999999276851113	WITHOUT_CLASSIFICATION	7.231488876606499E-8	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999430779138	WITHOUT_CLASSIFICATION	5.692208609799354E-8	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929881815046	WITHOUT_CLASSIFICATION	7.011818495376754E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.989871590204971	WITHOUT_CLASSIFICATION	0.010128409795029082	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999987290008332	WITHOUT_CLASSIFICATION	1.2709991668962662E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999988347316	WITHOUT_CLASSIFICATION	1.16526832976096E-9	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999898775049	WITHOUT_CLASSIFICATION	1.0122495004855458E-8	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999075402759946	WITHOUT_CLASSIFICATION	9.24597240053572E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999957147899959	WITHOUT_CLASSIFICATION	4.2852100040753465E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999935426036476	WITHOUT_CLASSIFICATION	6.457396352414524E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999994822075734	WITHOUT_CLASSIFICATION	5.177924267011155E-7	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999979039411113	WITHOUT_CLASSIFICATION	2.0960588887007415E-6	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9985406648374409	WITHOUT_CLASSIFICATION	0.0014593351625591742	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999997034901928	WITHOUT_CLASSIFICATION	2.965098071705519E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999633116796212	WITHOUT_CLASSIFICATION	3.668832037880565E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999975136933845	WITHOUT_CLASSIFICATION	2.4863066155142136E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999956461108522	WITHOUT_CLASSIFICATION	4.353889147842606E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999966567795481	WITHOUT_CLASSIFICATION	3.343220451819596E-6	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999996389963665	WITHOUT_CLASSIFICATION	3.6100363349522317E-7	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9977142925272292	WITHOUT_CLASSIFICATION	0.0022857074727706756	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999856438853053	WITHOUT_CLASSIFICATION	1.4356114694754692E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999513482796303	WITHOUT_CLASSIFICATION	4.865172036974564E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999927587929587	WITHOUT_CLASSIFICATION	7.241207041380589E-6	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999345339757	WITHOUT_CLASSIFICATION	6.546602422151695E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999999101213178	WITHOUT_CLASSIFICATION	8.987868216107145E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999784026723	WITHOUT_CLASSIFICATION	2.1597327658252107E-8	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999721270421	WITHOUT_CLASSIFICATION	2.7872957978198508E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999784026723	WITHOUT_CLASSIFICATION	2.1597327658252107E-8	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999995154333479	WITHOUT_CLASSIFICATION	4.84566652162025E-7	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.999995826714294	WITHOUT_CLASSIFICATION	4.173285705945326E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999864575604502	WITHOUT_CLASSIFICATION	1.3542439549736944E-5	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999098269519	WITHOUT_CLASSIFICATION	9.017304822767653E-8	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999991425816813	WITHOUT_CLASSIFICATION	8.57418318731457E-7	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999956935545989	WITHOUT_CLASSIFICATION	4.306445401142249E-6	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999987472883857	WITHOUT_CLASSIFICATION	1.252711614297624E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.999184143219424	WITHOUT_CLASSIFICATION	8.158567805759555E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999530824999945	WITHOUT_CLASSIFICATION	4.6917500005609716E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999981906779564	WITHOUT_CLASSIFICATION	1.8093220436821004E-6	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999883630273	WITHOUT_CLASSIFICATION	1.1636972645396152E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999688971238281	WITHOUT_CLASSIFICATION	3.110287617191161E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999326347604	WITHOUT_CLASSIFICATION	6.736523956122892E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999996259580285	DESIGN	3.7404197157141926E-7	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999996462650865	WITHOUT_CLASSIFICATION	3.537349135295658E-7	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999988449999	WITHOUT_CLASSIFICATION	1.1550001475880545E-9	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999978153759417	WITHOUT_CLASSIFICATION	2.184624058303625E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999376483166663	WITHOUT_CLASSIFICATION	6.23516833337489E-5	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999669739824	WITHOUT_CLASSIFICATION	3.302601756888248E-8	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9991742404413434	WITHOUT_CLASSIFICATION	8.257595586566677E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999066541244035	WITHOUT_CLASSIFICATION	9.33458755965389E-5	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999913420388382	WITHOUT_CLASSIFICATION	8.65796116173702E-6	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9921798308623233	WITHOUT_CLASSIFICATION	0.007820169137676759	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999967877082905	WITHOUT_CLASSIFICATION	3.21229170949854E-6	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999999671499247	WITHOUT_CLASSIFICATION	3.2850075355342677E-8	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996700015771607	WITHOUT_CLASSIFICATION	3.299984228393482E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9972219427170226	WITHOUT_CLASSIFICATION	0.0027780572829773234	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999651288512565	WITHOUT_CLASSIFICATION	3.4871148743423434E-5	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999991884669222	WITHOUT_CLASSIFICATION	8.115330777635705E-7	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999979032559674	WITHOUT_CLASSIFICATION	2.096744032569084E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.999972576768874	WITHOUT_CLASSIFICATION	2.742323112615427E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9975654015312125	WITHOUT_CLASSIFICATION	0.00243459846878746	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9995569922235914	WITHOUT_CLASSIFICATION	4.4300777640861566E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.999997335688827	WITHOUT_CLASSIFICATION	2.6643111730903427E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999930942618573	WITHOUT_CLASSIFICATION	6.90573814269444E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999328964096796	WITHOUT_CLASSIFICATION	6.710359032025763E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9997093329996408	WITHOUT_CLASSIFICATION	2.906670003591866E-4	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996451736012	WITHOUT_CLASSIFICATION	3.5482639886336985E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.999568490555639	WITHOUT_CLASSIFICATION	4.3150944436103024E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999990683261172	WITHOUT_CLASSIFICATION	9.316738828197363E-7	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.999996084239734	WITHOUT_CLASSIFICATION	3.915760266017745E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999962061139708	WITHOUT_CLASSIFICATION	3.793886029284746E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9885624842877029	WITHOUT_CLASSIFICATION	0.011437515712297135	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9996700015771607	WITHOUT_CLASSIFICATION	3.299984228393482E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9993200025139033	WITHOUT_CLASSIFICATION	6.799974860967903E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999991140250272	WITHOUT_CLASSIFICATION	8.859749727620752E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9991099792270842	WITHOUT_CLASSIFICATION	8.900207729156703E-4	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999995259823728	WITHOUT_CLASSIFICATION	4.74017627062403E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999994393419771	WITHOUT_CLASSIFICATION	5.606580228562661E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999924475054878	WITHOUT_CLASSIFICATION	7.5524945123336875E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9991285616686195	WITHOUT_CLASSIFICATION	8.714383313804138E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9916846807557969	DESIGN	0.008315319244203163	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999995249150773	WITHOUT_CLASSIFICATION	4.750849227715267E-7	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9987063804009438	WITHOUT_CLASSIFICATION	0.00129361959905618	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999953895210104	WITHOUT_CLASSIFICATION	4.61047898962153E-6	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999272453044	WITHOUT_CLASSIFICATION	7.275469554775954E-8	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999944482463852	WITHOUT_CLASSIFICATION	5.55175361485375E-6	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9996540463235464	WITHOUT_CLASSIFICATION	3.459536764535738E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997038868828	WITHOUT_CLASSIFICATION	2.96113117264729E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999971056213113	WITHOUT_CLASSIFICATION	2.894378688741863E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999629524399	WITHOUT_CLASSIFICATION	3.7047560011063713E-8	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999678796099	WITHOUT_CLASSIFICATION	3.212039009329667E-8	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9997952436761417	WITHOUT_CLASSIFICATION	2.0475632385829863E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9993200025139033	WITHOUT_CLASSIFICATION	6.799974860967903E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999999213825139	WITHOUT_CLASSIFICATION	7.861748608740441E-7	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999188469898274	WITHOUT_CLASSIFICATION	8.115301017265612E-5	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999989639696915	WITHOUT_CLASSIFICATION	1.0360303085249929E-6	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.8673342945995108	WITHOUT_CLASSIFICATION	0.13266570540048916	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999514669285559	WITHOUT_CLASSIFICATION	4.853307144420766E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9977627134652709	WITHOUT_CLASSIFICATION	0.002237286534729096	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9977627134652709	WITHOUT_CLASSIFICATION	0.002237286534729096	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999997614925714	WITHOUT_CLASSIFICATION	2.385074286063794E-7	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9977627134652709	WITHOUT_CLASSIFICATION	0.002237286534729096	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9977627134652709	WITHOUT_CLASSIFICATION	0.002237286534729096	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.6843811266029693	WITHOUT_CLASSIFICATION	0.3156188733970306	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999993334802579	WITHOUT_CLASSIFICATION	6.6651974209701E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.999927866901831	WITHOUT_CLASSIFICATION	7.213309816894053E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999899413142062	WITHOUT_CLASSIFICATION	1.0058685793798734E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9987229032042699	WITHOUT_CLASSIFICATION	0.0012770967957300703	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9995048152412729	WITHOUT_CLASSIFICATION	4.951847587272068E-4	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9995753204787765	WITHOUT_CLASSIFICATION	4.2467952122346697E-4	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999997492015966	WITHOUT_CLASSIFICATION	2.507984034110814E-7	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9995830143623933	WITHOUT_CLASSIFICATION	4.1698563760673903E-4	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9997726325573548	WITHOUT_CLASSIFICATION	2.2736744264520792E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9980485774004917	WITHOUT_CLASSIFICATION	0.0019514225995082221	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9994660946922169	WITHOUT_CLASSIFICATION	5.339053077830976E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999576159510533	WITHOUT_CLASSIFICATION	4.238404894670493E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999710446467287	WITHOUT_CLASSIFICATION	2.8955353271242378E-5	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999819358003794	WITHOUT_CLASSIFICATION	1.8064199620631784E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9994089799647561	WITHOUT_CLASSIFICATION	5.910200352439277E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999751062436	WITHOUT_CLASSIFICATION	2.4893756458689338E-8	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999984488838629	WITHOUT_CLASSIFICATION	1.5511161371396502E-6	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.8603579892628632	WITHOUT_CLASSIFICATION	0.13964201073713672	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999231547021551	WITHOUT_CLASSIFICATION	7.68452978448858E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999194125774532	WITHOUT_CLASSIFICATION	8.058742254681433E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.999999144890786	WITHOUT_CLASSIFICATION	8.55109214060063E-7	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999751062436	WITHOUT_CLASSIFICATION	2.4893756458689338E-8	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9972219427170226	WITHOUT_CLASSIFICATION	0.0027780572829773234	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999694224330574	WITHOUT_CLASSIFICATION	3.0577566942521706E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999674345706	WITHOUT_CLASSIFICATION	3.2565429406913286E-8	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999569769894	WITHOUT_CLASSIFICATION	4.3023010515962686E-8	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.999993035529303	WITHOUT_CLASSIFICATION	6.9644706969633945E-6	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999772315497835	WITHOUT_CLASSIFICATION	2.2768450216582334E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999773719279855	WITHOUT_CLASSIFICATION	2.262807201444528E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999482536719463	WITHOUT_CLASSIFICATION	5.174632805366001E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998991880168	WITHOUT_CLASSIFICATION	1.0081198322188431E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9931707278357268	WITHOUT_CLASSIFICATION	0.006829272164273179	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997650630470871	WITHOUT_CLASSIFICATION	2.3493695291293174E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999992950299945	WITHOUT_CLASSIFICATION	7.049700054670949E-7	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999697163433995	WITHOUT_CLASSIFICATION	3.028365660059622E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999979520975	WITHOUT_CLASSIFICATION	2.0479025616334693E-9	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999775532226559	WITHOUT_CLASSIFICATION	2.2446777344066942E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999999843220597	WITHOUT_CLASSIFICATION	1.5677940210657313E-8	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.999993476256675	WITHOUT_CLASSIFICATION	6.5237433250245955E-6	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.999994441911398	WITHOUT_CLASSIFICATION	5.558088602043393E-6	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998880349943892	WITHOUT_CLASSIFICATION	1.1196500561074448E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999819113623621	WITHOUT_CLASSIFICATION	1.8088637637883463E-5	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9965543918820973	WITHOUT_CLASSIFICATION	0.0034456081179028153	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999637822310593	WITHOUT_CLASSIFICATION	3.6217768940679856E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999880819534253	WITHOUT_CLASSIFICATION	1.1918046574785261E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999998991880168	WITHOUT_CLASSIFICATION	1.0081198322188431E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999979838792327	WITHOUT_CLASSIFICATION	2.0161207672619616E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999090694467854	WITHOUT_CLASSIFICATION	9.093055321458793E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999876195923719	WITHOUT_CLASSIFICATION	1.2380407628017452E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9991292040026186	WITHOUT_CLASSIFICATION	8.707959973813494E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993192960352	WITHOUT_CLASSIFICATION	6.807039647011707E-7	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.999978656800856	WITHOUT_CLASSIFICATION	2.1343199144030804E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999837828591086	WITHOUT_CLASSIFICATION	1.6217140891344822E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999790145650562	WITHOUT_CLASSIFICATION	2.0985434943774708E-5	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999944667366227	WITHOUT_CLASSIFICATION	5.533263377243598E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999279023759932	WITHOUT_CLASSIFICATION	7.209762400686316E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999324169296	WITHOUT_CLASSIFICATION	6.758307040729138E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999162363788	WITHOUT_CLASSIFICATION	8.376362117079669E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9343212895025798	WITHOUT_CLASSIFICATION	0.0656787104974203	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.99999999719059	WITHOUT_CLASSIFICATION	2.8094100952755238E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999443541641795	WITHOUT_CLASSIFICATION	5.564583582045699E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999995631162285	WITHOUT_CLASSIFICATION	4.368837715023444E-7	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999934701645612	WITHOUT_CLASSIFICATION	6.529835438817804E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999324169296	WITHOUT_CLASSIFICATION	6.758307040729138E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999994740011582	WITHOUT_CLASSIFICATION	5.259988418605428E-7	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9091372052167312	WITHOUT_CLASSIFICATION	0.09086279478326865	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995038109163	WITHOUT_CLASSIFICATION	4.961890837013375E-7	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998395909449543	WITHOUT_CLASSIFICATION	1.6040905504563437E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.999951002647051	WITHOUT_CLASSIFICATION	4.899735294903778E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999997991000648	WITHOUT_CLASSIFICATION	2.008999351952544E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999443541641795	WITHOUT_CLASSIFICATION	5.564583582045699E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999999809318074	WITHOUT_CLASSIFICATION	1.906819256706969E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994291284525	WITHOUT_CLASSIFICATION	5.708715474343416E-7	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994077253975	WITHOUT_CLASSIFICATION	5.922746023967084E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999914792690233	WITHOUT_CLASSIFICATION	8.520730976674318E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974371572244	WITHOUT_CLASSIFICATION	2.5628427754474283E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978048458135	WITHOUT_CLASSIFICATION	2.1951541866016947E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999867074931	WITHOUT_CLASSIFICATION	1.3292506856416861E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999867074931	WITHOUT_CLASSIFICATION	1.3292506856416861E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9964013825498713	WITHOUT_CLASSIFICATION	0.003598617450128716	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999993843714099	WITHOUT_CLASSIFICATION	6.156285899903945E-7	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.999976189803079	WITHOUT_CLASSIFICATION	2.381019692101485E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999954316635958	WITHOUT_CLASSIFICATION	4.568336404179997E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999957821668128	WITHOUT_CLASSIFICATION	4.217833187138337E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858798393757	WITHOUT_CLASSIFICATION	1.4120160624429437E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989935972001	WITHOUT_CLASSIFICATION	1.0064027998390885E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982266531413	WITHOUT_CLASSIFICATION	1.7733468587713651E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9577427532706304	WITHOUT_CLASSIFICATION	0.042257246729369626	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999872806784	WITHOUT_CLASSIFICATION	1.2719321682891911E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999858798393757	WITHOUT_CLASSIFICATION	1.4120160624429437E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989935972001	WITHOUT_CLASSIFICATION	1.0064027998390885E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982266531413	WITHOUT_CLASSIFICATION	1.7733468587713651E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999933719018474	WITHOUT_CLASSIFICATION	6.6280981524661275E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9980265839249296	WITHOUT_CLASSIFICATION	0.001973416075070324	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999978584761207	WITHOUT_CLASSIFICATION	2.1415238794360747E-6	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9972564175962839	WITHOUT_CLASSIFICATION	0.002743582403716131	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999872805610668	WITHOUT_CLASSIFICATION	1.2719438933255466E-5	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999685288526844	WITHOUT_CLASSIFICATION	3.147114731549793E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999992747906653	WITHOUT_CLASSIFICATION	7.252093347497075E-7	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9527496917858878	WITHOUT_CLASSIFICATION	0.04725030821411215	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.999833039988835	WITHOUT_CLASSIFICATION	1.6696001116509144E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999874506748896	WITHOUT_CLASSIFICATION	1.2549325110491278E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999880099125958	WITHOUT_CLASSIFICATION	1.199008740408801E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9933012790748361	WITHOUT_CLASSIFICATION	0.006698720925163841	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.998207235951926	WITHOUT_CLASSIFICATION	0.001792764048074014	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9997442689262032	WITHOUT_CLASSIFICATION	2.557310737967925E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998088432329119	WITHOUT_CLASSIFICATION	1.911567670881275E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999424816367056	WITHOUT_CLASSIFICATION	5.7518363294367416E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998108314041245	WITHOUT_CLASSIFICATION	1.8916859587542317E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999252627272762	WITHOUT_CLASSIFICATION	7.473727272369749E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999939942801958	WITHOUT_CLASSIFICATION	6.0057198042381215E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999249681095	WITHOUT_CLASSIFICATION	7.503189048183572E-8	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999983957242041	WITHOUT_CLASSIFICATION	1.6042757959244024E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6691771678129969	WITHOUT_CLASSIFICATION	0.33082283218700315	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999997606308605	WITHOUT_CLASSIFICATION	2.393691395296911E-7	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999904061777107	WITHOUT_CLASSIFICATION	9.593822289336902E-6	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999982449628392	WITHOUT_CLASSIFICATION	1.755037160796653E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9991827148184464	WITHOUT_CLASSIFICATION	8.172851815534926E-4	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985705896773	WITHOUT_CLASSIFICATION	1.4294103227105984E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992225585964	WITHOUT_CLASSIFICATION	7.774414035224633E-7	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9998876175372649	WITHOUT_CLASSIFICATION	1.1238246273518072E-4	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951987406943	WITHOUT_CLASSIFICATION	4.801259305635305E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999656435322	WITHOUT_CLASSIFICATION	3.43564677570581E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999996899106158	WITHOUT_CLASSIFICATION	3.100893842013315E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999996899106158	WITHOUT_CLASSIFICATION	3.100893842013315E-6	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999965397718417	WITHOUT_CLASSIFICATION	3.4602281583607414E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999998823514	WITHOUT_CLASSIFICATION	1.1764849020987467E-10	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999977717643637	WITHOUT_CLASSIFICATION	2.2282356363006854E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997791835443021	WITHOUT_CLASSIFICATION	2.208164556979922E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999179149223343	WITHOUT_CLASSIFICATION	8.208507766571965E-5	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9991153935388707	WITHOUT_CLASSIFICATION	8.846064611292271E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9998448954560708	WITHOUT_CLASSIFICATION	1.5510454392930075E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999993561049413	WITHOUT_CLASSIFICATION	6.438950586418304E-7	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999431803325777	WITHOUT_CLASSIFICATION	5.6819667422341006E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999643873229	WITHOUT_CLASSIFICATION	3.5612677064749973E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995658553356	WITHOUT_CLASSIFICATION	4.3414466441982434E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999300875472	WITHOUT_CLASSIFICATION	6.991245279716552E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999547328565	WITHOUT_CLASSIFICATION	4.526714345435053E-8	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999542910333	WITHOUT_CLASSIFICATION	4.570896667677691E-8	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999231225011	WITHOUT_CLASSIFICATION	7.687749894214968E-8	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999265703966	WITHOUT_CLASSIFICATION	7.342960330231922E-8	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999690384991	WITHOUT_CLASSIFICATION	3.096150088780168E-8	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999876123367	WITHOUT_CLASSIFICATION	1.2387663449545199E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998146083188	WITHOUT_CLASSIFICATION	1.8539168116819878E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993452835626	WITHOUT_CLASSIFICATION	6.547164373196126E-7	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999690168320956	WITHOUT_CLASSIFICATION	3.0983167904331976E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999746694104249	WITHOUT_CLASSIFICATION	2.533058957509209E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994182863839047	WITHOUT_CLASSIFICATION	5.81713616095298E-4	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999984566196458	WITHOUT_CLASSIFICATION	1.5433803542539443E-6	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9998828512123321	WITHOUT_CLASSIFICATION	1.1714878766794519E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9882711292976186	WITHOUT_CLASSIFICATION	0.01172887070238145	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.999999990040371	WITHOUT_CLASSIFICATION	9.959628880535772E-9	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999922955323731	WITHOUT_CLASSIFICATION	7.704467626831757E-6	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994182863839047	WITHOUT_CLASSIFICATION	5.81713616095298E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994182863839047	WITHOUT_CLASSIFICATION	5.81713616095298E-4	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9406200837674645	WITHOUT_CLASSIFICATION	0.05937991623253561	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999997691035007	WITHOUT_CLASSIFICATION	2.308964991559603E-7	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9995345989162269	WITHOUT_CLASSIFICATION	4.6540108377309425E-4	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999813452544376	WITHOUT_CLASSIFICATION	1.8654745562394524E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998380588163	WITHOUT_CLASSIFICATION	1.6194118362858644E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999249681095	WITHOUT_CLASSIFICATION	7.503189048183572E-8	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999889214354745	WITHOUT_CLASSIFICATION	1.107856452556135E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999995813470877	WITHOUT_CLASSIFICATION	4.1865291223492854E-7	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999986084892678	WITHOUT_CLASSIFICATION	1.391510732174439E-6	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999399206456594	WITHOUT_CLASSIFICATION	6.007935434072217E-5	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999995844575467	WITHOUT_CLASSIFICATION	4.1554245331269537E-7	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918522764385	WITHOUT_CLASSIFICATION	8.147723561514986E-6	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999725179775373	WITHOUT_CLASSIFICATION	2.74820224626911E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.999725179775373	WITHOUT_CLASSIFICATION	2.74820224626911E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998738311542265	WITHOUT_CLASSIFICATION	1.2616884577356722E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998738311542265	WITHOUT_CLASSIFICATION	1.2616884577356722E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999902406972767	WITHOUT_CLASSIFICATION	9.759302723312305E-6	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975813304288	WITHOUT_CLASSIFICATION	2.418669571153981E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999964442340848	WITHOUT_CLASSIFICATION	3.555765915095868E-6	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999490540781083	WITHOUT_CLASSIFICATION	5.0945921891567175E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9996956825895225	WITHOUT_CLASSIFICATION	3.0431741047756716E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.8889380411503834	DESIGN	0.11106195884961655	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999059446534	WITHOUT_CLASSIFICATION	9.405534662495835E-8	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980919640407	WITHOUT_CLASSIFICATION	1.908035959293658E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.7134300181932043	DESIGN	0.2865699818067958	WITHOUT_CLASSIFICATION
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999541105631858	WITHOUT_CLASSIFICATION	4.588943681413404E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998573954308	WITHOUT_CLASSIFICATION	1.426045692465516E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999986470315918	WITHOUT_CLASSIFICATION	1.3529684081966056E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9998416740056553	WITHOUT_CLASSIFICATION	1.5832599434461913E-4	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999995443738166	WITHOUT_CLASSIFICATION	4.556261834825664E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999882580536863	WITHOUT_CLASSIFICATION	1.1741946313773417E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999886231978257	WITHOUT_CLASSIFICATION	1.1376802174458427E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999886231978257	WITHOUT_CLASSIFICATION	1.1376802174458427E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999976299788915	WITHOUT_CLASSIFICATION	2.3700211086057684E-6	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999992317761235	WITHOUT_CLASSIFICATION	7.682238764719103E-7	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999997258142235	WITHOUT_CLASSIFICATION	2.741857764868476E-7	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999855374619746	WITHOUT_CLASSIFICATION	1.4462538025421364E-5	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998517892657529	WITHOUT_CLASSIFICATION	1.4821073424716032E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999377322066746	WITHOUT_CLASSIFICATION	6.226779332548283E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999998276741329	WITHOUT_CLASSIFICATION	1.7232586713541955E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999809967406177	WITHOUT_CLASSIFICATION	1.9003259382361256E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999964588250334	WITHOUT_CLASSIFICATION	3.541174966541408E-6	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999974729181001	WITHOUT_CLASSIFICATION	2.5270818998467653E-6	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9999673214998454	WITHOUT_CLASSIFICATION	3.267850015466095E-5	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999957308384189	WITHOUT_CLASSIFICATION	4.269161581096661E-6	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998920824219	WITHOUT_CLASSIFICATION	1.0791757809866441E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.999999993971796	WITHOUT_CLASSIFICATION	6.02820410820626E-9	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999961401676379	WITHOUT_CLASSIFICATION	3.8598323621349715E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9988879588220703	WITHOUT_CLASSIFICATION	0.0011120411779297933	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999939908010705	WITHOUT_CLASSIFICATION	6.009198929448933E-6	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.999626568323848	WITHOUT_CLASSIFICATION	3.734316761519319E-4	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.99929626405657	WITHOUT_CLASSIFICATION	7.037359434299135E-4	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999991606702	WITHOUT_CLASSIFICATION	8.393296933161037E-10	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999897716632	WITHOUT_CLASSIFICATION	1.022833682579025E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999997295701	WITHOUT_CLASSIFICATION	2.704299109606811E-10	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999918331798521	WITHOUT_CLASSIFICATION	8.16682014795576E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999980718838838	WITHOUT_CLASSIFICATION	1.9281161162608487E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999932667502659	WITHOUT_CLASSIFICATION	6.733249734082201E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999910684032388	WITHOUT_CLASSIFICATION	8.93159676108362E-6	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999803149178711	WITHOUT_CLASSIFICATION	1.9685082128812827E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9993321535879296	WITHOUT_CLASSIFICATION	6.678464120703405E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999955397639	WITHOUT_CLASSIFICATION	4.460236064297716E-9	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998954520235676	WITHOUT_CLASSIFICATION	1.0454797643235294E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999996973503349	WITHOUT_CLASSIFICATION	3.026496650386087E-7	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999994296611064	WITHOUT_CLASSIFICATION	5.703388935159677E-7	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997659324398319	WITHOUT_CLASSIFICATION	2.340675601680682E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9995823449653916	WITHOUT_CLASSIFICATION	4.176550346083716E-4	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.999999415858812	WITHOUT_CLASSIFICATION	5.841411880491502E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9972645126613843	WITHOUT_CLASSIFICATION	0.002735487338615764	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999998088436448	WITHOUT_CLASSIFICATION	1.9115635521960225E-7	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9997539202535047	WITHOUT_CLASSIFICATION	2.460797464951786E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999920205754	WITHOUT_CLASSIFICATION	7.97942461848669E-9	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.999993072884424	WITHOUT_CLASSIFICATION	6.9271155760027434E-6	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.999995450811422	WITHOUT_CLASSIFICATION	4.549188577978027E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999996179958831	WITHOUT_CLASSIFICATION	3.8200411692394275E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6272175663947678	DESIGN	0.37278243360523233	WITHOUT_CLASSIFICATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999858165418587	WITHOUT_CLASSIFICATION	1.4183458141272779E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9996730632891894	WITHOUT_CLASSIFICATION	3.269367108106461E-4	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.998953264733785	WITHOUT_CLASSIFICATION	0.0010467352662151042	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999987689430001	WITHOUT_CLASSIFICATION	1.2310569998972397E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999942292168291	WITHOUT_CLASSIFICATION	5.770783170891328E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999957885013936	WITHOUT_CLASSIFICATION	4.211498606511483E-6	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999785902983991	WITHOUT_CLASSIFICATION	2.1409701600865758E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999061682381691	WITHOUT_CLASSIFICATION	9.383176183094181E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999825730809578	WITHOUT_CLASSIFICATION	1.742691904210924E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999891281648145	WITHOUT_CLASSIFICATION	1.0871835185488886E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999997726326347	WITHOUT_CLASSIFICATION	2.2736736529740944E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999981785951378	WITHOUT_CLASSIFICATION	1.8214048621176333E-6	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999592269961886	WITHOUT_CLASSIFICATION	4.0773003811472565E-5	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9872121986271983	WITHOUT_CLASSIFICATION	0.012787801372801742	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999961121417281	WITHOUT_CLASSIFICATION	3.887858271886499E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999322055119032	WITHOUT_CLASSIFICATION	6.779448809679082E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9917699761895755	WITHOUT_CLASSIFICATION	0.008230023810424427	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999876831520454	WITHOUT_CLASSIFICATION	1.23168479546569E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999429387275	WITHOUT_CLASSIFICATION	5.706127254050627E-8	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999995261388888	WITHOUT_CLASSIFICATION	4.738611112283783E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9985495739212991	WITHOUT_CLASSIFICATION	0.0014504260787009434	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999996753861369	WITHOUT_CLASSIFICATION	3.246138631562205E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9999645974878467	WITHOUT_CLASSIFICATION	3.540251215319823E-5	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999946787487333	WITHOUT_CLASSIFICATION	5.32125126680924E-6	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998336522001	WITHOUT_CLASSIFICATION	1.6634779988356507E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999433096502504	WITHOUT_CLASSIFICATION	5.669034974958678E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999433096502504	WITHOUT_CLASSIFICATION	5.669034974958678E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999999412199033	WITHOUT_CLASSIFICATION	5.878009666919128E-8	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9980952518378645	WITHOUT_CLASSIFICATION	0.0019047481621354417	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999574467932832	WITHOUT_CLASSIFICATION	4.255320671672463E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9980034816581322	WITHOUT_CLASSIFICATION	0.001996518341867735	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999993753730052	WITHOUT_CLASSIFICATION	6.246269948246847E-7	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9976844404743445	WITHOUT_CLASSIFICATION	0.0023155595256554536	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999981751750111	WITHOUT_CLASSIFICATION	1.8248249887893812E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999708142587	WITHOUT_CLASSIFICATION	2.9185741316608343E-8	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999312747905068	WITHOUT_CLASSIFICATION	6.872520949327886E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999998623195289	WITHOUT_CLASSIFICATION	1.3768047111452096E-7	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999682861648	WITHOUT_CLASSIFICATION	3.1713835225176435E-8	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999995648847904	WITHOUT_CLASSIFICATION	4.351152095782003E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999959205995227	WITHOUT_CLASSIFICATION	4.079400477311969E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999907905501525	WITHOUT_CLASSIFICATION	9.20944984751511E-6	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999140292476457	WITHOUT_CLASSIFICATION	8.5970752354303E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6505976571937546	WITHOUT_CLASSIFICATION	0.3494023428062455	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999920970902509	WITHOUT_CLASSIFICATION	7.902909748946159E-6	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9997523166028807	WITHOUT_CLASSIFICATION	2.476833971193496E-4	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.991471321963661	WITHOUT_CLASSIFICATION	0.008528678036339062	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999843121592169	WITHOUT_CLASSIFICATION	1.5687840783082026E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.999954989252064	WITHOUT_CLASSIFICATION	4.5010747935855297E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999716755419534	WITHOUT_CLASSIFICATION	2.8324458046612523E-5	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9976566572944032	WITHOUT_CLASSIFICATION	0.002343342705596723	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9909143967482505	WITHOUT_CLASSIFICATION	0.009085603251749489	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999999137548	WITHOUT_CLASSIFICATION	8.624518858030109E-11	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9998939478055484	WITHOUT_CLASSIFICATION	1.0605219445156949E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999996750321183	WITHOUT_CLASSIFICATION	3.249678817144986E-7	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999558518540295	WITHOUT_CLASSIFICATION	4.414814597042514E-5	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999667545644542	WITHOUT_CLASSIFICATION	3.324543554579835E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9996235001814501	WITHOUT_CLASSIFICATION	3.764998185499415E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999998069795954	WITHOUT_CLASSIFICATION	1.9302040460455867E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999252609985022	WITHOUT_CLASSIFICATION	7.473900149774335E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999015108619834	WITHOUT_CLASSIFICATION	9.848913801660765E-5	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999802131993735	WITHOUT_CLASSIFICATION	1.9786800626498102E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9979083214167848	WITHOUT_CLASSIFICATION	0.002091678583215328	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9979083214167848	WITHOUT_CLASSIFICATION	0.002091678583215328	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999991790812935	WITHOUT_CLASSIFICATION	8.209187064436042E-7	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9998528835876038	WITHOUT_CLASSIFICATION	1.4711641239614022E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999930043241918	WITHOUT_CLASSIFICATION	6.995675808246244E-6	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999833623503239	WITHOUT_CLASSIFICATION	1.663764967616553E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999994505509137	WITHOUT_CLASSIFICATION	5.494490863098118E-7	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998873033768866	WITHOUT_CLASSIFICATION	1.126966231134585E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999961478330338	WITHOUT_CLASSIFICATION	3.852166966198083E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999987744346985	WITHOUT_CLASSIFICATION	1.2255653014532767E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9252896860100863	WITHOUT_CLASSIFICATION	0.0747103139899137	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999159322622	WITHOUT_CLASSIFICATION	8.406773775243442E-8	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999968444623	WITHOUT_CLASSIFICATION	3.155537782134329E-9	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998838574851214	WITHOUT_CLASSIFICATION	1.1614251487855028E-4	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9998083006386727	WITHOUT_CLASSIFICATION	1.9169936132738867E-4	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998828918140205	WITHOUT_CLASSIFICATION	1.1710818597959649E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999509486578	WITHOUT_CLASSIFICATION	4.9051342107044136E-8	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.99996857547255	WITHOUT_CLASSIFICATION	3.142452744992334E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.99996857547255	WITHOUT_CLASSIFICATION	3.142452744992334E-5	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999983291951249	WITHOUT_CLASSIFICATION	1.6708048752147705E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999959424626005	WITHOUT_CLASSIFICATION	4.057537399546285E-6	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9932319417021899	WITHOUT_CLASSIFICATION	0.006768058297810107	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996656071022	WITHOUT_CLASSIFICATION	3.343928978961903E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995664062121197	WITHOUT_CLASSIFICATION	4.3359378788041935E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999989783740946	WITHOUT_CLASSIFICATION	1.021625905532064E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999911323674221	WITHOUT_CLASSIFICATION	8.867632577947128E-6	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999911323674221	WITHOUT_CLASSIFICATION	8.867632577947128E-6	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999999167538205	WITHOUT_CLASSIFICATION	8.324617951157093E-7	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9981634283409336	WITHOUT_CLASSIFICATION	0.0018365716590663375	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999960595275853	WITHOUT_CLASSIFICATION	3.9404724146899175E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999974300551134	WITHOUT_CLASSIFICATION	2.569944886462546E-6	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.8758944090146732	WITHOUT_CLASSIFICATION	0.12410559098532685	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.999965969904841	WITHOUT_CLASSIFICATION	3.4030095159005964E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999958147509964	WITHOUT_CLASSIFICATION	4.1852490035002875E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998267427618	WITHOUT_CLASSIFICATION	1.732572383486607E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999997953417595	WITHOUT_CLASSIFICATION	2.0465824050234758E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999650432242524	WITHOUT_CLASSIFICATION	3.4956775747569015E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9983179855460026	WITHOUT_CLASSIFICATION	0.0016820144539973576	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999908437659877	WITHOUT_CLASSIFICATION	9.156234012285386E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999775068642208	WITHOUT_CLASSIFICATION	2.249313577919362E-5	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999841793019185	WITHOUT_CLASSIFICATION	1.582069808141045E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9998260849278003	WITHOUT_CLASSIFICATION	1.739150721996362E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999827506675185	WITHOUT_CLASSIFICATION	1.72493324814691E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999904265416	WITHOUT_CLASSIFICATION	9.573458395753474E-9	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9998909287337732	WITHOUT_CLASSIFICATION	1.0907126622693087E-4	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9991624192546188	WITHOUT_CLASSIFICATION	8.375807453812004E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999986987564513	WITHOUT_CLASSIFICATION	1.3012435486185642E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999648455601	WITHOUT_CLASSIFICATION	3.5154439930871934E-8	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999937351587723	WITHOUT_CLASSIFICATION	6.264841227703117E-6	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998505364393119	WITHOUT_CLASSIFICATION	1.494635606881266E-4	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999437961716964	WITHOUT_CLASSIFICATION	5.620382830355383E-5	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9998323765755079	WITHOUT_CLASSIFICATION	1.676234244920978E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999857087562819	WITHOUT_CLASSIFICATION	1.4291243718025176E-5	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9996145974973933	WITHOUT_CLASSIFICATION	3.854025026066704E-4	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9998931550758564	WITHOUT_CLASSIFICATION	1.068449241435925E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999631416878664	WITHOUT_CLASSIFICATION	3.685831213370922E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.999999949336049	WITHOUT_CLASSIFICATION	5.0663950995047223E-8	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9959645028170748	WITHOUT_CLASSIFICATION	0.004035497182925121	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9997150981788161	WITHOUT_CLASSIFICATION	2.849018211838416E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999707125838118	WITHOUT_CLASSIFICATION	2.928741618832958E-5	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999972451815	WITHOUT_CLASSIFICATION	2.754818429939416E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999958432094883	WITHOUT_CLASSIFICATION	4.156790511729875E-6	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999411677544062	WITHOUT_CLASSIFICATION	5.883224559379826E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9958113105601181	WITHOUT_CLASSIFICATION	0.004188689439881956	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9998854445802544	WITHOUT_CLASSIFICATION	1.1455541974564883E-4	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999823950611838	WITHOUT_CLASSIFICATION	1.760493881624602E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999989975367362	WITHOUT_CLASSIFICATION	1.0024632639126945E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999565765018	WITHOUT_CLASSIFICATION	4.3423498263604E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999899114268556	WITHOUT_CLASSIFICATION	1.0088573144410996E-5	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.999978835362136	WITHOUT_CLASSIFICATION	2.1164637864031935E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999974034605925	WITHOUT_CLASSIFICATION	2.5965394074289387E-6	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999998785597	WITHOUT_CLASSIFICATION	1.214403530297489E-10	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999980871556922	WITHOUT_CLASSIFICATION	1.912844307868356E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999823950611838	WITHOUT_CLASSIFICATION	1.760493881624602E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999989975367362	WITHOUT_CLASSIFICATION	1.0024632639126945E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999924879823887	WITHOUT_CLASSIFICATION	7.5120176113555004E-6	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9994863079168307	WITHOUT_CLASSIFICATION	5.136920831693912E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999656922690219	WITHOUT_CLASSIFICATION	3.43077309781302E-5	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999981535035863	WITHOUT_CLASSIFICATION	1.8464964135485566E-6	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999940867208066	WITHOUT_CLASSIFICATION	5.913279193349845E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999792077591914	WITHOUT_CLASSIFICATION	2.0792240808552135E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999995326995144	WITHOUT_CLASSIFICATION	4.673004856767098E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999940667742632	WITHOUT_CLASSIFICATION	5.933225736951529E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999972353907206	WITHOUT_CLASSIFICATION	2.764609279408461E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5299521447711891	DESIGN	0.47004785522881093	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999978351164	WITHOUT_CLASSIFICATION	2.1648836291434742E-9	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5299521447711891	DESIGN	0.47004785522881093	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999992955086	WITHOUT_CLASSIFICATION	7.0449132368785E-10	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999973832808237	WITHOUT_CLASSIFICATION	2.616719176397315E-6	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999905837565	WITHOUT_CLASSIFICATION	9.41624355279919E-9	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998945460803	WITHOUT_CLASSIFICATION	1.0545391969809661E-6	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999653061423778	WITHOUT_CLASSIFICATION	3.469385762227775E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999915447724593	WITHOUT_CLASSIFICATION	8.455227540701402E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.999915447724593	WITHOUT_CLASSIFICATION	8.455227540701402E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999879871809462	WITHOUT_CLASSIFICATION	1.2012819053804214E-5	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999772044775975	WITHOUT_CLASSIFICATION	2.2795522402478404E-5	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999985181190628	WITHOUT_CLASSIFICATION	1.4818809371872963E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999893730371031	WITHOUT_CLASSIFICATION	1.0626962896782954E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9991300581324684	WITHOUT_CLASSIFICATION	8.699418675317326E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9424736876118163	WITHOUT_CLASSIFICATION	0.05752631238818377	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999986152615286	WITHOUT_CLASSIFICATION	1.3847384715202878E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999998210728256	WITHOUT_CLASSIFICATION	1.7892717449296806E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.999988114960028	WITHOUT_CLASSIFICATION	1.1885039971884693E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.999909700044175	WITHOUT_CLASSIFICATION	9.02999558250369E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999647925490287	WITHOUT_CLASSIFICATION	3.5207450971377575E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999994809303294	WITHOUT_CLASSIFICATION	5.190696706212495E-7	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9996981727720188	WITHOUT_CLASSIFICATION	3.0182722798130214E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999981224171194	WITHOUT_CLASSIFICATION	1.8775828806395264E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999229879388581	WITHOUT_CLASSIFICATION	7.701206114176572E-5	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999988597116272	WITHOUT_CLASSIFICATION	1.140288372890261E-6	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998399361596	WITHOUT_CLASSIFICATION	1.6006384039897314E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999905176446319	WITHOUT_CLASSIFICATION	9.482355368046635E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999080166678	WITHOUT_CLASSIFICATION	9.198333211122093E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9997925306780269	WITHOUT_CLASSIFICATION	2.074693219730625E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999044649199893	WITHOUT_CLASSIFICATION	9.553508001065197E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999990942137824	WITHOUT_CLASSIFICATION	9.057862175406477E-7	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999403329929555	WITHOUT_CLASSIFICATION	5.966700704459943E-5	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999958657701609	WITHOUT_CLASSIFICATION	4.134229839048043E-6	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999808423078413	WITHOUT_CLASSIFICATION	1.9157692158678164E-5	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9998351194642312	WITHOUT_CLASSIFICATION	1.6488053576874798E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999926358617334	WITHOUT_CLASSIFICATION	7.364138266677662E-6	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9975476422275067	WITHOUT_CLASSIFICATION	0.0024523577724933727	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.8354904084766437	WITHOUT_CLASSIFICATION	0.16450959152335626	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.821605186075342	WITHOUT_CLASSIFICATION	0.17839481392465786	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.7969957849665675	DESIGN	0.20300421503343255	WITHOUT_CLASSIFICATION
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9992256873715615	WITHOUT_CLASSIFICATION	7.743126284384493E-4	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999986152615286	WITHOUT_CLASSIFICATION	1.3847384715202878E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999919218951734	WITHOUT_CLASSIFICATION	8.078104826585112E-6	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999558149701605	WITHOUT_CLASSIFICATION	4.4185029839391386E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9567158762401299	WITHOUT_CLASSIFICATION	0.04328412375987006	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.999999661710412	WITHOUT_CLASSIFICATION	3.382895879905824E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999959040582946	WITHOUT_CLASSIFICATION	4.095941705333368E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999981482901384	WITHOUT_CLASSIFICATION	1.8517098615001025E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999893730371031	WITHOUT_CLASSIFICATION	1.0626962896782954E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999893730371031	WITHOUT_CLASSIFICATION	1.0626962896782954E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999994705960606	WITHOUT_CLASSIFICATION	5.294039392760826E-7	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999970675359283	WITHOUT_CLASSIFICATION	2.9324640717673035E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9993685137838755	WITHOUT_CLASSIFICATION	6.314862161246356E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999894814660654	WITHOUT_CLASSIFICATION	1.0518533934720949E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999831359861551	WITHOUT_CLASSIFICATION	1.6864013844924346E-5	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9995964232886385	WITHOUT_CLASSIFICATION	4.035767113614792E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9889594843500658	WITHOUT_CLASSIFICATION	0.011040515649934262	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999982927756069	WITHOUT_CLASSIFICATION	1.7072243931282569E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9998996356249642	WITHOUT_CLASSIFICATION	1.00364375035808E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999992884055297	WITHOUT_CLASSIFICATION	7.115944704155355E-7	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9998802123585638	WITHOUT_CLASSIFICATION	1.1978764143622541E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999734022802464	WITHOUT_CLASSIFICATION	2.6597719753512066E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9995234352726484	WITHOUT_CLASSIFICATION	4.7656472735148635E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999992884055297	WITHOUT_CLASSIFICATION	7.115944704155355E-7	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999976091067758	WITHOUT_CLASSIFICATION	2.390893224201532E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9927857695860477	WITHOUT_CLASSIFICATION	0.0072142304139522825	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999970815591697	WITHOUT_CLASSIFICATION	2.9184408302771733E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9493310767520887	DESIGN	0.05066892324791129	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999734022802464	WITHOUT_CLASSIFICATION	2.6597719753512066E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999992440339482	WITHOUT_CLASSIFICATION	7.559660516755074E-7	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999991312042853	WITHOUT_CLASSIFICATION	8.687957146961643E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997721037253	WITHOUT_CLASSIFICATION	2.2789627466883072E-7	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999994640678435	WITHOUT_CLASSIFICATION	5.359321565643676E-7	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998346018162004	WITHOUT_CLASSIFICATION	1.6539818379956105E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999972963641945	WITHOUT_CLASSIFICATION	2.70363580547938E-6	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999993016930147	WITHOUT_CLASSIFICATION	6.983069853857504E-7	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999964086808618	WITHOUT_CLASSIFICATION	3.5913191382924767E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9992995255196062	WITHOUT_CLASSIFICATION	7.00474480393844E-4	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999144070190933	WITHOUT_CLASSIFICATION	8.5592980906691E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9985882410567907	WITHOUT_CLASSIFICATION	0.0014117589432093936	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999746192742794	WITHOUT_CLASSIFICATION	2.5380725720625542E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999992884055297	WITHOUT_CLASSIFICATION	7.115944704155355E-7	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999992440339482	WITHOUT_CLASSIFICATION	7.559660516755074E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997721037253	WITHOUT_CLASSIFICATION	2.2789627466883072E-7	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999628450930875	WITHOUT_CLASSIFICATION	3.715490691244523E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9888092311760842	WITHOUT_CLASSIFICATION	0.011190768823915828	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.999991494307161	WITHOUT_CLASSIFICATION	8.505692839043289E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999734022802464	WITHOUT_CLASSIFICATION	2.6597719753512066E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999443230260068	WITHOUT_CLASSIFICATION	5.5676973993275146E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999999521150191	WITHOUT_CLASSIFICATION	4.7884980879085205E-8	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999955476068607	WITHOUT_CLASSIFICATION	4.45239313927277E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951634416027	WITHOUT_CLASSIFICATION	4.836558397321433E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999964086808618	WITHOUT_CLASSIFICATION	3.5913191382924767E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999976091067758	WITHOUT_CLASSIFICATION	2.390893224201532E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999971681399927	WITHOUT_CLASSIFICATION	2.831860007222138E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999993966337402	WITHOUT_CLASSIFICATION	6.033662598961868E-7	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9996564293404596	WITHOUT_CLASSIFICATION	3.435706595404601E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9976676773843092	WITHOUT_CLASSIFICATION	0.002332322615690887	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9957684738442224	WITHOUT_CLASSIFICATION	0.004231526155777682	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9998518525736313	WITHOUT_CLASSIFICATION	1.4814742636872389E-4	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9994997450542316	WITHOUT_CLASSIFICATION	5.002549457683828E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998945460803	WITHOUT_CLASSIFICATION	1.0545391969809661E-6	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997919019999986	WITHOUT_CLASSIFICATION	2.0809800000136998E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999996050695984	WITHOUT_CLASSIFICATION	3.949304016509367E-7	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999375927290852	WITHOUT_CLASSIFICATION	6.240727091475097E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999997301730125	WITHOUT_CLASSIFICATION	2.6982698749750544E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999995921438745	WITHOUT_CLASSIFICATION	4.0785612557574976E-7	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999996021973543	WITHOUT_CLASSIFICATION	3.9780264568877335E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999978065697688	WITHOUT_CLASSIFICATION	2.193430231322356E-6	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998729646262	WITHOUT_CLASSIFICATION	1.2703537383214473E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999951634416027	WITHOUT_CLASSIFICATION	4.836558397321433E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999970815363322	WITHOUT_CLASSIFICATION	2.918463667854411E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999975853345766	WITHOUT_CLASSIFICATION	2.4146654234292238E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999884472871714	WITHOUT_CLASSIFICATION	1.1552712828596458E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999994105719314	WITHOUT_CLASSIFICATION	5.894280685201169E-7	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9999646472060665	WITHOUT_CLASSIFICATION	3.535279393356805E-5	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9967318862139641	WITHOUT_CLASSIFICATION	0.003268113786035928	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999993388573657	WITHOUT_CLASSIFICATION	6.611426342905002E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9930873370839726	WITHOUT_CLASSIFICATION	0.006912662916027325	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999987903753735	WITHOUT_CLASSIFICATION	1.2096246263589872E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9909093867447633	WITHOUT_CLASSIFICATION	0.009090613255236694	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999994323411079	WITHOUT_CLASSIFICATION	5.676588920596023E-7	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999928181304736	WITHOUT_CLASSIFICATION	7.181869526323609E-6	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9161367203323714	WITHOUT_CLASSIFICATION	0.0838632796676286	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998978863977894	WITHOUT_CLASSIFICATION	1.0211360221061307E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999778665792889	WITHOUT_CLASSIFICATION	2.213342071107752E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999960416900359	WITHOUT_CLASSIFICATION	3.95830996412191E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9886264530139062	WITHOUT_CLASSIFICATION	0.01137354698609394	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999939627533643	WITHOUT_CLASSIFICATION	6.037246635678499E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999971742600049	WITHOUT_CLASSIFICATION	2.8257399951045025E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9984456142026878	WITHOUT_CLASSIFICATION	0.0015543857973120963	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999968243203465	WITHOUT_CLASSIFICATION	3.1756796534960845E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999839323504066	WITHOUT_CLASSIFICATION	1.606764959331076E-5	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999196089082	WITHOUT_CLASSIFICATION	8.039109170611314E-8	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999370211615	WITHOUT_CLASSIFICATION	6.297883852110624E-8	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999839153359	WITHOUT_CLASSIFICATION	1.608466410176733E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8174581340322316	DESIGN	0.18254186596776842	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999932730389425	WITHOUT_CLASSIFICATION	6.726961057508889E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999999803410952	WITHOUT_CLASSIFICATION	1.9658904810903055E-8	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999833838489957	WITHOUT_CLASSIFICATION	1.6616151004280828E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7194870864660997	WITHOUT_CLASSIFICATION	0.2805129135339002	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.999979988603751	WITHOUT_CLASSIFICATION	2.0011396248921643E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996601684930154	WITHOUT_CLASSIFICATION	3.3983150698447287E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999424574981507	WITHOUT_CLASSIFICATION	5.7542501849342084E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9990392949631239	WITHOUT_CLASSIFICATION	9.607050368760238E-4	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999644190578632	WITHOUT_CLASSIFICATION	3.5580942136886343E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999766268511	WITHOUT_CLASSIFICATION	2.3373148868733264E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999593083258753	WITHOUT_CLASSIFICATION	4.0691674124740134E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9317891555896265	WITHOUT_CLASSIFICATION	0.06821084441037352	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999766268511	WITHOUT_CLASSIFICATION	2.3373148868733264E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999644190578632	WITHOUT_CLASSIFICATION	3.5580942136886343E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999593083258753	WITHOUT_CLASSIFICATION	4.0691674124740134E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999887217828002	WITHOUT_CLASSIFICATION	1.1278217199909091E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999906157114682	WITHOUT_CLASSIFICATION	9.384288531718317E-6	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999945392126	WITHOUT_CLASSIFICATION	5.460787384400303E-9	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9971212376101165	WITHOUT_CLASSIFICATION	0.002878762389883441	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999593362672785	WITHOUT_CLASSIFICATION	4.06637327214882E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9996859265456716	DESIGN	3.140734543284702E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9570287888120957	DESIGN	0.042971211187904305	WITHOUT_CLASSIFICATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999784834497487	WITHOUT_CLASSIFICATION	2.1516550251387862E-5	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9994211365161467	WITHOUT_CLASSIFICATION	5.788634838533861E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999925109151339	WITHOUT_CLASSIFICATION	7.489084866217731E-6	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999890307197383	WITHOUT_CLASSIFICATION	1.0969280261712017E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998807636727731	WITHOUT_CLASSIFICATION	1.1923632722692602E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9998683168508344	WITHOUT_CLASSIFICATION	1.316831491656352E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9934044904761408	WITHOUT_CLASSIFICATION	0.00659550952385929	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998848421753	WITHOUT_CLASSIFICATION	1.1515782467405666E-7	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999998958530438	WITHOUT_CLASSIFICATION	1.0414695623015341E-7	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999201969303938	WITHOUT_CLASSIFICATION	7.980306960618667E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9996491027182121	WITHOUT_CLASSIFICATION	3.5089728178798034E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9996657747530469	WITHOUT_CLASSIFICATION	3.3422524695305583E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999987569509171	WITHOUT_CLASSIFICATION	1.2430490828626609E-6	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.8028416171132111	WITHOUT_CLASSIFICATION	0.197158382886789	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998228313831	WITHOUT_CLASSIFICATION	1.7716861684191044E-7	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999674500313878	WITHOUT_CLASSIFICATION	3.2549968612279796E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999969413867885	WITHOUT_CLASSIFICATION	3.0586132115779352E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999905155926899	WITHOUT_CLASSIFICATION	9.484407310121206E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999905155926899	WITHOUT_CLASSIFICATION	9.484407310121206E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999323347998	WITHOUT_CLASSIFICATION	6.766520018124552E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999323347998	WITHOUT_CLASSIFICATION	6.766520018124552E-8	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9989656295732561	WITHOUT_CLASSIFICATION	0.0010343704267439416	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999201969303938	WITHOUT_CLASSIFICATION	7.980306960618667E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998951024096066	WITHOUT_CLASSIFICATION	1.0489759039346192E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999969011615303	WITHOUT_CLASSIFICATION	3.0988384696998923E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.992334414702037	WITHOUT_CLASSIFICATION	0.00766558529796292	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.992334414702037	WITHOUT_CLASSIFICATION	0.00766558529796292	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999996279960668	WITHOUT_CLASSIFICATION	3.720039331909806E-7	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999964440113182	WITHOUT_CLASSIFICATION	3.5559886816888663E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999982499554544	WITHOUT_CLASSIFICATION	1.750044545594759E-5	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999986765669538	WITHOUT_CLASSIFICATION	1.3234330461148608E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9597093913072174	WITHOUT_CLASSIFICATION	0.040290608692782455	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999864257482476	WITHOUT_CLASSIFICATION	1.3574251752440827E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9998097542355532	WITHOUT_CLASSIFICATION	1.902457644467818E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9774642324728059	WITHOUT_CLASSIFICATION	0.022535767527194005	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.999888815870169	WITHOUT_CLASSIFICATION	1.1118412983104656E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999941975124806	WITHOUT_CLASSIFICATION	5.8024875193610445E-6	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.999999259749659	WITHOUT_CLASSIFICATION	7.402503410161762E-7	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999283523706272	WITHOUT_CLASSIFICATION	7.164762937277436E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999929650958386	WITHOUT_CLASSIFICATION	7.034904161490898E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999793594626631	WITHOUT_CLASSIFICATION	2.0640537336770953E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9933469755325135	WITHOUT_CLASSIFICATION	0.006653024467486581	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9996581047573093	WITHOUT_CLASSIFICATION	3.418952426906804E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998142206128341	WITHOUT_CLASSIFICATION	1.8577938716594816E-4	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999994794922105	WITHOUT_CLASSIFICATION	5.205077894647082E-7	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999701901930891	WITHOUT_CLASSIFICATION	2.9809806910890324E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999981784756132	WITHOUT_CLASSIFICATION	1.8215243868148425E-6	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9998868840256954	WITHOUT_CLASSIFICATION	1.1311597430455689E-4	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999998385539864	WITHOUT_CLASSIFICATION	1.614460135101923E-7	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999954936109736	WITHOUT_CLASSIFICATION	4.506389026395369E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999923024347299	WITHOUT_CLASSIFICATION	7.697565270073392E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997791835443021	WITHOUT_CLASSIFICATION	2.208164556979922E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999995137668417	WITHOUT_CLASSIFICATION	4.862331583595806E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999928181304736	WITHOUT_CLASSIFICATION	7.181869526323609E-6	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999997019093899	WITHOUT_CLASSIFICATION	2.9809061012754435E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999973553666648	WITHOUT_CLASSIFICATION	2.6446333350970907E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999909209346848	WITHOUT_CLASSIFICATION	9.07906531519921E-6	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994815951762	WITHOUT_CLASSIFICATION	5.184048239163441E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999120232875448	WITHOUT_CLASSIFICATION	8.797671245525882E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999120232875448	WITHOUT_CLASSIFICATION	8.797671245525882E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999986326553107	WITHOUT_CLASSIFICATION	1.3673446892713074E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999923405536686	WITHOUT_CLASSIFICATION	7.659446331455641E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999120621292373	WITHOUT_CLASSIFICATION	8.793787076272002E-5	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999120621292373	WITHOUT_CLASSIFICATION	8.793787076272002E-5	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.99998359525289	WITHOUT_CLASSIFICATION	1.6404747109906927E-5	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.999876753154442	WITHOUT_CLASSIFICATION	1.232468455579183E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999962257063756	WITHOUT_CLASSIFICATION	3.7742936244377815E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998380588163	WITHOUT_CLASSIFICATION	1.6194118362858644E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9993034965393088	WITHOUT_CLASSIFICATION	6.965034606911619E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997514291495782	WITHOUT_CLASSIFICATION	2.4857085042189164E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9985038229471545	WITHOUT_CLASSIFICATION	0.0014961770528455606	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9998753705375402	WITHOUT_CLASSIFICATION	1.2462946245992554E-4	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.996635424839778	WITHOUT_CLASSIFICATION	0.003364575160222117	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.996635424839778	WITHOUT_CLASSIFICATION	0.003364575160222117	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9716522632769893	WITHOUT_CLASSIFICATION	0.028347736723010754	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.999990252755837	WITHOUT_CLASSIFICATION	9.747244163041864E-6	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.999990252755837	WITHOUT_CLASSIFICATION	9.747244163041864E-6	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9973263106162356	WITHOUT_CLASSIFICATION	0.0026736893837644507	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999979109480326	WITHOUT_CLASSIFICATION	2.0890519674443738E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9063850434355764	WITHOUT_CLASSIFICATION	0.0936149565644237	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999996692209124	WITHOUT_CLASSIFICATION	3.307790876321008E-7	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999997040991719	WITHOUT_CLASSIFICATION	2.9590082809744493E-7	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999892440601	WITHOUT_CLASSIFICATION	1.075594000055079E-8	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999996965376551	WITHOUT_CLASSIFICATION	3.034623449918804E-7	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999559961990823	WITHOUT_CLASSIFICATION	4.400380091774823E-5	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999979726431233	WITHOUT_CLASSIFICATION	2.0273568766356136E-6	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9992142728243972	WITHOUT_CLASSIFICATION	7.857271756026885E-4	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999992864351097	WITHOUT_CLASSIFICATION	7.135648902267781E-7	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999984274234647	WITHOUT_CLASSIFICATION	1.5725765352644681E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999554597492765	WITHOUT_CLASSIFICATION	4.454025072349633E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999554597492765	WITHOUT_CLASSIFICATION	4.454025072349633E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999554597492765	WITHOUT_CLASSIFICATION	4.454025072349633E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999554597492765	WITHOUT_CLASSIFICATION	4.454025072349633E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999994967238779	WITHOUT_CLASSIFICATION	5.032761220016485E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999932932596272	WITHOUT_CLASSIFICATION	6.70674037294646E-6	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999889114311042	WITHOUT_CLASSIFICATION	1.1088568895648507E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9995042718985668	WITHOUT_CLASSIFICATION	4.957281014331776E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999994264037207	WITHOUT_CLASSIFICATION	5.735962793739196E-7	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9906918569248742	WITHOUT_CLASSIFICATION	0.009308143075125938	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9953367327432502	WITHOUT_CLASSIFICATION	0.004663267256749789	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999762363656868	WITHOUT_CLASSIFICATION	2.3763634313206587E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999997468153984	WITHOUT_CLASSIFICATION	2.5318460162560907E-7	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999997117359986	WITHOUT_CLASSIFICATION	2.882640013797012E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9993249534210037	WITHOUT_CLASSIFICATION	6.750465789963289E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999860414122559	WITHOUT_CLASSIFICATION	1.3958587744100038E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9985129017999113	WITHOUT_CLASSIFICATION	0.0014870982000886796	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999992499901014	WITHOUT_CLASSIFICATION	7.500098985625804E-7	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9997845867458438	WITHOUT_CLASSIFICATION	2.1541325415615694E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999860414122559	WITHOUT_CLASSIFICATION	1.3958587744100038E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999431803169	WITHOUT_CLASSIFICATION	5.681968317724401E-8	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999458781444587	WITHOUT_CLASSIFICATION	5.412185554136723E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999994541237872	WITHOUT_CLASSIFICATION	5.458762127926613E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9983924458462339	WITHOUT_CLASSIFICATION	0.001607554153766064	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9997672797007705	WITHOUT_CLASSIFICATION	2.327202992294924E-4	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999530668574241	WITHOUT_CLASSIFICATION	4.693314257580891E-5	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999997469198751	WITHOUT_CLASSIFICATION	2.530801249131475E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.999994070480934	WITHOUT_CLASSIFICATION	5.9295190658695485E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991558642128	WITHOUT_CLASSIFICATION	8.441357872013583E-7	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999990370250953	WITHOUT_CLASSIFICATION	9.62974904721622E-7	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997992025679	WITHOUT_CLASSIFICATION	2.0079743215862558E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999990670871742	WITHOUT_CLASSIFICATION	9.329128257354391E-7	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9999161610684995	WITHOUT_CLASSIFICATION	8.383893150057072E-5	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9066182173954176	WITHOUT_CLASSIFICATION	0.09338178260458234	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999917699025906	WITHOUT_CLASSIFICATION	8.230097409393566E-6	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9538984169900979	WITHOUT_CLASSIFICATION	0.04610158300990207	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998452805214263	WITHOUT_CLASSIFICATION	1.5471947857361647E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999782377844855	WITHOUT_CLASSIFICATION	2.176221551452102E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997153600881595	WITHOUT_CLASSIFICATION	2.8463991184052767E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999782377844855	WITHOUT_CLASSIFICATION	2.176221551452102E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999787833853	WITHOUT_CLASSIFICATION	2.1216614604616952E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999980008197058	WITHOUT_CLASSIFICATION	1.999180294188105E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9992552956324947	WITHOUT_CLASSIFICATION	7.447043675052865E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9985323545161181	WITHOUT_CLASSIFICATION	0.0014676454838818728	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998452805214263	WITHOUT_CLASSIFICATION	1.5471947857361647E-4	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9997153600881595	WITHOUT_CLASSIFICATION	2.8463991184052767E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999787833853	WITHOUT_CLASSIFICATION	2.1216614604616952E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996429818096935	WITHOUT_CLASSIFICATION	3.5701819030655715E-4	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999736349274649	WITHOUT_CLASSIFICATION	2.6365072535030963E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999286991556008	WITHOUT_CLASSIFICATION	7.130084439917012E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999827134770328	WITHOUT_CLASSIFICATION	1.7286522967118907E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.998893490473574	WITHOUT_CLASSIFICATION	0.0011065095264260025	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999499126868	WITHOUT_CLASSIFICATION	5.0087313195259214E-8	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998142206128341	WITHOUT_CLASSIFICATION	1.8577938716594816E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999980008197058	WITHOUT_CLASSIFICATION	1.999180294188105E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9959271498490418	WITHOUT_CLASSIFICATION	0.004072850150958102	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9994613292828025	WITHOUT_CLASSIFICATION	5.386707171975392E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999961041747333	WITHOUT_CLASSIFICATION	3.895825266716617E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998142206128341	WITHOUT_CLASSIFICATION	1.8577938716594816E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999924076406631	WITHOUT_CLASSIFICATION	7.592359336955551E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998142206128341	WITHOUT_CLASSIFICATION	1.8577938716594816E-4	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999990610182966	WITHOUT_CLASSIFICATION	9.389817034235994E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997090031134	WITHOUT_CLASSIFICATION	2.909968865226497E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999703441378355	WITHOUT_CLASSIFICATION	2.965586216450861E-5	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999957776192421	WITHOUT_CLASSIFICATION	4.222380757925738E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999987290008332	WITHOUT_CLASSIFICATION	1.2709991668962662E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999974967254142	WITHOUT_CLASSIFICATION	2.5032745858630883E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999937805642928	WITHOUT_CLASSIFICATION	6.21943570713005E-6	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999835988282214	WITHOUT_CLASSIFICATION	1.6401171778638654E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995817923073	WITHOUT_CLASSIFICATION	4.1820769281485933E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9997083398482067	WITHOUT_CLASSIFICATION	2.9166015179331886E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999433096502504	WITHOUT_CLASSIFICATION	5.669034974958678E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999447644812486	WITHOUT_CLASSIFICATION	5.5235518751344E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9063850434355764	WITHOUT_CLASSIFICATION	0.0936149565644237	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999093675548419	WITHOUT_CLASSIFICATION	9.063244515813142E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.997996732598681	WITHOUT_CLASSIFICATION	0.0020032674013189047	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999475427673444	WITHOUT_CLASSIFICATION	5.245723265550695E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999768551573219	WITHOUT_CLASSIFICATION	2.3144842678043624E-5	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999902286653966	WITHOUT_CLASSIFICATION	9.77133460346033E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999740865148158	WITHOUT_CLASSIFICATION	2.591348518417612E-5	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999685842173298	WITHOUT_CLASSIFICATION	3.1415782670115346E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9518387622709747	WITHOUT_CLASSIFICATION	0.04816123772902528	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999998733035896	WITHOUT_CLASSIFICATION	1.2669641040037828E-6	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999017168460167	WITHOUT_CLASSIFICATION	9.828315398337547E-5	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.5537501160926247	WITHOUT_CLASSIFICATION	0.44624988390737536	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999482010368	WITHOUT_CLASSIFICATION	5.1798963303953344E-8	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999996668933518	WITHOUT_CLASSIFICATION	3.331066481534352E-7	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999998719058772	WITHOUT_CLASSIFICATION	1.2809412282548888E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999713388701182	WITHOUT_CLASSIFICATION	2.8661129881784834E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999341351420358	WITHOUT_CLASSIFICATION	6.586485796432272E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998285896767	WITHOUT_CLASSIFICATION	1.7141032325489175E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998140837026933	WITHOUT_CLASSIFICATION	1.8591629730665014E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999932942438183	WITHOUT_CLASSIFICATION	6.705756181651988E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9964278023026573	WITHOUT_CLASSIFICATION	0.0035721976973426776	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999482179368522	WITHOUT_CLASSIFICATION	5.178206314774018E-5	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9968036092174368	WITHOUT_CLASSIFICATION	0.003196390782563115	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999345339757	WITHOUT_CLASSIFICATION	6.546602422151695E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998994574283794	WITHOUT_CLASSIFICATION	1.0054257162051847E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9983048048829026	WITHOUT_CLASSIFICATION	0.001695195117097482	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999745160230438	WITHOUT_CLASSIFICATION	2.5483976956301678E-5	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999457717949296	WITHOUT_CLASSIFICATION	5.4228205070249664E-5	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.6519347545500844	WITHOUT_CLASSIFICATION	0.34806524544991563	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999996430922788	WITHOUT_CLASSIFICATION	3.569077212043622E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.8692389323222119	DESIGN	0.1307610676777881	WITHOUT_CLASSIFICATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999824476057795	WITHOUT_CLASSIFICATION	1.7552394220508848E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999824476057795	WITHOUT_CLASSIFICATION	1.7552394220508848E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999995580862054	WITHOUT_CLASSIFICATION	4.419137945189033E-7	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999835988282214	WITHOUT_CLASSIFICATION	1.6401171778638654E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9480248171289494	WITHOUT_CLASSIFICATION	0.051975182871050685	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999998815063268	WITHOUT_CLASSIFICATION	1.1849367321981852E-7	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.999999964765	WITHOUT_CLASSIFICATION	3.523499997427834E-8	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999998740896962	WITHOUT_CLASSIFICATION	1.2591030390611191E-7	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.999913190533856	WITHOUT_CLASSIFICATION	8.680946614405858E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9997030054750485	WITHOUT_CLASSIFICATION	2.969945249514352E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999998585649329	WITHOUT_CLASSIFICATION	1.4143506711206926E-7	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9987406438678589	WITHOUT_CLASSIFICATION	0.0012593561321410911	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9997531817879984	WITHOUT_CLASSIFICATION	2.4681821200155904E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999854593934695	WITHOUT_CLASSIFICATION	1.4540606530480498E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9438294337562498	WITHOUT_CLASSIFICATION	0.056170566243750136	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999995438883889	WITHOUT_CLASSIFICATION	4.56111611161239E-7	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999831809756325	WITHOUT_CLASSIFICATION	1.681902436736886E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999753340678	WITHOUT_CLASSIFICATION	2.466593215507048E-8	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999906920762	WITHOUT_CLASSIFICATION	9.307923736451188E-9	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999956818687	WITHOUT_CLASSIFICATION	4.318131305671105E-9	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999979210391523	WITHOUT_CLASSIFICATION	2.078960847691906E-6	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9748826828244459	WITHOUT_CLASSIFICATION	0.02511731717555409	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999999474755448	WITHOUT_CLASSIFICATION	5.252445520105469E-7	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999935239534716	WITHOUT_CLASSIFICATION	6.476046528303154E-6	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999996405766675	WITHOUT_CLASSIFICATION	3.594233325857105E-7	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999985233308	WITHOUT_CLASSIFICATION	1.4766692833231947E-9	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.6519347545500844	WITHOUT_CLASSIFICATION	0.34806524544991563	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999926453080903	WITHOUT_CLASSIFICATION	7.354691909671724E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999511490231133	WITHOUT_CLASSIFICATION	4.885097688665137E-5	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999437292201	WITHOUT_CLASSIFICATION	5.6270779773334073E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999988755965339	WITHOUT_CLASSIFICATION	1.1244034661188653E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9994406684707686	WITHOUT_CLASSIFICATION	5.593315292314952E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999897045650259	WITHOUT_CLASSIFICATION	1.0295434974017966E-5	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999998759999713	WITHOUT_CLASSIFICATION	1.2400002870160276E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999981659531115	WITHOUT_CLASSIFICATION	1.8340468884450226E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999997537895084	WITHOUT_CLASSIFICATION	2.462104915903206E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999775396005218	WITHOUT_CLASSIFICATION	2.2460399478202608E-5	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999999193155856	WITHOUT_CLASSIFICATION	8.068441433902327E-8	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999999994684325	WITHOUT_CLASSIFICATION	5.3156750161839194E-9	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9982771320246708	WITHOUT_CLASSIFICATION	0.0017228679753292825	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9664467677488376	WITHOUT_CLASSIFICATION	0.033553232251162406	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999903137402532	WITHOUT_CLASSIFICATION	9.6862597468081E-6	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999903137402532	WITHOUT_CLASSIFICATION	9.6862597468081E-6	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999968544362224	WITHOUT_CLASSIFICATION	3.1455637775877726E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.99973975546769	WITHOUT_CLASSIFICATION	2.602445323099631E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998041819712682	WITHOUT_CLASSIFICATION	1.9581802873187078E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998041819712682	WITHOUT_CLASSIFICATION	1.9581802873187078E-4	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9997530886868373	WITHOUT_CLASSIFICATION	2.4691131316268236E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9994660946922169	WITHOUT_CLASSIFICATION	5.339053077830976E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8333056092543863	WITHOUT_CLASSIFICATION	0.16669439074561374	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999815737523543	WITHOUT_CLASSIFICATION	1.8426247645666282E-5	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999883650121	WITHOUT_CLASSIFICATION	1.1634987890927871E-7	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999582463982	WITHOUT_CLASSIFICATION	4.175360187929736E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999982555715775	WITHOUT_CLASSIFICATION	1.7444284226023712E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999982555715775	WITHOUT_CLASSIFICATION	1.7444284226023712E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999422771944	WITHOUT_CLASSIFICATION	5.772280557085025E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.977414839091331	WITHOUT_CLASSIFICATION	0.02258516090866906	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999958078035281	WITHOUT_CLASSIFICATION	4.192196471803382E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999911818092492	WITHOUT_CLASSIFICATION	8.818190750836936E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999911818092492	WITHOUT_CLASSIFICATION	8.818190750836936E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999992783063669	WITHOUT_CLASSIFICATION	7.216936330360533E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999981617011363	WITHOUT_CLASSIFICATION	1.8382988635682442E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997791363502961	WITHOUT_CLASSIFICATION	2.2086364970374807E-4	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999993514125661	WITHOUT_CLASSIFICATION	6.485874338528507E-7	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9981896883888071	WITHOUT_CLASSIFICATION	0.0018103116111929708	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999819647847074	WITHOUT_CLASSIFICATION	1.8035215292584995E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999391634480796	WITHOUT_CLASSIFICATION	6.083655192047078E-5	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.999931697200892	WITHOUT_CLASSIFICATION	6.830279910795872E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9996920375423838	WITHOUT_CLASSIFICATION	3.079624576162151E-4	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999198614017466	WITHOUT_CLASSIFICATION	8.013859825339548E-5	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9917318011678512	WITHOUT_CLASSIFICATION	0.008268198832148806	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9989881126988001	WITHOUT_CLASSIFICATION	0.0010118873011998894	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.999841519957423	WITHOUT_CLASSIFICATION	1.5848004257699896E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999178906916898	WITHOUT_CLASSIFICATION	8.210930831018331E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999916415347566	WITHOUT_CLASSIFICATION	8.358465243437458E-6	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999937234928	WITHOUT_CLASSIFICATION	6.276507177931483E-9	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999931770913522	WITHOUT_CLASSIFICATION	6.822908647897214E-6	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999995526214	WITHOUT_CLASSIFICATION	4.4737861436584694E-10	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999954801766705	WITHOUT_CLASSIFICATION	4.5198233293951635E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999726618285693	WITHOUT_CLASSIFICATION	2.733817143069537E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999724347804605	WITHOUT_CLASSIFICATION	2.7565219539512415E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9980049415269756	WITHOUT_CLASSIFICATION	0.001995058473024429	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.994746047715018	WITHOUT_CLASSIFICATION	0.0052539522849820814	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999999701538335	WITHOUT_CLASSIFICATION	2.98461665404613E-8	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9670740358341929	WITHOUT_CLASSIFICATION	0.03292596416580713	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.99995613828885	WITHOUT_CLASSIFICATION	4.386171114989803E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999959963079933	WITHOUT_CLASSIFICATION	4.0036920066687625E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999949315984485	WITHOUT_CLASSIFICATION	5.068401551515382E-6	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999504988213	WITHOUT_CLASSIFICATION	4.950117876490913E-8	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998088432329119	WITHOUT_CLASSIFICATION	1.911567670881275E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6691771678129969	WITHOUT_CLASSIFICATION	0.33082283218700315	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999972562434211	WITHOUT_CLASSIFICATION	2.7437565788408243E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999999765582818	WITHOUT_CLASSIFICATION	2.3441718213638453E-7	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9992274317450105	WITHOUT_CLASSIFICATION	7.725682549896065E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999795555031589	WITHOUT_CLASSIFICATION	2.0444496841110103E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9999361829864267	WITHOUT_CLASSIFICATION	6.38170135733616E-5	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9985032860523787	WITHOUT_CLASSIFICATION	0.0014967139476213635	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999977904176	WITHOUT_CLASSIFICATION	2.2095823857403137E-8	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999975752342357	WITHOUT_CLASSIFICATION	2.4247657642019944E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999552244364557	WITHOUT_CLASSIFICATION	4.477556354426893E-5	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9998886951947568	WITHOUT_CLASSIFICATION	1.1130480524336712E-4	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999814354373578	WITHOUT_CLASSIFICATION	1.856456264208252E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999516830357063	WITHOUT_CLASSIFICATION	4.831696429382198E-5	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9998955884895264	WITHOUT_CLASSIFICATION	1.0441151047361374E-4	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999995593524055	WITHOUT_CLASSIFICATION	4.4064759455536194E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999876443556394	WITHOUT_CLASSIFICATION	1.2355644360629073E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999922636627266	WITHOUT_CLASSIFICATION	7.736337273455607E-6	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9930784306045478	WITHOUT_CLASSIFICATION	0.006921569395452226	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999969825740511	WITHOUT_CLASSIFICATION	3.017425948919065E-6	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999997550154	WITHOUT_CLASSIFICATION	2.4498455554795126E-10	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9997900756647189	WITHOUT_CLASSIFICATION	2.0992433528110464E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999684832255797	WITHOUT_CLASSIFICATION	3.1516774420288145E-5	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999920341832	WITHOUT_CLASSIFICATION	7.965816786335676E-9	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999976262521	WITHOUT_CLASSIFICATION	2.373747912534013E-9	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999983371738055	WITHOUT_CLASSIFICATION	1.662826194523105E-6	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999117862795874	WITHOUT_CLASSIFICATION	8.821372041248095E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999436585174277	WITHOUT_CLASSIFICATION	5.63414825722287E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999657032648217	WITHOUT_CLASSIFICATION	3.429673517818501E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999900895739665	WITHOUT_CLASSIFICATION	9.910426033467261E-6	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999619020377387	WITHOUT_CLASSIFICATION	3.80979622612583E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998664822772	WITHOUT_CLASSIFICATION	1.3351772279951248E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999998664822772	WITHOUT_CLASSIFICATION	1.3351772279951248E-7	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999996668806979	WITHOUT_CLASSIFICATION	3.3311930214409737E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999606508514483	WITHOUT_CLASSIFICATION	3.934914855170867E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999173511311	WITHOUT_CLASSIFICATION	8.264886890977548E-7	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999987226536316	WITHOUT_CLASSIFICATION	1.2773463684096464E-5	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999752521923	WITHOUT_CLASSIFICATION	2.4747807617270352E-8	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999879232518586	WITHOUT_CLASSIFICATION	1.2076748141482741E-5	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999994707086479	WITHOUT_CLASSIFICATION	5.292913521558991E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999998524851	WITHOUT_CLASSIFICATION	1.4751489082062294E-10	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999313334609	WITHOUT_CLASSIFICATION	6.866653907997926E-8	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999999790506684	WITHOUT_CLASSIFICATION	2.0949331546343415E-8	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9660194974275336	WITHOUT_CLASSIFICATION	0.033980502572466355	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999634490710215	WITHOUT_CLASSIFICATION	3.655092897852597E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999983485897	WITHOUT_CLASSIFICATION	1.6514103547524178E-9	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9980268680162032	WITHOUT_CLASSIFICATION	0.001973131983796808	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999934701645612	WITHOUT_CLASSIFICATION	6.529835438817804E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999934701645612	WITHOUT_CLASSIFICATION	6.529835438817804E-6	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.99999986462218	WITHOUT_CLASSIFICATION	1.3537782007184482E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999985143498471	WITHOUT_CLASSIFICATION	1.4856501529012897E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999998165184	WITHOUT_CLASSIFICATION	1.8348159828847926E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999609638077	WITHOUT_CLASSIFICATION	3.9036192345493074E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999999324169296	WITHOUT_CLASSIFICATION	6.758307040729138E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948822996719	WITHOUT_CLASSIFICATION	5.1177003280800985E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999972712042893	WITHOUT_CLASSIFICATION	2.7287957107428372E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.6984181886948526	WITHOUT_CLASSIFICATION	0.3015818113051473	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999451047181572	WITHOUT_CLASSIFICATION	5.489528184274551E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999969114828	WITHOUT_CLASSIFICATION	3.0885172161593694E-9	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999983388508	WITHOUT_CLASSIFICATION	1.6611492713350969E-9	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999992842464486	WITHOUT_CLASSIFICATION	7.157535514095487E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999997146477	WITHOUT_CLASSIFICATION	2.8535233484866566E-10	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999993433255256	WITHOUT_CLASSIFICATION	6.566744743963054E-7	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9995288820687875	DESIGN	4.711179312124486E-4	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9999418966920991	WITHOUT_CLASSIFICATION	5.810330790084087E-5	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.714142667586155	DESIGN	0.28585733241384503	WITHOUT_CLASSIFICATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999962339617433	WITHOUT_CLASSIFICATION	3.7660382567681554E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999989693428877	WITHOUT_CLASSIFICATION	1.030657112295317E-5	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999928939447	WITHOUT_CLASSIFICATION	7.106055336422011E-9	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999810243454241	WITHOUT_CLASSIFICATION	1.897565457588394E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999995688745	WITHOUT_CLASSIFICATION	4.31125457990204E-10	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9997410754893751	WITHOUT_CLASSIFICATION	2.589245106249719E-4	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998559495836604	WITHOUT_CLASSIFICATION	1.440504163394639E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9933012790748361	WITHOUT_CLASSIFICATION	0.006698720925163841	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9995765302599859	WITHOUT_CLASSIFICATION	4.234697400140565E-4	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999983657898	WITHOUT_CLASSIFICATION	1.6342101985391529E-9	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9995694199817313	WITHOUT_CLASSIFICATION	4.305800182687418E-4	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999976775063514	WITHOUT_CLASSIFICATION	2.3224936487519713E-6	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9976695357823708	WITHOUT_CLASSIFICATION	0.002330464217629059	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.999384663218383	WITHOUT_CLASSIFICATION	6.153367816169636E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999988443953	WITHOUT_CLASSIFICATION	1.155604684909847E-9	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999991408518097	WITHOUT_CLASSIFICATION	8.591481902037577E-7	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999960668311141	WITHOUT_CLASSIFICATION	3.933168885876277E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.5703632587367709	DESIGN	0.4296367412632292	WITHOUT_CLASSIFICATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9996791123099704	WITHOUT_CLASSIFICATION	3.208876900296694E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999811020512416	WITHOUT_CLASSIFICATION	1.889794875844945E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999997143066774	WITHOUT_CLASSIFICATION	2.85693322572154E-7	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999997894405224	WITHOUT_CLASSIFICATION	2.1055947767164896E-7	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9355970430249376	WITHOUT_CLASSIFICATION	0.0644029569750624	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998905368113363	WITHOUT_CLASSIFICATION	1.0946318866365214E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9998905368113363	WITHOUT_CLASSIFICATION	1.0946318866365214E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999998911780753	WITHOUT_CLASSIFICATION	1.0882192463625443E-7	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9982730037284825	WITHOUT_CLASSIFICATION	0.001726996271517595	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9673502481327831	WITHOUT_CLASSIFICATION	0.03264975186721691	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9982491993670678	WITHOUT_CLASSIFICATION	0.0017508006329321815	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999988220535683	WITHOUT_CLASSIFICATION	1.1779464318094685E-6	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999912862656222	WITHOUT_CLASSIFICATION	8.713734377763713E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999945460697464	WITHOUT_CLASSIFICATION	5.45393025360759E-6	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999574181114579	WITHOUT_CLASSIFICATION	4.258188854204645E-5	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9983540468087688	DESIGN	0.0016459531912312547	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997999552713	WITHOUT_CLASSIFICATION	2.000447287301097E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997850193301	WITHOUT_CLASSIFICATION	2.1498067005417404E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9994182863839047	WITHOUT_CLASSIFICATION	5.81713616095298E-4	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999966744008495	WITHOUT_CLASSIFICATION	3.3255991504113875E-6	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999991038684	WITHOUT_CLASSIFICATION	8.961316429692488E-10	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999799683024536	WITHOUT_CLASSIFICATION	2.0031697546378083E-5	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9995305352796489	WITHOUT_CLASSIFICATION	4.6946472035109676E-4	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.992985707298983	WITHOUT_CLASSIFICATION	0.007014292701017059	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.999999949087743	WITHOUT_CLASSIFICATION	5.091225698676993E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999994837380733	WITHOUT_CLASSIFICATION	5.162619266756835E-7	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999427403301375	WITHOUT_CLASSIFICATION	5.725966986244409E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.6573504059095238	WITHOUT_CLASSIFICATION	0.34264959409047624	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999748427982847	WITHOUT_CLASSIFICATION	2.5157201715179858E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.8809272659035311	WITHOUT_CLASSIFICATION	0.119072734096469	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9507657864473256	WITHOUT_CLASSIFICATION	0.04923421355267446	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9988636075373422	WITHOUT_CLASSIFICATION	0.0011363924626578506	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9975111442969823	WITHOUT_CLASSIFICATION	0.0024888557030176704	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999998189429268	WITHOUT_CLASSIFICATION	1.810570732416907E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999986970363	WITHOUT_CLASSIFICATION	1.3029637474889483E-9	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9997643278538653	WITHOUT_CLASSIFICATION	2.356721461346525E-4	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.998083581958861	WITHOUT_CLASSIFICATION	0.0019164180411389488	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9994345638144867	WITHOUT_CLASSIFICATION	5.654361855132039E-4	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9988979203413642	WITHOUT_CLASSIFICATION	0.0011020796586358583	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9996668668238845	WITHOUT_CLASSIFICATION	3.3313317611543603E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999960745853181	WITHOUT_CLASSIFICATION	3.925414681885054E-6	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999940547043369	WITHOUT_CLASSIFICATION	5.9452956630914504E-6	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999967877082905	WITHOUT_CLASSIFICATION	3.21229170949854E-6	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999963552257385	WITHOUT_CLASSIFICATION	3.6447742615827467E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999992721322	WITHOUT_CLASSIFICATION	7.278677933755956E-10	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9990556470689391	WITHOUT_CLASSIFICATION	9.443529310608504E-4	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998052120476165	WITHOUT_CLASSIFICATION	1.947879523834885E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999922273546	WITHOUT_CLASSIFICATION	7.772645409049623E-9	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999493731792315	WITHOUT_CLASSIFICATION	5.062682076844073E-5	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999999992359499	WITHOUT_CLASSIFICATION	7.640500925809544E-9	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999998495325	WITHOUT_CLASSIFICATION	1.5046756366102538E-10	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9996127757124239	WITHOUT_CLASSIFICATION	3.872242875761307E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9994378339402026	WITHOUT_CLASSIFICATION	5.621660597973087E-4	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999962685899256	WITHOUT_CLASSIFICATION	3.7314100744118205E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999983485897	WITHOUT_CLASSIFICATION	1.6514103547524178E-9	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999985510889	WITHOUT_CLASSIFICATION	1.4489110890687946E-9	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999903590268	WITHOUT_CLASSIFICATION	9.64097326853656E-9	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9992190713165713	WITHOUT_CLASSIFICATION	7.809286834287577E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9806479910800301	WITHOUT_CLASSIFICATION	0.01935200891996999	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999991462749	WITHOUT_CLASSIFICATION	8.537251831740926E-10	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999811992883451	WITHOUT_CLASSIFICATION	1.880071165495395E-5	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999816398856869	WITHOUT_CLASSIFICATION	1.8360114313139308E-5	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999916216036	WITHOUT_CLASSIFICATION	8.378396462581335E-9	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999998573954308	WITHOUT_CLASSIFICATION	1.426045692465516E-7	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999995340504193	WITHOUT_CLASSIFICATION	4.659495806185447E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999579922332035	WITHOUT_CLASSIFICATION	4.200776679656145E-5	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.8673342945995108	WITHOUT_CLASSIFICATION	0.13266570540048916	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999994047804487	WITHOUT_CLASSIFICATION	5.952195513220233E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.999998350626831	WITHOUT_CLASSIFICATION	1.6493731690430714E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997241378014	WITHOUT_CLASSIFICATION	2.758621987181065E-7	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999542692826	WITHOUT_CLASSIFICATION	4.57307175792268E-8	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999802393	WITHOUT_CLASSIFICATION	1.9760699941382634E-8	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999995211877014	WITHOUT_CLASSIFICATION	4.788122985926639E-7	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9991974858869704	WITHOUT_CLASSIFICATION	8.025141130296881E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997241378014	WITHOUT_CLASSIFICATION	2.758621987181065E-7	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999979963368797	WITHOUT_CLASSIFICATION	2.0036631203158955E-6	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999983996595	WITHOUT_CLASSIFICATION	1.6003405223905008E-9	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999807372321997	WITHOUT_CLASSIFICATION	1.926276780029504E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999999031868599	WITHOUT_CLASSIFICATION	9.681314005698028E-8	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999823826333156	WITHOUT_CLASSIFICATION	1.7617366684367926E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9996343175837852	WITHOUT_CLASSIFICATION	3.6568241621478533E-4	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.999999947997944	WITHOUT_CLASSIFICATION	5.200205604326184E-8	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.7533264425903323	DESIGN	0.24667355740966754	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999998645407224	WITHOUT_CLASSIFICATION	1.354592775686894E-7	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999384550756	WITHOUT_CLASSIFICATION	6.154492439406805E-8	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999609289598416	WITHOUT_CLASSIFICATION	3.907104015837862E-5	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.8885027333472932	WITHOUT_CLASSIFICATION	0.11149726665270672	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999976548856581	WITHOUT_CLASSIFICATION	2.345114342011162E-6	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9998957344927887	WITHOUT_CLASSIFICATION	1.0426550721133213E-4	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999935275992372	WITHOUT_CLASSIFICATION	6.472400762813351E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999985233308	WITHOUT_CLASSIFICATION	1.4766692833231947E-9	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998140714416	WITHOUT_CLASSIFICATION	1.859285584363977E-7	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999997670142304	WITHOUT_CLASSIFICATION	2.3298576947272737E-7	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9979666415824018	WITHOUT_CLASSIFICATION	0.0020333584175981755	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9900898267329352	WITHOUT_CLASSIFICATION	0.009910173267064731	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.999999822466491	WITHOUT_CLASSIFICATION	1.7753350899446975E-7	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999996189603738	WITHOUT_CLASSIFICATION	3.810396261986606E-7	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999988536210849	WITHOUT_CLASSIFICATION	1.1463789151783491E-6	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999988819132	WITHOUT_CLASSIFICATION	1.1180868215471108E-9	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999996963683	WITHOUT_CLASSIFICATION	3.0363165478786885E-10	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999986358139	WITHOUT_CLASSIFICATION	1.3641860553736726E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9994629633482748	WITHOUT_CLASSIFICATION	5.370366517252708E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999939908010705	WITHOUT_CLASSIFICATION	6.009198929448933E-6	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.713100250189519	WITHOUT_CLASSIFICATION	0.286899749810481	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999223124680311	WITHOUT_CLASSIFICATION	7.768753196884849E-5	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999948431888005	WITHOUT_CLASSIFICATION	5.156811199484549E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.6534431384042643	DESIGN	0.3465568615957356	WITHOUT_CLASSIFICATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9998167010842195	WITHOUT_CLASSIFICATION	1.832989157804816E-4	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999253423102148	WITHOUT_CLASSIFICATION	7.465768978525443E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999976567844	WITHOUT_CLASSIFICATION	2.343215729533004E-9	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999923448873	WITHOUT_CLASSIFICATION	7.655112671741774E-9	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999846778191672	WITHOUT_CLASSIFICATION	1.5322180832802733E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9448376186668338	WITHOUT_CLASSIFICATION	0.0551623813331662	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.99999990169673	WITHOUT_CLASSIFICATION	9.830326985211738E-8	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999999137548	WITHOUT_CLASSIFICATION	8.624518858030109E-11	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999901748339802	WITHOUT_CLASSIFICATION	9.825166019868643E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999901748339802	WITHOUT_CLASSIFICATION	9.825166019868643E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9998873033768866	WITHOUT_CLASSIFICATION	1.126966231134585E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999999159322622	WITHOUT_CLASSIFICATION	8.406773775243442E-8	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999996656071022	WITHOUT_CLASSIFICATION	3.343928978961903E-7	DESIGN
/**	WITHOUT_CLASSIFICATION	0.9145630192195039	DESIGN	0.08543698078049614	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999998380588163	WITHOUT_CLASSIFICATION	1.6194118362858644E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999998380588163	WITHOUT_CLASSIFICATION	1.6194118362858644E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999983821420952	WITHOUT_CLASSIFICATION	1.6178579047193143E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999827506675185	WITHOUT_CLASSIFICATION	1.72493324814691E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9963563653478168	WITHOUT_CLASSIFICATION	0.0036436346521831766	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9998505364393119	WITHOUT_CLASSIFICATION	1.494635606881266E-4	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999986487457497	WITHOUT_CLASSIFICATION	1.3512542502830512E-6	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999990843519865	WITHOUT_CLASSIFICATION	9.156480134665046E-7	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999994628637308	WITHOUT_CLASSIFICATION	5.37136269261434E-7	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999991672972064	WITHOUT_CLASSIFICATION	8.327027935744003E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999974776607149	WITHOUT_CLASSIFICATION	2.5223392850744026E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997195804825	WITHOUT_CLASSIFICATION	2.804195175697175E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997195804825	WITHOUT_CLASSIFICATION	2.804195175697175E-7	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9995071806185688	WITHOUT_CLASSIFICATION	4.928193814311278E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999964086808618	WITHOUT_CLASSIFICATION	3.5913191382924767E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999972963641945	WITHOUT_CLASSIFICATION	2.70363580547938E-6	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9817706327500585	WITHOUT_CLASSIFICATION	0.018229367249941463	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.774294627240537	WITHOUT_CLASSIFICATION	0.22570537275946295	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997919019999986	WITHOUT_CLASSIFICATION	2.0809800000136998E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998347432227	WITHOUT_CLASSIFICATION	1.6525677730147464E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999999645225315	WITHOUT_CLASSIFICATION	3.5477468448400843E-8	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999811165545722	WITHOUT_CLASSIFICATION	1.888344542775115E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.5086641821038916	DESIGN	0.4913358178961085	WITHOUT_CLASSIFICATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9867743079292881	WITHOUT_CLASSIFICATION	0.013225692070711904	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999384550756	WITHOUT_CLASSIFICATION	6.154492439406805E-8	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9725951806876052	DESIGN	0.027404819312394774	WITHOUT_CLASSIFICATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998031554624786	WITHOUT_CLASSIFICATION	1.9684453752150344E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999907647181	WITHOUT_CLASSIFICATION	9.235281901289424E-9	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999851884366046	WITHOUT_CLASSIFICATION	1.4811563395508116E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999995061541	WITHOUT_CLASSIFICATION	4.938458576761413E-10	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999902202180612	WITHOUT_CLASSIFICATION	9.779781938887001E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9865798272563011	WITHOUT_CLASSIFICATION	0.01342017274369876	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9976759060260464	WITHOUT_CLASSIFICATION	0.0023240939739536132	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999998168971841	WITHOUT_CLASSIFICATION	1.8310281582537017E-7	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998632655087722	WITHOUT_CLASSIFICATION	1.367344912276801E-4	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998632655087722	WITHOUT_CLASSIFICATION	1.367344912276801E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999860414122559	WITHOUT_CLASSIFICATION	1.3958587744100038E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999993482932	WITHOUT_CLASSIFICATION	6.517067474595467E-10	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9991436908626319	WITHOUT_CLASSIFICATION	8.563091373681572E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999609421811337	WITHOUT_CLASSIFICATION	3.905781886617411E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999996133144495	WITHOUT_CLASSIFICATION	3.866855504327391E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999842800194064	WITHOUT_CLASSIFICATION	1.571998059355376E-5	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999917699025906	WITHOUT_CLASSIFICATION	8.230097409393566E-6	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9941368974428092	WITHOUT_CLASSIFICATION	0.005863102557190839	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9996429818096935	WITHOUT_CLASSIFICATION	3.5701819030655715E-4	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999951586057243	WITHOUT_CLASSIFICATION	4.841394275749385E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998142206128341	WITHOUT_CLASSIFICATION	1.8577938716594816E-4	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9961358781192589	DESIGN	0.0038641218807409904	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.5365341761383347	WITHOUT_CLASSIFICATION	0.4634658238616654	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999998969481	WITHOUT_CLASSIFICATION	1.0305185149972644E-10	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9806189970736615	WITHOUT_CLASSIFICATION	0.01938100292633854	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.999938628092379	WITHOUT_CLASSIFICATION	6.137190762108626E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.803093142607322	DESIGN	0.19690685739267805	WITHOUT_CLASSIFICATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999967093328163	WITHOUT_CLASSIFICATION	3.290667183711552E-6	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999951636630947	WITHOUT_CLASSIFICATION	4.836336905270739E-6	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9979737675756046	WITHOUT_CLASSIFICATION	0.002026232424395309	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999995856752126	WITHOUT_CLASSIFICATION	4.143247873896753E-7	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999854775184908	WITHOUT_CLASSIFICATION	1.4522481509261585E-5	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9997791363502961	WITHOUT_CLASSIFICATION	2.2086364970374807E-4	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999067207379	WITHOUT_CLASSIFICATION	9.327926204557487E-8	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998275148889	WITHOUT_CLASSIFICATION	1.7248511110054481E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999998275148889	WITHOUT_CLASSIFICATION	1.7248511110054481E-6	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9892556102245087	WITHOUT_CLASSIFICATION	0.010744389775491288	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.7562897863477167	WITHOUT_CLASSIFICATION	0.24371021365228324	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999245993358843	WITHOUT_CLASSIFICATION	7.540066411565574E-5	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999137436532569	WITHOUT_CLASSIFICATION	8.625634674312526E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999443541641795	WITHOUT_CLASSIFICATION	5.564583582045699E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9975616666134042	WITHOUT_CLASSIFICATION	0.00243833338659576	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.5154458914944191	WITHOUT_CLASSIFICATION	0.48455410850558095	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9801406492304889	WITHOUT_CLASSIFICATION	0.01985935076951101	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9808238278912337	DESIGN	0.01917617210876633	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9808238278912337	DESIGN	0.01917617210876633	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9996432299755548	WITHOUT_CLASSIFICATION	3.5677002444521437E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999893887629202	WITHOUT_CLASSIFICATION	1.0611237079831988E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.8950805182199916	DESIGN	0.1049194817800085	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999946395725093	DESIGN	5.3604274906181536E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999946395725093	DESIGN	5.3604274906181536E-6	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999951752141	DESIGN	4.824785849675484E-9	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999951752141	DESIGN	4.824785849675484E-9	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9990299393598626	DESIGN	9.700606401374738E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9977635138249281	DESIGN	0.0022364861750718322	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9977635138249281	DESIGN	0.0022364861750718322	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999999045546474	DESIGN	9.544535262570219E-8	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999893887629202	WITHOUT_CLASSIFICATION	1.0611237079831988E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.8340161298634092	DESIGN	0.1659838701365908	WITHOUT_CLASSIFICATION
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9998892789202684	WITHOUT_CLASSIFICATION	1.1072107973159838E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.99999716792945	WITHOUT_CLASSIFICATION	2.8320705499029547E-6	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.7799565011078348	WITHOUT_CLASSIFICATION	0.22004349889216532	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.9850921454013353	DESIGN	0.014907854598664597	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9496933467792759	WITHOUT_CLASSIFICATION	0.05030665322072415	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999309971274557	WITHOUT_CLASSIFICATION	6.900287254432768E-5	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.9399496551760174	WITHOUT_CLASSIFICATION	0.06005034482398262	DESIGN
// todo : what else to do here?	DESIGN	0.9975616666134042	WITHOUT_CLASSIFICATION	0.00243833338659576	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9996122941150245	WITHOUT_CLASSIFICATION	3.8770588497553764E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9975616666134042	WITHOUT_CLASSIFICATION	0.00243833338659576	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9229109034393173	WITHOUT_CLASSIFICATION	0.07708909656068266	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9847662783661173	WITHOUT_CLASSIFICATION	0.015233721633882785	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999853966604489	DESIGN	1.4603339551046684E-5	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.5154458914944191	WITHOUT_CLASSIFICATION	0.48455410850558095	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.8143760727691013	DESIGN	0.18562392723089868	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9999876944256919	WITHOUT_CLASSIFICATION	1.2305574308030031E-5	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.7568230155027299	DESIGN	0.24317698449727015	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.8658583619728513	WITHOUT_CLASSIFICATION	0.13414163802714868	DESIGN
// todo : what is the implication of this?	DESIGN	0.8487427881779166	WITHOUT_CLASSIFICATION	0.1512572118220835	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.8234708180569454	WITHOUT_CLASSIFICATION	0.17652918194305464	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9963767954209378	DESIGN	0.0036232045790622965	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9992561646245187	DESIGN	7.438353754813451E-4	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9988954309680748	WITHOUT_CLASSIFICATION	0.0011045690319251783	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.5405753903227837	DESIGN	0.45942460967721627	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.8628714206585916	DESIGN	0.13712857934140843	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9903139521798764	DESIGN	0.009686047820123639	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9917817035440076	DESIGN	0.008218296455992324	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9999220381713501	DESIGN	7.796182864995156E-5	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9998371077795126	DESIGN	1.6289222048748535E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999604033187	DESIGN	3.959668122608718E-8	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.5315659598451663	WITHOUT_CLASSIFICATION	0.46843404015483364	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.5315659598451663	WITHOUT_CLASSIFICATION	0.46843404015483364	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9972537455660087	DESIGN	0.002746254433991297	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9814925393705616	WITHOUT_CLASSIFICATION	0.018507460629438418	DESIGN
//TODO possibly relax that	DESIGN	0.873140335645418	DESIGN	0.12685966435458187	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.873140335645418	DESIGN	0.12685966435458187	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.873140335645418	DESIGN	0.12685966435458187	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9998371077795126	DESIGN	1.6289222048748535E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9954695064597447	WITHOUT_CLASSIFICATION	0.004530493540255217	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.846034436201011	DESIGN	0.153965563798989	WITHOUT_CLASSIFICATION
//note that i parameter is now unused (delete it?)	DESIGN	0.9687452101466606	DESIGN	0.03125478985333934	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9998157714796899	WITHOUT_CLASSIFICATION	1.8422852031020338E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9124503222201524	DESIGN	0.08754967777984748	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.62409940411857	WITHOUT_CLASSIFICATION	0.37590059588143004	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9808238278912337	DESIGN	0.01917617210876633	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9808238278912337	DESIGN	0.01917617210876633	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9660978825062725	WITHOUT_CLASSIFICATION	0.033902117493727485	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9808238278912337	DESIGN	0.01917617210876633	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999995434640156	DESIGN	4.5653598436357547E-7	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9962652095697436	WITHOUT_CLASSIFICATION	0.0037347904302564346	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.6356175388783994	DESIGN	0.3643824611216006	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9996899987907474	WITHOUT_CLASSIFICATION	3.100012092525705E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.8902085655134624	WITHOUT_CLASSIFICATION	0.10979143448653768	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9855256781531752	WITHOUT_CLASSIFICATION	0.01447432184682478	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9946250266888237	WITHOUT_CLASSIFICATION	0.00537497331117631	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999869793759381	WITHOUT_CLASSIFICATION	1.3020624061824128E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9997486669712794	WITHOUT_CLASSIFICATION	2.513330287206155E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9964794141862293	WITHOUT_CLASSIFICATION	0.0035205858137707	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9995210834428768	WITHOUT_CLASSIFICATION	4.78916557123172E-4	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9953824939606124	WITHOUT_CLASSIFICATION	0.004617506039387615	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9919595681864182	WITHOUT_CLASSIFICATION	0.008040431813581774	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9985395746650949	WITHOUT_CLASSIFICATION	0.0014604253349049976	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9985521998383601	WITHOUT_CLASSIFICATION	0.001447800161639947	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9959716306884271	DESIGN	0.004028369311572891	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9996210163635927	WITHOUT_CLASSIFICATION	3.7898363640726613E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.7997972292171301	DESIGN	0.20020277078286977	WITHOUT_CLASSIFICATION
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9968815688336943	DESIGN	0.0031184311663056646	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.7473473936522879	DESIGN	0.2526526063477122	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9859931273087396	DESIGN	0.014006872691260552	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9998247788435749	WITHOUT_CLASSIFICATION	1.7522115642500054E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9998777917636401	WITHOUT_CLASSIFICATION	1.222082363598955E-4	DESIGN
//I suppose?	DESIGN	0.995793405843092	WITHOUT_CLASSIFICATION	0.0042065941569080926	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9992943665535797	DESIGN	7.056334464202978E-4	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9235981239469719	WITHOUT_CLASSIFICATION	0.07640187605302806	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9980347413814683	DESIGN	0.001965258618531681	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9998860924838421	WITHOUT_CLASSIFICATION	1.1390751615792985E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999708868098524	DESIGN	2.9113190147696874E-5	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9983690517411222	DESIGN	0.0016309482588777531	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9969407077937368	WITHOUT_CLASSIFICATION	0.003059292206263229	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9998612703877373	DESIGN	1.3872961226274339E-4	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9998612703877373	DESIGN	1.3872961226274339E-4	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9981542985470447	DESIGN	0.0018457014529553323	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5855478866089563	DESIGN	0.41445211339104365	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.5855478866089563	DESIGN	0.41445211339104365	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.9989427266435914	DESIGN	0.0010572733564085872	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9865314013748159	WITHOUT_CLASSIFICATION	0.01346859862518399	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9748177914435847	DESIGN	0.02518220855641534	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9829304081039402	DESIGN	0.017069591896059822	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9924402629616101	WITHOUT_CLASSIFICATION	0.007559737038389834	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9995989423468012	DESIGN	4.01057653198725E-4	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.6472708882239061	DESIGN	0.35272911177609395	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9942741467612111	DESIGN	0.005725853238788929	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9996003691557098	DESIGN	3.996308442901892E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9892442356286807	DESIGN	0.010755764371319273	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.8085890832179518	DESIGN	0.19141091678204825	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.9995590436608079	DESIGN	4.4095633919208853E-4	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.6865843706042015	WITHOUT_CLASSIFICATION	0.3134156293957984	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999995533475765	DESIGN	4.4665242346106676E-7	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999839538236613	DESIGN	1.604617633859998E-5	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9794635096311755	DESIGN	0.02053649036882451	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999775644228128	WITHOUT_CLASSIFICATION	2.243557718725744E-5	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.7043035911278294	DESIGN	0.2956964088721706	WITHOUT_CLASSIFICATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9890090305340266	DESIGN	0.010990969465973522	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9432165725130842	WITHOUT_CLASSIFICATION	0.05678342748691583	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9975872051458524	DESIGN	0.0024127948541476448	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8682913089965902	WITHOUT_CLASSIFICATION	0.1317086910034097	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9989799165824262	DESIGN	0.001020083417573704	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9846536772479065	DESIGN	0.015346322752093508	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999999834791843	DESIGN	1.6520815690119445E-8	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.998013401535473	DESIGN	0.0019865984645270765	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.8206734733041812	WITHOUT_CLASSIFICATION	0.17932652669581878	DESIGN
//TODO: merge into one method!	DESIGN	0.9411116406527896	DESIGN	0.058888359347210324	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9970965041502541	DESIGN	0.0029034958497458512	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999981808191144	DESIGN	1.8191808856378839E-6	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9998537033398857	DESIGN	1.4629666011433033E-4	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.8699477984311474	WITHOUT_CLASSIFICATION	0.1300522015688526	DESIGN
// TODO : better way?!?	DESIGN	0.9999999654869423	DESIGN	3.451305765526757E-8	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999999122427459	WITHOUT_CLASSIFICATION	8.775725412222471E-8	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9998013947008622	DESIGN	1.9860529913773466E-4	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999434866156	DESIGN	5.651338444491574E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999991404511	DESIGN	8.595488486611017E-10	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9683515282657243	DESIGN	0.031648471734275645	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9907988218012347	DESIGN	0.009201178198765274	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.999999513426873	WITHOUT_CLASSIFICATION	4.865731270374868E-7	DESIGN
//yuck!	DESIGN	0.9660978825062725	WITHOUT_CLASSIFICATION	0.033902117493727485	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9989450535920039	WITHOUT_CLASSIFICATION	0.0010549464079961809	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9998589554349007	DESIGN	1.410445650993039E-4	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.999392775784519	WITHOUT_CLASSIFICATION	6.072242154809233E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999994240734	DESIGN	5.759266658396195E-10	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999873127049144	DESIGN	1.2687295085593309E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999983736358137	DESIGN	1.6263641863246731E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9808238278912337	DESIGN	0.01917617210876633	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9991808289371532	WITHOUT_CLASSIFICATION	8.191710628467824E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9984071212751129	WITHOUT_CLASSIFICATION	0.0015928787248871597	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999298590231483	DESIGN	7.014097685158065E-5	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9985375969880647	WITHOUT_CLASSIFICATION	0.0014624030119354335	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.6553013468747042	DESIGN	0.34469865312529574	WITHOUT_CLASSIFICATION
//TODO: is this a bit ugly?	DESIGN	0.9999946893045399	DESIGN	5.310695460145475E-6	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.7635760552430982	WITHOUT_CLASSIFICATION	0.23642394475690182	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999992542389832	DESIGN	7.457610167163931E-7	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9932080077517302	DESIGN	0.006791992248269778	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999436338607262	DESIGN	5.636613927395211E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9688014811318976	DESIGN	0.03119851886810242	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9999505229166354	WITHOUT_CLASSIFICATION	4.9477083364525875E-5	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.957454106506975	DESIGN	0.042545893493025	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999978154004774	DESIGN	2.184599522604977E-6	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.87014490269988	WITHOUT_CLASSIFICATION	0.12985509730012	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.8550831361574112	WITHOUT_CLASSIFICATION	0.14491686384258884	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.8543962320645059	DESIGN	0.1456037679354942	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9590656490368931	WITHOUT_CLASSIFICATION	0.04093435096310701	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9999931503043933	DESIGN	6.849695606756306E-6	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9996489742760978	DESIGN	3.51025723902244E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.999999884746054	DESIGN	1.1525394604266532E-7	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.6616555012262412	WITHOUT_CLASSIFICATION	0.3383444987737588	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9996862763229194	DESIGN	3.137236770806122E-4	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9952731616537169	DESIGN	0.004726838346283009	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9848538814197212	DESIGN	0.015146118580278941	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9991015552312141	WITHOUT_CLASSIFICATION	8.984447687858812E-4	DESIGN
// short-circuit for performance...	DESIGN	0.9987551105082842	WITHOUT_CLASSIFICATION	0.0012448894917157336	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9998020607961957	WITHOUT_CLASSIFICATION	1.9793920380417504E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9788853872119218	DESIGN	0.021114612788078295	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.8456752079694899	DESIGN	0.1543247920305102	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999999865572	DESIGN	1.3442906771671633E-11	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9989783847873179	DESIGN	0.0010216152126819942	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9993865741291601	DESIGN	6.134258708398385E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9145630192195039	DESIGN	0.08543698078049614	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9972801462959336	WITHOUT_CLASSIFICATION	0.002719853704066376	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9826639595272064	DESIGN	0.01733604047279356	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.989453816767188	WITHOUT_CLASSIFICATION	0.010546183232812034	DESIGN
//use of trim() here is ugly?	DESIGN	0.9769019842409378	WITHOUT_CLASSIFICATION	0.023098015759062195	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9873220398118048	DESIGN	0.012677960188195123	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9981319812403631	WITHOUT_CLASSIFICATION	0.0018680187596369208	DESIGN
//TODO: inefficient	DESIGN	0.9877475445301499	DESIGN	0.012252455469850055	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.6630241368518014	DESIGN	0.33697586314819866	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.999999861455759	DESIGN	1.3854424101107226E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999989002212036	DESIGN	1.0997787962999526E-6	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9996464568223825	DESIGN	3.5354317761750203E-4	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999813529309071	DESIGN	1.8647069093013882E-5	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9998893865160149	WITHOUT_CLASSIFICATION	1.1061348398510286E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.923973403292673	DESIGN	0.07602659670732705	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9819174245790023	DESIGN	0.018082575420997685	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9358802357378172	WITHOUT_CLASSIFICATION	0.0641197642621828	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9999188999080736	DESIGN	8.110009192637941E-5	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999994897133	DESIGN	5.102867456413967E-10	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.6835893912820671	WITHOUT_CLASSIFICATION	0.31641060871793303	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9999976460560266	DESIGN	2.35394397331739E-6	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.7277492668620955	DESIGN	0.2722507331379045	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9637744920965684	WITHOUT_CLASSIFICATION	0.03622550790343167	DESIGN
//create an index on the key columns??	DESIGN	0.9999913078982678	WITHOUT_CLASSIFICATION	8.69210173204336E-6	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9051446492128454	DESIGN	0.09485535078715457	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999913078982678	WITHOUT_CLASSIFICATION	8.69210173204336E-6	DESIGN
//TODO: improve this hack!	DESIGN	0.9999996846069786	DESIGN	3.1539302137946623E-7	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999949027745567	WITHOUT_CLASSIFICATION	5.097225443321141E-6	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9822395901239175	DESIGN	0.017760409876082454	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9996059140375406	WITHOUT_CLASSIFICATION	3.9408596245935946E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.97540328953713	WITHOUT_CLASSIFICATION	0.024596710462870017	DESIGN
// create an index on the key columns??	DESIGN	0.9999990006442868	WITHOUT_CLASSIFICATION	9.99355713125009E-7	DESIGN
// todo : remove	DESIGN	0.9799249029280123	WITHOUT_CLASSIFICATION	0.020075097071987694	DESIGN
// todo : remove	DESIGN	0.9799249029280123	WITHOUT_CLASSIFICATION	0.020075097071987694	DESIGN
// todo : remove	DESIGN	0.9799249029280123	WITHOUT_CLASSIFICATION	0.020075097071987694	DESIGN
// todo : throw exception?	DESIGN	0.7913943333895026	WITHOUT_CLASSIFICATION	0.20860566661049745	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.7981235267111284	DESIGN	0.2018764732888716	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9998888224203432	DESIGN	1.1117757965685397E-4	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999548675228143	DESIGN	4.513247718580219E-5	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.5377457042373162	DESIGN	0.4622542957626838	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999998951941101	DESIGN	1.0480588982132192E-7	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.7751396089655854	WITHOUT_CLASSIFICATION	0.2248603910344146	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.5374263191411207	WITHOUT_CLASSIFICATION	0.4625736808588793	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9845015351769432	DESIGN	0.015498464823056836	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9680607872003961	WITHOUT_CLASSIFICATION	0.031939212799603885	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9912204191708215	DESIGN	0.008779580829178438	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9974597839666163	DESIGN	0.002540216033383762	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.999999874521915	DESIGN	1.2547808503647549E-7	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.5681962259659317	DESIGN	0.43180377403406844	WITHOUT_CLASSIFICATION
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.98044952614818	DESIGN	0.01955047385181996	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.8014009850926322	WITHOUT_CLASSIFICATION	0.1985990149073677	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6983133991551335	DESIGN	0.3016866008448665	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.8841146430762572	DESIGN	0.11588535692374274	WITHOUT_CLASSIFICATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9996534165009993	DESIGN	3.465834990006429E-4	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.998682863715131	DESIGN	0.0013171362848689373	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9999530717768669	DESIGN	4.692822313302584E-5	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.5053322731892625	DESIGN	0.4946677268107375	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999904522548959	DESIGN	9.547745104018951E-6	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9942240436292068	WITHOUT_CLASSIFICATION	0.005775956370793193	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9420695057331845	DESIGN	0.05793049426681542	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9998993738344564	DESIGN	1.0062616554364042E-4	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9992668656000506	DESIGN	7.331343999493466E-4	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9994618577387198	DESIGN	5.381422612802871E-4	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999999706622851	DESIGN	2.9337714915646003E-8	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9638267266655869	WITHOUT_CLASSIFICATION	0.03617327333441303	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.995698895864447	WITHOUT_CLASSIFICATION	0.004301104135552851	DESIGN
//is this ok?	DESIGN	0.9655900129576943	WITHOUT_CLASSIFICATION	0.0344099870423056	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999407086033	DESIGN	5.929139665575923E-8	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9997379965515839	DESIGN	2.620034484160352E-4	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.8278073350518864	WITHOUT_CLASSIFICATION	0.17219266494811353	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.99999943197845	DESIGN	5.680215499302949E-7	WITHOUT_CLASSIFICATION
/**	DESIGN	0.9145630192195039	DESIGN	0.08543698078049614	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9981227999578259	DESIGN	0.0018772000421741258	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999988494669257	DESIGN	1.1505330742104538E-6	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9972473385518208	DESIGN	0.00275266144817924	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9837570160112916	WITHOUT_CLASSIFICATION	0.0162429839887084	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.999911825224521	DESIGN	8.817477547903528E-5	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9996780692256122	DESIGN	3.2193077438778366E-4	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.6805499264484464	DESIGN	0.3194500735515536	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9949017146298152	DESIGN	0.005098285370184767	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.6549268714175387	DESIGN	0.3450731285824613	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9988408827188577	DESIGN	0.0011591172811423137	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9674455286531553	DESIGN	0.03255447134684477	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.996973919552055	DESIGN	0.003026080447944926	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999861209246027	DESIGN	1.3879075397304858E-5	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.812409716775294	WITHOUT_CLASSIFICATION	0.18759028322470597	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9975174058392958	DESIGN	0.0024825941607041	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.6726470998546035	DESIGN	0.3273529001453966	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.995700609443494	DESIGN	0.004299390556505999	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999998006	DESIGN	1.9947794171766964E-13	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999982348060696	DESIGN	1.7651939302834296E-6	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.8940345949680616	WITHOUT_CLASSIFICATION	0.10596540503193841	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999980069713851	DESIGN	1.993028614803012E-6	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.969885611016251	DESIGN	0.03011438898374895	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999857544473413	DESIGN	1.4245552658821764E-5	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9998090920462187	WITHOUT_CLASSIFICATION	1.9090795378130207E-4	DESIGN
// short cut check...	DESIGN	0.9991735263456907	WITHOUT_CLASSIFICATION	8.264736543091926E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.9931623131546927	WITHOUT_CLASSIFICATION	0.006837686845307215	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9994788924500398	DESIGN	5.211075499601782E-4	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9971654384416286	DESIGN	0.0028345615583713437	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999924824633	DESIGN	7.517536624101806E-9	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9995144408980925	DESIGN	4.8555910190761764E-4	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.595261164234245	WITHOUT_CLASSIFICATION	0.4047388357657549	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.8011793196968083	WITHOUT_CLASSIFICATION	0.19882068030319172	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.7093282454685435	DESIGN	0.29067175453145655	WITHOUT_CLASSIFICATION
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999150324065	DESIGN	8.496759352261555E-8	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9896476742734157	WITHOUT_CLASSIFICATION	0.01035232572658435	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.998832682235295	DESIGN	0.0011673177647051093	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9999947299024255	WITHOUT_CLASSIFICATION	5.270097574492888E-6	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9999336364675475	DESIGN	6.636353245248621E-5	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999983920286728	WITHOUT_CLASSIFICATION	1.6079713272084887E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9856080547568832	WITHOUT_CLASSIFICATION	0.01439194524311688	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999999948189	DESIGN	5.181003902217244E-12	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999968911080624	DESIGN	3.108891937407327E-6	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.9469353979176848	WITHOUT_CLASSIFICATION	0.05306460208231527	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9496805481546904	WITHOUT_CLASSIFICATION	0.05031945184530968	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9364962172337546	WITHOUT_CLASSIFICATION	0.06350378276624524	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9981556466256362	DESIGN	0.0018443533743639049	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999968951213756	DESIGN	3.104878624387374E-6	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9544316913704176	DESIGN	0.04556830862958242	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9799249029280123	WITHOUT_CLASSIFICATION	0.020075097071987694	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9970073470081792	DESIGN	0.002992652991820818	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9984677175725498	DESIGN	0.0015322824274501775	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.99990771636042	DESIGN	9.228363958008794E-5	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.8329031406697603	WITHOUT_CLASSIFICATION	0.16709685933023966	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999929866659649	DESIGN	7.013334035113402E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.7952794411109716	WITHOUT_CLASSIFICATION	0.20472055888902846	DESIGN
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9593714292569772	DESIGN	0.04062857074302295	WITHOUT_CLASSIFICATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.999721629868378	DESIGN	2.7837013162210846E-4	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9999444305782825	DESIGN	5.556942171761353E-5	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.8934150287400056	DESIGN	0.1065849712599945	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9997233880982997	DESIGN	2.7661190170031203E-4	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.8155294938732854	WITHOUT_CLASSIFICATION	0.1844705061267146	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9837836283682657	DESIGN	0.016216371631734245	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999986026451883	WITHOUT_CLASSIFICATION	1.3973548117656664E-6	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999655154466963	DESIGN	3.4484553303704324E-5	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9422836401936794	DESIGN	0.0577163598063206	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999985220390452	DESIGN	1.4779609548980363E-6	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9072677830371942	WITHOUT_CLASSIFICATION	0.0927322169628057	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9991648237352367	DESIGN	8.351762647631359E-4	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9890351122910923	DESIGN	0.010964887708907653	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9659409028989416	DESIGN	0.03405909710105833	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999993678038	DESIGN	6.321961758006955E-10	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999998113558	DESIGN	1.8864415603060948E-10	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9774415245903564	DESIGN	0.022558475409643643	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999942290221905	DESIGN	5.770977809445947E-6	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9985551929300266	DESIGN	0.0014448070699734704	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999819671653786	WITHOUT_CLASSIFICATION	1.8032834621408135E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999963237036189	WITHOUT_CLASSIFICATION	3.6762963809941544E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999167237	DESIGN	8.327625900193074E-11	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.999638863913198	DESIGN	3.611360868020427E-4	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999987223892871	DESIGN	1.2776107128793334E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9999953509253678	DESIGN	4.649074632161486E-6	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9995751678230885	DESIGN	4.2483217691135605E-4	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9752475779182719	DESIGN	0.02475242208172822	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9992668656000506	DESIGN	7.331343999493466E-4	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.5796776074027115	DESIGN	0.42032239259728854	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999990443356184	DESIGN	9.556643816230873E-7	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9638267266655869	WITHOUT_CLASSIFICATION	0.03617327333441303	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9997379965515839	DESIGN	2.620034484160352E-4	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.923843103430125	DESIGN	0.076156896569875	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999946395725093	DESIGN	5.3604274906181536E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999946395725093	DESIGN	5.3604274906181536E-6	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999946395725093	DESIGN	5.3604274906181536E-6	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999999578310286	DESIGN	4.216897153375583E-8	WITHOUT_CLASSIFICATION
