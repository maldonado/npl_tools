//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999996077017229	WITHOUT_CLASSIFICATION	3.9229827715733693E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999928826704084	WITHOUT_CLASSIFICATION	7.117329591628252E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999928826704084	WITHOUT_CLASSIFICATION	7.117329591628252E-6	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9999968524525193	WITHOUT_CLASSIFICATION	3.147547480736384E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999981288010473	WITHOUT_CLASSIFICATION	1.8711989526422278E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999987030051051	WITHOUT_CLASSIFICATION	1.2969948949063902E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999999794332332	WITHOUT_CLASSIFICATION	2.0566766794581557E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999999794332332	WITHOUT_CLASSIFICATION	2.0566766794581557E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999990551489675	WITHOUT_CLASSIFICATION	9.448510325737409E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993411090711	WITHOUT_CLASSIFICATION	6.588909288560011E-7	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999929230964525	WITHOUT_CLASSIFICATION	7.076903547474352E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999953921146806	WITHOUT_CLASSIFICATION	4.607885319324767E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999997594558682	WITHOUT_CLASSIFICATION	2.40544131800272E-7	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999997594558682	WITHOUT_CLASSIFICATION	2.40544131800272E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999806507270713	WITHOUT_CLASSIFICATION	1.9349272928683164E-5	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999922561610386	WITHOUT_CLASSIFICATION	7.743838961424648E-6	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9999653258729194	WITHOUT_CLASSIFICATION	3.467412708059589E-5	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999929378503495	WITHOUT_CLASSIFICATION	7.062149650448239E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999960467972	WITHOUT_CLASSIFICATION	3.953202800351103E-9	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999998224299215	WITHOUT_CLASSIFICATION	1.7757007850218628E-6	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.999993945946839	WITHOUT_CLASSIFICATION	6.054053161078604E-6	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999981207075149	WITHOUT_CLASSIFICATION	1.8792924851543314E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999952247300439	WITHOUT_CLASSIFICATION	4.775269956189215E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9971799544318053	WITHOUT_CLASSIFICATION	0.0028200455681947636	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999887656075452	WITHOUT_CLASSIFICATION	1.1234392454720849E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999982947792918	WITHOUT_CLASSIFICATION	1.7052207082534515E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999976942528426	WITHOUT_CLASSIFICATION	2.305747157373958E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985449355024	WITHOUT_CLASSIFICATION	1.4550644975544984E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985449355024	WITHOUT_CLASSIFICATION	1.4550644975544984E-6	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999993812789418	WITHOUT_CLASSIFICATION	6.187210582014647E-7	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999990346692428	WITHOUT_CLASSIFICATION	9.653307571988632E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9996090541129705	WITHOUT_CLASSIFICATION	3.9094588702941516E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999970014172803	WITHOUT_CLASSIFICATION	2.998582719715004E-5	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.9804439787642572	WITHOUT_CLASSIFICATION	0.01955602123574282	DESIGN
/**	WITHOUT_CLASSIFICATION	0.955730602563349	DESIGN	0.044269397436651	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
/**	WITHOUT_CLASSIFICATION	0.955730602563349	DESIGN	0.044269397436651	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.999999420759446	WITHOUT_CLASSIFICATION	5.79240553920427E-7	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9805729064177565	WITHOUT_CLASSIFICATION	0.019427093582243486	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9984558468464849	WITHOUT_CLASSIFICATION	0.0015441531535151098	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997000169889354	WITHOUT_CLASSIFICATION	2.9998301106452525E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.999972843670287	WITHOUT_CLASSIFICATION	2.7156329712870124E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999949864766144	WITHOUT_CLASSIFICATION	5.013523385543717E-6	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947601947139	WITHOUT_CLASSIFICATION	5.23980528605176E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999955529779191	WITHOUT_CLASSIFICATION	4.447022080957268E-6	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999241070659473	WITHOUT_CLASSIFICATION	7.58929340527251E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.994360870047662	WITHOUT_CLASSIFICATION	0.005639129952337957	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999672660873251	WITHOUT_CLASSIFICATION	3.273391267493365E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999241070659473	WITHOUT_CLASSIFICATION	7.58929340527251E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999672660873251	WITHOUT_CLASSIFICATION	3.273391267493365E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999864963207612	WITHOUT_CLASSIFICATION	1.350367923883705E-5	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9787336189660439	DESIGN	0.021266381033956012	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999960642700251	WITHOUT_CLASSIFICATION	3.93572997488124E-6	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999906025067626	WITHOUT_CLASSIFICATION	9.397493237293644E-6	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9991896911913323	WITHOUT_CLASSIFICATION	8.103088086676348E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999963077567277	WITHOUT_CLASSIFICATION	3.6922432723571348E-6	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9787651720035982	WITHOUT_CLASSIFICATION	0.02123482799640171	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.9630642281698034	WITHOUT_CLASSIFICATION	0.03693577183019662	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999893891996767	WITHOUT_CLASSIFICATION	1.06108003232933E-5	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.999998793158935	WITHOUT_CLASSIFICATION	1.206841064999155E-6	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999995556336359	WITHOUT_CLASSIFICATION	4.4436636415725007E-7	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999956017122581	WITHOUT_CLASSIFICATION	4.398287741910417E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999921469887199	WITHOUT_CLASSIFICATION	7.853011280184947E-6	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999897242234311	WITHOUT_CLASSIFICATION	1.0275776568836108E-5	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9998706647571459	WITHOUT_CLASSIFICATION	1.2933524285419182E-4	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999998209365105	WITHOUT_CLASSIFICATION	1.7906348942581934E-7	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9999990055240586	WITHOUT_CLASSIFICATION	9.944759414100826E-7	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9909589883031377	WITHOUT_CLASSIFICATION	0.009041011696862375	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9994371322846729	WITHOUT_CLASSIFICATION	5.628677153270432E-4	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9996400672798194	WITHOUT_CLASSIFICATION	3.5993272018058946E-4	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9945649981780864	WITHOUT_CLASSIFICATION	0.005435001821913543	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999578745672	WITHOUT_CLASSIFICATION	4.2125432686615595E-8	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996853808723483	WITHOUT_CLASSIFICATION	3.146191276517928E-4	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999996891950854	WITHOUT_CLASSIFICATION	3.1080491458822456E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9985905025554161	WITHOUT_CLASSIFICATION	0.001409497444583812	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999950096291229	WITHOUT_CLASSIFICATION	4.990370877013992E-6	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999951041666233	WITHOUT_CLASSIFICATION	4.895833376737774E-6	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9986377689110413	WITHOUT_CLASSIFICATION	0.001362231088958682	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999803835260013	WITHOUT_CLASSIFICATION	1.9616473998719296E-5	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9988081665368079	WITHOUT_CLASSIFICATION	0.0011918334631920522	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999918863595	WITHOUT_CLASSIFICATION	8.113640491507062E-9	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999967254419	WITHOUT_CLASSIFICATION	3.2745579338990862E-9	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999316499531786	WITHOUT_CLASSIFICATION	6.835004682136598E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995353823450654	WITHOUT_CLASSIFICATION	4.646176549345795E-4	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999986672675855	WITHOUT_CLASSIFICATION	1.3327324146365925E-6	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999996360256128	WITHOUT_CLASSIFICATION	3.639743871667415E-7	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995353823450654	WITHOUT_CLASSIFICATION	4.646176549345795E-4	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999954343851728	WITHOUT_CLASSIFICATION	4.565614827202108E-6	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999910321821384	WITHOUT_CLASSIFICATION	8.967817861601291E-6	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999989751744198	WITHOUT_CLASSIFICATION	1.0248255801396247E-6	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999995406218781	WITHOUT_CLASSIFICATION	4.5937812180855027E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999994498198549	WITHOUT_CLASSIFICATION	5.501801451377468E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999861681479799	WITHOUT_CLASSIFICATION	1.3831852020156915E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999861681479799	WITHOUT_CLASSIFICATION	1.3831852020156915E-5	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999858416354445	WITHOUT_CLASSIFICATION	1.4158364555484747E-5	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.5694522272642858	DESIGN	0.43054777273571426	WITHOUT_CLASSIFICATION
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999974200645859	WITHOUT_CLASSIFICATION	2.5799354141481605E-6	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999997093412404	WITHOUT_CLASSIFICATION	2.906587595507564E-7	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999940924091135	WITHOUT_CLASSIFICATION	5.907590886439885E-6	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9996959710103055	WITHOUT_CLASSIFICATION	3.0402898969456976E-4	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999917813588632	WITHOUT_CLASSIFICATION	8.218641136809379E-6	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999946256358592	WITHOUT_CLASSIFICATION	5.374364140883318E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999943175166172	WITHOUT_CLASSIFICATION	5.682483382798652E-6	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999988562923844	WITHOUT_CLASSIFICATION	1.1437076156209655E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998678332635631	WITHOUT_CLASSIFICATION	1.321667364369644E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998678332635631	WITHOUT_CLASSIFICATION	1.321667364369644E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999730837251648	WITHOUT_CLASSIFICATION	2.6916274835240698E-5	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999991768156294	WITHOUT_CLASSIFICATION	8.231843704513284E-7	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9999456451852122	WITHOUT_CLASSIFICATION	5.435481478764222E-5	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9998678332635631	WITHOUT_CLASSIFICATION	1.321667364369644E-4	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999730837251648	WITHOUT_CLASSIFICATION	2.6916274835240698E-5	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999730837251648	WITHOUT_CLASSIFICATION	2.6916274835240698E-5	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999837615227982	WITHOUT_CLASSIFICATION	1.6238477201771614E-5	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999915873850063	WITHOUT_CLASSIFICATION	8.41261499377743E-6	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999932193899	WITHOUT_CLASSIFICATION	6.7806100840410955E-9	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999962813846323	WITHOUT_CLASSIFICATION	3.7186153676186113E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999163283716843	WITHOUT_CLASSIFICATION	8.367162831570362E-5	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9999163283716843	WITHOUT_CLASSIFICATION	8.367162831570362E-5	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999795693284546	WITHOUT_CLASSIFICATION	2.0430671545381226E-5	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9953714334738578	WITHOUT_CLASSIFICATION	0.004628566526142119	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999993591845096	WITHOUT_CLASSIFICATION	6.408154904138933E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999889570620609	WITHOUT_CLASSIFICATION	1.1042937939101825E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999889570620609	WITHOUT_CLASSIFICATION	1.1042937939101825E-5	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.999898767178626	WITHOUT_CLASSIFICATION	1.0123282137399591E-4	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.974837189760681	WITHOUT_CLASSIFICATION	0.02516281023931903	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9295896746742246	WITHOUT_CLASSIFICATION	0.07041032532577539	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999713175585966	WITHOUT_CLASSIFICATION	2.868244140344535E-5	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.999604724578929	WITHOUT_CLASSIFICATION	3.952754210710384E-4	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999998978950597	WITHOUT_CLASSIFICATION	1.021049403021514E-6	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9995639047500394	WITHOUT_CLASSIFICATION	4.360952499605724E-4	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9975802620471297	WITHOUT_CLASSIFICATION	0.0024197379528703524	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999497366032798	WITHOUT_CLASSIFICATION	5.0263396720233436E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9295896746742246	WITHOUT_CLASSIFICATION	0.07041032532577539	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9999620123528866	WITHOUT_CLASSIFICATION	3.798764711340616E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999836958905358	WITHOUT_CLASSIFICATION	1.6304109464178094E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999836958905358	WITHOUT_CLASSIFICATION	1.6304109464178094E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9994477827290388	WITHOUT_CLASSIFICATION	5.522172709613427E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9958417294574942	WITHOUT_CLASSIFICATION	0.00415827054250576	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9912643076180742	WITHOUT_CLASSIFICATION	0.008735692381925836	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9997438491172107	WITHOUT_CLASSIFICATION	2.561508827892827E-4	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998604637793118	WITHOUT_CLASSIFICATION	1.3953622068829536E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9999886647087596	WITHOUT_CLASSIFICATION	1.1335291240342099E-5	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9999786951673554	WITHOUT_CLASSIFICATION	2.130483264458922E-5	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999977704205584	WITHOUT_CLASSIFICATION	2.229579441638061E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996900883452	WITHOUT_CLASSIFICATION	3.099116547491955E-7	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999996900883452	WITHOUT_CLASSIFICATION	3.099116547491955E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999881857764969	WITHOUT_CLASSIFICATION	1.1814223503111777E-4	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999996077017229	WITHOUT_CLASSIFICATION	3.9229827715733693E-7	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999977380146193	WITHOUT_CLASSIFICATION	2.261985380758348E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999999547394831	WITHOUT_CLASSIFICATION	4.526051697182811E-8	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999928826704084	WITHOUT_CLASSIFICATION	7.117329591628252E-6	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999983917394971	WITHOUT_CLASSIFICATION	1.6082605029545928E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999966983926951	WITHOUT_CLASSIFICATION	3.301607304908113E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999989407354163	WITHOUT_CLASSIFICATION	1.0592645837180185E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999991793329822	WITHOUT_CLASSIFICATION	8.206670178669955E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999839000404821	WITHOUT_CLASSIFICATION	1.609995951797662E-5	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9998910432986704	WITHOUT_CLASSIFICATION	1.0895670132965538E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999953146650712	WITHOUT_CLASSIFICATION	4.685334928765251E-6	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999984400695794	WITHOUT_CLASSIFICATION	1.5599304206173558E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999981288010473	WITHOUT_CLASSIFICATION	1.8711989526422278E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999173449197	WITHOUT_CLASSIFICATION	8.265508028622414E-8	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999173449197	WITHOUT_CLASSIFICATION	8.265508028622414E-8	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999998593161775	WITHOUT_CLASSIFICATION	1.4068382257397346E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9999954117820625	WITHOUT_CLASSIFICATION	4.588217937396497E-6	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.999999462542102	WITHOUT_CLASSIFICATION	5.374578979142455E-7	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999998352240085	WITHOUT_CLASSIFICATION	1.6477599161917615E-7	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999995355478419	WITHOUT_CLASSIFICATION	4.644521580181925E-7	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9996211137198823	WITHOUT_CLASSIFICATION	3.788862801177827E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.999999794332332	WITHOUT_CLASSIFICATION	2.0566766794581557E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9987099941529709	WITHOUT_CLASSIFICATION	0.0012900058470290906	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999993812380022	WITHOUT_CLASSIFICATION	6.187619976698843E-7	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999976661100559	WITHOUT_CLASSIFICATION	2.3338899442135092E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999999528456968	WITHOUT_CLASSIFICATION	4.715430329487089E-8	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999982979579704	WITHOUT_CLASSIFICATION	1.7020420296207124E-6	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999978412629864	WITHOUT_CLASSIFICATION	2.158737013677379E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999995427956114	WITHOUT_CLASSIFICATION	4.572043884582437E-7	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999998655454393	WITHOUT_CLASSIFICATION	1.344545606406129E-7	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999892719742948	WITHOUT_CLASSIFICATION	1.072802570517986E-5	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999996884436659	WITHOUT_CLASSIFICATION	3.1155633406935385E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.6770087809135551	WITHOUT_CLASSIFICATION	0.322991219086445	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999968506950258	WITHOUT_CLASSIFICATION	3.149304974257839E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999983671817869	WITHOUT_CLASSIFICATION	1.6328182130155373E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999928826704084	WITHOUT_CLASSIFICATION	7.117329591628252E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999928826704084	WITHOUT_CLASSIFICATION	7.117329591628252E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999953146650712	WITHOUT_CLASSIFICATION	4.685334928765251E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999999173449197	WITHOUT_CLASSIFICATION	8.265508028622414E-8	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999995427956114	WITHOUT_CLASSIFICATION	4.572043884582437E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999990551489675	WITHOUT_CLASSIFICATION	9.448510325737409E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999997078765784	WITHOUT_CLASSIFICATION	2.921234215482543E-7	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999556972649917	WITHOUT_CLASSIFICATION	4.430273500833194E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999992480309989	WITHOUT_CLASSIFICATION	7.519690010965886E-7	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999995742538881	WITHOUT_CLASSIFICATION	4.2574611196740717E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999996596091306	WITHOUT_CLASSIFICATION	3.403908694034052E-7	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999986092247705	WITHOUT_CLASSIFICATION	1.39077522955125E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999690333885667	WITHOUT_CLASSIFICATION	3.0966611433342394E-5	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999543168785978	WITHOUT_CLASSIFICATION	4.568312140212433E-5	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999921851186845	WITHOUT_CLASSIFICATION	7.814881315586143E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999969090247113	WITHOUT_CLASSIFICATION	3.090975288614388E-6	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999969090247113	WITHOUT_CLASSIFICATION	3.090975288614388E-6	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999560371084836	WITHOUT_CLASSIFICATION	4.3962891516396266E-5	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999926171946667	WITHOUT_CLASSIFICATION	7.382805333331279E-6	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9998380421525495	WITHOUT_CLASSIFICATION	1.6195784745057985E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999837488772494	WITHOUT_CLASSIFICATION	1.625112275058585E-5	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999903167623776	WITHOUT_CLASSIFICATION	9.683237622392097E-6	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999999816341699	WITHOUT_CLASSIFICATION	1.8365829979377417E-8	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.999998818432757	WITHOUT_CLASSIFICATION	1.181567243004007E-6	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999993411090711	WITHOUT_CLASSIFICATION	6.588909288560011E-7	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999996987996366	WITHOUT_CLASSIFICATION	3.0120036345715175E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.999998802431744	WITHOUT_CLASSIFICATION	1.1975682560326786E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.999998802431744	WITHOUT_CLASSIFICATION	1.1975682560326786E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998880477758	WITHOUT_CLASSIFICATION	1.1195222413163411E-7	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9999883388814965	WITHOUT_CLASSIFICATION	1.166111850342316E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998327933239	WITHOUT_CLASSIFICATION	1.6720667606450094E-7	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999986824766979	WITHOUT_CLASSIFICATION	1.317523302148175E-6	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999987344666336	WITHOUT_CLASSIFICATION	1.265533366518522E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999928826704084	WITHOUT_CLASSIFICATION	7.117329591628252E-6	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999953146650712	WITHOUT_CLASSIFICATION	4.685334928765251E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999981288010473	WITHOUT_CLASSIFICATION	1.8711989526422278E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999995427956114	WITHOUT_CLASSIFICATION	4.572043884582437E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999995427956114	WITHOUT_CLASSIFICATION	4.572043884582437E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999983490798102	WITHOUT_CLASSIFICATION	1.6509201897581635E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999983490798102	WITHOUT_CLASSIFICATION	1.6509201897581635E-6	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999980578224366	WITHOUT_CLASSIFICATION	1.94217756336506E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999993429486496	WITHOUT_CLASSIFICATION	6.570513505101282E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999993429486496	WITHOUT_CLASSIFICATION	6.570513505101282E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999996067584398	WITHOUT_CLASSIFICATION	3.932415602061238E-7	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999915241127021	WITHOUT_CLASSIFICATION	8.47588729790675E-6	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999733771674629	WITHOUT_CLASSIFICATION	2.6622832537067342E-5	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999981838160807	WITHOUT_CLASSIFICATION	1.8161839192767162E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.999999331099498	WITHOUT_CLASSIFICATION	6.689005020370541E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999953921146806	WITHOUT_CLASSIFICATION	4.607885319324767E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999953921146806	WITHOUT_CLASSIFICATION	4.607885319324767E-6	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9999856452967993	WITHOUT_CLASSIFICATION	1.4354703200668946E-5	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.999999290407054	WITHOUT_CLASSIFICATION	7.095929459665303E-7	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999968799271612	WITHOUT_CLASSIFICATION	3.1200728387613093E-6	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999967449586623	WITHOUT_CLASSIFICATION	3.2550413377122837E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999995217712236	WITHOUT_CLASSIFICATION	4.782287763211474E-7	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999957794475424	WITHOUT_CLASSIFICATION	4.220552457687507E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999997594558682	WITHOUT_CLASSIFICATION	2.40544131800272E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996059413024	WITHOUT_CLASSIFICATION	3.9405869757612874E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996059413024	WITHOUT_CLASSIFICATION	3.9405869757612874E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999806507270713	WITHOUT_CLASSIFICATION	1.9349272928683164E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999806507270713	WITHOUT_CLASSIFICATION	1.9349272928683164E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991306542894	WITHOUT_CLASSIFICATION	8.693457106646685E-7	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991306542894	WITHOUT_CLASSIFICATION	8.693457106646685E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999938714906174	WITHOUT_CLASSIFICATION	6.1285093827035975E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999938714906174	WITHOUT_CLASSIFICATION	6.1285093827035975E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999953921146806	WITHOUT_CLASSIFICATION	4.607885319324767E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999997594558682	WITHOUT_CLASSIFICATION	2.40544131800272E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996059413024	WITHOUT_CLASSIFICATION	3.9405869757612874E-7	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999996059413024	WITHOUT_CLASSIFICATION	3.9405869757612874E-7	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999806507270713	WITHOUT_CLASSIFICATION	1.9349272928683164E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991306542894	WITHOUT_CLASSIFICATION	8.693457106646685E-7	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999991306542894	WITHOUT_CLASSIFICATION	8.693457106646685E-7	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999938714906174	WITHOUT_CLASSIFICATION	6.1285093827035975E-6	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999968639484643	WITHOUT_CLASSIFICATION	3.1360515356905974E-6	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999412615932013	WITHOUT_CLASSIFICATION	5.873840679861878E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997669000489143	WITHOUT_CLASSIFICATION	2.3309995108568749E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9998180244291807	WITHOUT_CLASSIFICATION	1.8197557081943308E-4	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999991067396109	WITHOUT_CLASSIFICATION	8.932603891126385E-7	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999944563486074	WITHOUT_CLASSIFICATION	5.543651392494796E-6	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9927603025652713	WITHOUT_CLASSIFICATION	0.0072396974347287485	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9998007535273135	WITHOUT_CLASSIFICATION	1.9924647268648052E-4	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999732781709685	WITHOUT_CLASSIFICATION	2.6721829031498787E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999347327705	WITHOUT_CLASSIFICATION	6.526722952914076E-8	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999996354598157	WITHOUT_CLASSIFICATION	3.6454018430660714E-6	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999994341030832	WITHOUT_CLASSIFICATION	5.658969168612009E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999858416354445	WITHOUT_CLASSIFICATION	1.4158364555484747E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999944563486074	WITHOUT_CLASSIFICATION	5.543651392494796E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999129430052196	WITHOUT_CLASSIFICATION	8.705699478049019E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999129430052196	WITHOUT_CLASSIFICATION	8.705699478049019E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999400627550236	WITHOUT_CLASSIFICATION	5.9937244976384724E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999967844340988	WITHOUT_CLASSIFICATION	3.21556590125243E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999967844340988	WITHOUT_CLASSIFICATION	3.21556590125243E-6	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9981302697942479	WITHOUT_CLASSIFICATION	0.0018697302057520775	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999633449195923	WITHOUT_CLASSIFICATION	3.6655080407730815E-5	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999900920820932	WITHOUT_CLASSIFICATION	9.90791790669545E-6	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999899855262608	WITHOUT_CLASSIFICATION	1.0014473739143836E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999899855262608	WITHOUT_CLASSIFICATION	1.0014473739143836E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999960467972	WITHOUT_CLASSIFICATION	3.953202800351103E-9	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999436682588	WITHOUT_CLASSIFICATION	5.6331741048109616E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999436682588	WITHOUT_CLASSIFICATION	5.6331741048109616E-8	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9985362166653677	WITHOUT_CLASSIFICATION	0.0014637833346322197	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999991496622832	WITHOUT_CLASSIFICATION	8.503377167950864E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999975868370783	WITHOUT_CLASSIFICATION	2.4131629216360693E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.999993466821215	WITHOUT_CLASSIFICATION	6.5331787849897975E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999982361583897	WITHOUT_CLASSIFICATION	1.76384161033356E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999974809598314	WITHOUT_CLASSIFICATION	2.5190401684810456E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999998224299215	WITHOUT_CLASSIFICATION	1.7757007850218628E-6	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999985253675767	WITHOUT_CLASSIFICATION	1.4746324231989642E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9936136260603341	WITHOUT_CLASSIFICATION	0.006386373939665886	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999948582503541	WITHOUT_CLASSIFICATION	5.141749646034617E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999972191439498	WITHOUT_CLASSIFICATION	2.78085605013997E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999952247300439	WITHOUT_CLASSIFICATION	4.775269956189215E-6	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999995730741894	WITHOUT_CLASSIFICATION	4.269258105148021E-7	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999978892616121	WITHOUT_CLASSIFICATION	2.110738387874414E-6	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9988224059558581	WITHOUT_CLASSIFICATION	0.00117759404414193	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999952247300439	WITHOUT_CLASSIFICATION	4.775269956189215E-6	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999986022506336	WITHOUT_CLASSIFICATION	1.3977493663943125E-5	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999979744864981	WITHOUT_CLASSIFICATION	2.025513501995733E-6	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999997972172525	WITHOUT_CLASSIFICATION	2.0278274750535614E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999981304560671	WITHOUT_CLASSIFICATION	1.8695439328610763E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999971243810113	WITHOUT_CLASSIFICATION	2.8756189886705764E-6	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999995744488094	WITHOUT_CLASSIFICATION	4.2555119054519643E-7	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999980731107933	WITHOUT_CLASSIFICATION	1.9268892066873657E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999982947792918	WITHOUT_CLASSIFICATION	1.7052207082534515E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992428775564	WITHOUT_CLASSIFICATION	7.571224436735895E-7	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999976942528426	WITHOUT_CLASSIFICATION	2.305747157373958E-6	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999999135636788	WITHOUT_CLASSIFICATION	8.643632122251595E-8	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999986495048865	WITHOUT_CLASSIFICATION	1.3504951135531671E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999948417636925	WITHOUT_CLASSIFICATION	5.158236307548347E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.999998224299215	WITHOUT_CLASSIFICATION	1.7757007850218628E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992428775564	WITHOUT_CLASSIFICATION	7.571224436735895E-7	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999999135636788	WITHOUT_CLASSIFICATION	8.643632122251595E-8	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999948417636925	WITHOUT_CLASSIFICATION	5.158236307548347E-6	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999994767606321	WITHOUT_CLASSIFICATION	5.2323936789296265E-6	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999839665331821	WITHOUT_CLASSIFICATION	1.6033466817925085E-5	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999992000741666	WITHOUT_CLASSIFICATION	7.999258333494141E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985449355024	WITHOUT_CLASSIFICATION	1.4550644975544984E-6	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999995051778338	WITHOUT_CLASSIFICATION	4.948221661947416E-7	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999496798502489	WITHOUT_CLASSIFICATION	5.03201497511087E-5	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9992330195133723	WITHOUT_CLASSIFICATION	7.669804866276191E-4	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9998019939971005	WITHOUT_CLASSIFICATION	1.9800600289957717E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999984261800001	WITHOUT_CLASSIFICATION	1.5738199998479072E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999998764082	WITHOUT_CLASSIFICATION	1.235917939426613E-9	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999957003794981	WITHOUT_CLASSIFICATION	4.299620501917211E-6	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999999153885865	WITHOUT_CLASSIFICATION	8.461141353995707E-8	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999983271053	WITHOUT_CLASSIFICATION	1.6728948321678427E-9	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999995087614534	WITHOUT_CLASSIFICATION	4.912385466354085E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.999997919484977	WITHOUT_CLASSIFICATION	2.0805150230531295E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999947714711768	WITHOUT_CLASSIFICATION	5.228528823199815E-6	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.999990346692428	WITHOUT_CLASSIFICATION	9.653307571988632E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999996765522519	WITHOUT_CLASSIFICATION	3.234477482157043E-7	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999991565971713	WITHOUT_CLASSIFICATION	8.434028286884126E-7	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999992428775564	WITHOUT_CLASSIFICATION	7.571224436735895E-7	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999711447547901	WITHOUT_CLASSIFICATION	2.885524520988856E-5	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999389716506706	WITHOUT_CLASSIFICATION	6.1028349329497924E-5	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999982154384791	WITHOUT_CLASSIFICATION	1.7845615208431552E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999714166362612	WITHOUT_CLASSIFICATION	2.858336373870289E-5	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999997532601163	WITHOUT_CLASSIFICATION	2.4673988368750165E-7	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999815403621011	WITHOUT_CLASSIFICATION	1.8459637898960797E-5	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999914519928378	WITHOUT_CLASSIFICATION	8.548007162134828E-6	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999512601795	WITHOUT_CLASSIFICATION	4.873982048989141E-8	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999969213133322	WITHOUT_CLASSIFICATION	3.0786866677417534E-6	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999930279399026	WITHOUT_CLASSIFICATION	6.972060097297018E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999985926770296	WITHOUT_CLASSIFICATION	1.4073229702799289E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999994071086584	WITHOUT_CLASSIFICATION	5.928913416194929E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9999914388630475	WITHOUT_CLASSIFICATION	8.561136952504231E-6	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999970014172803	WITHOUT_CLASSIFICATION	2.998582719715004E-5	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999989942838652	WITHOUT_CLASSIFICATION	1.0057161348942292E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999233504993601	WITHOUT_CLASSIFICATION	7.664950063993563E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999861449849041	WITHOUT_CLASSIFICATION	1.3855015095951094E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999952860812619	WITHOUT_CLASSIFICATION	4.71391873813126E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999992541537088	WITHOUT_CLASSIFICATION	7.458462912232017E-7	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9997105003167585	WITHOUT_CLASSIFICATION	2.894996832415391E-4	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999983144112	WITHOUT_CLASSIFICATION	1.6855887100383942E-9	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9994404513158714	WITHOUT_CLASSIFICATION	5.595486841286331E-4	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9979881533344117	WITHOUT_CLASSIFICATION	0.0020118466655883955	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999600508470403	WITHOUT_CLASSIFICATION	3.9949152959636066E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999484923521424	WITHOUT_CLASSIFICATION	5.15076478576011E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999484923521424	WITHOUT_CLASSIFICATION	5.15076478576011E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998438159921431	WITHOUT_CLASSIFICATION	1.5618400785689064E-4	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999684300621045	WITHOUT_CLASSIFICATION	3.156993789545221E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999972045423066	WITHOUT_CLASSIFICATION	2.795457693545511E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999941298460037	WITHOUT_CLASSIFICATION	5.870153996330704E-6	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999929065928531	WITHOUT_CLASSIFICATION	7.093407146949267E-6	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9999701556935366	WITHOUT_CLASSIFICATION	2.9844306463287287E-5	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999292729994685	WITHOUT_CLASSIFICATION	7.072700053137284E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9997859954021194	WITHOUT_CLASSIFICATION	2.1400459788043264E-4	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999990066757053	WITHOUT_CLASSIFICATION	9.933242947753214E-7	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999980791474617	WITHOUT_CLASSIFICATION	1.9208525383060683E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.999784546333867	WITHOUT_CLASSIFICATION	2.1545366613298612E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999551550737933	WITHOUT_CLASSIFICATION	4.4844926206675686E-5	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.999698203523199	WITHOUT_CLASSIFICATION	3.0179647680091235E-4	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9995863284401889	WITHOUT_CLASSIFICATION	4.13671559811025E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999836089976479	WITHOUT_CLASSIFICATION	1.6391002352008883E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998852923159831	WITHOUT_CLASSIFICATION	1.147076840169652E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9990281138942706	WITHOUT_CLASSIFICATION	9.71886105729346E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999921803179697	WITHOUT_CLASSIFICATION	7.819682030344997E-6	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.970803867042181	WITHOUT_CLASSIFICATION	0.029196132957818973	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9996850172077859	WITHOUT_CLASSIFICATION	3.149827922141755E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999971639244866	WITHOUT_CLASSIFICATION	2.836075513462686E-6	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999971639244866	WITHOUT_CLASSIFICATION	2.836075513462686E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999981973767013	WITHOUT_CLASSIFICATION	1.8026232987659957E-6	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999981973767013	WITHOUT_CLASSIFICATION	1.8026232987659957E-6	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9979881533344117	WITHOUT_CLASSIFICATION	0.0020118466655883955	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999964974539577	WITHOUT_CLASSIFICATION	3.5025460423159775E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9892630916242413	WITHOUT_CLASSIFICATION	0.010736908375758686	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999885880319197	WITHOUT_CLASSIFICATION	1.141196808031961E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999881857764969	WITHOUT_CLASSIFICATION	1.1814223503111777E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9892630916242413	WITHOUT_CLASSIFICATION	0.010736908375758686	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999885880319197	WITHOUT_CLASSIFICATION	1.141196808031961E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999961042724488	WITHOUT_CLASSIFICATION	3.895727551205219E-5	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9987626185351371	WITHOUT_CLASSIFICATION	0.001237381464862931	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.999985127592466	WITHOUT_CLASSIFICATION	1.4872407533979917E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.999999737677717	WITHOUT_CLASSIFICATION	2.6232228304872176E-7	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9966528994804643	WITHOUT_CLASSIFICATION	0.0033471005195356697	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.6747632142595127	WITHOUT_CLASSIFICATION	0.3252367857404874	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999969323899032	WITHOUT_CLASSIFICATION	3.067610096801985E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999748935905954	WITHOUT_CLASSIFICATION	2.5106409404580915E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9997361507336932	WITHOUT_CLASSIFICATION	2.6384926630679804E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.999999982383135	WITHOUT_CLASSIFICATION	1.7616865003075178E-8	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999996916385941	WITHOUT_CLASSIFICATION	3.083614059087814E-6	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999829199784668	WITHOUT_CLASSIFICATION	1.7080021533221613E-5	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999999835401195	WITHOUT_CLASSIFICATION	1.6459880528412264E-8	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999988082428579	WITHOUT_CLASSIFICATION	1.191757142090436E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999881857764969	WITHOUT_CLASSIFICATION	1.1814223503111777E-4	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999807791897537	WITHOUT_CLASSIFICATION	1.9220810246265083E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999995543003557	WITHOUT_CLASSIFICATION	4.456996442573785E-7	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999995543003557	WITHOUT_CLASSIFICATION	4.456996442573785E-7	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999968026805253	WITHOUT_CLASSIFICATION	3.1973194748542454E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999961042724488	WITHOUT_CLASSIFICATION	3.895727551205219E-5	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997163623256284	WITHOUT_CLASSIFICATION	2.836376743716276E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.6223295274324252	DESIGN	0.37767047256757474	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9945977960502755	WITHOUT_CLASSIFICATION	0.005402203949724552	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999516409457809	WITHOUT_CLASSIFICATION	4.835905421916036E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.5797039911540973	DESIGN	0.4202960088459027	WITHOUT_CLASSIFICATION
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999961042724488	WITHOUT_CLASSIFICATION	3.895727551205219E-5	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999516409457809	WITHOUT_CLASSIFICATION	4.835905421916036E-5	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.5797039911540973	DESIGN	0.4202960088459027	WITHOUT_CLASSIFICATION
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9986361421244413	WITHOUT_CLASSIFICATION	0.0013638578755586397	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999998942643948	WITHOUT_CLASSIFICATION	1.0573560514746344E-7	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.999985654093851	WITHOUT_CLASSIFICATION	1.4345906148978122E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999961042724488	WITHOUT_CLASSIFICATION	3.895727551205219E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.999961042724488	WITHOUT_CLASSIFICATION	3.895727551205219E-5	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.999995623220455	WITHOUT_CLASSIFICATION	4.376779544941783E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999937043526557	WITHOUT_CLASSIFICATION	6.295647344353053E-6	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999958887024095	WITHOUT_CLASSIFICATION	4.111297590506841E-6	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999757868070149	WITHOUT_CLASSIFICATION	2.4213192985105242E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999991766327239	WITHOUT_CLASSIFICATION	8.233672760093173E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999954511197282	WITHOUT_CLASSIFICATION	4.5488802717718815E-6	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999998326945411	WITHOUT_CLASSIFICATION	1.6730545890650688E-7	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999909449962058	WITHOUT_CLASSIFICATION	9.055003794194919E-6	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999594159161664	WITHOUT_CLASSIFICATION	4.058408383365704E-5	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999947377062703	WITHOUT_CLASSIFICATION	5.262293729646697E-6	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.999973849445068	WITHOUT_CLASSIFICATION	2.615055493209554E-5	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999738833978952	WITHOUT_CLASSIFICATION	2.6116602104717764E-5	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999023568673195	WITHOUT_CLASSIFICATION	9.764313268052184E-5	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9990204386217597	WITHOUT_CLASSIFICATION	9.795613782402146E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994737558217	WITHOUT_CLASSIFICATION	5.26244178254547E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9977164307842796	WITHOUT_CLASSIFICATION	0.0022835692157205088	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997000169889354	WITHOUT_CLASSIFICATION	2.9998301106452525E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9999465387449015	WITHOUT_CLASSIFICATION	5.3461255098612266E-5	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9963872913442041	WITHOUT_CLASSIFICATION	0.003612708655795795	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999628857771025	WITHOUT_CLASSIFICATION	3.711422289753051E-5	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999239092315299	WITHOUT_CLASSIFICATION	7.609076847016962E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9995203114784249	WITHOUT_CLASSIFICATION	4.7968852157515425E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9995203114784249	WITHOUT_CLASSIFICATION	4.7968852157515425E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997000169889354	WITHOUT_CLASSIFICATION	2.9998301106452525E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999972350753751	WITHOUT_CLASSIFICATION	2.764924624967926E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9969223050059951	WITHOUT_CLASSIFICATION	0.003077694994004783	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9185802163669153	DESIGN	0.08141978363308468	WITHOUT_CLASSIFICATION
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999993485109047	WITHOUT_CLASSIFICATION	6.51489095310529E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999961077818452	WITHOUT_CLASSIFICATION	3.89221815481013E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998305692779	WITHOUT_CLASSIFICATION	1.6943072212500563E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998716951673721	WITHOUT_CLASSIFICATION	1.2830483262790538E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999954800436176	WITHOUT_CLASSIFICATION	4.519956382376912E-6	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999990556260601	WITHOUT_CLASSIFICATION	9.443739398872309E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999983457154686	WITHOUT_CLASSIFICATION	1.6542845313307362E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999865742458977	WITHOUT_CLASSIFICATION	1.3425754102368638E-5	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999886998976754	WITHOUT_CLASSIFICATION	1.1300102324567742E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999500207600286	WITHOUT_CLASSIFICATION	4.9979239971486974E-5	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999997231507897	WITHOUT_CLASSIFICATION	2.7684921032042726E-7	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997232860173	WITHOUT_CLASSIFICATION	2.76713982827498E-7	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999453877789303	WITHOUT_CLASSIFICATION	5.461222106970246E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999823836809607	WITHOUT_CLASSIFICATION	1.7616319039229787E-5	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.999962534016858	WITHOUT_CLASSIFICATION	3.74659831420759E-5	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999988127356634	WITHOUT_CLASSIFICATION	1.187264336594342E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999951224678631	WITHOUT_CLASSIFICATION	4.877532136903903E-5	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9961951616739868	WITHOUT_CLASSIFICATION	0.0038048383260132664	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9195043057789187	WITHOUT_CLASSIFICATION	0.08049569422108127	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997820109445793	WITHOUT_CLASSIFICATION	2.1798905542063567E-4	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9949485113574288	WITHOUT_CLASSIFICATION	0.0050514886425712	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999775419504279	WITHOUT_CLASSIFICATION	2.245804957213435E-5	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995244454041	WITHOUT_CLASSIFICATION	4.755545958995054E-6	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999112832325496	WITHOUT_CLASSIFICATION	8.871676745034966E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734632263897	WITHOUT_CLASSIFICATION	2.653677361033128E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999489019292345	WITHOUT_CLASSIFICATION	5.109807076557374E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998783426330854	WITHOUT_CLASSIFICATION	1.2165736691455643E-4	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9975025811267925	WITHOUT_CLASSIFICATION	0.0024974188732075674	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.7673275414260343	WITHOUT_CLASSIFICATION	0.23267245857396568	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965197512248	WITHOUT_CLASSIFICATION	3.480248775123786E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996913085973373	WITHOUT_CLASSIFICATION	3.0869140266276483E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956828936873	WITHOUT_CLASSIFICATION	4.317106312644424E-6	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999404922888411	WITHOUT_CLASSIFICATION	5.950771115895648E-5	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999985798328343	WITHOUT_CLASSIFICATION	1.4201671656965624E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998151229084364	WITHOUT_CLASSIFICATION	1.8487709156352758E-4	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999745387546246	WITHOUT_CLASSIFICATION	2.5461245375312553E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819331365412	WITHOUT_CLASSIFICATION	1.80668634587925E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9997610454455241	WITHOUT_CLASSIFICATION	2.3895455447588845E-4	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994229267454438	WITHOUT_CLASSIFICATION	5.770732545562159E-4	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.7047804274670557	WITHOUT_CLASSIFICATION	0.29521957253294423	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995523020320867	WITHOUT_CLASSIFICATION	4.476979679133574E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9995581410320548	WITHOUT_CLASSIFICATION	4.418589679451508E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999969170753296	WITHOUT_CLASSIFICATION	3.08292467039332E-6	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999768173673668	WITHOUT_CLASSIFICATION	2.318263263317908E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999974285949655	WITHOUT_CLASSIFICATION	2.5714050344690715E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.9353835894508472	WITHOUT_CLASSIFICATION	0.06461641054915286	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999994331810852	WITHOUT_CLASSIFICATION	5.668189147684607E-7	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999993231118909	WITHOUT_CLASSIFICATION	6.76888109140991E-7	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999979521867663	WITHOUT_CLASSIFICATION	2.047813233689953E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999996082334941	WITHOUT_CLASSIFICATION	3.917665059262396E-7	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999995198471687	WITHOUT_CLASSIFICATION	4.801528312304089E-7	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.999868595237306	WITHOUT_CLASSIFICATION	1.3140476269398005E-4	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.999992894147392	WITHOUT_CLASSIFICATION	7.105852607918814E-6	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.999902149887117	WITHOUT_CLASSIFICATION	9.785011288308961E-5	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999923569215783	WITHOUT_CLASSIFICATION	7.643078421810781E-6	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999817525833514	WITHOUT_CLASSIFICATION	1.824741664864727E-5	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903649467705	WITHOUT_CLASSIFICATION	9.635053229535166E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972431236973	WITHOUT_CLASSIFICATION	2.756876302581546E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999535751677587	WITHOUT_CLASSIFICATION	4.642483224124408E-5	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974364424651	WITHOUT_CLASSIFICATION	2.5635575348461167E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9999887981852907	WITHOUT_CLASSIFICATION	1.120181470930103E-5	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999922380462292	WITHOUT_CLASSIFICATION	7.76195377081091E-6	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999995323567149	WITHOUT_CLASSIFICATION	4.6764328515946997E-7	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999597855168938	WITHOUT_CLASSIFICATION	4.021448310628918E-5	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979447719015	WITHOUT_CLASSIFICATION	2.05522809854349E-6	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998593906655183	WITHOUT_CLASSIFICATION	1.4060933448163898E-4	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999888666538395	WITHOUT_CLASSIFICATION	1.1133346160500776E-4	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999762425666295	WITHOUT_CLASSIFICATION	2.3757433370389867E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999964721455543	WITHOUT_CLASSIFICATION	3.5278544456407033E-6	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999733721703783	WITHOUT_CLASSIFICATION	2.6627829621754196E-5	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999860107871755	WITHOUT_CLASSIFICATION	1.3989212824504254E-5	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.978558898186931	WITHOUT_CLASSIFICATION	0.02144110181306906	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9995563936330321	WITHOUT_CLASSIFICATION	4.436063669678983E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999969170753296	WITHOUT_CLASSIFICATION	3.08292467039332E-6	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9934322603438389	WITHOUT_CLASSIFICATION	0.0065677396561610694	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999995225670275	WITHOUT_CLASSIFICATION	4.774329724260621E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999998254372229	WITHOUT_CLASSIFICATION	1.7456277709451602E-7	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9996648237583927	WITHOUT_CLASSIFICATION	3.3517624160725934E-4	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999987030213636	WITHOUT_CLASSIFICATION	1.2969786364463885E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999991223550438	WITHOUT_CLASSIFICATION	8.776449561733581E-7	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9999725117371661	WITHOUT_CLASSIFICATION	2.7488262834002438E-5	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.997190304933728	WITHOUT_CLASSIFICATION	0.002809695066272073	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999147337353037	WITHOUT_CLASSIFICATION	8.526626469628046E-5	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992189445575	WITHOUT_CLASSIFICATION	7.810554425275311E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999925954532388	WITHOUT_CLASSIFICATION	7.40454676120341E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999982524094502	WITHOUT_CLASSIFICATION	1.7475905498021526E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996602772427	WITHOUT_CLASSIFICATION	3.397227572369895E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9997789290778861	WITHOUT_CLASSIFICATION	2.210709221138415E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999625185941678	WITHOUT_CLASSIFICATION	3.748140583218748E-5	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999148491349921	WITHOUT_CLASSIFICATION	8.515086500792756E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9995666852586412	WITHOUT_CLASSIFICATION	4.3331474135872627E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9992468435213945	WITHOUT_CLASSIFICATION	7.531564786054418E-4	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999901219233094	WITHOUT_CLASSIFICATION	9.878076690674992E-6	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.9999906383895241	WITHOUT_CLASSIFICATION	9.361610475879411E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999802562974246	WITHOUT_CLASSIFICATION	1.9743702575386914E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9969339163928731	WITHOUT_CLASSIFICATION	0.0030660836071269935	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9997904063965962	WITHOUT_CLASSIFICATION	2.0959360340380817E-4	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999435986305103	WITHOUT_CLASSIFICATION	5.640136948970235E-5	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.991118126145219	WITHOUT_CLASSIFICATION	0.00888187385478095	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999889640219	WITHOUT_CLASSIFICATION	1.10359782333307E-8	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9971799544318053	WITHOUT_CLASSIFICATION	0.0028200455681947636	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999987954171173	WITHOUT_CLASSIFICATION	1.204582882623555E-6	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999991105868664	WITHOUT_CLASSIFICATION	8.894131336141333E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998790048071104	WITHOUT_CLASSIFICATION	1.2099519288958491E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999969170753296	WITHOUT_CLASSIFICATION	3.08292467039332E-6	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9923476362492982	WITHOUT_CLASSIFICATION	0.007652363750701715	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999985717118873	WITHOUT_CLASSIFICATION	1.4282881126726236E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997718807293389	WITHOUT_CLASSIFICATION	2.2811927066106083E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999969170753296	WITHOUT_CLASSIFICATION	3.08292467039332E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993734153972	WITHOUT_CLASSIFICATION	6.265846027041381E-7	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999802562974246	WITHOUT_CLASSIFICATION	1.9743702575386914E-5	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.99873109290238	WITHOUT_CLASSIFICATION	0.0012689070976199708	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9998883471054737	WITHOUT_CLASSIFICATION	1.1165289452627711E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9575575220811775	DESIGN	0.042442477918822545	WITHOUT_CLASSIFICATION
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999992189445575	WITHOUT_CLASSIFICATION	7.810554425275311E-7	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999925954532388	WITHOUT_CLASSIFICATION	7.40454676120341E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999982524094502	WITHOUT_CLASSIFICATION	1.7475905498021526E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999370454935	WITHOUT_CLASSIFICATION	6.295450649530967E-8	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999929176219652	WITHOUT_CLASSIFICATION	7.082378034857939E-6	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999994308470183	WITHOUT_CLASSIFICATION	5.691529818142125E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999968891200699	WITHOUT_CLASSIFICATION	3.1108799301601815E-6	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999689780905316	WITHOUT_CLASSIFICATION	3.102190946838572E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999969170753296	WITHOUT_CLASSIFICATION	3.08292467039332E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996602772427	WITHOUT_CLASSIFICATION	3.397227572369895E-7	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9997789290778861	WITHOUT_CLASSIFICATION	2.210709221138415E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999982041105095	WITHOUT_CLASSIFICATION	1.795889490527425E-6	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925689309214	WITHOUT_CLASSIFICATION	7.431069078569222E-6	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.999995176007964	WITHOUT_CLASSIFICATION	4.82399203612255E-6	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999991779815061	WITHOUT_CLASSIFICATION	8.220184940572855E-7	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999473032903708	WITHOUT_CLASSIFICATION	5.269670962924632E-5	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9999935422291404	WITHOUT_CLASSIFICATION	6.457770859524966E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999819331365412	WITHOUT_CLASSIFICATION	1.80668634587925E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9947205472670135	WITHOUT_CLASSIFICATION	0.005279452732986462	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9967143561620723	WITHOUT_CLASSIFICATION	0.0032856438379277927	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9999497409507602	WITHOUT_CLASSIFICATION	5.0259049239813616E-5	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999961210400914	WITHOUT_CLASSIFICATION	3.878959908623876E-6	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999441519907	WITHOUT_CLASSIFICATION	5.584800929715118E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999112832325496	WITHOUT_CLASSIFICATION	8.871676745034966E-5	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999734632263897	WITHOUT_CLASSIFICATION	2.653677361033128E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996913085973373	WITHOUT_CLASSIFICATION	3.0869140266276483E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999441519907	WITHOUT_CLASSIFICATION	5.584800929715118E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998068261993514	WITHOUT_CLASSIFICATION	1.9317380064869032E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999559304317556	WITHOUT_CLASSIFICATION	4.406956824454222E-5	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994631717766987	WITHOUT_CLASSIFICATION	5.368282233013142E-4	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999707915073691	WITHOUT_CLASSIFICATION	2.9208492630913835E-4	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9986669335798984	WITHOUT_CLASSIFICATION	0.0013330664201016507	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9999163983037298	WITHOUT_CLASSIFICATION	8.360169627013557E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999956828936873	WITHOUT_CLASSIFICATION	4.317106312644424E-6	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998151229084364	WITHOUT_CLASSIFICATION	1.8487709156352758E-4	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999964721455543	WITHOUT_CLASSIFICATION	3.5278544456407033E-6	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999149955545856	WITHOUT_CLASSIFICATION	8.50044454143726E-5	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9996867340194917	WITHOUT_CLASSIFICATION	3.1326598050832884E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999996876620804	WITHOUT_CLASSIFICATION	3.123379196269427E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999950370117041	WITHOUT_CLASSIFICATION	4.962988295866017E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999985799660281	WITHOUT_CLASSIFICATION	1.4200339717978242E-6	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999868456535154	WITHOUT_CLASSIFICATION	1.3154346484726787E-5	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999450607910464	WITHOUT_CLASSIFICATION	5.493920895359095E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999990556260601	WITHOUT_CLASSIFICATION	9.443739398872309E-7	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999997439075132	WITHOUT_CLASSIFICATION	2.5609248676924385E-7	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999979167761869	WITHOUT_CLASSIFICATION	2.0832238131282676E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.999982367558925	WITHOUT_CLASSIFICATION	1.7632441075024804E-5	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998885452183905	WITHOUT_CLASSIFICATION	1.1145478160942084E-4	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999900265682957	WITHOUT_CLASSIFICATION	9.97343170419414E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.99990313052775	WITHOUT_CLASSIFICATION	9.68694722498827E-5	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999856599424324	WITHOUT_CLASSIFICATION	1.4340057567696507E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886549027286	WITHOUT_CLASSIFICATION	1.134509727149522E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999921356253876	WITHOUT_CLASSIFICATION	7.864374612521487E-6	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999178629224258	WITHOUT_CLASSIFICATION	8.213707757418302E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999379892619671	WITHOUT_CLASSIFICATION	6.201073803288524E-5	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999984000041603	WITHOUT_CLASSIFICATION	1.599995839774828E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999972938956844	WITHOUT_CLASSIFICATION	2.7061043156600126E-6	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999973287790052	WITHOUT_CLASSIFICATION	2.6712209948493056E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996903584258	WITHOUT_CLASSIFICATION	3.0964157412654556E-7	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999867059434538	WITHOUT_CLASSIFICATION	1.3294056546245625E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998861151586534	WITHOUT_CLASSIFICATION	1.1388484134661658E-4	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988963705057	WITHOUT_CLASSIFICATION	1.103629494425916E-6	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9993873102137351	WITHOUT_CLASSIFICATION	6.126897862648321E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995839838546037	WITHOUT_CLASSIFICATION	4.1601614539631994E-4	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999778020138091	WITHOUT_CLASSIFICATION	2.2197986190918002E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994571703193167	WITHOUT_CLASSIFICATION	5.428296806833343E-4	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999157110440319	WITHOUT_CLASSIFICATION	8.428895596820055E-5	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999987086489652	WITHOUT_CLASSIFICATION	1.291351034766285E-6	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999959660594949	WITHOUT_CLASSIFICATION	4.033940505082389E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999950319268716	WITHOUT_CLASSIFICATION	4.9680731284320095E-6	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999957927173748	WITHOUT_CLASSIFICATION	4.2072826251070306E-6	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999976318695507	WITHOUT_CLASSIFICATION	2.368130449214587E-6	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999932728142371	WITHOUT_CLASSIFICATION	6.727185762793631E-6	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9870764667692186	WITHOUT_CLASSIFICATION	0.012923533230781397	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999185227874269	WITHOUT_CLASSIFICATION	8.147721257316134E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998193561759303	WITHOUT_CLASSIFICATION	1.8064382406969044E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997959471174138	WITHOUT_CLASSIFICATION	2.0405288258625132E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999975475672654	WITHOUT_CLASSIFICATION	2.4524327345148384E-6	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999987765028632	WITHOUT_CLASSIFICATION	1.2234971368684735E-6	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999796013718584	WITHOUT_CLASSIFICATION	2.039862814160743E-5	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9989057464210289	WITHOUT_CLASSIFICATION	0.0010942535789710852	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999356913311542	WITHOUT_CLASSIFICATION	6.430866884575345E-5	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999950599615394	WITHOUT_CLASSIFICATION	4.940038460678812E-6	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999886037452665	WITHOUT_CLASSIFICATION	1.1396254733551803E-5	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9997059245361435	WITHOUT_CLASSIFICATION	2.9407546385656447E-4	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999686639404717	WITHOUT_CLASSIFICATION	3.133605952841519E-5	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9762716547780148	WITHOUT_CLASSIFICATION	0.023728345221985137	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999265454821	WITHOUT_CLASSIFICATION	7.345451801884788E-8	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9995551533866044	WITHOUT_CLASSIFICATION	4.4484661339563164E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999896548535351	WITHOUT_CLASSIFICATION	1.0345146464888915E-5	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999921146921036	WITHOUT_CLASSIFICATION	7.885307896446511E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999998741084127	WITHOUT_CLASSIFICATION	1.2589158730241868E-6	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999995127921764	WITHOUT_CLASSIFICATION	4.872078236610002E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999991456114689	WITHOUT_CLASSIFICATION	8.543885310631788E-7	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999953445224703	WITHOUT_CLASSIFICATION	4.655477529617415E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999998973106348	WITHOUT_CLASSIFICATION	1.0268936514925007E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999983930992682	WITHOUT_CLASSIFICATION	1.6069007318285893E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999771789811	WITHOUT_CLASSIFICATION	2.2821018870282386E-8	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999644659076499	WITHOUT_CLASSIFICATION	3.553409235004564E-5	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999573471119001	WITHOUT_CLASSIFICATION	4.265288809980435E-5	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999939638565478	WITHOUT_CLASSIFICATION	6.036143452188828E-6	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999971727313013	WITHOUT_CLASSIFICATION	2.827268698805649E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.9999978488900833	WITHOUT_CLASSIFICATION	2.1511099167183615E-6	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999988692525186	WITHOUT_CLASSIFICATION	1.13074748138633E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9999954235610587	WITHOUT_CLASSIFICATION	4.576438941280345E-6	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999984110613123	WITHOUT_CLASSIFICATION	1.5889386877894548E-6	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9999848566050089	WITHOUT_CLASSIFICATION	1.5143394991116989E-5	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9982722541085036	WITHOUT_CLASSIFICATION	0.001727745891496277	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9997697079345083	WITHOUT_CLASSIFICATION	2.3029206549172806E-4	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9608719414469798	WITHOUT_CLASSIFICATION	0.03912805855302018	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999986349048532	WITHOUT_CLASSIFICATION	1.3650951467801483E-6	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9963161473324884	WITHOUT_CLASSIFICATION	0.0036838526675115058	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9997936727490566	WITHOUT_CLASSIFICATION	2.0632725094326038E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9993961180447359	WITHOUT_CLASSIFICATION	6.038819552640797E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999542271404097	WITHOUT_CLASSIFICATION	4.5772859590392005E-5	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999058288780492	WITHOUT_CLASSIFICATION	9.417112195076892E-5	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998271478570178	WITHOUT_CLASSIFICATION	1.728521429822999E-4	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.999999990424889	WITHOUT_CLASSIFICATION	9.575111060653044E-9	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998532644594768	WITHOUT_CLASSIFICATION	1.467355405232307E-4	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9999945203177415	WITHOUT_CLASSIFICATION	5.47968225853729E-6	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9997822535669088	WITHOUT_CLASSIFICATION	2.1774643309124193E-4	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9789060035531338	WITHOUT_CLASSIFICATION	0.02109399644686616	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999993810092087	WITHOUT_CLASSIFICATION	6.189907913399724E-7	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999800698187399	WITHOUT_CLASSIFICATION	1.993018126008766E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9999792630084964	WITHOUT_CLASSIFICATION	2.0736991503665527E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997484006217329	WITHOUT_CLASSIFICATION	2.5159937826703063E-4	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999141320678825	WITHOUT_CLASSIFICATION	8.586793211746723E-5	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999905382764341	WITHOUT_CLASSIFICATION	9.461723565940047E-6	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999805520175067	WITHOUT_CLASSIFICATION	1.9447982493288524E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995775094834385	WITHOUT_CLASSIFICATION	4.2249051656148985E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997498330678509	WITHOUT_CLASSIFICATION	2.5016693214910505E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9999863122373408	WITHOUT_CLASSIFICATION	1.36877626591913E-5	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999416892174126	WITHOUT_CLASSIFICATION	5.831078258746662E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999988376575788	WITHOUT_CLASSIFICATION	1.1623424212249924E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998599137724659	WITHOUT_CLASSIFICATION	1.4008622753420742E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9999913793777359	WITHOUT_CLASSIFICATION	8.620622264039611E-6	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999986744594177	WITHOUT_CLASSIFICATION	1.3255405822857008E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998599137724659	WITHOUT_CLASSIFICATION	1.4008622753420742E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999995723199959	WITHOUT_CLASSIFICATION	4.2768000401718534E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999999440678929	WITHOUT_CLASSIFICATION	5.593210703358197E-8	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9998999339587483	WITHOUT_CLASSIFICATION	1.0006604125164083E-4	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.994487147396195	WITHOUT_CLASSIFICATION	0.005512852603805029	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999992545492041	WITHOUT_CLASSIFICATION	7.454507958398664E-7	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.999999025453495	WITHOUT_CLASSIFICATION	9.745465050268386E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998825138734425	WITHOUT_CLASSIFICATION	1.1748612655746682E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999967737940404	WITHOUT_CLASSIFICATION	3.226205959598005E-6	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999849053493715	WITHOUT_CLASSIFICATION	1.5094650628489519E-5	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999978171045392	WITHOUT_CLASSIFICATION	2.182895460790754E-6	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.9999973284578564	WITHOUT_CLASSIFICATION	2.6715421435558246E-6	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999757729042904	WITHOUT_CLASSIFICATION	2.4227095709510643E-5	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9998618711061232	WITHOUT_CLASSIFICATION	1.3812889387684364E-4	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999891529398486	WITHOUT_CLASSIFICATION	1.0847060151438712E-5	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.99996794078506	WITHOUT_CLASSIFICATION	3.2059214940101923E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.999947578374215	WITHOUT_CLASSIFICATION	5.242162578499489E-5	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998842542739416	WITHOUT_CLASSIFICATION	1.1574572605844256E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998842542739416	WITHOUT_CLASSIFICATION	1.1574572605844256E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983464783392	WITHOUT_CLASSIFICATION	1.6535216607473271E-6	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999842954316138	WITHOUT_CLASSIFICATION	1.5704568386177985E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999991866738875	WITHOUT_CLASSIFICATION	8.133261123287736E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9998653089459567	WITHOUT_CLASSIFICATION	1.346910540432857E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999827367491412	WITHOUT_CLASSIFICATION	1.7263250858818914E-5	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9921590421385504	WITHOUT_CLASSIFICATION	0.007840957861449577	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9999978221465448	WITHOUT_CLASSIFICATION	2.177853455243641E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999927940832096	WITHOUT_CLASSIFICATION	7.205916790398717E-6	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999882722225869	WITHOUT_CLASSIFICATION	1.1727777413196368E-5	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9995523671529732	WITHOUT_CLASSIFICATION	4.476328470266861E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9965304118841775	WITHOUT_CLASSIFICATION	0.003469588115822525	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999832900729173	WITHOUT_CLASSIFICATION	1.670992708264754E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999322668486958	WITHOUT_CLASSIFICATION	6.773315130415238E-5	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999933531522881	WITHOUT_CLASSIFICATION	6.646847711905074E-6	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999975819912074	WITHOUT_CLASSIFICATION	2.4180087926335494E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.99990313052775	WITHOUT_CLASSIFICATION	9.68694722498827E-5	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999584207503551	WITHOUT_CLASSIFICATION	4.157924964476214E-5	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999883654852179	WITHOUT_CLASSIFICATION	1.1634514782063628E-5	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9998380845448491	WITHOUT_CLASSIFICATION	1.619154551509623E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999993734172264	WITHOUT_CLASSIFICATION	6.265827735503056E-7	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999997205831456	WITHOUT_CLASSIFICATION	2.7941685449542874E-7	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999941899117725	WITHOUT_CLASSIFICATION	5.8100882276208246E-6	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999971504938477	WITHOUT_CLASSIFICATION	2.8495061523047534E-6	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999993902239472	WITHOUT_CLASSIFICATION	6.097760527235651E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999967197995565	WITHOUT_CLASSIFICATION	3.2802004435913145E-6	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999954033261064	WITHOUT_CLASSIFICATION	4.5966738935930064E-5	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.999999785732136	WITHOUT_CLASSIFICATION	2.142678640101056E-7	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9998247273186256	WITHOUT_CLASSIFICATION	1.752726813743569E-4	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999894277464462	WITHOUT_CLASSIFICATION	1.0572253553832904E-5	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999987987675244	WITHOUT_CLASSIFICATION	1.201232475544909E-6	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999902189142246	WITHOUT_CLASSIFICATION	9.781085775490602E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999727913366491	WITHOUT_CLASSIFICATION	2.7208663350994866E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.999827798011936	WITHOUT_CLASSIFICATION	1.722019880640212E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998729003568323	WITHOUT_CLASSIFICATION	1.2709964316766188E-4	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999960125608907	WITHOUT_CLASSIFICATION	3.987439109439556E-6	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999913168898784	WITHOUT_CLASSIFICATION	8.68311012163863E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999921677254973	WITHOUT_CLASSIFICATION	7.832274502772134E-6	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999907371424649	WITHOUT_CLASSIFICATION	9.262857535065039E-6	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999963989759804	WITHOUT_CLASSIFICATION	3.6010240196033538E-6	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999997851716436	WITHOUT_CLASSIFICATION	2.1482835654160548E-7	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999902505598349	WITHOUT_CLASSIFICATION	9.749440165012584E-6	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999963679446442	WITHOUT_CLASSIFICATION	3.632055355821754E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999962811767358	WITHOUT_CLASSIFICATION	3.718823264138082E-6	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.999936957366199	WITHOUT_CLASSIFICATION	6.30426338009621E-5	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999800723162637	WITHOUT_CLASSIFICATION	1.9927683736216073E-5	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999915608337251	WITHOUT_CLASSIFICATION	8.439166274950951E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999876342787847	WITHOUT_CLASSIFICATION	1.2365721215246486E-5	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999930712877917	WITHOUT_CLASSIFICATION	6.928712208270479E-6	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999061523803	WITHOUT_CLASSIFICATION	9.384761969399142E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9920991762346428	WITHOUT_CLASSIFICATION	0.00790082376535725	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.99998500904619	WITHOUT_CLASSIFICATION	1.499095380993003E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999980917814871	WITHOUT_CLASSIFICATION	1.9082185127626757E-6	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9740335113022144	WITHOUT_CLASSIFICATION	0.025966488697785572	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999566305722791	WITHOUT_CLASSIFICATION	4.336942772095056E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899808562717	WITHOUT_CLASSIFICATION	1.0019143728403806E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999566305722791	WITHOUT_CLASSIFICATION	4.336942772095056E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999994426566374	WITHOUT_CLASSIFICATION	5.5734336244884E-7	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999994924858234	WITHOUT_CLASSIFICATION	5.075141765672099E-7	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.999845512771767	WITHOUT_CLASSIFICATION	1.5448722823293526E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999829044697252	WITHOUT_CLASSIFICATION	1.7095530274791867E-4	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999969032876821	WITHOUT_CLASSIFICATION	3.0967123180384764E-6	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999734382880616	WITHOUT_CLASSIFICATION	2.6561711938311644E-5	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999770366585562	WITHOUT_CLASSIFICATION	2.296334144382335E-5	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.9999337923003675	WITHOUT_CLASSIFICATION	6.620769963257663E-5	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999998634061611	WITHOUT_CLASSIFICATION	1.365938389324997E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999889119330202	WITHOUT_CLASSIFICATION	1.1088066979690977E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999945596730765	WITHOUT_CLASSIFICATION	5.440326923516018E-6	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.98760987638602	WITHOUT_CLASSIFICATION	0.012390123613979908	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.999919803724197	WITHOUT_CLASSIFICATION	8.019627580300969E-5	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9966611633194782	WITHOUT_CLASSIFICATION	0.003338836680521901	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.8810292959050038	WITHOUT_CLASSIFICATION	0.1189707040949961	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9986246659624792	WITHOUT_CLASSIFICATION	0.0013753340375207868	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999976358246767	WITHOUT_CLASSIFICATION	2.3641753233721385E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999976358246767	WITHOUT_CLASSIFICATION	2.3641753233721385E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9998784687909638	WITHOUT_CLASSIFICATION	1.2153120903617498E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.999934318139122	WITHOUT_CLASSIFICATION	6.568186087791801E-5	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999968871841547	WITHOUT_CLASSIFICATION	3.11281584534248E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999810640965888	WITHOUT_CLASSIFICATION	1.8935903411142597E-5	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9998944228884856	WITHOUT_CLASSIFICATION	1.0557711151443858E-4	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999677922286672	WITHOUT_CLASSIFICATION	3.2207771332837654E-5	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9998676699144884	WITHOUT_CLASSIFICATION	1.3233008551156807E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999328220189801	WITHOUT_CLASSIFICATION	6.71779810198238E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999996684328404	WITHOUT_CLASSIFICATION	3.315671595415367E-7	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999971838160444	WITHOUT_CLASSIFICATION	2.8161839555667774E-6	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999959663651614	WITHOUT_CLASSIFICATION	4.033634838648657E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999988750817418	WITHOUT_CLASSIFICATION	1.1249182581644192E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999858488465332	WITHOUT_CLASSIFICATION	1.4151153466910198E-5	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999979539674839	WITHOUT_CLASSIFICATION	2.0460325160594755E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998253368652446	WITHOUT_CLASSIFICATION	1.7466313475556584E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999949575843577	WITHOUT_CLASSIFICATION	5.042415642272617E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999969893081398	WITHOUT_CLASSIFICATION	3.0106918602963573E-6	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9848022945023027	WITHOUT_CLASSIFICATION	0.015197705497697318	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999916003233745	WITHOUT_CLASSIFICATION	8.39967662547248E-6	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999996945463859	WITHOUT_CLASSIFICATION	3.054536140710801E-7	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999999224679601	WITHOUT_CLASSIFICATION	7.753203984886774E-8	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999843951672004	WITHOUT_CLASSIFICATION	1.5604832799622732E-5	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999992796182721	WITHOUT_CLASSIFICATION	7.203817279057856E-7	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999994058069315	WITHOUT_CLASSIFICATION	5.941930684870352E-7	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999976123447947	WITHOUT_CLASSIFICATION	2.3876552053029223E-6	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.99999940582488	WITHOUT_CLASSIFICATION	5.941751199809811E-7	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999022976613312	WITHOUT_CLASSIFICATION	9.770233866885928E-5	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9988892474223384	WITHOUT_CLASSIFICATION	0.001110752577661584	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999950767615188	WITHOUT_CLASSIFICATION	4.9232384812826285E-6	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.999997789684743	WITHOUT_CLASSIFICATION	2.210315256992114E-6	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9943505363711476	WITHOUT_CLASSIFICATION	0.005649463628852463	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999703982817051	WITHOUT_CLASSIFICATION	2.960171829489006E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998229966176888	WITHOUT_CLASSIFICATION	1.770033823112714E-4	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999588442287132	WITHOUT_CLASSIFICATION	4.1155771286821155E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9986671908462283	WITHOUT_CLASSIFICATION	0.001332809153771667	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999971282192949	WITHOUT_CLASSIFICATION	2.8717807051758732E-6	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999875096562467	WITHOUT_CLASSIFICATION	1.2490343753181938E-5	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9999878560660544	WITHOUT_CLASSIFICATION	1.2143933945470318E-5	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999404752748171	WITHOUT_CLASSIFICATION	5.952472518296107E-5	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999964702640832	WITHOUT_CLASSIFICATION	3.5297359167911687E-6	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998979033924	WITHOUT_CLASSIFICATION	1.0209660760989527E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999893792211814	WITHOUT_CLASSIFICATION	1.0620778818744154E-5	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9999974490629637	WITHOUT_CLASSIFICATION	2.5509370361858607E-6	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9996714750224581	WITHOUT_CLASSIFICATION	3.285249775419282E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999945106256	WITHOUT_CLASSIFICATION	5.489374451880207E-9	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.999292704269324	WITHOUT_CLASSIFICATION	7.072957306760722E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9013319153615852	WITHOUT_CLASSIFICATION	0.09866808463841484	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999859270459	WITHOUT_CLASSIFICATION	1.407295418027203E-8	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999999501253113	WITHOUT_CLASSIFICATION	4.98746886134054E-8	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9998902424648197	WITHOUT_CLASSIFICATION	1.0975753518027688E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981810320909	WITHOUT_CLASSIFICATION	1.8189679090942365E-6	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999992382980296	WITHOUT_CLASSIFICATION	7.617019703030243E-7	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999665272477197	WITHOUT_CLASSIFICATION	3.3472752280159276E-5	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999864834638972	WITHOUT_CLASSIFICATION	1.3516536102788627E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999776855943738	WITHOUT_CLASSIFICATION	2.2314405626095453E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993734153972	WITHOUT_CLASSIFICATION	6.265846027041381E-7	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999993734153972	WITHOUT_CLASSIFICATION	6.265846027041381E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999992183219167	WITHOUT_CLASSIFICATION	7.816780833184726E-7	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999985130061513	WITHOUT_CLASSIFICATION	1.4869938486639502E-6	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997371532937914	WITHOUT_CLASSIFICATION	2.628467062086074E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9995451080611789	WITHOUT_CLASSIFICATION	4.5489193882116845E-4	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999987611907646	WITHOUT_CLASSIFICATION	1.2388092354557868E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999981320250565	WITHOUT_CLASSIFICATION	1.8679749435218585E-6	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998933960103611	WITHOUT_CLASSIFICATION	1.0660398963894848E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999867385227187	WITHOUT_CLASSIFICATION	1.3261477281328782E-5	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999923999999162	WITHOUT_CLASSIFICATION	7.600000083895406E-6	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999514178840475	WITHOUT_CLASSIFICATION	4.8582115952412734E-5	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999962962763037	WITHOUT_CLASSIFICATION	3.7037236962079955E-6	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9999465456605904	WITHOUT_CLASSIFICATION	5.345433940966312E-5	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999975173384277	WITHOUT_CLASSIFICATION	2.4826615722638956E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999975728703278	WITHOUT_CLASSIFICATION	2.4271296722184927E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9736521259075699	WITHOUT_CLASSIFICATION	0.026347874092430106	DESIGN
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998824680839428	WITHOUT_CLASSIFICATION	1.1753191605720714E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999984060082502	WITHOUT_CLASSIFICATION	1.593991749927641E-6	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9999467956564997	WITHOUT_CLASSIFICATION	5.320434350024965E-5	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999940977806099	WITHOUT_CLASSIFICATION	5.902219390063901E-6	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9996897710953594	WITHOUT_CLASSIFICATION	3.1022890464055665E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999987784035553	WITHOUT_CLASSIFICATION	1.2215964446169175E-6	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.99997636064637	WITHOUT_CLASSIFICATION	2.363935363002548E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999828917405049	WITHOUT_CLASSIFICATION	1.710825949508887E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9885633048353455	WITHOUT_CLASSIFICATION	0.01143669516465443	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9901214015959152	WITHOUT_CLASSIFICATION	0.00987859840408481	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.707339714914201	WITHOUT_CLASSIFICATION	0.29266028508579894	DESIGN
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9986869896814458	WITHOUT_CLASSIFICATION	0.0013130103185541868	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999291290547232	WITHOUT_CLASSIFICATION	7.087094527681092E-5	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9993093870744738	WITHOUT_CLASSIFICATION	6.906129255260794E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999828917405049	WITHOUT_CLASSIFICATION	1.710825949508887E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9688097412369434	WITHOUT_CLASSIFICATION	0.03119025876305671	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999988267482008	WITHOUT_CLASSIFICATION	1.1732517990714777E-6	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9999016540436113	WITHOUT_CLASSIFICATION	9.834595638868901E-5	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999102873359093	WITHOUT_CLASSIFICATION	8.971266409077744E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999918389787584	WITHOUT_CLASSIFICATION	8.161021241561568E-6	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9867153866536681	DESIGN	0.013284613346331806	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999390196460473	WITHOUT_CLASSIFICATION	6.098035395263284E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999587285295635	WITHOUT_CLASSIFICATION	4.1271470436563496E-5	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999933877739922	WITHOUT_CLASSIFICATION	6.612226007844662E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999102873359093	WITHOUT_CLASSIFICATION	8.971266409077744E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999302163235537	WITHOUT_CLASSIFICATION	6.978367644619675E-5	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999391335881491	WITHOUT_CLASSIFICATION	6.086641185082456E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9767622311172974	WITHOUT_CLASSIFICATION	0.02323776888270249	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999859863335377	WITHOUT_CLASSIFICATION	1.4013666462130171E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999986259272007	WITHOUT_CLASSIFICATION	1.3740727992950018E-5	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999959663651614	WITHOUT_CLASSIFICATION	4.033634838648657E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999913217319301	WITHOUT_CLASSIFICATION	8.678268069964312E-6	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9997333858833336	WITHOUT_CLASSIFICATION	2.666141166663948E-4	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.999939382023715	WITHOUT_CLASSIFICATION	6.061797628494007E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996827997214754	WITHOUT_CLASSIFICATION	3.172002785245148E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999996800148853	WITHOUT_CLASSIFICATION	3.199851147177963E-7	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9999911011058521	WITHOUT_CLASSIFICATION	8.898894147971586E-6	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999993346773132	WITHOUT_CLASSIFICATION	6.65322686763497E-7	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999779456122487	WITHOUT_CLASSIFICATION	2.2054387751241786E-5	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999997435434165	WITHOUT_CLASSIFICATION	2.5645658352728945E-7	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999919952051507	WITHOUT_CLASSIFICATION	8.004794849237947E-6	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999914216503903	WITHOUT_CLASSIFICATION	8.578349609590774E-6	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998926271651616	WITHOUT_CLASSIFICATION	1.0737283483845309E-4	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999641122178891	WITHOUT_CLASSIFICATION	3.588778211091467E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9999609995265836	WITHOUT_CLASSIFICATION	3.9000473416447726E-5	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999739577634	WITHOUT_CLASSIFICATION	2.604223657850404E-8	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999393214219111	WITHOUT_CLASSIFICATION	6.0678578088993136E-5	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999990436452537	WITHOUT_CLASSIFICATION	9.563547462882074E-7	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999444740399965	WITHOUT_CLASSIFICATION	5.552596000356345E-5	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9998087889236673	WITHOUT_CLASSIFICATION	1.9121107633261904E-4	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9989585222523489	WITHOUT_CLASSIFICATION	0.00104147774765112	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999649654298237	WITHOUT_CLASSIFICATION	3.503457017627556E-5	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999997494674124	WITHOUT_CLASSIFICATION	2.5053258763210196E-7	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999818616821357	WITHOUT_CLASSIFICATION	1.813831786432752E-5	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999822856018566	WITHOUT_CLASSIFICATION	1.7714398143366227E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999936043879851	WITHOUT_CLASSIFICATION	6.395612014840783E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9999882733492863	WITHOUT_CLASSIFICATION	1.1726650713720584E-5	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999987186827743	WITHOUT_CLASSIFICATION	1.2813172256255616E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690843961325	WITHOUT_CLASSIFICATION	3.091560386738881E-5	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9885122617768368	WITHOUT_CLASSIFICATION	0.011487738223163197	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9870613973536642	WITHOUT_CLASSIFICATION	0.01293860264633586	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999998816871594	WITHOUT_CLASSIFICATION	1.1831284059397035E-7	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.99987162235403	WITHOUT_CLASSIFICATION	1.2837764596993024E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999081788772	WITHOUT_CLASSIFICATION	9.182112284788009E-8	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999081788772	WITHOUT_CLASSIFICATION	9.182112284788009E-8	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999954393979316	WITHOUT_CLASSIFICATION	4.5606020683613674E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996873729952649	WITHOUT_CLASSIFICATION	3.126270047351655E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999835614823426	WITHOUT_CLASSIFICATION	1.643851765739282E-5	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999997030814832	WITHOUT_CLASSIFICATION	2.969185167355906E-7	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999999533207322	WITHOUT_CLASSIFICATION	4.667926775203675E-8	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9995923563905734	WITHOUT_CLASSIFICATION	4.076436094264714E-4	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9999967977346974	WITHOUT_CLASSIFICATION	3.202265302484778E-6	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999125986569354	WITHOUT_CLASSIFICATION	8.740134306457982E-5	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999997596205797	WITHOUT_CLASSIFICATION	2.403794201807335E-7	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999908658198224	WITHOUT_CLASSIFICATION	9.134180177560376E-6	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999581245470541	WITHOUT_CLASSIFICATION	4.187545294581268E-5	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999987961659963	WITHOUT_CLASSIFICATION	1.2038340037499564E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998305468240689	WITHOUT_CLASSIFICATION	1.694531759310078E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999081788772	WITHOUT_CLASSIFICATION	9.182112284788009E-8	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999834163418387	WITHOUT_CLASSIFICATION	1.6583658161305357E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9998791637620535	WITHOUT_CLASSIFICATION	1.2083623794636611E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9969534696258809	WITHOUT_CLASSIFICATION	0.003046530374119134	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9997953420539865	WITHOUT_CLASSIFICATION	2.0465794601361073E-4	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999968418318833	WITHOUT_CLASSIFICATION	3.158168116544909E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999722319600886	WITHOUT_CLASSIFICATION	2.7768039911469294E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9996741166806048	WITHOUT_CLASSIFICATION	3.258833193952861E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999998687102732	WITHOUT_CLASSIFICATION	1.3128972677431474E-7	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999885655446503	WITHOUT_CLASSIFICATION	1.1434455349668976E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9910332249285562	WITHOUT_CLASSIFICATION	0.008966775071443854	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999957861015526	WITHOUT_CLASSIFICATION	4.213898447452374E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999690843961325	WITHOUT_CLASSIFICATION	3.091560386738881E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999081788772	WITHOUT_CLASSIFICATION	9.182112284788009E-8	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999949083319233	WITHOUT_CLASSIFICATION	5.091668076747526E-6	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999990612946161	WITHOUT_CLASSIFICATION	9.387053838303448E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999994575243427	WITHOUT_CLASSIFICATION	5.424756572348983E-7	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999747292478953	WITHOUT_CLASSIFICATION	2.5270752104617938E-5	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9084715208449423	WITHOUT_CLASSIFICATION	0.09152847915505768	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999998029252826	WITHOUT_CLASSIFICATION	1.9707471737700678E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994542914842892	WITHOUT_CLASSIFICATION	5.457085157108309E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999984244553	WITHOUT_CLASSIFICATION	1.5755446374392561E-9	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999998666813318	WITHOUT_CLASSIFICATION	1.33318668240068E-7	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9971836167200046	WITHOUT_CLASSIFICATION	0.0028163832799953806	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999992897534804	WITHOUT_CLASSIFICATION	7.102465194773019E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999721082698173	WITHOUT_CLASSIFICATION	2.7891730182706187E-5	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999997121521301	WITHOUT_CLASSIFICATION	2.878478698821252E-7	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999012509644016	WITHOUT_CLASSIFICATION	9.874903559838767E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999994426566374	WITHOUT_CLASSIFICATION	5.5734336244884E-7	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999704438391641	WITHOUT_CLASSIFICATION	2.9556160835859838E-5	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999995584313847	WITHOUT_CLASSIFICATION	4.4156861532393294E-7	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999626407766251	WITHOUT_CLASSIFICATION	3.735922337489575E-5	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999997645925073	WITHOUT_CLASSIFICATION	2.3540749266072556E-7	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999956395049474	WITHOUT_CLASSIFICATION	4.360495052589946E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996538568144601	WITHOUT_CLASSIFICATION	3.46143185540001E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996538568144601	WITHOUT_CLASSIFICATION	3.46143185540001E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9743622006608971	WITHOUT_CLASSIFICATION	0.02563779933910289	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9925655650786265	WITHOUT_CLASSIFICATION	0.007434434921373544	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999866256003087	WITHOUT_CLASSIFICATION	1.3374399691335152E-5	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999280578995036	WITHOUT_CLASSIFICATION	7.19421004964363E-5	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999122712338181	WITHOUT_CLASSIFICATION	8.772876618191941E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999960003261759	WITHOUT_CLASSIFICATION	3.9996738241975754E-6	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9999091785620087	WITHOUT_CLASSIFICATION	9.082143799138923E-5	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999990772952934	WITHOUT_CLASSIFICATION	9.227047067205111E-7	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999990772952934	WITHOUT_CLASSIFICATION	9.227047067205111E-7	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9992724215350028	WITHOUT_CLASSIFICATION	7.275784649972343E-4	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999952784287868	WITHOUT_CLASSIFICATION	4.721571213162929E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998876525025449	WITHOUT_CLASSIFICATION	1.1234749745513385E-4	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999898554845775	WITHOUT_CLASSIFICATION	1.0144515422548102E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999898554845775	WITHOUT_CLASSIFICATION	1.0144515422548102E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999898554845775	WITHOUT_CLASSIFICATION	1.0144515422548102E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9998846691268396	WITHOUT_CLASSIFICATION	1.1533087316034577E-4	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9970848657767282	WITHOUT_CLASSIFICATION	0.0029151342232717264	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999980168809126	WITHOUT_CLASSIFICATION	1.983119087471824E-6	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9997642373563211	WITHOUT_CLASSIFICATION	2.3576264367888738E-4	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998236325610347	WITHOUT_CLASSIFICATION	1.7636743896538078E-4	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999081788772	WITHOUT_CLASSIFICATION	9.182112284788009E-8	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999081788772	WITHOUT_CLASSIFICATION	9.182112284788009E-8	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.998963977939738	WITHOUT_CLASSIFICATION	0.001036022060261916	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999999694267683	WITHOUT_CLASSIFICATION	3.0573231745806716E-8	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9854013935451039	WITHOUT_CLASSIFICATION	0.01459860645489607	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999984072875973	WITHOUT_CLASSIFICATION	1.592712402760024E-6	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999521065549166	WITHOUT_CLASSIFICATION	4.78934450832565E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999987709033061	WITHOUT_CLASSIFICATION	1.2290966938939492E-6	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9996628170940319	WITHOUT_CLASSIFICATION	3.371829059680079E-4	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999996596837497	WITHOUT_CLASSIFICATION	3.403162502687959E-7	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999995366838073	WITHOUT_CLASSIFICATION	4.63316192731844E-7	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999977567061	WITHOUT_CLASSIFICATION	2.2432938461036278E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999999135105659	WITHOUT_CLASSIFICATION	8.648943397369727E-8	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999995009743565	WITHOUT_CLASSIFICATION	4.990256434019827E-7	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999995009743565	WITHOUT_CLASSIFICATION	4.990256434019827E-7	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999995632285361	WITHOUT_CLASSIFICATION	4.36771463816459E-7	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999995632285361	WITHOUT_CLASSIFICATION	4.36771463816459E-7	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999997271986676	WITHOUT_CLASSIFICATION	2.7280133238733495E-7	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.999999090202837	WITHOUT_CLASSIFICATION	9.097971629454649E-7	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.999999090202837	WITHOUT_CLASSIFICATION	9.097971629454649E-7	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.999999492013326	WITHOUT_CLASSIFICATION	5.079866739949728E-7	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999980773334014	WITHOUT_CLASSIFICATION	1.9226665985512384E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999917495809315	WITHOUT_CLASSIFICATION	8.250419068360814E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9996538568144601	WITHOUT_CLASSIFICATION	3.46143185540001E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999985612088182	WITHOUT_CLASSIFICATION	1.4387911817727532E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999980773334014	WITHOUT_CLASSIFICATION	1.9226665985512384E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9873256179178392	WITHOUT_CLASSIFICATION	0.012674382082160809	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9999984717447719	WITHOUT_CLASSIFICATION	1.5282552280832596E-6	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999999456890764	WITHOUT_CLASSIFICATION	5.431092376230588E-8	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999997604393371	WITHOUT_CLASSIFICATION	2.3956066285228495E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999999189091273	WITHOUT_CLASSIFICATION	8.10908727029857E-7	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999984636268011	WITHOUT_CLASSIFICATION	1.5363731989883168E-6	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997562305103714	WITHOUT_CLASSIFICATION	2.4376948962864936E-4	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9998990956235076	WITHOUT_CLASSIFICATION	1.0090437649245048E-4	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999893584990387	WITHOUT_CLASSIFICATION	1.0641500961236934E-5	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9991233951028727	WITHOUT_CLASSIFICATION	8.766048971272035E-4	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999249322754	WITHOUT_CLASSIFICATION	7.506772460679104E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999974293160481	WITHOUT_CLASSIFICATION	2.5706839518772764E-6	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994401215515	WITHOUT_CLASSIFICATION	5.598784484820318E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999996479173212	WITHOUT_CLASSIFICATION	3.520826786907282E-7	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998900518672107	WITHOUT_CLASSIFICATION	1.0994813278920494E-4	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999983271017676	WITHOUT_CLASSIFICATION	1.6728982324425627E-6	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998586179003	WITHOUT_CLASSIFICATION	1.41382099764836E-7	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999861207694829	WITHOUT_CLASSIFICATION	1.3879230517224931E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999861207694829	WITHOUT_CLASSIFICATION	1.3879230517224931E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999946718274301	WITHOUT_CLASSIFICATION	5.328172569999151E-6	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999978004645483	WITHOUT_CLASSIFICATION	2.1995354517781855E-6	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999841827446498	WITHOUT_CLASSIFICATION	1.5817255350098587E-5	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999995649692017	WITHOUT_CLASSIFICATION	4.3503079821706176E-7	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999998163288196	WITHOUT_CLASSIFICATION	1.8367118044073842E-7	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.999992432544977	WITHOUT_CLASSIFICATION	7.567455023024066E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9997195872569775	WITHOUT_CLASSIFICATION	2.804127430224964E-4	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999938818496983	WITHOUT_CLASSIFICATION	6.118150301773649E-6	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999961945480457	WITHOUT_CLASSIFICATION	3.80545195426401E-6	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999985728142045	WITHOUT_CLASSIFICATION	1.4271857955525373E-6	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9998728206345854	WITHOUT_CLASSIFICATION	1.2717936541463556E-4	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999721082698173	WITHOUT_CLASSIFICATION	2.7891730182706187E-5	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999997253941233	WITHOUT_CLASSIFICATION	2.7460587663568353E-7	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999983718922992	WITHOUT_CLASSIFICATION	1.6281077006712066E-6	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999999480695828	WITHOUT_CLASSIFICATION	5.1930417087248205E-8	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999995407607163	WITHOUT_CLASSIFICATION	4.592392836526991E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999959461095752	WITHOUT_CLASSIFICATION	4.0538904248647675E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999959461095752	WITHOUT_CLASSIFICATION	4.0538904248647675E-6	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999931230479472	WITHOUT_CLASSIFICATION	6.876952052776974E-6	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9668238375478229	WITHOUT_CLASSIFICATION	0.03317616245217714	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999965989096387	WITHOUT_CLASSIFICATION	3.4010903613786915E-6	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999698880792228	WITHOUT_CLASSIFICATION	3.011192077715301E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999994241420425	WITHOUT_CLASSIFICATION	5.758579576113338E-7	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999998426019128	WITHOUT_CLASSIFICATION	1.5739808728777395E-7	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9921257594673328	WITHOUT_CLASSIFICATION	0.007874240532667177	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999988615486254	WITHOUT_CLASSIFICATION	1.1384513747010945E-6	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999972571526047	WITHOUT_CLASSIFICATION	2.742847395265907E-6	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999881525016533	WITHOUT_CLASSIFICATION	1.184749834663698E-5	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9996253787034477	WITHOUT_CLASSIFICATION	3.746212965522417E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999988615486254	WITHOUT_CLASSIFICATION	1.1384513747010945E-6	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.96446792460671	WITHOUT_CLASSIFICATION	0.03553207539328995	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9990930436994523	WITHOUT_CLASSIFICATION	9.069563005476931E-4	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9995214739066732	WITHOUT_CLASSIFICATION	4.7852609332668195E-4	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.999997182808547	WITHOUT_CLASSIFICATION	2.8171914529799623E-6	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999895588153518	WITHOUT_CLASSIFICATION	1.0441184648212495E-5	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9996828068211688	WITHOUT_CLASSIFICATION	3.1719317883115237E-4	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999990360819497	WITHOUT_CLASSIFICATION	9.639180501886006E-7	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999996491528221	WITHOUT_CLASSIFICATION	3.508471777966881E-7	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9998797802125418	WITHOUT_CLASSIFICATION	1.2021978745819069E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.998353441764978	WITHOUT_CLASSIFICATION	0.001646558235022001	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999808252648913	WITHOUT_CLASSIFICATION	1.9174735108743815E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999995425387647	WITHOUT_CLASSIFICATION	4.574612353192885E-7	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999797062133321	WITHOUT_CLASSIFICATION	2.029378666787564E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999922245498505	WITHOUT_CLASSIFICATION	7.775450149588297E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999966363735949	WITHOUT_CLASSIFICATION	3.3636264050315586E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9995630119685117	WITHOUT_CLASSIFICATION	4.369880314883215E-4	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999983215673995	WITHOUT_CLASSIFICATION	1.6784326004504729E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9979251092034118	WITHOUT_CLASSIFICATION	0.0020748907965880974	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9989842273946342	WITHOUT_CLASSIFICATION	0.0010157726053657858	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999989141712158	WITHOUT_CLASSIFICATION	1.0858287841481313E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999547452147045	WITHOUT_CLASSIFICATION	4.5254785295574205E-5	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7129469864008053	DESIGN	0.2870530135991948	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9153624193426441	WITHOUT_CLASSIFICATION	0.08463758065735587	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.999997981995932	WITHOUT_CLASSIFICATION	2.0180040678951398E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999539984497413	WITHOUT_CLASSIFICATION	4.6001550258733654E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999836958905358	WITHOUT_CLASSIFICATION	1.6304109464178094E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999977559111568	WITHOUT_CLASSIFICATION	2.24408884320943E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999999371435495	WITHOUT_CLASSIFICATION	6.285645049128432E-7	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999965528064547	WITHOUT_CLASSIFICATION	3.44719354532428E-6	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9998157198085011	WITHOUT_CLASSIFICATION	1.8428019149887187E-4	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999380591881	WITHOUT_CLASSIFICATION	6.194081195240406E-8	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999908021098987	WITHOUT_CLASSIFICATION	9.197890101410457E-6	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999053182026989	WITHOUT_CLASSIFICATION	9.468179730109633E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999831882023937	WITHOUT_CLASSIFICATION	1.6811797606253745E-5	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999724967557105	WITHOUT_CLASSIFICATION	2.750324428952621E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999611438065056	WITHOUT_CLASSIFICATION	3.885619349444474E-5	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999414674789353	WITHOUT_CLASSIFICATION	5.853252106458525E-5	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999985578428638	WITHOUT_CLASSIFICATION	1.4421571361402427E-6	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999176898403	WITHOUT_CLASSIFICATION	8.231015972032151E-8	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999885295600477	WITHOUT_CLASSIFICATION	1.1470439952329124E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999964581713683	WITHOUT_CLASSIFICATION	3.5418286317714555E-6	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999868706976647	WITHOUT_CLASSIFICATION	1.3129302335316639E-5	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999979573117918	WITHOUT_CLASSIFICATION	2.042688208163424E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999011228442	WITHOUT_CLASSIFICATION	9.887715586321306E-8	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999780486853324	WITHOUT_CLASSIFICATION	2.195131466758262E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999930871584495	WITHOUT_CLASSIFICATION	6.912841550634491E-6	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999154465554903	WITHOUT_CLASSIFICATION	8.455344450973954E-5	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999705552954011	WITHOUT_CLASSIFICATION	2.944470459883973E-5	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999835775779113	WITHOUT_CLASSIFICATION	1.6422422088592935E-5	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999998752861938	WITHOUT_CLASSIFICATION	1.2471380621480987E-6	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998678480292369	WITHOUT_CLASSIFICATION	1.3215197076305366E-4	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999703180195121	WITHOUT_CLASSIFICATION	2.968198048796719E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999999634686796	WITHOUT_CLASSIFICATION	3.653132050088013E-8	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999980575925469	WITHOUT_CLASSIFICATION	1.9424074531097283E-5	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999895141045048	WITHOUT_CLASSIFICATION	1.0485895495098176E-5	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998206448737	WITHOUT_CLASSIFICATION	1.7935512620602003E-7	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9967306789687251	WITHOUT_CLASSIFICATION	0.0032693210312747514	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999994755657176	WITHOUT_CLASSIFICATION	5.244342824091204E-7	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999997132160133	WITHOUT_CLASSIFICATION	2.8678398678120783E-7	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999960313231079	WITHOUT_CLASSIFICATION	3.968676892130176E-6	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999744456128784	WITHOUT_CLASSIFICATION	2.5554387121595596E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995356470281	WITHOUT_CLASSIFICATION	4.643529718198198E-7	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999788580736552	WITHOUT_CLASSIFICATION	2.1141926344852706E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9602343827545374	WITHOUT_CLASSIFICATION	0.0397656172454626	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9988566192477885	WITHOUT_CLASSIFICATION	0.0011433807522115696	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.999875095641928	WITHOUT_CLASSIFICATION	1.2490435807196613E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998678480292369	WITHOUT_CLASSIFICATION	1.3215197076305366E-4	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999965955051239	WITHOUT_CLASSIFICATION	3.4044948759919255E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999987490790514	WITHOUT_CLASSIFICATION	1.2509209485828477E-6	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999981488090461	WITHOUT_CLASSIFICATION	1.8511909537747472E-6	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999997543656978	WITHOUT_CLASSIFICATION	2.4563430223415506E-7	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999956787031759	WITHOUT_CLASSIFICATION	4.3212968240904546E-5	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999814981664046	WITHOUT_CLASSIFICATION	1.8501833595339824E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999972571526047	WITHOUT_CLASSIFICATION	2.742847395265907E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999905886686471	WITHOUT_CLASSIFICATION	9.411331352808422E-6	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999724967557105	WITHOUT_CLASSIFICATION	2.750324428952621E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998625060284541	WITHOUT_CLASSIFICATION	1.374939715460085E-4	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999634122455325	WITHOUT_CLASSIFICATION	3.658775446755323E-5	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999910705901158	WITHOUT_CLASSIFICATION	8.92940988404981E-6	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999880465436433	WITHOUT_CLASSIFICATION	1.1953456356803762E-5	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.999949353813451	WITHOUT_CLASSIFICATION	5.064618654903783E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9809692759068442	WITHOUT_CLASSIFICATION	0.01903072409315567	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999887323814016	WITHOUT_CLASSIFICATION	1.1267618598312533E-5	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999755097432957	WITHOUT_CLASSIFICATION	2.4490256704191345E-5	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9919808932691768	WITHOUT_CLASSIFICATION	0.008019106730823091	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999897065712083	WITHOUT_CLASSIFICATION	1.029342879165923E-5	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9991251609952809	WITHOUT_CLASSIFICATION	8.748390047189564E-4	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9992392736605076	WITHOUT_CLASSIFICATION	7.607263394924056E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999972400729363	WITHOUT_CLASSIFICATION	2.7599270635391556E-6	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999972400729363	WITHOUT_CLASSIFICATION	2.7599270635391556E-6	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998613207683785	WITHOUT_CLASSIFICATION	1.3867923162150185E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9987492565372282	WITHOUT_CLASSIFICATION	0.0012507434627718008	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997547988918	WITHOUT_CLASSIFICATION	2.452011082150764E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9997098736333611	WITHOUT_CLASSIFICATION	2.901263666388992E-4	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999999188025251	WITHOUT_CLASSIFICATION	8.119747487440132E-8	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999986555454651	WITHOUT_CLASSIFICATION	1.3444545348927385E-6	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999895736163923	WITHOUT_CLASSIFICATION	1.0426383607658044E-5	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9998413366692736	WITHOUT_CLASSIFICATION	1.5866333072642132E-4	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999954335845203	WITHOUT_CLASSIFICATION	4.5664154798470405E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994429373969443	WITHOUT_CLASSIFICATION	5.570626030557387E-4	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999993540013739	WITHOUT_CLASSIFICATION	6.459986260736839E-7	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999966034199933	WITHOUT_CLASSIFICATION	3.3965800066791187E-6	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999938469642534	WITHOUT_CLASSIFICATION	6.153035746672148E-6	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999990711925754	WITHOUT_CLASSIFICATION	9.288074245879945E-7	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997789062099549	WITHOUT_CLASSIFICATION	2.2109379004520456E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999306338361543	WITHOUT_CLASSIFICATION	6.936616384565705E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9909875243374554	WITHOUT_CLASSIFICATION	0.00901247566254456	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999998517735766	WITHOUT_CLASSIFICATION	1.482264233476988E-7	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999917525087062	WITHOUT_CLASSIFICATION	8.24749129373676E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9996294704580585	WITHOUT_CLASSIFICATION	3.705295419413934E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999855391782382	WITHOUT_CLASSIFICATION	1.446082176194032E-5	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999925158241485	WITHOUT_CLASSIFICATION	7.4841758515518335E-6	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9988257066619316	WITHOUT_CLASSIFICATION	0.0011742933380684058	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9997161431632262	WITHOUT_CLASSIFICATION	2.8385683677387033E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999954141159139	WITHOUT_CLASSIFICATION	4.585884086209117E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993253216224495	WITHOUT_CLASSIFICATION	6.746783775504189E-4	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999865742458977	WITHOUT_CLASSIFICATION	1.3425754102368638E-5	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999349290687812	WITHOUT_CLASSIFICATION	6.50709312187684E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999908596601433	WITHOUT_CLASSIFICATION	9.140339856618739E-6	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997947216239756	WITHOUT_CLASSIFICATION	2.0527837602450286E-4	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9971799544318053	WITHOUT_CLASSIFICATION	0.0028200455681947636	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.9997313982700986	WITHOUT_CLASSIFICATION	2.686017299013378E-4	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9998981916042461	WITHOUT_CLASSIFICATION	1.0180839575387563E-4	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999977036950044	WITHOUT_CLASSIFICATION	2.2963049956831435E-6	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999988181741326	WITHOUT_CLASSIFICATION	1.1818258673924843E-6	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999690136436	WITHOUT_CLASSIFICATION	3.0986356339828194E-8	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999995201112659	WITHOUT_CLASSIFICATION	4.798887340389128E-7	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999991629895021	WITHOUT_CLASSIFICATION	8.370104980318743E-7	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999999732381415	WITHOUT_CLASSIFICATION	2.676185852354726E-8	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998552147318	WITHOUT_CLASSIFICATION	1.4478526815890836E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999649479126619	WITHOUT_CLASSIFICATION	3.505208733808638E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999984025434786	WITHOUT_CLASSIFICATION	1.5974565213906785E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999989949498366	WITHOUT_CLASSIFICATION	1.0050501633491977E-6	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999987817499563	WITHOUT_CLASSIFICATION	1.2182500437863932E-6	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999649996987	WITHOUT_CLASSIFICATION	3.500030129296694E-8	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994631717766987	WITHOUT_CLASSIFICATION	5.368282233013142E-4	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9992367568603805	WITHOUT_CLASSIFICATION	7.632431396194858E-4	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999954416643	WITHOUT_CLASSIFICATION	4.558335705905568E-8	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999990922466307	WITHOUT_CLASSIFICATION	9.077533693440883E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999909001797509	WITHOUT_CLASSIFICATION	9.099820249051427E-6	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999063711929496	WITHOUT_CLASSIFICATION	9.362880705035614E-5	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999997233405851	WITHOUT_CLASSIFICATION	2.76659415011619E-7	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999829682519242	WITHOUT_CLASSIFICATION	1.7031748075725714E-5	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999985574068536	WITHOUT_CLASSIFICATION	1.442593146412812E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999999591680577	WITHOUT_CLASSIFICATION	4.083194225762966E-8	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9992459990638706	WITHOUT_CLASSIFICATION	7.540009361294653E-4	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999980304529396	WITHOUT_CLASSIFICATION	1.96954706053372E-6	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999999748298699	WITHOUT_CLASSIFICATION	2.5170130105416423E-7	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999998120719976	WITHOUT_CLASSIFICATION	1.8792800224078594E-7	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999998997793506	WITHOUT_CLASSIFICATION	1.002206494227445E-7	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999678918155058	WITHOUT_CLASSIFICATION	3.210818449415936E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999966731253361	WITHOUT_CLASSIFICATION	3.3268746639057255E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998968734756748	WITHOUT_CLASSIFICATION	1.0312652432519787E-4	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998942077715	WITHOUT_CLASSIFICATION	1.0579222848360665E-7	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999965317663594	WITHOUT_CLASSIFICATION	3.4682336406004915E-6	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999865755016125	WITHOUT_CLASSIFICATION	1.3424498387380579E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999299165109	WITHOUT_CLASSIFICATION	7.008348915130877E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999995850918235	WITHOUT_CLASSIFICATION	4.149081765405184E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999931275661617	WITHOUT_CLASSIFICATION	6.872433838310952E-6	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999265052347	WITHOUT_CLASSIFICATION	7.34947652961323E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999931275661617	WITHOUT_CLASSIFICATION	6.872433838310952E-6	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999956443898961	WITHOUT_CLASSIFICATION	4.355610103966864E-6	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999009965296471	WITHOUT_CLASSIFICATION	9.90034703528782E-5	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999847514517444	WITHOUT_CLASSIFICATION	1.5248548255543167E-5	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999981842368372	WITHOUT_CLASSIFICATION	1.815763162865349E-6	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999789018513696	WITHOUT_CLASSIFICATION	2.1098148630295605E-5	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999881483690876	WITHOUT_CLASSIFICATION	1.1851630912427823E-5	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999982782357139	WITHOUT_CLASSIFICATION	1.721764286183271E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9997677944670673	WITHOUT_CLASSIFICATION	2.3220553293279826E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999846397486852	WITHOUT_CLASSIFICATION	1.5360251314810984E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999264175568651	WITHOUT_CLASSIFICATION	7.35824431349315E-5	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999966688300962	WITHOUT_CLASSIFICATION	3.331169903704493E-6	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999722637325443	WITHOUT_CLASSIFICATION	2.7736267455617796E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999994343126009	WITHOUT_CLASSIFICATION	5.656873992113011E-7	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9051347636669349	WITHOUT_CLASSIFICATION	0.09486523633306504	DESIGN
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999945661512979	WITHOUT_CLASSIFICATION	5.433848702189028E-6	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999995210399529	WITHOUT_CLASSIFICATION	4.789600470969103E-7	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999919779393468	WITHOUT_CLASSIFICATION	8.022060653249268E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999998863489257	WITHOUT_CLASSIFICATION	1.1365107435786706E-7	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999795524845437	WITHOUT_CLASSIFICATION	2.0447515456267678E-5	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9996963480246567	WITHOUT_CLASSIFICATION	3.036519753433798E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999948279768298	WITHOUT_CLASSIFICATION	5.172023170260926E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9998406872463204	WITHOUT_CLASSIFICATION	1.5931275367967094E-4	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9973164423699079	WITHOUT_CLASSIFICATION	0.00268355763009216	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9888250472805186	WITHOUT_CLASSIFICATION	0.011174952719481438	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999424169857479	WITHOUT_CLASSIFICATION	5.758301425219359E-5	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999949241412424	WITHOUT_CLASSIFICATION	5.075858757661444E-6	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9995809421225506	WITHOUT_CLASSIFICATION	4.1905787744952593E-4	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.999973537823149	WITHOUT_CLASSIFICATION	2.6462176850952257E-5	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.99999653994023	WITHOUT_CLASSIFICATION	3.4600597700476423E-6	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999889315648264	WITHOUT_CLASSIFICATION	1.1068435173643544E-5	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999925857276106	WITHOUT_CLASSIFICATION	7.41427238931642E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.957596409248428	WITHOUT_CLASSIFICATION	0.042403590751571935	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999972573332085	WITHOUT_CLASSIFICATION	2.7426667915059806E-6	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999983087496082	WITHOUT_CLASSIFICATION	1.6912503917687484E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999982173694492	WITHOUT_CLASSIFICATION	1.7826305507625937E-6	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999962984794676	WITHOUT_CLASSIFICATION	3.701520532374963E-6	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.999998690457627	WITHOUT_CLASSIFICATION	1.3095423730488192E-6	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999983423082833	WITHOUT_CLASSIFICATION	1.6576917166535408E-6	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9995816902581409	WITHOUT_CLASSIFICATION	4.1830974185902696E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999993220382715	WITHOUT_CLASSIFICATION	6.779617285041992E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999998299329687	WITHOUT_CLASSIFICATION	1.7006703133740794E-7	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999958761972417	WITHOUT_CLASSIFICATION	4.123802758352083E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9997718807293389	WITHOUT_CLASSIFICATION	2.2811927066106083E-4	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999949241412424	WITHOUT_CLASSIFICATION	5.075858757661444E-6	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9996183487968918	WITHOUT_CLASSIFICATION	3.816512031081307E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999999143567497	WITHOUT_CLASSIFICATION	8.564325017128442E-8	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9908349117769704	WITHOUT_CLASSIFICATION	0.009165088223029519	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999991930133858	WITHOUT_CLASSIFICATION	8.069866142749132E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.999999076649549	WITHOUT_CLASSIFICATION	9.233504509332252E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.999999943169064	WITHOUT_CLASSIFICATION	5.683093600331632E-8	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999945151409889	WITHOUT_CLASSIFICATION	5.484859011014467E-6	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9897079508522968	DESIGN	0.010292049147703089	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9997117162949168	WITHOUT_CLASSIFICATION	2.8828370508314326E-4	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9989104541562319	WITHOUT_CLASSIFICATION	0.0010895458437681148	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9998899909471671	WITHOUT_CLASSIFICATION	1.1000905283289578E-4	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9990748805052304	WITHOUT_CLASSIFICATION	9.251194947696731E-4	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999741614741725	WITHOUT_CLASSIFICATION	2.5838525827586235E-5	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998893716565869	WITHOUT_CLASSIFICATION	1.1062834341307096E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.999998982654943	WITHOUT_CLASSIFICATION	1.0173450569682198E-6	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999999294985142	WITHOUT_CLASSIFICATION	7.050148575478196E-8	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999996593526612	WITHOUT_CLASSIFICATION	3.406473387694215E-7	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999981878901603	WITHOUT_CLASSIFICATION	1.8121098398004855E-6	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.999999088671385	WITHOUT_CLASSIFICATION	9.113286150964772E-7	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9996183487968918	WITHOUT_CLASSIFICATION	3.816512031081307E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999855883243745	WITHOUT_CLASSIFICATION	1.4411675625652238E-5	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9998242828784787	WITHOUT_CLASSIFICATION	1.7571712152128678E-4	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999743994227	WITHOUT_CLASSIFICATION	2.5600577299882776E-5	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999894020843106	WITHOUT_CLASSIFICATION	1.0597915689410148E-4	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999171139416797	WITHOUT_CLASSIFICATION	8.288605832033868E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999817123653588	WITHOUT_CLASSIFICATION	1.8287634641249556E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999817123653588	WITHOUT_CLASSIFICATION	1.8287634641249556E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998089571196	WITHOUT_CLASSIFICATION	1.9104288047532843E-7	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999817123653588	WITHOUT_CLASSIFICATION	1.8287634641249556E-5	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9999817123653588	WITHOUT_CLASSIFICATION	1.8287634641249556E-5	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999790620167902	WITHOUT_CLASSIFICATION	2.093798320979847E-4	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999824571720979	WITHOUT_CLASSIFICATION	1.7542827902080813E-5	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999898972074183	WITHOUT_CLASSIFICATION	1.0102792581740487E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999822893862088	WITHOUT_CLASSIFICATION	1.771061379124133E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999459870515142	WITHOUT_CLASSIFICATION	5.4012948485755916E-5	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9002255200709385	WITHOUT_CLASSIFICATION	0.09977447992906145	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9853745097307175	WITHOUT_CLASSIFICATION	0.014625490269282485	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9998076098955466	WITHOUT_CLASSIFICATION	1.9239010445341358E-4	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999927575505512	WITHOUT_CLASSIFICATION	7.242449448797422E-5	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9999893399793565	WITHOUT_CLASSIFICATION	1.0660020643458466E-5	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9993674831439612	WITHOUT_CLASSIFICATION	6.325168560389547E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998887286674706	WITHOUT_CLASSIFICATION	1.1127133252942034E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999935984872002	WITHOUT_CLASSIFICATION	6.401512799890936E-6	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.999992258413849	WITHOUT_CLASSIFICATION	7.741586151024007E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999967190912922	WITHOUT_CLASSIFICATION	3.280908707701093E-6	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9984226990654752	WITHOUT_CLASSIFICATION	0.0015773009345247775	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999980917814871	WITHOUT_CLASSIFICATION	1.9082185127626757E-6	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999910316076912	WITHOUT_CLASSIFICATION	8.968392308767841E-6	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.943070954234082	WITHOUT_CLASSIFICATION	0.056929045765917945	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999882283514049	WITHOUT_CLASSIFICATION	1.1771648595225599E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999448748292149	WITHOUT_CLASSIFICATION	5.5125170785220884E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999994102082173	WITHOUT_CLASSIFICATION	5.897917828146215E-7	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999980917814871	WITHOUT_CLASSIFICATION	1.9082185127626757E-6	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9995809421225506	WITHOUT_CLASSIFICATION	4.1905787744952593E-4	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999622235075144	WITHOUT_CLASSIFICATION	3.7776492485480896E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996903584258	WITHOUT_CLASSIFICATION	3.0964157412654556E-7	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999988963705057	WITHOUT_CLASSIFICATION	1.103629494425916E-6	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999645697564973	WITHOUT_CLASSIFICATION	3.543024350271115E-5	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999897712858434	WITHOUT_CLASSIFICATION	1.022871415658085E-5	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999906139354825	WITHOUT_CLASSIFICATION	9.38606451749092E-6	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999778245171385	WITHOUT_CLASSIFICATION	2.2175482861558182E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999994682751966	WITHOUT_CLASSIFICATION	5.317248034630043E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9912566022118902	WITHOUT_CLASSIFICATION	0.008743397788109801	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997133433166647	WITHOUT_CLASSIFICATION	2.866566833352441E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997148160283	WITHOUT_CLASSIFICATION	2.851839716563367E-7	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999831291903738	WITHOUT_CLASSIFICATION	1.6870809626164453E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999717397157	WITHOUT_CLASSIFICATION	2.8260284398543098E-8	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999773839334581	WITHOUT_CLASSIFICATION	2.2616066541915046E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999941414553821	WITHOUT_CLASSIFICATION	5.858544617856938E-6	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999986539822067	WITHOUT_CLASSIFICATION	1.3460177932660234E-6	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999920642381446	WITHOUT_CLASSIFICATION	7.935761855424514E-6	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.999995350196096	WITHOUT_CLASSIFICATION	4.64980390405632E-6	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999988160989138	WITHOUT_CLASSIFICATION	1.1839010861931427E-5	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9978670572311608	WITHOUT_CLASSIFICATION	0.0021329427688391855	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999932358238554	WITHOUT_CLASSIFICATION	6.764176144602469E-6	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9979797934157408	WITHOUT_CLASSIFICATION	0.002020206584259199	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999994682751966	WITHOUT_CLASSIFICATION	5.317248034630043E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999968733263721	WITHOUT_CLASSIFICATION	3.12667362793848E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9998378602501461	WITHOUT_CLASSIFICATION	1.6213974985393752E-4	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999770710392204	WITHOUT_CLASSIFICATION	2.2928960779602594E-4	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9998956986922606	WITHOUT_CLASSIFICATION	1.0430130773942771E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999933363803729	WITHOUT_CLASSIFICATION	6.663619627050593E-6	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999383266455836	WITHOUT_CLASSIFICATION	6.16733544164275E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999738314107322	WITHOUT_CLASSIFICATION	2.616858926786128E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999552478978969	WITHOUT_CLASSIFICATION	4.475210210315826E-5	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999985995525373	WITHOUT_CLASSIFICATION	1.400447462668434E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9998826417227992	WITHOUT_CLASSIFICATION	1.1735827720077245E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999985618271539	WITHOUT_CLASSIFICATION	1.438172846155441E-6	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998602036021	WITHOUT_CLASSIFICATION	1.3979639780706864E-7	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9989699136335146	WITHOUT_CLASSIFICATION	0.0010300863664854097	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999987519319593	WITHOUT_CLASSIFICATION	1.248068040727962E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999881857764969	WITHOUT_CLASSIFICATION	1.1814223503111777E-4	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999967104583748	WITHOUT_CLASSIFICATION	3.2895416252796337E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998414158407185	WITHOUT_CLASSIFICATION	1.585841592815533E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999985618271539	WITHOUT_CLASSIFICATION	1.438172846155441E-6	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999994962543337	WITHOUT_CLASSIFICATION	5.037456662653405E-7	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9988977548939368	WITHOUT_CLASSIFICATION	0.001102245106063164	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999977151833608	WITHOUT_CLASSIFICATION	2.2848166393336234E-6	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998777000495511	WITHOUT_CLASSIFICATION	1.2229995044892974E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999953962417112	WITHOUT_CLASSIFICATION	4.603758288782421E-6	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.999813830700589	WITHOUT_CLASSIFICATION	1.8616929941103126E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999881857764969	WITHOUT_CLASSIFICATION	1.1814223503111777E-4	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999989426237821	WITHOUT_CLASSIFICATION	1.0573762178508133E-6	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998680307088417	WITHOUT_CLASSIFICATION	1.319692911582847E-4	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970882552888	WITHOUT_CLASSIFICATION	2.911744711166955E-6	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999764388409701	WITHOUT_CLASSIFICATION	2.3561159029902535E-5	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999906450674323	WITHOUT_CLASSIFICATION	9.354932567756322E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892161000807	WITHOUT_CLASSIFICATION	1.0783899919176413E-5	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999984529095114	WITHOUT_CLASSIFICATION	1.5470904885407122E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999984529095114	WITHOUT_CLASSIFICATION	1.5470904885407122E-6	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9971451723146166	WITHOUT_CLASSIFICATION	0.0028548276853833125	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999987581110881	WITHOUT_CLASSIFICATION	1.2418889119080352E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999977899536245	WITHOUT_CLASSIFICATION	2.210046375394052E-6	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999938673458404	WITHOUT_CLASSIFICATION	6.132654159694257E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999947370401734	WITHOUT_CLASSIFICATION	5.262959826605664E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985970930263	WITHOUT_CLASSIFICATION	1.4029069736379142E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992198240975	WITHOUT_CLASSIFICATION	7.801759025998914E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989274821499	WITHOUT_CLASSIFICATION	1.0725178500924557E-5	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9992323828131446	WITHOUT_CLASSIFICATION	7.67617186855416E-4	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969167075998	WITHOUT_CLASSIFICATION	3.083292400248542E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985970930263	WITHOUT_CLASSIFICATION	1.4029069736379142E-6	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992198240975	WITHOUT_CLASSIFICATION	7.801759025998914E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989274821499	WITHOUT_CLASSIFICATION	1.0725178500924557E-5	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999986017377307	WITHOUT_CLASSIFICATION	1.3982622693809165E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9997285632071244	WITHOUT_CLASSIFICATION	2.7143679287554344E-4	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999732239145726	WITHOUT_CLASSIFICATION	2.677608542745488E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998679602864731	WITHOUT_CLASSIFICATION	1.3203971352695042E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999961465469812	WITHOUT_CLASSIFICATION	3.8534530188110456E-5	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999694133209879	WITHOUT_CLASSIFICATION	3.058667901211058E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999976863967346	WITHOUT_CLASSIFICATION	2.313603265488243E-6	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9989402016296269	WITHOUT_CLASSIFICATION	0.0010597983703730868	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9999945474946578	WITHOUT_CLASSIFICATION	5.45250534215315E-6	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999997646800625	WITHOUT_CLASSIFICATION	2.353199375051301E-6	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999760206918009	WITHOUT_CLASSIFICATION	2.3979308199167398E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9952034106577845	WITHOUT_CLASSIFICATION	0.004796589342215555	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9983730412924303	WITHOUT_CLASSIFICATION	0.0016269587075697436	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9996742548774614	WITHOUT_CLASSIFICATION	3.2574512253863994E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999705990585617	WITHOUT_CLASSIFICATION	2.9400941438378385E-5	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9997789067555156	WITHOUT_CLASSIFICATION	2.2109324448451982E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9736976204410541	WITHOUT_CLASSIFICATION	0.026302379558945873	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999929733387095	WITHOUT_CLASSIFICATION	7.026661290455637E-6	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.9999971604026034	WITHOUT_CLASSIFICATION	2.8395973965529505E-6	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999996687392493	WITHOUT_CLASSIFICATION	3.312607506442339E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999888521084683	WITHOUT_CLASSIFICATION	1.1147891531647982E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999995808465455	WITHOUT_CLASSIFICATION	4.191534544937442E-6	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999651586419139	WITHOUT_CLASSIFICATION	3.4841358086074295E-5	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999887587790385	WITHOUT_CLASSIFICATION	1.1241220961522294E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999957516742002	WITHOUT_CLASSIFICATION	4.248325799784247E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999554434992112	WITHOUT_CLASSIFICATION	4.455650078875637E-5	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988909593144	WITHOUT_CLASSIFICATION	1.1090406856374615E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985438163065	WITHOUT_CLASSIFICATION	1.4561836935360443E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999753678876279	WITHOUT_CLASSIFICATION	2.4632112372127388E-5	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995047469431	WITHOUT_CLASSIFICATION	4.952530568847731E-7	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925806937621	WITHOUT_CLASSIFICATION	7.419306237845819E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997484006217329	WITHOUT_CLASSIFICATION	2.5159937826703063E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9997484006217329	WITHOUT_CLASSIFICATION	2.5159937826703063E-4	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999996458897441	WITHOUT_CLASSIFICATION	3.541102560174092E-7	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999996936874792	WITHOUT_CLASSIFICATION	3.0631252078810024E-7	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999990572507932	WITHOUT_CLASSIFICATION	9.427492067722346E-7	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999721082698173	WITHOUT_CLASSIFICATION	2.7891730182706187E-5	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9961911623110352	WITHOUT_CLASSIFICATION	0.0038088376889648815	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.999972438606311	WITHOUT_CLASSIFICATION	2.7561393689061924E-5	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9998752153295379	WITHOUT_CLASSIFICATION	1.2478467046213076E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999994099458004	WITHOUT_CLASSIFICATION	5.900541996415906E-7	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999416892174126	WITHOUT_CLASSIFICATION	5.831078258746662E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999429998547	WITHOUT_CLASSIFICATION	5.7000145356781194E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999920701743	WITHOUT_CLASSIFICATION	7.929825686901098E-8	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995788806404	WITHOUT_CLASSIFICATION	4.211193595437316E-7	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999028668083	WITHOUT_CLASSIFICATION	9.713319168621485E-8	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997133040301	WITHOUT_CLASSIFICATION	2.866959698204072E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998893026757	WITHOUT_CLASSIFICATION	1.1069732436913953E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999820211787	WITHOUT_CLASSIFICATION	1.797882130541829E-7	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999009135595	WITHOUT_CLASSIFICATION	9.908644043617849E-8	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997746049556	WITHOUT_CLASSIFICATION	2.2539504434001693E-7	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994578232205	WITHOUT_CLASSIFICATION	5.421767794599499E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911357182522	WITHOUT_CLASSIFICATION	8.86428174781603E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999912173893354	WITHOUT_CLASSIFICATION	8.782610664629312E-6	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9994721486697612	WITHOUT_CLASSIFICATION	5.278513302387125E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9968973522788955	WITHOUT_CLASSIFICATION	0.003102647721104407	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.998977337762665	WITHOUT_CLASSIFICATION	0.001022662237335054	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9739425228312675	WITHOUT_CLASSIFICATION	0.026057477168732465	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9999052526845319	WITHOUT_CLASSIFICATION	9.474731546805986E-5	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999967540754566	WITHOUT_CLASSIFICATION	3.2459245434031956E-6	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9996255661787773	WITHOUT_CLASSIFICATION	3.7443382122267214E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9968973522788955	WITHOUT_CLASSIFICATION	0.003102647721104407	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9968973522788955	WITHOUT_CLASSIFICATION	0.003102647721104407	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9817993063921522	WITHOUT_CLASSIFICATION	0.018200693607847915	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999925053110502	WITHOUT_CLASSIFICATION	7.494688949766721E-6	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999988768817877	WITHOUT_CLASSIFICATION	1.1231182122883657E-6	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.999948958629608	WITHOUT_CLASSIFICATION	5.104137039196769E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994401215515	WITHOUT_CLASSIFICATION	5.598784484820318E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999996687392493	WITHOUT_CLASSIFICATION	3.312607506442339E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.999992026328284	WITHOUT_CLASSIFICATION	7.9736717160285E-6	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999979488350437	WITHOUT_CLASSIFICATION	2.0511649563387555E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999988563319592	WITHOUT_CLASSIFICATION	1.143668040848498E-6	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981432778878093	WITHOUT_CLASSIFICATION	0.0018567221121907043	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999990801209407	WITHOUT_CLASSIFICATION	9.198790593000328E-6	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999981705077644	WITHOUT_CLASSIFICATION	1.829492235599245E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998596129091993	WITHOUT_CLASSIFICATION	1.4038709080065856E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998596129091993	WITHOUT_CLASSIFICATION	1.4038709080065856E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999718094564227	WITHOUT_CLASSIFICATION	2.8190543577366603E-5	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999718094564227	WITHOUT_CLASSIFICATION	2.8190543577366603E-5	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999958927279481	WITHOUT_CLASSIFICATION	4.107272051904065E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999922882754712	WITHOUT_CLASSIFICATION	7.711724528843042E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999995901018758	WITHOUT_CLASSIFICATION	4.098981241060328E-7	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999333770950635	WITHOUT_CLASSIFICATION	6.662290493646508E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9992761408272065	WITHOUT_CLASSIFICATION	7.238591727935059E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9929659824400862	WITHOUT_CLASSIFICATION	0.007034017559913816	DESIGN
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990859722678	WITHOUT_CLASSIFICATION	9.140277322325937E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969374271384	WITHOUT_CLASSIFICATION	3.062572861714998E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9614932803434371	WITHOUT_CLASSIFICATION	0.0385067196565629	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999998982381912	WITHOUT_CLASSIFICATION	1.0176180868589454E-7	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999240568626	WITHOUT_CLASSIFICATION	7.59431374266349E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999817872700189	WITHOUT_CLASSIFICATION	1.8212729981220115E-5	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9996545271679206	WITHOUT_CLASSIFICATION	3.4547283207935126E-4	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.99999933215123	WITHOUT_CLASSIFICATION	6.678487699163975E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999935077654973	WITHOUT_CLASSIFICATION	6.492234502611133E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999972113016484	WITHOUT_CLASSIFICATION	2.7886983516199846E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999972113016484	WITHOUT_CLASSIFICATION	2.7886983516199846E-6	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999932565756647	WITHOUT_CLASSIFICATION	6.743424335295167E-5	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999976626563534	WITHOUT_CLASSIFICATION	2.337343646606835E-6	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999960071356	WITHOUT_CLASSIFICATION	3.992864434604794E-9	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999985157063912	WITHOUT_CLASSIFICATION	1.484293608710213E-6	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941472304886	WITHOUT_CLASSIFICATION	5.852769511333419E-6	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970478550961	WITHOUT_CLASSIFICATION	2.952144903768881E-6	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.999998352596073	WITHOUT_CLASSIFICATION	1.6474039270936275E-6	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730525096683	WITHOUT_CLASSIFICATION	2.6947490331806355E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999975282143388	WITHOUT_CLASSIFICATION	2.4717856611548217E-6	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999975798190158	WITHOUT_CLASSIFICATION	2.4201809842062243E-6	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9950034704111047	WITHOUT_CLASSIFICATION	0.0049965295888953	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9998387540877745	WITHOUT_CLASSIFICATION	1.6124591222544708E-4	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994737558217	WITHOUT_CLASSIFICATION	5.26244178254547E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999996331197729	WITHOUT_CLASSIFICATION	3.6688022711322437E-7	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999959624027487	WITHOUT_CLASSIFICATION	4.037597251351297E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9999754488825726	WITHOUT_CLASSIFICATION	2.4551117427385872E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9965143414956442	WITHOUT_CLASSIFICATION	0.0034856585043557546	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9996892655802919	WITHOUT_CLASSIFICATION	3.107344197080685E-4	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9995554296113498	WITHOUT_CLASSIFICATION	4.445703886501699E-4	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999998476883166	WITHOUT_CLASSIFICATION	1.5231168328490518E-7	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999851292042	WITHOUT_CLASSIFICATION	1.4870795765851747E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.999999722921761	WITHOUT_CLASSIFICATION	2.7707823902733593E-7	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999998559121432	WITHOUT_CLASSIFICATION	1.4408785680369821E-6	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999925803471951	WITHOUT_CLASSIFICATION	7.419652805037782E-6	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999975251137041	WITHOUT_CLASSIFICATION	2.4748862959190538E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995641750310579	WITHOUT_CLASSIFICATION	4.3582496894211623E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999501879578823	WITHOUT_CLASSIFICATION	4.981204211771755E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9999583984613615	WITHOUT_CLASSIFICATION	4.160153863849577E-5	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.99999959676211	WITHOUT_CLASSIFICATION	4.0323788995533423E-7	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998729003568323	WITHOUT_CLASSIFICATION	1.2709964316766188E-4	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999683696668934	WITHOUT_CLASSIFICATION	3.163033310657191E-5	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999859503798812	WITHOUT_CLASSIFICATION	1.4049620118716573E-5	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997777337100534	WITHOUT_CLASSIFICATION	2.2226628994648852E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9810891276294568	WITHOUT_CLASSIFICATION	0.01891087237054318	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999998311903824	WITHOUT_CLASSIFICATION	1.6880961757373687E-7	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9884882651677422	WITHOUT_CLASSIFICATION	0.011511734832257772	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999984060082502	WITHOUT_CLASSIFICATION	1.593991749927641E-6	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9996981901640257	WITHOUT_CLASSIFICATION	3.0180983597419915E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999963755534372	WITHOUT_CLASSIFICATION	3.6244465627395763E-6	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999114885416762	WITHOUT_CLASSIFICATION	8.851145832368548E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.998597839821378	WITHOUT_CLASSIFICATION	0.0014021601786220808	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999998423433754	WITHOUT_CLASSIFICATION	1.576566246080417E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9956780139913252	WITHOUT_CLASSIFICATION	0.004321986008674847	DESIGN
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9989901217684846	WITHOUT_CLASSIFICATION	0.001009878231515432	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999027682286619	WITHOUT_CLASSIFICATION	9.723177133813952E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.999862602071828	WITHOUT_CLASSIFICATION	1.3739792817204043E-4	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999996039083136	WITHOUT_CLASSIFICATION	3.960916865107655E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999976358246767	WITHOUT_CLASSIFICATION	2.3641753233721385E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999980137850656	WITHOUT_CLASSIFICATION	1.986214934438826E-6	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9996708791786546	WITHOUT_CLASSIFICATION	3.291208213454038E-4	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999876285496739	WITHOUT_CLASSIFICATION	1.2371450326142284E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9989752881870408	WITHOUT_CLASSIFICATION	0.0010247118129591893	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9995106080728328	WITHOUT_CLASSIFICATION	4.893919271672667E-4	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999949522280585	WITHOUT_CLASSIFICATION	5.047771941578591E-6	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999945941390116	WITHOUT_CLASSIFICATION	5.4058609883499E-6	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999912228593906	WITHOUT_CLASSIFICATION	8.777140609343637E-6	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9946061448850722	WITHOUT_CLASSIFICATION	0.005393855114927835	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.999999201862252	WITHOUT_CLASSIFICATION	7.981377479570085E-7	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999908213901724	WITHOUT_CLASSIFICATION	9.178609827531218E-6	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9969172817372868	WITHOUT_CLASSIFICATION	0.0030827182627132157	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999790277769357	WITHOUT_CLASSIFICATION	2.0972223064298297E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999987504577523	WITHOUT_CLASSIFICATION	1.2495422476168254E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999990246060734	WITHOUT_CLASSIFICATION	9.753939266190176E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999768796093339	WITHOUT_CLASSIFICATION	2.3120390666178015E-5	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999991844466086	WITHOUT_CLASSIFICATION	8.155533913132203E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998597568093988	WITHOUT_CLASSIFICATION	1.4024319060123482E-4	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9440333138904415	WITHOUT_CLASSIFICATION	0.05596668610955843	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999966371659185	WITHOUT_CLASSIFICATION	3.362834081564313E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999828917405049	WITHOUT_CLASSIFICATION	1.710825949508887E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999828917405049	WITHOUT_CLASSIFICATION	1.710825949508887E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999998890617486	WITHOUT_CLASSIFICATION	1.1093825132593948E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999629473558795	WITHOUT_CLASSIFICATION	3.705264412038986E-5	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.999907856629267	WITHOUT_CLASSIFICATION	9.214337073301333E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998476370481786	WITHOUT_CLASSIFICATION	1.5236295182134718E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999674769926556	WITHOUT_CLASSIFICATION	3.2523007344330995E-5	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999301577594188	WITHOUT_CLASSIFICATION	6.984224058120933E-5	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9991660787311277	WITHOUT_CLASSIFICATION	8.339212688722501E-4	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999926849539654	WITHOUT_CLASSIFICATION	7.3150460344896394E-6	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9999044098128834	WITHOUT_CLASSIFICATION	9.559018711659027E-5	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999888316061027	WITHOUT_CLASSIFICATION	1.116839389734389E-5	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999997540398861	WITHOUT_CLASSIFICATION	2.459601138932956E-7	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.999997582473172	WITHOUT_CLASSIFICATION	2.4175268279395024E-6	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.999994455563164	WITHOUT_CLASSIFICATION	5.54443683599071E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999979141625094	WITHOUT_CLASSIFICATION	2.0858374906626354E-6	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9997820155256011	WITHOUT_CLASSIFICATION	2.1798447439890596E-4	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.8174606746469517	WITHOUT_CLASSIFICATION	0.18253932535304823	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9998999583701714	WITHOUT_CLASSIFICATION	1.0004162982859324E-4	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.5164646670048735	DESIGN	0.4835353329951265	WITHOUT_CLASSIFICATION
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.999284270980368	WITHOUT_CLASSIFICATION	7.157290196320289E-4	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9989382903907078	WITHOUT_CLASSIFICATION	0.0010617096092921806	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999973732228068	WITHOUT_CLASSIFICATION	2.6267771932763176E-6	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.99958464518097	WITHOUT_CLASSIFICATION	4.1535481902999155E-4	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9914527097062891	WITHOUT_CLASSIFICATION	0.008547290293710819	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9989105268385631	WITHOUT_CLASSIFICATION	0.0010894731614368716	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999945917583697	WITHOUT_CLASSIFICATION	5.40824163033484E-6	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9999514726792877	WITHOUT_CLASSIFICATION	4.852732071214809E-5	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999392603661716	WITHOUT_CLASSIFICATION	6.0739633828290934E-5	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999797006902096	WITHOUT_CLASSIFICATION	2.029930979051767E-5	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9999919378174283	WITHOUT_CLASSIFICATION	8.062182571719587E-6	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999987480872077	WITHOUT_CLASSIFICATION	1.251912792372725E-6	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999987542044239	WITHOUT_CLASSIFICATION	1.2457955761475326E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999986992563473	WITHOUT_CLASSIFICATION	1.3007436527240817E-6	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999923677744315	WITHOUT_CLASSIFICATION	7.632225568529215E-6	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.999986928509854	WITHOUT_CLASSIFICATION	1.3071490145892919E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997897692601297	WITHOUT_CLASSIFICATION	2.1023073987025246E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997897692601297	WITHOUT_CLASSIFICATION	2.1023073987025246E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999579288961417	WITHOUT_CLASSIFICATION	4.207110385828683E-5	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9991862598820416	WITHOUT_CLASSIFICATION	8.137401179583756E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999980294722925	WITHOUT_CLASSIFICATION	1.970527707433536E-6	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999932297853336	WITHOUT_CLASSIFICATION	6.7702146663523475E-6	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9989623184232391	WITHOUT_CLASSIFICATION	0.001037681576760829	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9997152658509831	WITHOUT_CLASSIFICATION	2.847341490167944E-4	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999994549816995	WITHOUT_CLASSIFICATION	5.450183005305172E-7	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999197509946469	WITHOUT_CLASSIFICATION	8.024900535302167E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9917166992837031	WITHOUT_CLASSIFICATION	0.008283300716296882	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999924779491167	WITHOUT_CLASSIFICATION	7.522050883166768E-6	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999480376991241	WITHOUT_CLASSIFICATION	5.196230087590614E-5	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9433589548464918	WITHOUT_CLASSIFICATION	0.056641045153508124	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999997425631881	WITHOUT_CLASSIFICATION	2.5743681190055255E-7	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999961431356864	WITHOUT_CLASSIFICATION	3.8568643136041975E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998925705937	WITHOUT_CLASSIFICATION	1.0742940621783667E-7	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9930957531678782	WITHOUT_CLASSIFICATION	0.0069042468321216756	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9930957531678782	WITHOUT_CLASSIFICATION	0.0069042468321216756	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999980523913204	WITHOUT_CLASSIFICATION	1.9476086795901325E-5	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999992178071763	WITHOUT_CLASSIFICATION	7.821928236432748E-7	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9833680547438964	WITHOUT_CLASSIFICATION	0.016631945256103526	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999937405987317	WITHOUT_CLASSIFICATION	6.259401268336011E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999291290547232	WITHOUT_CLASSIFICATION	7.087094527681092E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999569461712	WITHOUT_CLASSIFICATION	4.3053828898946215E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999978589695954	WITHOUT_CLASSIFICATION	2.14103040468711E-6	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999978589695954	WITHOUT_CLASSIFICATION	2.14103040468711E-6	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999985204996507	WITHOUT_CLASSIFICATION	1.4795003493686049E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9998942041659998	WITHOUT_CLASSIFICATION	1.0579583400009786E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999033784118858	WITHOUT_CLASSIFICATION	9.662158811419895E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999628719826	WITHOUT_CLASSIFICATION	3.7128017411797837E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.9640115209373602	WITHOUT_CLASSIFICATION	0.03598847906263985	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999859863335377	WITHOUT_CLASSIFICATION	1.4013666462130171E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999989739758651	WITHOUT_CLASSIFICATION	1.0260241348641816E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999917495809315	WITHOUT_CLASSIFICATION	8.250419068360814E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999999081788772	WITHOUT_CLASSIFICATION	9.182112284788009E-8	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9996843641381632	WITHOUT_CLASSIFICATION	3.156358618367848E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9969534696258809	WITHOUT_CLASSIFICATION	0.003046530374119134	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999747292478953	WITHOUT_CLASSIFICATION	2.5270752104617938E-5	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999965000971074	WITHOUT_CLASSIFICATION	3.4999028926565023E-6	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999997271986676	WITHOUT_CLASSIFICATION	2.7280133238733495E-7	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999908596601433	WITHOUT_CLASSIFICATION	9.140339856618739E-6	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999929679580606	WITHOUT_CLASSIFICATION	7.03204193940416E-6	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999822487132	WITHOUT_CLASSIFICATION	1.7751286788719152E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999871034812827	WITHOUT_CLASSIFICATION	1.289651871719534E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997277809134854	WITHOUT_CLASSIFICATION	2.722190865146062E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999969815606339	WITHOUT_CLASSIFICATION	3.018439366175487E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999994081722271	WITHOUT_CLASSIFICATION	5.918277728753875E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.999999492013326	WITHOUT_CLASSIFICATION	5.079866739949728E-7	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999951122365976	WITHOUT_CLASSIFICATION	4.887763402384346E-6	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9809011653197127	WITHOUT_CLASSIFICATION	0.01909883468028723	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999503197324966	WITHOUT_CLASSIFICATION	4.9680267503351717E-5	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996937227156044	WITHOUT_CLASSIFICATION	3.062772843956575E-4	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.8139681915758352	WITHOUT_CLASSIFICATION	0.18603180842416486	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.99991607579303	WITHOUT_CLASSIFICATION	8.392420697006461E-5	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9997435064171178	WITHOUT_CLASSIFICATION	2.564935828821526E-4	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999959461095752	WITHOUT_CLASSIFICATION	4.0538904248647675E-6	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9991005462928728	WITHOUT_CLASSIFICATION	8.994537071272492E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.999953358010454	WITHOUT_CLASSIFICATION	4.6641989545953116E-5	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9997285914742136	WITHOUT_CLASSIFICATION	2.7140852578644395E-4	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999864455237649	WITHOUT_CLASSIFICATION	1.3554476235141454E-5	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999827308603906	WITHOUT_CLASSIFICATION	1.7269139609417902E-5	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999830092868245	WITHOUT_CLASSIFICATION	1.6990713175498394E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9999704098100595	WITHOUT_CLASSIFICATION	2.959018994054473E-5	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.999992801231976	WITHOUT_CLASSIFICATION	7.1987680239891695E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997182176312	WITHOUT_CLASSIFICATION	2.8178236875367344E-7	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999975561270731	WITHOUT_CLASSIFICATION	2.4438729267727662E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998602942831	WITHOUT_CLASSIFICATION	1.3970571693911262E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999935839134516	WITHOUT_CLASSIFICATION	6.4160865483717E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999814636721569	WITHOUT_CLASSIFICATION	1.8536327843150468E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999336219340155	WITHOUT_CLASSIFICATION	6.637806598445402E-5	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999957249688567	WITHOUT_CLASSIFICATION	4.275031143397289E-6	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999898003577434	WITHOUT_CLASSIFICATION	1.0199642256611465E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999997182176312	WITHOUT_CLASSIFICATION	2.8178236875367344E-7	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999975561270731	WITHOUT_CLASSIFICATION	2.4438729267727662E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999262458467846	WITHOUT_CLASSIFICATION	7.375415321539185E-4	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9983859867923781	WITHOUT_CLASSIFICATION	0.0016140132076218926	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999638416307829	WITHOUT_CLASSIFICATION	3.6158369217108996E-5	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9994512647403166	WITHOUT_CLASSIFICATION	5.487352596833482E-4	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999721015599954	WITHOUT_CLASSIFICATION	2.7898440004608093E-5	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999323254992858	WITHOUT_CLASSIFICATION	6.767450071428667E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999974990875939	WITHOUT_CLASSIFICATION	2.50091240609949E-5	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999976039218341	WITHOUT_CLASSIFICATION	2.3960781659535593E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999283013870115	WITHOUT_CLASSIFICATION	7.169861298853167E-5	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9971046862769826	WITHOUT_CLASSIFICATION	0.0028953137230174016	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999999853855089	WITHOUT_CLASSIFICATION	1.4614491091683053E-7	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9971046862769826	WITHOUT_CLASSIFICATION	0.0028953137230174016	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999557722734	WITHOUT_CLASSIFICATION	4.422772658176332E-8	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999058032360146	WITHOUT_CLASSIFICATION	9.41967639854055E-5	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999996650749554	WITHOUT_CLASSIFICATION	3.349250446199063E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964882008937	WITHOUT_CLASSIFICATION	3.5117991062635733E-6	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9979006801922814	WITHOUT_CLASSIFICATION	0.002099319807718603	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998903153967067	WITHOUT_CLASSIFICATION	1.0968460329335386E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998903153967067	WITHOUT_CLASSIFICATION	1.0968460329335386E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9997612582204087	WITHOUT_CLASSIFICATION	2.3874177959126301E-4	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9974884218409774	WITHOUT_CLASSIFICATION	0.002511578159022511	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999871348181125	WITHOUT_CLASSIFICATION	1.2865181887508045E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998890771725559	WITHOUT_CLASSIFICATION	1.1092282744417651E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999012825190078	WITHOUT_CLASSIFICATION	9.87174809922549E-5	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.992844889640137	WITHOUT_CLASSIFICATION	0.007155110359863029	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999998408989045	WITHOUT_CLASSIFICATION	1.5910109559931934E-7	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999954308851701	WITHOUT_CLASSIFICATION	4.569114829956512E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999948417636925	WITHOUT_CLASSIFICATION	5.158236307548347E-6	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.998785309086184	WITHOUT_CLASSIFICATION	0.001214690913815993	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999998516201521	WITHOUT_CLASSIFICATION	1.4837984786100405E-7	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9997036058949056	WITHOUT_CLASSIFICATION	2.963941050944376E-4	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9999699629090674	WITHOUT_CLASSIFICATION	3.003709093253535E-5	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999995000448016	WITHOUT_CLASSIFICATION	4.999551984112155E-7	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9961281420739214	WITHOUT_CLASSIFICATION	0.0038718579260786914	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9998020347115826	WITHOUT_CLASSIFICATION	1.9796528841749993E-4	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999988011680259	WITHOUT_CLASSIFICATION	1.1988319740919936E-5	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999331428049452	WITHOUT_CLASSIFICATION	6.685719505486019E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9998236199258784	WITHOUT_CLASSIFICATION	1.7638007412153347E-4	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998780446205567	WITHOUT_CLASSIFICATION	1.219553794432456E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999620851624639	WITHOUT_CLASSIFICATION	3.7914837536024044E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999983324107918	WITHOUT_CLASSIFICATION	1.6675892082744477E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997634480561821	WITHOUT_CLASSIFICATION	2.3655194381789595E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9995612186095654	WITHOUT_CLASSIFICATION	4.387813904346369E-4	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999453868142872	WITHOUT_CLASSIFICATION	5.461318571274445E-5	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999979269198164	WITHOUT_CLASSIFICATION	2.0730801835987347E-5	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999942039112643	WITHOUT_CLASSIFICATION	5.796088735721652E-6	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9997162667645225	WITHOUT_CLASSIFICATION	2.8373323547753026E-4	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9984888347911814	WITHOUT_CLASSIFICATION	0.001511165208818612	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9748713777621886	WITHOUT_CLASSIFICATION	0.025128622237811368	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9886916223131157	WITHOUT_CLASSIFICATION	0.011308377686884235	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9993586038631563	WITHOUT_CLASSIFICATION	6.413961368436061E-4	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.9999998408989045	WITHOUT_CLASSIFICATION	1.5910109559931934E-7	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999980122087747	WITHOUT_CLASSIFICATION	1.9877912253064096E-6	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998782868315739	WITHOUT_CLASSIFICATION	1.217131684262006E-4	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9721701775476592	WITHOUT_CLASSIFICATION	0.027829822452340874	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999997107473669	WITHOUT_CLASSIFICATION	2.892526330874488E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999990720795164	WITHOUT_CLASSIFICATION	9.279204835659614E-7	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999956819097013	WITHOUT_CLASSIFICATION	4.3180902987311575E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998890771725559	WITHOUT_CLASSIFICATION	1.1092282744417651E-4	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9998890771725559	WITHOUT_CLASSIFICATION	1.1092282744417651E-4	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999912238934513	WITHOUT_CLASSIFICATION	8.776106548650889E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.99999802432705	WITHOUT_CLASSIFICATION	1.9756729501195307E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9999299956498225	WITHOUT_CLASSIFICATION	7.000435017749548E-5	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999944070207955	WITHOUT_CLASSIFICATION	5.592979204545489E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9997782236737971	WITHOUT_CLASSIFICATION	2.2177632620288258E-4	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999877728565804	WITHOUT_CLASSIFICATION	1.2227143419681572E-5	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.99995486933199	WITHOUT_CLASSIFICATION	4.513066801005944E-5	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999150905037	WITHOUT_CLASSIFICATION	8.490949636109934E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9980654740598405	WITHOUT_CLASSIFICATION	0.001934525940159493	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999920920050254	WITHOUT_CLASSIFICATION	7.907994974709127E-6	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9997954040931869	WITHOUT_CLASSIFICATION	2.0459590681310935E-4	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999263008367848	WITHOUT_CLASSIFICATION	7.369916321527468E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.999997507939776	WITHOUT_CLASSIFICATION	2.4920602239561008E-6	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999920920050254	WITHOUT_CLASSIFICATION	7.907994974709127E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999997393938943	WITHOUT_CLASSIFICATION	2.606061056426024E-7	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9983424054822954	WITHOUT_CLASSIFICATION	0.0016575945177046917	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999979481248351	WITHOUT_CLASSIFICATION	2.0518751648541975E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9756581003564366	WITHOUT_CLASSIFICATION	0.024341899643563397	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999263008367848	WITHOUT_CLASSIFICATION	7.369916321527468E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999571186220658	WITHOUT_CLASSIFICATION	4.288137793420848E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999274360750545	WITHOUT_CLASSIFICATION	7.256392494550569E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9983989617552724	WITHOUT_CLASSIFICATION	0.0016010382447276372	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999994637281727	WITHOUT_CLASSIFICATION	5.362718272348001E-7	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998830925371567	WITHOUT_CLASSIFICATION	1.1690746284339346E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999992251713726	WITHOUT_CLASSIFICATION	7.748286273857838E-7	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996887399543	WITHOUT_CLASSIFICATION	3.112600456644037E-7	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999998731697341	WITHOUT_CLASSIFICATION	1.2683026589298972E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9978187070800238	WITHOUT_CLASSIFICATION	0.002181292919976203	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998161708045462	WITHOUT_CLASSIFICATION	1.8382919545378179E-4	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9999845696880479	WITHOUT_CLASSIFICATION	1.5430311952077908E-5	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999378348553183	WITHOUT_CLASSIFICATION	6.216514468164013E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999920920050254	WITHOUT_CLASSIFICATION	7.907994974709127E-6	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999571186220658	WITHOUT_CLASSIFICATION	4.288137793420848E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9983989617552724	WITHOUT_CLASSIFICATION	0.0016010382447276372	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999860494514831	WITHOUT_CLASSIFICATION	1.3950548516967951E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9988359597120317	WITHOUT_CLASSIFICATION	0.0011640402879683433	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999910602944764	WITHOUT_CLASSIFICATION	8.939705523576952E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999263008367848	WITHOUT_CLASSIFICATION	7.369916321527468E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999558516375248	WITHOUT_CLASSIFICATION	4.4148362475205657E-4	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999985665468862	WITHOUT_CLASSIFICATION	1.4334531137126954E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999952247300439	WITHOUT_CLASSIFICATION	4.775269956189215E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985449355024	WITHOUT_CLASSIFICATION	1.4550644975544984E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999998731697341	WITHOUT_CLASSIFICATION	1.2683026589298972E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999997393938943	WITHOUT_CLASSIFICATION	2.606061056426024E-7	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999982333376526	WITHOUT_CLASSIFICATION	1.7666623473962129E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999937774611358	WITHOUT_CLASSIFICATION	6.222538864115835E-6	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.999961948297518	WITHOUT_CLASSIFICATION	3.80517024819323E-5	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9996753548199484	WITHOUT_CLASSIFICATION	3.2464518005165916E-4	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9180725193871355	WITHOUT_CLASSIFICATION	0.08192748061286458	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9848857588205671	WITHOUT_CLASSIFICATION	0.015114241179432867	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9999814868442136	WITHOUT_CLASSIFICATION	1.8513155786374466E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964882008937	WITHOUT_CLASSIFICATION	3.5117991062635733E-6	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994266607812516	WITHOUT_CLASSIFICATION	5.733392187484353E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999978814800893	WITHOUT_CLASSIFICATION	2.1185199107109255E-6	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.998109910563323	WITHOUT_CLASSIFICATION	0.0018900894366770285	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9997705677919636	WITHOUT_CLASSIFICATION	2.2943220803641655E-4	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9962704004320535	WITHOUT_CLASSIFICATION	0.003729599567946577	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999993404521199	WITHOUT_CLASSIFICATION	6.595478802328557E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999999622373643	WITHOUT_CLASSIFICATION	3.7762635610697565E-8	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999945506339198	WITHOUT_CLASSIFICATION	5.449366080127194E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999985449355024	WITHOUT_CLASSIFICATION	1.4550644975544984E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999955553088711	WITHOUT_CLASSIFICATION	4.444691128995828E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999980116209584	WITHOUT_CLASSIFICATION	1.9883790416843497E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999884478159301	WITHOUT_CLASSIFICATION	1.1552184069932823E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999995026480268	WITHOUT_CLASSIFICATION	4.973519732715007E-7	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9999432443541321	WITHOUT_CLASSIFICATION	5.675564586804371E-5	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999872192058654	WITHOUT_CLASSIFICATION	1.2780794134598833E-5	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999996752327994	WITHOUT_CLASSIFICATION	3.247672005600486E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9992528372817522	WITHOUT_CLASSIFICATION	7.471627182477099E-4	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999996721880092	WITHOUT_CLASSIFICATION	3.278119908117331E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999316464913217	WITHOUT_CLASSIFICATION	6.835350867830687E-5	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999997520498605	WITHOUT_CLASSIFICATION	2.479501395768783E-7	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999490087585	WITHOUT_CLASSIFICATION	5.099124149755087E-7	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9996979276825825	WITHOUT_CLASSIFICATION	3.020723174174494E-4	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9998880906349475	WITHOUT_CLASSIFICATION	1.1190936505234742E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999669968255717	WITHOUT_CLASSIFICATION	3.300317442833725E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999872279948454	WITHOUT_CLASSIFICATION	1.2772005154734042E-5	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9891783596515625	WITHOUT_CLASSIFICATION	0.010821640348437392	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999573939347179	WITHOUT_CLASSIFICATION	4.260606528211607E-5	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999951520746816	WITHOUT_CLASSIFICATION	4.847925318429563E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9993071100059672	WITHOUT_CLASSIFICATION	6.928899940329007E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999981216429832	WITHOUT_CLASSIFICATION	1.878357016784548E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999935886310579	WITHOUT_CLASSIFICATION	6.411368942084722E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999998976359718	WITHOUT_CLASSIFICATION	1.0236402820510103E-6	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999955479121144	WITHOUT_CLASSIFICATION	4.452087885582399E-6	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999956175202661	WITHOUT_CLASSIFICATION	4.382479733860152E-6	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6020625489000145	WITHOUT_CLASSIFICATION	0.39793745109998535	DESIGN
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.99997279900521	WITHOUT_CLASSIFICATION	2.7200994790058207E-5	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999819933519589	WITHOUT_CLASSIFICATION	1.8006648041104536E-5	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999960176910615	WITHOUT_CLASSIFICATION	3.982308938498339E-6	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.8716632894514728	WITHOUT_CLASSIFICATION	0.12833671054852722	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999998666730069	WITHOUT_CLASSIFICATION	1.3332699311249486E-7	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.998353441764978	WITHOUT_CLASSIFICATION	0.001646558235022001	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999834886605858	WITHOUT_CLASSIFICATION	1.6511339414081213E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999905886686471	WITHOUT_CLASSIFICATION	9.411331352808422E-6	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999981356059958	WITHOUT_CLASSIFICATION	1.8643940041312257E-6	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998604343674	WITHOUT_CLASSIFICATION	1.3956563268620154E-7	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998898415121	WITHOUT_CLASSIFICATION	1.1015848788727855E-7	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9790587171387635	WITHOUT_CLASSIFICATION	0.020941282861236497	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998604343674	WITHOUT_CLASSIFICATION	1.3956563268620154E-7	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999981356059958	WITHOUT_CLASSIFICATION	1.8643940041312257E-6	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999998898415121	WITHOUT_CLASSIFICATION	1.1015848788727855E-7	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.999999862028902	WITHOUT_CLASSIFICATION	1.3797109792512644E-7	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998439215736622	WITHOUT_CLASSIFICATION	1.5607842633782502E-4	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999993107701488	WITHOUT_CLASSIFICATION	6.892298511857788E-7	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9999924423835874	WITHOUT_CLASSIFICATION	7.557616412512053E-6	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997046593256	WITHOUT_CLASSIFICATION	2.953406743889903E-7	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.8981840819265263	DESIGN	0.10181591807347362	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.999205028533027	WITHOUT_CLASSIFICATION	7.949714669730255E-4	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9628719238749056	WITHOUT_CLASSIFICATION	0.03712807612509444	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999905138729785	WITHOUT_CLASSIFICATION	9.486127021382086E-6	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9998841620737655	WITHOUT_CLASSIFICATION	1.1583792623452267E-4	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999995175011245	WITHOUT_CLASSIFICATION	4.824988754630094E-7	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999982816068372	WITHOUT_CLASSIFICATION	1.718393162816668E-6	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9989757284272706	WITHOUT_CLASSIFICATION	0.0010242715727294496	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9999313143745686	WITHOUT_CLASSIFICATION	6.868562543144342E-5	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999983630485125	WITHOUT_CLASSIFICATION	1.6369514874576846E-6	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999739429327	WITHOUT_CLASSIFICATION	2.6057067337347873E-8	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999580211751808	WITHOUT_CLASSIFICATION	4.197882481901411E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999910575666301	WITHOUT_CLASSIFICATION	8.942433369951777E-6	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9990958427263817	WITHOUT_CLASSIFICATION	9.04157273618237E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999904806419407	WITHOUT_CLASSIFICATION	9.519358059373063E-6	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9976895186065788	WITHOUT_CLASSIFICATION	0.002310481393421087	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998740461319	WITHOUT_CLASSIFICATION	1.2595386818610673E-7	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999992705267872	WITHOUT_CLASSIFICATION	7.294732127947349E-7	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999872586315	WITHOUT_CLASSIFICATION	1.274136859096762E-8	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997664971767651	WITHOUT_CLASSIFICATION	2.335028232349408E-4	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9997664971767651	WITHOUT_CLASSIFICATION	2.335028232349408E-4	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997944683383	WITHOUT_CLASSIFICATION	2.055316616982707E-7	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999997944683383	WITHOUT_CLASSIFICATION	2.055316616982707E-7	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9999036977407323	WITHOUT_CLASSIFICATION	9.630225926766711E-5	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999580211751808	WITHOUT_CLASSIFICATION	4.197882481901411E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999904796739029	WITHOUT_CLASSIFICATION	9.520326097123648E-6	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999846427315	WITHOUT_CLASSIFICATION	1.5357268493623762E-8	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996111329914462	WITHOUT_CLASSIFICATION	3.8886700855381303E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9996111329914462	WITHOUT_CLASSIFICATION	3.8886700855381303E-4	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999988913323582	WITHOUT_CLASSIFICATION	1.1086676417462452E-6	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999981127044035	WITHOUT_CLASSIFICATION	1.887295596499392E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9998869948653684	WITHOUT_CLASSIFICATION	1.1300513463165754E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999998459751702	WITHOUT_CLASSIFICATION	1.5402482987575755E-7	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9377145642984301	WITHOUT_CLASSIFICATION	0.06228543570156973	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999961791159366	WITHOUT_CLASSIFICATION	3.820884063337201E-6	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9997196307931382	WITHOUT_CLASSIFICATION	2.8036920686182664E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9976349090511091	WITHOUT_CLASSIFICATION	0.002365090948890942	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9999814497039369	WITHOUT_CLASSIFICATION	1.8550296063132737E-5	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999836988199187	WITHOUT_CLASSIFICATION	1.6301180081430286E-5	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999973059957132	WITHOUT_CLASSIFICATION	2.6940042868166296E-6	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999903164441927	WITHOUT_CLASSIFICATION	9.683555807379495E-6	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.999999116369902	WITHOUT_CLASSIFICATION	8.836300980738706E-7	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.9999992657672581	WITHOUT_CLASSIFICATION	7.342327418527896E-7	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999889295726005	WITHOUT_CLASSIFICATION	1.1070427399401326E-5	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999988179789645	WITHOUT_CLASSIFICATION	1.1820210354901082E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984803762352149	WITHOUT_CLASSIFICATION	0.0015196237647851453	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999976785785516	WITHOUT_CLASSIFICATION	2.321421448354741E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999409040006033	WITHOUT_CLASSIFICATION	5.909599939660896E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.999978602805764	WITHOUT_CLASSIFICATION	2.1397194236040438E-5	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999948371620017	WITHOUT_CLASSIFICATION	5.162837998409984E-6	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9998638829157727	WITHOUT_CLASSIFICATION	1.3611708422740283E-4	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999999116403868	WITHOUT_CLASSIFICATION	8.83596131008037E-8	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999817632618561	WITHOUT_CLASSIFICATION	1.8236738143938272E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9999721082698173	WITHOUT_CLASSIFICATION	2.7891730182706187E-5	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999527193104178	WITHOUT_CLASSIFICATION	4.7280689582108905E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.999999490087585	WITHOUT_CLASSIFICATION	5.099124149755087E-7	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999900290694257	WITHOUT_CLASSIFICATION	9.970930574348815E-6	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999533591785238	WITHOUT_CLASSIFICATION	4.664082147618076E-5	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999892407956908	WITHOUT_CLASSIFICATION	1.0759204309116339E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983310991039	WITHOUT_CLASSIFICATION	1.6689008960982326E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999869351864275	WITHOUT_CLASSIFICATION	1.306481357250221E-5	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9999869351864275	WITHOUT_CLASSIFICATION	1.306481357250221E-5	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9982041193864524	WITHOUT_CLASSIFICATION	0.0017958806135475454	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.999998017517269	WITHOUT_CLASSIFICATION	1.9824827309470835E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999934005560481	WITHOUT_CLASSIFICATION	6.599443951814324E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.9999934005560481	WITHOUT_CLASSIFICATION	6.599443951814324E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9967306789687251	WITHOUT_CLASSIFICATION	0.0032693210312747514	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9994915028805951	WITHOUT_CLASSIFICATION	5.084971194048037E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999980583141523	WITHOUT_CLASSIFICATION	1.941685847656509E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994401215515	WITHOUT_CLASSIFICATION	5.598784484820318E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9998025311405211	WITHOUT_CLASSIFICATION	1.9746885947894997E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999971470978546	WITHOUT_CLASSIFICATION	2.85290214544676E-6	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9999985676411247	WITHOUT_CLASSIFICATION	1.432358875290155E-6	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999968639484643	WITHOUT_CLASSIFICATION	3.1360515356905974E-6	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9986901269269979	WITHOUT_CLASSIFICATION	0.0013098730730020584	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9986901269269979	WITHOUT_CLASSIFICATION	0.0013098730730020584	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9996804914954753	WITHOUT_CLASSIFICATION	3.195085045247496E-4	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999579256098	WITHOUT_CLASSIFICATION	4.207439028684651E-8	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999999579256098	WITHOUT_CLASSIFICATION	4.207439028684651E-8	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9989449359019984	WITHOUT_CLASSIFICATION	0.0010550640980016047	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999998542407221	WITHOUT_CLASSIFICATION	1.4575927777919154E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9987468158062529	WITHOUT_CLASSIFICATION	0.0012531841937470914	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999999039737364	WITHOUT_CLASSIFICATION	9.602626360505298E-8	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.99999993976517	WITHOUT_CLASSIFICATION	6.023482999205876E-8	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999997348757568	WITHOUT_CLASSIFICATION	2.6512424328511946E-7	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999973653268392	WITHOUT_CLASSIFICATION	2.634673160831418E-6	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9996092350473158	WITHOUT_CLASSIFICATION	3.9076495268417356E-4	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999660884390552	WITHOUT_CLASSIFICATION	3.3911560944721934E-5	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9913096600672384	WITHOUT_CLASSIFICATION	0.008690339932761578	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999971079785662	WITHOUT_CLASSIFICATION	2.89202143384129E-6	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9984544353969702	WITHOUT_CLASSIFICATION	0.0015455646030297218	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999961077818452	WITHOUT_CLASSIFICATION	3.89221815481013E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999961077818452	WITHOUT_CLASSIFICATION	3.89221815481013E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999961077818452	WITHOUT_CLASSIFICATION	3.89221815481013E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999961077818452	WITHOUT_CLASSIFICATION	3.89221815481013E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.999999980989716	WITHOUT_CLASSIFICATION	1.9010283964216588E-8	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999950413242154	WITHOUT_CLASSIFICATION	4.958675784721988E-6	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999830939843629	WITHOUT_CLASSIFICATION	1.6906015637158933E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9999181087351429	WITHOUT_CLASSIFICATION	8.189126485718206E-5	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998036315741314	WITHOUT_CLASSIFICATION	1.963684258686692E-4	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9999816946982567	WITHOUT_CLASSIFICATION	1.8305301743301808E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9985048492629635	WITHOUT_CLASSIFICATION	0.0014951507370364867	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999818678036355	WITHOUT_CLASSIFICATION	1.813219636453185E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999456705435	WITHOUT_CLASSIFICATION	5.432945657224014E-8	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999973721319778	WITHOUT_CLASSIFICATION	2.627868022181431E-6	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.999890168239381	WITHOUT_CLASSIFICATION	1.0983176061905405E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999868782602997	WITHOUT_CLASSIFICATION	1.3121739700292347E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.8867179898434107	WITHOUT_CLASSIFICATION	0.11328201015658933	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9998728738928261	WITHOUT_CLASSIFICATION	1.2712610717399359E-4	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999564819193754	WITHOUT_CLASSIFICATION	4.351808062462944E-5	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999868782602997	WITHOUT_CLASSIFICATION	1.3121739700292347E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.91422240270934	WITHOUT_CLASSIFICATION	0.08577759729066005	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9997494337502342	WITHOUT_CLASSIFICATION	2.5056624976580843E-4	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999996231390079	WITHOUT_CLASSIFICATION	3.7686099208783435E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999721281302102	WITHOUT_CLASSIFICATION	2.7871869789775128E-5	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9985605167142348	WITHOUT_CLASSIFICATION	0.0014394832857650905	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999864544027612	WITHOUT_CLASSIFICATION	1.3545597238715705E-5	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999991303943812	WITHOUT_CLASSIFICATION	8.696056187608406E-7	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999879940202074	WITHOUT_CLASSIFICATION	1.2005979792559382E-5	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999712276126466	WITHOUT_CLASSIFICATION	2.877238735347043E-5	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999958751774068	WITHOUT_CLASSIFICATION	4.124822593181318E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999993617920577	WITHOUT_CLASSIFICATION	6.382079423057222E-6	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999967920048376	WITHOUT_CLASSIFICATION	3.207995162392954E-5	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998535944620678	WITHOUT_CLASSIFICATION	1.4640553793223175E-4	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9699562487768301	WITHOUT_CLASSIFICATION	0.03004375122316989	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999961165529978	WITHOUT_CLASSIFICATION	3.883447002194864E-6	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.7109128449764439	WITHOUT_CLASSIFICATION	0.289087155023556	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999669716893796	WITHOUT_CLASSIFICATION	3.3028310620297004E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999962290043675	WITHOUT_CLASSIFICATION	3.77099563252996E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999201067022385	WITHOUT_CLASSIFICATION	7.989329776145383E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999962290043675	WITHOUT_CLASSIFICATION	3.77099563252996E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999997264924835	WITHOUT_CLASSIFICATION	2.735075165083507E-6	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999536313059182	WITHOUT_CLASSIFICATION	4.636869408182656E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9895893706131351	WITHOUT_CLASSIFICATION	0.010410629386864882	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999984381820289	WITHOUT_CLASSIFICATION	1.5618179710340485E-6	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999669716893796	WITHOUT_CLASSIFICATION	3.3028310620297004E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999201067022385	WITHOUT_CLASSIFICATION	7.989329776145383E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999997264924835	WITHOUT_CLASSIFICATION	2.735075165083507E-6	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999952624897846	WITHOUT_CLASSIFICATION	4.737510215398918E-5	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999430256651841	WITHOUT_CLASSIFICATION	5.697433481591727E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999969309503709	WITHOUT_CLASSIFICATION	3.0690496292068998E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999919884769506	WITHOUT_CLASSIFICATION	8.01152304951191E-6	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998601188399288	WITHOUT_CLASSIFICATION	1.3988116007134218E-4	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999970719253	WITHOUT_CLASSIFICATION	2.9280747137146724E-9	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984803762352149	WITHOUT_CLASSIFICATION	0.0015196237647851453	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999536313059182	WITHOUT_CLASSIFICATION	4.636869408182656E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9998778933902422	WITHOUT_CLASSIFICATION	1.221066097578385E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999335134656427	WITHOUT_CLASSIFICATION	6.648653435720887E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.999963859172215	WITHOUT_CLASSIFICATION	3.614082778506497E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984803762352149	WITHOUT_CLASSIFICATION	0.0015196237647851453	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999925176491318	WITHOUT_CLASSIFICATION	7.482350868219431E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984803762352149	WITHOUT_CLASSIFICATION	0.0015196237647851453	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999698120474981	WITHOUT_CLASSIFICATION	3.018795250176575E-5	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999998552147318	WITHOUT_CLASSIFICATION	1.4478526815890836E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.99991611304033	WITHOUT_CLASSIFICATION	8.388695966988774E-5	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.999997307041497	WITHOUT_CLASSIFICATION	2.692958502883419E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999999954416643	WITHOUT_CLASSIFICATION	4.558335705905568E-8	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.999999423733111	WITHOUT_CLASSIFICATION	5.762668889756952E-7	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9992984341502557	WITHOUT_CLASSIFICATION	7.015658497443188E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998691677644326	WITHOUT_CLASSIFICATION	1.3083223556748595E-4	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999973634953784	WITHOUT_CLASSIFICATION	2.636504621696635E-6	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9999852061457654	WITHOUT_CLASSIFICATION	1.4793854234584013E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999828917405049	WITHOUT_CLASSIFICATION	1.710825949508887E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999709241106729	WITHOUT_CLASSIFICATION	2.9075889327084805E-5	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9987468158062529	WITHOUT_CLASSIFICATION	0.0012531841937470914	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999870564184812	WITHOUT_CLASSIFICATION	1.2943581518700922E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999845577055795	WITHOUT_CLASSIFICATION	1.5442294420499095E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999980780333543	WITHOUT_CLASSIFICATION	1.9219666456428108E-6	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999989949498366	WITHOUT_CLASSIFICATION	1.0050501633491977E-6	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999936457362817	WITHOUT_CLASSIFICATION	6.354263718210747E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999418280436033	WITHOUT_CLASSIFICATION	5.817195639660263E-5	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999579086675919	WITHOUT_CLASSIFICATION	4.209133240813693E-5	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9194267894554167	WITHOUT_CLASSIFICATION	0.08057321054458334	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999840387631	WITHOUT_CLASSIFICATION	1.5961236874028555E-8	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9998306823498249	WITHOUT_CLASSIFICATION	1.693176501751173E-4	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9986220142144382	WITHOUT_CLASSIFICATION	0.0013779857855617545	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999605170648749	WITHOUT_CLASSIFICATION	3.948293512510245E-5	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999074799954524	WITHOUT_CLASSIFICATION	9.252000454764384E-5	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999965156126848	WITHOUT_CLASSIFICATION	3.4843873151100667E-6	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999910772060122	WITHOUT_CLASSIFICATION	8.922793987804156E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999129430052196	WITHOUT_CLASSIFICATION	8.705699478049019E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.999999679539496	WITHOUT_CLASSIFICATION	3.204605039273518E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998422087421697	WITHOUT_CLASSIFICATION	1.577912578302876E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999994391231811	WITHOUT_CLASSIFICATION	5.608768188774012E-7	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999700756291333	WITHOUT_CLASSIFICATION	2.9924370866716223E-5	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999892361303698	WITHOUT_CLASSIFICATION	1.0763869630209053E-5	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9989531300420029	WITHOUT_CLASSIFICATION	0.001046869957997123	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999299165109	WITHOUT_CLASSIFICATION	7.008348915130877E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9998942473903184	WITHOUT_CLASSIFICATION	1.0575260968169105E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9999059593853007	WITHOUT_CLASSIFICATION	9.404061469931383E-5	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9986533387280064	WITHOUT_CLASSIFICATION	0.0013466612719935974	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9999523240868657	WITHOUT_CLASSIFICATION	4.76759131342984E-5	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9990927226248217	WITHOUT_CLASSIFICATION	9.072773751783008E-4	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999977033294475	WITHOUT_CLASSIFICATION	2.2966705525181155E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9008861501330958	WITHOUT_CLASSIFICATION	0.09911384986690412	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999648691802592	WITHOUT_CLASSIFICATION	3.5130819740847357E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999648691802592	WITHOUT_CLASSIFICATION	3.5130819740847357E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.99987617770063	WITHOUT_CLASSIFICATION	1.238222993699026E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998691677644326	WITHOUT_CLASSIFICATION	1.3083223556748595E-4	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9968828630555812	WITHOUT_CLASSIFICATION	0.0031171369444188725	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999997891931763	WITHOUT_CLASSIFICATION	2.1080682380108253E-7	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9998999937961031	WITHOUT_CLASSIFICATION	1.0000620389690468E-4	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999720769537557	WITHOUT_CLASSIFICATION	2.7923046244384116E-5	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999941563537162	WITHOUT_CLASSIFICATION	5.8436462837463696E-6	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9999245597100415	WITHOUT_CLASSIFICATION	7.544028995856102E-5	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999882525921909	WITHOUT_CLASSIFICATION	1.1747407809039577E-5	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9981523873263165	WITHOUT_CLASSIFICATION	0.0018476126736834987	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999971281915216	WITHOUT_CLASSIFICATION	2.8718084783588597E-6	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999864652247523	WITHOUT_CLASSIFICATION	1.3534775247629499E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9916197228360949	WITHOUT_CLASSIFICATION	0.008380277163905128	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999976029867467	WITHOUT_CLASSIFICATION	2.3970132533040312E-6	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999842895826948	WITHOUT_CLASSIFICATION	1.5710417305142617E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.999993226760666	WITHOUT_CLASSIFICATION	6.773239333916974E-6	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997554238362	WITHOUT_CLASSIFICATION	2.445761637008856E-7	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999993760655498	WITHOUT_CLASSIFICATION	6.23934450243486E-7	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.999989468845181	WITHOUT_CLASSIFICATION	1.0531154818898459E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9895676654805994	WITHOUT_CLASSIFICATION	0.0104323345194006	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999988128133708	WITHOUT_CLASSIFICATION	1.1871866292321744E-6	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999232208098121	WITHOUT_CLASSIFICATION	7.677919018783402E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999659042977732	WITHOUT_CLASSIFICATION	3.409570222679776E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999996406304058	WITHOUT_CLASSIFICATION	3.593695942340074E-7	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9990927226248217	WITHOUT_CLASSIFICATION	9.072773751783008E-4	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999957494410704	WITHOUT_CLASSIFICATION	4.250558929600802E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998490165188002	WITHOUT_CLASSIFICATION	1.509834811997836E-4	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999996118387221	WITHOUT_CLASSIFICATION	3.881612779488547E-7	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999250320372662	WITHOUT_CLASSIFICATION	7.496796273380898E-5	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999837844901877	WITHOUT_CLASSIFICATION	1.6215509812328668E-5	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999984943262278	WITHOUT_CLASSIFICATION	1.5056737722292884E-6	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999978031991559	WITHOUT_CLASSIFICATION	2.1968008440442236E-6	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999981065184173	WITHOUT_CLASSIFICATION	1.8934815827315303E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999950838722852	WITHOUT_CLASSIFICATION	4.916127714803864E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999858039624074	WITHOUT_CLASSIFICATION	1.4196037592468954E-5	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999610398722513	WITHOUT_CLASSIFICATION	3.896012774866156E-5	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999992393641928	WITHOUT_CLASSIFICATION	7.60635807269452E-7	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9979755160837481	WITHOUT_CLASSIFICATION	0.0020244839162519446	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9997396453651619	WITHOUT_CLASSIFICATION	2.6035463483809265E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998689197874834	WITHOUT_CLASSIFICATION	1.3108021251659148E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9998689197874834	WITHOUT_CLASSIFICATION	1.3108021251659148E-4	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999971737138083	WITHOUT_CLASSIFICATION	2.8262861916530738E-6	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999996207854048	WITHOUT_CLASSIFICATION	3.792145951296234E-7	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998004646999621	WITHOUT_CLASSIFICATION	1.9953530003794052E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998004646999621	WITHOUT_CLASSIFICATION	1.9953530003794052E-4	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999958470906948	WITHOUT_CLASSIFICATION	4.152909305243545E-6	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9998887286674706	WITHOUT_CLASSIFICATION	1.1127133252942034E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8832434871576235	WITHOUT_CLASSIFICATION	0.11675651284237656	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.99982977334596	WITHOUT_CLASSIFICATION	1.7022665404010145E-4	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999983426820227	WITHOUT_CLASSIFICATION	1.657317977240957E-6	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998625263944	WITHOUT_CLASSIFICATION	1.3747360558163587E-7	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999987271866104	WITHOUT_CLASSIFICATION	1.2728133896429153E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999987271866104	WITHOUT_CLASSIFICATION	1.2728133896429153E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999542823684	WITHOUT_CLASSIFICATION	4.571763152631531E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.9999933088505174	WITHOUT_CLASSIFICATION	6.6911494825843705E-6	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999975709660422	WITHOUT_CLASSIFICATION	2.429033957768229E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999987586900673	WITHOUT_CLASSIFICATION	1.2413099327892923E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999987586900673	WITHOUT_CLASSIFICATION	1.2413099327892923E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.999999632302466	WITHOUT_CLASSIFICATION	3.6769753391853183E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999995474707352	WITHOUT_CLASSIFICATION	4.5252926477839307E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9983048009913509	WITHOUT_CLASSIFICATION	0.0016951990086490664	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999919727096778	WITHOUT_CLASSIFICATION	8.027290322183106E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9995329568965644	WITHOUT_CLASSIFICATION	4.6704310343561E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999997874268003	WITHOUT_CLASSIFICATION	2.1257319980791042E-7	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999936386318248	WITHOUT_CLASSIFICATION	6.361368175249083E-6	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999901202105586	WITHOUT_CLASSIFICATION	9.879789441389106E-6	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9999988269584215	WITHOUT_CLASSIFICATION	1.1730415785086269E-6	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999833180936356	WITHOUT_CLASSIFICATION	1.6681906364391843E-5	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9998226207287868	WITHOUT_CLASSIFICATION	1.7737927121329092E-4	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9983702530994608	WITHOUT_CLASSIFICATION	0.0016297469005391672	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9995935900747402	WITHOUT_CLASSIFICATION	4.064099252596668E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999137297150358	WITHOUT_CLASSIFICATION	8.627028496422064E-5	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999993413302287	WITHOUT_CLASSIFICATION	6.58669771233156E-7	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999525907723	WITHOUT_CLASSIFICATION	4.740922760291376E-8	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998739431800988	WITHOUT_CLASSIFICATION	1.2605681990122535E-4	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999707767785975	WITHOUT_CLASSIFICATION	2.9223221402546647E-5	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999916784624667	WITHOUT_CLASSIFICATION	8.321537533308955E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999841437364589	WITHOUT_CLASSIFICATION	1.5856263541043506E-5	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999998077399677	WITHOUT_CLASSIFICATION	1.922600322908959E-6	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9826487088116403	WITHOUT_CLASSIFICATION	0.017351291188359683	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9488416688908432	WITHOUT_CLASSIFICATION	0.05115833110915677	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.999998928291037	WITHOUT_CLASSIFICATION	1.0717089630473039E-6	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9993869247796155	WITHOUT_CLASSIFICATION	6.130752203845055E-4	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999966706791461	WITHOUT_CLASSIFICATION	3.3293208537896085E-6	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999984837945615	WITHOUT_CLASSIFICATION	1.5162054386290154E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999803421618014	WITHOUT_CLASSIFICATION	1.9657838198494267E-5	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999998043759396	WITHOUT_CLASSIFICATION	1.9562406033070618E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999705990585617	WITHOUT_CLASSIFICATION	2.9400941438378385E-5	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.999995808465455	WITHOUT_CLASSIFICATION	4.191534544937442E-6	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9951345474830174	WITHOUT_CLASSIFICATION	0.004865452516982468	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999989102164072	WITHOUT_CLASSIFICATION	1.089783592845618E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9999388590744528	WITHOUT_CLASSIFICATION	6.114092554726847E-5	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999338344784717	WITHOUT_CLASSIFICATION	6.616552152826949E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9993298287988075	WITHOUT_CLASSIFICATION	6.701712011924078E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9999371690159824	WITHOUT_CLASSIFICATION	6.283098401767213E-5	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999998314350864	WITHOUT_CLASSIFICATION	1.6856491360389988E-6	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999961521756179	WITHOUT_CLASSIFICATION	3.847824382174652E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999986990862442	WITHOUT_CLASSIFICATION	1.3009137558019055E-5	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999967372766088	WITHOUT_CLASSIFICATION	3.2627233911688145E-6	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.999971833286233	WITHOUT_CLASSIFICATION	2.8166713766989687E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999970881752067	WITHOUT_CLASSIFICATION	2.911824793273135E-6	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9999827165233912	WITHOUT_CLASSIFICATION	1.7283476608780112E-5	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999985295198229	WITHOUT_CLASSIFICATION	1.4704801769909132E-6	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.999999446635465	WITHOUT_CLASSIFICATION	5.533645350413909E-7	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999756090459059	WITHOUT_CLASSIFICATION	2.4390954094079904E-5	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9999426173957371	WITHOUT_CLASSIFICATION	5.7382604262924E-5	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999303685677804	WITHOUT_CLASSIFICATION	6.9631432219554E-5	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999997473716236	WITHOUT_CLASSIFICATION	2.526283763812528E-7	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9992683981223204	WITHOUT_CLASSIFICATION	7.316018776797045E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999956136695306	WITHOUT_CLASSIFICATION	4.386330469379907E-6	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9984408067032994	WITHOUT_CLASSIFICATION	0.001559193296700564	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999998575091	WITHOUT_CLASSIFICATION	1.4249093561152798E-10	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999939682883019	WITHOUT_CLASSIFICATION	6.0317116981258175E-6	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9996136939629194	WITHOUT_CLASSIFICATION	3.8630603708064845E-4	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998511962147593	WITHOUT_CLASSIFICATION	1.488037852406483E-4	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999996214538903	WITHOUT_CLASSIFICATION	3.78546109716636E-7	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999427024366953	WITHOUT_CLASSIFICATION	5.729756330467584E-5	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999932430547562	WITHOUT_CLASSIFICATION	6.756945243725463E-6	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993406041292	WITHOUT_CLASSIFICATION	6.593958708770372E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999993406041292	WITHOUT_CLASSIFICATION	6.593958708770372E-7	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999993433983688	WITHOUT_CLASSIFICATION	6.566016312444793E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9941847369208994	WITHOUT_CLASSIFICATION	0.005815263079100651	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999999677622302	WITHOUT_CLASSIFICATION	3.223776976262824E-8	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9997802973776795	WITHOUT_CLASSIFICATION	2.197026223204283E-4	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999888069138	WITHOUT_CLASSIFICATION	1.1193086217942458E-8	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999894467566836	WITHOUT_CLASSIFICATION	1.0553243316329664E-5	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9998953951767973	WITHOUT_CLASSIFICATION	1.0460482320273378E-4	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999989679017475	WITHOUT_CLASSIFICATION	1.0320982525036643E-5	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999999920140968	WITHOUT_CLASSIFICATION	7.985903234094176E-9	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999996713413948	WITHOUT_CLASSIFICATION	3.286586052168385E-7	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999975715291981	WITHOUT_CLASSIFICATION	2.4284708018083883E-6	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999288376083336	WITHOUT_CLASSIFICATION	7.11623916664206E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998490236234	WITHOUT_CLASSIFICATION	1.5097637664061184E-7	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999628111174328	WITHOUT_CLASSIFICATION	3.718888256716167E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998414158407185	WITHOUT_CLASSIFICATION	1.585841592815533E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9998414158407185	WITHOUT_CLASSIFICATION	1.585841592815533E-4	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999975241749536	WITHOUT_CLASSIFICATION	2.475825046329788E-6	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999746092527866	WITHOUT_CLASSIFICATION	2.539074721334033E-5	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999937503102609	WITHOUT_CLASSIFICATION	6.2496897390353854E-6	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999908441980749	WITHOUT_CLASSIFICATION	9.155801925112084E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999985618271539	WITHOUT_CLASSIFICATION	1.438172846155441E-6	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989642659501	WITHOUT_CLASSIFICATION	1.0357340498718758E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999987371127677	WITHOUT_CLASSIFICATION	1.2628872323909223E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.8629526839928919	WITHOUT_CLASSIFICATION	0.13704731600710815	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999506904383321	WITHOUT_CLASSIFICATION	4.9309561667908186E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9989598538890595	WITHOUT_CLASSIFICATION	0.001040146110940514	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999869509170434	WITHOUT_CLASSIFICATION	1.304908295658165E-5	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999905837315308	WITHOUT_CLASSIFICATION	9.416268469129997E-6	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9994133097006203	WITHOUT_CLASSIFICATION	5.866902993797564E-4	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9998506564711048	WITHOUT_CLASSIFICATION	1.4934352889512493E-4	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9932738361079013	WITHOUT_CLASSIFICATION	0.0067261638920986045	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9934322603438389	WITHOUT_CLASSIFICATION	0.0065677396561610694	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.9575575220811775	DESIGN	0.042442477918822545	WITHOUT_CLASSIFICATION
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999811569636341	WITHOUT_CLASSIFICATION	1.884303636596199E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999961151247203	WITHOUT_CLASSIFICATION	3.884875279689007E-6	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999933643078331	WITHOUT_CLASSIFICATION	6.635692166803509E-6	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999722418461802	WITHOUT_CLASSIFICATION	2.7758153819805726E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999996080762833	WITHOUT_CLASSIFICATION	3.91923716769488E-7	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9997939917396971	WITHOUT_CLASSIFICATION	2.0600826030305267E-4	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.999971239661187	WITHOUT_CLASSIFICATION	2.8760338812996443E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9952034106577845	WITHOUT_CLASSIFICATION	0.004796589342215555	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998939732213236	WITHOUT_CLASSIFICATION	1.060267786764416E-4	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.999999997387886	WITHOUT_CLASSIFICATION	2.6121139313074726E-9	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9720141297697624	WITHOUT_CLASSIFICATION	0.027985870230237523	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999992376110126	WITHOUT_CLASSIFICATION	7.62388987326685E-7	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999716693828241	WITHOUT_CLASSIFICATION	2.8330617175902144E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.907613687270737	WITHOUT_CLASSIFICATION	0.09238631272926298	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999998131455796	WITHOUT_CLASSIFICATION	1.8685442041998099E-7	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999966201783924	WITHOUT_CLASSIFICATION	3.3798216075365915E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983795848535	WITHOUT_CLASSIFICATION	1.6204151465107108E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.8682133123552637	WITHOUT_CLASSIFICATION	0.13178668764473625	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999833012977077	WITHOUT_CLASSIFICATION	1.6698702292288433E-5	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.999997602359922	WITHOUT_CLASSIFICATION	2.3976400781138493E-6	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999668472208354	WITHOUT_CLASSIFICATION	3.315277916461498E-5	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999996234747855	WITHOUT_CLASSIFICATION	3.7652521442628934E-7	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.7192767355663949	DESIGN	0.2807232644336051	WITHOUT_CLASSIFICATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980942020021505	WITHOUT_CLASSIFICATION	0.0019057979978495336	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980942020021505	WITHOUT_CLASSIFICATION	0.0019057979978495336	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999997338613986	WITHOUT_CLASSIFICATION	2.6613860140767906E-7	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9550484726311419	WITHOUT_CLASSIFICATION	0.044951527368858046	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.999808586739583	WITHOUT_CLASSIFICATION	1.9141326041718215E-4	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999312903852151	WITHOUT_CLASSIFICATION	6.870961478490056E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999991660070416	WITHOUT_CLASSIFICATION	8.339929584033505E-6	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9992937096868543	WITHOUT_CLASSIFICATION	7.06290313145845E-4	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9997338003274208	WITHOUT_CLASSIFICATION	2.66199672579148E-4	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.999998573048785	WITHOUT_CLASSIFICATION	1.4269512149690223E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.7176308136655889	DESIGN	0.28236918633441105	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999259875699	WITHOUT_CLASSIFICATION	7.401243008289446E-8	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998748252944	WITHOUT_CLASSIFICATION	1.2517470558844604E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9968973522788955	WITHOUT_CLASSIFICATION	0.003102647721104407	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999793078117261	WITHOUT_CLASSIFICATION	2.0692188273857365E-5	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999944910564293	WITHOUT_CLASSIFICATION	5.50894357065903E-6	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9887913690595134	WITHOUT_CLASSIFICATION	0.011208630940486646	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9892033081179058	WITHOUT_CLASSIFICATION	0.010796691882094273	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999982764652212	WITHOUT_CLASSIFICATION	1.7235347787495113E-6	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999227017086558	WITHOUT_CLASSIFICATION	7.729829134412125E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9996395009537559	WITHOUT_CLASSIFICATION	3.6049904624416097E-4	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999994889195083	WITHOUT_CLASSIFICATION	5.110804917041596E-7	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999954227499261	WITHOUT_CLASSIFICATION	4.577250073920616E-6	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999899194435147	WITHOUT_CLASSIFICATION	1.0080556485295058E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999858644550318	WITHOUT_CLASSIFICATION	1.413554496828359E-5	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.7866093501774	WITHOUT_CLASSIFICATION	0.21339064982259992	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9999939243203141	WITHOUT_CLASSIFICATION	6.075679685842494E-6	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999941247478195	WITHOUT_CLASSIFICATION	5.875252180536808E-6	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9984974037231179	WITHOUT_CLASSIFICATION	0.001502596276882183	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999984975316337	WITHOUT_CLASSIFICATION	1.5024683662096182E-6	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9995744927999379	WITHOUT_CLASSIFICATION	4.2550720006209275E-4	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999928920013827	WITHOUT_CLASSIFICATION	7.107998617246533E-6	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9996524759978636	WITHOUT_CLASSIFICATION	3.475240021364186E-4	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999960322159686	WITHOUT_CLASSIFICATION	3.967784031469107E-6	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999999749851545	WITHOUT_CLASSIFICATION	2.5014845500815598E-8	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999897065712083	WITHOUT_CLASSIFICATION	1.029342879165923E-5	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999861339321803	WITHOUT_CLASSIFICATION	1.3866067819721741E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9888250472805186	WITHOUT_CLASSIFICATION	0.011174952719481438	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999954459721602	WITHOUT_CLASSIFICATION	4.554027839792245E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999925604568	WITHOUT_CLASSIFICATION	7.4395433074768954E-9	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9989112353386262	WITHOUT_CLASSIFICATION	0.0010887646613738128	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999915735922624	WITHOUT_CLASSIFICATION	8.426407737577116E-6	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999986094845544	WITHOUT_CLASSIFICATION	1.3905154455555093E-6	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.999863679882678	WITHOUT_CLASSIFICATION	1.3632011732202075E-4	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999973468550234	WITHOUT_CLASSIFICATION	2.65314497662758E-6	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999867203466718	WITHOUT_CLASSIFICATION	1.3279653328148679E-5	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9997483291389857	WITHOUT_CLASSIFICATION	2.5167086101429486E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9961444170442094	WITHOUT_CLASSIFICATION	0.0038555829557906053	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999935910101626	WITHOUT_CLASSIFICATION	6.408989837403922E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998490236234	WITHOUT_CLASSIFICATION	1.5097637664061184E-7	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999985758309178	WITHOUT_CLASSIFICATION	1.4241690821963534E-6	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999974723320476	WITHOUT_CLASSIFICATION	2.527667952479806E-6	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9961662160796678	WITHOUT_CLASSIFICATION	0.0038337839203322634	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9690316576000653	DESIGN	0.03096834239993467	WITHOUT_CLASSIFICATION
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999997348857447	WITHOUT_CLASSIFICATION	2.651142553445522E-7	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999774634968552	WITHOUT_CLASSIFICATION	2.2536503144739796E-5	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.839279223562401	WITHOUT_CLASSIFICATION	0.160720776437599	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999844797359677	WITHOUT_CLASSIFICATION	1.5520264032304792E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999240568626	WITHOUT_CLASSIFICATION	7.59431374266349E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999063930642997	WITHOUT_CLASSIFICATION	9.360693570028907E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.7307747510518166	WITHOUT_CLASSIFICATION	0.26922524894818345	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.999894020843106	WITHOUT_CLASSIFICATION	1.0597915689410148E-4	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9988394042692982	WITHOUT_CLASSIFICATION	0.0011605957307018772	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999888757597604	WITHOUT_CLASSIFICATION	1.1124240239598157E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998252240367264	WITHOUT_CLASSIFICATION	1.7477596327374073E-4	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999996636562278	WITHOUT_CLASSIFICATION	3.363437722260851E-7	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999994219004131	WITHOUT_CLASSIFICATION	5.780995869856102E-7	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9998624957218692	WITHOUT_CLASSIFICATION	1.3750427813077887E-4	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9485255472097296	WITHOUT_CLASSIFICATION	0.05147445279027047	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998252240367264	WITHOUT_CLASSIFICATION	1.7477596327374073E-4	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9608975675128835	WITHOUT_CLASSIFICATION	0.03910243248711659	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999515849777528	WITHOUT_CLASSIFICATION	4.8415022247260454E-5	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9970296694734119	WITHOUT_CLASSIFICATION	0.0029703305265881357	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999977209744532	WITHOUT_CLASSIFICATION	2.279025546809388E-5	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999837204980251	WITHOUT_CLASSIFICATION	1.6279501974970692E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999599611371138	WITHOUT_CLASSIFICATION	4.003886288620353E-5	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9998813984885858	WITHOUT_CLASSIFICATION	1.1860151141416961E-4	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.635249528036477	DESIGN	0.36475047196352306	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999612833117	WITHOUT_CLASSIFICATION	3.871668818881829E-8	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999993054470124	WITHOUT_CLASSIFICATION	6.94552987566889E-7	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.99954309983201	WITHOUT_CLASSIFICATION	4.569001679900806E-4	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9999898457662105	WITHOUT_CLASSIFICATION	1.0154233789448034E-5	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.999943477526142	WITHOUT_CLASSIFICATION	5.652247385803161E-5	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999945806674583	WITHOUT_CLASSIFICATION	5.419332541693911E-6	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999943033664057	WITHOUT_CLASSIFICATION	5.6966335943593185E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999996406304058	WITHOUT_CLASSIFICATION	3.593695942340074E-7	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999973538716	WITHOUT_CLASSIFICATION	2.6461283690873487E-9	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999977858032449	WITHOUT_CLASSIFICATION	2.21419675512195E-6	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9907462669855611	WITHOUT_CLASSIFICATION	0.009253733014438797	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9998615803237765	WITHOUT_CLASSIFICATION	1.3841967622357454E-4	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999962546971718	WITHOUT_CLASSIFICATION	3.7453028280795144E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999477815456462	WITHOUT_CLASSIFICATION	5.221845435364843E-5	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999947876788384	WITHOUT_CLASSIFICATION	5.2123211615314345E-6	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999973504630091	WITHOUT_CLASSIFICATION	2.6495369909184496E-6	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999997384407587	WITHOUT_CLASSIFICATION	2.6155924129079453E-7	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999993421437742	WITHOUT_CLASSIFICATION	6.578562257687582E-7	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9606895166302882	WITHOUT_CLASSIFICATION	0.03931048336971184	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9965143414956442	WITHOUT_CLASSIFICATION	0.0034856585043557546	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9814142643046797	WITHOUT_CLASSIFICATION	0.01858573569532036	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9987768942731092	DESIGN	0.0012231057268907177	WITHOUT_CLASSIFICATION
// and perform the load	WITHOUT_CLASSIFICATION	0.999995155041424	WITHOUT_CLASSIFICATION	4.8449585759659695E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.8997662998779833	DESIGN	0.10023370012201666	WITHOUT_CLASSIFICATION
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9953400917592933	WITHOUT_CLASSIFICATION	0.004659908240706672	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999901473993746	WITHOUT_CLASSIFICATION	9.852600625321785E-6	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999826336827	WITHOUT_CLASSIFICATION	1.7366317253710975E-8	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999972554807685	WITHOUT_CLASSIFICATION	2.7445192315839616E-6	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9998403479831941	WITHOUT_CLASSIFICATION	1.5965201680582435E-4	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9988563002327769	WITHOUT_CLASSIFICATION	0.0011436997672230843	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999993756272283	WITHOUT_CLASSIFICATION	6.243727716083909E-7	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999945917583697	WITHOUT_CLASSIFICATION	5.40824163033484E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9976617148764044	WITHOUT_CLASSIFICATION	0.0023382851235955763	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9976617148764044	WITHOUT_CLASSIFICATION	0.0023382851235955763	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9997152658509831	WITHOUT_CLASSIFICATION	2.847341490167944E-4	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999924779491167	WITHOUT_CLASSIFICATION	7.522050883166768E-6	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999937405987317	WITHOUT_CLASSIFICATION	6.259401268336011E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.955730602563349	DESIGN	0.044269397436651	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999994401215515	WITHOUT_CLASSIFICATION	5.598784484820318E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999994401215515	WITHOUT_CLASSIFICATION	5.598784484820318E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.999999275946354	WITHOUT_CLASSIFICATION	7.240536459947322E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999929679580606	WITHOUT_CLASSIFICATION	7.03204193940416E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9999601258348384	WITHOUT_CLASSIFICATION	3.98741651615104E-5	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999951122365976	WITHOUT_CLASSIFICATION	4.887763402384346E-6	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999996643763874	WITHOUT_CLASSIFICATION	3.356236125812868E-7	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999894790234523	WITHOUT_CLASSIFICATION	1.0520976547708469E-5	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999991942224339	WITHOUT_CLASSIFICATION	8.057775660061666E-7	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999996679027626	WITHOUT_CLASSIFICATION	3.320972373370331E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999910563099884	WITHOUT_CLASSIFICATION	8.943690011710247E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980893611728	WITHOUT_CLASSIFICATION	1.9106388271229573E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980893611728	WITHOUT_CLASSIFICATION	1.9106388271229573E-6	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9998991538314363	WITHOUT_CLASSIFICATION	1.0084616856363785E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.999998731697341	WITHOUT_CLASSIFICATION	1.2683026589298972E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999992251713726	WITHOUT_CLASSIFICATION	7.748286273857838E-7	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9969883616150924	WITHOUT_CLASSIFICATION	0.0030116383849076154	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9988956427872779	WITHOUT_CLASSIFICATION	0.001104357212722129	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994266607812516	WITHOUT_CLASSIFICATION	5.733392187484353E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999957458353788	WITHOUT_CLASSIFICATION	4.254164621249851E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991713317699	WITHOUT_CLASSIFICATION	8.28668230083779E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999779583069062	WITHOUT_CLASSIFICATION	2.204169309378905E-5	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.9933505908492228	WITHOUT_CLASSIFICATION	0.006649409150777145	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9928753242937978	WITHOUT_CLASSIFICATION	0.007124675706202197	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999993054470124	WITHOUT_CLASSIFICATION	6.94552987566889E-7	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9976476828204486	WITHOUT_CLASSIFICATION	0.0023523171795514133	DESIGN
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999678945025148	WITHOUT_CLASSIFICATION	3.210549748518988E-5	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9994699486239285	WITHOUT_CLASSIFICATION	5.300513760714684E-4	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999810359184529	WITHOUT_CLASSIFICATION	1.8964081547149902E-5	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996602259907	WITHOUT_CLASSIFICATION	3.3977400922334445E-7	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999573699009642	WITHOUT_CLASSIFICATION	4.263009903585768E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9793060387567971	WITHOUT_CLASSIFICATION	0.020693961243202923	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.999129797922934	WITHOUT_CLASSIFICATION	8.702020770659635E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999887753388642	WITHOUT_CLASSIFICATION	1.1224661135790997E-5	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9979785273434602	WITHOUT_CLASSIFICATION	0.0020214726565398033	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9979785273434602	WITHOUT_CLASSIFICATION	0.0020214726565398033	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.999868782602997	WITHOUT_CLASSIFICATION	1.3121739700292347E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999996625187951	WITHOUT_CLASSIFICATION	3.3748120487132236E-7	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9989082365996819	WITHOUT_CLASSIFICATION	0.0010917634003181616	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9996458892625504	WITHOUT_CLASSIFICATION	3.541107374495523E-4	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999995406218781	WITHOUT_CLASSIFICATION	4.5937812180855027E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.997814601594195	WITHOUT_CLASSIFICATION	0.002185398405805028	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999961165529978	WITHOUT_CLASSIFICATION	3.883447002194864E-6	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9050638537431022	WITHOUT_CLASSIFICATION	0.09493614625689785	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.999952624897846	WITHOUT_CLASSIFICATION	4.737510215398918E-5	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999906025067626	WITHOUT_CLASSIFICATION	9.397493237293644E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984803762352149	WITHOUT_CLASSIFICATION	0.0015196237647851453	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.814372595515825	DESIGN	0.18562740448417495	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.5375440991527263	WITHOUT_CLASSIFICATION	0.4624559008472738	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999921469887199	WITHOUT_CLASSIFICATION	7.853011280184947E-6	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9777148672022961	WITHOUT_CLASSIFICATION	0.022285132797703926	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9996853808723483	WITHOUT_CLASSIFICATION	3.146191276517928E-4	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.6833213473269648	WITHOUT_CLASSIFICATION	0.31667865267303513	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999996891950854	WITHOUT_CLASSIFICATION	3.1080491458822456E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9998993573602168	WITHOUT_CLASSIFICATION	1.0064263978314782E-4	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9972457291954201	WITHOUT_CLASSIFICATION	0.002754270804579815	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999092017874	WITHOUT_CLASSIFICATION	9.079821256978918E-8	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9760383654642814	WITHOUT_CLASSIFICATION	0.023961634535718705	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9983048009913509	WITHOUT_CLASSIFICATION	0.0016951990086490664	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999988334574	WITHOUT_CLASSIFICATION	1.1665426849506711E-9	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999861681479799	WITHOUT_CLASSIFICATION	1.3831852020156915E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999861681479799	WITHOUT_CLASSIFICATION	1.3831852020156915E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.974837189760681	WITHOUT_CLASSIFICATION	0.02516281023931903	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9912643076180742	WITHOUT_CLASSIFICATION	0.008735692381925836	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999172194281098	WITHOUT_CLASSIFICATION	8.278057189021581E-5	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.6809857227521252	WITHOUT_CLASSIFICATION	0.31901427724787473	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.999881857764969	WITHOUT_CLASSIFICATION	1.1814223503111777E-4	DESIGN
// todo : what else to do here?	DESIGN	0.7964136930526905	WITHOUT_CLASSIFICATION	0.20358630694730948	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9541802256316136	DESIGN	0.04581977436838623	WITHOUT_CLASSIFICATION
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.9982386702202861	WITHOUT_CLASSIFICATION	0.0017613297797138634	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6549951207615289	DESIGN	0.34500487923847095	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6549951207615289	DESIGN	0.34500487923847095	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9981519346785525	WITHOUT_CLASSIFICATION	0.001848065321447623	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999718127262474	WITHOUT_CLASSIFICATION	2.818727375257928E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.9978579222194396	WITHOUT_CLASSIFICATION	0.0021420777805603156	DESIGN
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9972015122540273	DESIGN	0.0027984877459726765	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9972015122540273	DESIGN	0.0027984877459726765	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999930911002484	DESIGN	6.9088997515877355E-6	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999930911002484	DESIGN	6.9088997515877355E-6	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.906832087691719	WITHOUT_CLASSIFICATION	0.09316791230828107	DESIGN
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9945981538522577	DESIGN	0.0054018461477423445	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9945981538522577	DESIGN	0.0054018461477423445	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.935785377684331	DESIGN	0.06421462231566893	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999718127262474	WITHOUT_CLASSIFICATION	2.818727375257928E-5	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.9985326981136795	WITHOUT_CLASSIFICATION	0.0014673018863204472	DESIGN
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9997784447223659	WITHOUT_CLASSIFICATION	2.215552776341818E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999976833105396	WITHOUT_CLASSIFICATION	2.3166894604982664E-6	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9750897321492845	WITHOUT_CLASSIFICATION	0.024910267850715477	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.9913987770084306	WITHOUT_CLASSIFICATION	0.00860122299156944	DESIGN
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9363498870597006	WITHOUT_CLASSIFICATION	0.06365011294029957	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9993678575902782	WITHOUT_CLASSIFICATION	6.321424097218068E-4	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.8509874283282816	WITHOUT_CLASSIFICATION	0.14901257167171833	DESIGN
// todo : what else to do here?	DESIGN	0.7964136930526905	WITHOUT_CLASSIFICATION	0.20358630694730948	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.988770269660215	WITHOUT_CLASSIFICATION	0.01122973033978498	DESIGN
// todo : what else to do here?	DESIGN	0.7964136930526905	WITHOUT_CLASSIFICATION	0.20358630694730948	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9995644189250418	WITHOUT_CLASSIFICATION	4.3558107495820895E-4	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.998493238037005	WITHOUT_CLASSIFICATION	0.001506761962995074	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9953206767538376	DESIGN	0.004679323246162378	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9541802256316136	DESIGN	0.04581977436838623	WITHOUT_CLASSIFICATION
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.7998090412453006	DESIGN	0.2001909587546993	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9999429594929413	WITHOUT_CLASSIFICATION	5.704050705873342E-5	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.973331171749129	WITHOUT_CLASSIFICATION	0.02666882825087108	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.5451377807724276	WITHOUT_CLASSIFICATION	0.4548622192275724	DESIGN
// todo : what is the implication of this?	DESIGN	0.9905561402351689	WITHOUT_CLASSIFICATION	0.009443859764831114	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.998406027089926	WITHOUT_CLASSIFICATION	0.0015939729100740345	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9996961740621735	DESIGN	3.038259378265257E-4	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.7084908326264736	DESIGN	0.29150916737352633	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9999850543383085	WITHOUT_CLASSIFICATION	1.4945661691498359E-5	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7178048754467435	WITHOUT_CLASSIFICATION	0.28219512455325646	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9865166529646133	WITHOUT_CLASSIFICATION	0.013483347035386686	DESIGN
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9987666453513684	DESIGN	0.001233354648631551	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9927457168006685	WITHOUT_CLASSIFICATION	0.007254283199331437	DESIGN
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9421636003941799	DESIGN	0.057836399605820245	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6279209480419948	WITHOUT_CLASSIFICATION	0.3720790519580051	DESIGN
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999660926235706	DESIGN	3.3907376429322804E-5	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7179605420692732	DESIGN	0.2820394579307267	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7179605420692732	DESIGN	0.2820394579307267	WITHOUT_CLASSIFICATION
//Icky workaround for MySQL bug:	DESIGN	0.7675772280322831	DESIGN	0.23242277196771682	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.996359848345365	WITHOUT_CLASSIFICATION	0.0036401516546351485	DESIGN
//TODO possibly relax that	DESIGN	0.9989980536841323	WITHOUT_CLASSIFICATION	0.0010019463158676513	DESIGN
//TODO possibly relax that	DESIGN	0.9989980536841323	WITHOUT_CLASSIFICATION	0.0010019463158676513	DESIGN
//TODO possibly relax that	DESIGN	0.9989980536841323	WITHOUT_CLASSIFICATION	0.0010019463158676513	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.6279209480419948	WITHOUT_CLASSIFICATION	0.3720790519580051	DESIGN
//use a degenerated strategy for backward compatibility	DESIGN	0.9998520344161114	WITHOUT_CLASSIFICATION	1.4796558388864258E-4	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9999851694422193	WITHOUT_CLASSIFICATION	1.4830557780714647E-5	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9966915112372563	WITHOUT_CLASSIFICATION	0.0033084887627437393	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9996218526298944	WITHOUT_CLASSIFICATION	3.781473701056497E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8266882863382115	WITHOUT_CLASSIFICATION	0.17331171366178857	DESIGN
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.9720480903715764	WITHOUT_CLASSIFICATION	0.02795190962842356	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6549951207615289	DESIGN	0.34500487923847095	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6549951207615289	DESIGN	0.34500487923847095	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9974065284028564	WITHOUT_CLASSIFICATION	0.00259347159714363	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.6549951207615289	DESIGN	0.34500487923847095	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9987635265772216	DESIGN	0.00123647342277837	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9977675769854645	WITHOUT_CLASSIFICATION	0.00223242301453547	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.996943283233479	WITHOUT_CLASSIFICATION	0.0030567167665210356	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9994838390364729	WITHOUT_CLASSIFICATION	5.16160963527118E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9928118147849403	WITHOUT_CLASSIFICATION	0.007188185215059734	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9990256106363026	WITHOUT_CLASSIFICATION	9.743893636974065E-4	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.967688612669308	WITHOUT_CLASSIFICATION	0.03231138733069214	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999960870621248	WITHOUT_CLASSIFICATION	3.912937875162578E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9998484177226581	WITHOUT_CLASSIFICATION	1.5158227734193128E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9940077411414854	WITHOUT_CLASSIFICATION	0.005992258858514613	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9984811244521534	WITHOUT_CLASSIFICATION	0.0015188755478465251	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9999824211351463	WITHOUT_CLASSIFICATION	1.757886485364306E-5	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9999952667784371	WITHOUT_CLASSIFICATION	4.733221562897523E-6	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9997902715294114	WITHOUT_CLASSIFICATION	2.0972847058866223E-4	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9998539784763669	WITHOUT_CLASSIFICATION	1.460215236330685E-4	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.8777687327383427	WITHOUT_CLASSIFICATION	0.1222312672616574	DESIGN
//note there is a wierd implementation in the client side	DESIGN	0.9996992610651002	WITHOUT_CLASSIFICATION	3.0073893489988233E-4	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9447095701813056	WITHOUT_CLASSIFICATION	0.05529042981869431	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.8930166265756108	DESIGN	0.10698337342438925	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.8608329954546675	DESIGN	0.13916700454533254	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.5716479103259466	DESIGN	0.4283520896740534	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.993488064182919	WITHOUT_CLASSIFICATION	0.006511935817080997	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.996691524389513	WITHOUT_CLASSIFICATION	0.00330847561048688	DESIGN
//I suppose?	DESIGN	0.9985042207536194	WITHOUT_CLASSIFICATION	0.001495779246380635	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.849123712000632	WITHOUT_CLASSIFICATION	0.150876287999368	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9849420676171119	WITHOUT_CLASSIFICATION	0.015057932382888058	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9364521555072608	WITHOUT_CLASSIFICATION	0.06354784449273908	DESIGN
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9986493393575725	WITHOUT_CLASSIFICATION	0.0013506606424275702	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9897777650685284	DESIGN	0.01022223493147168	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9738491221121899	WITHOUT_CLASSIFICATION	0.02615087788781015	DESIGN
// todo : potentially look at optimizing these two arrays	DESIGN	0.9998900911164417	WITHOUT_CLASSIFICATION	1.0990888355830872E-4	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8291211218887976	WITHOUT_CLASSIFICATION	0.1708788781112025	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.8291211218887976	WITHOUT_CLASSIFICATION	0.1708788781112025	DESIGN
//TODO: temporary	DESIGN	0.7621964300181363	DESIGN	0.23780356998186375	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8287651680799147	DESIGN	0.17123483192008523	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.8287651680799147	DESIGN	0.17123483192008523	WITHOUT_CLASSIFICATION
//TODO: ugly here:	DESIGN	0.6427067596685693	WITHOUT_CLASSIFICATION	0.3572932403314307	DESIGN
//this is kinda the best we can do...	DESIGN	0.9911116514415661	WITHOUT_CLASSIFICATION	0.008888348558434003	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.872962004087894	DESIGN	0.12703799591210596	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9786591385098663	WITHOUT_CLASSIFICATION	0.02134086149013374	DESIGN
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.967988430425235	WITHOUT_CLASSIFICATION	0.03201156957476501	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.5195628882356347	DESIGN	0.48043711176436543	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.8080378453134145	WITHOUT_CLASSIFICATION	0.19196215468658556	DESIGN
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9892519996500128	DESIGN	0.010748000349987333	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9605326034672	DESIGN	0.039467396532799986	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.5706179611993802	DESIGN	0.4293820388006197	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.9409339286812453	DESIGN	0.059066071318754854	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.7869396868809972	WITHOUT_CLASSIFICATION	0.2130603131190027	DESIGN
//do we even really need this? the update will fail anyway....	DESIGN	0.9894619730383178	WITHOUT_CLASSIFICATION	0.010538026961682075	DESIGN
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9795663405486353	DESIGN	0.02043365945136468	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9986501120611312	DESIGN	0.0013498879388688218	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.740976596941586	WITHOUT_CLASSIFICATION	0.25902340305841415	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9959748233001536	WITHOUT_CLASSIFICATION	0.00402517669984643	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.8118639206809903	DESIGN	0.1881360793190097	WITHOUT_CLASSIFICATION
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9918109277320142	DESIGN	0.008189072267985723	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9834992467291482	WITHOUT_CLASSIFICATION	0.016500753270851765	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9519613438720669	WITHOUT_CLASSIFICATION	0.048038656127933135	DESIGN
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9998094752393117	WITHOUT_CLASSIFICATION	1.905247606882813E-4	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9995868352336582	DESIGN	4.131647663417408E-4	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9814492941432779	WITHOUT_CLASSIFICATION	0.018550705856722242	DESIGN
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999689203661619	DESIGN	3.1079633838066694E-5	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9660163648966785	WITHOUT_CLASSIFICATION	0.0339836351033215	DESIGN
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.882280959983974	DESIGN	0.11771904001602591	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.6531775764439357	WITHOUT_CLASSIFICATION	0.3468224235560644	DESIGN
//TODO: refactor to .sql package	DESIGN	0.876549480750953	DESIGN	0.12345051924904708	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9998611054001397	DESIGN	1.388945998602099E-4	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9719695860924811	DESIGN	0.028030413907518894	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.9254233848150052	WITHOUT_CLASSIFICATION	0.07457661518499478	DESIGN
// TODO : better way?!?	DESIGN	0.9986107681875984	DESIGN	0.001389231812401647	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999984426644952	WITHOUT_CLASSIFICATION	1.5573355048020436E-6	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9970942945260327	DESIGN	0.002905705473967203	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9997774976860427	DESIGN	2.2250231395732397E-4	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9997898768021917	DESIGN	2.1012319780841837E-4	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9997511239413637	WITHOUT_CLASSIFICATION	2.488760586362488E-4	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.998257777009735	DESIGN	0.0017422229902650554	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.7950113428742045	WITHOUT_CLASSIFICATION	0.20498865712579542	DESIGN
//yuck!	DESIGN	0.9974065284028564	WITHOUT_CLASSIFICATION	0.00259347159714363	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.998107647863648	WITHOUT_CLASSIFICATION	0.0018923521363518945	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.999998770155463	DESIGN	1.2298445369376926E-6	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.999929036654672	WITHOUT_CLASSIFICATION	7.096334532801533E-5	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999980363107337	DESIGN	1.9636892662401857E-6	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999978935362944	DESIGN	2.1064637056355585E-6	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9994052848121604	DESIGN	5.947151878396582E-4	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.6549951207615289	DESIGN	0.34500487923847095	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9999317785849087	WITHOUT_CLASSIFICATION	6.822141509138E-5	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9999707795960511	WITHOUT_CLASSIFICATION	2.922040394893659E-5	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.99893042150634	DESIGN	0.0010695784936598951	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9389841357233727	WITHOUT_CLASSIFICATION	0.061015864276627356	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9834444068399953	WITHOUT_CLASSIFICATION	0.016555593160004652	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.6507842748442958	DESIGN	0.3492157251557042	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.9634143788501335	WITHOUT_CLASSIFICATION	0.03658562114986646	DESIGN
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999990851683794	DESIGN	9.148316205528969E-7	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9999976736281442	DESIGN	2.3263718558966123E-6	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.99993602610016	DESIGN	6.397389983996551E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9805576432557139	DESIGN	0.019442356744286043	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9999809976448778	WITHOUT_CLASSIFICATION	1.9002355122234037E-5	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.8531572171044923	WITHOUT_CLASSIFICATION	0.1468427828955077	DESIGN
//TODO: is there a better way?	DESIGN	0.8130463497287008	DESIGN	0.18695365027129923	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.6875355832323926	WITHOUT_CLASSIFICATION	0.31246441676760733	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.649010329565111	DESIGN	0.350989670434889	WITHOUT_CLASSIFICATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.6664542046516805	WITHOUT_CLASSIFICATION	0.3335457953483196	DESIGN
// this is ugly here, but needed because its a subquery	DESIGN	0.7839402600375152	WITHOUT_CLASSIFICATION	0.21605973996248487	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.967508172701794	DESIGN	0.032491827298205954	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.999779891612854	DESIGN	2.201083871460465E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9998078247796023	DESIGN	1.9217522039782341E-4	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8292087163523699	WITHOUT_CLASSIFICATION	0.17079128364763005	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.994002207801311	DESIGN	0.005997792198688942	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.7652049343033576	WITHOUT_CLASSIFICATION	0.23479506569664235	DESIGN
// TODO: what type?	DESIGN	0.9438569072773066	DESIGN	0.05614309272269333	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9948348104928771	WITHOUT_CLASSIFICATION	0.005165189507122879	DESIGN
// short-circuit for performance...	DESIGN	0.9975388386182693	WITHOUT_CLASSIFICATION	0.002461161381730775	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9979803197647721	WITHOUT_CLASSIFICATION	0.0020196802352279207	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9791992867741934	DESIGN	0.02080071322580665	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.930640147621074	WITHOUT_CLASSIFICATION	0.06935985237892588	DESIGN
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.999999470922571	DESIGN	5.290774289591658E-7	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.5696775287782767	WITHOUT_CLASSIFICATION	0.4303224712217233	DESIGN
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.5834869343820593	DESIGN	0.41651306561794066	WITHOUT_CLASSIFICATION
/**	DESIGN	0.955730602563349	DESIGN	0.044269397436651	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.9999999114378525	WITHOUT_CLASSIFICATION	8.856214748667247E-8	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9737392048545751	WITHOUT_CLASSIFICATION	0.026260795145424908	DESIGN
//This is not very nice (and quite slow):	DESIGN	0.9979726795264601	WITHOUT_CLASSIFICATION	0.0020273204735399343	DESIGN
//use of trim() here is ugly?	DESIGN	0.9983782385674143	WITHOUT_CLASSIFICATION	0.0016217614325857272	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9961944361509895	WITHOUT_CLASSIFICATION	0.0038055638490104206	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9999733409997655	WITHOUT_CLASSIFICATION	2.665900023449357E-5	DESIGN
//TODO: inefficient	DESIGN	0.67737617931908	WITHOUT_CLASSIFICATION	0.3226238206809201	DESIGN
// why does this matter?	DESIGN	0.998746456818169	WITHOUT_CLASSIFICATION	0.001253543181831042	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.999997295398892	DESIGN	2.7046011079270553E-6	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9997300072714055	DESIGN	2.699927285944797E-4	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9911356393400499	DESIGN	0.008864360659950095	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999881447044856	DESIGN	1.1855295514329732E-5	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9886128747200167	WITHOUT_CLASSIFICATION	0.011387125279983427	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.861883978917856	DESIGN	0.13811602108214405	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9773667581005313	DESIGN	0.022633241899468717	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9994430130802215	WITHOUT_CLASSIFICATION	5.569869197783597E-4	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9973462081490083	DESIGN	0.0026537918509916608	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9712352713492342	DESIGN	0.028764728650765774	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.8199082223449586	WITHOUT_CLASSIFICATION	0.18009177765504136	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9583564580808928	DESIGN	0.0416435419191072	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.8292732008793966	DESIGN	0.17072679912060335	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9996002420375096	WITHOUT_CLASSIFICATION	3.997579624902982E-4	DESIGN
//create an index on the key columns??	DESIGN	0.9979561022621356	WITHOUT_CLASSIFICATION	0.0020438977378644347	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.995461424498129	DESIGN	0.004538575501870991	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9979561022621356	WITHOUT_CLASSIFICATION	0.0020438977378644347	DESIGN
//TODO: improve this hack!	DESIGN	0.9889399427467828	DESIGN	0.011060057253217152	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9998187964703859	WITHOUT_CLASSIFICATION	1.8120352961406908E-4	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.588726544179726	WITHOUT_CLASSIFICATION	0.4112734558202739	DESIGN
//shortcut	DESIGN	0.999815995384111	WITHOUT_CLASSIFICATION	1.8400461588908914E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9029981047132594	WITHOUT_CLASSIFICATION	0.09700189528674055	DESIGN
// create an index on the key columns??	DESIGN	0.9998066615278304	WITHOUT_CLASSIFICATION	1.9333847216962494E-4	DESIGN
// todo : remove	DESIGN	0.9953923381644131	WITHOUT_CLASSIFICATION	0.004607661835586954	DESIGN
// todo : remove	DESIGN	0.9953923381644131	WITHOUT_CLASSIFICATION	0.004607661835586954	DESIGN
// todo : remove	DESIGN	0.9953923381644131	WITHOUT_CLASSIFICATION	0.004607661835586954	DESIGN
// todo : throw exception?	DESIGN	0.9881092314781942	WITHOUT_CLASSIFICATION	0.011890768521805786	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.9477062045332203	DESIGN	0.052293795466779806	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.8313612590771047	DESIGN	0.16863874092289532	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9967924840161133	DESIGN	0.0032075159838867496	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.7441153491650344	DESIGN	0.25588465083496553	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9993055209533573	DESIGN	6.944790466427044E-4	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9672185329634955	WITHOUT_CLASSIFICATION	0.03278146703650454	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9566283231464311	WITHOUT_CLASSIFICATION	0.043371676853568984	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9857194027834596	DESIGN	0.014280597216540396	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9998529989478799	WITHOUT_CLASSIFICATION	1.4700105212004185E-4	DESIGN
//TODO: move to .sql package!!	DESIGN	0.5812188529227332	DESIGN	0.4187811470772667	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8755771309600989	DESIGN	0.12442286903990105	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999418199389466	DESIGN	5.8180061053303494E-5	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.846226119999412	WITHOUT_CLASSIFICATION	0.15377388000058798	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9360280220322578	DESIGN	0.06397197796774211	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.9912228201353412	WITHOUT_CLASSIFICATION	0.008777179864658726	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6464725509458309	WITHOUT_CLASSIFICATION	0.35352744905416905	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.8049735125508216	WITHOUT_CLASSIFICATION	0.1950264874491785	DESIGN
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.6384700463353853	WITHOUT_CLASSIFICATION	0.36152995366461466	DESIGN
//TODO: optimize this better!	DESIGN	0.867559039273611	WITHOUT_CLASSIFICATION	0.13244096072638903	DESIGN
//TODO: should we allow suffixes on these ?	DESIGN	0.6755062386485051	WITHOUT_CLASSIFICATION	0.32449376135149494	DESIGN
//This is really ugly, but necessary:	DESIGN	0.9780310134546726	WITHOUT_CLASSIFICATION	0.021968986545327453	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9987842774980313	DESIGN	0.001215722501968647	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9717890942044555	WITHOUT_CLASSIFICATION	0.028210905795544593	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9255678640206957	WITHOUT_CLASSIFICATION	0.07443213597930431	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9551355256451485	DESIGN	0.04486447435485148	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.5963719859276568	WITHOUT_CLASSIFICATION	0.4036280140723432	DESIGN
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9774839857157186	DESIGN	0.02251601428428143	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9993312186001981	DESIGN	6.687813998018844E-4	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.6813537193839273	WITHOUT_CLASSIFICATION	0.31864628061607275	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.6224126924250113	WITHOUT_CLASSIFICATION	0.3775873075749888	DESIGN
//is this ok?	DESIGN	0.9999450024913922	WITHOUT_CLASSIFICATION	5.499750860782496E-5	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9965971748586024	DESIGN	0.003402825141397526	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.8097165960833712	WITHOUT_CLASSIFICATION	0.19028340391662868	DESIGN
//Yuck:	DESIGN	0.9983079672942292	WITHOUT_CLASSIFICATION	0.0016920327057708532	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.6147395979668114	DESIGN	0.3852604020331884	WITHOUT_CLASSIFICATION
/**	DESIGN	0.955730602563349	DESIGN	0.044269397436651	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9996058661306753	DESIGN	3.9413386932469596E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9889720820111726	DESIGN	0.011027917988827445	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.8944701495323701	DESIGN	0.10552985046762986	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9999215729164544	WITHOUT_CLASSIFICATION	7.842708354561595E-5	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9866838847208943	DESIGN	0.013316115279105797	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9991604025741609	DESIGN	8.395974258391364E-4	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.9656992728291031	WITHOUT_CLASSIFICATION	0.03430072717089703	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8152498713570009	DESIGN	0.18475012864299917	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.826060816246941	DESIGN	0.17393918375305883	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9480770159832631	DESIGN	0.05192298401673679	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.5866580975676572	WITHOUT_CLASSIFICATION	0.41334190243234287	DESIGN
//TODO: implement caching?! proxies?!	DESIGN	0.7331849425429289	WITHOUT_CLASSIFICATION	0.26681505745707107	DESIGN
//TODO: is this right??	DESIGN	0.6960000436556942	WITHOUT_CLASSIFICATION	0.30399995634430566	DESIGN
// is this really necessary?	DESIGN	0.9999029466657986	WITHOUT_CLASSIFICATION	9.705333420144295E-5	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.5456997831806571	DESIGN	0.4543002168193429	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9935011905189075	DESIGN	0.006498809481092427	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.560686662090869	DESIGN	0.43931333790913085	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999949885977081	DESIGN	5.011402291923469E-6	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9998874926925915	DESIGN	1.1250730740851773E-4	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9821817960984173	WITHOUT_CLASSIFICATION	0.01781820390158274	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9998554023943323	DESIGN	1.4459760566766847E-4	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9566966559380216	WITHOUT_CLASSIFICATION	0.04330334406197843	DESIGN
//TODO: this dependency is kinda Bad	DESIGN	0.9700394408263725	DESIGN	0.02996055917362741	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9997318091718514	WITHOUT_CLASSIFICATION	2.681908281484747E-4	DESIGN
// short cut check...	DESIGN	0.9999835970526386	WITHOUT_CLASSIFICATION	1.640294736142837E-5	DESIGN
// todo : move to StringHelper?	DESIGN	0.9865699679865227	WITHOUT_CLASSIFICATION	0.013430032013477226	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.7694098020506397	DESIGN	0.23059019794936025	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.5069274136611278	DESIGN	0.4930725863388721	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9815443265189122	DESIGN	0.01845567348108777	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9800702564845547	WITHOUT_CLASSIFICATION	0.01992974351544527	DESIGN
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9259946797381967	WITHOUT_CLASSIFICATION	0.07400532026180329	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9974103427915588	WITHOUT_CLASSIFICATION	0.002589657208441111	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9997588535172787	WITHOUT_CLASSIFICATION	2.411464827212791E-4	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999634776695678	DESIGN	3.652233043218623E-5	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.7156514291924769	WITHOUT_CLASSIFICATION	0.2843485708075232	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.995215580656417	DESIGN	0.004784419343583059	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9999181694518696	WITHOUT_CLASSIFICATION	8.183054813034693E-5	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9996499770717074	DESIGN	3.5002292829251487E-4	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999982507647064	WITHOUT_CLASSIFICATION	1.7492352937253824E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9933349821601932	WITHOUT_CLASSIFICATION	0.006665017839806785	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999943707139445	DESIGN	5.629286055517402E-6	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999984110452286	DESIGN	1.5889547713961962E-6	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.916987547842019	WITHOUT_CLASSIFICATION	0.08301245215798105	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9903444877660595	WITHOUT_CLASSIFICATION	0.009655512233940435	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9990569904111485	WITHOUT_CLASSIFICATION	9.430095888516328E-4	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.991599738474432	DESIGN	0.00840026152556802	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9998898070516543	DESIGN	1.1019294834575767E-4	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.8312804548063207	DESIGN	0.1687195451936793	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9953923381644131	WITHOUT_CLASSIFICATION	0.004607661835586954	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.6556195447296883	DESIGN	0.34438045527031175	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9852833293413076	DESIGN	0.014716670658692282	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9116081025826765	DESIGN	0.08839189741732348	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.971172084201361	WITHOUT_CLASSIFICATION	0.028827915798639036	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999597086450077	DESIGN	4.029135499227279E-5	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9823578235662288	WITHOUT_CLASSIFICATION	0.01764217643377125	DESIGN
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9088646582694097	WITHOUT_CLASSIFICATION	0.09113534173059039	DESIGN
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9927639300318504	DESIGN	0.007236069968149591	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.8531801480392991	DESIGN	0.14681985196070088	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9943134581356278	WITHOUT_CLASSIFICATION	0.005686541864372222	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.8427048131410162	WITHOUT_CLASSIFICATION	0.1572951868589839	DESIGN
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.9951305232492024	WITHOUT_CLASSIFICATION	0.004869476750797631	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9995009921086507	DESIGN	4.99007891349231E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.6686663386057995	WITHOUT_CLASSIFICATION	0.3313336613942005	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.999979177115467	DESIGN	2.0822884532972612E-5	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.8873741541033594	WITHOUT_CLASSIFICATION	0.11262584589664054	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.6581248560637445	DESIGN	0.34187514393625534	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9968860263210526	WITHOUT_CLASSIFICATION	0.0031139736789474086	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.7520405510535473	DESIGN	0.24795944894645275	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9910122969153907	DESIGN	0.0089877030846093	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9575326015096135	DESIGN	0.04246739849038648	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999879918021	DESIGN	1.2008197839902108E-8	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999165808479674	DESIGN	8.341915203255832E-5	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9997626629775692	DESIGN	2.373370224306693E-4	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9998779421593489	DESIGN	1.2205784065121395E-4	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.942074098210673	DESIGN	0.05792590178932699	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999878976305787	WITHOUT_CLASSIFICATION	1.2102369421322556E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999875969573523	WITHOUT_CLASSIFICATION	1.2403042647647867E-5	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9986887579222193	DESIGN	0.001311242077780713	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9042560923066385	DESIGN	0.0957439076933615	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.8166338157178222	DESIGN	0.1833661842821777	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.8166654932739371	WITHOUT_CLASSIFICATION	0.18333450672606286	DESIGN
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.6657098400722188	WITHOUT_CLASSIFICATION	0.33429015992778116	DESIGN
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.999244431440619	DESIGN	7.555685593810381E-4	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.5963719859276568	WITHOUT_CLASSIFICATION	0.4036280140723432	DESIGN
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.956677216645249	DESIGN	0.04332278335475097	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9923008097222843	DESIGN	0.007699190277715642	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.6813537193839273	WITHOUT_CLASSIFICATION	0.31864628061607275	DESIGN
//TODO: make this a bit nicer	DESIGN	0.8097165960833712	WITHOUT_CLASSIFICATION	0.19028340391662868	DESIGN
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.5753668936698684	DESIGN	0.4246331063301316	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9972015122540273	DESIGN	0.0027984877459726765	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9972015122540273	DESIGN	0.0027984877459726765	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9972015122540273	DESIGN	0.0027984877459726765	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.999994598516242	DESIGN	5.401483758024595E-6	WITHOUT_CLASSIFICATION
