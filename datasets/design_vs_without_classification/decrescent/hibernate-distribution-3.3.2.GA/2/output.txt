test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999998921756087	WITHOUT_CLASSIFICATION	1.0782439128575415E-7	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998673771833249	WITHOUT_CLASSIFICATION	1.3262281667501474E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998673771833249	WITHOUT_CLASSIFICATION	1.3262281667501474E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9999473218771637	WITHOUT_CLASSIFICATION	5.267812283620398E-5	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999832605653513	WITHOUT_CLASSIFICATION	1.673943464874224E-5	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999984521140943	WITHOUT_CLASSIFICATION	1.5478859057221145E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999969140451445	WITHOUT_CLASSIFICATION	3.085954855493341E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999969140451445	WITHOUT_CLASSIFICATION	3.085954855493341E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999960016120748	WITHOUT_CLASSIFICATION	3.998387925181853E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999977113937475	WITHOUT_CLASSIFICATION	2.2886062525242814E-6	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999948424034057	WITHOUT_CLASSIFICATION	5.157596594215194E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932062690826	WITHOUT_CLASSIFICATION	6.793730917354712E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999866339760116	WITHOUT_CLASSIFICATION	1.3366023988420265E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999866339760116	WITHOUT_CLASSIFICATION	1.3366023988420265E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.999548251977397	WITHOUT_CLASSIFICATION	4.5174802260306246E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999889678311155	WITHOUT_CLASSIFICATION	1.1032168884548174E-5	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9999590592827301	WITHOUT_CLASSIFICATION	4.0940717269936673E-5	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999998690522568	WITHOUT_CLASSIFICATION	1.3094774317043154E-7	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999504616426	WITHOUT_CLASSIFICATION	4.953835734608625E-8	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9997767856694351	WITHOUT_CLASSIFICATION	2.2321433056487024E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9999322694518399	WITHOUT_CLASSIFICATION	6.773054816012157E-5	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999285718997456	WITHOUT_CLASSIFICATION	7.142810025434448E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997774754207813	WITHOUT_CLASSIFICATION	2.225245792186045E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999995293235433	WITHOUT_CLASSIFICATION	4.706764567634719E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999561961320144	WITHOUT_CLASSIFICATION	4.380386798567187E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999849607007468	WITHOUT_CLASSIFICATION	1.5039299253193796E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999926641449498	WITHOUT_CLASSIFICATION	7.335855050194077E-6	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998621558130514	WITHOUT_CLASSIFICATION	1.3784418694867472E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998621558130514	WITHOUT_CLASSIFICATION	1.3784418694867472E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999993164866314	WITHOUT_CLASSIFICATION	6.835133685591754E-7	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9996772918866789	WITHOUT_CLASSIFICATION	3.2270811332106884E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999870119942587	WITHOUT_CLASSIFICATION	1.298800574128769E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999917938529544	WITHOUT_CLASSIFICATION	8.20614704557704E-6	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9744350598206833	WITHOUT_CLASSIFICATION	0.025564940179316698	DESIGN
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999990412692504	WITHOUT_CLASSIFICATION	9.587307496583755E-7	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999933532252279	WITHOUT_CLASSIFICATION	6.6467747720310006E-6	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999966153062081	WITHOUT_CLASSIFICATION	3.384693791979409E-6	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9996619563652449	WITHOUT_CLASSIFICATION	3.3804363475508134E-4	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999635983374326	WITHOUT_CLASSIFICATION	3.640166256730092E-5	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999995528988143	WITHOUT_CLASSIFICATION	4.471011857396811E-7	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9969757778243392	WITHOUT_CLASSIFICATION	0.003024222175660769	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.999603116302704	WITHOUT_CLASSIFICATION	3.9688369729597113E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999392437966038	WITHOUT_CLASSIFICATION	6.075620339613863E-5	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999485484114401	WITHOUT_CLASSIFICATION	5.1451588559877835E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999891730505295	WITHOUT_CLASSIFICATION	1.082694947060166E-5	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960475654295	WITHOUT_CLASSIFICATION	3.9524345705027853E-5	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999997723031614	WITHOUT_CLASSIFICATION	2.276968385433838E-7	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999817359891494	WITHOUT_CLASSIFICATION	1.8264010850540295E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999983080628572	WITHOUT_CLASSIFICATION	1.6919371428017712E-5	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9957472867244581	WITHOUT_CLASSIFICATION	0.004252713275541864	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999803659163615	WITHOUT_CLASSIFICATION	1.9634083638481146E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999983080628572	WITHOUT_CLASSIFICATION	1.6919371428017712E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999803659163615	WITHOUT_CLASSIFICATION	1.9634083638481146E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999948187953268	WITHOUT_CLASSIFICATION	5.181204673087392E-6	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.5307312031034093	WITHOUT_CLASSIFICATION	0.46926879689659085	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999934193209157	WITHOUT_CLASSIFICATION	6.5806790843278275E-6	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999911820804533	WITHOUT_CLASSIFICATION	8.817919546586034E-6	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.999148881312927	WITHOUT_CLASSIFICATION	8.511186870729831E-4	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999978755252618	WITHOUT_CLASSIFICATION	2.1244747382225247E-6	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997345748862464	WITHOUT_CLASSIFICATION	2.654251137536022E-4	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.7954757138857991	WITHOUT_CLASSIFICATION	0.20452428611420095	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999940540882075	WITHOUT_CLASSIFICATION	5.945911792445464E-6	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9999959753833381	WITHOUT_CLASSIFICATION	4.024616661971644E-6	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999987956699739	WITHOUT_CLASSIFICATION	1.2043300261785168E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999803659163615	WITHOUT_CLASSIFICATION	1.9634083638481146E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999671447268683	WITHOUT_CLASSIFICATION	3.285527313173486E-5	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999896631983944	WITHOUT_CLASSIFICATION	1.0336801605580571E-5	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9996347681767213	WITHOUT_CLASSIFICATION	3.652318232787792E-4	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.999999167623387	WITHOUT_CLASSIFICATION	8.323766131116576E-7	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.999992677778421	WITHOUT_CLASSIFICATION	7.322221579025016E-6	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9986935338028697	WITHOUT_CLASSIFICATION	0.0013064661971303167	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9963611034522192	WITHOUT_CLASSIFICATION	0.0036388965477808233	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9987280206126821	WITHOUT_CLASSIFICATION	0.0012719793873179033	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9961035386656479	WITHOUT_CLASSIFICATION	0.0038964613343520603	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999070391838	WITHOUT_CLASSIFICATION	9.296081618584353E-8	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9994330270857829	WITHOUT_CLASSIFICATION	5.669729142171791E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999992398859544	WITHOUT_CLASSIFICATION	7.601140457114549E-7	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9999091553658042	WITHOUT_CLASSIFICATION	9.084463419590745E-5	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999793782466498	WITHOUT_CLASSIFICATION	2.0621753350214775E-5	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999971487573791	WITHOUT_CLASSIFICATION	2.851242620848423E-6	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9986475997168509	WITHOUT_CLASSIFICATION	0.0013524002831491666	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9998766071860008	WITHOUT_CLASSIFICATION	1.2339281399916256E-4	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9975963715345603	WITHOUT_CLASSIFICATION	0.002403628465439754	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999727484219	WITHOUT_CLASSIFICATION	2.7251577998516517E-8	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999756684009	WITHOUT_CLASSIFICATION	2.4331599052715043E-8	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999083687931054	WITHOUT_CLASSIFICATION	9.163120689466745E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995742079657447	WITHOUT_CLASSIFICATION	4.257920342551935E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999971586952836	WITHOUT_CLASSIFICATION	2.8413047164267195E-6	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999091583011	WITHOUT_CLASSIFICATION	9.084169890492822E-7	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995742079657447	WITHOUT_CLASSIFICATION	4.257920342551935E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999989335146325	WITHOUT_CLASSIFICATION	1.0664853674139059E-6	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999849184186527	WITHOUT_CLASSIFICATION	1.5081581347385716E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999983080628572	WITHOUT_CLASSIFICATION	1.6919371428017712E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999999181826805	WITHOUT_CLASSIFICATION	8.181731949158597E-7	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999993742167458	WITHOUT_CLASSIFICATION	6.257832541204268E-7	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99998160952626	WITHOUT_CLASSIFICATION	1.8390473739952874E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99998160952626	WITHOUT_CLASSIFICATION	1.8390473739952874E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999940944528215	WITHOUT_CLASSIFICATION	5.905547178496937E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.7998909258550186	DESIGN	0.20010907414498133	WITHOUT_CLASSIFICATION
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999986327508	WITHOUT_CLASSIFICATION	1.3672491889855779E-9	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999461209086	WITHOUT_CLASSIFICATION	5.3879091294004006E-8	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999971441222498	WITHOUT_CLASSIFICATION	2.855877750178753E-6	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9992885718657443	WITHOUT_CLASSIFICATION	7.114281342557119E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999726667916686	WITHOUT_CLASSIFICATION	2.7333208331304936E-5	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999937278680687	WITHOUT_CLASSIFICATION	6.272131931260489E-6	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999962743928507	WITHOUT_CLASSIFICATION	3.7256071493998147E-6	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999822383219572	WITHOUT_CLASSIFICATION	1.776167804280956E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996613967316496	WITHOUT_CLASSIFICATION	3.3860326835048667E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996613967316496	WITHOUT_CLASSIFICATION	3.3860326835048667E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998807482691715	WITHOUT_CLASSIFICATION	1.192517308284671E-4	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999948926656066	WITHOUT_CLASSIFICATION	5.107334393346821E-6	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.99989576767111	WITHOUT_CLASSIFICATION	1.0423232888997301E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9996613967316496	WITHOUT_CLASSIFICATION	3.3860326835048667E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998807482691715	WITHOUT_CLASSIFICATION	1.192517308284671E-4	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9998807482691715	WITHOUT_CLASSIFICATION	1.192517308284671E-4	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999455781426955	WITHOUT_CLASSIFICATION	5.442185730464249E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9999857741402439	WITHOUT_CLASSIFICATION	1.4225859756144518E-5	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999975732254	WITHOUT_CLASSIFICATION	2.4267744923657608E-9	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999949564691311	WITHOUT_CLASSIFICATION	5.043530868960647E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999749946508857	WITHOUT_CLASSIFICATION	2.5005349114295377E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999749946508857	WITHOUT_CLASSIFICATION	2.5005349114295377E-5	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999965564606221	WITHOUT_CLASSIFICATION	3.443539377962172E-6	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9996579687187711	WITHOUT_CLASSIFICATION	3.420312812289128E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.999998723947781	WITHOUT_CLASSIFICATION	1.2760522190123425E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999659630953595	WITHOUT_CLASSIFICATION	3.4036904640628904E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999659630953595	WITHOUT_CLASSIFICATION	3.4036904640628904E-5	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999886646748204	WITHOUT_CLASSIFICATION	1.1335325179606804E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9756145154678171	WITHOUT_CLASSIFICATION	0.02438548453218287	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.997015868660189	WITHOUT_CLASSIFICATION	0.0029841313398110947	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999970075954244	WITHOUT_CLASSIFICATION	2.9924045755695065E-6	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9998927468798041	WITHOUT_CLASSIFICATION	1.0725312019586786E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999994027518355	WITHOUT_CLASSIFICATION	5.972481644427477E-7	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999845125280471	WITHOUT_CLASSIFICATION	1.5487471952879588E-5	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9993399871264331	WITHOUT_CLASSIFICATION	6.600128735668774E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999975958070167	WITHOUT_CLASSIFICATION	2.40419298316706E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.997015868660189	WITHOUT_CLASSIFICATION	0.0029841313398110947	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9999770924046874	WITHOUT_CLASSIFICATION	2.2907595312712472E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999838960339108	WITHOUT_CLASSIFICATION	1.6103966089203293E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999838960339108	WITHOUT_CLASSIFICATION	1.6103966089203293E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9995913429796837	WITHOUT_CLASSIFICATION	4.086570203163974E-4	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9925117106104084	WITHOUT_CLASSIFICATION	0.0074882893895915886	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999998458025233	WITHOUT_CLASSIFICATION	1.5419747657208856E-7	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9884866442775145	WITHOUT_CLASSIFICATION	0.011513355722485527	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998776892807929	WITHOUT_CLASSIFICATION	1.2231071920708214E-4	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999814196604635	WITHOUT_CLASSIFICATION	1.8580339536503864E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9999888319770658	WITHOUT_CLASSIFICATION	1.1168022934249752E-5	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9999883264663811	WITHOUT_CLASSIFICATION	1.1673533618871975E-5	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999996194477156	WITHOUT_CLASSIFICATION	3.8055228444196843E-7	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999794988853	WITHOUT_CLASSIFICATION	2.0501114703739437E-7	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999794988853	WITHOUT_CLASSIFICATION	2.0501114703739437E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999356729077383	WITHOUT_CLASSIFICATION	6.432709226164583E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999998921756087	WITHOUT_CLASSIFICATION	1.0782439128575415E-7	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999996857267086	WITHOUT_CLASSIFICATION	3.142732914416336E-7	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999983918996143	WITHOUT_CLASSIFICATION	1.6081003857182504E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998673771833249	WITHOUT_CLASSIFICATION	1.3262281667501474E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999968961510646	WITHOUT_CLASSIFICATION	3.1038489354830087E-6	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999953492322047	WITHOUT_CLASSIFICATION	4.650767795370283E-6	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999974697814247	WITHOUT_CLASSIFICATION	2.5302185753950173E-6	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999976148759673	WITHOUT_CLASSIFICATION	2.3851240328049724E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9994776749751929	WITHOUT_CLASSIFICATION	5.223250248070847E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.9992341948772101	WITHOUT_CLASSIFICATION	7.658051227897572E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9993148634499214	WITHOUT_CLASSIFICATION	6.851365500786314E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999994035185793	WITHOUT_CLASSIFICATION	5.964814208183651E-7	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999832605653513	WITHOUT_CLASSIFICATION	1.673943464874224E-5	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988246863956	WITHOUT_CLASSIFICATION	1.1753136043761339E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988246863956	WITHOUT_CLASSIFICATION	1.1753136043761339E-6	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999997325745271	WITHOUT_CLASSIFICATION	2.6742547285372206E-7	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9999497062743545	WITHOUT_CLASSIFICATION	5.029372564540117E-5	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999945557091134	WITHOUT_CLASSIFICATION	5.444290886530282E-6	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999991910827417	WITHOUT_CLASSIFICATION	8.089172582998071E-7	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999986106815882	WITHOUT_CLASSIFICATION	1.3893184117405808E-6	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9995218039284277	WITHOUT_CLASSIFICATION	4.781960715724031E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999969140451445	WITHOUT_CLASSIFICATION	3.085954855493341E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9992238097585648	WITHOUT_CLASSIFICATION	7.761902414351955E-4	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999950884894888	WITHOUT_CLASSIFICATION	4.911510511129876E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999998760405958	WITHOUT_CLASSIFICATION	1.2395940420197259E-6	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999999464673563	WITHOUT_CLASSIFICATION	5.353264371959709E-8	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9999519133651188	WITHOUT_CLASSIFICATION	4.808663488115909E-5	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9997507708870819	WITHOUT_CLASSIFICATION	2.4922911291817476E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999783171899166	WITHOUT_CLASSIFICATION	2.1682810083428946E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999527649865	WITHOUT_CLASSIFICATION	4.723501351133549E-7	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.99999145905412	WITHOUT_CLASSIFICATION	8.540945879887486E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999983298311008	WITHOUT_CLASSIFICATION	1.6701688990913524E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9003468317255588	WITHOUT_CLASSIFICATION	0.0996531682744411	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999981567338236	WITHOUT_CLASSIFICATION	1.8432661763241514E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9998657215713094	WITHOUT_CLASSIFICATION	1.3427842869064772E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998673771833249	WITHOUT_CLASSIFICATION	1.3262281667501474E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998673771833249	WITHOUT_CLASSIFICATION	1.3262281667501474E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9993148634499214	WITHOUT_CLASSIFICATION	6.851365500786314E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999988246863956	WITHOUT_CLASSIFICATION	1.1753136043761339E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999783171899166	WITHOUT_CLASSIFICATION	2.1682810083428946E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999960016120748	WITHOUT_CLASSIFICATION	3.998387925181853E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999971963961791	WITHOUT_CLASSIFICATION	2.8036038208251037E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999970036714525	WITHOUT_CLASSIFICATION	2.99632854747519E-6	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.999997711403682	WITHOUT_CLASSIFICATION	2.2885963179529854E-6	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999965236520837	WITHOUT_CLASSIFICATION	3.4763479162327878E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999998879970506	WITHOUT_CLASSIFICATION	1.1200294940553512E-6	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9998943992345644	WITHOUT_CLASSIFICATION	1.056007654357152E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999759702738922	WITHOUT_CLASSIFICATION	2.4029726107902825E-5	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999125787255475	WITHOUT_CLASSIFICATION	8.74212744524982E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9999711006396903	WITHOUT_CLASSIFICATION	2.8899360309633643E-5	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999972136060508	WITHOUT_CLASSIFICATION	2.7863939491668753E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999972136060508	WITHOUT_CLASSIFICATION	2.7863939491668753E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9998751649442406	WITHOUT_CLASSIFICATION	1.248350557594398E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999759712463032	WITHOUT_CLASSIFICATION	2.40287536968316E-5	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9974571816088523	WITHOUT_CLASSIFICATION	0.002542818391147564	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999374738376873	WITHOUT_CLASSIFICATION	6.2526162312667E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999577877932457	WITHOUT_CLASSIFICATION	4.221220675426906E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.999999949255182	WITHOUT_CLASSIFICATION	5.0744818064397225E-8	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999795914135715	WITHOUT_CLASSIFICATION	2.0408586428534823E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999977113937475	WITHOUT_CLASSIFICATION	2.2886062525242814E-6	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999839967647449	WITHOUT_CLASSIFICATION	1.6003235255015063E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.999993350074945	WITHOUT_CLASSIFICATION	6.649925054866295E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.999993350074945	WITHOUT_CLASSIFICATION	6.649925054866295E-6	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999996776453594	WITHOUT_CLASSIFICATION	3.2235464059602963E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999955583384942	WITHOUT_CLASSIFICATION	4.441661505758354E-6	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999995421720129	WITHOUT_CLASSIFICATION	4.578279870383687E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999974499090586	WITHOUT_CLASSIFICATION	2.5500909414438995E-6	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999235178583928	WITHOUT_CLASSIFICATION	7.648214160721232E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9998673771833249	WITHOUT_CLASSIFICATION	1.3262281667501474E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9993148634499214	WITHOUT_CLASSIFICATION	6.851365500786314E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999832605653513	WITHOUT_CLASSIFICATION	1.673943464874224E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999783171899166	WITHOUT_CLASSIFICATION	2.1682810083428946E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999783171899166	WITHOUT_CLASSIFICATION	2.1682810083428946E-5	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999982838941104	WITHOUT_CLASSIFICATION	1.7161058896180673E-6	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999982838941104	WITHOUT_CLASSIFICATION	1.7161058896180673E-6	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999985982519592	WITHOUT_CLASSIFICATION	1.4017480407858863E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999475710180941	WITHOUT_CLASSIFICATION	5.242898190587203E-5	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999475710180941	WITHOUT_CLASSIFICATION	5.242898190587203E-5	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9999257365993169	WITHOUT_CLASSIFICATION	7.426340068307696E-5	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999849960431452	WITHOUT_CLASSIFICATION	1.5003956854939609E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999826731975245	WITHOUT_CLASSIFICATION	1.7326802475459472E-5	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999896390075647	WITHOUT_CLASSIFICATION	1.0360992435374018E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999933107725786	WITHOUT_CLASSIFICATION	6.689227421450029E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932062690826	WITHOUT_CLASSIFICATION	6.793730917354712E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932062690826	WITHOUT_CLASSIFICATION	6.793730917354712E-6	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9999931371484482	WITHOUT_CLASSIFICATION	6.86285155181357E-6	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999972759376214	WITHOUT_CLASSIFICATION	2.7240623786151407E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999416242881594	WITHOUT_CLASSIFICATION	5.8375711840617426E-5	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9998902003606894	WITHOUT_CLASSIFICATION	1.0979963931061577E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998208890222192	WITHOUT_CLASSIFICATION	1.7911097778083328E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.999924802967808	WITHOUT_CLASSIFICATION	7.51970321920734E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999866339760116	WITHOUT_CLASSIFICATION	1.3366023988420265E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999870208688592	WITHOUT_CLASSIFICATION	1.2979131140912813E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999870208688592	WITHOUT_CLASSIFICATION	1.2979131140912813E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.999548251977397	WITHOUT_CLASSIFICATION	4.5174802260306246E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999548251977397	WITHOUT_CLASSIFICATION	4.5174802260306246E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999950543334585	WITHOUT_CLASSIFICATION	4.94566654154994E-6	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999950543334585	WITHOUT_CLASSIFICATION	4.94566654154994E-6	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999917296646932	WITHOUT_CLASSIFICATION	8.270335306876098E-6	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999917296646932	WITHOUT_CLASSIFICATION	8.270335306876098E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932062690826	WITHOUT_CLASSIFICATION	6.793730917354712E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999866339760116	WITHOUT_CLASSIFICATION	1.3366023988420265E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999870208688592	WITHOUT_CLASSIFICATION	1.2979131140912813E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999870208688592	WITHOUT_CLASSIFICATION	1.2979131140912813E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.999548251977397	WITHOUT_CLASSIFICATION	4.5174802260306246E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999950543334585	WITHOUT_CLASSIFICATION	4.94566654154994E-6	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999950543334585	WITHOUT_CLASSIFICATION	4.94566654154994E-6	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999917296646932	WITHOUT_CLASSIFICATION	8.270335306876098E-6	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.999996249881279	WITHOUT_CLASSIFICATION	3.7501187210599063E-6	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999981651920475	WITHOUT_CLASSIFICATION	1.8348079524854755E-6	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999962533876763	WITHOUT_CLASSIFICATION	3.746612323669766E-6	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.999909419635009	WITHOUT_CLASSIFICATION	9.058036499102497E-5	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999996298451466	WITHOUT_CLASSIFICATION	3.7015485345425836E-7	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998014959099477	WITHOUT_CLASSIFICATION	1.985040900523598E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9983590444479553	WITHOUT_CLASSIFICATION	0.0016409555520446482	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9999772418723558	WITHOUT_CLASSIFICATION	2.2758127644204168E-5	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999960318620638	WITHOUT_CLASSIFICATION	3.968137936259431E-6	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.999999999366509	WITHOUT_CLASSIFICATION	6.334911257408473E-10	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.99996912855225	WITHOUT_CLASSIFICATION	3.087144774999122E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999988506808969	WITHOUT_CLASSIFICATION	1.149319103128184E-6	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999940944528215	WITHOUT_CLASSIFICATION	5.905547178496937E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998014959099477	WITHOUT_CLASSIFICATION	1.985040900523598E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998014959099477	WITHOUT_CLASSIFICATION	1.985040900523598E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998014959099477	WITHOUT_CLASSIFICATION	1.985040900523598E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9984821339518072	WITHOUT_CLASSIFICATION	0.0015178660481928153	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999929784625805	WITHOUT_CLASSIFICATION	7.021537419413001E-6	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999929784625805	WITHOUT_CLASSIFICATION	7.021537419413001E-6	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9997812574427423	WITHOUT_CLASSIFICATION	2.1874255725763683E-4	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999996947081216	WITHOUT_CLASSIFICATION	3.052918784781496E-7	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999990315390291	WITHOUT_CLASSIFICATION	9.68460970864698E-7	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999993817351003	WITHOUT_CLASSIFICATION	6.182648996997405E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999993817351003	WITHOUT_CLASSIFICATION	6.182648996997405E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999504616426	WITHOUT_CLASSIFICATION	4.953835734608625E-8	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999955757896852	WITHOUT_CLASSIFICATION	4.424210314721993E-6	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999955757896852	WITHOUT_CLASSIFICATION	4.424210314721993E-6	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9925201547270163	WITHOUT_CLASSIFICATION	0.007479845272983634	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999949476336372	WITHOUT_CLASSIFICATION	5.05236636288419E-6	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999938508295491	WITHOUT_CLASSIFICATION	6.149170450972524E-6	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.99970168647298	WITHOUT_CLASSIFICATION	2.9831352701994876E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9997006658036826	WITHOUT_CLASSIFICATION	2.9933419631742234E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9997019928967729	WITHOUT_CLASSIFICATION	2.980071032272344E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9997767856694351	WITHOUT_CLASSIFICATION	2.2321433056487024E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999892960886836	WITHOUT_CLASSIFICATION	1.0703911316399727E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9785926020099781	WITHOUT_CLASSIFICATION	0.02140739799002191	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9994841626556008	WITHOUT_CLASSIFICATION	5.158373443991456E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999916626790887	WITHOUT_CLASSIFICATION	8.337320911305662E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997774754207813	WITHOUT_CLASSIFICATION	2.225245792186045E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997305269737	WITHOUT_CLASSIFICATION	2.6947302632934257E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999973149785736	WITHOUT_CLASSIFICATION	2.685021426493842E-6	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9914701930379921	WITHOUT_CLASSIFICATION	0.008529806962007898	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997774754207813	WITHOUT_CLASSIFICATION	2.225245792186045E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.99999398537209	WITHOUT_CLASSIFICATION	6.014627909968291E-6	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999976748910451	WITHOUT_CLASSIFICATION	2.3251089549806986E-6	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999985874086176	WITHOUT_CLASSIFICATION	1.4125913823960556E-5	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9998627524507537	WITHOUT_CLASSIFICATION	1.3724754924627092E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999651601842242	WITHOUT_CLASSIFICATION	3.483981577577092E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999968591780034	WITHOUT_CLASSIFICATION	3.1408219967191333E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999866267209961	WITHOUT_CLASSIFICATION	1.3373279003952647E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999849607007468	WITHOUT_CLASSIFICATION	1.5039299253193796E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999887685901766	WITHOUT_CLASSIFICATION	1.1231409823480415E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999926641449498	WITHOUT_CLASSIFICATION	7.335855050194077E-6	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999929955142317	WITHOUT_CLASSIFICATION	7.00448576824075E-6	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999979631680633	WITHOUT_CLASSIFICATION	2.03683193668545E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991574118249746	WITHOUT_CLASSIFICATION	8.42588175025329E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9997767856694351	WITHOUT_CLASSIFICATION	2.2321433056487024E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999887685901766	WITHOUT_CLASSIFICATION	1.1231409823480415E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999929955142317	WITHOUT_CLASSIFICATION	7.00448576824075E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991574118249746	WITHOUT_CLASSIFICATION	8.42588175025329E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999973336355692	WITHOUT_CLASSIFICATION	2.666364430862763E-6	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9994792269022156	WITHOUT_CLASSIFICATION	5.207730977844847E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997498307163	WITHOUT_CLASSIFICATION	2.501692837431542E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998621558130514	WITHOUT_CLASSIFICATION	1.3784418694867472E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999603270713626	WITHOUT_CLASSIFICATION	3.967292863739819E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9998442601993728	WITHOUT_CLASSIFICATION	1.557398006271842E-4	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998691708063839	WITHOUT_CLASSIFICATION	1.308291936160924E-4	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.999056057814811	WITHOUT_CLASSIFICATION	9.439421851888622E-4	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999915113804464	WITHOUT_CLASSIFICATION	8.488619553622993E-6	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999957910174	WITHOUT_CLASSIFICATION	4.208982638663552E-9	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999960593413598	WITHOUT_CLASSIFICATION	3.940658640130663E-6	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999998121847532	WITHOUT_CLASSIFICATION	1.8781524669454397E-7	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999989541537	WITHOUT_CLASSIFICATION	1.0458463900291895E-9	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999996197542217	WITHOUT_CLASSIFICATION	3.8024577819057645E-7	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9996953044425598	WITHOUT_CLASSIFICATION	3.046955574402031E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999840448198842	WITHOUT_CLASSIFICATION	1.5955180115690584E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9996772918866789	WITHOUT_CLASSIFICATION	3.2270811332106884E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999999987848555	WITHOUT_CLASSIFICATION	1.2151444835558331E-8	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9998646715851122	WITHOUT_CLASSIFICATION	1.3532841488787006E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999887685901766	WITHOUT_CLASSIFICATION	1.1231409823480415E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999794251214805	WITHOUT_CLASSIFICATION	2.0574878519380578E-5	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999498863875872	WITHOUT_CLASSIFICATION	5.011361241276535E-5	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999986839654387	WITHOUT_CLASSIFICATION	1.3160345613935644E-6	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9998746484990269	WITHOUT_CLASSIFICATION	1.2535150097310206E-4	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.999998458627492	WITHOUT_CLASSIFICATION	1.5413725079906127E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9998345806422564	WITHOUT_CLASSIFICATION	1.6541935774348968E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999986351579492	WITHOUT_CLASSIFICATION	1.3648420507925758E-6	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999302692436	WITHOUT_CLASSIFICATION	6.973075640861542E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999994580526992	WITHOUT_CLASSIFICATION	5.419473008804987E-7	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9994244803502661	WITHOUT_CLASSIFICATION	5.755196497339855E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999944052798275	WITHOUT_CLASSIFICATION	5.5947201725924935E-6	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999920850804281	WITHOUT_CLASSIFICATION	7.914919571842674E-6	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9999459556759157	WITHOUT_CLASSIFICATION	5.4044324084386036E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999917938529544	WITHOUT_CLASSIFICATION	8.20614704557704E-6	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999990004037539	WITHOUT_CLASSIFICATION	9.995962460533932E-7	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.999973899697383	WITHOUT_CLASSIFICATION	2.610030261697716E-5	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999789098740294	WITHOUT_CLASSIFICATION	2.109012597066056E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999984692837953	WITHOUT_CLASSIFICATION	1.530716204741436E-6	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999992369586046	WITHOUT_CLASSIFICATION	7.63041395422127E-7	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9998333437278016	WITHOUT_CLASSIFICATION	1.6665627219839674E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999771853876	WITHOUT_CLASSIFICATION	2.2814612426091885E-8	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9995733300431012	WITHOUT_CLASSIFICATION	4.2666995689876044E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998807446199945	WITHOUT_CLASSIFICATION	1.192553800054553E-4	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999971427358203	WITHOUT_CLASSIFICATION	2.8572641798054723E-6	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999952496236616	WITHOUT_CLASSIFICATION	4.750376338413098E-6	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999952496236616	WITHOUT_CLASSIFICATION	4.750376338413098E-6	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999708683080766	WITHOUT_CLASSIFICATION	2.913169192334984E-5	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999892973961398	WITHOUT_CLASSIFICATION	1.070260386019918E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999993562630876	WITHOUT_CLASSIFICATION	6.437369124068114E-7	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.999992919159225	WITHOUT_CLASSIFICATION	7.080840775129021E-6	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999971867794324	WITHOUT_CLASSIFICATION	2.8132205675032115E-6	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9999751794254562	WITHOUT_CLASSIFICATION	2.482057454374973E-5	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999738503834558	WITHOUT_CLASSIFICATION	2.6149616544200857E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999688751414354	WITHOUT_CLASSIFICATION	3.112485856471485E-5	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999993652013374	WITHOUT_CLASSIFICATION	6.347986627601397E-7	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999996491553184	WITHOUT_CLASSIFICATION	3.508446816401884E-7	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999994448265762	WITHOUT_CLASSIFICATION	5.551734238277773E-7	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999984965076029	WITHOUT_CLASSIFICATION	1.5034923971743818E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999888054190431	WITHOUT_CLASSIFICATION	1.1194580956846986E-5	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.999999891131467	WITHOUT_CLASSIFICATION	1.0886853295283425E-7	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9999478282653259	WITHOUT_CLASSIFICATION	5.217173467404672E-5	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9989942772546524	WITHOUT_CLASSIFICATION	0.0010057227453476236	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9998990748289824	WITHOUT_CLASSIFICATION	1.0092517101752177E-4	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9987707756465658	WITHOUT_CLASSIFICATION	0.001229224353434149	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997448523207983	WITHOUT_CLASSIFICATION	2.551476792016493E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9991314442056529	WITHOUT_CLASSIFICATION	8.685557943471696E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987173411568784	WITHOUT_CLASSIFICATION	0.001282658843121544	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999955729454	WITHOUT_CLASSIFICATION	4.427054677961338E-9	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999991671722184	WITHOUT_CLASSIFICATION	8.328277816134063E-6	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9990068018209447	WITHOUT_CLASSIFICATION	9.931981790552969E-4	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9962177287513774	WITHOUT_CLASSIFICATION	0.0037822712486226383	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999820189657961	WITHOUT_CLASSIFICATION	1.798103420399742E-5	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999951492479273	WITHOUT_CLASSIFICATION	4.850752072620068E-6	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999931100480582	WITHOUT_CLASSIFICATION	6.889951941702439E-6	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999953203966123	WITHOUT_CLASSIFICATION	4.679603387586362E-6	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9954135318126289	WITHOUT_CLASSIFICATION	0.0045864681873711	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9991314442056529	WITHOUT_CLASSIFICATION	8.685557943471696E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.999584420372809	WITHOUT_CLASSIFICATION	4.1557962719093944E-4	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999981408265844	WITHOUT_CLASSIFICATION	1.8591734155865338E-6	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999979396046574	WITHOUT_CLASSIFICATION	2.0603953425582214E-6	DESIGN
found	WITHOUT_CLASSIFICATION	0.9993212787806615	WITHOUT_CLASSIFICATION	6.787212193385044E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9993212787806615	WITHOUT_CLASSIFICATION	6.787212193385044E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999515790944489	WITHOUT_CLASSIFICATION	4.8420905551101485E-5	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998909571150522	WITHOUT_CLASSIFICATION	1.0904288494780649E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999993937824209	WITHOUT_CLASSIFICATION	6.06217579119785E-7	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999993937824209	WITHOUT_CLASSIFICATION	6.06217579119785E-7	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9998807446199945	WITHOUT_CLASSIFICATION	1.192553800054553E-4	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999998514541317	WITHOUT_CLASSIFICATION	1.4854586828396283E-7	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9986964031239288	WITHOUT_CLASSIFICATION	0.0013035968760711826	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995764899108	WITHOUT_CLASSIFICATION	4.2351008912613243E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999356729077383	WITHOUT_CLASSIFICATION	6.432709226164583E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9986964031239288	WITHOUT_CLASSIFICATION	0.0013035968760711826	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999995764899108	WITHOUT_CLASSIFICATION	4.2351008912613243E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999891052374997	WITHOUT_CLASSIFICATION	1.089476250022131E-5	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9987207871653477	WITHOUT_CLASSIFICATION	0.0012792128346523239	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999671860657758	WITHOUT_CLASSIFICATION	3.2813934224201294E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999991014380656	WITHOUT_CLASSIFICATION	8.985619345403751E-7	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9997193945144593	WITHOUT_CLASSIFICATION	2.806054855406945E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.7317285626227684	DESIGN	0.2682714373772317	WITHOUT_CLASSIFICATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999864598646809	WITHOUT_CLASSIFICATION	1.3540135319142313E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999864598646809	WITHOUT_CLASSIFICATION	1.3540135319142313E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996502799863911	WITHOUT_CLASSIFICATION	3.497200136089138E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999992341814	WITHOUT_CLASSIFICATION	7.658186340273391E-10	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999963801476753	WITHOUT_CLASSIFICATION	3.6198523245893208E-6	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999850277143271	WITHOUT_CLASSIFICATION	1.4972285672955232E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999997330487553	WITHOUT_CLASSIFICATION	2.6695124462310465E-7	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999999741631881	WITHOUT_CLASSIFICATION	2.5836811906014676E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999356729077383	WITHOUT_CLASSIFICATION	6.432709226164583E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999951605493336	WITHOUT_CLASSIFICATION	4.839450666520759E-6	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999961440955	WITHOUT_CLASSIFICATION	3.8559044964748586E-8	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.999999961440955	WITHOUT_CLASSIFICATION	3.8559044964748586E-8	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999978715551177	WITHOUT_CLASSIFICATION	2.1284448822536976E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999891052374997	WITHOUT_CLASSIFICATION	1.089476250022131E-5	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9993177661829749	WITHOUT_CLASSIFICATION	6.822338170252031E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.7158202355313669	WITHOUT_CLASSIFICATION	0.2841797644686331	DESIGN
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9900669492419205	WITHOUT_CLASSIFICATION	0.009933050758079409	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999933320949261	WITHOUT_CLASSIFICATION	6.66790507385731E-6	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.5631636353519428	WITHOUT_CLASSIFICATION	0.43683636464805714	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999891052374997	WITHOUT_CLASSIFICATION	1.089476250022131E-5	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999933320949261	WITHOUT_CLASSIFICATION	6.66790507385731E-6	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.5631636353519428	WITHOUT_CLASSIFICATION	0.43683636464805714	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999997136126174	WITHOUT_CLASSIFICATION	2.8638738259936214E-6	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999159732164	WITHOUT_CLASSIFICATION	8.4026783617579E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999988871500561	WITHOUT_CLASSIFICATION	1.1128499439155803E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999891052374997	WITHOUT_CLASSIFICATION	1.089476250022131E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999891052374997	WITHOUT_CLASSIFICATION	1.089476250022131E-5	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.999973671452106	WITHOUT_CLASSIFICATION	2.6328547893974902E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9999946757454241	WITHOUT_CLASSIFICATION	5.32425457586713E-6	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999994715531867	WITHOUT_CLASSIFICATION	5.284468133410889E-7	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999392437966038	WITHOUT_CLASSIFICATION	6.075620339613863E-5	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.999999783568979	WITHOUT_CLASSIFICATION	2.1643102101361636E-7	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999973566994314	WITHOUT_CLASSIFICATION	2.64330056865378E-6	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999038923914	WITHOUT_CLASSIFICATION	9.610760870589911E-8	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999962616293745	WITHOUT_CLASSIFICATION	3.738370625540678E-6	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999366339950614	WITHOUT_CLASSIFICATION	6.336600493859004E-5	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999957231476376	WITHOUT_CLASSIFICATION	4.27685236240864E-6	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999530434689441	WITHOUT_CLASSIFICATION	4.6956531055863586E-5	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9998597166806862	WITHOUT_CLASSIFICATION	1.4028331931387002E-4	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9997901047813169	WITHOUT_CLASSIFICATION	2.0989521868308245E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.996929004036997	WITHOUT_CLASSIFICATION	0.003070995963003001	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988371285681	WITHOUT_CLASSIFICATION	1.1628714318376048E-6	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9998763830298988	WITHOUT_CLASSIFICATION	1.2361697010114536E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999392437966038	WITHOUT_CLASSIFICATION	6.075620339613863E-5	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9999868292629291	WITHOUT_CLASSIFICATION	1.3170737070760193E-5	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999738803650148	WITHOUT_CLASSIFICATION	2.611963498532609E-5	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999994313870716	WITHOUT_CLASSIFICATION	5.686129283807785E-7	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999914673814569	WITHOUT_CLASSIFICATION	8.532618543106453E-6	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9997937050318131	WITHOUT_CLASSIFICATION	2.062949681869003E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9997937050318131	WITHOUT_CLASSIFICATION	2.062949681869003E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999392437966038	WITHOUT_CLASSIFICATION	6.075620339613863E-5	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999997083971333	WITHOUT_CLASSIFICATION	2.916028667775754E-7	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999305821486563	WITHOUT_CLASSIFICATION	6.941785134366354E-5	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.5725149846251004	WITHOUT_CLASSIFICATION	0.4274850153748996	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.999999841732354	WITHOUT_CLASSIFICATION	1.5826764602321935E-7	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999320969041047	WITHOUT_CLASSIFICATION	6.790309589532884E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999996922917618	WITHOUT_CLASSIFICATION	3.0770823821925994E-7	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9995581554413953	WITHOUT_CLASSIFICATION	4.418445586047578E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999620799680682	WITHOUT_CLASSIFICATION	3.792003193178095E-5	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999948559966915	WITHOUT_CLASSIFICATION	5.144003308502718E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999983917119817	WITHOUT_CLASSIFICATION	1.608288018318318E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999813958571003	WITHOUT_CLASSIFICATION	1.860414289964494E-5	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999440913437931	WITHOUT_CLASSIFICATION	5.590865620687306E-5	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9994186346238609	WITHOUT_CLASSIFICATION	5.813653761390005E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999997132260595	WITHOUT_CLASSIFICATION	2.867739404922864E-7	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994244067908	WITHOUT_CLASSIFICATION	5.755932092922524E-7	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.999920532433533	WITHOUT_CLASSIFICATION	7.9467566466989E-5	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999981228705508	WITHOUT_CLASSIFICATION	1.8771294492674828E-6	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.999960941545936	WITHOUT_CLASSIFICATION	3.90584540639921E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999342940003231	WITHOUT_CLASSIFICATION	6.570599967699194E-5	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999663063426706	WITHOUT_CLASSIFICATION	3.369365732938917E-5	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996369845630934	WITHOUT_CLASSIFICATION	3.630154369066212E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.8836743564776538	WITHOUT_CLASSIFICATION	0.11632564352234624	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998952871340834	WITHOUT_CLASSIFICATION	0.0010471286591660133	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978494276935919	WITHOUT_CLASSIFICATION	0.0021505723064081804	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994120892876527	WITHOUT_CLASSIFICATION	5.879107123472069E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972478795206	WITHOUT_CLASSIFICATION	2.75212047940743E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992322855133996	WITHOUT_CLASSIFICATION	7.67714486600405E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993379591406245	WITHOUT_CLASSIFICATION	6.620408593754154E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99905140229706	WITHOUT_CLASSIFICATION	9.48597702940011E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991024714877996	WITHOUT_CLASSIFICATION	8.975285122003453E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9831079126071938	WITHOUT_CLASSIFICATION	0.016892087392806225	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.7921504361207535	WITHOUT_CLASSIFICATION	0.20784956387924652	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999652705727419	WITHOUT_CLASSIFICATION	3.472942725806783E-5	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977343320296993	WITHOUT_CLASSIFICATION	0.002265667970300711	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999571876540222	WITHOUT_CLASSIFICATION	4.281234597777355E-5	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994463810292704	WITHOUT_CLASSIFICATION	5.536189707295981E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997226597189502	WITHOUT_CLASSIFICATION	2.773402810496928E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989331462722233	WITHOUT_CLASSIFICATION	0.0010668537277766495	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997402060671372	WITHOUT_CLASSIFICATION	2.597939328628391E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993642425072644	WITHOUT_CLASSIFICATION	6.357574927355494E-4	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.998834920414618	WITHOUT_CLASSIFICATION	0.0011650795853819897	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980590975345298	WITHOUT_CLASSIFICATION	0.001940902465470134	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9324046204329803	WITHOUT_CLASSIFICATION	0.06759537956701972	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997157220492786	WITHOUT_CLASSIFICATION	2.8427795072135303E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9995644583279636	WITHOUT_CLASSIFICATION	4.3554167203636027E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997546135844	WITHOUT_CLASSIFICATION	2.4538641556471837E-7	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999864535962399	WITHOUT_CLASSIFICATION	1.3546403760042258E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999990140085534	WITHOUT_CLASSIFICATION	9.859914465064752E-7	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999746777761318	WITHOUT_CLASSIFICATION	2.5322223868078483E-5	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999982719125047	WITHOUT_CLASSIFICATION	1.728087495374327E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999951603488244	WITHOUT_CLASSIFICATION	4.839651175636093E-6	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999855572010773	WITHOUT_CLASSIFICATION	1.444279892266638E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999938050862364	WITHOUT_CLASSIFICATION	6.194913763576537E-6	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999941935928381	WITHOUT_CLASSIFICATION	5.806407161854716E-6	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9997512544331955	WITHOUT_CLASSIFICATION	2.487455668045675E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999845022560926	WITHOUT_CLASSIFICATION	1.549774390735861E-5	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9993987369957464	WITHOUT_CLASSIFICATION	6.012630042536257E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9995347259388685	WITHOUT_CLASSIFICATION	4.652740611315943E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999954203205823	WITHOUT_CLASSIFICATION	4.579679417756895E-6	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999924420549643	WITHOUT_CLASSIFICATION	7.557945035695477E-5	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999638620842778	WITHOUT_CLASSIFICATION	3.6137915722185596E-5	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550931008665	WITHOUT_CLASSIFICATION	4.490689913339371E-5	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999806532493655	WITHOUT_CLASSIFICATION	1.934675063453568E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9999900100912982	WITHOUT_CLASSIFICATION	9.989908701911261E-6	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999997508508431	WITHOUT_CLASSIFICATION	2.4914915688472766E-6	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999997488127598	WITHOUT_CLASSIFICATION	2.511872402652157E-7	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999962131872302	WITHOUT_CLASSIFICATION	3.7868127698996447E-6	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999959519885915	WITHOUT_CLASSIFICATION	4.048011408480262E-6	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9998655820279572	WITHOUT_CLASSIFICATION	1.344179720428346E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9999693635608996	WITHOUT_CLASSIFICATION	3.063643910042478E-5	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999427166522457	WITHOUT_CLASSIFICATION	5.728334775426665E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999986598097939	WITHOUT_CLASSIFICATION	1.3401902062064517E-6	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.999973387394281	WITHOUT_CLASSIFICATION	2.6612605718968955E-5	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9999907330921839	WITHOUT_CLASSIFICATION	9.266907815998077E-6	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9900052779887405	WITHOUT_CLASSIFICATION	0.009994722011259416	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9983065832928529	WITHOUT_CLASSIFICATION	0.0016934167071470598	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997546135844	WITHOUT_CLASSIFICATION	2.4538641556471837E-7	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9906446446121627	WITHOUT_CLASSIFICATION	0.009355355387837256	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998092186592	WITHOUT_CLASSIFICATION	1.9078134079308032E-7	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999997490681287	WITHOUT_CLASSIFICATION	2.5093187126153714E-7	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9997803658063333	WITHOUT_CLASSIFICATION	2.1963419366670208E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999955047557381	WITHOUT_CLASSIFICATION	4.495244261941175E-6	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999995139766046	WITHOUT_CLASSIFICATION	4.860233953610096E-7	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9999900100912982	WITHOUT_CLASSIFICATION	9.989908701911261E-6	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9972174115553002	WITHOUT_CLASSIFICATION	0.002782588444699692	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999949106353591	WITHOUT_CLASSIFICATION	5.089364640941257E-6	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999967757308181	WITHOUT_CLASSIFICATION	3.224269181917482E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999770062330519	WITHOUT_CLASSIFICATION	2.29937669481908E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999952157710735	WITHOUT_CLASSIFICATION	4.784228926502002E-6	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999281158133	WITHOUT_CLASSIFICATION	7.188418669839683E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999267229782738	WITHOUT_CLASSIFICATION	7.327702172617305E-5	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9953924954810114	WITHOUT_CLASSIFICATION	0.004607504518988614	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999771574087861	WITHOUT_CLASSIFICATION	2.2842591213852135E-5	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999912166714332	WITHOUT_CLASSIFICATION	8.78332856673503E-6	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999948262899935	WITHOUT_CLASSIFICATION	5.173710006429634E-6	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999026940703133	WITHOUT_CLASSIFICATION	9.730592968667188E-5	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999279199579766	WITHOUT_CLASSIFICATION	7.20800420233665E-5	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999896803627395	WITHOUT_CLASSIFICATION	1.03196372606288E-5	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999996246597237	WITHOUT_CLASSIFICATION	3.7534027631518462E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999997726797677	WITHOUT_CLASSIFICATION	2.273202323134158E-6	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999647442629024	WITHOUT_CLASSIFICATION	3.52557370977029E-5	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999887309776635	WITHOUT_CLASSIFICATION	1.126902233654796E-5	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9998813473554639	WITHOUT_CLASSIFICATION	1.1865264453615942E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999668306147292	WITHOUT_CLASSIFICATION	3.3169385270770873E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9998852865387515	WITHOUT_CLASSIFICATION	1.1471346124851193E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9991324975780619	WITHOUT_CLASSIFICATION	8.675024219380737E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999999751547424	WITHOUT_CLASSIFICATION	2.4845257595314215E-8	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9320226329448505	DESIGN	0.06797736705514945	WITHOUT_CLASSIFICATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999998929350552	WITHOUT_CLASSIFICATION	1.0706494470139884E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998716049314	WITHOUT_CLASSIFICATION	1.2839506864774908E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999500100092562	WITHOUT_CLASSIFICATION	4.998999074379434E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997546135844	WITHOUT_CLASSIFICATION	2.4538641556471837E-7	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9968614392943407	WITHOUT_CLASSIFICATION	0.003138560705659294	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999990094050141	WITHOUT_CLASSIFICATION	9.905949858937417E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999643539666353	WITHOUT_CLASSIFICATION	3.5646033364792785E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999990389944257	WITHOUT_CLASSIFICATION	9.61005574342327E-7	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999982643293973	WITHOUT_CLASSIFICATION	1.7356706027742428E-6	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999953040578844	WITHOUT_CLASSIFICATION	4.695942115612724E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997546135844	WITHOUT_CLASSIFICATION	2.4538641556471837E-7	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999806072579006	WITHOUT_CLASSIFICATION	1.9392742099326166E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999647442629024	WITHOUT_CLASSIFICATION	3.52557370977029E-5	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9994203197421822	WITHOUT_CLASSIFICATION	5.796802578178584E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999997726797677	WITHOUT_CLASSIFICATION	2.273202323134158E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999940064522725	WITHOUT_CLASSIFICATION	5.993547727470788E-6	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.999964146075689	WITHOUT_CLASSIFICATION	3.58539243110702E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.6018086861316029	DESIGN	0.398191313868397	WITHOUT_CLASSIFICATION
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999967757308181	WITHOUT_CLASSIFICATION	3.224269181917482E-6	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999770062330519	WITHOUT_CLASSIFICATION	2.29937669481908E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999952157710735	WITHOUT_CLASSIFICATION	4.784228926502002E-6	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999510356897	WITHOUT_CLASSIFICATION	4.896431023526098E-8	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999964877667804	WITHOUT_CLASSIFICATION	3.512233219539201E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997503009758	WITHOUT_CLASSIFICATION	2.496990241949142E-7	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999997726797677	WITHOUT_CLASSIFICATION	2.273202323134158E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999940064522725	WITHOUT_CLASSIFICATION	5.993547727470788E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999997546135844	WITHOUT_CLASSIFICATION	2.4538641556471837E-7	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999999281158133	WITHOUT_CLASSIFICATION	7.188418669839683E-8	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9999267229782738	WITHOUT_CLASSIFICATION	7.327702172617305E-5	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9953924954810114	WITHOUT_CLASSIFICATION	0.004607504518988614	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984238216509	WITHOUT_CLASSIFICATION	1.5761783491069742E-5	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953312070634	WITHOUT_CLASSIFICATION	4.668792936652743E-6	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999574897757839	WITHOUT_CLASSIFICATION	4.2510224216113454E-5	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.99999997701988	WITHOUT_CLASSIFICATION	2.298012006170205E-8	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999831535606316	WITHOUT_CLASSIFICATION	1.6846439368349074E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9999905513719733	WITHOUT_CLASSIFICATION	9.448628026565543E-6	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993642425072644	WITHOUT_CLASSIFICATION	6.357574927355494E-4	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9991406033036667	WITHOUT_CLASSIFICATION	8.593966963332246E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.996221585115947	WITHOUT_CLASSIFICATION	0.003778414884052905	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.999952076317905	WITHOUT_CLASSIFICATION	4.79236820951228E-5	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999998247589176	WITHOUT_CLASSIFICATION	1.752410824510212E-7	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986498923429	WITHOUT_CLASSIFICATION	1.350107657137177E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992322855133996	WITHOUT_CLASSIFICATION	7.67714486600405E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993379591406245	WITHOUT_CLASSIFICATION	6.620408593754154E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977343320296993	WITHOUT_CLASSIFICATION	0.002265667970300711	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986498923429	WITHOUT_CLASSIFICATION	1.350107657137177E-6	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998933009564893	WITHOUT_CLASSIFICATION	1.0669904351066687E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999086517264133	WITHOUT_CLASSIFICATION	9.134827358669756E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989793053570599	WITHOUT_CLASSIFICATION	0.0010206946429400544	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980897626793669	WITHOUT_CLASSIFICATION	0.0019102373206330745	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9992110507149417	WITHOUT_CLASSIFICATION	7.889492850584045E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999488037937276	WITHOUT_CLASSIFICATION	5.119620627238872E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999571876540222	WITHOUT_CLASSIFICATION	4.281234597777355E-5	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989331462722233	WITHOUT_CLASSIFICATION	0.0010668537277766495	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999986598097939	WITHOUT_CLASSIFICATION	1.3401902062064517E-6	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9999806418067418	WITHOUT_CLASSIFICATION	1.9358193258082355E-5	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999860316820184	WITHOUT_CLASSIFICATION	1.3968317981480135E-5	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998075601553	WITHOUT_CLASSIFICATION	1.9243984466355395E-7	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999901038267965	WITHOUT_CLASSIFICATION	9.896173203446275E-6	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999993128416594	WITHOUT_CLASSIFICATION	6.871583405427926E-7	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999998072965668	WITHOUT_CLASSIFICATION	1.9270343323491798E-7	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999909375311048	WITHOUT_CLASSIFICATION	9.062468895289943E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999948559966915	WITHOUT_CLASSIFICATION	5.144003308502718E-6	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999987028081435	WITHOUT_CLASSIFICATION	1.2971918565364903E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999846786350607	WITHOUT_CLASSIFICATION	1.5321364939285223E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999770032614983	WITHOUT_CLASSIFICATION	2.2996738501659417E-5	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998280575578602	WITHOUT_CLASSIFICATION	1.7194244213978443E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999929718926696	WITHOUT_CLASSIFICATION	7.028107330469648E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999885553416925	WITHOUT_CLASSIFICATION	1.1444658307540842E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999756293613328	WITHOUT_CLASSIFICATION	2.4370638667220965E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913250999275	WITHOUT_CLASSIFICATION	8.67490007250373E-6	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999916933875548	WITHOUT_CLASSIFICATION	8.306612445188382E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9997045068612749	WITHOUT_CLASSIFICATION	2.954931387251184E-4	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.999996269077641	WITHOUT_CLASSIFICATION	3.7309223589871103E-6	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999967520094604	WITHOUT_CLASSIFICATION	3.2479905396134384E-6	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999995632013674	WITHOUT_CLASSIFICATION	4.367986325961772E-6	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999937131887929	WITHOUT_CLASSIFICATION	6.286811207134234E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992752599964	WITHOUT_CLASSIFICATION	7.247400035538749E-7	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999625389502332	WITHOUT_CLASSIFICATION	3.7461049766809244E-5	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.999700355066136	WITHOUT_CLASSIFICATION	2.996449338640734E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999995463131623	WITHOUT_CLASSIFICATION	4.536868376983906E-6	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9999408393356721	WITHOUT_CLASSIFICATION	5.9160664327877915E-5	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994020584382772	WITHOUT_CLASSIFICATION	5.979415617228654E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881042529211	WITHOUT_CLASSIFICATION	1.1895747078965792E-5	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9999494450471392	WITHOUT_CLASSIFICATION	5.055495286069581E-5	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9998731729489413	WITHOUT_CLASSIFICATION	1.2682705105868529E-4	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999683844128717	WITHOUT_CLASSIFICATION	3.161558712826696E-5	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.999992484072565	WITHOUT_CLASSIFICATION	7.51592743490763E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999996265742503	WITHOUT_CLASSIFICATION	3.7342574970087436E-7	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999996548092769	WITHOUT_CLASSIFICATION	3.4519072320253697E-7	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999997383965908	WITHOUT_CLASSIFICATION	2.616034092278227E-7	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999963041498386	WITHOUT_CLASSIFICATION	3.6958501613749027E-6	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9952138653887718	WITHOUT_CLASSIFICATION	0.004786134611228288	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999642363409582	WITHOUT_CLASSIFICATION	3.576365904171003E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9998985486166561	WITHOUT_CLASSIFICATION	1.014513833439323E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9999583505310793	WITHOUT_CLASSIFICATION	4.164946892079408E-5	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999982923587387	WITHOUT_CLASSIFICATION	1.7076412612773474E-6	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999993847703288	WITHOUT_CLASSIFICATION	6.152296713038006E-7	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999947511619094	WITHOUT_CLASSIFICATION	5.24883809060435E-6	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9998277509853234	WITHOUT_CLASSIFICATION	1.722490146765173E-4	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999778025006688	WITHOUT_CLASSIFICATION	2.2197499331242144E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999975261248603	WITHOUT_CLASSIFICATION	2.4738751397191685E-6	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999941550614698	WITHOUT_CLASSIFICATION	5.844938530174051E-6	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9999703440095044	WITHOUT_CLASSIFICATION	2.9655990495572E-5	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999628527692211	WITHOUT_CLASSIFICATION	3.714723077893446E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9987251994594957	WITHOUT_CLASSIFICATION	0.001274800540504315	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999997316934424	WITHOUT_CLASSIFICATION	2.68306557659421E-7	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9999596610396687	WITHOUT_CLASSIFICATION	4.033896033139543E-5	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9999979774769016	WITHOUT_CLASSIFICATION	2.0225230983751177E-6	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999781015164433	WITHOUT_CLASSIFICATION	2.1898483556729166E-5	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999988291659505	WITHOUT_CLASSIFICATION	1.1708340495177409E-6	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999987732099672	WITHOUT_CLASSIFICATION	1.2267900327780585E-6	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999976270933281	WITHOUT_CLASSIFICATION	2.372906671911148E-6	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999966357594741	WITHOUT_CLASSIFICATION	3.3642405260206127E-6	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999997853124575	WITHOUT_CLASSIFICATION	2.1468754261963584E-7	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999889724964676	WITHOUT_CLASSIFICATION	1.1027503532383701E-5	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999998891389015	WITHOUT_CLASSIFICATION	1.1086109850094147E-7	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9998633016611683	WITHOUT_CLASSIFICATION	1.3669833883177412E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9999861933781176	WITHOUT_CLASSIFICATION	1.3806621882358428E-5	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999951687586477	WITHOUT_CLASSIFICATION	4.831241352359009E-6	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999863394655839	WITHOUT_CLASSIFICATION	1.3660534416069476E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999998344064829	WITHOUT_CLASSIFICATION	1.6559351707333933E-7	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999695950338	WITHOUT_CLASSIFICATION	3.0404966305869985E-8	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9999984108419486	WITHOUT_CLASSIFICATION	1.5891580513691365E-6	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999999130157525	WITHOUT_CLASSIFICATION	8.698424747322069E-8	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9999962142631847	WITHOUT_CLASSIFICATION	3.785736815189321E-6	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9929337485085561	WITHOUT_CLASSIFICATION	0.007066251491443947	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999543252850345	WITHOUT_CLASSIFICATION	4.56747149655815E-5	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9863916652858414	WITHOUT_CLASSIFICATION	0.013608334714158472	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999997414398086	WITHOUT_CLASSIFICATION	2.5856019135831443E-7	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9995697126210746	WITHOUT_CLASSIFICATION	4.302873789252471E-4	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999992703788625	WITHOUT_CLASSIFICATION	7.296211375194524E-7	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999944037783107	WITHOUT_CLASSIFICATION	5.59622168933066E-6	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9999482304498869	WITHOUT_CLASSIFICATION	5.17695501131122E-5	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998942725080971	WITHOUT_CLASSIFICATION	1.0572749190283002E-4	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999441408623956	WITHOUT_CLASSIFICATION	5.585913760449662E-5	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999999862006422	WITHOUT_CLASSIFICATION	1.3799357786652215E-8	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9995195581307039	WITHOUT_CLASSIFICATION	4.804418692960274E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9999940606955535	WITHOUT_CLASSIFICATION	5.939304446511706E-6	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999875416292519	WITHOUT_CLASSIFICATION	1.2458370748235421E-5	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9969464966550942	WITHOUT_CLASSIFICATION	0.0030535033449059453	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999982639848592	WITHOUT_CLASSIFICATION	1.7360151407005236E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999952400182318	WITHOUT_CLASSIFICATION	4.759981768121131E-6	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999976816862817	WITHOUT_CLASSIFICATION	2.318313718308647E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999275802593192	WITHOUT_CLASSIFICATION	7.241974068083841E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9999790714290242	WITHOUT_CLASSIFICATION	2.0928570975748287E-5	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999976868763344	WITHOUT_CLASSIFICATION	2.31312366555587E-6	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999427486866731	WITHOUT_CLASSIFICATION	5.7251313326837936E-5	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999994261605452	WITHOUT_CLASSIFICATION	5.738394548199498E-7	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999364577477918	WITHOUT_CLASSIFICATION	6.354225220809033E-5	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.999998929484171	WITHOUT_CLASSIFICATION	1.0705158289601686E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999804137239547	WITHOUT_CLASSIFICATION	1.958627604525825E-5	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999997123777283	WITHOUT_CLASSIFICATION	2.8762227171790585E-7	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999437850882474	WITHOUT_CLASSIFICATION	5.621491175267002E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9999219687579639	WITHOUT_CLASSIFICATION	7.803124203611466E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999175897569297	WITHOUT_CLASSIFICATION	8.241024307038911E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999437850882474	WITHOUT_CLASSIFICATION	5.621491175267002E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999995604481434	WITHOUT_CLASSIFICATION	4.39551856609524E-7	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999998753830047	WITHOUT_CLASSIFICATION	1.2461699517143152E-7	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9996543922784025	WITHOUT_CLASSIFICATION	3.4560772159745925E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9823130533322832	WITHOUT_CLASSIFICATION	0.017686946667716856	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999997400092215	WITHOUT_CLASSIFICATION	2.5999077848131674E-7	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999995127727626	WITHOUT_CLASSIFICATION	4.872272374354796E-7	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9998474160788114	WITHOUT_CLASSIFICATION	1.5258392118855285E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999970675629088	WITHOUT_CLASSIFICATION	2.9324370911350866E-6	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999756039483564	WITHOUT_CLASSIFICATION	2.4396051643599724E-5	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999608339228776	WITHOUT_CLASSIFICATION	3.916607712245286E-5	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999913854394642	WITHOUT_CLASSIFICATION	8.614560535838991E-6	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999860597853387	WITHOUT_CLASSIFICATION	1.3940214661291623E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9999229442318323	WITHOUT_CLASSIFICATION	7.705576816776814E-5	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999952561743686	WITHOUT_CLASSIFICATION	4.743825631466775E-6	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999974176835761	WITHOUT_CLASSIFICATION	2.5823164240277366E-6	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9999890592113884	WITHOUT_CLASSIFICATION	1.0940788611648963E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999857515311659	WITHOUT_CLASSIFICATION	1.4248468834218104E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999857515311659	WITHOUT_CLASSIFICATION	1.4248468834218104E-5	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999958393975182	WITHOUT_CLASSIFICATION	4.160602481733683E-6	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999857808810872	WITHOUT_CLASSIFICATION	1.4219118912853255E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999991372005299	WITHOUT_CLASSIFICATION	8.627994701494466E-7	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9999842347540855	WITHOUT_CLASSIFICATION	1.5765245914429752E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999431621735121	WITHOUT_CLASSIFICATION	5.683782648785002E-5	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9991702846188341	WITHOUT_CLASSIFICATION	8.297153811660184E-4	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999997732460494	WITHOUT_CLASSIFICATION	2.26753950606156E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999980191630828	WITHOUT_CLASSIFICATION	1.980836917222713E-6	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9999354552228872	WITHOUT_CLASSIFICATION	6.45447771128233E-5	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998466348299683	WITHOUT_CLASSIFICATION	1.5336517003163E-4	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9985602234648147	WITHOUT_CLASSIFICATION	0.0014397765351853856	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999987361590991	WITHOUT_CLASSIFICATION	1.2638409009508362E-6	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999972317770445	WITHOUT_CLASSIFICATION	2.768222955589893E-6	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9999995025788517	WITHOUT_CLASSIFICATION	4.974211483088596E-7	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999990650758173	WITHOUT_CLASSIFICATION	9.349241827545807E-7	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999885553416925	WITHOUT_CLASSIFICATION	1.1444658307540842E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999757105611975	WITHOUT_CLASSIFICATION	2.428943880239231E-5	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999998667133995	WITHOUT_CLASSIFICATION	1.3328660049342997E-6	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.999969521947825	WITHOUT_CLASSIFICATION	3.0478052175040735E-5	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999995091458228	WITHOUT_CLASSIFICATION	4.908541772706704E-7	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999987542896294	WITHOUT_CLASSIFICATION	1.245710370591765E-6	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999983320361335	WITHOUT_CLASSIFICATION	1.6679638665100078E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999830026773703	WITHOUT_CLASSIFICATION	1.6997322629735953E-5	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999998530252803	WITHOUT_CLASSIFICATION	1.4697471969685358E-6	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.999995163197727	WITHOUT_CLASSIFICATION	4.836802273024231E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999660728205129	WITHOUT_CLASSIFICATION	3.392717948719696E-5	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999998887166828	WITHOUT_CLASSIFICATION	1.1128331723259402E-7	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9999774162642773	WITHOUT_CLASSIFICATION	2.258373572269037E-5	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999811329986216	WITHOUT_CLASSIFICATION	1.8867001378424712E-5	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.999999369782691	WITHOUT_CLASSIFICATION	6.302173089586064E-7	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999955305245303	WITHOUT_CLASSIFICATION	4.469475469740591E-6	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999996584638781	WITHOUT_CLASSIFICATION	3.415361219752643E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9998285503282188	WITHOUT_CLASSIFICATION	1.7144967178110232E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998903919937628	WITHOUT_CLASSIFICATION	1.0960800623703744E-4	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.999998485823917	WITHOUT_CLASSIFICATION	1.5141760829634277E-6	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999987265385755	WITHOUT_CLASSIFICATION	1.2734614245016258E-6	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999922521750158	WITHOUT_CLASSIFICATION	7.747824984195572E-6	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999978571592049	WITHOUT_CLASSIFICATION	2.1428407951317516E-6	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.999997924113077	WITHOUT_CLASSIFICATION	2.0758869230517745E-6	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999998386458202	WITHOUT_CLASSIFICATION	1.613541797212028E-7	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9999656102304324	WITHOUT_CLASSIFICATION	3.438976956760289E-5	DESIGN
create one	WITHOUT_CLASSIFICATION	0.999994298066768	WITHOUT_CLASSIFICATION	5.701933231970148E-6	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999873564230936	WITHOUT_CLASSIFICATION	1.2643576906465905E-5	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999809444686795	WITHOUT_CLASSIFICATION	1.9055531320504022E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999264405472899	WITHOUT_CLASSIFICATION	7.35594527100817E-5	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999938139160822	WITHOUT_CLASSIFICATION	6.186083917787521E-6	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997407362978922	WITHOUT_CLASSIFICATION	2.59263702107821E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918117055978	WITHOUT_CLASSIFICATION	8.188294402148251E-6	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999994793932158	WITHOUT_CLASSIFICATION	5.206067842025936E-6	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9846996906970034	WITHOUT_CLASSIFICATION	0.015300309302996628	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999861016214295	WITHOUT_CLASSIFICATION	1.3898378570492637E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999947584795498	WITHOUT_CLASSIFICATION	5.241520450223953E-6	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9601820203093101	WITHOUT_CLASSIFICATION	0.039817979690689835	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999287008659559	WITHOUT_CLASSIFICATION	7.129913404410547E-5	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998907474432275	WITHOUT_CLASSIFICATION	1.092525567724848E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9999287008659559	WITHOUT_CLASSIFICATION	7.129913404410547E-5	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999992731246715	WITHOUT_CLASSIFICATION	7.268753285445294E-7	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999994194670268	WITHOUT_CLASSIFICATION	5.805329732300232E-7	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999745806124835	WITHOUT_CLASSIFICATION	2.5419387516464598E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9995094101883709	WITHOUT_CLASSIFICATION	4.905898116290869E-4	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999776506898376	WITHOUT_CLASSIFICATION	2.2349310162439344E-5	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999324297894643	WITHOUT_CLASSIFICATION	6.75702105357626E-5	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.999709509177221	WITHOUT_CLASSIFICATION	2.904908227789752E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999634462573905	WITHOUT_CLASSIFICATION	3.6553742609375774E-5	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999999193902583	WITHOUT_CLASSIFICATION	8.06097416820614E-8	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.999994254146258	WITHOUT_CLASSIFICATION	5.745853742079445E-6	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9999957196637316	WITHOUT_CLASSIFICATION	4.280336268435344E-6	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9788636915012441	WITHOUT_CLASSIFICATION	0.02113630849875597	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999870095942878	WITHOUT_CLASSIFICATION	1.2990405712292271E-5	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9746936217809314	WITHOUT_CLASSIFICATION	0.025306378219068486	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9892244864459193	WITHOUT_CLASSIFICATION	0.010775513554080665	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9976093547988976	WITHOUT_CLASSIFICATION	0.0023906452011024375	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999978925760399	WITHOUT_CLASSIFICATION	2.107423960102962E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999978925760399	WITHOUT_CLASSIFICATION	2.107423960102962E-6	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9999681762259678	WITHOUT_CLASSIFICATION	3.182377403219772E-5	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999948827049704	WITHOUT_CLASSIFICATION	5.117295029574546E-6	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999998030980535	WITHOUT_CLASSIFICATION	1.969019465580554E-7	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999918188348298	WITHOUT_CLASSIFICATION	8.1811651702182E-6	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9993480022457986	WITHOUT_CLASSIFICATION	6.519977542014947E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999739055258446	WITHOUT_CLASSIFICATION	2.609447415534209E-5	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9999636292098399	WITHOUT_CLASSIFICATION	3.63707901600142E-5	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999802324076889	WITHOUT_CLASSIFICATION	1.976759231123937E-5	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999987867393103	WITHOUT_CLASSIFICATION	1.2132606897294558E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999957893666275	WITHOUT_CLASSIFICATION	4.210633372484432E-6	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999881314904931	WITHOUT_CLASSIFICATION	1.1868509506905188E-5	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999991959030944	WITHOUT_CLASSIFICATION	8.040969055478818E-7	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999826702874313	WITHOUT_CLASSIFICATION	1.732971256876151E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999954788569348	WITHOUT_CLASSIFICATION	4.521143065138486E-6	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998197535147697	WITHOUT_CLASSIFICATION	1.802464852301966E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999976945572003	WITHOUT_CLASSIFICATION	2.3054427997068904E-5	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999991296374202	WITHOUT_CLASSIFICATION	8.703625798263389E-7	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9957014770746577	WITHOUT_CLASSIFICATION	0.004298522925342288	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999945941308015	WITHOUT_CLASSIFICATION	5.405869198532068E-6	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999995685005649	WITHOUT_CLASSIFICATION	4.31499435064898E-7	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.999999866723277	WITHOUT_CLASSIFICATION	1.3327672304972286E-7	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999945454350426	WITHOUT_CLASSIFICATION	5.454564957370664E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999995160538315	WITHOUT_CLASSIFICATION	4.839461684527437E-7	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999988097362525	WITHOUT_CLASSIFICATION	1.1902637474805884E-6	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999995105635837	WITHOUT_CLASSIFICATION	4.894364162478865E-7	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999992209599812	WITHOUT_CLASSIFICATION	7.790400187986491E-7	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.999995944939596	WITHOUT_CLASSIFICATION	4.055060403941232E-6	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9998335710391486	WITHOUT_CLASSIFICATION	1.6642896085129579E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999835927135493	WITHOUT_CLASSIFICATION	1.6407286450682863E-5	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999992985510902	WITHOUT_CLASSIFICATION	7.014489097815565E-7	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999254658114329	WITHOUT_CLASSIFICATION	7.45341885670427E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999866721034893	WITHOUT_CLASSIFICATION	1.3327896510690008E-5	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999829471634532	WITHOUT_CLASSIFICATION	1.7052836546870792E-5	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999924037021063	WITHOUT_CLASSIFICATION	7.596297893649226E-6	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9999111192602009	WITHOUT_CLASSIFICATION	8.88807397991751E-5	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999989875850102	WITHOUT_CLASSIFICATION	1.012414989848383E-6	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999983014090327	WITHOUT_CLASSIFICATION	1.6985909673489012E-6	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9999944238461023	WITHOUT_CLASSIFICATION	5.576153897702471E-6	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9996497304262223	WITHOUT_CLASSIFICATION	3.502695737776802E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999863994601522	WITHOUT_CLASSIFICATION	1.3600539847828724E-5	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999988316279045	WITHOUT_CLASSIFICATION	1.1683720955060645E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999415244479433	WITHOUT_CLASSIFICATION	5.8475552056748485E-5	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999997501909239	WITHOUT_CLASSIFICATION	2.4980907609985345E-7	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999894909710354	WITHOUT_CLASSIFICATION	1.0509028964539155E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999927552322	WITHOUT_CLASSIFICATION	7.244767699040645E-9	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9998090116595914	WITHOUT_CLASSIFICATION	1.9098834040869725E-4	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.8400975055221104	WITHOUT_CLASSIFICATION	0.15990249447788962	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999999835604328	WITHOUT_CLASSIFICATION	1.6439567152179357E-8	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999999286123702	WITHOUT_CLASSIFICATION	7.138762975603128E-8	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999559893143374	WITHOUT_CLASSIFICATION	4.401068566250456E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999871821581713	WITHOUT_CLASSIFICATION	1.2817841828606608E-5	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999987310583324	WITHOUT_CLASSIFICATION	1.2689416676982612E-6	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999888932219348	WITHOUT_CLASSIFICATION	1.110677806518408E-4	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999925335046131	WITHOUT_CLASSIFICATION	7.466495386848617E-6	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999977429601627	WITHOUT_CLASSIFICATION	2.2570398372013945E-6	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999806072579006	WITHOUT_CLASSIFICATION	1.9392742099326166E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999806072579006	WITHOUT_CLASSIFICATION	1.9392742099326166E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999991003316231	WITHOUT_CLASSIFICATION	8.996683769201891E-7	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999848920872932	WITHOUT_CLASSIFICATION	1.5107912706856353E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999271843023636	WITHOUT_CLASSIFICATION	7.281569763635266E-5	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9989426712658365	WITHOUT_CLASSIFICATION	0.001057328734163568	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999961030410086	WITHOUT_CLASSIFICATION	3.8969589914016776E-6	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999998750461559	WITHOUT_CLASSIFICATION	1.2495384410279657E-6	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999982742336754	WITHOUT_CLASSIFICATION	1.7257663246422857E-6	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998585355097871	WITHOUT_CLASSIFICATION	1.4146449021298183E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999885904432297	WITHOUT_CLASSIFICATION	1.1409556770253937E-5	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999974043305571	WITHOUT_CLASSIFICATION	2.5956694430591197E-6	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999866292331273	WITHOUT_CLASSIFICATION	1.3370766872636872E-5	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999992039182248	WITHOUT_CLASSIFICATION	7.960817752244281E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.999974573098645	WITHOUT_CLASSIFICATION	2.542690135503922E-5	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999986640319455	WITHOUT_CLASSIFICATION	1.3359680544862307E-6	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999884756621293	WITHOUT_CLASSIFICATION	1.1524337870742143E-5	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9775521845420381	WITHOUT_CLASSIFICATION	0.022447815457961866	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9999468318074966	WITHOUT_CLASSIFICATION	5.3168192503481014E-5	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993420717175	WITHOUT_CLASSIFICATION	6.579282823948885E-7	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.999984172132985	WITHOUT_CLASSIFICATION	1.5827867015072265E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999996465721493	WITHOUT_CLASSIFICATION	3.534278506731424E-7	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999408822955719	WITHOUT_CLASSIFICATION	5.911770442818028E-5	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999963476600556	WITHOUT_CLASSIFICATION	3.6523399443585903E-6	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999909365959668	WITHOUT_CLASSIFICATION	9.063404033191247E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999858374535692	WITHOUT_CLASSIFICATION	1.4162546430760243E-5	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9979743506235934	WITHOUT_CLASSIFICATION	0.00202564937640662	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.997847166075954	WITHOUT_CLASSIFICATION	0.002152833924046014	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.5006543899438906	DESIGN	0.49934561005610933	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999699199945763	WITHOUT_CLASSIFICATION	3.0080005423727443E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999961757872197	WITHOUT_CLASSIFICATION	3.82421278030257E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9990651239809984	WITHOUT_CLASSIFICATION	9.348760190015831E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999858374535692	WITHOUT_CLASSIFICATION	1.4162546430760243E-5	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9946582563531782	WITHOUT_CLASSIFICATION	0.00534174364682186	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999918583655905	WITHOUT_CLASSIFICATION	8.141634409507868E-6	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9998130059775049	WITHOUT_CLASSIFICATION	1.8699402249518302E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999989945579737	WITHOUT_CLASSIFICATION	1.005442026301721E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999998954194232	WITHOUT_CLASSIFICATION	1.0458057665461522E-7	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.9840595683931308	DESIGN	0.015940431606869247	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9999355728056997	WITHOUT_CLASSIFICATION	6.442719430029494E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999968560995353	WITHOUT_CLASSIFICATION	3.1439004646694593E-6	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999679928335542	WITHOUT_CLASSIFICATION	3.200716644577685E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999989945579737	WITHOUT_CLASSIFICATION	1.005442026301721E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9997502231780826	WITHOUT_CLASSIFICATION	2.4977682191733915E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999968560995353	WITHOUT_CLASSIFICATION	3.1439004646694593E-6	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9992653440110099	WITHOUT_CLASSIFICATION	7.346559889902343E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999787164391061	WITHOUT_CLASSIFICATION	2.1283560893893908E-5	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.999999293909917	WITHOUT_CLASSIFICATION	7.06090082890818E-7	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999881314904931	WITHOUT_CLASSIFICATION	1.1868509506905188E-5	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999962285672218	WITHOUT_CLASSIFICATION	3.771432778074333E-6	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999747301844232	WITHOUT_CLASSIFICATION	2.5269815576798677E-5	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999952775130895	WITHOUT_CLASSIFICATION	4.722486910452958E-6	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9991506085313657	WITHOUT_CLASSIFICATION	8.493914686343473E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999998136912316	WITHOUT_CLASSIFICATION	1.8630876838612948E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9999863804898865	WITHOUT_CLASSIFICATION	1.3619510113389432E-5	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999997690500408	WITHOUT_CLASSIFICATION	2.3094995917113678E-7	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999739248164496	WITHOUT_CLASSIFICATION	2.6075183550283805E-5	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999998457429715	WITHOUT_CLASSIFICATION	1.5425702840289522E-7	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999785219529647	WITHOUT_CLASSIFICATION	2.1478047035256884E-5	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999961142412469	WITHOUT_CLASSIFICATION	3.885758753108855E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999591469707839	WITHOUT_CLASSIFICATION	4.085302921608489E-5	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999953839030372	WITHOUT_CLASSIFICATION	4.6160969627655835E-6	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9999889276118771	WITHOUT_CLASSIFICATION	1.1072388122845876E-5	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999999667476724	WITHOUT_CLASSIFICATION	3.3252327454061065E-8	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9998636728498812	WITHOUT_CLASSIFICATION	1.3632715011870918E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999990766420329	WITHOUT_CLASSIFICATION	9.233579671388551E-7	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999865218113834	WITHOUT_CLASSIFICATION	1.3478188616763252E-5	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9998822998651565	WITHOUT_CLASSIFICATION	1.1770013484337445E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999876288374753	WITHOUT_CLASSIFICATION	1.2371162524659506E-5	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999983692136968	WITHOUT_CLASSIFICATION	1.6307863032329085E-6	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999994280725933	WITHOUT_CLASSIFICATION	5.719274066547077E-7	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999995834342081	WITHOUT_CLASSIFICATION	4.165657917996284E-7	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999699867477093	WITHOUT_CLASSIFICATION	3.0013252290685006E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999992911969687	WITHOUT_CLASSIFICATION	7.088030312514885E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9999807357954488	WITHOUT_CLASSIFICATION	1.9264204551225388E-5	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999979404121238	WITHOUT_CLASSIFICATION	2.059587876327551E-6	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936029401153	WITHOUT_CLASSIFICATION	6.397059884683572E-6	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9850596361258579	WITHOUT_CLASSIFICATION	0.014940363874141976	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9994623976022772	WITHOUT_CLASSIFICATION	5.376023977227593E-4	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999993222017753	WITHOUT_CLASSIFICATION	6.777982246497216E-7	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9996584144315658	WITHOUT_CLASSIFICATION	3.4158556843421625E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999817862892	WITHOUT_CLASSIFICATION	1.8213710783791133E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999817862892	WITHOUT_CLASSIFICATION	1.8213710783791133E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999913556521987	WITHOUT_CLASSIFICATION	8.644347801393479E-6	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999873203751224	WITHOUT_CLASSIFICATION	1.267962487761844E-5	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999939954314939	WITHOUT_CLASSIFICATION	6.004568506070638E-6	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999995838459232	WITHOUT_CLASSIFICATION	4.161540767312355E-7	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999999321479646	WITHOUT_CLASSIFICATION	6.785203539845119E-7	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9990708646661983	WITHOUT_CLASSIFICATION	9.291353338016195E-4	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.999972435044345	WITHOUT_CLASSIFICATION	2.7564955655035723E-5	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999763788148924	WITHOUT_CLASSIFICATION	2.3621185107537835E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999989277819155	WITHOUT_CLASSIFICATION	1.0722180845011454E-6	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9998822689283609	WITHOUT_CLASSIFICATION	1.1773107163914308E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999737817621675	WITHOUT_CLASSIFICATION	2.6218237832501234E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999930664951623	WITHOUT_CLASSIFICATION	6.933504837737652E-6	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9995142298014471	WITHOUT_CLASSIFICATION	4.857701985528782E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999817862892	WITHOUT_CLASSIFICATION	1.8213710783791133E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999845568824132	WITHOUT_CLASSIFICATION	1.5443117586809394E-5	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9999099125714617	WITHOUT_CLASSIFICATION	9.008742853831126E-5	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99858319433357	WITHOUT_CLASSIFICATION	0.001416805666429904	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998764599590096	WITHOUT_CLASSIFICATION	1.235400409904681E-4	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999943676591162	WITHOUT_CLASSIFICATION	5.632340883807624E-6	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999929003200809	WITHOUT_CLASSIFICATION	7.099679919137826E-6	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998054923945844	WITHOUT_CLASSIFICATION	1.9450760541567217E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999999369933176	WITHOUT_CLASSIFICATION	6.30066824316582E-8	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999562003650536	WITHOUT_CLASSIFICATION	4.379963494630314E-5	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9977834750769623	WITHOUT_CLASSIFICATION	0.002216524923037735	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999871521540677	WITHOUT_CLASSIFICATION	1.2847845932215274E-5	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936029401153	WITHOUT_CLASSIFICATION	6.397059884683572E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999817862892	WITHOUT_CLASSIFICATION	1.8213710783791133E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999865700005529	WITHOUT_CLASSIFICATION	1.3429999447087323E-5	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999971737110993	WITHOUT_CLASSIFICATION	2.826288900598732E-6	DESIGN
switch	WITHOUT_CLASSIFICATION	0.999990175137104	WITHOUT_CLASSIFICATION	9.824862896017997E-6	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999828838493664	WITHOUT_CLASSIFICATION	1.7116150633546523E-5	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.973458065806249	WITHOUT_CLASSIFICATION	0.026541934193750928	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999999845367663	WITHOUT_CLASSIFICATION	1.5463233710984187E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993184014260077	WITHOUT_CLASSIFICATION	6.815985739923014E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999893588847	WITHOUT_CLASSIFICATION	1.0641115434605597E-8	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999994181860847	WITHOUT_CLASSIFICATION	5.818139152410105E-7	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9919005079682723	WITHOUT_CLASSIFICATION	0.008099492031727698	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999977809964967	WITHOUT_CLASSIFICATION	2.21900350329283E-6	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996202282599117	WITHOUT_CLASSIFICATION	3.797717400882549E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999989793491945	WITHOUT_CLASSIFICATION	1.0206508055283632E-6	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9994516993215699	WITHOUT_CLASSIFICATION	5.483006784301588E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999992731246715	WITHOUT_CLASSIFICATION	7.268753285445294E-7	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999717900854854	WITHOUT_CLASSIFICATION	2.8209914514693527E-5	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999993824328246	WITHOUT_CLASSIFICATION	6.175671753189967E-7	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.99998907364902	WITHOUT_CLASSIFICATION	1.0926350980008437E-5	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999980696591678	WITHOUT_CLASSIFICATION	1.9303408321289424E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999993943749864	WITHOUT_CLASSIFICATION	6.05625013452244E-7	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999830178474304	WITHOUT_CLASSIFICATION	1.69821525696221E-5	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999830178474304	WITHOUT_CLASSIFICATION	1.69821525696221E-5	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9817138975472136	WITHOUT_CLASSIFICATION	0.018286102452786432	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9986872259870673	WITHOUT_CLASSIFICATION	0.0013127740129327784	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999874121001969	WITHOUT_CLASSIFICATION	1.258789980309238E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999492438135543	WITHOUT_CLASSIFICATION	5.0756186445696196E-5	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997626769006392	WITHOUT_CLASSIFICATION	2.37323099360751E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999971730771059	WITHOUT_CLASSIFICATION	2.8269228941128936E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9996997078962576	WITHOUT_CLASSIFICATION	3.0029210374236823E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999357094729	WITHOUT_CLASSIFICATION	6.42905271597255E-8	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999357094729	WITHOUT_CLASSIFICATION	6.42905271597255E-8	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998367426876428	WITHOUT_CLASSIFICATION	1.632573123573137E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999986321297748	WITHOUT_CLASSIFICATION	1.367870225117251E-6	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998621252172941	WITHOUT_CLASSIFICATION	1.378747827058469E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999905490124171	WITHOUT_CLASSIFICATION	9.450987582946886E-6	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999905490124171	WITHOUT_CLASSIFICATION	9.450987582946886E-6	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999905490124171	WITHOUT_CLASSIFICATION	9.450987582946886E-6	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999217896372917	WITHOUT_CLASSIFICATION	7.821036270829313E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9978549772378307	WITHOUT_CLASSIFICATION	0.0021450227621692738	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999988442373594	WITHOUT_CLASSIFICATION	1.155762640640614E-6	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9997754792980055	WITHOUT_CLASSIFICATION	2.2452070199463446E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9998937268462031	WITHOUT_CLASSIFICATION	1.0627315379684027E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999817862892	WITHOUT_CLASSIFICATION	1.8213710783791133E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999817862892	WITHOUT_CLASSIFICATION	1.8213710783791133E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.999670241753001	WITHOUT_CLASSIFICATION	3.2975824699894586E-4	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999998949441563	WITHOUT_CLASSIFICATION	1.0505584372214222E-7	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9679789572171879	WITHOUT_CLASSIFICATION	0.03202104278281207	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999935802180328	WITHOUT_CLASSIFICATION	6.419781967263426E-6	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999974666443134	WITHOUT_CLASSIFICATION	2.5333556865178253E-6	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9999594285754609	WITHOUT_CLASSIFICATION	4.057142453898558E-5	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999995250494632	WITHOUT_CLASSIFICATION	4.749505368280515E-7	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9998531822618707	WITHOUT_CLASSIFICATION	1.4681773812936602E-4	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9999996356433286	WITHOUT_CLASSIFICATION	3.6435667135649696E-7	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998335652273	WITHOUT_CLASSIFICATION	1.6643477286277425E-7	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999913118717	WITHOUT_CLASSIFICATION	8.688128399927183E-9	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.999999006150681	WITHOUT_CLASSIFICATION	9.938493189584047E-7	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999970144030987	WITHOUT_CLASSIFICATION	2.985596901178058E-6	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999970144030987	WITHOUT_CLASSIFICATION	2.985596901178058E-6	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999977166827936	WITHOUT_CLASSIFICATION	2.283317206333512E-6	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999977166827936	WITHOUT_CLASSIFICATION	2.283317206333512E-6	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999985221794616	WITHOUT_CLASSIFICATION	1.4778205383517406E-6	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999933700104012	WITHOUT_CLASSIFICATION	6.629989598833218E-6	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999933700104012	WITHOUT_CLASSIFICATION	6.629989598833218E-6	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999964952954163	WITHOUT_CLASSIFICATION	3.5047045837135104E-6	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999871321279029	WITHOUT_CLASSIFICATION	1.2867872097068516E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999853272789125	WITHOUT_CLASSIFICATION	1.4672721087501358E-5	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9999830178474304	WITHOUT_CLASSIFICATION	1.69821525696221E-5	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999991268050935	WITHOUT_CLASSIFICATION	8.731949065486042E-7	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999871321279029	WITHOUT_CLASSIFICATION	1.2867872097068516E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999910730945019	WITHOUT_CLASSIFICATION	8.92690549802603E-6	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.999996683165852	WITHOUT_CLASSIFICATION	3.3168341479790816E-6	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999992442901925	WITHOUT_CLASSIFICATION	7.557098074849345E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999980180292477	WITHOUT_CLASSIFICATION	1.9819707522728065E-6	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999994967343888	WITHOUT_CLASSIFICATION	5.032656110867279E-7	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999965801380499	WITHOUT_CLASSIFICATION	3.419861950001514E-6	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9997146886693077	WITHOUT_CLASSIFICATION	2.8531133069228617E-4	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999993434363978	WITHOUT_CLASSIFICATION	6.565636021893402E-6	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999964891667024	WITHOUT_CLASSIFICATION	3.510833297657647E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999308472727628	WITHOUT_CLASSIFICATION	6.915272723722304E-5	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999997991522683	WITHOUT_CLASSIFICATION	2.0084773152596855E-7	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999923745543076	WITHOUT_CLASSIFICATION	7.625445692365442E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999763574114593	WITHOUT_CLASSIFICATION	2.364258854070646E-5	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999998097789208	WITHOUT_CLASSIFICATION	1.9022107927285985E-7	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9998715749190676	WITHOUT_CLASSIFICATION	1.2842508093230946E-4	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9999966441705519	WITHOUT_CLASSIFICATION	3.3558294480155602E-6	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998869795863	WITHOUT_CLASSIFICATION	1.130204137008209E-7	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998134034825463	WITHOUT_CLASSIFICATION	1.865965174536861E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998134034825463	WITHOUT_CLASSIFICATION	1.865965174536861E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999977675469737	WITHOUT_CLASSIFICATION	2.2324530263569095E-6	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999969753291059	WITHOUT_CLASSIFICATION	3.024670894185222E-6	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999939165440892	WITHOUT_CLASSIFICATION	6.083455910838804E-6	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999994100849439	WITHOUT_CLASSIFICATION	5.899150561747678E-7	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999999541427541	WITHOUT_CLASSIFICATION	4.5857245909039613E-7	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999913895179358	WITHOUT_CLASSIFICATION	8.610482064266827E-6	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999076797992162	WITHOUT_CLASSIFICATION	9.232020078368305E-5	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999970513724032	WITHOUT_CLASSIFICATION	2.9486275968705523E-6	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999847379661525	WITHOUT_CLASSIFICATION	1.5262033847580718E-5	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999951714306288	WITHOUT_CLASSIFICATION	4.828569371245876E-6	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999434076366003	WITHOUT_CLASSIFICATION	5.659236339969186E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996202282599117	WITHOUT_CLASSIFICATION	3.797717400882549E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999996325847288	WITHOUT_CLASSIFICATION	3.674152712118446E-7	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999990275151921	WITHOUT_CLASSIFICATION	9.724848079398856E-7	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999999788812075	WITHOUT_CLASSIFICATION	2.1118792431998548E-8	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999997833148305	WITHOUT_CLASSIFICATION	2.166851694497724E-7	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965604950678	WITHOUT_CLASSIFICATION	3.439504932291162E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965604950678	WITHOUT_CLASSIFICATION	3.439504932291162E-6	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999841154598192	WITHOUT_CLASSIFICATION	1.5884540180754066E-5	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9971061341732783	WITHOUT_CLASSIFICATION	0.002893865826721637	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999993746088608	WITHOUT_CLASSIFICATION	6.253911391649028E-7	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9999969556177514	WITHOUT_CLASSIFICATION	3.0443822485583476E-6	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999998627266425	WITHOUT_CLASSIFICATION	1.3727335748144277E-7	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999991416888023	WITHOUT_CLASSIFICATION	8.583111978272375E-7	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9972523660670108	WITHOUT_CLASSIFICATION	0.0027476339329891067	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999989782676575	WITHOUT_CLASSIFICATION	1.0217323425031531E-6	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999973816019074	WITHOUT_CLASSIFICATION	2.6183980925522393E-6	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999066548603933	WITHOUT_CLASSIFICATION	9.334513960680249E-5	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998221739374217	WITHOUT_CLASSIFICATION	1.778260625783166E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999989782676575	WITHOUT_CLASSIFICATION	1.0217323425031531E-6	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9921226494906636	WITHOUT_CLASSIFICATION	0.007877350509336318	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9999059306560047	WITHOUT_CLASSIFICATION	9.406934399521E-5	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9981416802035341	WITHOUT_CLASSIFICATION	0.001858319796465838	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999817092853343	WITHOUT_CLASSIFICATION	1.8290714665837986E-5	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999646330288782	WITHOUT_CLASSIFICATION	3.536697112188044E-5	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997721702451579	WITHOUT_CLASSIFICATION	2.2782975484212335E-4	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999989546498336	WITHOUT_CLASSIFICATION	1.045350166402853E-6	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999997097010009	WITHOUT_CLASSIFICATION	2.90298999074805E-7	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9999407383604462	WITHOUT_CLASSIFICATION	5.926163955368599E-5	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9991880746497701	WITHOUT_CLASSIFICATION	8.119253502299623E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999430534402978	WITHOUT_CLASSIFICATION	5.6946559702202466E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999994980075712	WITHOUT_CLASSIFICATION	5.019924289079449E-7	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.999985237480807	WITHOUT_CLASSIFICATION	1.4762519193047769E-5	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999320945817706	WITHOUT_CLASSIFICATION	6.790541822937163E-5	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999983366161683	WITHOUT_CLASSIFICATION	1.6633838316492284E-6	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9977003851228283	WITHOUT_CLASSIFICATION	0.0022996148771716606	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999979530232788	WITHOUT_CLASSIFICATION	2.0469767212771917E-6	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.996262019818064	WITHOUT_CLASSIFICATION	0.003737980181936076	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9969844353435595	WITHOUT_CLASSIFICATION	0.0030155646564404065	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999993271308474	WITHOUT_CLASSIFICATION	6.728691527308497E-7	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999858566303819	WITHOUT_CLASSIFICATION	1.4143369618211326E-5	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7220737367734348	WITHOUT_CLASSIFICATION	0.27792626322656516	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.8638177547629907	WITHOUT_CLASSIFICATION	0.13618224523700934	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9996320314093582	WITHOUT_CLASSIFICATION	3.6796859064181214E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999965215479093	WITHOUT_CLASSIFICATION	3.478452090702521E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999838960339108	WITHOUT_CLASSIFICATION	1.6103966089203293E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999996474515368	WITHOUT_CLASSIFICATION	3.52548463198585E-7	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.99999843045807	WITHOUT_CLASSIFICATION	1.5695419299635291E-6	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999872677104538	WITHOUT_CLASSIFICATION	1.2732289546100344E-5	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9992820022640557	WITHOUT_CLASSIFICATION	7.179977359443556E-4	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999997172923107	WITHOUT_CLASSIFICATION	2.8270768926016035E-7	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999959403957032	WITHOUT_CLASSIFICATION	4.059604296816356E-6	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999514020572319	WITHOUT_CLASSIFICATION	4.859794276808181E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999918873456781	WITHOUT_CLASSIFICATION	8.112654321991225E-6	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999966890671457	WITHOUT_CLASSIFICATION	3.310932854297282E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9998831121949042	WITHOUT_CLASSIFICATION	1.1688780509585405E-4	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999937422019458	WITHOUT_CLASSIFICATION	6.25779805415285E-6	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.999999479279083	WITHOUT_CLASSIFICATION	5.207209170225643E-7	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998390023772	WITHOUT_CLASSIFICATION	1.6099762277337113E-7	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999997598495275	WITHOUT_CLASSIFICATION	2.4015047249468786E-6	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999947896250129	WITHOUT_CLASSIFICATION	5.210374987199446E-6	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999967079088802	WITHOUT_CLASSIFICATION	3.292091119752923E-6	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.999984394398201	WITHOUT_CLASSIFICATION	1.5605601799075945E-5	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999999342650905	WITHOUT_CLASSIFICATION	6.573490942024817E-8	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999629753797173	WITHOUT_CLASSIFICATION	3.702462028271537E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9999660795781432	WITHOUT_CLASSIFICATION	3.3920421856790495E-5	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999924522440077	WITHOUT_CLASSIFICATION	7.547755992242706E-6	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999593506768715	WITHOUT_CLASSIFICATION	4.064932312851194E-5	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999885201901895	WITHOUT_CLASSIFICATION	1.1479809810538944E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999980546051286	WITHOUT_CLASSIFICATION	1.9453948714817912E-6	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997024415081953	WITHOUT_CLASSIFICATION	2.9755849180469046E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999782647785677	WITHOUT_CLASSIFICATION	2.173522143241559E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999998845582345	WITHOUT_CLASSIFICATION	1.1544176552117809E-7	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999887259296634	WITHOUT_CLASSIFICATION	1.12740703366149E-5	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999939524009771	WITHOUT_CLASSIFICATION	6.047599022875444E-6	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999998619076873	WITHOUT_CLASSIFICATION	1.3809231264864993E-7	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9986341176821334	WITHOUT_CLASSIFICATION	0.0013658823178666203	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999995419485262	WITHOUT_CLASSIFICATION	4.5805147371131545E-7	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.999998628306906	WITHOUT_CLASSIFICATION	1.3716930940595393E-6	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999962808473986	WITHOUT_CLASSIFICATION	3.719152601486586E-6	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999561082229236	WITHOUT_CLASSIFICATION	4.389177707630137E-5	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999999132521294	WITHOUT_CLASSIFICATION	8.674787062606635E-8	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9999783968320175	WITHOUT_CLASSIFICATION	2.1603167982407166E-5	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9927242689519713	WITHOUT_CLASSIFICATION	0.007275731048028637	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999250807628025	WITHOUT_CLASSIFICATION	7.491923719749881E-4	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998978844616996	WITHOUT_CLASSIFICATION	1.0211553830038926E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997024415081953	WITHOUT_CLASSIFICATION	2.9755849180469046E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999991605571102	WITHOUT_CLASSIFICATION	8.394428898138125E-7	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999988346553719	WITHOUT_CLASSIFICATION	1.1653446281168492E-6	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999856739184713	WITHOUT_CLASSIFICATION	1.4326081528742856E-5	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999993141171465	WITHOUT_CLASSIFICATION	6.858828535075533E-7	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999384340411301	WITHOUT_CLASSIFICATION	6.156595886982075E-5	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999130382489971	WITHOUT_CLASSIFICATION	8.69617510027872E-5	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999973816019074	WITHOUT_CLASSIFICATION	2.6183980925522393E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999652216941631	WITHOUT_CLASSIFICATION	3.4778305836847877E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999966890671457	WITHOUT_CLASSIFICATION	3.310932854297282E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9998544307243489	WITHOUT_CLASSIFICATION	1.4556927565115456E-4	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998971649473088	WITHOUT_CLASSIFICATION	1.0283505269117788E-4	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999966251839734	WITHOUT_CLASSIFICATION	3.3748160266068828E-6	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999949882585285	WITHOUT_CLASSIFICATION	5.011741471519978E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999776907734819	WITHOUT_CLASSIFICATION	2.2309226518118173E-5	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9967161786556266	WITHOUT_CLASSIFICATION	0.0032838213443734483	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999676598889732	WITHOUT_CLASSIFICATION	3.234011102680721E-5	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9999884722900256	WITHOUT_CLASSIFICATION	1.1527709974331531E-5	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9991374367241734	WITHOUT_CLASSIFICATION	8.625632758266534E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999904354746156	WITHOUT_CLASSIFICATION	9.564525384333754E-6	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9974395966140945	WITHOUT_CLASSIFICATION	0.0025604033859054375	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9988850973339425	WITHOUT_CLASSIFICATION	0.001114902666057444	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999970534006167	WITHOUT_CLASSIFICATION	2.9465993833019735E-6	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999970534006167	WITHOUT_CLASSIFICATION	2.9465993833019735E-6	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.999990596477245	WITHOUT_CLASSIFICATION	9.403522754986305E-6	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9966339327446208	WITHOUT_CLASSIFICATION	0.00336606725537929	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997126825484	WITHOUT_CLASSIFICATION	2.8731745169670294E-7	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999358337330939	WITHOUT_CLASSIFICATION	6.416626690603935E-5	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999999961559048	WITHOUT_CLASSIFICATION	3.8440952044605434E-8	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999957756887337	WITHOUT_CLASSIFICATION	4.22431126639379E-6	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999947735806457	WITHOUT_CLASSIFICATION	5.226419354361454E-6	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9996384752870291	WITHOUT_CLASSIFICATION	3.615247129708901E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999976277774058	WITHOUT_CLASSIFICATION	2.372222594278046E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9948420931569515	WITHOUT_CLASSIFICATION	0.005157906843048489	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9999981229272024	WITHOUT_CLASSIFICATION	1.8770727975792599E-6	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999946981956792	WITHOUT_CLASSIFICATION	5.301804320748724E-6	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999668581168033	WITHOUT_CLASSIFICATION	3.3141883196628035E-5	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999731659754983	WITHOUT_CLASSIFICATION	2.6834024501639752E-5	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9996954852309029	WITHOUT_CLASSIFICATION	3.0451476909714977E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999215666278832	WITHOUT_CLASSIFICATION	7.843337211683217E-5	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9999990119675417	WITHOUT_CLASSIFICATION	9.88032458371165E-7	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.990653469350962	WITHOUT_CLASSIFICATION	0.009346530649037978	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999177375111	WITHOUT_CLASSIFICATION	8.226248894640604E-8	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999900814000234	WITHOUT_CLASSIFICATION	9.918599976558192E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999654057622192	WITHOUT_CLASSIFICATION	3.4594237780845626E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999917680581505	WITHOUT_CLASSIFICATION	8.231941849496099E-6	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999952217107053	WITHOUT_CLASSIFICATION	4.778289294682185E-6	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9989597208460149	WITHOUT_CLASSIFICATION	0.0010402791539850607	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9997266473977472	WITHOUT_CLASSIFICATION	2.733526022528413E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999989669773742	WITHOUT_CLASSIFICATION	1.0330226257712929E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991031076338369	WITHOUT_CLASSIFICATION	8.968923661629804E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999813958571003	WITHOUT_CLASSIFICATION	1.860414289964494E-5	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999774683862699	WITHOUT_CLASSIFICATION	2.2531613730042398E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999989666390348	WITHOUT_CLASSIFICATION	1.0333609652401257E-6	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999133454788448	WITHOUT_CLASSIFICATION	8.665452115529813E-5	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999812417395472	WITHOUT_CLASSIFICATION	1.8758260452880362E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9999782263524291	WITHOUT_CLASSIFICATION	2.1773647571009253E-5	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9995863959661864	WITHOUT_CLASSIFICATION	4.136040338135945E-4	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9999992989929115	WITHOUT_CLASSIFICATION	7.010070884510506E-7	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999996867561131	WITHOUT_CLASSIFICATION	3.1324388684693255E-7	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999705968813	WITHOUT_CLASSIFICATION	2.9403118756899404E-8	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999999954346856	WITHOUT_CLASSIFICATION	4.5653144009107574E-8	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999961127757006	WITHOUT_CLASSIFICATION	3.887224299482561E-6	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999998833992346	WITHOUT_CLASSIFICATION	1.1660076532910841E-7	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995324908982	WITHOUT_CLASSIFICATION	4.675091018108441E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993655910276538	WITHOUT_CLASSIFICATION	6.344089723462075E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999723462989965	WITHOUT_CLASSIFICATION	2.7653701003558184E-5	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999997365248567	WITHOUT_CLASSIFICATION	2.634751432029809E-7	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999141362628	WITHOUT_CLASSIFICATION	8.586373725667816E-8	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999975016601	WITHOUT_CLASSIFICATION	2.4983399263967047E-9	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989793053570599	WITHOUT_CLASSIFICATION	0.0010206946429400544	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9785926020099781	WITHOUT_CLASSIFICATION	0.02140739799002191	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997834256894	WITHOUT_CLASSIFICATION	2.1657431069956523E-7	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999998933228056	WITHOUT_CLASSIFICATION	1.0667719439180836E-7	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999837217421486	WITHOUT_CLASSIFICATION	1.6278257851431053E-5	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988909191832478	WITHOUT_CLASSIFICATION	0.0011090808167520986	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999391633294	WITHOUT_CLASSIFICATION	6.083667062657961E-8	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999931596456959	WITHOUT_CLASSIFICATION	6.8403543041397545E-6	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999982328207065	WITHOUT_CLASSIFICATION	1.767179293354957E-6	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999998038769147	WITHOUT_CLASSIFICATION	1.9612308531040296E-7	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9969647059609794	WITHOUT_CLASSIFICATION	0.003035294039020478	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999983638425494	WITHOUT_CLASSIFICATION	1.6361574506139989E-6	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999996361095375	WITHOUT_CLASSIFICATION	3.6389046262206575E-7	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999996539447512	WITHOUT_CLASSIFICATION	3.460552487587045E-7	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999998787432645	WITHOUT_CLASSIFICATION	1.2125673555135784E-7	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999572884044389	WITHOUT_CLASSIFICATION	4.271159556104519E-5	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999985569027375	WITHOUT_CLASSIFICATION	1.4430972624930164E-6	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9998841989266541	WITHOUT_CLASSIFICATION	1.1580107334576442E-4	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999998224270907	WITHOUT_CLASSIFICATION	1.7757290923962714E-7	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.999997470386254	WITHOUT_CLASSIFICATION	2.5296137460449685E-6	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999984241639222	WITHOUT_CLASSIFICATION	1.575836077865916E-6	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999563647273	WITHOUT_CLASSIFICATION	4.3635272768271894E-8	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999990500922565	WITHOUT_CLASSIFICATION	9.499077435267512E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999956318454681	WITHOUT_CLASSIFICATION	4.368154531881073E-6	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.999999730330055	WITHOUT_CLASSIFICATION	2.696699450445864E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999956318454681	WITHOUT_CLASSIFICATION	4.368154531881073E-6	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999998823976666	WITHOUT_CLASSIFICATION	1.1760233345799678E-7	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999840545672706	WITHOUT_CLASSIFICATION	1.5945432729461087E-5	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999753041528904	WITHOUT_CLASSIFICATION	2.4695847109672413E-5	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995489543456	WITHOUT_CLASSIFICATION	4.510456542940518E-7	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999990905954188	WITHOUT_CLASSIFICATION	9.094045812333178E-7	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999976688008027	WITHOUT_CLASSIFICATION	2.3311991973013714E-5	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999990884330632	WITHOUT_CLASSIFICATION	9.115669367697803E-7	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9998459139834017	WITHOUT_CLASSIFICATION	1.5408601659825137E-4	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999942162617169	WITHOUT_CLASSIFICATION	5.78373828315456E-6	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999854114291832	WITHOUT_CLASSIFICATION	1.4588570816722252E-5	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999988679840854	WITHOUT_CLASSIFICATION	1.1320159145269363E-6	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999295925367597	WITHOUT_CLASSIFICATION	7.04074632402535E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999993098297059	WITHOUT_CLASSIFICATION	6.901702942591323E-7	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.8645379635825732	WITHOUT_CLASSIFICATION	0.13546203641742682	DESIGN
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999523423063349	WITHOUT_CLASSIFICATION	4.7657693665129786E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999982285960172	WITHOUT_CLASSIFICATION	1.7714039828605215E-6	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999855135735554	WITHOUT_CLASSIFICATION	1.4486426444597325E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999513742012	WITHOUT_CLASSIFICATION	4.8625798806137756E-8	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999947025615532	WITHOUT_CLASSIFICATION	5.2974384468551435E-6	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9995228882068229	WITHOUT_CLASSIFICATION	4.771117931770286E-4	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999995424890202	WITHOUT_CLASSIFICATION	4.575109797997373E-7	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999889335675562	WITHOUT_CLASSIFICATION	1.1066432443817113E-5	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9966562726520785	WITHOUT_CLASSIFICATION	0.0033437273479214684	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9911849173447922	WITHOUT_CLASSIFICATION	0.008815082655207761	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.999958290663862	WITHOUT_CLASSIFICATION	4.170933613811974E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999986983477657	WITHOUT_CLASSIFICATION	1.3016522343109478E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994221048926959	WITHOUT_CLASSIFICATION	5.778951073041094E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999934305181221	WITHOUT_CLASSIFICATION	6.5694818779907395E-6	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998196058131	WITHOUT_CLASSIFICATION	1.8039418704126867E-7	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999983714631271	WITHOUT_CLASSIFICATION	1.6285368728694229E-6	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999986367447625	WITHOUT_CLASSIFICATION	1.3632552375136066E-6	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9010066963533423	WITHOUT_CLASSIFICATION	0.09899330364665776	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999895006943198	WITHOUT_CLASSIFICATION	1.0499305680129831E-5	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9998623126700287	WITHOUT_CLASSIFICATION	1.376873299713747E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999928179515026	WITHOUT_CLASSIFICATION	7.182048497361155E-6	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999982800757102	WITHOUT_CLASSIFICATION	1.719924289813363E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999999109722921	WITHOUT_CLASSIFICATION	8.902770784762067E-8	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999998706402591	WITHOUT_CLASSIFICATION	1.2935974092115812E-7	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9998352698799747	WITHOUT_CLASSIFICATION	1.6473012002522888E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999997680793655	WITHOUT_CLASSIFICATION	2.319206344229193E-7	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999993378569746	WITHOUT_CLASSIFICATION	6.621430252884429E-7	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999989545780382	WITHOUT_CLASSIFICATION	1.0454219617974073E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999643539666353	WITHOUT_CLASSIFICATION	3.5646033364792785E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999986983477657	WITHOUT_CLASSIFICATION	1.3016522343109478E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998570445298257	WITHOUT_CLASSIFICATION	1.429554701742361E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999997714707866	WITHOUT_CLASSIFICATION	2.2852921337971627E-7	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9954774018715815	WITHOUT_CLASSIFICATION	0.004522598128418567	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999975008549962	WITHOUT_CLASSIFICATION	2.4991450038777762E-6	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999994922652243	WITHOUT_CLASSIFICATION	5.077347756296681E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999998638833494	WITHOUT_CLASSIFICATION	1.3611665060402798E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9999947132044453	WITHOUT_CLASSIFICATION	5.286795554691988E-6	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9808222155022431	DESIGN	0.01917778449775686	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9996733601564878	WITHOUT_CLASSIFICATION	3.266398435122171E-4	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9994603311189533	WITHOUT_CLASSIFICATION	5.396688810466942E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999765896363274	WITHOUT_CLASSIFICATION	2.3410363672573827E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9993284306120205	WITHOUT_CLASSIFICATION	6.715693879795338E-4	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999969726287501	WITHOUT_CLASSIFICATION	3.0273712500105575E-6	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9999576044570598	WITHOUT_CLASSIFICATION	4.2395542940206035E-5	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.99999896138588	WITHOUT_CLASSIFICATION	1.0386141201281365E-6	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999998378418781	WITHOUT_CLASSIFICATION	1.621581218680094E-7	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998132912861	WITHOUT_CLASSIFICATION	1.8670871397730841E-7	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999988127547579	WITHOUT_CLASSIFICATION	1.187245242077808E-6	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999987878004429	WITHOUT_CLASSIFICATION	1.212199556965144E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9998570445298257	WITHOUT_CLASSIFICATION	1.429554701742361E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999994082558368	WITHOUT_CLASSIFICATION	5.917441631276161E-7	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9966920574271114	WITHOUT_CLASSIFICATION	0.0033079425728885755	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9998546853955018	WITHOUT_CLASSIFICATION	1.453146044982323E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9967953087502539	WITHOUT_CLASSIFICATION	0.003204691249746072	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999775581776013	WITHOUT_CLASSIFICATION	2.2441822398752272E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999793461508819	WITHOUT_CLASSIFICATION	2.0653849118088756E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999793461508819	WITHOUT_CLASSIFICATION	2.0653849118088756E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999998275736339	WITHOUT_CLASSIFICATION	1.7242636594952808E-7	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999793461508819	WITHOUT_CLASSIFICATION	2.0653849118088756E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9999793461508819	WITHOUT_CLASSIFICATION	2.0653849118088756E-5	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9999280982717514	WITHOUT_CLASSIFICATION	7.190172824845933E-5	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999936620949776	WITHOUT_CLASSIFICATION	6.3379050222904465E-6	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999385161775575	WITHOUT_CLASSIFICATION	6.148382244259995E-5	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.999954845988253	WITHOUT_CLASSIFICATION	4.515401174702473E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997889508842178	WITHOUT_CLASSIFICATION	2.11049115782102E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9709761900319054	WITHOUT_CLASSIFICATION	0.02902380996809469	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9964409469186429	WITHOUT_CLASSIFICATION	0.003559053081357114	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999478313365868	WITHOUT_CLASSIFICATION	5.2168663413147895E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999929972708061	WITHOUT_CLASSIFICATION	7.002729193875978E-6	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999986622843592	WITHOUT_CLASSIFICATION	1.3377156408210334E-6	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998885493710651	WITHOUT_CLASSIFICATION	1.1145062893491734E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999912574031444	WITHOUT_CLASSIFICATION	8.742596855592953E-6	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999977044334534	WITHOUT_CLASSIFICATION	2.2955665467346593E-6	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999986702531102	WITHOUT_CLASSIFICATION	1.3297468898434005E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.999999715311207	WITHOUT_CLASSIFICATION	2.846887930075975E-7	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997468033231123	WITHOUT_CLASSIFICATION	2.5319667688771593E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999947584795498	WITHOUT_CLASSIFICATION	5.241520450223953E-6	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999984507531042	WITHOUT_CLASSIFICATION	1.5492468957720086E-6	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9913149704287598	WITHOUT_CLASSIFICATION	0.00868502957124027	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999955110096356	WITHOUT_CLASSIFICATION	4.488990364351013E-6	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999950690111424	WITHOUT_CLASSIFICATION	4.930988857572326E-6	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999971526145964	WITHOUT_CLASSIFICATION	2.8473854035227702E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999947584795498	WITHOUT_CLASSIFICATION	5.241520450223953E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9994221048926959	WITHOUT_CLASSIFICATION	5.778951073041094E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999982136225241	WITHOUT_CLASSIFICATION	1.786377475907425E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999992752599964	WITHOUT_CLASSIFICATION	7.247400035538749E-7	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999995463131623	WITHOUT_CLASSIFICATION	4.536868376983906E-6	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999972585795964	WITHOUT_CLASSIFICATION	2.741420403608355E-6	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999875600387166	WITHOUT_CLASSIFICATION	1.2439961283322464E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999882250542292	WITHOUT_CLASSIFICATION	1.177494577067794E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999773595595076	WITHOUT_CLASSIFICATION	2.2640440492438122E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999991061409531	WITHOUT_CLASSIFICATION	8.938590468951309E-7	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9988325912737305	WITHOUT_CLASSIFICATION	0.0011674087262695965	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999892922121717	WITHOUT_CLASSIFICATION	1.0707787828327026E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999998014938158	WITHOUT_CLASSIFICATION	1.9850618405743886E-7	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999590684365642	WITHOUT_CLASSIFICATION	4.093156343569356E-5	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999238183644	WITHOUT_CLASSIFICATION	7.618163546052873E-8	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999931863860847	WITHOUT_CLASSIFICATION	6.81361391540961E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999994845322386	WITHOUT_CLASSIFICATION	5.154677613971037E-6	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.999998935215707	WITHOUT_CLASSIFICATION	1.064784292885403E-6	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999982454409772	WITHOUT_CLASSIFICATION	1.7545590228090936E-6	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999983996405766	WITHOUT_CLASSIFICATION	1.6003594235024966E-6	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.99999019413144	WITHOUT_CLASSIFICATION	9.805868560006454E-6	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.999384377347235	WITHOUT_CLASSIFICATION	6.156226527650517E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999957995093625	WITHOUT_CLASSIFICATION	4.20049063753757E-6	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9996110770966202	WITHOUT_CLASSIFICATION	3.88922903379817E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999991061409531	WITHOUT_CLASSIFICATION	8.938590468951309E-7	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999999436863787	WITHOUT_CLASSIFICATION	5.631362129035092E-8	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9999356441507045	WITHOUT_CLASSIFICATION	6.435584929558554E-5	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.999984308135333	WITHOUT_CLASSIFICATION	1.569186466697931E-5	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9997834519804677	WITHOUT_CLASSIFICATION	2.1654801953224998E-4	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999773245581477	WITHOUT_CLASSIFICATION	2.2675441852306783E-5	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999842930796381	WITHOUT_CLASSIFICATION	1.5706920361827886E-5	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999920613003545	WITHOUT_CLASSIFICATION	7.938699645631089E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999514962785256	WITHOUT_CLASSIFICATION	4.850372147443042E-5	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999998534450002	WITHOUT_CLASSIFICATION	1.4655499982152426E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999452990553666	WITHOUT_CLASSIFICATION	5.470094463342757E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999988986732717	WITHOUT_CLASSIFICATION	1.1013267282558992E-6	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999795095798	WITHOUT_CLASSIFICATION	2.0490420309134705E-8	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9996672382307321	WITHOUT_CLASSIFICATION	3.3276176926785736E-4	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999992974265001	WITHOUT_CLASSIFICATION	7.025734999114503E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999356729077383	WITHOUT_CLASSIFICATION	6.432709226164583E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999996040676797	WITHOUT_CLASSIFICATION	3.9593232029368535E-7	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999795165159355	WITHOUT_CLASSIFICATION	2.0483484064435356E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999988986732717	WITHOUT_CLASSIFICATION	1.1013267282558992E-6	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.999999126698254	WITHOUT_CLASSIFICATION	8.733017459006049E-7	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9962192996689834	WITHOUT_CLASSIFICATION	0.0037807003310166287	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999929010361001	WITHOUT_CLASSIFICATION	7.098963899965265E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999707315147592	WITHOUT_CLASSIFICATION	2.926848524073104E-5	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9999982572924765	WITHOUT_CLASSIFICATION	1.7427075234966967E-6	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999994965336847	WITHOUT_CLASSIFICATION	5.034663153590966E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999356729077383	WITHOUT_CLASSIFICATION	6.432709226164583E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999988844556708	WITHOUT_CLASSIFICATION	1.1155443291967381E-6	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999258921860288	WITHOUT_CLASSIFICATION	7.410781397120835E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868702418258	WITHOUT_CLASSIFICATION	1.3129758174210822E-5	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999323112384916	WITHOUT_CLASSIFICATION	6.768876150840941E-5	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812965728474	WITHOUT_CLASSIFICATION	1.8703427152607505E-5	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987677294518	WITHOUT_CLASSIFICATION	1.2322705482005376E-5	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999968992636766	WITHOUT_CLASSIFICATION	3.100736323513627E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999968992636766	WITHOUT_CLASSIFICATION	3.100736323513627E-6	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9996660658635728	WITHOUT_CLASSIFICATION	3.3393413642727354E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999994266059218	WITHOUT_CLASSIFICATION	5.733940783154944E-7	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999980796411106	WITHOUT_CLASSIFICATION	1.920358889294623E-6	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999872599804109	WITHOUT_CLASSIFICATION	1.2740019589144075E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999956690481695	WITHOUT_CLASSIFICATION	4.330951830586214E-6	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762503533106	WITHOUT_CLASSIFICATION	2.3749646689386048E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840965793261	WITHOUT_CLASSIFICATION	1.590342067386444E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526835508242	WITHOUT_CLASSIFICATION	4.731644917570473E-5	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9954092664843541	WITHOUT_CLASSIFICATION	0.004590733515645858	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999666429845627	WITHOUT_CLASSIFICATION	3.335701543721462E-5	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999762503533106	WITHOUT_CLASSIFICATION	2.3749646689386048E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999840965793261	WITHOUT_CLASSIFICATION	1.590342067386444E-5	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999526835508242	WITHOUT_CLASSIFICATION	4.731644917570473E-5	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999386354925238	WITHOUT_CLASSIFICATION	6.136450747616625E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9999406264637594	WITHOUT_CLASSIFICATION	5.9373536240746694E-5	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999578760795066	WITHOUT_CLASSIFICATION	4.212392049342574E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.999961774209052	WITHOUT_CLASSIFICATION	3.822579094806114E-5	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9993494107490146	WITHOUT_CLASSIFICATION	6.505892509853809E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9997836885475179	DESIGN	2.1631145248202362E-4	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999999653378232	WITHOUT_CLASSIFICATION	3.466217679999541E-7	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9998701089414014	WITHOUT_CLASSIFICATION	1.2989105859862005E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999936302528761	WITHOUT_CLASSIFICATION	6.369747123791502E-6	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999912994150695	WITHOUT_CLASSIFICATION	8.700584930493031E-5	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999823072500899	WITHOUT_CLASSIFICATION	1.7692749910211954E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9938504182968614	WITHOUT_CLASSIFICATION	0.006149581703138667	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9988708836138526	WITHOUT_CLASSIFICATION	0.0011291163861473492	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9985808433055199	WITHOUT_CLASSIFICATION	0.0014191566944801596	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999934686918873	WITHOUT_CLASSIFICATION	6.53130811262912E-6	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999477523179486	WITHOUT_CLASSIFICATION	5.2247682051413865E-5	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.990911112217946	WITHOUT_CLASSIFICATION	0.00908888778205405	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999995850964567	WITHOUT_CLASSIFICATION	4.149035433018025E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999881538800574	WITHOUT_CLASSIFICATION	1.184611994267415E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999987512761758	WITHOUT_CLASSIFICATION	1.2487238243356915E-6	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999935643003807	WITHOUT_CLASSIFICATION	6.435699619342757E-6	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999949333069762	WITHOUT_CLASSIFICATION	5.066693023778032E-6	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999975838454302	WITHOUT_CLASSIFICATION	2.41615456970532E-6	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999701917382067	WITHOUT_CLASSIFICATION	2.9808261793372103E-5	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999945988986907	WITHOUT_CLASSIFICATION	5.401101309277651E-6	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999962394015312	WITHOUT_CLASSIFICATION	3.760598468810917E-6	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923561555945	WITHOUT_CLASSIFICATION	7.643844405510334E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999724204211202	WITHOUT_CLASSIFICATION	2.7579578879768615E-5	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9999212685437705	WITHOUT_CLASSIFICATION	7.873145622950638E-5	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951467647339	WITHOUT_CLASSIFICATION	4.853235266049577E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999960407317993	WITHOUT_CLASSIFICATION	3.959268200694264E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999275802593192	WITHOUT_CLASSIFICATION	7.241974068083841E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999275802593192	WITHOUT_CLASSIFICATION	7.241974068083841E-5	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999997676040271	WITHOUT_CLASSIFICATION	2.323959728046764E-7	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999995674313721	WITHOUT_CLASSIFICATION	4.3256862794969335E-7	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999973925835788	WITHOUT_CLASSIFICATION	2.607416421133887E-6	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996202282599117	WITHOUT_CLASSIFICATION	3.797717400882549E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9964668140219769	WITHOUT_CLASSIFICATION	0.0035331859780230457	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999979899918411	WITHOUT_CLASSIFICATION	2.010008158993801E-6	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9999331251636296	WITHOUT_CLASSIFICATION	6.687483637033334E-5	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999994657413175	WITHOUT_CLASSIFICATION	5.342586825272161E-7	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999804137239547	WITHOUT_CLASSIFICATION	1.958627604525825E-5	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999789993099	WITHOUT_CLASSIFICATION	2.1000690061260094E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999275398964	WITHOUT_CLASSIFICATION	7.246010364787021E-8	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999463729226	WITHOUT_CLASSIFICATION	5.36270774279049E-8	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999875045456	WITHOUT_CLASSIFICATION	1.2495454399156343E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999865145918	WITHOUT_CLASSIFICATION	1.348540819971227E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999476542918	WITHOUT_CLASSIFICATION	5.234570828158409E-8	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999563739446	WITHOUT_CLASSIFICATION	4.3626055527567514E-8	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999156397508	WITHOUT_CLASSIFICATION	8.436024924772142E-8	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999537333437	WITHOUT_CLASSIFICATION	4.626665624697002E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999853759031	WITHOUT_CLASSIFICATION	1.4624096908414154E-7	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976045490561	WITHOUT_CLASSIFICATION	2.3954509439749267E-6	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999860299781186	WITHOUT_CLASSIFICATION	1.3970021881376112E-5	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9996955339533872	WITHOUT_CLASSIFICATION	3.044660466128727E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936032437897646	WITHOUT_CLASSIFICATION	0.00639675621023534	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999512485313532	WITHOUT_CLASSIFICATION	4.875146864681517E-5	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9831254901996934	WITHOUT_CLASSIFICATION	0.01687450980030657	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9999574763965138	WITHOUT_CLASSIFICATION	4.252360348618194E-5	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.999998393011608	WITHOUT_CLASSIFICATION	1.606988392096321E-6	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.998701714657046	WITHOUT_CLASSIFICATION	0.001298285342954004	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936032437897646	WITHOUT_CLASSIFICATION	0.00639675621023534	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936032437897646	WITHOUT_CLASSIFICATION	0.00639675621023534	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9859143850158419	WITHOUT_CLASSIFICATION	0.014085614984158081	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999968134284882	WITHOUT_CLASSIFICATION	3.18657151178233E-6	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999934912443221	WITHOUT_CLASSIFICATION	6.508755677954427E-6	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999687184768231	WITHOUT_CLASSIFICATION	3.128152317686363E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999763574114593	WITHOUT_CLASSIFICATION	2.364258854070646E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999987512761758	WITHOUT_CLASSIFICATION	1.2487238243356915E-6	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999841928036695	WITHOUT_CLASSIFICATION	1.58071963305205E-5	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999990668799155	WITHOUT_CLASSIFICATION	9.33120084541455E-7	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999986305540903	WITHOUT_CLASSIFICATION	1.3694459096191582E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9924636372943351	WITHOUT_CLASSIFICATION	0.007536362705664967	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999795182463562	WITHOUT_CLASSIFICATION	2.048175364381559E-5	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997826428818946	WITHOUT_CLASSIFICATION	2.173571181053973E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998189194347601	WITHOUT_CLASSIFICATION	1.8108056523990818E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998189194347601	WITHOUT_CLASSIFICATION	1.8108056523990818E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998866229278439	WITHOUT_CLASSIFICATION	1.133770721560741E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998866229278439	WITHOUT_CLASSIFICATION	1.133770721560741E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998835429188876	WITHOUT_CLASSIFICATION	1.1645708111249372E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999185124384562	WITHOUT_CLASSIFICATION	8.148756154382712E-5	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999876153363	WITHOUT_CLASSIFICATION	1.2384663702212252E-8	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994121543203078	WITHOUT_CLASSIFICATION	5.878456796922491E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9988014837674153	WITHOUT_CLASSIFICATION	0.0011985162325846472	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9970892865850404	WITHOUT_CLASSIFICATION	0.002910713414959742	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969256526099	WITHOUT_CLASSIFICATION	3.0743473901645596E-6	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908686878405	WITHOUT_CLASSIFICATION	9.131312159477723E-6	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9956891436399666	WITHOUT_CLASSIFICATION	0.0043108563600333764	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.999999931054918	WITHOUT_CLASSIFICATION	6.894508206590523E-8	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995128591144	WITHOUT_CLASSIFICATION	4.871408856502253E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999996747297419	WITHOUT_CLASSIFICATION	3.252702581068722E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999879951856736	WITHOUT_CLASSIFICATION	1.2004814326312515E-5	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999993393825373	WITHOUT_CLASSIFICATION	6.606174626139881E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999986436666317	WITHOUT_CLASSIFICATION	1.3563333683105097E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999986436666317	WITHOUT_CLASSIFICATION	1.3563333683105097E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999986436666317	WITHOUT_CLASSIFICATION	1.3563333683105097E-6	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999837986081677	WITHOUT_CLASSIFICATION	1.6201391832307272E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999975768530058	WITHOUT_CLASSIFICATION	2.4231469941557848E-6	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999955046545	WITHOUT_CLASSIFICATION	4.495345576156119E-9	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.99998490406661	WITHOUT_CLASSIFICATION	1.5095933390021151E-5	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941174320113	WITHOUT_CLASSIFICATION	5.8825679887564205E-6	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999908291836039	WITHOUT_CLASSIFICATION	9.170816396162696E-6	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.99999943297616	WITHOUT_CLASSIFICATION	5.670238398977753E-7	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999414930183906	WITHOUT_CLASSIFICATION	5.8506981609411815E-5	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999978393971399	WITHOUT_CLASSIFICATION	2.160602860067759E-6	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999969114473473	WITHOUT_CLASSIFICATION	3.0885526527331084E-6	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9985308906721944	WITHOUT_CLASSIFICATION	0.0014691093278055855	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9988367319231557	WITHOUT_CLASSIFICATION	0.0011632680768443298	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988371285681	WITHOUT_CLASSIFICATION	1.1628714318376048E-6	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999135657156	WITHOUT_CLASSIFICATION	8.643428438134592E-8	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999846307765031	WITHOUT_CLASSIFICATION	1.5369223496853218E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9998481770837127	WITHOUT_CLASSIFICATION	1.518229162874595E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998645839316405	WITHOUT_CLASSIFICATION	1.3541606835948064E-4	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.998082820567945	WITHOUT_CLASSIFICATION	0.0019171794320550883	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9976630895714744	WITHOUT_CLASSIFICATION	0.0023369104285255785	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999962579017889	WITHOUT_CLASSIFICATION	3.7420982110406937E-6	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999998816659078	WITHOUT_CLASSIFICATION	1.1833409221300517E-7	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999994979698147	WITHOUT_CLASSIFICATION	5.020301852347603E-7	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999887832747544	WITHOUT_CLASSIFICATION	1.1216725245538797E-5	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999991636827091	WITHOUT_CLASSIFICATION	8.363172908738003E-7	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999915636557886	WITHOUT_CLASSIFICATION	8.436344211358157E-6	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9994494049553451	WITHOUT_CLASSIFICATION	5.505950446548768E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999629070800946	WITHOUT_CLASSIFICATION	3.709291990530564E-5	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.999948392900472	WITHOUT_CLASSIFICATION	5.1607099527930144E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999997252765891	WITHOUT_CLASSIFICATION	2.7472341090591903E-6	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9998903919937628	WITHOUT_CLASSIFICATION	1.0960800623703744E-4	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9994279241239074	WITHOUT_CLASSIFICATION	5.720758760926464E-4	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999919645194275	WITHOUT_CLASSIFICATION	8.035480572505014E-6	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998543028446214	WITHOUT_CLASSIFICATION	1.456971553786144E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.988186786957298	WITHOUT_CLASSIFICATION	0.011813213042701954	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.999999749197082	WITHOUT_CLASSIFICATION	2.508029179011996E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9964335999741951	WITHOUT_CLASSIFICATION	0.003566400025804815	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999993420717175	WITHOUT_CLASSIFICATION	6.579282823948885E-7	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999166410934407	WITHOUT_CLASSIFICATION	8.335890655933687E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999929436979892	WITHOUT_CLASSIFICATION	7.056302010735658E-6	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999673142932223	WITHOUT_CLASSIFICATION	3.26857067776271E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999545861550836	WITHOUT_CLASSIFICATION	4.541384491646839E-5	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999992153955852	WITHOUT_CLASSIFICATION	7.84604414790637E-7	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9892056094495425	WITHOUT_CLASSIFICATION	0.01079439055045755	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9987479331956692	WITHOUT_CLASSIFICATION	0.001252066804330696	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999772578952686	WITHOUT_CLASSIFICATION	2.2742104731427876E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9999839925781202	WITHOUT_CLASSIFICATION	1.6007421879741104E-5	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.99999992464421	WITHOUT_CLASSIFICATION	7.535578995931131E-8	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999978925760399	WITHOUT_CLASSIFICATION	2.107423960102962E-6	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999821116315423	WITHOUT_CLASSIFICATION	1.7888368457782276E-5	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999440994296036	WITHOUT_CLASSIFICATION	5.590057039650475E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999975321255867	WITHOUT_CLASSIFICATION	2.4678744133300476E-6	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9996153002005044	WITHOUT_CLASSIFICATION	3.8469979949566646E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9993214417686592	WITHOUT_CLASSIFICATION	6.785582313407547E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999992717994259	WITHOUT_CLASSIFICATION	7.282005741393344E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999999796342495	WITHOUT_CLASSIFICATION	2.0365750490992079E-7	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999931388264965	WITHOUT_CLASSIFICATION	6.8611735034113156E-6	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9994080860550839	WITHOUT_CLASSIFICATION	5.919139449160637E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.99999995812806	WITHOUT_CLASSIFICATION	4.187193999969208E-8	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999694070063697	WITHOUT_CLASSIFICATION	3.059299363032285E-5	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9985667894696996	WITHOUT_CLASSIFICATION	0.0014332105303003825	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999957912893189	WITHOUT_CLASSIFICATION	4.2087106810470935E-6	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999869080712	WITHOUT_CLASSIFICATION	1.3091928791924808E-7	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999986159640938	WITHOUT_CLASSIFICATION	1.3840359062130345E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9999988672652897	WITHOUT_CLASSIFICATION	1.1327347102204474E-6	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999998338727799	WITHOUT_CLASSIFICATION	1.6612722010043655E-6	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9998054380227912	WITHOUT_CLASSIFICATION	1.945619772088423E-4	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9980905551239615	WITHOUT_CLASSIFICATION	0.0019094448760385175	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998025716278	WITHOUT_CLASSIFICATION	1.9742837219310433E-7	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999858374535692	WITHOUT_CLASSIFICATION	1.4162546430760243E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999858374535692	WITHOUT_CLASSIFICATION	1.4162546430760243E-5	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999998964019364	WITHOUT_CLASSIFICATION	1.0359806354825282E-7	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9999608818879095	WITHOUT_CLASSIFICATION	3.911811209041385E-5	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9993239709339117	WITHOUT_CLASSIFICATION	6.760290660883375E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9999923376306113	WITHOUT_CLASSIFICATION	7.662369388690097E-6	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.999864614366253	WITHOUT_CLASSIFICATION	1.353856337469826E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999911241062858	WITHOUT_CLASSIFICATION	8.875893714185332E-6	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9962578961491494	WITHOUT_CLASSIFICATION	0.003742103850850625	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999893199199564	WITHOUT_CLASSIFICATION	1.0680080043549364E-5	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999922759711878	WITHOUT_CLASSIFICATION	7.724028812203114E-6	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999884492426717	WITHOUT_CLASSIFICATION	1.1550757328315048E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999468917158	WITHOUT_CLASSIFICATION	5.310828432754249E-8	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999986032061092	WITHOUT_CLASSIFICATION	1.396793890801598E-6	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999994860582059	WITHOUT_CLASSIFICATION	5.139417941123353E-7	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999958516592129	WITHOUT_CLASSIFICATION	4.148340787141513E-6	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999845692492592	WITHOUT_CLASSIFICATION	1.543075074081737E-5	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9712996096883026	WITHOUT_CLASSIFICATION	0.028700390311697237	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999839298685496	WITHOUT_CLASSIFICATION	1.6070131450434464E-5	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8046866012211753	DESIGN	0.1953133987788247	WITHOUT_CLASSIFICATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.7177502557279769	WITHOUT_CLASSIFICATION	0.28224974427202304	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9997718220398372	WITHOUT_CLASSIFICATION	2.2817796016288223E-4	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999984397807263	WITHOUT_CLASSIFICATION	1.5602192736871875E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.999936626059457	WITHOUT_CLASSIFICATION	6.337394054303281E-5	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9923265233084335	WITHOUT_CLASSIFICATION	0.007673476691566547	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9991575476607778	WITHOUT_CLASSIFICATION	8.42452339222162E-4	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996254109439	WITHOUT_CLASSIFICATION	3.745890561068769E-7	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999959165917063	WITHOUT_CLASSIFICATION	4.083408293704631E-6	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999937547834892	WITHOUT_CLASSIFICATION	6.245216510849877E-6	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999965327053018	WITHOUT_CLASSIFICATION	3.467294698313693E-6	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999461996252357	WITHOUT_CLASSIFICATION	5.380037476421451E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999963890107284	WITHOUT_CLASSIFICATION	3.61098927170135E-6	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999993414920926	WITHOUT_CLASSIFICATION	6.585079074990781E-7	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.999997722344764	WITHOUT_CLASSIFICATION	2.2776552359487325E-6	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999978197041576	WITHOUT_CLASSIFICATION	2.1802958424386166E-6	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999960932035503	WITHOUT_CLASSIFICATION	3.9067964496801E-6	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999547056054109	WITHOUT_CLASSIFICATION	4.52943945891343E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999547056054109	WITHOUT_CLASSIFICATION	4.52943945891343E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999852056226649	WITHOUT_CLASSIFICATION	1.479437733507382E-5	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999922546152096	WITHOUT_CLASSIFICATION	7.745384790389675E-6	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999980155569965	WITHOUT_CLASSIFICATION	1.9844430035112414E-6	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999729725310691	WITHOUT_CLASSIFICATION	2.702746893094334E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9989957734615812	WITHOUT_CLASSIFICATION	0.0010042265384187972	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999469626193843	WITHOUT_CLASSIFICATION	5.3037380615619636E-5	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999994975380971	WITHOUT_CLASSIFICATION	5.024619029447681E-7	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.999597138015827	WITHOUT_CLASSIFICATION	4.028619841731034E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9995510325761091	WITHOUT_CLASSIFICATION	4.489674238908447E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9988700251875414	WITHOUT_CLASSIFICATION	0.0011299748124584976	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999888703416329	WITHOUT_CLASSIFICATION	1.1129658367160801E-5	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9998262178427304	WITHOUT_CLASSIFICATION	1.7378215726966082E-4	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9725076200223131	WITHOUT_CLASSIFICATION	0.027492379977686835	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999981490597035	WITHOUT_CLASSIFICATION	1.8509402964728693E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999876403124285	WITHOUT_CLASSIFICATION	1.2359687571477236E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999988745864413	WITHOUT_CLASSIFICATION	1.1254135586932536E-6	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.980508083815882	WITHOUT_CLASSIFICATION	0.019491916184117972	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.980508083815882	WITHOUT_CLASSIFICATION	0.019491916184117972	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999901270012347	WITHOUT_CLASSIFICATION	9.872998765298321E-6	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999956074900915	WITHOUT_CLASSIFICATION	4.392509908450291E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9747413614517093	WITHOUT_CLASSIFICATION	0.025258638548290746	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999984822061397	WITHOUT_CLASSIFICATION	1.51779386019028E-6	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999915094282283	WITHOUT_CLASSIFICATION	8.490571771676008E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999961757872197	WITHOUT_CLASSIFICATION	3.82421278030257E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999819564468805	WITHOUT_CLASSIFICATION	1.8043553119544483E-5	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999999079984643	WITHOUT_CLASSIFICATION	9.200153573603459E-8	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999960077612	WITHOUT_CLASSIFICATION	3.992238790018955E-9	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999901899890616	WITHOUT_CLASSIFICATION	9.810010938326683E-6	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999901899890616	WITHOUT_CLASSIFICATION	9.810010938326683E-6	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999986475283663	WITHOUT_CLASSIFICATION	1.3524716336864222E-6	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9991784806051377	WITHOUT_CLASSIFICATION	8.215193948623679E-4	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999974791295909	WITHOUT_CLASSIFICATION	2.5208704089862366E-6	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9998403591914726	WITHOUT_CLASSIFICATION	1.5964080852739628E-4	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999993557794712	WITHOUT_CLASSIFICATION	6.442205288500744E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999995304089033	WITHOUT_CLASSIFICATION	4.695910966410388E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9791150839975271	WITHOUT_CLASSIFICATION	0.02088491600247278	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999787164391061	WITHOUT_CLASSIFICATION	2.1283560893893908E-5	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999982479033623	WITHOUT_CLASSIFICATION	1.75209663766952E-6	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999853272789125	WITHOUT_CLASSIFICATION	1.4672721087501358E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.999999817862892	WITHOUT_CLASSIFICATION	1.8213710783791133E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9996809627029626	WITHOUT_CLASSIFICATION	3.1903729703734794E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.99858319433357	WITHOUT_CLASSIFICATION	0.001416805666429904	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999828838493664	WITHOUT_CLASSIFICATION	1.7116150633546523E-5	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9999989079676044	WITHOUT_CLASSIFICATION	1.0920323956148862E-6	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999985221794616	WITHOUT_CLASSIFICATION	1.4778205383517406E-6	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9999989666390348	WITHOUT_CLASSIFICATION	1.0333609652401257E-6	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999969371364278	WITHOUT_CLASSIFICATION	3.0628635721541176E-6	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999928413642	WITHOUT_CLASSIFICATION	7.158635704735456E-9	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999938595006687	WITHOUT_CLASSIFICATION	6.1404993313515205E-6	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9999467590917828	WITHOUT_CLASSIFICATION	5.324090821718121E-5	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999977666666098	WITHOUT_CLASSIFICATION	2.2333333901720007E-6	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999990432430568	WITHOUT_CLASSIFICATION	9.567569432490938E-7	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999964952954163	WITHOUT_CLASSIFICATION	3.5047045837135104E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999999631926562	WITHOUT_CLASSIFICATION	3.680734387259061E-8	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9950174957971405	WITHOUT_CLASSIFICATION	0.004982504202859523	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999222217188494	WITHOUT_CLASSIFICATION	7.77782811505932E-5	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.999474789212913	WITHOUT_CLASSIFICATION	5.252107870870865E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.8535925109818399	WITHOUT_CLASSIFICATION	0.14640748901816006	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999251662124788	WITHOUT_CLASSIFICATION	7.483378752113261E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9993236513220408	WITHOUT_CLASSIFICATION	6.763486779591344E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999965604950678	WITHOUT_CLASSIFICATION	3.439504932291162E-6	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999892402140885	WITHOUT_CLASSIFICATION	1.0759785911504674E-4	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9999824610682785	WITHOUT_CLASSIFICATION	1.753893172151192E-5	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9994147109804712	WITHOUT_CLASSIFICATION	5.85289019528772E-4	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999986819215575	WITHOUT_CLASSIFICATION	1.3180784424749804E-6	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999990070045244	WITHOUT_CLASSIFICATION	9.929954756093424E-6	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9993717930893081	WITHOUT_CLASSIFICATION	6.282069106920075E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999907226782528	WITHOUT_CLASSIFICATION	9.277321747084028E-6	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999907226782528	WITHOUT_CLASSIFICATION	9.277321747084028E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999981531935628	WITHOUT_CLASSIFICATION	1.8468064372821302E-6	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997305269737	WITHOUT_CLASSIFICATION	2.6947302632934257E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999997687230633	WITHOUT_CLASSIFICATION	2.3127693677991008E-7	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999953417276664	WITHOUT_CLASSIFICATION	4.65827233368088E-6	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999805337649624	WITHOUT_CLASSIFICATION	1.9466235037590034E-5	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999964201783944	WITHOUT_CLASSIFICATION	3.5798216055101387E-6	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999959704996433	WITHOUT_CLASSIFICATION	4.029500356781007E-6	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999994426028851	WITHOUT_CLASSIFICATION	5.573971148538309E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999981531935628	WITHOUT_CLASSIFICATION	1.8468064372821302E-6	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999997305269737	WITHOUT_CLASSIFICATION	2.6947302632934257E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999540153543434	WITHOUT_CLASSIFICATION	4.5984645656767355E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9967152367146483	WITHOUT_CLASSIFICATION	0.003284763285351729	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999676773457504	WITHOUT_CLASSIFICATION	3.232265424952779E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9973291164782679	WITHOUT_CLASSIFICATION	0.002670883521732117	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999884703051921	WITHOUT_CLASSIFICATION	1.1529694807929615E-5	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9996239777272391	WITHOUT_CLASSIFICATION	3.7602227276097705E-4	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999459897265	WITHOUT_CLASSIFICATION	5.401027345930848E-8	DESIGN
}	WITHOUT_CLASSIFICATION	0.9996475792296139	WITHOUT_CLASSIFICATION	3.524207703860919E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999722008423858	WITHOUT_CLASSIFICATION	2.779915761418809E-5	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9301142307962611	WITHOUT_CLASSIFICATION	0.06988576920373885	DESIGN
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999637074751	WITHOUT_CLASSIFICATION	3.629252477085805E-8	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9301142307962611	WITHOUT_CLASSIFICATION	0.06988576920373885	DESIGN
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999865948481	WITHOUT_CLASSIFICATION	1.3405151899312244E-8	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999726826032092	WITHOUT_CLASSIFICATION	2.7317396790794692E-5	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999998630896715	WITHOUT_CLASSIFICATION	1.3691032842170877E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999655888777019	WITHOUT_CLASSIFICATION	3.4411122298135086E-5	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9961364128186558	WITHOUT_CLASSIFICATION	0.0038635871813442195	DESIGN
}	WITHOUT_CLASSIFICATION	0.9996475792296139	WITHOUT_CLASSIFICATION	3.524207703860919E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9996475792296139	WITHOUT_CLASSIFICATION	3.524207703860919E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999742371697328	WITHOUT_CLASSIFICATION	2.5762830267156308E-5	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9998234587884646	WITHOUT_CLASSIFICATION	1.765412115355532E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999966826064182	WITHOUT_CLASSIFICATION	3.317393581864957E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999890175144844	WITHOUT_CLASSIFICATION	1.0982485515599618E-5	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999984102628522	WITHOUT_CLASSIFICATION	1.589737147824451E-6	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9999862492843203	WITHOUT_CLASSIFICATION	1.3750715679687317E-5	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9962170658220364	WITHOUT_CLASSIFICATION	0.0037829341779637396	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999999867841833	WITHOUT_CLASSIFICATION	1.3215816600219378E-8	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999968657996116	WITHOUT_CLASSIFICATION	3.1342003884441194E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991574118249746	WITHOUT_CLASSIFICATION	8.42588175025329E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9979018383516113	WITHOUT_CLASSIFICATION	0.0020981616483886673	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999999469447166	WITHOUT_CLASSIFICATION	5.3055283362827584E-8	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999375926465941	WITHOUT_CLASSIFICATION	6.240735340589073E-5	DESIGN
types	WITHOUT_CLASSIFICATION	0.999968754111099	WITHOUT_CLASSIFICATION	3.124588890098245E-5	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999954568749257	WITHOUT_CLASSIFICATION	4.543125074197172E-6	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9995128562772294	WITHOUT_CLASSIFICATION	4.871437227706311E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9995267455440658	WITHOUT_CLASSIFICATION	4.7325445593418596E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999724999625237	WITHOUT_CLASSIFICATION	2.7500037476280482E-5	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998394840579774	WITHOUT_CLASSIFICATION	1.6051594202259626E-4	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999945114600554	WITHOUT_CLASSIFICATION	5.4885399447045545E-6	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9997963919934962	WITHOUT_CLASSIFICATION	2.0360800650372787E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998241425032922	WITHOUT_CLASSIFICATION	1.7585749670768667E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999994680147219	WITHOUT_CLASSIFICATION	5.319852780915125E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9993074662495405	WITHOUT_CLASSIFICATION	6.925337504595191E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999660298378814	WITHOUT_CLASSIFICATION	3.397016211854108E-5	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999914646125593	WITHOUT_CLASSIFICATION	8.535387440729664E-6	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999884209079832	WITHOUT_CLASSIFICATION	1.1579092016803696E-5	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999947843704527	WITHOUT_CLASSIFICATION	5.215629547190218E-6	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.999968921287782	WITHOUT_CLASSIFICATION	3.107871221797614E-5	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9967778849838955	WITHOUT_CLASSIFICATION	0.0032221150161046296	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9657013626524824	WITHOUT_CLASSIFICATION	0.03429863734751754	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9328815678627325	WITHOUT_CLASSIFICATION	0.06711843213726755	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9982346521724396	WITHOUT_CLASSIFICATION	0.0017653478275604672	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999999867841833	WITHOUT_CLASSIFICATION	1.3215816600219378E-8	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999894730506682	WITHOUT_CLASSIFICATION	1.0526949331780454E-5	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9997180047964289	WITHOUT_CLASSIFICATION	2.819952035710305E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7997224954593064	WITHOUT_CLASSIFICATION	0.20027750454069365	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999999574445978	WITHOUT_CLASSIFICATION	4.255540225912902E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999988423154523	WITHOUT_CLASSIFICATION	1.1576845476740226E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999993860619906	WITHOUT_CLASSIFICATION	6.139380094882403E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999890175144844	WITHOUT_CLASSIFICATION	1.0982485515599618E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999890175144844	WITHOUT_CLASSIFICATION	1.0982485515599618E-5	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999991859306737	WITHOUT_CLASSIFICATION	8.140693263330019E-7	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999996757662456	WITHOUT_CLASSIFICATION	3.2423375436200383E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999886465042813	WITHOUT_CLASSIFICATION	1.1353495718726917E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999994268236871	WITHOUT_CLASSIFICATION	5.731763128623206E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999749666272788	WITHOUT_CLASSIFICATION	2.5033372721178823E-5	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999912344482424	WITHOUT_CLASSIFICATION	8.765551757544903E-6	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9995747204036952	WITHOUT_CLASSIFICATION	4.252795963046734E-4	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999999844527129	WITHOUT_CLASSIFICATION	1.5547287164650012E-8	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999941891304969	WITHOUT_CLASSIFICATION	5.810869503188834E-6	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9975260723589034	WITHOUT_CLASSIFICATION	0.002473927641096441	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970736628272	WITHOUT_CLASSIFICATION	2.926337172902907E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999753841686706	WITHOUT_CLASSIFICATION	2.4615831329437917E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999920231753615	WITHOUT_CLASSIFICATION	7.976824638500559E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999981531935628	WITHOUT_CLASSIFICATION	1.8468064372821302E-6	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970736628272	WITHOUT_CLASSIFICATION	2.926337172902907E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988621142315	WITHOUT_CLASSIFICATION	1.1378857684223139E-6	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9979754839608014	WITHOUT_CLASSIFICATION	0.0020245160391986726	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999998229023633	WITHOUT_CLASSIFICATION	1.770976367514765E-7	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.9273913577570188	WITHOUT_CLASSIFICATION	0.07260864224298126	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999920231753615	WITHOUT_CLASSIFICATION	7.976824638500559E-5	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996904388756687	WITHOUT_CLASSIFICATION	3.0956112433128444E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999211542161567	WITHOUT_CLASSIFICATION	7.88457838432658E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.998688036133539	WITHOUT_CLASSIFICATION	0.0013119638664610832	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999997849678248	WITHOUT_CLASSIFICATION	2.1503217507577116E-7	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9998549389980057	WITHOUT_CLASSIFICATION	1.4506100199438657E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.999995239460038	WITHOUT_CLASSIFICATION	4.7605399620385115E-6	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999996604388737	WITHOUT_CLASSIFICATION	3.395611262808679E-7	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997618351658344	WITHOUT_CLASSIFICATION	2.3816483416566595E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998445154839781	WITHOUT_CLASSIFICATION	1.554845160219269E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999838203112469	WITHOUT_CLASSIFICATION	1.6179688753215237E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9998948284241773	WITHOUT_CLASSIFICATION	1.0517157582264835E-4	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999112166758803	WITHOUT_CLASSIFICATION	8.87833241196397E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999970736628272	WITHOUT_CLASSIFICATION	2.926337172902907E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9996904388756687	WITHOUT_CLASSIFICATION	3.0956112433128444E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.998688036133539	WITHOUT_CLASSIFICATION	0.0013119638664610832	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999983528218467	WITHOUT_CLASSIFICATION	1.6471781532885343E-6	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9998578197313828	WITHOUT_CLASSIFICATION	1.4218026861729082E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999545431431539	WITHOUT_CLASSIFICATION	4.5456856846048E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.999920231753615	WITHOUT_CLASSIFICATION	7.976824638500559E-5	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999602870139555	WITHOUT_CLASSIFICATION	3.971298604461293E-5	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999922839728609	WITHOUT_CLASSIFICATION	7.716027139111605E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997774754207813	WITHOUT_CLASSIFICATION	2.225245792186045E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998621558130514	WITHOUT_CLASSIFICATION	1.3784418694867472E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997618351658344	WITHOUT_CLASSIFICATION	2.3816483416566595E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999988621142315	WITHOUT_CLASSIFICATION	1.1378857684223139E-6	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9998115619844988	WITHOUT_CLASSIFICATION	1.884380155010765E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999992524867639	WITHOUT_CLASSIFICATION	7.47513236072322E-7	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999809688306518	WITHOUT_CLASSIFICATION	1.9031169348173442E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999019027073458	WITHOUT_CLASSIFICATION	9.809729265422887E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9847475363436431	WITHOUT_CLASSIFICATION	0.01525246365635701	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.997762413884175	WITHOUT_CLASSIFICATION	0.0022375861158250195	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999957052779939	WITHOUT_CLASSIFICATION	4.2947220062059325E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999655888777019	WITHOUT_CLASSIFICATION	3.4411122298135086E-5	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996011298840101	WITHOUT_CLASSIFICATION	3.9887011598995333E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999995748381416	WITHOUT_CLASSIFICATION	4.2516185835021434E-7	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9994077954409883	WITHOUT_CLASSIFICATION	5.922045590116019E-4	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999769341031041	WITHOUT_CLASSIFICATION	2.30658968960314E-5	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9997004189844099	WITHOUT_CLASSIFICATION	2.9958101559011225E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999972262614298	WITHOUT_CLASSIFICATION	2.773738570094067E-6	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9999995973407336	WITHOUT_CLASSIFICATION	4.026592662514347E-7	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999932145699335	WITHOUT_CLASSIFICATION	6.7854300665400545E-6	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9998621558130514	WITHOUT_CLASSIFICATION	1.3784418694867472E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9997066723572031	WITHOUT_CLASSIFICATION	2.9332764279683737E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9998975812453361	WITHOUT_CLASSIFICATION	1.024187546638919E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999923007457499	WITHOUT_CLASSIFICATION	7.699254250128018E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999874281249859	WITHOUT_CLASSIFICATION	1.2571875014171243E-5	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999983665604572	WITHOUT_CLASSIFICATION	1.633439542834553E-6	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9999880720201926	WITHOUT_CLASSIFICATION	1.1927979807521074E-5	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999992953200476	WITHOUT_CLASSIFICATION	7.046799523095242E-7	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9998355948256916	WITHOUT_CLASSIFICATION	1.6440517430847036E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999986305123243	WITHOUT_CLASSIFICATION	1.3694876757296927E-6	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999102266033644	WITHOUT_CLASSIFICATION	8.977339663573552E-5	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999999787685795	WITHOUT_CLASSIFICATION	2.12314206059867E-8	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999996882891327	WITHOUT_CLASSIFICATION	3.117108672502633E-7	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9999596893424904	WITHOUT_CLASSIFICATION	4.031065750972067E-5	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999766877730482	WITHOUT_CLASSIFICATION	2.3312226951895665E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999748965505769	WITHOUT_CLASSIFICATION	2.510344942300011E-5	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999966001786084	WITHOUT_CLASSIFICATION	3.3998213916586264E-6	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9994728951621259	WITHOUT_CLASSIFICATION	5.271048378741119E-4	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999398967422961	WITHOUT_CLASSIFICATION	6.0103257703893487E-5	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999604870076508	WITHOUT_CLASSIFICATION	3.9512992349214016E-5	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999784736103275	WITHOUT_CLASSIFICATION	2.152638967254668E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9997065025794326	WITHOUT_CLASSIFICATION	2.934974205674003E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999922536878006	WITHOUT_CLASSIFICATION	7.746312199410015E-6	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999975478237831	WITHOUT_CLASSIFICATION	2.4521762169194154E-6	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999950607167784	WITHOUT_CLASSIFICATION	4.939283221759889E-6	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999986007338135	WITHOUT_CLASSIFICATION	1.3992661865246093E-6	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.837978831055	WITHOUT_CLASSIFICATION	0.16202116894500002	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999944506816599	WITHOUT_CLASSIFICATION	5.549318340035591E-6	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999924584581668	WITHOUT_CLASSIFICATION	7.541541833293012E-6	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999993934388928	WITHOUT_CLASSIFICATION	6.06561107202175E-6	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5694550462884841	WITHOUT_CLASSIFICATION	0.43054495371151574	DESIGN
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999999361741835	WITHOUT_CLASSIFICATION	6.382581646550267E-8	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9991880746497701	WITHOUT_CLASSIFICATION	8.119253502299623E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999942159011925	WITHOUT_CLASSIFICATION	5.784098807449725E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9999652216941631	WITHOUT_CLASSIFICATION	3.4778305836847877E-5	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999971172730423	WITHOUT_CLASSIFICATION	2.882726957787366E-6	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999996516287332	WITHOUT_CLASSIFICATION	3.483712668659248E-7	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999995611818631	WITHOUT_CLASSIFICATION	4.388181369726543E-7	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9454907566732286	WITHOUT_CLASSIFICATION	0.054509243326771394	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999996516287332	WITHOUT_CLASSIFICATION	3.483712668659248E-7	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999971172730423	WITHOUT_CLASSIFICATION	2.882726957787366E-6	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999995611818631	WITHOUT_CLASSIFICATION	4.388181369726543E-7	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999999061980039	WITHOUT_CLASSIFICATION	9.380199609270488E-8	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9988402576012753	WITHOUT_CLASSIFICATION	0.0011597423987247518	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999998561391561	WITHOUT_CLASSIFICATION	1.4386084391223553E-6	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999905770434104	WITHOUT_CLASSIFICATION	9.422956589652022E-6	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999997456379845	WITHOUT_CLASSIFICATION	2.5436201544114425E-7	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6511789045272098	WITHOUT_CLASSIFICATION	0.3488210954727902	DESIGN
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9998303753124574	WITHOUT_CLASSIFICATION	1.696246875425934E-4	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9574482163480316	WITHOUT_CLASSIFICATION	0.04255178365196842	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999928682167207	WITHOUT_CLASSIFICATION	7.131783279253019E-6	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999976965108971	WITHOUT_CLASSIFICATION	2.303489102897923E-5	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999996596488003	WITHOUT_CLASSIFICATION	3.4035119960609083E-7	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999996325009766	WITHOUT_CLASSIFICATION	3.6749902335193994E-7	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9960334702535246	WITHOUT_CLASSIFICATION	0.003966529746475362	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999905770434104	WITHOUT_CLASSIFICATION	9.422956589652022E-6	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999804324674872	WITHOUT_CLASSIFICATION	1.9567532512762917E-5	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999631868759	WITHOUT_CLASSIFICATION	3.681312407104057E-8	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999249811719204	WITHOUT_CLASSIFICATION	7.501882807963274E-5	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999988984580473	WITHOUT_CLASSIFICATION	1.101541952657287E-6	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9994678001535791	WITHOUT_CLASSIFICATION	5.321998464208329E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999973739193948	WITHOUT_CLASSIFICATION	2.6260806051438914E-6	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9987420335040028	WITHOUT_CLASSIFICATION	0.0012579664959972072	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999790973102	WITHOUT_CLASSIFICATION	2.090268978699605E-8	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999990286835959	WITHOUT_CLASSIFICATION	9.713164041286829E-7	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999999015097973	WITHOUT_CLASSIFICATION	9.849020263474957E-8	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999570964898382	WITHOUT_CLASSIFICATION	4.290351016186058E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999570964898382	WITHOUT_CLASSIFICATION	4.290351016186058E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999952401091	WITHOUT_CLASSIFICATION	4.759890896986102E-8	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999999952401091	WITHOUT_CLASSIFICATION	4.759890896986102E-8	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9999549815667264	WITHOUT_CLASSIFICATION	4.501843327355628E-5	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999249811719204	WITHOUT_CLASSIFICATION	7.501882807963274E-5	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999819658676352	WITHOUT_CLASSIFICATION	1.803413236483547E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999999652635206	WITHOUT_CLASSIFICATION	3.4736479393397906E-8	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999166313654853	WITHOUT_CLASSIFICATION	8.336863451467137E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999166313654853	WITHOUT_CLASSIFICATION	8.336863451467137E-5	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998902960402	WITHOUT_CLASSIFICATION	1.0970395983210297E-7	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999997527532772	WITHOUT_CLASSIFICATION	2.472467227346333E-7	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999939895993745	WITHOUT_CLASSIFICATION	6.0104006255028506E-6	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999999729849155	WITHOUT_CLASSIFICATION	2.7015084584617076E-8	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9970556009592234	WITHOUT_CLASSIFICATION	0.002944399040776476	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999985371894307	WITHOUT_CLASSIFICATION	1.4628105693619066E-6	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999292807427763	WITHOUT_CLASSIFICATION	7.071925722368629E-5	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9851384221199464	WITHOUT_CLASSIFICATION	0.014861577880053602	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999985768227538	WITHOUT_CLASSIFICATION	1.423177246111853E-6	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999959511698397	WITHOUT_CLASSIFICATION	4.048830160278871E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999981643771821	WITHOUT_CLASSIFICATION	1.835622817855236E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999988278045612	WITHOUT_CLASSIFICATION	1.1721954388373977E-6	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999997959797259	WITHOUT_CLASSIFICATION	2.0402027404675962E-7	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999994555164123	WITHOUT_CLASSIFICATION	5.444835877046191E-7	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999988477213787	WITHOUT_CLASSIFICATION	1.1522786212870728E-6	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9999986842981555	WITHOUT_CLASSIFICATION	1.3157018445042792E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99329725036385	WITHOUT_CLASSIFICATION	0.006702749636150027	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999978205610772	WITHOUT_CLASSIFICATION	2.179438922705912E-6	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999533456121695	WITHOUT_CLASSIFICATION	4.6654387830345005E-5	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9998343890397048	WITHOUT_CLASSIFICATION	1.6561096029526522E-4	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999965065567976	WITHOUT_CLASSIFICATION	3.4934432024468193E-6	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9998990689376073	WITHOUT_CLASSIFICATION	1.0093106239272087E-4	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.999999777111404	WITHOUT_CLASSIFICATION	2.2288859605070606E-7	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999166361039249	WITHOUT_CLASSIFICATION	8.336389607503325E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9996202282599117	WITHOUT_CLASSIFICATION	3.797717400882549E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.999968942331697	WITHOUT_CLASSIFICATION	3.105766830294832E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999996882891327	WITHOUT_CLASSIFICATION	3.117108672502633E-7	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999968538479707	WITHOUT_CLASSIFICATION	3.146152029316978E-6	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9998754472564669	WITHOUT_CLASSIFICATION	1.245527435331118E-4	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999591950584271	WITHOUT_CLASSIFICATION	4.080494157289373E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999987812466468	WITHOUT_CLASSIFICATION	1.21875335321217E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999973326268613	WITHOUT_CLASSIFICATION	2.667373138690989E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999973326268613	WITHOUT_CLASSIFICATION	2.667373138690989E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9957610087070328	WITHOUT_CLASSIFICATION	0.004238991292967283	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999954626052129	WITHOUT_CLASSIFICATION	4.537394787078259E-6	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999938609154195	WITHOUT_CLASSIFICATION	6.139084580435683E-6	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999938609154195	WITHOUT_CLASSIFICATION	6.139084580435683E-6	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9986341176821334	WITHOUT_CLASSIFICATION	0.0013658823178666203	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996267113514724	WITHOUT_CLASSIFICATION	3.732886485276363E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999954700528981	WITHOUT_CLASSIFICATION	4.529947101848762E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999763574114593	WITHOUT_CLASSIFICATION	2.364258854070646E-5	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9999779161220121	WITHOUT_CLASSIFICATION	2.2083877987847917E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.999998928858635	WITHOUT_CLASSIFICATION	1.0711413649574294E-6	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9999731257491216	WITHOUT_CLASSIFICATION	2.6874250878493903E-5	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.999996249881279	WITHOUT_CLASSIFICATION	3.7501187210599063E-6	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999359740980348	WITHOUT_CLASSIFICATION	6.402590196520397E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999359740980348	WITHOUT_CLASSIFICATION	6.402590196520397E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9999742472662458	WITHOUT_CLASSIFICATION	2.575273375410924E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999999538400942	WITHOUT_CLASSIFICATION	4.6159905754050955E-8	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999999538400942	WITHOUT_CLASSIFICATION	4.6159905754050955E-8	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993381878447656	WITHOUT_CLASSIFICATION	6.61812155234408E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999985075018545	WITHOUT_CLASSIFICATION	1.4924981455714229E-6	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9693950056594736	WITHOUT_CLASSIFICATION	0.030604994340526468	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999997743015969	WITHOUT_CLASSIFICATION	2.2569840303856419E-7	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.999999842830468	WITHOUT_CLASSIFICATION	1.571695319613659E-7	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999792026637	WITHOUT_CLASSIFICATION	2.0797336278815975E-8	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999923688265913	WITHOUT_CLASSIFICATION	7.631173408675765E-6	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9994833179258027	WITHOUT_CLASSIFICATION	5.166820741973493E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999687351994981	WITHOUT_CLASSIFICATION	3.1264800501759956E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9985435172308276	WITHOUT_CLASSIFICATION	0.00145648276917243	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999981535282351	WITHOUT_CLASSIFICATION	1.8464717648804654E-6	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9996752042678961	WITHOUT_CLASSIFICATION	3.2479573210392865E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999320969041047	WITHOUT_CLASSIFICATION	6.790309589532884E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999320969041047	WITHOUT_CLASSIFICATION	6.790309589532884E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999320969041047	WITHOUT_CLASSIFICATION	6.790309589532884E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999320969041047	WITHOUT_CLASSIFICATION	6.790309589532884E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999999675397764	WITHOUT_CLASSIFICATION	3.246022367965201E-8	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999823115625746	WITHOUT_CLASSIFICATION	1.768843742543765E-5	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999958408579638	WITHOUT_CLASSIFICATION	4.159142036138634E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.999921512207021	WITHOUT_CLASSIFICATION	7.848779297902822E-5	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999579996754717	WITHOUT_CLASSIFICATION	4.200032452819863E-5	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9999625394246708	WITHOUT_CLASSIFICATION	3.74605753292541E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9995978998837831	WITHOUT_CLASSIFICATION	4.0210011621682573E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999910400927392	WITHOUT_CLASSIFICATION	8.95990726079544E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999999149614055	WITHOUT_CLASSIFICATION	8.503859455475848E-8	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999996087550693	WITHOUT_CLASSIFICATION	3.9124493060323753E-7	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9999727431401082	WITHOUT_CLASSIFICATION	2.7256859891815245E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999858651743317	WITHOUT_CLASSIFICATION	1.4134825668156786E-5	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9919538255456566	WITHOUT_CLASSIFICATION	0.008046174454343451	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999794908001703	WITHOUT_CLASSIFICATION	2.0509199829577784E-5	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999900495918708	WITHOUT_CLASSIFICATION	9.950408129320724E-6	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999858651743317	WITHOUT_CLASSIFICATION	1.4134825668156786E-5	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.992257020892737	WITHOUT_CLASSIFICATION	0.0077429791072629725	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9997772495934276	WITHOUT_CLASSIFICATION	2.227504065723814E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999998519352654	WITHOUT_CLASSIFICATION	1.4806473459297342E-6	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999818489700109	WITHOUT_CLASSIFICATION	1.815102998912257E-5	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999121004054554	WITHOUT_CLASSIFICATION	8.789959454459615E-5	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.999997796573315	WITHOUT_CLASSIFICATION	2.203426685062853E-6	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999995563380487	WITHOUT_CLASSIFICATION	4.436619512249198E-7	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999974266237094	WITHOUT_CLASSIFICATION	2.5733762905884626E-6	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787476454095	WITHOUT_CLASSIFICATION	2.1252354590553974E-5	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999954796316284	WITHOUT_CLASSIFICATION	4.520368371595588E-6	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951599619038	WITHOUT_CLASSIFICATION	4.840038096206664E-6	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.999987701135152	WITHOUT_CLASSIFICATION	1.2298864848080303E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9998478779121772	WITHOUT_CLASSIFICATION	1.521220878227495E-4	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9976166854487158	WITHOUT_CLASSIFICATION	0.002383314551284092	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999986761266839	WITHOUT_CLASSIFICATION	1.3238733160491583E-6	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.6200977784599147	WITHOUT_CLASSIFICATION	0.37990222154008535	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999920513191837	WITHOUT_CLASSIFICATION	7.948680816233361E-6	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999884151819979	WITHOUT_CLASSIFICATION	1.158481800207641E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999092974800036	WITHOUT_CLASSIFICATION	9.070251999642417E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999884151819979	WITHOUT_CLASSIFICATION	1.158481800207641E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999813536668207	WITHOUT_CLASSIFICATION	1.8646333179298672E-5	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998893823325894	WITHOUT_CLASSIFICATION	1.1061766741057837E-4	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9984403710612012	WITHOUT_CLASSIFICATION	0.0015596289387988457	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9624452495071727	WITHOUT_CLASSIFICATION	0.03755475049282727	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9722018094956684	WITHOUT_CLASSIFICATION	0.027798190504331716	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999858022666926	WITHOUT_CLASSIFICATION	1.4197733307248452E-5	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999996207807283	WITHOUT_CLASSIFICATION	3.7921927166703673E-7	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999920513191837	WITHOUT_CLASSIFICATION	7.948680816233361E-6	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999092974800036	WITHOUT_CLASSIFICATION	9.070251999642417E-5	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999813536668207	WITHOUT_CLASSIFICATION	1.8646333179298672E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999685290697912	WITHOUT_CLASSIFICATION	3.147093020876127E-5	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9999799480450409	WITHOUT_CLASSIFICATION	2.0051954959133968E-5	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.999999435765428	WITHOUT_CLASSIFICATION	5.642345720014404E-7	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999990089463427	WITHOUT_CLASSIFICATION	9.910536572353407E-7	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.999999446794967	WITHOUT_CLASSIFICATION	5.532050330639031E-7	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9999120843705896	WITHOUT_CLASSIFICATION	8.791562941035095E-5	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999962177224	WITHOUT_CLASSIFICATION	3.782277546084988E-9	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99329725036385	WITHOUT_CLASSIFICATION	0.006702749636150027	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998893823325894	WITHOUT_CLASSIFICATION	1.1061766741057837E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999166991133016	WITHOUT_CLASSIFICATION	8.330088669836746E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999694162413894	WITHOUT_CLASSIFICATION	3.058375861075474E-5	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999406563545421	WITHOUT_CLASSIFICATION	5.934364545781132E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.99998945121419	WITHOUT_CLASSIFICATION	1.0548785809993659E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99329725036385	WITHOUT_CLASSIFICATION	0.006702749636150027	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999993001928552	WITHOUT_CLASSIFICATION	6.998071448379117E-7	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99329725036385	WITHOUT_CLASSIFICATION	0.006702749636150027	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999659045377091	WITHOUT_CLASSIFICATION	3.409546229096881E-5	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999995324908982	WITHOUT_CLASSIFICATION	4.675091018108441E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999827867682564	WITHOUT_CLASSIFICATION	1.7213231743595162E-5	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999896414400425	WITHOUT_CLASSIFICATION	1.035855995746949E-5	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999997834256894	WITHOUT_CLASSIFICATION	2.1657431069956523E-7	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999995837025426	WITHOUT_CLASSIFICATION	4.1629745739304783E-7	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9996999795500359	WITHOUT_CLASSIFICATION	3.000204499641446E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999235204367448	WITHOUT_CLASSIFICATION	7.647956325520787E-5	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999997364849226	WITHOUT_CLASSIFICATION	2.635150774505108E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.99999806648874	WITHOUT_CLASSIFICATION	1.9335112600714277E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999858374535692	WITHOUT_CLASSIFICATION	1.4162546430760243E-5	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999794820107624	WITHOUT_CLASSIFICATION	2.0517989237626754E-5	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9693950056594736	WITHOUT_CLASSIFICATION	0.030604994340526468	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999973410274454	WITHOUT_CLASSIFICATION	2.658972554657372E-6	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9999882665309703	WITHOUT_CLASSIFICATION	1.1733469029645002E-5	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999998912690556	WITHOUT_CLASSIFICATION	1.087309443125474E-7	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999997365248567	WITHOUT_CLASSIFICATION	2.634751432029809E-7	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999659525398669	WITHOUT_CLASSIFICATION	3.404746013308227E-5	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998164825804131	WITHOUT_CLASSIFICATION	1.8351741958691853E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999903049660984	WITHOUT_CLASSIFICATION	9.695033901564767E-6	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9794693840057306	WITHOUT_CLASSIFICATION	0.020530615994269433	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999650257755	WITHOUT_CLASSIFICATION	3.4974224553441995E-8	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999300736696967	WITHOUT_CLASSIFICATION	6.992633030328888E-5	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9674186183108556	WITHOUT_CLASSIFICATION	0.0325813816891444	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999966451595587	WITHOUT_CLASSIFICATION	3.3548404413660738E-6	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999995221706516	WITHOUT_CLASSIFICATION	4.778293483976732E-6	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999976146612356	WITHOUT_CLASSIFICATION	2.385338764394662E-6	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999917398057684	WITHOUT_CLASSIFICATION	8.260194231638682E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9998014959099477	WITHOUT_CLASSIFICATION	1.985040900523598E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999998472341435	WITHOUT_CLASSIFICATION	1.5276585645144134E-7	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997905823814358	WITHOUT_CLASSIFICATION	2.0941761856419318E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.999997728370823	WITHOUT_CLASSIFICATION	2.271629176879125E-6	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9999943578319722	WITHOUT_CLASSIFICATION	5.642168027733956E-6	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999987743990916	WITHOUT_CLASSIFICATION	1.2256009083615474E-6	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9151297522797435	WITHOUT_CLASSIFICATION	0.08487024772025652	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999563647273	WITHOUT_CLASSIFICATION	4.3635272768271894E-8	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999796731577041	WITHOUT_CLASSIFICATION	2.032684229592164E-5	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.999987332789908	WITHOUT_CLASSIFICATION	1.2667210092041257E-5	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9993727937587572	WITHOUT_CLASSIFICATION	6.272062412427166E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999937935760618	WITHOUT_CLASSIFICATION	6.206423938202898E-5	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9766485290210837	WITHOUT_CLASSIFICATION	0.0233514709789163	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999995421572818	WITHOUT_CLASSIFICATION	4.5784271819481127E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9939996414806835	WITHOUT_CLASSIFICATION	0.006000358519316418	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999838960339108	WITHOUT_CLASSIFICATION	1.6103966089203293E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999838960339108	WITHOUT_CLASSIFICATION	1.6103966089203293E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9998959027563912	WITHOUT_CLASSIFICATION	1.0409724360887234E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999235204367448	WITHOUT_CLASSIFICATION	7.647956325520787E-5	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9994909818075385	WITHOUT_CLASSIFICATION	5.090181924615063E-4	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999999989714243	WITHOUT_CLASSIFICATION	1.0285757110906615E-8	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999462014979689	WITHOUT_CLASSIFICATION	5.379850203111096E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999682401427036	WITHOUT_CLASSIFICATION	3.1759857296532584E-5	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999986125253568	WITHOUT_CLASSIFICATION	1.3874746432402182E-6	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.999826662613429	WITHOUT_CLASSIFICATION	1.7333738657102793E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999998310400116	WITHOUT_CLASSIFICATION	1.6895998843039847E-7	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.999982711341217	WITHOUT_CLASSIFICATION	1.728865878300025E-5	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999907363373104	WITHOUT_CLASSIFICATION	9.263662689639147E-6	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999972206954517	WITHOUT_CLASSIFICATION	2.7793045482517676E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9411076370887766	WITHOUT_CLASSIFICATION	0.058892362911223316	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999119489581	WITHOUT_CLASSIFICATION	8.805104187186166E-8	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999961002110779	WITHOUT_CLASSIFICATION	3.899788922128013E-6	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999990564433525	WITHOUT_CLASSIFICATION	9.435566476189346E-7	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.999999902480092	WITHOUT_CLASSIFICATION	9.751990802437079E-8	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999977567177926	WITHOUT_CLASSIFICATION	2.2432822074762232E-6	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999957605306583	WITHOUT_CLASSIFICATION	4.2394693417269934E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9949901949406964	WITHOUT_CLASSIFICATION	0.005009805059303565	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999925958075571	WITHOUT_CLASSIFICATION	7.404192443015354E-6	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9997463423435015	WITHOUT_CLASSIFICATION	2.536576564985265E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998756358370413	WITHOUT_CLASSIFICATION	1.2436416295870598E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999896598034781	WITHOUT_CLASSIFICATION	1.0340196521971191E-5	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9766485290210837	WITHOUT_CLASSIFICATION	0.0233514709789163	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999968630702957	WITHOUT_CLASSIFICATION	3.1369297042913316E-6	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9997886262506136	WITHOUT_CLASSIFICATION	2.113737493864228E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999992799047914	WITHOUT_CLASSIFICATION	7.200952085626848E-7	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999933367747253	WITHOUT_CLASSIFICATION	6.663225274642341E-6	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999706932446875	WITHOUT_CLASSIFICATION	2.9306755312514207E-5	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.999999804663052	WITHOUT_CLASSIFICATION	1.9533694797064856E-7	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999988079463027	WITHOUT_CLASSIFICATION	1.1920536973567771E-6	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999736287407055	WITHOUT_CLASSIFICATION	2.6371259294503145E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999651934060124	WITHOUT_CLASSIFICATION	3.480659398768384E-5	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999989691517	WITHOUT_CLASSIFICATION	1.0308483424405727E-9	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999575057053892	WITHOUT_CLASSIFICATION	4.249429461090015E-5	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999730768021623	WITHOUT_CLASSIFICATION	2.692319783769526E-5	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999974002427064	WITHOUT_CLASSIFICATION	2.599757293506218E-6	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997867591322184	WITHOUT_CLASSIFICATION	2.132408677816266E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.999984677013033	WITHOUT_CLASSIFICATION	1.532298696706693E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997509338376473	WITHOUT_CLASSIFICATION	2.4906616235262016E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9997509338376473	WITHOUT_CLASSIFICATION	2.4906616235262016E-4	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.999990353078721	WITHOUT_CLASSIFICATION	9.646921278947311E-6	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9999990625020272	WITHOUT_CLASSIFICATION	9.37497972774972E-7	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999698529412167	WITHOUT_CLASSIFICATION	3.0147058783286965E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999698529412167	WITHOUT_CLASSIFICATION	3.0147058783286965E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999956746958675	WITHOUT_CLASSIFICATION	4.32530413254611E-6	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999912574031444	WITHOUT_CLASSIFICATION	8.742596855592953E-6	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.7853454086731138	WITHOUT_CLASSIFICATION	0.21465459132688625	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9997020294249918	WITHOUT_CLASSIFICATION	2.979705750082342E-4	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999950029463669	WITHOUT_CLASSIFICATION	4.997053633111472E-5	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999926437389467	WITHOUT_CLASSIFICATION	7.356261053309553E-6	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999032615423	WITHOUT_CLASSIFICATION	9.673845771095812E-8	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999999032615423	WITHOUT_CLASSIFICATION	9.673845771095812E-8	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999975079370428	WITHOUT_CLASSIFICATION	2.4920629572468496E-6	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9999789075850029	WITHOUT_CLASSIFICATION	2.1092414997187843E-5	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999996559762896	WITHOUT_CLASSIFICATION	3.440237104447845E-7	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999994545856223	WITHOUT_CLASSIFICATION	5.454143777722338E-7	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999994545856223	WITHOUT_CLASSIFICATION	5.454143777722338E-7	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999997760988794	WITHOUT_CLASSIFICATION	2.2390112052376288E-7	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999992270680785	WITHOUT_CLASSIFICATION	7.729319214973064E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998962943042243	WITHOUT_CLASSIFICATION	0.0010370569577570431	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999932945995414	WITHOUT_CLASSIFICATION	6.705400458616988E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9999178814360598	WITHOUT_CLASSIFICATION	8.211856394033745E-5	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999999073136344	WITHOUT_CLASSIFICATION	9.268636550626308E-8	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999897518177984	WITHOUT_CLASSIFICATION	1.024818220167014E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999965871625304	WITHOUT_CLASSIFICATION	3.412837469691629E-6	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9999995927634465	WITHOUT_CLASSIFICATION	4.072365534955192E-7	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999981940597136	WITHOUT_CLASSIFICATION	1.8059402863280476E-6	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999996264475847	WITHOUT_CLASSIFICATION	3.735524153775222E-7	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9644790255102693	WITHOUT_CLASSIFICATION	0.03552097448973069	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999231697488137	WITHOUT_CLASSIFICATION	7.683025118629643E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999815343562856	WITHOUT_CLASSIFICATION	1.8465643714504213E-5	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9999912232824443	WITHOUT_CLASSIFICATION	8.776717555656161E-6	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999978399400116	WITHOUT_CLASSIFICATION	2.1600599884734105E-6	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998850891010823	WITHOUT_CLASSIFICATION	1.1491089891761279E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999803720370846	WITHOUT_CLASSIFICATION	1.9627962915427167E-5	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999924205217915	WITHOUT_CLASSIFICATION	7.579478208508809E-6	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999740547592149	WITHOUT_CLASSIFICATION	2.594524078503865E-5	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999981045325633	WITHOUT_CLASSIFICATION	1.8954674366547373E-6	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9882199201658339	WITHOUT_CLASSIFICATION	0.011780079834165996	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.978155555600388	WITHOUT_CLASSIFICATION	0.021844444399612035	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999992784346002	WITHOUT_CLASSIFICATION	7.215653998670016E-7	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9999099141545897	WITHOUT_CLASSIFICATION	9.008584541030887E-5	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.999998911243511	WITHOUT_CLASSIFICATION	1.0887564888945663E-6	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999996509743284	WITHOUT_CLASSIFICATION	3.490256716019124E-7	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999825082548317	WITHOUT_CLASSIFICATION	1.7491745168331454E-5	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999984241899436	WITHOUT_CLASSIFICATION	1.5758100563695008E-6	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9999934686918873	WITHOUT_CLASSIFICATION	6.53130811262912E-6	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9999949333069762	WITHOUT_CLASSIFICATION	5.066693023778032E-6	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9969276447066253	WITHOUT_CLASSIFICATION	0.003072355293374575	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999979038519476	WITHOUT_CLASSIFICATION	2.0961480524863557E-6	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999975226707492	WITHOUT_CLASSIFICATION	2.4773292508143375E-6	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999621485820075	WITHOUT_CLASSIFICATION	3.785141799248001E-5	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9994689123472908	WITHOUT_CLASSIFICATION	5.310876527090759E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9999865557305813	WITHOUT_CLASSIFICATION	1.344426941869711E-5	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999369037859	WITHOUT_CLASSIFICATION	6.309621409991237E-8	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999882232101506	WITHOUT_CLASSIFICATION	1.1776789849440783E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999878570459593	WITHOUT_CLASSIFICATION	1.2142954040764985E-5	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.999993998459846	WITHOUT_CLASSIFICATION	6.001540153971726E-6	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999784087666054	WITHOUT_CLASSIFICATION	2.1591233394578024E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999993981069943	WITHOUT_CLASSIFICATION	6.018930056573062E-7	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999944451105618	WITHOUT_CLASSIFICATION	5.554889438241153E-6	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999982562463755	WITHOUT_CLASSIFICATION	1.7437536245588186E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999997869359087	WITHOUT_CLASSIFICATION	2.1306409127846872E-7	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999656852286595	WITHOUT_CLASSIFICATION	3.431477134050193E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9996990805882128	WITHOUT_CLASSIFICATION	3.0091941178731564E-4	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9995864574964527	WITHOUT_CLASSIFICATION	4.1354250354734106E-4	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999994693138143	WITHOUT_CLASSIFICATION	5.306861856925979E-7	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9927141155907322	WITHOUT_CLASSIFICATION	0.007285884409267809	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999774197888786	WITHOUT_CLASSIFICATION	2.2580211121508822E-5	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9932244595095869	WITHOUT_CLASSIFICATION	0.006775540490412954	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999975573646	WITHOUT_CLASSIFICATION	2.4426354207207345E-9	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999676003581386	WITHOUT_CLASSIFICATION	3.239964186139123E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9975628359031153	WITHOUT_CLASSIFICATION	0.002437164096884573	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998085685812865	WITHOUT_CLASSIFICATION	1.914314187134224E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999986271349289	WITHOUT_CLASSIFICATION	1.3728650711270865E-6	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999842322481554	WITHOUT_CLASSIFICATION	1.5767751844655866E-5	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999995165852846	WITHOUT_CLASSIFICATION	4.834147154095235E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996314409466	WITHOUT_CLASSIFICATION	3.685590534056481E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999996314409466	WITHOUT_CLASSIFICATION	3.685590534056481E-6	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999394856041	WITHOUT_CLASSIFICATION	6.051439584240654E-8	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.8881083628334125	WITHOUT_CLASSIFICATION	0.11189163716658737	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999998569645662	WITHOUT_CLASSIFICATION	1.4303543381470124E-7	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9975750860123238	WITHOUT_CLASSIFICATION	0.0024249139876762566	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999683254485	WITHOUT_CLASSIFICATION	3.1674551583679634E-8	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.999998735253549	WITHOUT_CLASSIFICATION	1.264746450988323E-6	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999001430580504	WITHOUT_CLASSIFICATION	9.98569419495257E-5	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999993130485199	WITHOUT_CLASSIFICATION	6.869514801071506E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999991348745485	WITHOUT_CLASSIFICATION	8.651254515056723E-7	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999907920860878	WITHOUT_CLASSIFICATION	9.20791391229948E-6	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999995840376751	WITHOUT_CLASSIFICATION	4.159623248859421E-7	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999652868683073	WITHOUT_CLASSIFICATION	3.471313169270669E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999863294434	WITHOUT_CLASSIFICATION	1.367055658720326E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999665878399007	WITHOUT_CLASSIFICATION	3.3412160099403344E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999795165159355	WITHOUT_CLASSIFICATION	2.0483484064435356E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999795165159355	WITHOUT_CLASSIFICATION	2.0483484064435356E-5	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999851679983854	WITHOUT_CLASSIFICATION	1.4832001614630872E-5	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9998095046798923	WITHOUT_CLASSIFICATION	1.904953201076178E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999983528165838	WITHOUT_CLASSIFICATION	1.6471834162867292E-6	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.99999064401204	WITHOUT_CLASSIFICATION	9.355987960009281E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999988986732717	WITHOUT_CLASSIFICATION	1.1013267282558992E-6	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999913065231115	WITHOUT_CLASSIFICATION	8.693476888544346E-6	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999921270011473	WITHOUT_CLASSIFICATION	7.872998852794635E-6	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999991389691545	WITHOUT_CLASSIFICATION	8.610308455053436E-7	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9881896226243596	WITHOUT_CLASSIFICATION	0.011810377375640387	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.999936389229045	WITHOUT_CLASSIFICATION	6.361077095493769E-5	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9930583596747166	WITHOUT_CLASSIFICATION	0.00694164032528339	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999712727006164	WITHOUT_CLASSIFICATION	2.872729938361533E-5	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999995736331763	WITHOUT_CLASSIFICATION	4.263668236726007E-7	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999910947911539	WITHOUT_CLASSIFICATION	8.905208846129674E-6	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999541591879226	WITHOUT_CLASSIFICATION	4.584081207736256E-5	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9997887234417584	WITHOUT_CLASSIFICATION	2.1127655824159847E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9906446446121627	WITHOUT_CLASSIFICATION	0.009355355387837256	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.6018086861316029	DESIGN	0.398191313868397	WITHOUT_CLASSIFICATION
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999988078535519	WITHOUT_CLASSIFICATION	1.1921464481189024E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999940064522725	WITHOUT_CLASSIFICATION	5.993547727470788E-6	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998400893854389	WITHOUT_CLASSIFICATION	1.5991061456111598E-4	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999997564464341	WITHOUT_CLASSIFICATION	2.435535658421433E-7	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9979336014802193	WITHOUT_CLASSIFICATION	0.0020663985197808257	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999937360135769	WITHOUT_CLASSIFICATION	6.263986423141816E-6	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9999528951969753	WITHOUT_CLASSIFICATION	4.710480302475435E-5	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999913074512405	WITHOUT_CLASSIFICATION	8.69254875952286E-6	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9938504182968614	WITHOUT_CLASSIFICATION	0.006149581703138667	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9998309618726421	WITHOUT_CLASSIFICATION	1.6903812735780363E-4	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999988316942	WITHOUT_CLASSIFICATION	1.1683057048214411E-9	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9951346172783888	WITHOUT_CLASSIFICATION	0.00486538272161114	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999999091953303	WITHOUT_CLASSIFICATION	9.080466969566321E-8	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.999844084114624	WITHOUT_CLASSIFICATION	1.5591588537604685E-4	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9577984099465302	WITHOUT_CLASSIFICATION	0.042201590053469726	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999998242497797	WITHOUT_CLASSIFICATION	1.7575022034849506E-7	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999989349279368	WITHOUT_CLASSIFICATION	1.0650720632062565E-6	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999963013335254	WITHOUT_CLASSIFICATION	3.6986664746421314E-6	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9601227085968798	WITHOUT_CLASSIFICATION	0.03987729140312019	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999977807009975	WITHOUT_CLASSIFICATION	2.2192990025059184E-5	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999984729278484	WITHOUT_CLASSIFICATION	1.5270721516307349E-6	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999965827624232	WITHOUT_CLASSIFICATION	3.417237576744922E-6	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9999343425939695	WITHOUT_CLASSIFICATION	6.565740603046981E-5	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.6307592592707667	DESIGN	0.36924074072923335	WITHOUT_CLASSIFICATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9818144357454427	WITHOUT_CLASSIFICATION	0.018185564254557304	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9818144357454427	WITHOUT_CLASSIFICATION	0.018185564254557304	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999994581608781	WITHOUT_CLASSIFICATION	5.418391219795907E-7	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9934165007347378	WITHOUT_CLASSIFICATION	0.006583499265262309	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9999399834955568	WITHOUT_CLASSIFICATION	6.0016504443139437E-5	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9992124489400425	WITHOUT_CLASSIFICATION	7.875510599575183E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999894250231693	WITHOUT_CLASSIFICATION	1.0574976830648036E-5	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9998943331901908	WITHOUT_CLASSIFICATION	1.0566680980919987E-4	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.998793375890619	WITHOUT_CLASSIFICATION	0.0012066241093809647	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999999377297251	WITHOUT_CLASSIFICATION	6.227027494775026E-8	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.795343693289356	WITHOUT_CLASSIFICATION	0.20465630671064405	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99999996271644	WITHOUT_CLASSIFICATION	3.728355999727177E-8	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999579412999	WITHOUT_CLASSIFICATION	4.2058700051817436E-8	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936032437897646	WITHOUT_CLASSIFICATION	0.00639675621023534	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999925028056994	WITHOUT_CLASSIFICATION	7.4971943006673485E-6	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999966865226452	WITHOUT_CLASSIFICATION	3.3134773548801887E-6	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9936784243461061	WITHOUT_CLASSIFICATION	0.0063215756538939905	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9992548895653894	WITHOUT_CLASSIFICATION	7.451104346104805E-4	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9999985547302642	WITHOUT_CLASSIFICATION	1.4452697358423823E-6	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999152931531183	WITHOUT_CLASSIFICATION	8.470684688163386E-5	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999998640000631	WITHOUT_CLASSIFICATION	1.3599993685435092E-7	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9873274016122339	WITHOUT_CLASSIFICATION	0.012672598387766267	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999996064969405	WITHOUT_CLASSIFICATION	3.9350305947917967E-7	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999963062487207	WITHOUT_CLASSIFICATION	3.6937512791954428E-6	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999986449926858	WITHOUT_CLASSIFICATION	1.355007314246099E-6	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999883885257708	WITHOUT_CLASSIFICATION	1.1611474229142717E-5	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9995601061210514	WITHOUT_CLASSIFICATION	4.3989387894860326E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999998256453149	WITHOUT_CLASSIFICATION	1.7435468505375565E-7	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999673071775117	WITHOUT_CLASSIFICATION	3.2692822488236784E-5	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9995310668557637	WITHOUT_CLASSIFICATION	4.689331442364164E-4	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999997252017168	WITHOUT_CLASSIFICATION	2.747982833143286E-7	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9997440073764118	WITHOUT_CLASSIFICATION	2.559926235882857E-4	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9999691750604986	WITHOUT_CLASSIFICATION	3.082493950127281E-5	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9996185982800806	WITHOUT_CLASSIFICATION	3.814017199194446E-4	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999993754446304	WITHOUT_CLASSIFICATION	6.245553695357274E-7	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999995149002601	WITHOUT_CLASSIFICATION	4.850997399906022E-7	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999904354746156	WITHOUT_CLASSIFICATION	9.564525384333754E-6	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999975262290168	WITHOUT_CLASSIFICATION	2.4737709831642022E-6	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9911849173447922	WITHOUT_CLASSIFICATION	0.008815082655207761	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999971118284117	WITHOUT_CLASSIFICATION	2.8881715884122505E-6	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999994205911229	WITHOUT_CLASSIFICATION	5.794088772025671E-7	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999999996924324	WITHOUT_CLASSIFICATION	3.0756760418231338E-9	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9947648479169963	WITHOUT_CLASSIFICATION	0.005235152083003738	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999996700254362	WITHOUT_CLASSIFICATION	3.299745637561573E-7	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999965027366945	WITHOUT_CLASSIFICATION	3.4972633054189977E-6	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999279811846754	WITHOUT_CLASSIFICATION	7.201881532455508E-5	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.999993953141999	WITHOUT_CLASSIFICATION	6.04685800102551E-6	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999930863121466	WITHOUT_CLASSIFICATION	6.913687853492849E-6	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9999660456277237	WITHOUT_CLASSIFICATION	3.3954372276270534E-5	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9376647188455142	WITHOUT_CLASSIFICATION	0.06233528115448582	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999913266344491	WITHOUT_CLASSIFICATION	8.673365550800826E-6	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999863294434	WITHOUT_CLASSIFICATION	1.367055658720326E-7	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999968594256055	WITHOUT_CLASSIFICATION	3.140574394647496E-6	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999969091682341	WITHOUT_CLASSIFICATION	3.090831765781522E-6	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9988828547558619	WITHOUT_CLASSIFICATION	0.0011171452441380433	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.5759252319621272	WITHOUT_CLASSIFICATION	0.4240747680378728	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999957272910549	WITHOUT_CLASSIFICATION	4.272708945164377E-6	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999807544265943	WITHOUT_CLASSIFICATION	1.924557340560781E-5	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9894974024484988	WITHOUT_CLASSIFICATION	0.0105025975515012	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999746694830297	WITHOUT_CLASSIFICATION	2.5330516970327403E-5	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999995128591144	WITHOUT_CLASSIFICATION	4.871408856502253E-7	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998224744021751	WITHOUT_CLASSIFICATION	1.7752559782494015E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999997292906326	WITHOUT_CLASSIFICATION	2.7070936734358007E-7	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9975647215346356	WITHOUT_CLASSIFICATION	0.0024352784653644865	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9967953087502539	WITHOUT_CLASSIFICATION	0.003204691249746072	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9985334756812387	WITHOUT_CLASSIFICATION	0.0014665243187612271	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999956051669561	WITHOUT_CLASSIFICATION	4.394833043954026E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99852976009552	WITHOUT_CLASSIFICATION	0.0014702399044800919	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999994991066975	WITHOUT_CLASSIFICATION	5.008933024692897E-7	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.999999505233589	WITHOUT_CLASSIFICATION	4.947664109534049E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999607904217583	WITHOUT_CLASSIFICATION	3.920957824169008E-4	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9983771783979523	WITHOUT_CLASSIFICATION	0.001622821602047718	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99852976009552	WITHOUT_CLASSIFICATION	0.0014702399044800919	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9960560368253	WITHOUT_CLASSIFICATION	0.003943963174699949	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9998467278482835	WITHOUT_CLASSIFICATION	1.5327215171643594E-4	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999576433881575	WITHOUT_CLASSIFICATION	4.2356611842494894E-4	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999994297041086	WITHOUT_CLASSIFICATION	5.702958914202853E-7	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999999061544635	WITHOUT_CLASSIFICATION	9.384553650143471E-7	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9999553645011333	WITHOUT_CLASSIFICATION	4.4635498866693826E-5	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999540301936034	WITHOUT_CLASSIFICATION	4.5969806396479166E-5	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9512959452471189	WITHOUT_CLASSIFICATION	0.04870405475288116	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.999999388806479	WITHOUT_CLASSIFICATION	6.111935209296314E-7	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999050970022044	WITHOUT_CLASSIFICATION	9.490299779563955E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999236975596608	WITHOUT_CLASSIFICATION	7.630244033920912E-5	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.999992052981878	WITHOUT_CLASSIFICATION	7.947018122047293E-6	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.8933721421287715	DESIGN	0.10662785787122844	WITHOUT_CLASSIFICATION
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999843579066133	WITHOUT_CLASSIFICATION	1.564209338668442E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999977602633829	WITHOUT_CLASSIFICATION	2.239736617010309E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.999997750719014	WITHOUT_CLASSIFICATION	2.249280985964464E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999896598034781	WITHOUT_CLASSIFICATION	1.0340196521971191E-5	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999976274663	WITHOUT_CLASSIFICATION	2.372533693615694E-9	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999970366484503	WITHOUT_CLASSIFICATION	2.9633515497794712E-6	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9997378742754526	WITHOUT_CLASSIFICATION	2.6212572454740026E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9998893510538021	WITHOUT_CLASSIFICATION	1.1064894619781926E-4	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999887982884023	WITHOUT_CLASSIFICATION	1.1201711597779504E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9994374125732964	WITHOUT_CLASSIFICATION	5.625874267035996E-4	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999995118176616	WITHOUT_CLASSIFICATION	4.881823383577299E-7	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999660348664604	WITHOUT_CLASSIFICATION	3.396513353958001E-5	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999996952915401	WITHOUT_CLASSIFICATION	3.0470845989000484E-7	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999937128070732	WITHOUT_CLASSIFICATION	6.287192926835296E-6	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9945261913972391	WITHOUT_CLASSIFICATION	0.005473808602760997	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9998645839316405	WITHOUT_CLASSIFICATION	1.3541606835948064E-4	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9865515395398992	WITHOUT_CLASSIFICATION	0.013448460460100911	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9964561697809394	DESIGN	0.003543830219060517	WITHOUT_CLASSIFICATION
and perform the load	WITHOUT_CLASSIFICATION	0.9999924982773901	WITHOUT_CLASSIFICATION	7.5017226099029175E-6	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.7420408531663325	DESIGN	0.25795914683366744	WITHOUT_CLASSIFICATION
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9975737005095383	WITHOUT_CLASSIFICATION	0.002426299490461671	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999894274359064	WITHOUT_CLASSIFICATION	1.0572564093694693E-5	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999942821098	WITHOUT_CLASSIFICATION	5.7178902096884506E-9	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999988061451759	WITHOUT_CLASSIFICATION	1.1938548241292936E-6	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999985668002866	WITHOUT_CLASSIFICATION	1.4331997134622818E-6	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9920216365298266	WITHOUT_CLASSIFICATION	0.00797836347017342	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999955830855766	WITHOUT_CLASSIFICATION	4.41691442340682E-6	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999996254109439	WITHOUT_CLASSIFICATION	3.745890561068769E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9995736473067126	WITHOUT_CLASSIFICATION	4.2635269328742575E-4	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9995736473067126	WITHOUT_CLASSIFICATION	4.2635269328742575E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999469626193843	WITHOUT_CLASSIFICATION	5.3037380615619636E-5	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999888703416329	WITHOUT_CLASSIFICATION	1.1129658367160801E-5	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999984822061397	WITHOUT_CLASSIFICATION	1.51779386019028E-6	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999719425854843	WITHOUT_CLASSIFICATION	2.8057414515619047E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999763574114593	WITHOUT_CLASSIFICATION	2.364258854070646E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999763574114593	WITHOUT_CLASSIFICATION	2.364258854070646E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9996475792296139	WITHOUT_CLASSIFICATION	3.524207703860919E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9997556881788952	WITHOUT_CLASSIFICATION	2.4431182110480447E-4	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999979635580926	WITHOUT_CLASSIFICATION	2.0364419073950627E-6	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999969371364278	WITHOUT_CLASSIFICATION	3.0628635721541176E-6	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999926503902943	WITHOUT_CLASSIFICATION	7.349609705716558E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999999631926562	WITHOUT_CLASSIFICATION	3.680734387259061E-8	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999998792800397	WITHOUT_CLASSIFICATION	1.2071996022809972E-7	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999560995289476	WITHOUT_CLASSIFICATION	4.390047105232723E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999995594494935	WITHOUT_CLASSIFICATION	4.4055050657082884E-7	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999987738435795	WITHOUT_CLASSIFICATION	1.2261564205247008E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999998384390197	WITHOUT_CLASSIFICATION	1.6156098033050808E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885535554965	WITHOUT_CLASSIFICATION	1.1446444503498559E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999885535554965	WITHOUT_CLASSIFICATION	1.1446444503498559E-5	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999980754355	WITHOUT_CLASSIFICATION	1.924564460595226E-9	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9997618351658344	WITHOUT_CLASSIFICATION	2.3816483416566595E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.999995239460038	WITHOUT_CLASSIFICATION	4.7605399620385115E-6	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9997423176962223	WITHOUT_CLASSIFICATION	2.576823037775657E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9999282261443968	WITHOUT_CLASSIFICATION	7.177385560318096E-5	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996011298840101	WITHOUT_CLASSIFICATION	3.9887011598995333E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9952551317771351	WITHOUT_CLASSIFICATION	0.004744868222864811	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999991485818156	WITHOUT_CLASSIFICATION	8.514181844252707E-7	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9999975637023552	WITHOUT_CLASSIFICATION	2.4362976448260187E-6	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9999847020787843	WITHOUT_CLASSIFICATION	1.5297921215738498E-5	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9859835616890732	WITHOUT_CLASSIFICATION	0.014016438310926757	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999050970022044	WITHOUT_CLASSIFICATION	9.490299779563955E-5	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9971190784795377	WITHOUT_CLASSIFICATION	0.002880921520462203	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999989896527123	WITHOUT_CLASSIFICATION	1.010347287699196E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9988107248042111	WITHOUT_CLASSIFICATION	0.0011892751957889491	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999914931083193	WITHOUT_CLASSIFICATION	8.506891680690296E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999884387233	WITHOUT_CLASSIFICATION	1.156127669661369E-7	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999876680433522	WITHOUT_CLASSIFICATION	1.2331956647798676E-5	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9993071056585432	WITHOUT_CLASSIFICATION	6.928943414567177E-4	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9937606052882553	WITHOUT_CLASSIFICATION	0.006239394711744738	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999997659511219	WITHOUT_CLASSIFICATION	2.3404887800691291E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9859676845923674	WITHOUT_CLASSIFICATION	0.014032315407632575	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9859676845923674	WITHOUT_CLASSIFICATION	0.014032315407632575	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999858651743317	WITHOUT_CLASSIFICATION	1.4134825668156786E-5	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999925846339044	WITHOUT_CLASSIFICATION	7.4153660955384035E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9992118385203207	WITHOUT_CLASSIFICATION	7.881614796793011E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999885542588237	WITHOUT_CLASSIFICATION	1.1445741176234339E-5	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999999181826805	WITHOUT_CLASSIFICATION	8.181731949158597E-7	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999392448116564	WITHOUT_CLASSIFICATION	6.075518834350882E-5	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999986761266839	WITHOUT_CLASSIFICATION	1.3238733160491583E-6	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9402457259944507	WITHOUT_CLASSIFICATION	0.05975427400554942	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9999685290697912	WITHOUT_CLASSIFICATION	3.147093020876127E-5	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999911820804533	WITHOUT_CLASSIFICATION	8.817919546586034E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99329725036385	WITHOUT_CLASSIFICATION	0.006702749636150027	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.6790786968904188	WITHOUT_CLASSIFICATION	0.3209213031095813	DESIGN
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8820091034279092	WITHOUT_CLASSIFICATION	0.11799089657209079	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999671447268683	WITHOUT_CLASSIFICATION	3.285527313173486E-5	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9628900803058846	WITHOUT_CLASSIFICATION	0.03710991969411542	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9994330270857829	WITHOUT_CLASSIFICATION	5.669729142171791E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.58006607129265	DESIGN	0.4199339287073499	WITHOUT_CLASSIFICATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999992398859544	WITHOUT_CLASSIFICATION	7.601140457114549E-7	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999815237278759	WITHOUT_CLASSIFICATION	1.8476272124130003E-5	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9959463256510575	WITHOUT_CLASSIFICATION	0.004053674348942544	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999250841586	WITHOUT_CLASSIFICATION	7.491584143763197E-8	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.6191296434201929	WITHOUT_CLASSIFICATION	0.38087035657980717	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998962943042243	WITHOUT_CLASSIFICATION	0.0010370569577570431	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999743420241	WITHOUT_CLASSIFICATION	2.5657975816022988E-8	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99998160952626	WITHOUT_CLASSIFICATION	1.8390473739952874E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.99998160952626	WITHOUT_CLASSIFICATION	1.8390473739952874E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9756145154678171	WITHOUT_CLASSIFICATION	0.02438548453218287	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9884866442775145	WITHOUT_CLASSIFICATION	0.011513355722485527	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999868654437387	WITHOUT_CLASSIFICATION	1.3134556261223361E-5	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9824719258559387	DESIGN	0.017528074144061313	WITHOUT_CLASSIFICATION
intentionally empty	WITHOUT_CLASSIFICATION	0.9999356729077383	WITHOUT_CLASSIFICATION	6.432709226164583E-5	DESIGN
todo : what else to do here?	DESIGN	0.9553031760391966	WITHOUT_CLASSIFICATION	0.04469682396080344	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.6844950788672094	DESIGN	0.31550492113279055	WITHOUT_CLASSIFICATION
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9958477752362588	WITHOUT_CLASSIFICATION	0.0041522247637412555	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9798572892334395	DESIGN	0.0201427107665604	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9798572892334395	DESIGN	0.0201427107665604	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9982905797957182	WITHOUT_CLASSIFICATION	0.001709420204281704	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999532065368033	WITHOUT_CLASSIFICATION	4.6793463196661525E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9977153189041217	WITHOUT_CLASSIFICATION	0.0022846810958782387	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.7039755802727556	DESIGN	0.2960244197272444	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.7039755802727556	DESIGN	0.2960244197272444	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999901567989591	DESIGN	9.843201040945747E-6	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999901567989591	DESIGN	9.843201040945747E-6	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9650346349689028	WITHOUT_CLASSIFICATION	0.03496536503109712	DESIGN
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.965826685939637	DESIGN	0.03417331406036289	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.965826685939637	DESIGN	0.03417331406036289	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.5359853343654497	WITHOUT_CLASSIFICATION	0.4640146656345501	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999532065368033	WITHOUT_CLASSIFICATION	4.6793463196661525E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9977153189041217	WITHOUT_CLASSIFICATION	0.0022846810958782387	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999701075742617	WITHOUT_CLASSIFICATION	2.9892425738234513E-5	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999992683357315	WITHOUT_CLASSIFICATION	7.316642684633764E-7	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9365548424914071	DESIGN	0.06344515750859293	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.7868231600801222	WITHOUT_CLASSIFICATION	0.2131768399198777	DESIGN
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.5685759283044834	DESIGN	0.4314240716955165	WITHOUT_CLASSIFICATION
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9985487088672356	WITHOUT_CLASSIFICATION	0.0014512911327644196	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.966512633913924	DESIGN	0.03348736608607603	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9553031760391966	WITHOUT_CLASSIFICATION	0.04469682396080344	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9910513976435453	WITHOUT_CLASSIFICATION	0.008948602356454597	DESIGN
todo : what else to do here?	DESIGN	0.9553031760391966	WITHOUT_CLASSIFICATION	0.04469682396080344	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9969953048124955	WITHOUT_CLASSIFICATION	0.00300469518750438	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.991355495041273	WITHOUT_CLASSIFICATION	0.008644504958726984	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9998152653702751	DESIGN	1.8473462972488398E-4	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.6844950788672094	DESIGN	0.31550492113279055	WITHOUT_CLASSIFICATION
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9340405699151928	DESIGN	0.06595943008480719	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9984399417577439	WITHOUT_CLASSIFICATION	0.0015600582422561327	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.5990262252822229	DESIGN	0.400973774717777	WITHOUT_CLASSIFICATION
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.7645028911490127	WITHOUT_CLASSIFICATION	0.23549710885098735	DESIGN
todo : what is the implication of this?	DESIGN	0.9742065805630324	WITHOUT_CLASSIFICATION	0.02579341943696749	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9986921457610445	WITHOUT_CLASSIFICATION	0.001307854238955562	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9999957633401274	DESIGN	4.2366598726765216E-6	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9923999773129871	DESIGN	0.00760002268701296	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9999935299500672	WITHOUT_CLASSIFICATION	6.470049932790971E-6	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.819830740567344	DESIGN	0.18016925943265605	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9795316956449872	WITHOUT_CLASSIFICATION	0.020468304355012755	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9723836383112607	DESIGN	0.027616361688739287	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9991473800410088	WITHOUT_CLASSIFICATION	8.526199589912127E-4	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9994087684312027	DESIGN	5.912315687973049E-4	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.5389247146365053	WITHOUT_CLASSIFICATION	0.46107528536349485	DESIGN
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9997720805429121	DESIGN	2.2791945708774188E-4	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.646068270030535	WITHOUT_CLASSIFICATION	0.3539317299694649	DESIGN
FIXME: get the PersistentClass	DESIGN	0.646068270030535	WITHOUT_CLASSIFICATION	0.3539317299694649	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.6218552791063603	WITHOUT_CLASSIFICATION	0.3781447208936397	DESIGN
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9630428494012996	WITHOUT_CLASSIFICATION	0.03695715059870034	DESIGN
TODO possibly relax that	DESIGN	0.9830912102341559	WITHOUT_CLASSIFICATION	0.01690878976584408	DESIGN
TODO possibly relax that	DESIGN	0.9830912102341559	WITHOUT_CLASSIFICATION	0.01690878976584408	DESIGN
TODO possibly relax that	DESIGN	0.9830912102341559	WITHOUT_CLASSIFICATION	0.01690878976584408	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.5389247146365053	WITHOUT_CLASSIFICATION	0.46107528536349485	DESIGN
use a degenerated strategy for backward compatibility	DESIGN	0.9999169460781612	WITHOUT_CLASSIFICATION	8.305392183887431E-5	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.999982972710194	WITHOUT_CLASSIFICATION	1.702728980598517E-5	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9994850836740335	WITHOUT_CLASSIFICATION	5.149163259665468E-4	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9999897940694266	WITHOUT_CLASSIFICATION	1.0205930573538521E-5	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9903143325708466	WITHOUT_CLASSIFICATION	0.009685667429153418	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9914136418589666	WITHOUT_CLASSIFICATION	0.008586358141033442	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9798572892334395	DESIGN	0.0201427107665604	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9798572892334395	DESIGN	0.0201427107665604	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9961260869553596	WITHOUT_CLASSIFICATION	0.003873913044640266	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9798572892334395	DESIGN	0.0201427107665604	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9960213505748398	DESIGN	0.003978649425160182	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9992548604137308	WITHOUT_CLASSIFICATION	7.451395862691885E-4	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9984813221147071	WITHOUT_CLASSIFICATION	0.0015186778852929236	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.999901361737183	WITHOUT_CLASSIFICATION	9.863826281694971E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9996759359936177	WITHOUT_CLASSIFICATION	3.2406400638225783E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9983093003524811	WITHOUT_CLASSIFICATION	0.0016906996475188581	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.891307606785038	WITHOUT_CLASSIFICATION	0.10869239321496206	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999944082472706	WITHOUT_CLASSIFICATION	5.591752729429253E-6	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9998962824210098	WITHOUT_CLASSIFICATION	1.0371757899026048E-4	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9989095327636892	WITHOUT_CLASSIFICATION	0.0010904672363107816	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9986983544805855	WITHOUT_CLASSIFICATION	0.001301645519414476	DESIGN
Does this dialect support check constraints?	DESIGN	0.9999963294747534	WITHOUT_CLASSIFICATION	3.670525246683007E-6	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9999991652772107	WITHOUT_CLASSIFICATION	8.34722789293663E-7	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9999161419448314	WITHOUT_CLASSIFICATION	8.38580551686023E-5	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9999595538182006	WITHOUT_CLASSIFICATION	4.0446181799419654E-5	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9980375522326934	WITHOUT_CLASSIFICATION	0.001962447767306531	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9999796085407436	WITHOUT_CLASSIFICATION	2.0391459256355196E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9351586257999686	WITHOUT_CLASSIFICATION	0.06484137420003136	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.6687244232611278	WITHOUT_CLASSIFICATION	0.33127557673887204	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.961535964712527	DESIGN	0.038464035287472984	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.751311201791988	DESIGN	0.24868879820801199	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9822030272639956	WITHOUT_CLASSIFICATION	0.01779697273600438	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9942158968829765	WITHOUT_CLASSIFICATION	0.005784103117023498	DESIGN
I suppose?	DESIGN	0.9991714117045707	WITHOUT_CLASSIFICATION	8.285882954292468E-4	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9124463159337132	DESIGN	0.08755368406628676	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9981544801062395	WITHOUT_CLASSIFICATION	0.0018455198937604826	DESIGN
TODO:refactor + make this method private	DESIGN	0.9433932244469402	WITHOUT_CLASSIFICATION	0.05660677555305971	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9977186617684568	WITHOUT_CLASSIFICATION	0.002281338231543144	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9963843025911253	DESIGN	0.0036156974088747754	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.6799468718766803	DESIGN	0.3200531281233196	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.999703639098684	WITHOUT_CLASSIFICATION	2.963609013160497E-4	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.5177851793793821	DESIGN	0.48221482062061805	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.5177851793793821	DESIGN	0.48221482062061805	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9661134572017501	DESIGN	0.03388654279824999	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.969693975535323	DESIGN	0.0303060244646769	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.969693975535323	DESIGN	0.0303060244646769	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9623764942333856	DESIGN	0.037623505766614475	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9909937020192376	WITHOUT_CLASSIFICATION	0.009006297980762483	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.9949953708299198	DESIGN	0.0050046291700801	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9932345839684579	WITHOUT_CLASSIFICATION	0.0067654160315420665	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9924646543079801	WITHOUT_CLASSIFICATION	0.007535345692019823	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.643422714585003	DESIGN	0.35657728541499695	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9771932517799052	WITHOUT_CLASSIFICATION	0.022806748220094843	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.8780992147583968	DESIGN	0.12190078524160318	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9052628980942181	DESIGN	0.09473710190578186	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.981110062390086	DESIGN	0.01888993760991401	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.6951774834491069	DESIGN	0.30482251655089315	WITHOUT_CLASSIFICATION
TODO: suck into event class	DESIGN	0.9263083815586568	DESIGN	0.07369161844134324	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9983461719116749	WITHOUT_CLASSIFICATION	0.0016538280883250792	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9179883491155669	DESIGN	0.08201165088443298	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.999810517617046	DESIGN	1.894823829541014E-4	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.7695619981894951	DESIGN	0.23043800181050497	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9982621722347973	WITHOUT_CLASSIFICATION	0.0017378277652027314	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.9945691068644662	DESIGN	0.005430893135533829	WITHOUT_CLASSIFICATION
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.999992126851939	DESIGN	7.873148061096155E-6	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9963065468429668	WITHOUT_CLASSIFICATION	0.0036934531570330894	DESIGN
TODO: is this 100% correct?	DESIGN	0.7333959586515933	DESIGN	0.26660404134840654	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.999877200016346	WITHOUT_CLASSIFICATION	1.227999836541022E-4	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9997496132987175	DESIGN	2.5038670128248576E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9718344926594128	DESIGN	0.02816550734058719	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9998652509641267	DESIGN	1.3474903587340302E-4	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.989359607676206	WITHOUT_CLASSIFICATION	0.010640392323793876	DESIGN
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.8516446344732325	DESIGN	0.14835536552676762	WITHOUT_CLASSIFICATION
TODO: merge into one method!	DESIGN	0.9193578257791231	DESIGN	0.08064217422087684	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9883374649739641	DESIGN	0.011662535026035804	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9995576406447347	DESIGN	4.4235935526528667E-4	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9981012197260987	DESIGN	0.0018987802739012878	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9944167238652033	WITHOUT_CLASSIFICATION	0.005583276134796716	DESIGN
TODO : better way?!?	DESIGN	0.9940118995605717	DESIGN	0.005988100439428318	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999951736134968	WITHOUT_CLASSIFICATION	4.826386503191907E-6	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9978447640977816	DESIGN	0.002155235902218391	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9984167584453391	DESIGN	0.0015832415546608966	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999592931945114	DESIGN	4.0706805488544306E-5	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9718278382596439	WITHOUT_CLASSIFICATION	0.028172161740356153	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9991617091607046	DESIGN	8.382908392953825E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.6066704818528894	WITHOUT_CLASSIFICATION	0.39332951814711054	DESIGN
yuck!	DESIGN	0.9961260869553596	WITHOUT_CLASSIFICATION	0.003873913044640266	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9949693032792235	WITHOUT_CLASSIFICATION	0.005030696720776523	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9999980597743198	DESIGN	1.940225680219137E-6	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9999416118706177	WITHOUT_CLASSIFICATION	5.838812938222914E-5	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999958200702888	DESIGN	4.179929711259175E-6	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999919600905534	DESIGN	8.039909446564623E-6	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9979303467755073	DESIGN	0.0020696532244927094	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9798572892334395	DESIGN	0.0201427107665604	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9961260869553596	WITHOUT_CLASSIFICATION	0.003873913044640266	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9989669338617461	WITHOUT_CLASSIFICATION	0.001033066138254045	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9952332787889427	DESIGN	0.004766721211057231	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9558249145644718	WITHOUT_CLASSIFICATION	0.04417508543552823	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.9289725964972758	WITHOUT_CLASSIFICATION	0.07102740350272414	DESIGN
TODO: is this a bit ugly?	DESIGN	0.9706775801214713	DESIGN	0.029322419878528638	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8513921591039274	WITHOUT_CLASSIFICATION	0.14860784089607268	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999967980444564	DESIGN	3.201955543562028E-6	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9999960495436785	DESIGN	3.950456321527391E-6	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999154706149059	DESIGN	8.452938509407657E-5	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.6891831757957081	DESIGN	0.310816824204292	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.999990268248891	WITHOUT_CLASSIFICATION	9.731751108983237E-6	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9223024752982837	DESIGN	0.07769752470171633	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9429096015893155	DESIGN	0.05709039841068459	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9447366581674607	WITHOUT_CLASSIFICATION	0.055263341832539316	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9437927745968958	WITHOUT_CLASSIFICATION	0.05620722540310415	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.7860297035998939	WITHOUT_CLASSIFICATION	0.21397029640010606	DESIGN
this is ugly here, but needed because its a subquery	DESIGN	0.9163336449554796	WITHOUT_CLASSIFICATION	0.08366635504452036	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9080363699817193	DESIGN	0.09196363001828069	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.999937059880869	DESIGN	6.294011913108785E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9998488679104518	DESIGN	1.5113208954825708E-4	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8616052429556571	DESIGN	0.13839475704434295	WITHOUT_CLASSIFICATION
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9990764467731129	DESIGN	9.235532268870444E-4	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9522446491612793	WITHOUT_CLASSIFICATION	0.04775535083872084	DESIGN
TODO: what type?	DESIGN	0.7663746012492264	DESIGN	0.23362539875077354	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9991371456064991	WITHOUT_CLASSIFICATION	8.628543935009418E-4	DESIGN
short-circuit for performance...	DESIGN	0.9979902169488881	WITHOUT_CLASSIFICATION	0.002009783051111928	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9996360133002216	WITHOUT_CLASSIFICATION	3.639866997784299E-4	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9901405870045437	DESIGN	0.009859412995456335	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9978627680599096	WITHOUT_CLASSIFICATION	0.002137231940090487	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999998540096329	DESIGN	1.4599036718882604E-7	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9961868127555114	DESIGN	0.0038131872444886242	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9051631911593473	DESIGN	0.09483680884065267	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999675744189147	DESIGN	3.242558108531647E-5	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.999999844567538	WITHOUT_CLASSIFICATION	1.554324619753837E-7	DESIGN
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9396347102910098	DESIGN	0.06036528970899029	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9985284196526808	WITHOUT_CLASSIFICATION	0.0014715803473191783	DESIGN
use of trim() here is ugly?	DESIGN	0.9998698820550821	WITHOUT_CLASSIFICATION	1.3011794491796529E-4	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.6857234942039508	WITHOUT_CLASSIFICATION	0.3142765057960491	DESIGN
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.9971900636698817	WITHOUT_CLASSIFICATION	0.002809936330118351	DESIGN
TODO: inefficient	DESIGN	0.8719453232218788	DESIGN	0.12805467677812132	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.9988237079800217	WITHOUT_CLASSIFICATION	0.0011762920199782912	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.999999310163966	DESIGN	6.898360338780882E-7	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999848825201492	DESIGN	1.5117479850770456E-5	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.999486268359651	DESIGN	5.137316403489658E-4	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9999605219640301	DESIGN	3.94780359698878E-5	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9991556182547268	WITHOUT_CLASSIFICATION	8.443817452732028E-4	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.7717468375716807	WITHOUT_CLASSIFICATION	0.2282531624283193	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9802903677907737	DESIGN	0.019709632209226342	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9998226778686923	WITHOUT_CLASSIFICATION	1.7732213130769393E-4	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9874774894913263	DESIGN	0.012522510508673597	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.7978552298248852	DESIGN	0.20214477017511484	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.925130360381864	WITHOUT_CLASSIFICATION	0.07486963961813589	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.8760716592055312	DESIGN	0.12392834079446884	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.915302151990972	DESIGN	0.08469784800902803	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9998524426618124	WITHOUT_CLASSIFICATION	1.4755733818758756E-4	DESIGN
create an index on the key columns??	DESIGN	0.999926818486067	WITHOUT_CLASSIFICATION	7.318151393297077E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9998144614566022	DESIGN	1.8553854339782152E-4	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.999926818486067	WITHOUT_CLASSIFICATION	7.318151393297077E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9988790724075411	DESIGN	0.0011209275924587466	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.999900751465084	WITHOUT_CLASSIFICATION	9.924853491596568E-5	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9716225386117348	DESIGN	0.0283774613882653	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9999374868508485	WITHOUT_CLASSIFICATION	6.251314915150262E-5	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.5773408060273078	WITHOUT_CLASSIFICATION	0.4226591939726922	DESIGN
create an index on the key columns??	DESIGN	0.999926818486067	WITHOUT_CLASSIFICATION	7.318151393297077E-5	DESIGN
todo : remove	DESIGN	0.9939598463980579	WITHOUT_CLASSIFICATION	0.006040153601942172	DESIGN
todo : remove	DESIGN	0.9939598463980579	WITHOUT_CLASSIFICATION	0.006040153601942172	DESIGN
todo : remove	DESIGN	0.9939598463980579	WITHOUT_CLASSIFICATION	0.006040153601942172	DESIGN
todo : throw exception?	DESIGN	0.9662804895603754	WITHOUT_CLASSIFICATION	0.033719510439624616	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9555135965183111	DESIGN	0.044486403481688905	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.998028208540556	DESIGN	0.0019717914594440966	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9994322046160096	DESIGN	5.677953839904247E-4	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.5757551685606206	WITHOUT_CLASSIFICATION	0.42424483143937936	DESIGN
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9975372575622664	DESIGN	0.002462742437733667	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.9375625733331514	WITHOUT_CLASSIFICATION	0.06243742666684857	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.7820364164560016	WITHOUT_CLASSIFICATION	0.21796358354399833	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.8565701918826546	DESIGN	0.14342980811734535	WITHOUT_CLASSIFICATION
ie. the subquery! yuck!	DESIGN	0.9999370038909099	WITHOUT_CLASSIFICATION	6.299610909009035E-5	DESIGN
TODO: move to .sql package!!	DESIGN	0.980312921531648	DESIGN	0.019687078468351993	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9886737152911452	DESIGN	0.011326284708854764	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9994023310556084	DESIGN	5.976689443916256E-4	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.88330950225802	DESIGN	0.11669049774197994	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9957359421753076	DESIGN	0.004264057824692386	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9990428711803232	WITHOUT_CLASSIFICATION	9.571288196767935E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8886262181123741	WITHOUT_CLASSIFICATION	0.111373781887626	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.8929610211557463	WITHOUT_CLASSIFICATION	0.10703897884425372	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9642777707374144	DESIGN	0.0357222292625856	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.784707669875313	DESIGN	0.215292330124687	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9742340994081492	DESIGN	0.0257659005918507	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9855989005320063	WITHOUT_CLASSIFICATION	0.01440109946799368	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9908244617425617	DESIGN	0.009175538257438295	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9247119880174238	WITHOUT_CLASSIFICATION	0.07528801198257616	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9898962643109004	DESIGN	0.010103735689099667	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9969717759663477	DESIGN	0.00302822403365238	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.8705574295926354	DESIGN	0.12944257040736473	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9988860789039161	DESIGN	0.0011139210960838765	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999980040998633	DESIGN	1.9959001367602755E-6	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.671579284588017	WITHOUT_CLASSIFICATION	0.328420715411983	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9739522348819621	WITHOUT_CLASSIFICATION	0.026047765118037903	DESIGN
is this ok?	DESIGN	0.99999242483209	WITHOUT_CLASSIFICATION	7.575167910020831E-6	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9996594079593154	DESIGN	3.405920406845021E-4	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.8721510945658414	DESIGN	0.1278489054341586	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.996080702924501	WITHOUT_CLASSIFICATION	0.003919297075498935	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9689719601684638	DESIGN	0.031028039831536184	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.999746248753176	DESIGN	2.5375124682403005E-4	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.997154515482621	DESIGN	0.002845484517379005	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9898066015259839	DESIGN	0.010193398474016128	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.98073949882803	DESIGN	0.0192605011719699	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9998434737226687	WITHOUT_CLASSIFICATION	1.565262773313822E-4	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9573938025928889	DESIGN	0.04260619740711113	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999726113129666	DESIGN	2.738868703343145E-5	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.8168495458222756	WITHOUT_CLASSIFICATION	0.18315045417772438	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9772264009945453	DESIGN	0.022773599005454732	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.7003468438932038	DESIGN	0.29965315610679627	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.985026559813805	DESIGN	0.014973440186194911	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.8754489546940075	DESIGN	0.12455104530599251	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.935431348193196	DESIGN	0.06456865180680416	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9155885911936552	DESIGN	0.08441140880634473	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9999214392641051	WITHOUT_CLASSIFICATION	7.856073589494449E-5	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9889446460593688	DESIGN	0.011055353940631155	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9774876003427561	DESIGN	0.022512399657243984	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7195156524380598	WITHOUT_CLASSIFICATION	0.2804843475619403	DESIGN
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999744287891613	DESIGN	2.557121083870591E-5	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9996716392087976	DESIGN	3.2836079120238023E-4	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9971931932760382	WITHOUT_CLASSIFICATION	0.002806806723961887	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999996956632844	DESIGN	3.043367155403501E-7	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9610161517820546	WITHOUT_CLASSIFICATION	0.03898384821794532	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.9994728264402923	DESIGN	5.271735597076849E-4	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9996790796135708	WITHOUT_CLASSIFICATION	3.2092038642911655E-4	DESIGN
short cut check...	DESIGN	0.9999970785266931	WITHOUT_CLASSIFICATION	2.9214733070138957E-6	DESIGN
todo : move to StringHelper?	DESIGN	0.9951213401745115	WITHOUT_CLASSIFICATION	0.004878659825488589	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.9959444425401804	DESIGN	0.004055557459819558	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9505657378031117	DESIGN	0.04943426219688824	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9974126473152197	DESIGN	0.0025873526847801564	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9873783963004796	WITHOUT_CLASSIFICATION	0.012621603699520348	DESIGN
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9851158480197952	WITHOUT_CLASSIFICATION	0.01488415198020475	DESIGN
TODO: simply remove this override if we fix the above todos	DESIGN	0.5993387905370138	WITHOUT_CLASSIFICATION	0.4006612094629863	DESIGN
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.9992890749645856	WITHOUT_CLASSIFICATION	7.109250354144501E-4	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999587414762813	DESIGN	4.1258523718825716E-5	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.6653385772698374	DESIGN	0.3346614227301627	WITHOUT_CLASSIFICATION
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9931849184172682	DESIGN	0.006815081582731877	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9995486738486211	WITHOUT_CLASSIFICATION	4.5132615137890826E-4	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999731525046053	DESIGN	2.6847495394819268E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9988619013095645	DESIGN	0.0011380986904354652	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.99940202755216	WITHOUT_CLASSIFICATION	5.979724478399354E-4	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999878535575919	DESIGN	1.2146442408127663E-5	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999999951188483	DESIGN	4.881151712610045E-9	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9561410924084535	WITHOUT_CLASSIFICATION	0.04385890759154654	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.664913796489125	WITHOUT_CLASSIFICATION	0.33508620351087504	DESIGN
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.7007267331316841	WITHOUT_CLASSIFICATION	0.29927326686831607	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9978716283699836	DESIGN	0.0021283716300163286	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9995539627026254	DESIGN	4.460372973745857E-4	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9800967957870521	DESIGN	0.01990320421294784	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9939598463980579	WITHOUT_CLASSIFICATION	0.006040153601942172	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9579926434578163	DESIGN	0.04200735654218355	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9999997357584128	DESIGN	2.642415871356541E-7	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.7660632812846966	DESIGN	0.2339367187153034	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9873443664275673	WITHOUT_CLASSIFICATION	0.012655633572432611	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9998453825052213	DESIGN	1.546174947787097E-4	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9739368589114163	WITHOUT_CLASSIFICATION	0.026063141088583642	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.980114490326742	WITHOUT_CLASSIFICATION	0.019885509673257952	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9999184949377886	DESIGN	8.150506221141138E-5	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.8572002838115729	DESIGN	0.14279971618842716	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.9966901536013787	WITHOUT_CLASSIFICATION	0.003309846398621343	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.992767486375477	DESIGN	0.007232513624523008	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.9988541656787211	WITHOUT_CLASSIFICATION	0.0011458343212788391	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9987843604699156	DESIGN	0.0012156395300843234	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9742762651298487	WITHOUT_CLASSIFICATION	0.02572373487015133	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999735649180655	DESIGN	2.6435081934455037E-5	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9451564719431828	WITHOUT_CLASSIFICATION	0.0548435280568173	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9940308107110221	DESIGN	0.005969189288977896	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9999558280822517	WITHOUT_CLASSIFICATION	4.417191774822837E-5	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.85492862808946	WITHOUT_CLASSIFICATION	0.14507137191053995	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.9998285650036174	DESIGN	1.7143499638262792E-4	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9994875029547109	DESIGN	5.124970452890418E-4	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.999999998452527	DESIGN	1.547472976793939E-9	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999997944097917	DESIGN	2.0559020833927223E-7	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9999326428678478	DESIGN	6.735713215216596E-5	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9965609613459023	DESIGN	0.003439038654097767	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9937638635462349	DESIGN	0.006236136453765069	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999989977175022	WITHOUT_CLASSIFICATION	1.002282497845314E-6	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.999998969914361	WITHOUT_CLASSIFICATION	1.0300856390689646E-6	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999741783103625	DESIGN	2.582168963756438E-5	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9531381282217593	DESIGN	0.0468618717782407	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9697153373399914	DESIGN	0.030284662660008586	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9971884839793846	WITHOUT_CLASSIFICATION	0.0028115160206152357	DESIGN
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9877143158101822	DESIGN	0.012285684189817679	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9995004827828216	DESIGN	4.99517217178548E-4	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.8705574295926354	DESIGN	0.12944257040736473	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9972815805314255	DESIGN	0.0027184194685745404	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9994869184102786	DESIGN	5.130815897214458E-4	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.671579284588017	WITHOUT_CLASSIFICATION	0.328420715411983	DESIGN
TODO: make this a bit nicer	DESIGN	0.8721510945658414	DESIGN	0.1278489054341586	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8549870589117713	DESIGN	0.14501294108822882	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.7039755802727556	DESIGN	0.2960244197272444	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.7039755802727556	DESIGN	0.2960244197272444	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.7039755802727556	DESIGN	0.2960244197272444	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.999989949300993	DESIGN	1.005069900691211E-5	WITHOUT_CLASSIFICATION
