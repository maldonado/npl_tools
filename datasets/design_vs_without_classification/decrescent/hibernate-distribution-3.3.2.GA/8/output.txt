//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999878443785271	WITHOUT_CLASSIFICATION	1.2155621472957738E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999778477124299	WITHOUT_CLASSIFICATION	2.2152287570068534E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999778477124299	WITHOUT_CLASSIFICATION	2.2152287570068534E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9996518183834562	WITHOUT_CLASSIFICATION	3.481816165437724E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999964770470303	WITHOUT_CLASSIFICATION	3.5229529696039416E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999995864021105	WITHOUT_CLASSIFICATION	4.135978894365243E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996498886622	WITHOUT_CLASSIFICATION	3.5011133774133815E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996498886622	WITHOUT_CLASSIFICATION	3.5011133774133815E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998426858504	WITHOUT_CLASSIFICATION	1.5731414955907577E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999899671754	WITHOUT_CLASSIFICATION	1.0032824551934594E-8	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999897155233917	WITHOUT_CLASSIFICATION	1.0284476608300339E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999737694986888	WITHOUT_CLASSIFICATION	2.6230501311171507E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999975457607393	WITHOUT_CLASSIFICATION	2.4542392607963205E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999975457607393	WITHOUT_CLASSIFICATION	2.4542392607963205E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999964238267188	WITHOUT_CLASSIFICATION	3.5761732813209074E-6	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998169589084166	WITHOUT_CLASSIFICATION	1.83041091583357E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.9996527838145345	WITHOUT_CLASSIFICATION	3.4721618546546283E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999936158894422	WITHOUT_CLASSIFICATION	6.384110557718727E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998187895737	WITHOUT_CLASSIFICATION	1.8121042642691467E-7	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999824111830232	WITHOUT_CLASSIFICATION	1.7588816976785473E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.9999834022067046	WITHOUT_CLASSIFICATION	1.659779329540051E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999997487949022	WITHOUT_CLASSIFICATION	2.5120509774175865E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999958746188883	WITHOUT_CLASSIFICATION	4.125381111635686E-6	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9417388332591432	WITHOUT_CLASSIFICATION	0.058261166740856914	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.999990125115358	WITHOUT_CLASSIFICATION	9.87488464190396E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999946099121908	WITHOUT_CLASSIFICATION	5.390087809120528E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999988677752589	WITHOUT_CLASSIFICATION	1.1322247410972653E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999771387717804	WITHOUT_CLASSIFICATION	2.2861228219573834E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999771387717804	WITHOUT_CLASSIFICATION	2.2861228219573834E-5	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9999501544485925	WITHOUT_CLASSIFICATION	4.984555140759187E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999977456447625	WITHOUT_CLASSIFICATION	2.2543552374855478E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999849827188869	WITHOUT_CLASSIFICATION	1.5017281113012553E-5	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999827827660399	WITHOUT_CLASSIFICATION	1.7217233960128595E-5	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.7833245747912047	DESIGN	0.21667542520879535	WITHOUT_CLASSIFICATION
/**	WITHOUT_CLASSIFICATION	0.91426790781386	DESIGN	0.08573209218613989	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
/**	WITHOUT_CLASSIFICATION	0.91426790781386	DESIGN	0.08573209218613989	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999998936361	WITHOUT_CLASSIFICATION	1.0636392875185009E-10	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999392673313802	WITHOUT_CLASSIFICATION	6.073266861979854E-5	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999992864546005	WITHOUT_CLASSIFICATION	7.135453995921468E-7	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.998809740793598	WITHOUT_CLASSIFICATION	0.0011902592064020388	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999916755788923	WITHOUT_CLASSIFICATION	8.324421107589073E-6	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991518967687	WITHOUT_CLASSIFICATION	8.481032313068461E-7	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967021661936	WITHOUT_CLASSIFICATION	3.2978338065006223E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999897293527057	WITHOUT_CLASSIFICATION	1.0270647294302932E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999934802008521	WITHOUT_CLASSIFICATION	6.519799147934596E-6	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999879505060315	WITHOUT_CLASSIFICATION	1.2049493968567453E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999888779001302	WITHOUT_CLASSIFICATION	1.1122099869658456E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999934802008521	WITHOUT_CLASSIFICATION	6.519799147934596E-6	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9999888779001302	WITHOUT_CLASSIFICATION	1.1122099869658456E-5	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999994126254143	WITHOUT_CLASSIFICATION	5.873745857765492E-7	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9646087526175899	DESIGN	0.035391247382410014	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999997633084808	WITHOUT_CLASSIFICATION	2.366915191994879E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999869622576248	WITHOUT_CLASSIFICATION	1.3037742375117652E-5	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9993322538474357	WITHOUT_CLASSIFICATION	6.677461525642663E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9998459861182836	WITHOUT_CLASSIFICATION	1.540138817163663E-4	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9829897196722392	WITHOUT_CLASSIFICATION	0.01701028032776081	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.93182718462813	WITHOUT_CLASSIFICATION	0.06817281537186998	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999977513792	WITHOUT_CLASSIFICATION	2.248620857832434E-9	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9999587738067666	WITHOUT_CLASSIFICATION	4.122619323350322E-5	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999070645961355	WITHOUT_CLASSIFICATION	9.293540386441541E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999987806471089	WITHOUT_CLASSIFICATION	1.2193528910309582E-6	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999882343535	WITHOUT_CLASSIFICATION	1.1765646413796384E-8	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9996891781177882	WITHOUT_CLASSIFICATION	3.108218822117556E-4	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9877529126946557	WITHOUT_CLASSIFICATION	0.012247087305344219	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999801405124101	WITHOUT_CLASSIFICATION	1.985948758987162E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9998071232868929	WITHOUT_CLASSIFICATION	1.9287671310712093E-4	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999784171314431	WITHOUT_CLASSIFICATION	2.158286855694848E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.999997702604147	WITHOUT_CLASSIFICATION	2.2973958529580815E-6	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999999838345836	WITHOUT_CLASSIFICATION	1.6165416398132526E-7	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999980131724258	WITHOUT_CLASSIFICATION	1.9868275742009355E-5	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998877615441	WITHOUT_CLASSIFICATION	1.1223845591334448E-7	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999677944954246	WITHOUT_CLASSIFICATION	3.220550457533528E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999071068368	WITHOUT_CLASSIFICATION	9.289316320402172E-7	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7957466750561172	DESIGN	0.20425332494388274	WITHOUT_CLASSIFICATION
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999993775750913	WITHOUT_CLASSIFICATION	6.224249086571715E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999315360995	WITHOUT_CLASSIFICATION	6.846390060460728E-8	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.8972396054021523	DESIGN	0.10276039459784772	WITHOUT_CLASSIFICATION
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999859618057	WITHOUT_CLASSIFICATION	1.4038194186971846E-8	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999991137431837	WITHOUT_CLASSIFICATION	8.862568161421255E-7	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999997687109	WITHOUT_CLASSIFICATION	2.3128905878116745E-10	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999788062203	WITHOUT_CLASSIFICATION	2.1193779817934636E-8	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999836367200041	WITHOUT_CLASSIFICATION	1.636327999579113E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999966616152434	WITHOUT_CLASSIFICATION	3.3383847565970237E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999893268053	WITHOUT_CLASSIFICATION	1.0673194617732482E-8	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999245893	WITHOUT_CLASSIFICATION	7.541067157871058E-11	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.999966616152434	WITHOUT_CLASSIFICATION	3.3383847565970237E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999991104704	WITHOUT_CLASSIFICATION	8.895296290627023E-10	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999995799923994	WITHOUT_CLASSIFICATION	4.200076005357088E-7	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.9999997905132861	WITHOUT_CLASSIFICATION	2.0948671381777595E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999997503277874	WITHOUT_CLASSIFICATION	2.496722125380924E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999863585282235	WITHOUT_CLASSIFICATION	1.3641471776480473E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999962076111599	WITHOUT_CLASSIFICATION	3.792388840198072E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999962076111599	WITHOUT_CLASSIFICATION	3.792388840198072E-6	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999915831710954	WITHOUT_CLASSIFICATION	8.416828904656101E-6	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9999582255119502	WITHOUT_CLASSIFICATION	4.177448804981684E-5	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999648084089745	WITHOUT_CLASSIFICATION	3.5191591025460305E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999987490587378	WITHOUT_CLASSIFICATION	1.2509412621973224E-6	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999989052377123	WITHOUT_CLASSIFICATION	1.0947622877055932E-6	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999928645016903	WITHOUT_CLASSIFICATION	7.135498309643629E-6	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.999999979550399	WITHOUT_CLASSIFICATION	2.044960097605938E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999518061872518	WITHOUT_CLASSIFICATION	4.819381274828412E-5	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999784168068484	WITHOUT_CLASSIFICATION	2.15831931517109E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999977124708	WITHOUT_CLASSIFICATION	2.28752915648505E-9	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992752001835	WITHOUT_CLASSIFICATION	7.247998164480515E-7	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992752001835	WITHOUT_CLASSIFICATION	7.247998164480515E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999628471674	WITHOUT_CLASSIFICATION	3.71528326140112E-8	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999865610852	WITHOUT_CLASSIFICATION	1.343891468753415E-8	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9990093042987039	WITHOUT_CLASSIFICATION	9.90695701296103E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999992752001835	WITHOUT_CLASSIFICATION	7.247998164480515E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999628471674	WITHOUT_CLASSIFICATION	3.71528326140112E-8	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999999628471674	WITHOUT_CLASSIFICATION	3.71528326140112E-8	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9995296624939456	WITHOUT_CLASSIFICATION	4.703375060543279E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.999813930735168	WITHOUT_CLASSIFICATION	1.8606926483204198E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999998124615	WITHOUT_CLASSIFICATION	1.875384971312958E-10	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999934055162663	WITHOUT_CLASSIFICATION	6.594483733754839E-6	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.998621864439749	WITHOUT_CLASSIFICATION	0.0013781355602510285	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.998621864439749	WITHOUT_CLASSIFICATION	0.0013781355602510285	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999993682364146	WITHOUT_CLASSIFICATION	6.31763585387016E-7	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9983725039303287	WITHOUT_CLASSIFICATION	0.0016274960696712798	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999981319734133	WITHOUT_CLASSIFICATION	1.8680265868442382E-6	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999800992786614	WITHOUT_CLASSIFICATION	1.9900721338660078E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999800992786614	WITHOUT_CLASSIFICATION	1.9900721338660078E-5	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999789347805917	WITHOUT_CLASSIFICATION	2.106521940818741E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989960883159003	WITHOUT_CLASSIFICATION	0.001003911684099768	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9762362511634659	WITHOUT_CLASSIFICATION	0.023763748836533993	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.99999998782157	WITHOUT_CLASSIFICATION	1.2178430147180024E-8	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999942654562245	WITHOUT_CLASSIFICATION	5.734543775561119E-6	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.999999912561566	WITHOUT_CLASSIFICATION	8.743843407309788E-8	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999977043968167	WITHOUT_CLASSIFICATION	2.2956031833868987E-6	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9989185172538552	WITHOUT_CLASSIFICATION	0.0010814827461448511	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999522383662415	WITHOUT_CLASSIFICATION	4.776163375843431E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9762362511634659	WITHOUT_CLASSIFICATION	0.023763748836533993	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9996258146308012	WITHOUT_CLASSIFICATION	3.7418536919869806E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999743043377989	WITHOUT_CLASSIFICATION	2.56956622011744E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999743043377989	WITHOUT_CLASSIFICATION	2.56956622011744E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9995050880574409	WITHOUT_CLASSIFICATION	4.949119425590609E-4	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9999132616785052	WITHOUT_CLASSIFICATION	8.673832149467114E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.7260228062001969	WITHOUT_CLASSIFICATION	0.2739771937998032	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9999803087364657	WITHOUT_CLASSIFICATION	1.969126353424632E-5	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.999862276943188	WITHOUT_CLASSIFICATION	1.3772305681196694E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.9970334001455947	WITHOUT_CLASSIFICATION	0.002966599854405259	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9999423810773028	WITHOUT_CLASSIFICATION	5.761892269728724E-5	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999909107611581	WITHOUT_CLASSIFICATION	9.089238841930233E-6	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999953432195	WITHOUT_CLASSIFICATION	4.6567804655130935E-9	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999953432195	WITHOUT_CLASSIFICATION	4.6567804655130935E-9	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999607074298212	WITHOUT_CLASSIFICATION	3.9292570178873214E-5	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999878443785271	WITHOUT_CLASSIFICATION	1.2155621472957738E-5	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999991586951621	WITHOUT_CLASSIFICATION	8.41304837857878E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.9999997968143073	WITHOUT_CLASSIFICATION	2.031856928194991E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999778477124299	WITHOUT_CLASSIFICATION	2.2152287570068534E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.999998060185485	WITHOUT_CLASSIFICATION	1.9398145150537704E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.999995376452268	WITHOUT_CLASSIFICATION	4.623547732058002E-6	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999959275710348	WITHOUT_CLASSIFICATION	4.0724289650995045E-6	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999994032977726	WITHOUT_CLASSIFICATION	5.967022274312302E-7	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999983759309986	WITHOUT_CLASSIFICATION	1.6240690014091185E-6	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9999066143710618	WITHOUT_CLASSIFICATION	9.33856289381655E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999702168019867	WITHOUT_CLASSIFICATION	2.9783198013321918E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999992313903716	WITHOUT_CLASSIFICATION	7.686096284481744E-7	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999964770470303	WITHOUT_CLASSIFICATION	3.5229529696039416E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997244307589	WITHOUT_CLASSIFICATION	2.755692410121437E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997244307589	WITHOUT_CLASSIFICATION	2.755692410121437E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999991254038136	WITHOUT_CLASSIFICATION	8.745961863465771E-7	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9984056117822435	WITHOUT_CLASSIFICATION	0.0015943882177563984	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999949597396243	WITHOUT_CLASSIFICATION	5.040260375711554E-6	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.999998051465283	WITHOUT_CLASSIFICATION	1.948534717058481E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999975311887375	WITHOUT_CLASSIFICATION	2.4688112624934E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9999767056184767	WITHOUT_CLASSIFICATION	2.3294381523281694E-5	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996498886622	WITHOUT_CLASSIFICATION	3.5011133774133815E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9974075600822334	WITHOUT_CLASSIFICATION	0.002592439917766506	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999983254200705	WITHOUT_CLASSIFICATION	1.6745799294190064E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999979645890031	WITHOUT_CLASSIFICATION	2.0354109968649135E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999998127179285	WITHOUT_CLASSIFICATION	1.8728207152585538E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999835001815792	WITHOUT_CLASSIFICATION	1.6499818420869394E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.9999933359386134	WITHOUT_CLASSIFICATION	6.6640613865786546E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980222347813	WITHOUT_CLASSIFICATION	1.9777652187674197E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999999899263484	WITHOUT_CLASSIFICATION	1.0073651552413761E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999994052752181	WITHOUT_CLASSIFICATION	5.947247817345048E-7	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.9999992307863448	WITHOUT_CLASSIFICATION	7.692136552096599E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9582893128444516	WITHOUT_CLASSIFICATION	0.0417106871555483	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.9999561714171366	WITHOUT_CLASSIFICATION	4.382858286336702E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999992533055291	WITHOUT_CLASSIFICATION	7.466944709627711E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999778477124299	WITHOUT_CLASSIFICATION	2.2152287570068534E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999778477124299	WITHOUT_CLASSIFICATION	2.2152287570068534E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999702168019867	WITHOUT_CLASSIFICATION	2.9783198013321918E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999997244307589	WITHOUT_CLASSIFICATION	2.755692410121437E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980222347813	WITHOUT_CLASSIFICATION	1.9777652187674197E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999998426858504	WITHOUT_CLASSIFICATION	1.5731414955907577E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999959116643177	WITHOUT_CLASSIFICATION	4.0883356823198E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999299263520929	WITHOUT_CLASSIFICATION	7.007364790714488E-5	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999749443825343	WITHOUT_CLASSIFICATION	2.5055617465719264E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999996368355423	WITHOUT_CLASSIFICATION	3.631644577545447E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999773184407	WITHOUT_CLASSIFICATION	2.268155930419217E-8	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999984510216509	WITHOUT_CLASSIFICATION	1.548978349192836E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999956165365682	WITHOUT_CLASSIFICATION	4.383463431789441E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.9999974617318502	WITHOUT_CLASSIFICATION	2.5382681497614613E-6	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999872774637668	WITHOUT_CLASSIFICATION	1.272253623319405E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999986604454688	WITHOUT_CLASSIFICATION	1.339554531212468E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.999986604454688	WITHOUT_CLASSIFICATION	1.339554531212468E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999992670284229	WITHOUT_CLASSIFICATION	7.329715771730898E-7	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999994699511199	WITHOUT_CLASSIFICATION	5.300488801516396E-7	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9995984116973886	WITHOUT_CLASSIFICATION	4.015883026113705E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999972484484329	WITHOUT_CLASSIFICATION	2.751551567107811E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999995468693161	WITHOUT_CLASSIFICATION	4.5313068384893726E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999996765566889	WITHOUT_CLASSIFICATION	3.2344331115950386E-7	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999855447649181	WITHOUT_CLASSIFICATION	1.4455235081981069E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999899671754	WITHOUT_CLASSIFICATION	1.0032824551934594E-8	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999985218002142	WITHOUT_CLASSIFICATION	1.4781997858021204E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993991015741	WITHOUT_CLASSIFICATION	6.008984259780255E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999993991015741	WITHOUT_CLASSIFICATION	6.008984259780255E-7	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999999192503568	WITHOUT_CLASSIFICATION	8.074964311058889E-8	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.999958139695459	WITHOUT_CLASSIFICATION	4.1860304540929125E-5	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.999999882711648	WITHOUT_CLASSIFICATION	1.1728835193501752E-7	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999370754904	WITHOUT_CLASSIFICATION	6.29245095878778E-8	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999875877192813	WITHOUT_CLASSIFICATION	1.241228071860461E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.9999778477124299	WITHOUT_CLASSIFICATION	2.2152287570068534E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.9999702168019867	WITHOUT_CLASSIFICATION	2.9783198013321918E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999964770470303	WITHOUT_CLASSIFICATION	3.5229529696039416E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980222347813	WITHOUT_CLASSIFICATION	1.9777652187674197E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999980222347813	WITHOUT_CLASSIFICATION	1.9777652187674197E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999855315662	WITHOUT_CLASSIFICATION	1.4468433854129679E-8	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999855315662	WITHOUT_CLASSIFICATION	1.4468433854129679E-8	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999996439939113	WITHOUT_CLASSIFICATION	3.5600608873018414E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999987838807889	WITHOUT_CLASSIFICATION	1.2161192110851522E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999987838807889	WITHOUT_CLASSIFICATION	1.2161192110851522E-6	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999840356142901	WITHOUT_CLASSIFICATION	1.5964385709918565E-5	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999700579278141	WITHOUT_CLASSIFICATION	2.9942072185941888E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999985845178397	WITHOUT_CLASSIFICATION	1.4154821602149542E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.9999975003919305	WITHOUT_CLASSIFICATION	2.4996080694861123E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999998035483432	WITHOUT_CLASSIFICATION	1.9645165689638057E-7	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999737694986888	WITHOUT_CLASSIFICATION	2.6230501311171507E-5	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999737694986888	WITHOUT_CLASSIFICATION	2.6230501311171507E-5	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9998238952556303	WITHOUT_CLASSIFICATION	1.761047443695932E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999985847228732	WITHOUT_CLASSIFICATION	1.4152771267784615E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999996127358771	WITHOUT_CLASSIFICATION	3.8726412287991065E-7	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999838324572862	WITHOUT_CLASSIFICATION	1.616754271384752E-5	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999999323390363	WITHOUT_CLASSIFICATION	6.766096374954357E-8	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9999578645568602	WITHOUT_CLASSIFICATION	4.2135443139675754E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999975457607393	WITHOUT_CLASSIFICATION	2.4542392607963205E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999979852939272	WITHOUT_CLASSIFICATION	2.0147060726544405E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999979852939272	WITHOUT_CLASSIFICATION	2.0147060726544405E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999964238267188	WITHOUT_CLASSIFICATION	3.5761732813209074E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999964238267188	WITHOUT_CLASSIFICATION	3.5761732813209074E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999995288033717	WITHOUT_CLASSIFICATION	4.711966283054353E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999995288033717	WITHOUT_CLASSIFICATION	4.711966283054353E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999907398932	WITHOUT_CLASSIFICATION	9.26010684570294E-9	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999907398932	WITHOUT_CLASSIFICATION	9.26010684570294E-9	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999737694986888	WITHOUT_CLASSIFICATION	2.6230501311171507E-5	DESIGN
// double	WITHOUT_CLASSIFICATION	0.9999975457607393	WITHOUT_CLASSIFICATION	2.4542392607963205E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999979852939272	WITHOUT_CLASSIFICATION	2.0147060726544405E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999979852939272	WITHOUT_CLASSIFICATION	2.0147060726544405E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999964238267188	WITHOUT_CLASSIFICATION	3.5761732813209074E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999995288033717	WITHOUT_CLASSIFICATION	4.711966283054353E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.999995288033717	WITHOUT_CLASSIFICATION	4.711966283054353E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999907398932	WITHOUT_CLASSIFICATION	9.26010684570294E-9	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999327176174531	WITHOUT_CLASSIFICATION	6.728238254699272E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999294321772944	WITHOUT_CLASSIFICATION	7.056782270567411E-5	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9998940906812317	WITHOUT_CLASSIFICATION	1.059093187684042E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999992203886064	WITHOUT_CLASSIFICATION	7.796113936361482E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9996921663160349	WITHOUT_CLASSIFICATION	3.0783368396512334E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999879889192227	WITHOUT_CLASSIFICATION	1.201108077726317E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9952714642309318	WITHOUT_CLASSIFICATION	0.0047285357690682464	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.5482648414191108	WITHOUT_CLASSIFICATION	0.4517351585808892	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9989014966958669	WITHOUT_CLASSIFICATION	0.0010985033041330508	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999710751	WITHOUT_CLASSIFICATION	2.8924940879825324E-11	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999882742444	WITHOUT_CLASSIFICATION	1.1725755443683678E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999999049051528	WITHOUT_CLASSIFICATION	9.509484722422329E-8	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999915831710954	WITHOUT_CLASSIFICATION	8.416828904656101E-6	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999879889192227	WITHOUT_CLASSIFICATION	1.201108077726317E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999726086119999	WITHOUT_CLASSIFICATION	2.7391388000087086E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999726086119999	WITHOUT_CLASSIFICATION	2.7391388000087086E-5	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999901415466808	WITHOUT_CLASSIFICATION	9.85845331925574E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999973565973831	WITHOUT_CLASSIFICATION	2.6434026169045437E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.999973565973831	WITHOUT_CLASSIFICATION	2.6434026169045437E-5	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999972753225976	WITHOUT_CLASSIFICATION	2.7246774024424882E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999111210719042	WITHOUT_CLASSIFICATION	8.887892809584148E-5	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999420775066	WITHOUT_CLASSIFICATION	5.7922493337725306E-8	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999733609258467	WITHOUT_CLASSIFICATION	2.663907415335309E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999733609258467	WITHOUT_CLASSIFICATION	2.663907415335309E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999998187895737	WITHOUT_CLASSIFICATION	1.8121042642691467E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999994259584806	WITHOUT_CLASSIFICATION	5.74041519383478E-7	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999994259584806	WITHOUT_CLASSIFICATION	5.74041519383478E-7	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999838665611724	WITHOUT_CLASSIFICATION	1.613343882761283E-5	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999952842020366	WITHOUT_CLASSIFICATION	4.715797963376991E-6	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999957876382152	WITHOUT_CLASSIFICATION	4.212361784864075E-6	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999979651140684	WITHOUT_CLASSIFICATION	2.034885931685453E-6	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999961527895658	WITHOUT_CLASSIFICATION	3.847210434168498E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999889054766734	WITHOUT_CLASSIFICATION	1.109452332657884E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999824111830232	WITHOUT_CLASSIFICATION	1.7588816976785473E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999948749802601	WITHOUT_CLASSIFICATION	5.125019739914522E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9943266000547762	WITHOUT_CLASSIFICATION	0.005673399945223698	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999971866335461	WITHOUT_CLASSIFICATION	2.8133664538530534E-6	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999994483198623	WITHOUT_CLASSIFICATION	5.516801376362583E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999958746188883	WITHOUT_CLASSIFICATION	4.125381111635686E-6	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999993353693093	WITHOUT_CLASSIFICATION	6.646306906970788E-7	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999999612205294	WITHOUT_CLASSIFICATION	3.87794706242476E-8	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.999999969988675	WITHOUT_CLASSIFICATION	3.00113250614249E-8	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999958746188883	WITHOUT_CLASSIFICATION	4.125381111635686E-6	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999857337378724	WITHOUT_CLASSIFICATION	1.4266262127744632E-5	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998289849488	WITHOUT_CLASSIFICATION	1.7101505119890856E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999997621258718	WITHOUT_CLASSIFICATION	2.3787412819372486E-6	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999973068320491	WITHOUT_CLASSIFICATION	2.6931679508391567E-6	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999919952927866	WITHOUT_CLASSIFICATION	8.004707213353765E-6	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999988429186729	WITHOUT_CLASSIFICATION	1.1570813271507696E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.999999573768489	WITHOUT_CLASSIFICATION	4.262315109298276E-7	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999946099121908	WITHOUT_CLASSIFICATION	5.390087809120528E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999795156300896	WITHOUT_CLASSIFICATION	2.048436991040806E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999988677752589	WITHOUT_CLASSIFICATION	1.1322247410972653E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999981707050354	WITHOUT_CLASSIFICATION	1.829294964552576E-6	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999993215767226	WITHOUT_CLASSIFICATION	6.78423277515609E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999901817777982	WITHOUT_CLASSIFICATION	9.818222201828812E-6	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999824111830232	WITHOUT_CLASSIFICATION	1.7588816976785473E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999795156300896	WITHOUT_CLASSIFICATION	2.048436991040806E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999981707050354	WITHOUT_CLASSIFICATION	1.829294964552576E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999901817777982	WITHOUT_CLASSIFICATION	9.818222201828812E-6	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.999999979386326	WITHOUT_CLASSIFICATION	2.0613673918913877E-8	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999952364328699	WITHOUT_CLASSIFICATION	4.763567130152617E-6	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999955901254	WITHOUT_CLASSIFICATION	4.40987465585984E-9	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999771387717804	WITHOUT_CLASSIFICATION	2.2861228219573834E-5	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999987083101878	WITHOUT_CLASSIFICATION	1.2916898122865501E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.999999642355703	WITHOUT_CLASSIFICATION	3.5764429692828557E-7	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999717538138403	WITHOUT_CLASSIFICATION	2.8246186159827608E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9989859112020555	WITHOUT_CLASSIFICATION	0.0010140887979445648	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999982766719736	WITHOUT_CLASSIFICATION	1.7233280263579325E-6	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999997368793	WITHOUT_CLASSIFICATION	2.6312069244675376E-10	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999995236854031	WITHOUT_CLASSIFICATION	4.763145968501553E-7	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999695260732984	WITHOUT_CLASSIFICATION	3.0473926701642687E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999260076	WITHOUT_CLASSIFICATION	7.3992388032573E-11	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998332105879	WITHOUT_CLASSIFICATION	1.667894119934687E-7	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999925145745732	WITHOUT_CLASSIFICATION	7.485425426849074E-6	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999855335477759	WITHOUT_CLASSIFICATION	1.4466452224239284E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999977456447625	WITHOUT_CLASSIFICATION	2.2543552374855478E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999976273887342	WITHOUT_CLASSIFICATION	2.3726112657425625E-6	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.9999913878703841	WITHOUT_CLASSIFICATION	8.612129615877808E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999795156300896	WITHOUT_CLASSIFICATION	2.048436991040806E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999962044071068	WITHOUT_CLASSIFICATION	3.795592893276579E-6	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999991297925392	WITHOUT_CLASSIFICATION	8.70207460759181E-7	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999987601843074	WITHOUT_CLASSIFICATION	1.2398156925957288E-6	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999094890164233	WITHOUT_CLASSIFICATION	9.05109835767749E-5	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.9999987770356343	WITHOUT_CLASSIFICATION	1.222964365689863E-6	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999916031612829	WITHOUT_CLASSIFICATION	8.396838717193462E-6	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999872874226	WITHOUT_CLASSIFICATION	1.2712577400456131E-8	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999675963648	WITHOUT_CLASSIFICATION	3.24036352613267E-8	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.99998676352034	WITHOUT_CLASSIFICATION	1.3236479659889442E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999900934621302	WITHOUT_CLASSIFICATION	9.906537869680777E-6	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999982156534849	WITHOUT_CLASSIFICATION	1.7843465150654569E-6	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999995947017434	WITHOUT_CLASSIFICATION	4.052982566260003E-7	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9996985976698466	WITHOUT_CLASSIFICATION	3.0140233015335055E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999827827660399	WITHOUT_CLASSIFICATION	1.7217233960128595E-5	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999941380997905	WITHOUT_CLASSIFICATION	5.861900209377882E-6	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999487188245517	WITHOUT_CLASSIFICATION	5.128117544825708E-5	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999037986138323	WITHOUT_CLASSIFICATION	9.620138616771755E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.9999961046667977	WITHOUT_CLASSIFICATION	3.895333202330147E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999953254838987	WITHOUT_CLASSIFICATION	4.674516101290222E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999880766429245	WITHOUT_CLASSIFICATION	1.1923357075510876E-4	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999997000102	WITHOUT_CLASSIFICATION	2.999898720854496E-10	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999973672495367	WITHOUT_CLASSIFICATION	2.6327504632799186E-6	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9175712618137957	WITHOUT_CLASSIFICATION	0.08242873818620443	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9987104673914993	WITHOUT_CLASSIFICATION	0.0012895326085007334	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999386197396328	WITHOUT_CLASSIFICATION	6.138026036720897E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999386197396328	WITHOUT_CLASSIFICATION	6.138026036720897E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999953486245877	WITHOUT_CLASSIFICATION	4.651375412356302E-6	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999882007667082	WITHOUT_CLASSIFICATION	1.179923329172225E-5	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999949092942174	WITHOUT_CLASSIFICATION	5.0907057825114675E-6	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999233461110592	WITHOUT_CLASSIFICATION	7.665388894083319E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9996988088616804	WITHOUT_CLASSIFICATION	3.011911383195502E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9986155842973752	WITHOUT_CLASSIFICATION	0.0013844157026248226	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999651192572203	WITHOUT_CLASSIFICATION	3.488074277976889E-5	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999910347869088	WITHOUT_CLASSIFICATION	8.965213091210731E-6	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9998781608023152	WITHOUT_CLASSIFICATION	1.2183919768485737E-4	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999811311300378	WITHOUT_CLASSIFICATION	1.8868869962113425E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9999648579553705	WITHOUT_CLASSIFICATION	3.514204462950072E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9998684643421077	WITHOUT_CLASSIFICATION	1.315356578923566E-4	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9924787751452303	WITHOUT_CLASSIFICATION	0.007521224854769722	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999999239686223	WITHOUT_CLASSIFICATION	7.603137766809266E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999079160125415	WITHOUT_CLASSIFICATION	9.208398745847509E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998784305459959	WITHOUT_CLASSIFICATION	1.2156945400400079E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999969701854554	WITHOUT_CLASSIFICATION	3.029814544493002E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999983738230379	WITHOUT_CLASSIFICATION	1.6261769620443897E-6	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9848565983500642	WITHOUT_CLASSIFICATION	0.015143401649935863	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9986187404205583	WITHOUT_CLASSIFICATION	0.0013812595794416825	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999753848544526	WITHOUT_CLASSIFICATION	2.461514554744125E-5	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9999753848544526	WITHOUT_CLASSIFICATION	2.461514554744125E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.999924639591398	WITHOUT_CLASSIFICATION	7.536040860194587E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.999924639591398	WITHOUT_CLASSIFICATION	7.536040860194587E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9175712618137957	WITHOUT_CLASSIFICATION	0.08242873818620443	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999997209942543	WITHOUT_CLASSIFICATION	2.790057456784972E-7	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998272845571814	WITHOUT_CLASSIFICATION	1.7271544281862936E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999781242143	WITHOUT_CLASSIFICATION	2.18757857085439E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999607074298212	WITHOUT_CLASSIFICATION	3.9292570178873214E-5	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998272845571814	WITHOUT_CLASSIFICATION	1.7271544281862936E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999999781242143	WITHOUT_CLASSIFICATION	2.18757857085439E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990006378396	WITHOUT_CLASSIFICATION	9.993621602798369E-7	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999973828402319	WITHOUT_CLASSIFICATION	2.617159768240848E-6	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999862165454201	WITHOUT_CLASSIFICATION	1.3783454579882224E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999957629118567	WITHOUT_CLASSIFICATION	4.237088143365473E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.998875791801772	WITHOUT_CLASSIFICATION	0.001124208198227957	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9360015443645414	WITHOUT_CLASSIFICATION	0.06399845563545845	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999993542741217	WITHOUT_CLASSIFICATION	6.457258783241976E-7	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999930301497276	WITHOUT_CLASSIFICATION	6.969850272284356E-6	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9994718724404533	WITHOUT_CLASSIFICATION	5.281275595466169E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999997731721	WITHOUT_CLASSIFICATION	2.2682785024502945E-10	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999998610316531	WITHOUT_CLASSIFICATION	1.3896834692784533E-7	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999965946252931	WITHOUT_CLASSIFICATION	3.4053747069363606E-6	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999998078712511	WITHOUT_CLASSIFICATION	1.921287488436451E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999951455691286	WITHOUT_CLASSIFICATION	4.8544308713856434E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999607074298212	WITHOUT_CLASSIFICATION	3.9292570178873214E-5	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.999985062334238	WITHOUT_CLASSIFICATION	1.4937665762087359E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999666469195663	WITHOUT_CLASSIFICATION	3.335308043374082E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999666469195663	WITHOUT_CLASSIFICATION	3.335308043374082E-5	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9996466204460127	WITHOUT_CLASSIFICATION	3.533795539873362E-4	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990006378396	WITHOUT_CLASSIFICATION	9.993621602798369E-7	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9992267153088309	WITHOUT_CLASSIFICATION	7.732846911690448E-4	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9952158374440464	DESIGN	0.004784162555953567	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9159824953806007	WITHOUT_CLASSIFICATION	0.08401750461939927	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998032116911	WITHOUT_CLASSIFICATION	1.9678830882240396E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9955673934806362	WITHOUT_CLASSIFICATION	0.004432606519363875	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990006378396	WITHOUT_CLASSIFICATION	9.993621602798369E-7	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999998032116911	WITHOUT_CLASSIFICATION	1.9678830882240396E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9955673934806362	WITHOUT_CLASSIFICATION	0.004432606519363875	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.9389577411688145	WITHOUT_CLASSIFICATION	0.061042258831185504	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999004072581	WITHOUT_CLASSIFICATION	9.959274191325043E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999164834769	WITHOUT_CLASSIFICATION	8.351652312611289E-8	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990006378396	WITHOUT_CLASSIFICATION	9.993621602798369E-7	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999990006378396	WITHOUT_CLASSIFICATION	9.993621602798369E-7	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.999990355648737	WITHOUT_CLASSIFICATION	9.644351262961763E-6	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999803461323896	WITHOUT_CLASSIFICATION	1.9653867610447688E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9999341675806074	WITHOUT_CLASSIFICATION	6.583241939263901E-5	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.9999866193834317	WITHOUT_CLASSIFICATION	1.3380616568283118E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999995361442128	WITHOUT_CLASSIFICATION	4.6385578717841366E-7	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999994774689	WITHOUT_CLASSIFICATION	5.225311183710138E-10	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999999993474636	WITHOUT_CLASSIFICATION	6.525363979489005E-9	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9991825913043793	WITHOUT_CLASSIFICATION	8.174086956207021E-4	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999752594774854	WITHOUT_CLASSIFICATION	2.474052251451772E-5	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9998678301315589	WITHOUT_CLASSIFICATION	1.3216986844112223E-4	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999970141529007	WITHOUT_CLASSIFICATION	2.9858470994515936E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.999996405486347	WITHOUT_CLASSIFICATION	3.59451365294182E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999978690283408	WITHOUT_CLASSIFICATION	2.1309716593021597E-6	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9988736041920133	WITHOUT_CLASSIFICATION	0.0011263958079866015	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998375363589	WITHOUT_CLASSIFICATION	1.624636411515881E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9995714992351131	WITHOUT_CLASSIFICATION	4.28500764886957E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.998809740793598	WITHOUT_CLASSIFICATION	0.0011902592064020388	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9983765801349568	WITHOUT_CLASSIFICATION	0.0016234198650432676	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9922354602110547	WITHOUT_CLASSIFICATION	0.007764539788945273	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999214969354	WITHOUT_CLASSIFICATION	7.850306457764785E-8	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.999992085159359	WITHOUT_CLASSIFICATION	7.914840640987011E-6	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9997578535805339	WITHOUT_CLASSIFICATION	2.4214641946610047E-4	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9997578535805339	WITHOUT_CLASSIFICATION	2.4214641946610047E-4	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.998809740793598	WITHOUT_CLASSIFICATION	0.0011902592064020388	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999993439386974	WITHOUT_CLASSIFICATION	6.560613026675845E-7	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9959875339914758	WITHOUT_CLASSIFICATION	0.004012466008524207	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.585430714638485	WITHOUT_CLASSIFICATION	0.41456928536151505	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999998988544024	WITHOUT_CLASSIFICATION	1.0114559750435266E-7	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999624478614582	WITHOUT_CLASSIFICATION	3.7552138541776374E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999999794953168	WITHOUT_CLASSIFICATION	2.050468319553707E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9972879875472435	WITHOUT_CLASSIFICATION	0.0027120124527564666	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9999775729814583	WITHOUT_CLASSIFICATION	2.2427018541700765E-5	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998652647	WITHOUT_CLASSIFICATION	1.3473529127355602E-10	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999992017948847	WITHOUT_CLASSIFICATION	7.982051154177149E-7	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999990582262835	WITHOUT_CLASSIFICATION	9.417737164710916E-7	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999860604158951	WITHOUT_CLASSIFICATION	1.3939584104813621E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999921561182563	WITHOUT_CLASSIFICATION	7.843881743667092E-6	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999949151335	WITHOUT_CLASSIFICATION	5.08486648864213E-9	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999955358017	WITHOUT_CLASSIFICATION	4.464198316170919E-9	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9994519308931022	WITHOUT_CLASSIFICATION	5.480691068976979E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999980906935709	WITHOUT_CLASSIFICATION	1.9093064291961944E-6	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999843846353633	WITHOUT_CLASSIFICATION	1.56153646367467E-5	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999388278720479	WITHOUT_CLASSIFICATION	6.117212795209372E-5	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9999763967607596	WITHOUT_CLASSIFICATION	2.3603239240416195E-5	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.999991275393068	WITHOUT_CLASSIFICATION	8.72460693207528E-6	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9995489395110166	WITHOUT_CLASSIFICATION	4.5106048898338073E-4	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999881777629732	WITHOUT_CLASSIFICATION	1.182223702680704E-5	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999210951420533	WITHOUT_CLASSIFICATION	7.890485794677958E-5	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977509590663	WITHOUT_CLASSIFICATION	2.249040933677098E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999395723867373	WITHOUT_CLASSIFICATION	6.042761326289389E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964011016498	WITHOUT_CLASSIFICATION	3.5988983502941586E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672354332715	WITHOUT_CLASSIFICATION	3.2764566728495004E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999730824165916	WITHOUT_CLASSIFICATION	2.6917583408449443E-5	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999986293757026	WITHOUT_CLASSIFICATION	1.3706242973903653E-6	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9998191037402361	WITHOUT_CLASSIFICATION	1.8089625976379334E-4	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.988328756787288	WITHOUT_CLASSIFICATION	0.011671243212711988	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995530740006	WITHOUT_CLASSIFICATION	4.4692599943941855E-7	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899325566679	WITHOUT_CLASSIFICATION	1.0067443332062713E-5	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878780994438	WITHOUT_CLASSIFICATION	1.2121900556157315E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998965519494	WITHOUT_CLASSIFICATION	1.0344805052923259E-7	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998960283494995	WITHOUT_CLASSIFICATION	1.0397165050045222E-4	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962641146624	WITHOUT_CLASSIFICATION	3.7358853376146416E-6	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946723157095	WITHOUT_CLASSIFICATION	5.327684290423817E-6	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884411946318	WITHOUT_CLASSIFICATION	1.1558805368147677E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999988148496032	WITHOUT_CLASSIFICATION	1.1851503967766896E-6	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994199732543	WITHOUT_CLASSIFICATION	5.800267457136599E-7	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.7251899209943578	WITHOUT_CLASSIFICATION	0.2748100790056422	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999361815667338	WITHOUT_CLASSIFICATION	6.381843326613527E-5	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999932959831	WITHOUT_CLASSIFICATION	6.704016908506349E-9	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999318552645416	WITHOUT_CLASSIFICATION	6.814473545839233E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9999706781118116	WITHOUT_CLASSIFICATION	2.9321888188367996E-5	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999999809228053	WITHOUT_CLASSIFICATION	1.907719468829007E-7	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.8588901706725611	DESIGN	0.1411098293274389	WITHOUT_CLASSIFICATION
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999992826759108	WITHOUT_CLASSIFICATION	7.173240890964791E-7	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999995580962335	WITHOUT_CLASSIFICATION	4.419037664800182E-7	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999997869868643	WITHOUT_CLASSIFICATION	2.1301313569733683E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9998404261988132	WITHOUT_CLASSIFICATION	1.5957380118672852E-4	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999936231498502	WITHOUT_CLASSIFICATION	6.376850149893119E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999456274705323	WITHOUT_CLASSIFICATION	5.4372529467734366E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9994778940556837	WITHOUT_CLASSIFICATION	5.221059443163584E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9998679838389289	WITHOUT_CLASSIFICATION	1.320161610710775E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9999745472209441	WITHOUT_CLASSIFICATION	2.5452779055861203E-5	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9998152977873576	WITHOUT_CLASSIFICATION	1.847022126424284E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989979482508	WITHOUT_CLASSIFICATION	1.0020517493079137E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999979800028304	WITHOUT_CLASSIFICATION	2.01999716961455E-6	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984089879366	WITHOUT_CLASSIFICATION	1.5910120634586475E-6	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929194406351	WITHOUT_CLASSIFICATION	7.080559364995813E-6	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.996113319177139	WITHOUT_CLASSIFICATION	0.0038866808228609647	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999998735083	WITHOUT_CLASSIFICATION	1.264916110143181E-10	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999937229703351	WITHOUT_CLASSIFICATION	6.277029664900008E-6	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999998781666761	WITHOUT_CLASSIFICATION	1.218333238532229E-7	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992373078651	WITHOUT_CLASSIFICATION	7.626921350259315E-7	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999923723786973	WITHOUT_CLASSIFICATION	7.627621302717512E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9808391140551594	WITHOUT_CLASSIFICATION	0.019160885944840545	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999934531813192	WITHOUT_CLASSIFICATION	6.546818680733285E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998263186685	WITHOUT_CLASSIFICATION	1.736813314751123E-7	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999941023115345	WITHOUT_CLASSIFICATION	5.8976884654425E-6	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9993987819169929	WITHOUT_CLASSIFICATION	6.012180830070577E-4	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999787785252509	WITHOUT_CLASSIFICATION	2.1221474749112224E-5	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9872445793056768	WITHOUT_CLASSIFICATION	0.012755420694323203	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999318552645416	WITHOUT_CLASSIFICATION	6.814473545839233E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9990801337114511	WITHOUT_CLASSIFICATION	9.198662885487935E-4	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996760308463	WITHOUT_CLASSIFICATION	3.2396915379719433E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999999991680479	WITHOUT_CLASSIFICATION	8.319520936695832E-9	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999916395885806	WITHOUT_CLASSIFICATION	8.360411419304142E-6	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999986388367608	WITHOUT_CLASSIFICATION	1.3611632393267764E-6	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999979925676203	WITHOUT_CLASSIFICATION	2.0074323796024372E-6	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9970496695276159	WITHOUT_CLASSIFICATION	0.0029503304723841775	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995291333406124	WITHOUT_CLASSIFICATION	4.708666593875217E-4	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999984451636751	WITHOUT_CLASSIFICATION	1.5548363248592526E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999980999739257	WITHOUT_CLASSIFICATION	1.9000260742468181E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999946911340158	WITHOUT_CLASSIFICATION	5.308865984236107E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999980211600896	WITHOUT_CLASSIFICATION	1.9788399103999115E-6	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999794840239749	WITHOUT_CLASSIFICATION	2.051597602512805E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9893833465620606	WITHOUT_CLASSIFICATION	0.010616653437939308	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999956336603691	WITHOUT_CLASSIFICATION	4.366339630942371E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999358342359531	WITHOUT_CLASSIFICATION	6.416576404687832E-5	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.999819297418036	WITHOUT_CLASSIFICATION	1.8070258196393283E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999901253009249	WITHOUT_CLASSIFICATION	9.874699075067246E-6	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999288705266	WITHOUT_CLASSIFICATION	7.112947344821877E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.999999910991232	WITHOUT_CLASSIFICATION	8.900876808083292E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999965892307028	WITHOUT_CLASSIFICATION	3.41076929713751E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999324439948712	WITHOUT_CLASSIFICATION	6.755600512870928E-5	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999638514581424	WITHOUT_CLASSIFICATION	3.614854185759011E-5	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999997784933682	WITHOUT_CLASSIFICATION	2.2150663178239082E-7	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9999425070578057	WITHOUT_CLASSIFICATION	5.7492942194244456E-5	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999999252732303	WITHOUT_CLASSIFICATION	7.472676966555912E-8	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9417388332591432	WITHOUT_CLASSIFICATION	0.058261166740856914	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999995930125618	WITHOUT_CLASSIFICATION	4.0698743823319885E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998132090931	WITHOUT_CLASSIFICATION	1.867909068258963E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999871993150345	WITHOUT_CLASSIFICATION	1.2800684965575644E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999318552645416	WITHOUT_CLASSIFICATION	6.814473545839233E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9488797026742395	WITHOUT_CLASSIFICATION	0.05112029732576042	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999955728745494	WITHOUT_CLASSIFICATION	4.427125450540004E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9988503476483458	WITHOUT_CLASSIFICATION	0.0011496523516541697	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999318552645416	WITHOUT_CLASSIFICATION	6.814473545839233E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999925036817735	WITHOUT_CLASSIFICATION	7.49631822650462E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999965892307028	WITHOUT_CLASSIFICATION	3.41076929713751E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9948192190580101	WITHOUT_CLASSIFICATION	0.005180780941989956	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.979131857647917	WITHOUT_CLASSIFICATION	0.02086814235208303	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.7023413430195468	WITHOUT_CLASSIFICATION	0.29765865698045324	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999980999739257	WITHOUT_CLASSIFICATION	1.9000260742468181E-6	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999946911340158	WITHOUT_CLASSIFICATION	5.308865984236107E-6	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999980211600896	WITHOUT_CLASSIFICATION	1.9788399103999115E-6	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999997319216	WITHOUT_CLASSIFICATION	2.68078410518781E-10	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999789013424876	WITHOUT_CLASSIFICATION	2.1098657512472325E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999997349304426	WITHOUT_CLASSIFICATION	2.6506955745094124E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999997029244384	WITHOUT_CLASSIFICATION	2.9707556159957497E-7	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999968351423	WITHOUT_CLASSIFICATION	3.1648577672853313E-9	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999318552645416	WITHOUT_CLASSIFICATION	6.814473545839233E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999794840239749	WITHOUT_CLASSIFICATION	2.051597602512805E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9893833465620606	WITHOUT_CLASSIFICATION	0.010616653437939308	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997579126677355	WITHOUT_CLASSIFICATION	2.4208733226449114E-4	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984224096303	WITHOUT_CLASSIFICATION	1.5775903695866076E-6	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999998579034206	WITHOUT_CLASSIFICATION	1.4209657948793358E-7	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999890991021	WITHOUT_CLASSIFICATION	1.0900897974553861E-8	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9994997791435783	WITHOUT_CLASSIFICATION	5.002208564216673E-4	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9991017418691219	WITHOUT_CLASSIFICATION	8.982581308781772E-4	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884411946318	WITHOUT_CLASSIFICATION	1.1558805368147677E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9978823129236946	WITHOUT_CLASSIFICATION	0.00211768707630546	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9948014668995417	WITHOUT_CLASSIFICATION	0.005198533100458339	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9974464174731574	WITHOUT_CLASSIFICATION	0.0025535825268426368	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999995352572032	WITHOUT_CLASSIFICATION	4.647427967313903E-7	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999397720523	WITHOUT_CLASSIFICATION	6.022794780326872E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964011016498	WITHOUT_CLASSIFICATION	3.5988983502941586E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672354332715	WITHOUT_CLASSIFICATION	3.2764566728495004E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999899325566679	WITHOUT_CLASSIFICATION	1.0067443332062713E-5	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.9999999397720523	WITHOUT_CLASSIFICATION	6.022794780326872E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9998611526963105	WITHOUT_CLASSIFICATION	1.3884730368953928E-4	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999993808551465	WITHOUT_CLASSIFICATION	6.191448534589307E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919635339075	WITHOUT_CLASSIFICATION	8.036466092569223E-6	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988283061191	WITHOUT_CLASSIFICATION	1.1716938809287602E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999969897223162	WITHOUT_CLASSIFICATION	3.0102776837366275E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.999614481961651	WITHOUT_CLASSIFICATION	3.855180383490359E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878780994438	WITHOUT_CLASSIFICATION	1.2121900556157315E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962641146624	WITHOUT_CLASSIFICATION	3.7358853376146416E-6	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998263186685	WITHOUT_CLASSIFICATION	1.736813314751123E-7	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9971530334273077	WITHOUT_CLASSIFICATION	0.002846966572692307	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9997345436605211	WITHOUT_CLASSIFICATION	2.6545633947893467E-4	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999802321196	WITHOUT_CLASSIFICATION	1.9767880439244274E-8	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999865748101269	WITHOUT_CLASSIFICATION	1.3425189873010455E-5	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999381123398	WITHOUT_CLASSIFICATION	6.188766020156502E-8	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999934625279	WITHOUT_CLASSIFICATION	6.537472080601133E-9	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999355826118035	WITHOUT_CLASSIFICATION	6.441738819643812E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999998652647	WITHOUT_CLASSIFICATION	1.3473529127355602E-10	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999960212536692	WITHOUT_CLASSIFICATION	3.978746330843614E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999926882529088	WITHOUT_CLASSIFICATION	7.311747091160025E-6	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999976863132837	WITHOUT_CLASSIFICATION	2.3136867162594314E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999982603073573	WITHOUT_CLASSIFICATION	1.7396926427895512E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999996593526341	WITHOUT_CLASSIFICATION	3.4064736589097495E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9996321509311455	WITHOUT_CLASSIFICATION	3.678490688544811E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999980697988328	WITHOUT_CLASSIFICATION	1.9302011672061818E-5	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999696024309248	WITHOUT_CLASSIFICATION	3.0397569075271393E-5	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996745602999	WITHOUT_CLASSIFICATION	3.2543970009970547E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9999248840763849	WITHOUT_CLASSIFICATION	7.511592361512015E-5	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9999707098247108	WITHOUT_CLASSIFICATION	2.929017528921746E-5	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999990593611174	WITHOUT_CLASSIFICATION	9.406388825640937E-7	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999841517947	WITHOUT_CLASSIFICATION	1.5848205300141045E-7	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999996945660093	WITHOUT_CLASSIFICATION	3.054339906900122E-7	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998680439451	WITHOUT_CLASSIFICATION	1.319560548943026E-7	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9999861243893206	WITHOUT_CLASSIFICATION	1.3875610679415781E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999930663850051	WITHOUT_CLASSIFICATION	6.933614994967422E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998989302846	WITHOUT_CLASSIFICATION	1.0106971539444E-6	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9988439006412198	WITHOUT_CLASSIFICATION	0.0011560993587801682	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999977915885122	WITHOUT_CLASSIFICATION	2.2084114879190047E-6	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999964235458612	WITHOUT_CLASSIFICATION	3.576454138896194E-6	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9985285464495781	WITHOUT_CLASSIFICATION	0.001471453550421903	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999995956874914	WITHOUT_CLASSIFICATION	4.0431250861488593E-7	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999980965795318	WITHOUT_CLASSIFICATION	1.9034204682108576E-6	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.9999980467493359	WITHOUT_CLASSIFICATION	1.953250664199875E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9994408007835265	WITHOUT_CLASSIFICATION	5.59199216473616E-4	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9987996140362737	WITHOUT_CLASSIFICATION	0.0012003859637262865	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999239868161	WITHOUT_CLASSIFICATION	7.601318388105725E-8	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999254494698	WITHOUT_CLASSIFICATION	7.455053022746614E-8	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999617201458916	WITHOUT_CLASSIFICATION	3.827985410842333E-5	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999999242350387	WITHOUT_CLASSIFICATION	7.57649612914081E-7	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9969427553884652	WITHOUT_CLASSIFICATION	0.0030572446115347436	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9973948160470426	WITHOUT_CLASSIFICATION	0.002605183952957336	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999999752494624	WITHOUT_CLASSIFICATION	2.4750537558855093E-8	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999984022635672	WITHOUT_CLASSIFICATION	1.5977364328348312E-6	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999996613647218	WITHOUT_CLASSIFICATION	3.3863527809681474E-7	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998735935858	WITHOUT_CLASSIFICATION	1.2640641427811296E-7	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998454906537924	WITHOUT_CLASSIFICATION	1.5450934620757305E-4	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999498781462	WITHOUT_CLASSIFICATION	5.0121853860085295E-8	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999999823661259	WITHOUT_CLASSIFICATION	1.76338740679055E-8	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9911881739441211	WITHOUT_CLASSIFICATION	0.008811826055878961	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999974103403864	WITHOUT_CLASSIFICATION	2.589659613524371E-6	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9803928489015237	WITHOUT_CLASSIFICATION	0.01960715109847629	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999010861583	WITHOUT_CLASSIFICATION	9.891384169773059E-8	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.999780522680417	WITHOUT_CLASSIFICATION	2.1947731958306684E-4	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9957866070583032	WITHOUT_CLASSIFICATION	0.004213392941696712	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999973233083487	WITHOUT_CLASSIFICATION	2.676691651347401E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999999511462501	WITHOUT_CLASSIFICATION	4.885374985537967E-8	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999993634194954	WITHOUT_CLASSIFICATION	6.365805047102865E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.9999617562725875	WITHOUT_CLASSIFICATION	3.8243727412429776E-5	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999981868303739	WITHOUT_CLASSIFICATION	1.8131696261774102E-6	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994928462225	WITHOUT_CLASSIFICATION	5.071537775436038E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.999995557294545	WITHOUT_CLASSIFICATION	4.442705454921669E-6	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.999999858438249	WITHOUT_CLASSIFICATION	1.415617510555874E-7	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999891762726	WITHOUT_CLASSIFICATION	1.0823727447194033E-8	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9975224115508446	WITHOUT_CLASSIFICATION	0.0024775884491552397	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9999375192067829	WITHOUT_CLASSIFICATION	6.248079321703741E-5	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999979391959289	WITHOUT_CLASSIFICATION	2.0608040710353626E-6	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.999977700438736	WITHOUT_CLASSIFICATION	2.2299561264016794E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999993271308206	WITHOUT_CLASSIFICATION	6.72869179431357E-7	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9975920534557626	WITHOUT_CLASSIFICATION	0.002407946544237294	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999778920118642	WITHOUT_CLASSIFICATION	2.210798813585568E-5	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9998218032793145	WITHOUT_CLASSIFICATION	1.781967206855936E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9814077473495828	WITHOUT_CLASSIFICATION	0.01859225265041722	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999823829964793	WITHOUT_CLASSIFICATION	1.7617003520652517E-5	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7457941241034886	WITHOUT_CLASSIFICATION	0.2542058758965115	DESIGN
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999941714607	WITHOUT_CLASSIFICATION	5.8285393278510505E-9	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.8029779116904101	WITHOUT_CLASSIFICATION	0.19702208830958987	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9998452088684396	WITHOUT_CLASSIFICATION	1.547911315603229E-4	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9997553979986731	WITHOUT_CLASSIFICATION	2.446020013269518E-4	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9991261696139518	WITHOUT_CLASSIFICATION	8.738303860480228E-4	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999388068524399	WITHOUT_CLASSIFICATION	6.119314756015295E-5	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9989608478715942	WITHOUT_CLASSIFICATION	0.0010391521284057984	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998799336214	WITHOUT_CLASSIFICATION	1.2006637857186654E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999999579505608	WITHOUT_CLASSIFICATION	4.204943909623001E-8	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9985041807156897	WITHOUT_CLASSIFICATION	0.0014958192843102206	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999935298238766	WITHOUT_CLASSIFICATION	6.470176123492877E-6	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999997368617023	WITHOUT_CLASSIFICATION	2.6313829774503554E-7	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999998770354419	WITHOUT_CLASSIFICATION	1.229645580934758E-7	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.99997859992965	WITHOUT_CLASSIFICATION	2.1400070349935545E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9963529113813534	WITHOUT_CLASSIFICATION	0.0036470886186466306	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988123900859	WITHOUT_CLASSIFICATION	1.187609914114311E-6	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.995441268687587	WITHOUT_CLASSIFICATION	0.004558731312413054	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999998758025828	WITHOUT_CLASSIFICATION	1.241974172178773E-7	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999474236121659	WITHOUT_CLASSIFICATION	5.257638783417988E-5	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9996287739547891	WITHOUT_CLASSIFICATION	3.712260452109081E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9997673770560864	WITHOUT_CLASSIFICATION	2.3262294391348994E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9998877548936874	WITHOUT_CLASSIFICATION	1.1224510631265034E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999733819115245	WITHOUT_CLASSIFICATION	2.66180884754947E-5	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999986894442607	WITHOUT_CLASSIFICATION	1.3105557392484973E-6	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998471302713161	WITHOUT_CLASSIFICATION	1.5286972868383154E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.999950729313039	WITHOUT_CLASSIFICATION	4.927068696107047E-5	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999848097740471	WITHOUT_CLASSIFICATION	1.5190225952873421E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998471302713161	WITHOUT_CLASSIFICATION	1.5286972868383154E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.999999730607486	WITHOUT_CLASSIFICATION	2.6939251395861087E-7	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999950383091457	WITHOUT_CLASSIFICATION	4.96169085438648E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999958504781056	WITHOUT_CLASSIFICATION	4.149521894417175E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999883871608255	WITHOUT_CLASSIFICATION	1.1612839174360968E-5	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998919564519	WITHOUT_CLASSIFICATION	1.0804354813632442E-7	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.99999993238952	WITHOUT_CLASSIFICATION	6.761048002043521E-8	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999781337571918	WITHOUT_CLASSIFICATION	2.1866242808220894E-5	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999995711066751	WITHOUT_CLASSIFICATION	4.2889332487184245E-7	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9998603432466256	WITHOUT_CLASSIFICATION	1.3965675337439669E-4	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.999992312423318	WITHOUT_CLASSIFICATION	7.687576682030724E-6	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999999677658947	WITHOUT_CLASSIFICATION	3.2234105300362543E-7	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999960328037127	WITHOUT_CLASSIFICATION	3.967196287240336E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.998680267166857	WITHOUT_CLASSIFICATION	0.0013197328331430592	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999997171972	WITHOUT_CLASSIFICATION	2.828028064344541E-10	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999923220941114	WITHOUT_CLASSIFICATION	7.677905888570608E-6	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9835378699035819	WITHOUT_CLASSIFICATION	0.016462130096418136	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997714785453728	WITHOUT_CLASSIFICATION	2.2852145462726138E-4	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9997714785453728	WITHOUT_CLASSIFICATION	2.2852145462726138E-4	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999996057344149	WITHOUT_CLASSIFICATION	3.942655850121946E-7	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999891468179407	WITHOUT_CLASSIFICATION	1.0853182059178347E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999993622528258	WITHOUT_CLASSIFICATION	6.377471741397902E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.99970920384229	WITHOUT_CLASSIFICATION	2.90796157710021E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999990067195312	WITHOUT_CLASSIFICATION	9.93280468742591E-7	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8433910721336768	DESIGN	0.15660892786632327	WITHOUT_CLASSIFICATION
//memory optimization	WITHOUT_CLASSIFICATION	0.999997682853075	WITHOUT_CLASSIFICATION	2.3171469251061697E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.999847371590766	WITHOUT_CLASSIFICATION	1.5262840923390238E-4	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9999232547319107	WITHOUT_CLASSIFICATION	7.674526808931575E-5	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9999029510485901	WITHOUT_CLASSIFICATION	9.704895140985794E-5	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9992794569204574	WITHOUT_CLASSIFICATION	7.205430795426222E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999001252913338	WITHOUT_CLASSIFICATION	9.987470866621947E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999280005613068	WITHOUT_CLASSIFICATION	7.19994386931775E-5	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9893152626664199	WITHOUT_CLASSIFICATION	0.010684737333580129	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999998329886328	WITHOUT_CLASSIFICATION	1.6701136729083392E-7	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9996321509311455	WITHOUT_CLASSIFICATION	3.678490688544811E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999997571512644	WITHOUT_CLASSIFICATION	2.4284873547999965E-7	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.999999745553807	WITHOUT_CLASSIFICATION	2.5444619303836843E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9997300844438542	WITHOUT_CLASSIFICATION	2.6991555614579025E-4	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999980564926804	WITHOUT_CLASSIFICATION	1.9435073195741334E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999792604112563	WITHOUT_CLASSIFICATION	2.07395887437498E-5	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999784359181565	WITHOUT_CLASSIFICATION	2.156408184344061E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.999996754248874	WITHOUT_CLASSIFICATION	3.2457511259968146E-6	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999993052373088	WITHOUT_CLASSIFICATION	6.947626911082061E-7	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999999756076832	WITHOUT_CLASSIFICATION	2.4392316900387605E-8	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999956558691189	WITHOUT_CLASSIFICATION	4.34413088112728E-6	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999960892741233	WITHOUT_CLASSIFICATION	3.91072587668705E-6	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.7783024937378846	DESIGN	0.22169750626211535	WITHOUT_CLASSIFICATION
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9999944408871377	WITHOUT_CLASSIFICATION	5.559112862345678E-6	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999930719481608	WITHOUT_CLASSIFICATION	6.928051839202459E-6	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999995272334286	WITHOUT_CLASSIFICATION	4.727665714388496E-7	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999929370367856	WITHOUT_CLASSIFICATION	7.062963214317143E-6	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9997943384541584	WITHOUT_CLASSIFICATION	2.056615458415265E-4	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999287635681583	WITHOUT_CLASSIFICATION	7.123643184172279E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9998386243309672	WITHOUT_CLASSIFICATION	1.613756690328889E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999982665569683	WITHOUT_CLASSIFICATION	1.7334430316696957E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999997163900395	WITHOUT_CLASSIFICATION	2.836099604306539E-7	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9988021707959208	WITHOUT_CLASSIFICATION	0.0011978292040791645	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999994270895	WITHOUT_CLASSIFICATION	5.72910508717223E-10	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999993002388744	WITHOUT_CLASSIFICATION	6.997611255977307E-7	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9999388285255937	WITHOUT_CLASSIFICATION	6.117147440625618E-5	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999974298700672	WITHOUT_CLASSIFICATION	2.570129932835612E-6	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999993347188662	WITHOUT_CLASSIFICATION	6.652811337913068E-7	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999948053263018	WITHOUT_CLASSIFICATION	5.194673698289549E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999999384707088	WITHOUT_CLASSIFICATION	6.152929118444944E-8	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999867155951258	WITHOUT_CLASSIFICATION	1.328440487424668E-5	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998356102789335	WITHOUT_CLASSIFICATION	1.6438972106645318E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999731421743	WITHOUT_CLASSIFICATION	2.685782583976052E-8	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990805910878	WITHOUT_CLASSIFICATION	9.19408912318708E-7	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9970051204361866	WITHOUT_CLASSIFICATION	0.002994879563813393	DESIGN
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999999168074482	WITHOUT_CLASSIFICATION	8.319255185903506E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999867792188	WITHOUT_CLASSIFICATION	1.3220781259444366E-8	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9975248243018084	WITHOUT_CLASSIFICATION	0.0024751756981916053	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999468158188581	WITHOUT_CLASSIFICATION	5.318418114191588E-5	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884058273435	WITHOUT_CLASSIFICATION	1.1594172656481576E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9999468158188581	WITHOUT_CLASSIFICATION	5.318418114191588E-5	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9984472812220531	WITHOUT_CLASSIFICATION	0.0015527187779469669	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9994587343242094	WITHOUT_CLASSIFICATION	5.412656757904871E-4	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9993231190028283	WITHOUT_CLASSIFICATION	6.768809971716351E-4	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999904363160291	WITHOUT_CLASSIFICATION	9.563683970902185E-6	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999997244880541	WITHOUT_CLASSIFICATION	2.755119459170862E-7	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999998033950039	WITHOUT_CLASSIFICATION	1.9660499595892194E-7	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999987112010986	WITHOUT_CLASSIFICATION	1.2887989013353958E-6	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.999999840710513	WITHOUT_CLASSIFICATION	1.5928948701853518E-7	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999995913135509	WITHOUT_CLASSIFICATION	4.086864490972429E-7	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999810546436237	WITHOUT_CLASSIFICATION	1.894535637631701E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999767243612279	WITHOUT_CLASSIFICATION	2.327563877214785E-5	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9989221916837397	WITHOUT_CLASSIFICATION	0.0010778083162603193	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999848021636222	WITHOUT_CLASSIFICATION	1.5197836377894683E-5	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9977793422576651	WITHOUT_CLASSIFICATION	0.0022206577423349145	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9998540437374535	WITHOUT_CLASSIFICATION	1.459562625466061E-4	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9998056702870827	WITHOUT_CLASSIFICATION	1.9432971291726136E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999936762887878	WITHOUT_CLASSIFICATION	6.323711212186531E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999936762887878	WITHOUT_CLASSIFICATION	6.323711212186531E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9996386240283551	WITHOUT_CLASSIFICATION	3.6137597164487E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999823096142	WITHOUT_CLASSIFICATION	1.7690385858441586E-8	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999984186440148	WITHOUT_CLASSIFICATION	1.5813559852402976E-6	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999974873963439	WITHOUT_CLASSIFICATION	2.512603656105165E-6	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9132044218528047	WITHOUT_CLASSIFICATION	0.08679557814719531	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999920921954937	WITHOUT_CLASSIFICATION	7.907804506223817E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9996906680984291	WITHOUT_CLASSIFICATION	3.0933190157090223E-4	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9998972758241386	WITHOUT_CLASSIFICATION	1.0272417586138511E-4	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999981258123526	WITHOUT_CLASSIFICATION	1.8741876473947074E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999990040043	WITHOUT_CLASSIFICATION	9.95995793968123E-10	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992257105007	WITHOUT_CLASSIFICATION	7.742894992764658E-7	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999999721689543	WITHOUT_CLASSIFICATION	2.7831045696293487E-7	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999944850079	WITHOUT_CLASSIFICATION	5.5149921278862115E-9	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999927819111899	WITHOUT_CLASSIFICATION	7.218088810162765E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999370875737423	WITHOUT_CLASSIFICATION	6.291242625770374E-4	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999983283092712	WITHOUT_CLASSIFICATION	1.671690728741486E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9999378493128365	WITHOUT_CLASSIFICATION	6.21506871635019E-5	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9499656192841283	WITHOUT_CLASSIFICATION	0.05003438071587168	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999802035666365	WITHOUT_CLASSIFICATION	1.979643336351626E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999606637183	WITHOUT_CLASSIFICATION	3.933628169273071E-8	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999984630297394	WITHOUT_CLASSIFICATION	1.5369702605152357E-6	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999993627415534	WITHOUT_CLASSIFICATION	6.372584465852034E-7	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998831733257421	WITHOUT_CLASSIFICATION	1.1682667425784161E-4	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9991101192338734	WITHOUT_CLASSIFICATION	8.898807661265249E-4	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999999145764493	WITHOUT_CLASSIFICATION	8.542355069857886E-8	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999453973397354	WITHOUT_CLASSIFICATION	5.460266026459664E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999981602997298	WITHOUT_CLASSIFICATION	1.839700270295942E-6	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.5162427899214299	WITHOUT_CLASSIFICATION	0.4837572100785701	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999859716794772	WITHOUT_CLASSIFICATION	1.4028320522790645E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998639257907089	WITHOUT_CLASSIFICATION	1.3607420929102204E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9991312188351926	WITHOUT_CLASSIFICATION	8.687811648072568E-4	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999793054955128	WITHOUT_CLASSIFICATION	2.069450448714043E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999887975852907	WITHOUT_CLASSIFICATION	1.1202414709352654E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9996248368853625	WITHOUT_CLASSIFICATION	3.7516311463747695E-4	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9988678471410513	WITHOUT_CLASSIFICATION	0.0011321528589487697	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999987598600801	WITHOUT_CLASSIFICATION	1.240139919831345E-6	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999966661830004	WITHOUT_CLASSIFICATION	3.3338169995651502E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9989447221579111	WITHOUT_CLASSIFICATION	0.0010552778420889943	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9999210411490641	WITHOUT_CLASSIFICATION	7.895885093595874E-5	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999742440809	WITHOUT_CLASSIFICATION	2.5755919156053747E-8	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999879143748	WITHOUT_CLASSIFICATION	1.2085625102302902E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999946447669	WITHOUT_CLASSIFICATION	5.3552330917860196E-8	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998867433107885	WITHOUT_CLASSIFICATION	1.1325668921150226E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9997694776163716	WITHOUT_CLASSIFICATION	2.3052238362831698E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999996663113	WITHOUT_CLASSIFICATION	3.336886991294823E-10	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9996389053826116	WITHOUT_CLASSIFICATION	3.6109461738833795E-4	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.5983437141523962	WITHOUT_CLASSIFICATION	0.4016562858476038	DESIGN
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999991287867918	WITHOUT_CLASSIFICATION	8.712132082546071E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999997458515701	WITHOUT_CLASSIFICATION	2.541484298343297E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999547406118905	WITHOUT_CLASSIFICATION	4.525938810946014E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999730562766	WITHOUT_CLASSIFICATION	2.6943723417457244E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999999105776155	WITHOUT_CLASSIFICATION	8.94223844917711E-7	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999645603416	WITHOUT_CLASSIFICATION	3.543965840239458E-7	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9996393203006301	WITHOUT_CLASSIFICATION	3.6067969936992567E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9999562213297882	WITHOUT_CLASSIFICATION	4.3778670211804484E-5	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999925036817735	WITHOUT_CLASSIFICATION	7.49631822650462E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999925036817735	WITHOUT_CLASSIFICATION	7.49631822650462E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999990391593	WITHOUT_CLASSIFICATION	9.60840810578721E-10	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999753818214578	WITHOUT_CLASSIFICATION	2.461817854210385E-5	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993861633024695	WITHOUT_CLASSIFICATION	6.138366975303795E-4	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999883930927772	WITHOUT_CLASSIFICATION	1.1606907222822537E-5	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999993263875	WITHOUT_CLASSIFICATION	6.736124430192257E-10	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999997397332595	WITHOUT_CLASSIFICATION	2.6026674054404743E-7	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9998854313375543	WITHOUT_CLASSIFICATION	1.1456866244573655E-4	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999960101311137	WITHOUT_CLASSIFICATION	3.98986888624382E-6	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9994426153214827	WITHOUT_CLASSIFICATION	5.573846785173254E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999667415276	WITHOUT_CLASSIFICATION	3.325847242674494E-8	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999990119781847	WITHOUT_CLASSIFICATION	9.880218151955614E-7	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9993702712143622	WITHOUT_CLASSIFICATION	6.297287856378566E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999968856348804	WITHOUT_CLASSIFICATION	3.114365119500358E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999755414686567	WITHOUT_CLASSIFICATION	2.445853134326229E-5	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5888356834116826	DESIGN	0.4111643165883175	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9995739413315715	WITHOUT_CLASSIFICATION	4.2605866842844074E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999996500665956	WITHOUT_CLASSIFICATION	3.4993340428628684E-7	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9998738855235948	WITHOUT_CLASSIFICATION	1.2611447640520053E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999677021948075	WITHOUT_CLASSIFICATION	3.2297805192617015E-5	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999764210095184	WITHOUT_CLASSIFICATION	2.357899048149878E-5	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999858604380909	WITHOUT_CLASSIFICATION	1.4139561909125732E-5	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999996323331836	WITHOUT_CLASSIFICATION	3.676668164807E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999956685405088	WITHOUT_CLASSIFICATION	4.331459491207596E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9997734497469685	WITHOUT_CLASSIFICATION	2.2655025303153545E-4	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9981414669061295	WITHOUT_CLASSIFICATION	0.0018585330938704907	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9994925098954688	DESIGN	5.074901045311148E-4	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999637928303331	WITHOUT_CLASSIFICATION	3.62071696669961E-5	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997493378631234	WITHOUT_CLASSIFICATION	2.506621368766323E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999931578342265	WITHOUT_CLASSIFICATION	6.842165773586832E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999956685405088	WITHOUT_CLASSIFICATION	4.331459491207596E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.999966158422577	WITHOUT_CLASSIFICATION	3.384157742311523E-5	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9995485026463304	WITHOUT_CLASSIFICATION	4.5149735366954155E-4	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9998990231662606	WITHOUT_CLASSIFICATION	1.0097683373932267E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999585322070558	WITHOUT_CLASSIFICATION	4.146779294421159E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997497052735	WITHOUT_CLASSIFICATION	2.502947265269228E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.520710841317036	WITHOUT_CLASSIFICATION	0.4792891586829639	DESIGN
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9916370773968317	WITHOUT_CLASSIFICATION	0.008362922603168272	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999918792473775	WITHOUT_CLASSIFICATION	8.120752622445165E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999942045459895	WITHOUT_CLASSIFICATION	5.795454010447076E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999585322070558	WITHOUT_CLASSIFICATION	4.146779294421159E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999957540145069	WITHOUT_CLASSIFICATION	4.245985493045976E-6	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999647513430852	WITHOUT_CLASSIFICATION	3.5248656914784605E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998953678921235	WITHOUT_CLASSIFICATION	1.0463210787650444E-4	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999723787873034	WITHOUT_CLASSIFICATION	2.7621212696597882E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999985965363548	WITHOUT_CLASSIFICATION	1.4034636452019836E-6	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999992257105007	WITHOUT_CLASSIFICATION	7.742894992764658E-7	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999834893306	WITHOUT_CLASSIFICATION	1.651066935296206E-8	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999989511063012	WITHOUT_CLASSIFICATION	1.0488936988577778E-6	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999798303651996	WITHOUT_CLASSIFICATION	2.016963480051029E-5	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.99950699420412	WITHOUT_CLASSIFICATION	4.930057958799338E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999920958829465	WITHOUT_CLASSIFICATION	7.904117053592348E-6	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9997841649091843	WITHOUT_CLASSIFICATION	2.1583509081573966E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9998875267915645	WITHOUT_CLASSIFICATION	1.124732084356174E-4	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999991893764822	WITHOUT_CLASSIFICATION	8.106235177059536E-7	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.999976086789824	WITHOUT_CLASSIFICATION	2.3913210175994565E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998970955476388	WITHOUT_CLASSIFICATION	1.0290445236113705E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999427687750301	WITHOUT_CLASSIFICATION	5.723122496990641E-5	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9999979397499377	WITHOUT_CLASSIFICATION	2.0602500623784983E-6	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999962288226444	WITHOUT_CLASSIFICATION	3.7711773555056153E-6	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9965541596856623	WITHOUT_CLASSIFICATION	0.0034458403143376374	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999988347648471	WITHOUT_CLASSIFICATION	1.1652351529150335E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9999971497868256	WITHOUT_CLASSIFICATION	2.850213174359866E-6	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999999682347583	WITHOUT_CLASSIFICATION	3.1765241744123805E-8	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.999998839196915	WITHOUT_CLASSIFICATION	1.1608030850559906E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999966929795547	WITHOUT_CLASSIFICATION	3.3070204451986498E-6	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9981246765405307	WITHOUT_CLASSIFICATION	0.0018753234594691844	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999886607863979	WITHOUT_CLASSIFICATION	1.1339213602023653E-5	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999242885783	WITHOUT_CLASSIFICATION	7.571142173303907E-8	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999994791276449	WITHOUT_CLASSIFICATION	5.208723551842459E-7	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999942018609763	WITHOUT_CLASSIFICATION	5.798139023719703E-6	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999992852899813	WITHOUT_CLASSIFICATION	7.147100187957662E-7	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9989815380589108	WITHOUT_CLASSIFICATION	0.0010184619410892276	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999986447185838	WITHOUT_CLASSIFICATION	1.355281416204787E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918048551045	WITHOUT_CLASSIFICATION	8.195144895456441E-6	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987178952165282	WITHOUT_CLASSIFICATION	0.0012821047834718677	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.903662503938755	WITHOUT_CLASSIFICATION	0.09633749606124498	DESIGN
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999616274023092	WITHOUT_CLASSIFICATION	3.837259769092052E-5	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999972823013246	WITHOUT_CLASSIFICATION	2.7176986754672325E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996496962683	WITHOUT_CLASSIFICATION	3.503037316871645E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996496962683	WITHOUT_CLASSIFICATION	3.503037316871645E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999966143916372	WITHOUT_CLASSIFICATION	3.3856083626901526E-6	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9998378558109129	WITHOUT_CLASSIFICATION	1.6214418908707176E-4	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999999013517361	WITHOUT_CLASSIFICATION	9.864826390746541E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999974644235745	WITHOUT_CLASSIFICATION	2.535576425561156E-6	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999987635942612	WITHOUT_CLASSIFICATION	1.2364057388120865E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.7396312128690835	WITHOUT_CLASSIFICATION	0.2603687871309165	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9995469659033556	WITHOUT_CLASSIFICATION	4.5303409664446375E-4	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999963651706851	WITHOUT_CLASSIFICATION	3.63482931488552E-6	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999998783177133	WITHOUT_CLASSIFICATION	1.2168228669507311E-7	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999999837181136	WITHOUT_CLASSIFICATION	1.6281886434741414E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999993399898	WITHOUT_CLASSIFICATION	6.60010124345786E-10	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999988173060644	WITHOUT_CLASSIFICATION	1.1826939355451718E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999998840829684	WITHOUT_CLASSIFICATION	1.1591703172889853E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996496962683	WITHOUT_CLASSIFICATION	3.503037316871645E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999853185671966	WITHOUT_CLASSIFICATION	1.4681432803407493E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9993387009103781	WITHOUT_CLASSIFICATION	6.612990896217825E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993808307840224	WITHOUT_CLASSIFICATION	6.191692159775459E-4	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999911564043359	WITHOUT_CLASSIFICATION	8.843595664243922E-6	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999935622894174	WITHOUT_CLASSIFICATION	6.437710582574486E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999647849839424	WITHOUT_CLASSIFICATION	3.521501605759084E-5	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9998611621583083	WITHOUT_CLASSIFICATION	1.388378416917243E-4	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999989884143073	WITHOUT_CLASSIFICATION	1.0115856926748527E-6	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999842767587594	WITHOUT_CLASSIFICATION	1.5723241240576857E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9998555173710159	WITHOUT_CLASSIFICATION	1.4448262898417418E-4	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999105207398885	WITHOUT_CLASSIFICATION	8.947926011156516E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999918048551045	WITHOUT_CLASSIFICATION	8.195144895456441E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996496962683	WITHOUT_CLASSIFICATION	3.503037316871645E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999995623351	WITHOUT_CLASSIFICATION	4.3766489635752907E-10	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999999038736195	WITHOUT_CLASSIFICATION	9.612638053040544E-8	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999889135410656	WITHOUT_CLASSIFICATION	1.1086458934484943E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999943636766632	WITHOUT_CLASSIFICATION	5.636323336757305E-6	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.8763403585356028	WITHOUT_CLASSIFICATION	0.12365964146439727	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999997378869947	WITHOUT_CLASSIFICATION	2.621130052483971E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999865398813634	WITHOUT_CLASSIFICATION	1.346011863657946E-5	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999998276304866	WITHOUT_CLASSIFICATION	1.7236951348619358E-7	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999914961525	WITHOUT_CLASSIFICATION	8.503847446312113E-9	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999994866869617	WITHOUT_CLASSIFICATION	5.133130381987459E-7	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999999859702909	WITHOUT_CLASSIFICATION	1.4029709141620773E-8	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997614376293881	WITHOUT_CLASSIFICATION	2.385623706118967E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.999994667542361	WITHOUT_CLASSIFICATION	5.332457638948442E-6	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999992483401262	WITHOUT_CLASSIFICATION	7.516598737620362E-7	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9984472812220531	WITHOUT_CLASSIFICATION	0.0015527187779469669	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999996389882184	WITHOUT_CLASSIFICATION	3.610117815344201E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999954673074	WITHOUT_CLASSIFICATION	4.532692508914725E-9	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999990334936488	WITHOUT_CLASSIFICATION	9.66506351149563E-7	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999993861984205	WITHOUT_CLASSIFICATION	6.138015793796393E-7	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999999850671442	WITHOUT_CLASSIFICATION	1.493285593031276E-8	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997281365760998	WITHOUT_CLASSIFICATION	2.718634239002141E-4	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997281365760998	WITHOUT_CLASSIFICATION	2.718634239002141E-4	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9980892992244247	WITHOUT_CLASSIFICATION	0.001910700775575327	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999960403302433	WITHOUT_CLASSIFICATION	3.95966975669512E-5	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.999999965610052	WITHOUT_CLASSIFICATION	3.438994798911626E-8	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999394920949889	WITHOUT_CLASSIFICATION	6.050790501115717E-5	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999783102173389	WITHOUT_CLASSIFICATION	2.168978266116204E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999638795582948	WITHOUT_CLASSIFICATION	3.6120441705293076E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9969091076807962	WITHOUT_CLASSIFICATION	0.003090892319203653	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999997006302	WITHOUT_CLASSIFICATION	2.9936980492325355E-9	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.999999997006302	WITHOUT_CLASSIFICATION	2.9936980492325355E-9	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999992914757158	WITHOUT_CLASSIFICATION	7.085242841772012E-7	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999987234905289	WITHOUT_CLASSIFICATION	1.2765094711596322E-6	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999862868526974	WITHOUT_CLASSIFICATION	1.3713147302552704E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999842308782287	WITHOUT_CLASSIFICATION	1.5769121771229304E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999842308782287	WITHOUT_CLASSIFICATION	1.5769121771229304E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999842308782287	WITHOUT_CLASSIFICATION	1.5769121771229304E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9909264195644419	WITHOUT_CLASSIFICATION	0.009073580435558014	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.99994913791997	WITHOUT_CLASSIFICATION	5.0862080030046956E-5	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999825030882	WITHOUT_CLASSIFICATION	1.74969118420431E-8	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.988783797720454	WITHOUT_CLASSIFICATION	0.011216202279546056	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999619233465874	WITHOUT_CLASSIFICATION	3.807665341258665E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996496962683	WITHOUT_CLASSIFICATION	3.503037316871645E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996496962683	WITHOUT_CLASSIFICATION	3.503037316871645E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999998425444263	WITHOUT_CLASSIFICATION	1.574555736286652E-7	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9986351563693876	WITHOUT_CLASSIFICATION	0.0013648436306123585	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999648385845877	WITHOUT_CLASSIFICATION	3.5161415412264935E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999981113175304	WITHOUT_CLASSIFICATION	1.8886824695414375E-6	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.999955213052597	WITHOUT_CLASSIFICATION	4.4786947403046586E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999997602549309	WITHOUT_CLASSIFICATION	2.39745069058058E-7	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9937189037595112	WITHOUT_CLASSIFICATION	0.006281096240488761	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9998157053731598	WITHOUT_CLASSIFICATION	1.8429462684022623E-4	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999998503432835	WITHOUT_CLASSIFICATION	1.496567165234605E-7	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.99999999510724	WITHOUT_CLASSIFICATION	4.892759976634786E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999971825316095	WITHOUT_CLASSIFICATION	2.8174683905792244E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999605519737167	WITHOUT_CLASSIFICATION	3.9448026283352027E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999605519737167	WITHOUT_CLASSIFICATION	3.9448026283352027E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999716195052359	WITHOUT_CLASSIFICATION	2.8380494763991074E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999716195052359	WITHOUT_CLASSIFICATION	2.8380494763991074E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999699203026465	WITHOUT_CLASSIFICATION	3.007969735349609E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999973232377707	WITHOUT_CLASSIFICATION	2.6767622294278114E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999973232377707	WITHOUT_CLASSIFICATION	2.6767622294278114E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999910537303552	WITHOUT_CLASSIFICATION	8.946269644810454E-6	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999994157054181	WITHOUT_CLASSIFICATION	5.842945818998156E-6	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998075065573	WITHOUT_CLASSIFICATION	1.9249344277067334E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9997281365760998	WITHOUT_CLASSIFICATION	2.718634239002141E-4	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.999994618037209	WITHOUT_CLASSIFICATION	5.381962790951811E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.999994157054181	WITHOUT_CLASSIFICATION	5.842945818998166E-6	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9928974374235678	WITHOUT_CLASSIFICATION	0.007102562576432119	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998427264590862	WITHOUT_CLASSIFICATION	1.572735409137991E-4	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999996305660493	WITHOUT_CLASSIFICATION	3.694339507479128E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999995373537958	WITHOUT_CLASSIFICATION	4.626462042681419E-7	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999934979151325	WITHOUT_CLASSIFICATION	6.502084867500812E-6	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9996678119258041	WITHOUT_CLASSIFICATION	3.321880741958439E-4	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999998908264294	WITHOUT_CLASSIFICATION	1.091735706579951E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.974613294584345	WITHOUT_CLASSIFICATION	0.025386705415654985	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999998622651644	WITHOUT_CLASSIFICATION	1.3773483567614185E-7	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9792410626944008	WITHOUT_CLASSIFICATION	0.0207589373055992	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999968616089	WITHOUT_CLASSIFICATION	3.138391153592464E-9	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999455610100375	WITHOUT_CLASSIFICATION	5.443898996257354E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997635065077	WITHOUT_CLASSIFICATION	2.3649349242423495E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999944601935323	WITHOUT_CLASSIFICATION	5.5398064676268295E-6	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999986283564287	WITHOUT_CLASSIFICATION	1.3716435713804697E-6	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9876764651511107	WITHOUT_CLASSIFICATION	0.01232353484888935	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998965891368	WITHOUT_CLASSIFICATION	1.0341086320372056E-7	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998654654468845	WITHOUT_CLASSIFICATION	1.3453455311553963E-4	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998654654468845	WITHOUT_CLASSIFICATION	1.3453455311553963E-4	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.999996632890941	WITHOUT_CLASSIFICATION	3.3671090590273095E-6	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999996978950301	WITHOUT_CLASSIFICATION	3.0210496999233887E-7	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999986103777612	WITHOUT_CLASSIFICATION	1.3896222389179281E-6	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9999470414364539	WITHOUT_CLASSIFICATION	5.2958563546193045E-5	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999878404472153	WITHOUT_CLASSIFICATION	1.2159552784634854E-5	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999959489060389	WITHOUT_CLASSIFICATION	4.051093961069828E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9999850358408997	WITHOUT_CLASSIFICATION	1.4964159100326539E-5	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999998014938154	WITHOUT_CLASSIFICATION	1.9850618461505148E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999460320141604	WITHOUT_CLASSIFICATION	5.396798583949253E-5	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.999885516179593	WITHOUT_CLASSIFICATION	1.1448382040704421E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999808659260646	WITHOUT_CLASSIFICATION	1.913407393543147E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997614376293881	WITHOUT_CLASSIFICATION	2.385623706118967E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999996645757205	WITHOUT_CLASSIFICATION	3.3542427948874445E-6	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999996288199108	WITHOUT_CLASSIFICATION	3.711800892366002E-7	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9986699303306268	WITHOUT_CLASSIFICATION	0.00133006966937327	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999912759681401	WITHOUT_CLASSIFICATION	8.724031859917783E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999867035176	WITHOUT_CLASSIFICATION	1.329648232993597E-8	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999867035176	WITHOUT_CLASSIFICATION	1.329648232993597E-8	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998349861469119	WITHOUT_CLASSIFICATION	1.650138530879749E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9998625659044028	WITHOUT_CLASSIFICATION	1.374340955972762E-4	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999933371837764	WITHOUT_CLASSIFICATION	6.662816223528582E-6	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999901726546871	WITHOUT_CLASSIFICATION	9.827345312906034E-6	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999897497688406	WITHOUT_CLASSIFICATION	1.0250231159297341E-5	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999976787260598	WITHOUT_CLASSIFICATION	2.321273940138095E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9981675983576236	WITHOUT_CLASSIFICATION	0.0018324016423764233	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999982337039292	WITHOUT_CLASSIFICATION	1.7662960708036664E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999902847750914	WITHOUT_CLASSIFICATION	9.715224908590484E-6	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999992616544	WITHOUT_CLASSIFICATION	7.3834571928556E-10	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9998768342626727	WITHOUT_CLASSIFICATION	1.2316573732722467E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999982337039292	WITHOUT_CLASSIFICATION	1.7662960708036664E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.6271162003249817	DESIGN	0.3728837996750182	WITHOUT_CLASSIFICATION
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9943556583235922	WITHOUT_CLASSIFICATION	0.005644341676407857	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.997050340122453	WITHOUT_CLASSIFICATION	0.002949659877547021	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.999999547158795	WITHOUT_CLASSIFICATION	4.528412049687495E-7	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999997077616312	WITHOUT_CLASSIFICATION	2.9223836877067683E-7	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999442362301	WITHOUT_CLASSIFICATION	5.576376989537066E-8	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999993870536208	WITHOUT_CLASSIFICATION	6.129463792260503E-7	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999557913166	WITHOUT_CLASSIFICATION	4.420868341131427E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9991700878757819	WITHOUT_CLASSIFICATION	8.299121242181134E-4	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9988897753655215	WITHOUT_CLASSIFICATION	0.0011102246344784998	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999289359602568	WITHOUT_CLASSIFICATION	7.106403974330336E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999991588299219	WITHOUT_CLASSIFICATION	8.411700780907058E-7	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999667811990739	WITHOUT_CLASSIFICATION	3.3218800926031354E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999988137423038	WITHOUT_CLASSIFICATION	1.1862576962221164E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999961563908181	WITHOUT_CLASSIFICATION	3.843609181949794E-6	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999941215860273	WITHOUT_CLASSIFICATION	5.878413972727204E-6	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999960672382812	WITHOUT_CLASSIFICATION	3.93276171887227E-6	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9877439485280061	WITHOUT_CLASSIFICATION	0.012256051471993944	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9982839709920196	WITHOUT_CLASSIFICATION	0.0017160290079804342	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999991367246108	WITHOUT_CLASSIFICATION	8.632753891592519E-7	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998337267298572	WITHOUT_CLASSIFICATION	1.6627327014290304E-4	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6669826451243426	DESIGN	0.3330173548756575	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998638805771335	WITHOUT_CLASSIFICATION	1.3611942286642618E-4	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999981256613503	WITHOUT_CLASSIFICATION	1.87433864979297E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999673186244	WITHOUT_CLASSIFICATION	3.2681375624529367E-8	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999743043377989	WITHOUT_CLASSIFICATION	2.56956622011744E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999978615640237	WITHOUT_CLASSIFICATION	2.138435976302583E-6	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999824184204	WITHOUT_CLASSIFICATION	1.7581579570118262E-8	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999995290942435	WITHOUT_CLASSIFICATION	4.7090575659006606E-7	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9967326018062577	WITHOUT_CLASSIFICATION	0.003267398193742281	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999974714139	WITHOUT_CLASSIFICATION	2.528586144440926E-9	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999660490573097	WITHOUT_CLASSIFICATION	3.395094269039806E-5	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999978938214968	WITHOUT_CLASSIFICATION	2.1061785030561243E-6	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9969750014115081	WITHOUT_CLASSIFICATION	0.003024998588491985	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999782193599056	WITHOUT_CLASSIFICATION	2.178064009444681E-5	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999996051522693	WITHOUT_CLASSIFICATION	3.948477307948329E-7	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9996950240907954	WITHOUT_CLASSIFICATION	3.0497590920465327E-4	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999689529958	WITHOUT_CLASSIFICATION	3.104700414995021E-8	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999903315704	WITHOUT_CLASSIFICATION	9.668429585447897E-9	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999961470934193	WITHOUT_CLASSIFICATION	3.852906580593875E-6	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999997630853379	WITHOUT_CLASSIFICATION	2.3691466201572095E-7	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999992609833304	WITHOUT_CLASSIFICATION	7.390166696377374E-7	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999929992600564	WITHOUT_CLASSIFICATION	7.0007399435605125E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998503746389	WITHOUT_CLASSIFICATION	1.496253610073067E-7	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999670506705798	WITHOUT_CLASSIFICATION	3.294932942028352E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9995286762889007	WITHOUT_CLASSIFICATION	4.7132371109924297E-4	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999963983259909	WITHOUT_CLASSIFICATION	3.601674009112805E-6	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999989693290909	WITHOUT_CLASSIFICATION	1.0306709090265847E-6	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999994911886132	WITHOUT_CLASSIFICATION	5.088113867675897E-7	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999870826555937	WITHOUT_CLASSIFICATION	1.291734440635915E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946553119146	WITHOUT_CLASSIFICATION	5.3446880854265824E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999795348060605	WITHOUT_CLASSIFICATION	2.0465193939491238E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999901194839416	WITHOUT_CLASSIFICATION	9.880516058409436E-6	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999773641809	WITHOUT_CLASSIFICATION	2.2635819138070176E-8	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999997963982882	WITHOUT_CLASSIFICATION	2.0360171180447842E-7	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999980068826986	WITHOUT_CLASSIFICATION	1.9931173013706764E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999932095502974	WITHOUT_CLASSIFICATION	6.790449702691479E-6	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999995894295753	WITHOUT_CLASSIFICATION	4.105704245648114E-7	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999857169395268	WITHOUT_CLASSIFICATION	1.4283060473169573E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999999060088746	WITHOUT_CLASSIFICATION	9.399112549985017E-8	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9998680959123257	WITHOUT_CLASSIFICATION	1.3190408767431804E-4	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999987508116289	WITHOUT_CLASSIFICATION	1.2491883709841218E-6	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9999533171671025	WITHOUT_CLASSIFICATION	4.6682832897472906E-5	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8816180510198035	DESIGN	0.1183819489801965	WITHOUT_CLASSIFICATION
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9954142625244262	WITHOUT_CLASSIFICATION	0.004585737475573788	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999597791382058	WITHOUT_CLASSIFICATION	4.022086179425988E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946553119146	WITHOUT_CLASSIFICATION	5.3446880854265824E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999911241324846	WITHOUT_CLASSIFICATION	8.875867515351522E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999975016267	WITHOUT_CLASSIFICATION	2.4983734053180717E-9	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999193596188231	WITHOUT_CLASSIFICATION	8.064038117695448E-5	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.999979003884201	WITHOUT_CLASSIFICATION	2.099611579897743E-5	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999899301121274	WITHOUT_CLASSIFICATION	1.0069887872654187E-5	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999750381931217	WITHOUT_CLASSIFICATION	2.4961806878335777E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999902847750914	WITHOUT_CLASSIFICATION	9.715224908590484E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9963950997586157	WITHOUT_CLASSIFICATION	0.0036049002413842974	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999782193599056	WITHOUT_CLASSIFICATION	2.178064009444681E-5	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9895061248475149	WITHOUT_CLASSIFICATION	0.010493875152485073	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997510346065	WITHOUT_CLASSIFICATION	2.4896539349902184E-7	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999996118411354	WITHOUT_CLASSIFICATION	3.881588646117352E-7	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999999440875225	WITHOUT_CLASSIFICATION	5.591247750197289E-7	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999395289983789	WITHOUT_CLASSIFICATION	6.047100162102748E-5	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9846821759840123	WITHOUT_CLASSIFICATION	0.015317824015987677	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998406094368867	WITHOUT_CLASSIFICATION	1.5939056311339663E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9914888426007071	WITHOUT_CLASSIFICATION	0.008511157399292807	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9994731860302312	WITHOUT_CLASSIFICATION	5.268139697688007E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999995880936747	WITHOUT_CLASSIFICATION	4.1190632532348633E-7	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999869169277356	WITHOUT_CLASSIFICATION	1.3083072264548386E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9994499480988426	WITHOUT_CLASSIFICATION	5.500519011573468E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998453692366193	WITHOUT_CLASSIFICATION	1.5463076338068533E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9998453692366193	WITHOUT_CLASSIFICATION	1.5463076338068533E-4	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9997940812104226	WITHOUT_CLASSIFICATION	2.0591878957738462E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999993553121056	WITHOUT_CLASSIFICATION	6.446878943758099E-7	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999992833535719	WITHOUT_CLASSIFICATION	7.166464280146521E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999881496589387	WITHOUT_CLASSIFICATION	1.1850341061408643E-5	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999903457751232	WITHOUT_CLASSIFICATION	9.654224876854005E-6	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999348270111387	WITHOUT_CLASSIFICATION	6.517298886125421E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994868135368	WITHOUT_CLASSIFICATION	5.131864633359888E-7	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999718791315176	WITHOUT_CLASSIFICATION	2.8120868482389674E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999983471806435	WITHOUT_CLASSIFICATION	1.6528193564998202E-6	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999808090533723	WITHOUT_CLASSIFICATION	1.9190946627657684E-5	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999775808314281	WITHOUT_CLASSIFICATION	2.24191685719203E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999997852221054	WITHOUT_CLASSIFICATION	2.147778945229146E-7	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999997640820995	WITHOUT_CLASSIFICATION	2.3591790042795026E-7	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999993138	WITHOUT_CLASSIFICATION	6.862492936970692E-13	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995946458752595	WITHOUT_CLASSIFICATION	4.0535412474049747E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999926763048265	WITHOUT_CLASSIFICATION	7.323695173486096E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9957438946533187	WITHOUT_CLASSIFICATION	0.004256105346681273	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999996305252	WITHOUT_CLASSIFICATION	3.6947483189006797E-10	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999844425392	WITHOUT_CLASSIFICATION	1.5557460772589765E-8	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9998949224988662	WITHOUT_CLASSIFICATION	1.0507750113368538E-4	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999995675136699	WITHOUT_CLASSIFICATION	4.324863300708844E-7	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999463227332572	WITHOUT_CLASSIFICATION	5.367726674280639E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999989866116847	WITHOUT_CLASSIFICATION	1.0133883153218196E-6	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.9991051770449124	WITHOUT_CLASSIFICATION	8.948229550875936E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999890938724012	WITHOUT_CLASSIFICATION	1.0906127598749541E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999966212890207	WITHOUT_CLASSIFICATION	3.378710979207982E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999990582262835	WITHOUT_CLASSIFICATION	9.417737164710916E-7	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999968620066748	WITHOUT_CLASSIFICATION	3.1379933251636464E-6	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995213734576887	WITHOUT_CLASSIFICATION	4.7862654231131836E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999593135486657	WITHOUT_CLASSIFICATION	4.0686451334355275E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.9417388332591432	WITHOUT_CLASSIFICATION	0.058261166740856914	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.5318661966490191	DESIGN	0.46813380335098087	WITHOUT_CLASSIFICATION
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999621308032629	WITHOUT_CLASSIFICATION	3.7869196737112786E-5	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9997299903522007	WITHOUT_CLASSIFICATION	2.7000964779929384E-4	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9998599892975177	WITHOUT_CLASSIFICATION	1.4001070248232856E-4	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999994076804624	WITHOUT_CLASSIFICATION	5.923195376287676E-7	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999515201965076	WITHOUT_CLASSIFICATION	4.847980349252559E-5	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.999988026596344	WITHOUT_CLASSIFICATION	1.197340365593083E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999940760842626	WITHOUT_CLASSIFICATION	5.92391573745127E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997814130467	WITHOUT_CLASSIFICATION	2.1858695333841072E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999602429477181	WITHOUT_CLASSIFICATION	3.975705228180015E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999993347497	WITHOUT_CLASSIFICATION	6.652501719837106E-10	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998949172796966	WITHOUT_CLASSIFICATION	1.050827203034147E-4	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999996447754873	WITHOUT_CLASSIFICATION	3.552245127318669E-7	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999992643891746	WITHOUT_CLASSIFICATION	7.356108254251791E-7	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999919635339075	WITHOUT_CLASSIFICATION	8.036466092569223E-6	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.988887711360278	WITHOUT_CLASSIFICATION	0.011112288639721937	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999984762057923	WITHOUT_CLASSIFICATION	1.5237942076335565E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999999996258654	WITHOUT_CLASSIFICATION	3.7413465994879127E-10	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999958150296	WITHOUT_CLASSIFICATION	4.184970307051253E-9	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998815147857327	WITHOUT_CLASSIFICATION	1.1848521426727786E-4	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999989285595983	WITHOUT_CLASSIFICATION	1.0714404017564088E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999980269402701	WITHOUT_CLASSIFICATION	1.9730597299561407E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999985448447571	WITHOUT_CLASSIFICATION	1.4551552429077331E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.99999952130672	WITHOUT_CLASSIFICATION	4.786932799798939E-7	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9995352678331519	WITHOUT_CLASSIFICATION	4.647321668479937E-4	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999997937623446	WITHOUT_CLASSIFICATION	2.0623765537466146E-7	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.9999293743908718	WITHOUT_CLASSIFICATION	7.062560912818083E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999986697513668	WITHOUT_CLASSIFICATION	1.33024863316594E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999953323998311	WITHOUT_CLASSIFICATION	4.6676001688997995E-6	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999699450485507	WITHOUT_CLASSIFICATION	3.005495144919746E-5	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997792963703	WITHOUT_CLASSIFICATION	2.2070362963040432E-7	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9967667195923278	WITHOUT_CLASSIFICATION	0.003233280407672205	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999933555441938	WITHOUT_CLASSIFICATION	6.6444558062416615E-6	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999456224403773	WITHOUT_CLASSIFICATION	5.4377559622721195E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999762028372541	WITHOUT_CLASSIFICATION	2.3797162745965287E-5	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999150137941	WITHOUT_CLASSIFICATION	8.498620588860533E-8	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999998175075765	WITHOUT_CLASSIFICATION	1.8249242343514151E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999923890727	WITHOUT_CLASSIFICATION	7.610927411908571E-9	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999874559737	WITHOUT_CLASSIFICATION	1.2544026189496634E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999923890727	WITHOUT_CLASSIFICATION	7.610927411908571E-9	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999959884498361	WITHOUT_CLASSIFICATION	4.011550163867285E-6	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999965669436305	WITHOUT_CLASSIFICATION	3.433056369510898E-6	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999963158759516	WITHOUT_CLASSIFICATION	3.68412404832293E-6	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999761994818	WITHOUT_CLASSIFICATION	2.380051815362619E-8	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999992805055502	WITHOUT_CLASSIFICATION	7.194944498732026E-7	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999993413743125	WITHOUT_CLASSIFICATION	6.586256875664652E-7	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999900935269855	WITHOUT_CLASSIFICATION	9.906473014433182E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9994663613214153	WITHOUT_CLASSIFICATION	5.336386785846976E-4	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999362323967899	WITHOUT_CLASSIFICATION	6.376760321006572E-5	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999999602589866	WITHOUT_CLASSIFICATION	3.974101340165264E-7	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999689479957	WITHOUT_CLASSIFICATION	3.105200425091049E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999687832934016	WITHOUT_CLASSIFICATION	3.1216706598357544E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999634724179	WITHOUT_CLASSIFICATION	3.6527582123133206E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999947049064108	DESIGN	5.295093589139648E-6	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999322781249	WITHOUT_CLASSIFICATION	6.772187508012632E-8	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999996076336	WITHOUT_CLASSIFICATION	3.923663719368311E-10	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999982511917814	WITHOUT_CLASSIFICATION	1.7488082185571832E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999976678533902	WITHOUT_CLASSIFICATION	2.332146609881476E-6	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998967655139	WITHOUT_CLASSIFICATION	1.0323448616759739E-7	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9996400408847234	WITHOUT_CLASSIFICATION	3.599591152766714E-4	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999994236927213	WITHOUT_CLASSIFICATION	5.763072786956579E-6	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999387719160645	WITHOUT_CLASSIFICATION	6.1228083935555E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9935120804292885	WITHOUT_CLASSIFICATION	0.006487919570711469	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999286861124251	WITHOUT_CLASSIFICATION	7.131388757480021E-5	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999997631853577	WITHOUT_CLASSIFICATION	2.3681464240984294E-7	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993239047146106	WITHOUT_CLASSIFICATION	6.7609528538945E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.998998298517565	WITHOUT_CLASSIFICATION	0.0010017014824349468	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9999918275714328	WITHOUT_CLASSIFICATION	8.172428567298332E-6	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999993697747733	WITHOUT_CLASSIFICATION	6.302252267348881E-7	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999978995124021	WITHOUT_CLASSIFICATION	2.1004875978063553E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999945669837281	WITHOUT_CLASSIFICATION	5.433016271924691E-6	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999464323672136	WITHOUT_CLASSIFICATION	5.356763278630003E-5	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9985359491792624	WITHOUT_CLASSIFICATION	0.0014640508207376549	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.99999668176488	WITHOUT_CLASSIFICATION	3.318235119963908E-6	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999893632563486	WITHOUT_CLASSIFICATION	1.0636743651402245E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999831319146226	WITHOUT_CLASSIFICATION	1.686808537735705E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9992862822531445	WITHOUT_CLASSIFICATION	7.137177468554719E-4	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997548244195	WITHOUT_CLASSIFICATION	2.451755804562944E-7	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9997455104839723	WITHOUT_CLASSIFICATION	2.5448951602771366E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999990233678763	WITHOUT_CLASSIFICATION	9.766321237432793E-7	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999980163170346	WITHOUT_CLASSIFICATION	1.983682965419361E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999989550194821	WITHOUT_CLASSIFICATION	1.0449805178551461E-6	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9988503476483458	WITHOUT_CLASSIFICATION	0.0011496523516541697	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.9993239047146106	WITHOUT_CLASSIFICATION	6.7609528538945E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9996010468354452	WITHOUT_CLASSIFICATION	3.9895316455484595E-4	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999991842200215	WITHOUT_CLASSIFICATION	8.15779978390511E-7	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.997540025466385	WITHOUT_CLASSIFICATION	0.002459974533614904	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999801181594	WITHOUT_CLASSIFICATION	1.9881840594289385E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999996434827076	WITHOUT_CLASSIFICATION	3.565172924245312E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999937488735801	WITHOUT_CLASSIFICATION	6.251126419898427E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9997066303016474	WITHOUT_CLASSIFICATION	2.9336969835250736E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9570488236173929	DESIGN	0.04295117638260714	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999970323075085	WITHOUT_CLASSIFICATION	2.967692491589828E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9984999832346404	WITHOUT_CLASSIFICATION	0.001500016765359642	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999887691639155	WITHOUT_CLASSIFICATION	1.1230836084587808E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999202257627	WITHOUT_CLASSIFICATION	7.977423725409131E-8	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999944785617134	WITHOUT_CLASSIFICATION	5.521438286511326E-6	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9997766980466284	WITHOUT_CLASSIFICATION	2.2330195337155506E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999997780859144	WITHOUT_CLASSIFICATION	2.2191408556530264E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999956368106157	WITHOUT_CLASSIFICATION	4.363189384363781E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999904781968	WITHOUT_CLASSIFICATION	9.521803243652244E-9	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999884729306	WITHOUT_CLASSIFICATION	1.1527069493220076E-8	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999516981678632	WITHOUT_CLASSIFICATION	4.830183213670058E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9996010468354452	WITHOUT_CLASSIFICATION	3.9895316455484595E-4	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999999501252911	WITHOUT_CLASSIFICATION	4.987470889197423E-7	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9999880533295323	WITHOUT_CLASSIFICATION	1.194667046767065E-5	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999993203323576	WITHOUT_CLASSIFICATION	6.796676424314385E-7	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9850848548719074	WITHOUT_CLASSIFICATION	0.0149151451280925	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998227625432671	WITHOUT_CLASSIFICATION	1.7723745673302313E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979126910018133	WITHOUT_CLASSIFICATION	0.0020873089981866566	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979126910018133	WITHOUT_CLASSIFICATION	0.0020873089981866566	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999989695791253	WITHOUT_CLASSIFICATION	1.0304208746695686E-6	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979126910018133	WITHOUT_CLASSIFICATION	0.0020873089981866566	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9979126910018133	WITHOUT_CLASSIFICATION	0.0020873089981866566	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.8082891517388091	DESIGN	0.19171084826119086	WITHOUT_CLASSIFICATION
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999996319912638	WITHOUT_CLASSIFICATION	3.68008736157146E-7	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9998647794105516	WITHOUT_CLASSIFICATION	1.3522058944835416E-4	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999722095657769	WITHOUT_CLASSIFICATION	2.779043422305908E-5	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9905005700477991	WITHOUT_CLASSIFICATION	0.009499429952200874	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9963828711627201	WITHOUT_CLASSIFICATION	0.0036171288372800633	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9999683402811738	WITHOUT_CLASSIFICATION	3.165971882617641E-5	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999717362998	WITHOUT_CLASSIFICATION	2.8263700181059898E-8	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9997864255341677	WITHOUT_CLASSIFICATION	2.135744658322988E-4	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998713232904708	WITHOUT_CLASSIFICATION	1.2867670952916314E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9975460897330047	WITHOUT_CLASSIFICATION	0.002453910266995368	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997630472741503	WITHOUT_CLASSIFICATION	2.369527258497598E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.999985428535176	WITHOUT_CLASSIFICATION	1.4571464823867607E-5	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999952124097033	WITHOUT_CLASSIFICATION	4.787590296686313E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999950747165157	WITHOUT_CLASSIFICATION	4.9252834843577925E-6	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9997231425713773	WITHOUT_CLASSIFICATION	2.768574286226824E-4	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999867792188	WITHOUT_CLASSIFICATION	1.3220781259444366E-8	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999742142395	WITHOUT_CLASSIFICATION	2.5785760485236594E-8	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9612472949699238	WITHOUT_CLASSIFICATION	0.03875270503007621	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999677259339381	WITHOUT_CLASSIFICATION	3.227406606193965E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.9999259173549421	WITHOUT_CLASSIFICATION	7.40826450580388E-5	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999990187083593	WITHOUT_CLASSIFICATION	9.812916407279043E-7	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999867792188	WITHOUT_CLASSIFICATION	1.3220781259444366E-8	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.998998298517565	WITHOUT_CLASSIFICATION	0.0010017014824349468	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999943178627995	WITHOUT_CLASSIFICATION	5.682137200521423E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998680439451	WITHOUT_CLASSIFICATION	1.319560548943026E-7	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998989302846	WITHOUT_CLASSIFICATION	1.0106971539444E-6	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999995522220875	WITHOUT_CLASSIFICATION	4.4777791251039696E-7	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.999991845559487	WITHOUT_CLASSIFICATION	8.154440513114257E-6	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999881656286561	WITHOUT_CLASSIFICATION	1.1834371343993579E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999737207083206	WITHOUT_CLASSIFICATION	2.6279291679419533E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995533187945	WITHOUT_CLASSIFICATION	4.466812054305622E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9989668630874072	WITHOUT_CLASSIFICATION	0.0010331369125927603	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9994687740933258	WITHOUT_CLASSIFICATION	5.312259066741156E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999995452304857	WITHOUT_CLASSIFICATION	4.5476951431408974E-7	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999762082703036	WITHOUT_CLASSIFICATION	2.379172969635348E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999962885702	WITHOUT_CLASSIFICATION	3.7114299057495673E-9	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999830413172093	WITHOUT_CLASSIFICATION	1.6958682790752336E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999997490718131	WITHOUT_CLASSIFICATION	2.509281869060006E-7	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999883303755617	WITHOUT_CLASSIFICATION	1.1669624438292494E-5	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999990645371554	WITHOUT_CLASSIFICATION	9.354628445882169E-7	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9998546213657373	WITHOUT_CLASSIFICATION	1.45378634262551E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999994772993677	WITHOUT_CLASSIFICATION	5.227006323051428E-6	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9986725928983595	WITHOUT_CLASSIFICATION	0.0013274071016405502	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999908305313514	WITHOUT_CLASSIFICATION	9.169468648548211E-6	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.999961015893239	WITHOUT_CLASSIFICATION	3.898410676091388E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999995533187945	WITHOUT_CLASSIFICATION	4.466812054305622E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.999996688505773	WITHOUT_CLASSIFICATION	3.311494226966854E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9999687575503945	WITHOUT_CLASSIFICATION	3.1242449605526024E-5	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999877142664526	WITHOUT_CLASSIFICATION	1.2285733547407392E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9956921783740393	WITHOUT_CLASSIFICATION	0.004307821625960667	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996994863328	WITHOUT_CLASSIFICATION	3.005136671200865E-7	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999852312904068	WITHOUT_CLASSIFICATION	1.476870959307177E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999767751381677	WITHOUT_CLASSIFICATION	2.3224861832142154E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.99997844587838	WITHOUT_CLASSIFICATION	2.1554121620003603E-5	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999926873253767	WITHOUT_CLASSIFICATION	7.312674623190209E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999485249246888	WITHOUT_CLASSIFICATION	5.147507531112872E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993845280835	WITHOUT_CLASSIFICATION	6.154719165965212E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999999261488425	WITHOUT_CLASSIFICATION	7.385115757196281E-8	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.873047722416906	WITHOUT_CLASSIFICATION	0.12695227758309413	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999754973995	WITHOUT_CLASSIFICATION	2.450260047461866E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999607074298212	WITHOUT_CLASSIFICATION	3.9292570178873214E-5	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999981065126983	WITHOUT_CLASSIFICATION	1.8934873017260734E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999951347650308	WITHOUT_CLASSIFICATION	4.865234969172886E-6	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993845280835	WITHOUT_CLASSIFICATION	6.154719165965212E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999821620396719	WITHOUT_CLASSIFICATION	1.7837960328043312E-5	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.7881831683317234	WITHOUT_CLASSIFICATION	0.21181683166827658	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999987995784712	WITHOUT_CLASSIFICATION	1.2004215288385742E-6	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997883478528913	WITHOUT_CLASSIFICATION	2.1165214710870561E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.9999737717727082	WITHOUT_CLASSIFICATION	2.6228227291824075E-5	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999981223372035	WITHOUT_CLASSIFICATION	1.8776627965337502E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999607074298212	WITHOUT_CLASSIFICATION	3.9292570178873214E-5	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.999999959172799	WITHOUT_CLASSIFICATION	4.082720091733985E-8	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999513295483	WITHOUT_CLASSIFICATION	4.867045169703055E-7	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996154045776	WITHOUT_CLASSIFICATION	3.84595422431259E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999796235028428	WITHOUT_CLASSIFICATION	2.0376497157229816E-5	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999961380920493	WITHOUT_CLASSIFICATION	3.861907950615127E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935808626216	WITHOUT_CLASSIFICATION	6.419137378379693E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998834667573	WITHOUT_CLASSIFICATION	1.165332427529526E-7	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999998834667573	WITHOUT_CLASSIFICATION	1.165332427529526E-7	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9977096286114833	WITHOUT_CLASSIFICATION	0.0022903713885167433	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999996512608735	WITHOUT_CLASSIFICATION	3.4873912646535296E-7	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9999879344292185	WITHOUT_CLASSIFICATION	1.2065570781463014E-5	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999983316755644	WITHOUT_CLASSIFICATION	1.6683244355383625E-6	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999859868365567	WITHOUT_CLASSIFICATION	1.4013163443397259E-5	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877254738461	WITHOUT_CLASSIFICATION	1.2274526153899988E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990341817936	WITHOUT_CLASSIFICATION	9.658182063846725E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976081881319	WITHOUT_CLASSIFICATION	2.391811868118467E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9982736499542154	WITHOUT_CLASSIFICATION	0.0017263500457844654	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999814751815	WITHOUT_CLASSIFICATION	1.8524818390451123E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999877254738461	WITHOUT_CLASSIFICATION	1.2274526153899988E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990341817936	WITHOUT_CLASSIFICATION	9.658182063846725E-7	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976081881319	WITHOUT_CLASSIFICATION	2.391811868118467E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999968712312391	WITHOUT_CLASSIFICATION	3.128768760918144E-6	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9955124567036795	WITHOUT_CLASSIFICATION	0.004487543296320598	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999873477105935	WITHOUT_CLASSIFICATION	1.2652289406521294E-5	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9960901492376331	WITHOUT_CLASSIFICATION	0.003909850762366941	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999922027215313	WITHOUT_CLASSIFICATION	7.79727846865662E-6	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9999890600310161	WITHOUT_CLASSIFICATION	1.0939968983837135E-5	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999999513004125	WITHOUT_CLASSIFICATION	4.869958749005543E-7	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9781954339306608	WITHOUT_CLASSIFICATION	0.021804566069339205	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9996436063775702	WITHOUT_CLASSIFICATION	3.563936224297498E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.999979366135917	WITHOUT_CLASSIFICATION	2.063386408307483E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999868733887534	WITHOUT_CLASSIFICATION	1.3126611246537102E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9478107032793481	WITHOUT_CLASSIFICATION	0.05218929672065178	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9986597774688598	WITHOUT_CLASSIFICATION	0.0013402225311401263	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998034891700789	WITHOUT_CLASSIFICATION	1.9651082992111092E-4	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998850033957148	WITHOUT_CLASSIFICATION	1.1499660428510005E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999876126053484	WITHOUT_CLASSIFICATION	1.2387394651459607E-5	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995465212178452	WITHOUT_CLASSIFICATION	4.5347878215485596E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999635041303746	WITHOUT_CLASSIFICATION	3.649586962537667E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999966825891835	WITHOUT_CLASSIFICATION	3.31741081650057E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999801948436	WITHOUT_CLASSIFICATION	1.980515644869825E-8	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999948946222489	WITHOUT_CLASSIFICATION	5.1053777511338275E-6	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9526283221027559	WITHOUT_CLASSIFICATION	0.04737167789724416	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999996353522422	WITHOUT_CLASSIFICATION	3.646477577395977E-7	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999824200565307	WITHOUT_CLASSIFICATION	1.757994346920511E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999984717488095	WITHOUT_CLASSIFICATION	1.5282511905029817E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9998340015646486	WITHOUT_CLASSIFICATION	1.65998435351406E-4	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999998019738326	WITHOUT_CLASSIFICATION	1.980261673925481E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970111613607	WITHOUT_CLASSIFICATION	2.988838639178107E-6	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9991328764510402	WITHOUT_CLASSIFICATION	8.671235489598717E-4	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955441879672	WITHOUT_CLASSIFICATION	4.4558120328217645E-6	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999177878439	WITHOUT_CLASSIFICATION	8.221215615345203E-8	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988123900859	WITHOUT_CLASSIFICATION	1.187609914114311E-6	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999988123900859	WITHOUT_CLASSIFICATION	1.187609914114311E-6	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999945279553333	WITHOUT_CLASSIFICATION	5.47204466676046E-6	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999997746025	WITHOUT_CLASSIFICATION	2.2539749247917856E-10	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999628638124786	WITHOUT_CLASSIFICATION	3.713618752146015E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997614376293881	WITHOUT_CLASSIFICATION	2.385623706118967E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999290085540324	WITHOUT_CLASSIFICATION	7.099144596756481E-5	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9996990558329554	WITHOUT_CLASSIFICATION	3.009441670445871E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9999248647769791	WITHOUT_CLASSIFICATION	7.513522302096742E-5	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999995171573565	WITHOUT_CLASSIFICATION	4.828426435510985E-7	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9999733819115245	WITHOUT_CLASSIFICATION	2.66180884754947E-5	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999450536684	WITHOUT_CLASSIFICATION	5.4946331654037474E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993531661143	WITHOUT_CLASSIFICATION	6.468338857471367E-7	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999458484778	WITHOUT_CLASSIFICATION	5.415152207795699E-8	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998691552585	WITHOUT_CLASSIFICATION	1.3084474153695578E-7	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998648035846	WITHOUT_CLASSIFICATION	1.35196415296838E-7	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999067465283	WITHOUT_CLASSIFICATION	9.325347173840801E-8	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999035182946	WITHOUT_CLASSIFICATION	9.648170548321994E-8	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998283067674	WITHOUT_CLASSIFICATION	1.7169323261548026E-7	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999839726098	WITHOUT_CLASSIFICATION	1.602739017990405E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996977372625	WITHOUT_CLASSIFICATION	3.022627375630067E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990118702097	WITHOUT_CLASSIFICATION	9.881297903852337E-7	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999815209184811	WITHOUT_CLASSIFICATION	1.8479081518859815E-5	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999851090308475	WITHOUT_CLASSIFICATION	1.4890969152472838E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936781322492994	WITHOUT_CLASSIFICATION	0.006321867750700724	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999876440788883	WITHOUT_CLASSIFICATION	1.2355921111611775E-5	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9998124202018732	WITHOUT_CLASSIFICATION	1.8757979812678802E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9916421784888878	WITHOUT_CLASSIFICATION	0.008357821511112164	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999579855658	WITHOUT_CLASSIFICATION	4.20144341871844E-8	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.999967446056414	WITHOUT_CLASSIFICATION	3.2553943586028856E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936781322492994	WITHOUT_CLASSIFICATION	0.006321867750700724	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936781322492994	WITHOUT_CLASSIFICATION	0.006321867750700724	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9987357668605308	WITHOUT_CLASSIFICATION	0.0012642331394692064	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999999086171901	WITHOUT_CLASSIFICATION	9.138280986668773E-8	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999209598479017	WITHOUT_CLASSIFICATION	7.904015209824467E-5	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999741541278576	WITHOUT_CLASSIFICATION	2.5845872142429247E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997635065077	WITHOUT_CLASSIFICATION	2.3649349242423495E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999999801948436	WITHOUT_CLASSIFICATION	1.980515644869825E-8	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999988882412449	WITHOUT_CLASSIFICATION	1.1117587549860274E-6	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999986620419246	WITHOUT_CLASSIFICATION	1.3379580754910714E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999731129711222	WITHOUT_CLASSIFICATION	2.688702887770145E-5	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999704924551982	WITHOUT_CLASSIFICATION	2.950754480170342E-5	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999991338619774	WITHOUT_CLASSIFICATION	8.661380226880589E-7	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999979672620486	WITHOUT_CLASSIFICATION	2.0327379514009222E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987595255169984	WITHOUT_CLASSIFICATION	0.0012404744830015924	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9987595255169984	WITHOUT_CLASSIFICATION	0.0012404744830015924	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996459569096996	WITHOUT_CLASSIFICATION	3.5404309030038605E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9996459569096996	WITHOUT_CLASSIFICATION	3.5404309030038605E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999911280671901	WITHOUT_CLASSIFICATION	8.871932809898752E-6	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999985490164203	WITHOUT_CLASSIFICATION	1.4509835797314545E-6	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999989139968025	WITHOUT_CLASSIFICATION	1.086003197511165E-6	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998379958950697	WITHOUT_CLASSIFICATION	1.6200410493034126E-4	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9997845138825677	WITHOUT_CLASSIFICATION	2.1548611743229927E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.7600783523237928	DESIGN	0.23992164767620708	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998419552538	WITHOUT_CLASSIFICATION	1.580447461373085E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967000419944	WITHOUT_CLASSIFICATION	3.2999580056076917E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.8508541207645139	WITHOUT_CLASSIFICATION	0.14914587923548608	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9998783871142094	WITHOUT_CLASSIFICATION	1.2161288579065868E-4	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999244075145	WITHOUT_CLASSIFICATION	7.55924854840588E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999970476120754	WITHOUT_CLASSIFICATION	2.952387924654109E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999570207530055	WITHOUT_CLASSIFICATION	4.2979246994571134E-5	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999998503417162	WITHOUT_CLASSIFICATION	1.4965828372477083E-7	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999936611689041	WITHOUT_CLASSIFICATION	6.338831095918423E-6	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999863878361968	WITHOUT_CLASSIFICATION	1.3612163803156427E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999863878361968	WITHOUT_CLASSIFICATION	1.3612163803156427E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999996042585226	WITHOUT_CLASSIFICATION	3.95741477331449E-7	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999993135114416	WITHOUT_CLASSIFICATION	6.864885583350604E-7	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999987327017362	WITHOUT_CLASSIFICATION	1.2672982637783778E-6	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999734644749763	WITHOUT_CLASSIFICATION	2.6535525023682562E-5	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998828857910355	WITHOUT_CLASSIFICATION	1.1711420896448969E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954537245036	WITHOUT_CLASSIFICATION	4.5462754963943425E-5	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999454323542	WITHOUT_CLASSIFICATION	5.456764574629189E-8	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997796811927044	WITHOUT_CLASSIFICATION	2.2031880729556322E-4	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999961719197876	WITHOUT_CLASSIFICATION	3.8280802123643525E-6	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998786328822552	WITHOUT_CLASSIFICATION	1.2136711774477918E-4	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.9997026618994628	WITHOUT_CLASSIFICATION	2.9733810053716065E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999965053785675	WITHOUT_CLASSIFICATION	3.4946214324321505E-6	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998375363589	WITHOUT_CLASSIFICATION	1.624636411515881E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999782663894	WITHOUT_CLASSIFICATION	2.173361067898169E-8	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999984436549724	WITHOUT_CLASSIFICATION	1.55634502760997E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9993443269439568	WITHOUT_CLASSIFICATION	6.556730560432872E-4	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999967438337651	WITHOUT_CLASSIFICATION	3.2561662349405314E-6	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9999517135471192	WITHOUT_CLASSIFICATION	4.8286452880810366E-5	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.999925515985441	WITHOUT_CLASSIFICATION	7.448401455897788E-5	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999968533299	WITHOUT_CLASSIFICATION	3.146670127457413E-9	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999628737811	WITHOUT_CLASSIFICATION	3.7126218748096674E-8	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999995792924	WITHOUT_CLASSIFICATION	4.2070752458925625E-10	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.999982929539669	WITHOUT_CLASSIFICATION	1.707046033099702E-5	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999993056641964	WITHOUT_CLASSIFICATION	6.943358036089429E-7	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999909955347591	WITHOUT_CLASSIFICATION	9.004465240844063E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999781719966238	WITHOUT_CLASSIFICATION	2.1828003376335827E-5	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999585502843766	WITHOUT_CLASSIFICATION	4.144971562343332E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.999571848815122	WITHOUT_CLASSIFICATION	4.2815118487797614E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.999999999545509	WITHOUT_CLASSIFICATION	4.5449100486241865E-10	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999287635681583	WITHOUT_CLASSIFICATION	7.123643184172279E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999999972177184	WITHOUT_CLASSIFICATION	2.7822816239925355E-9	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999999213973353	WITHOUT_CLASSIFICATION	7.860266468691707E-8	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9993146490226389	WITHOUT_CLASSIFICATION	6.853509773611156E-4	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9996690172205058	WITHOUT_CLASSIFICATION	3.3098277949418714E-4	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999987813368091	WITHOUT_CLASSIFICATION	1.218663190807909E-6	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9946632074062143	WITHOUT_CLASSIFICATION	0.005336792593785734	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999996500665956	WITHOUT_CLASSIFICATION	3.4993340428628684E-7	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9994538649158502	WITHOUT_CLASSIFICATION	5.461350841497071E-4	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999853543687	WITHOUT_CLASSIFICATION	1.464563129304197E-8	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999893847856897	WITHOUT_CLASSIFICATION	1.0615214310385328E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999862284530565	WITHOUT_CLASSIFICATION	1.3771546943434735E-5	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999990587643777	WITHOUT_CLASSIFICATION	9.412356223763856E-7	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.6508874872672047	DESIGN	0.3491125127327954	WITHOUT_CLASSIFICATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999632178396378	WITHOUT_CLASSIFICATION	3.6782160362195156E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999840364025367	WITHOUT_CLASSIFICATION	1.5963597463334946E-5	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9996601969861213	WITHOUT_CLASSIFICATION	3.398030138786572E-4	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999966191269161	WITHOUT_CLASSIFICATION	3.380873083864229E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999936762887878	WITHOUT_CLASSIFICATION	6.323711212186531E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999731951915264	WITHOUT_CLASSIFICATION	2.6804808473563405E-5	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999963718235515	WITHOUT_CLASSIFICATION	3.6281764485410444E-6	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998959817707083	WITHOUT_CLASSIFICATION	1.0401822929172862E-4	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999950932166557	WITHOUT_CLASSIFICATION	4.906783344405164E-6	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999187603587062	WITHOUT_CLASSIFICATION	8.123964129387346E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999998119439159	WITHOUT_CLASSIFICATION	1.8805608411057172E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999995503875174	WITHOUT_CLASSIFICATION	4.4961248265558647E-7	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.9999847512322007	WITHOUT_CLASSIFICATION	1.5248767799425234E-5	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9961842658070797	WITHOUT_CLASSIFICATION	0.0038157341929202313	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999985875078214	WITHOUT_CLASSIFICATION	1.4124921786415017E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999550142675485	WITHOUT_CLASSIFICATION	4.4985732451438386E-5	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.9960248413909883	WITHOUT_CLASSIFICATION	0.0039751586090116696	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999612444309515	WITHOUT_CLASSIFICATION	3.8755569048460483E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999090891005	WITHOUT_CLASSIFICATION	9.091089946909285E-8	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999850745448	WITHOUT_CLASSIFICATION	1.492545523339729E-8	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9984163434122643	WITHOUT_CLASSIFICATION	0.0015836565877356812	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999997494527272	WITHOUT_CLASSIFICATION	2.5054727280667075E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9997232649012621	WITHOUT_CLASSIFICATION	2.767350987378597E-4	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999978401678086	WITHOUT_CLASSIFICATION	2.159832191493992E-6	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999543425845	WITHOUT_CLASSIFICATION	4.56574155514781E-8	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999956685405088	WITHOUT_CLASSIFICATION	4.331459491207596E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999956685405088	WITHOUT_CLASSIFICATION	4.331459491207596E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.999999976751588	WITHOUT_CLASSIFICATION	2.3248411967250857E-8	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9970485523072382	WITHOUT_CLASSIFICATION	0.002951447692761792	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999831134599453	WITHOUT_CLASSIFICATION	1.6886540054723717E-5	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9991919158608379	WITHOUT_CLASSIFICATION	8.080841391622279E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999997852530722	WITHOUT_CLASSIFICATION	2.1474692768959415E-7	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9993384657689498	WITHOUT_CLASSIFICATION	6.615342310501554E-4	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999907163386967	WITHOUT_CLASSIFICATION	9.283661303275128E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999638937631	WITHOUT_CLASSIFICATION	3.610623685532047E-8	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9997475220411083	WITHOUT_CLASSIFICATION	2.5247795889165404E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999991933825018	WITHOUT_CLASSIFICATION	8.066174981726471E-7	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999999592728633	WITHOUT_CLASSIFICATION	4.0727136693146835E-8	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999998566259052	WITHOUT_CLASSIFICATION	1.4337409475241666E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999987659715709	WITHOUT_CLASSIFICATION	1.2340284291863435E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999992574219894	WITHOUT_CLASSIFICATION	7.425780106282805E-7	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999575381133812	WITHOUT_CLASSIFICATION	4.2461886618899655E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6700414177253015	WITHOUT_CLASSIFICATION	0.32995858227469865	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999773208800725	WITHOUT_CLASSIFICATION	2.267911992749326E-5	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9998526678031238	WITHOUT_CLASSIFICATION	1.4733219687626544E-4	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.996150201775268	WITHOUT_CLASSIFICATION	0.0038497982247320205	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9999879047241504	WITHOUT_CLASSIFICATION	1.209527584952095E-5	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999680618105484	WITHOUT_CLASSIFICATION	3.193818945152009E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999706539462536	WITHOUT_CLASSIFICATION	2.9346053746340135E-5	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9985082318395039	WITHOUT_CLASSIFICATION	0.0014917681604960714	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9946493436460276	WITHOUT_CLASSIFICATION	0.005350656353972323	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999992171231	WITHOUT_CLASSIFICATION	7.82876925564799E-10	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9994251728153171	WITHOUT_CLASSIFICATION	5.748271846829725E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999996657432311	WITHOUT_CLASSIFICATION	3.3425676892645013E-7	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999968430032935	WITHOUT_CLASSIFICATION	3.156996706578454E-6	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.999972033468594	WITHOUT_CLASSIFICATION	2.796653140600366E-5	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9996182932655417	WITHOUT_CLASSIFICATION	3.817067344581545E-4	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999996101699413	WITHOUT_CLASSIFICATION	3.898300586942898E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999291755805755	WITHOUT_CLASSIFICATION	7.082441942456069E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999049946326684	WITHOUT_CLASSIFICATION	9.500536733162774E-5	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999750023722345	WITHOUT_CLASSIFICATION	2.4997627765505257E-5	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993821174668408	WITHOUT_CLASSIFICATION	6.178825331592821E-4	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993821174668408	WITHOUT_CLASSIFICATION	6.178825331592821E-4	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999999514380416	WITHOUT_CLASSIFICATION	4.856195839396617E-7	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9996518546489951	WITHOUT_CLASSIFICATION	3.4814535100487253E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999696080689806	WITHOUT_CLASSIFICATION	3.039193101933143E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999648630898244	WITHOUT_CLASSIFICATION	3.5136910175607135E-5	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999998497673035	WITHOUT_CLASSIFICATION	1.5023269639313947E-7	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999864848816062	WITHOUT_CLASSIFICATION	1.3515118393773016E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999976218539308	WITHOUT_CLASSIFICATION	2.378146069086823E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.9999982172314844	WITHOUT_CLASSIFICATION	1.7827685156601687E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9833345663230273	WITHOUT_CLASSIFICATION	0.016665433676972784	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998115522668	WITHOUT_CLASSIFICATION	1.8844773327063034E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999873091078	WITHOUT_CLASSIFICATION	1.269089218521509E-8	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9999043818426027	WITHOUT_CLASSIFICATION	9.561815739737543E-5	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.99990881746778	WITHOUT_CLASSIFICATION	9.118253221994689E-5	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9998705678419787	WITHOUT_CLASSIFICATION	1.2943215802127065E-4	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999889480752	WITHOUT_CLASSIFICATION	1.1051924808927285E-8	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998186877782316	WITHOUT_CLASSIFICATION	1.8131222176836356E-4	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9998186877782316	WITHOUT_CLASSIFICATION	1.8131222176836356E-4	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999992470916393	WITHOUT_CLASSIFICATION	7.52908360677902E-7	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999992596271325	WITHOUT_CLASSIFICATION	7.403728675636613E-7	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9814809016594049	WITHOUT_CLASSIFICATION	0.018519098340595	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999946313849135	WITHOUT_CLASSIFICATION	5.368615086471617E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997493378631234	WITHOUT_CLASSIFICATION	2.506621368766323E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999996715666972	WITHOUT_CLASSIFICATION	3.2843330287927515E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999971670648569	WITHOUT_CLASSIFICATION	2.8329351430451525E-6	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9999971670648569	WITHOUT_CLASSIFICATION	2.8329351430451525E-6	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999993930582795	WITHOUT_CLASSIFICATION	6.069417205703975E-7	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9991995312676335	WITHOUT_CLASSIFICATION	8.004687323666068E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999999945956948	WITHOUT_CLASSIFICATION	5.404305190059188E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999902854736075	WITHOUT_CLASSIFICATION	9.714526392417357E-6	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.935440374979313	WITHOUT_CLASSIFICATION	0.06455962502068704	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999723787873034	WITHOUT_CLASSIFICATION	2.7621212696597882E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999631649051579	WITHOUT_CLASSIFICATION	3.683509484197913E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999998075065573	WITHOUT_CLASSIFICATION	1.9249344277067334E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.9999996496962683	WITHOUT_CLASSIFICATION	3.503037316871645E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9999167468525012	WITHOUT_CLASSIFICATION	8.325314749883283E-5	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9993808307840224	WITHOUT_CLASSIFICATION	6.191692159775459E-4	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999943636766632	WITHOUT_CLASSIFICATION	5.636323336757305E-6	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9992589097209327	WITHOUT_CLASSIFICATION	7.410902790672047E-4	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999699203026465	WITHOUT_CLASSIFICATION	3.007969735349609E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9995213734576887	WITHOUT_CLASSIFICATION	4.7862654231131836E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999860582130675	WITHOUT_CLASSIFICATION	1.3941786932517702E-5	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999853822695	WITHOUT_CLASSIFICATION	1.4617730611119944E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.99988471936444	WITHOUT_CLASSIFICATION	1.152806355600885E-4	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9993927329116381	WITHOUT_CLASSIFICATION	6.072670883619502E-4	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999977610301573	WITHOUT_CLASSIFICATION	2.2389698427242794E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999999715031819	WITHOUT_CLASSIFICATION	2.8496818208442634E-8	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999910537303552	WITHOUT_CLASSIFICATION	8.946269644810454E-6	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999976911168255	WITHOUT_CLASSIFICATION	2.308883174499575E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999680635727988	WITHOUT_CLASSIFICATION	3.1936427201316105E-5	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.999990034565775	WITHOUT_CLASSIFICATION	9.965434224999643E-6	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999972965096146	WITHOUT_CLASSIFICATION	2.703490385354961E-6	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999637897522181	WITHOUT_CLASSIFICATION	3.621024778181353E-5	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9991915457179797	WITHOUT_CLASSIFICATION	8.084542820202581E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999924020060608	WITHOUT_CLASSIFICATION	7.59799393922754E-6	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999867035176	WITHOUT_CLASSIFICATION	1.329648232993597E-8	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9974294149731452	WITHOUT_CLASSIFICATION	0.0025705850268546862	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.999872022121392	WITHOUT_CLASSIFICATION	1.2797787860790752E-4	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9999765864972108	WITHOUT_CLASSIFICATION	2.341350278928264E-5	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999945830241	WITHOUT_CLASSIFICATION	5.416975870275047E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999968878869948	WITHOUT_CLASSIFICATION	3.112113005177879E-6	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.9999010386281357	WITHOUT_CLASSIFICATION	9.896137186426019E-5	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9990627680446731	WITHOUT_CLASSIFICATION	9.37231955326878E-4	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999544956647626	WITHOUT_CLASSIFICATION	4.550433523739336E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999895739601681	WITHOUT_CLASSIFICATION	1.0426039831961105E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999969163111482	WITHOUT_CLASSIFICATION	3.083688851732E-6	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999999526726856	WITHOUT_CLASSIFICATION	4.732731450678845E-8	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999936679500467	WITHOUT_CLASSIFICATION	6.33204995335896E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999511605497583	WITHOUT_CLASSIFICATION	4.883945024162827E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999999213953538	WITHOUT_CLASSIFICATION	7.860464619916346E-8	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999916142	WITHOUT_CLASSIFICATION	8.385760829599413E-12	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999988654749662	WITHOUT_CLASSIFICATION	1.1345250337878636E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999895739601681	WITHOUT_CLASSIFICATION	1.0426039831961105E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999969163111482	WITHOUT_CLASSIFICATION	3.083688851732E-6	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999921498153758	WITHOUT_CLASSIFICATION	7.85018462427948E-6	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9996561157065266	WITHOUT_CLASSIFICATION	3.438842934734316E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999940290248884	WITHOUT_CLASSIFICATION	5.970975111533084E-6	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999994228984093	WITHOUT_CLASSIFICATION	5.771015907143272E-7	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999998300329278	WITHOUT_CLASSIFICATION	1.699670721128284E-7	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999538352417089	WITHOUT_CLASSIFICATION	4.616475829113553E-5	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999994982472381	WITHOUT_CLASSIFICATION	5.01752761803712E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999946490662761	WITHOUT_CLASSIFICATION	5.35093372386444E-6	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999958168367208	WITHOUT_CLASSIFICATION	4.183163279246653E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5158279822404523	DESIGN	0.48417201775954766	WITHOUT_CLASSIFICATION
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999975629926	WITHOUT_CLASSIFICATION	2.4370072897505572E-9	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5158279822404523	DESIGN	0.48417201775954766	WITHOUT_CLASSIFICATION
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999978089703	WITHOUT_CLASSIFICATION	2.1910296741389632E-9	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999991071776555	WITHOUT_CLASSIFICATION	8.928223445044534E-6	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999999616060854	WITHOUT_CLASSIFICATION	3.839391454049454E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981910998234	WITHOUT_CLASSIFICATION	1.8089001766230103E-6	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999762032357997	WITHOUT_CLASSIFICATION	2.3796764200214008E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999362950618627	WITHOUT_CLASSIFICATION	6.37049381374298E-5	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9999362950618627	WITHOUT_CLASSIFICATION	6.37049381374298E-5	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999921243433182	WITHOUT_CLASSIFICATION	7.875656681760994E-6	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.999980002886098	WITHOUT_CLASSIFICATION	1.9997113902042863E-5	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999970182239145	WITHOUT_CLASSIFICATION	2.9817760855232452E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999881075619639	WITHOUT_CLASSIFICATION	1.1892438036146008E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9997135821998506	WITHOUT_CLASSIFICATION	2.8641780014936947E-4	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5351878028847585	WITHOUT_CLASSIFICATION	0.46481219711524163	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.999996193971974	WITHOUT_CLASSIFICATION	3.8060280259235704E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999997580654847	WITHOUT_CLASSIFICATION	2.4193451529545776E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999901817777982	WITHOUT_CLASSIFICATION	9.818222201828812E-6	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.9999525373081078	WITHOUT_CLASSIFICATION	4.7462691892062185E-5	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.99998507493515	WITHOUT_CLASSIFICATION	1.4925064850112981E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999998772911692	WITHOUT_CLASSIFICATION	1.2270883076973847E-7	DESIGN
//types	WITHOUT_CLASSIFICATION	0.99963450304214	WITHOUT_CLASSIFICATION	3.654969578599482E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.999999230899649	WITHOUT_CLASSIFICATION	7.691003509829325E-7	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.99998271772703	WITHOUT_CLASSIFICATION	1.7282272970106285E-5	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.99999962598099	WITHOUT_CLASSIFICATION	3.7401900993297446E-7	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998558317452	WITHOUT_CLASSIFICATION	1.4416825469077908E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999915751658941	WITHOUT_CLASSIFICATION	8.424834105865827E-6	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999650763726	WITHOUT_CLASSIFICATION	3.492362752055953E-8	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9998020670111997	WITHOUT_CLASSIFICATION	1.9793298880036125E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999395505110885	WITHOUT_CLASSIFICATION	6.044948891142365E-5	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999994476848714	WITHOUT_CLASSIFICATION	5.523151287098439E-7	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999738946804528	WITHOUT_CLASSIFICATION	2.6105319547124047E-5	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999995103146958	WITHOUT_CLASSIFICATION	4.896853042776224E-7	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999975461031352	WITHOUT_CLASSIFICATION	2.4538968648354794E-6	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9996835287830281	WITHOUT_CLASSIFICATION	3.164712169718563E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999872869003892	WITHOUT_CLASSIFICATION	1.2713099610853088E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9986848771116217	WITHOUT_CLASSIFICATION	0.001315122888378285	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.8933135277587075	WITHOUT_CLASSIFICATION	0.10668647224129249	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9012827061054031	WITHOUT_CLASSIFICATION	0.09871729389459696	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.5344169077806386	WITHOUT_CLASSIFICATION	0.4655830922193615	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9994164443567956	WITHOUT_CLASSIFICATION	5.835556432044917E-4	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.999996193971974	WITHOUT_CLASSIFICATION	3.8060280259235704E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999831667636553	WITHOUT_CLASSIFICATION	1.6833236344730323E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9999675650853055	WITHOUT_CLASSIFICATION	3.243491469450827E-5	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9261757650569888	WITHOUT_CLASSIFICATION	0.07382423494301112	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.999999904471531	WITHOUT_CLASSIFICATION	9.552846898612444E-8	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999946660299063	WITHOUT_CLASSIFICATION	5.33397009373956E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999982309501321	WITHOUT_CLASSIFICATION	1.7690498680388275E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999881075619639	WITHOUT_CLASSIFICATION	1.1892438036146008E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999881075619639	WITHOUT_CLASSIFICATION	1.1892438036146008E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999987070525594	WITHOUT_CLASSIFICATION	1.2929474404808389E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999992142024223	WITHOUT_CLASSIFICATION	7.857975775985882E-7	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9989054334931973	WITHOUT_CLASSIFICATION	0.0010945665068027512	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999952090118267	WITHOUT_CLASSIFICATION	4.790988173258988E-6	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999926430147391	WITHOUT_CLASSIFICATION	7.356985260968193E-6	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9994484369508134	WITHOUT_CLASSIFICATION	5.51563049186568E-4	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9942726611324759	WITHOUT_CLASSIFICATION	0.005727338867524051	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.99999887940645	WITHOUT_CLASSIFICATION	1.1205935499167498E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997476556525731	WITHOUT_CLASSIFICATION	2.5234434742693184E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999818665256	WITHOUT_CLASSIFICATION	1.8133474399495962E-6	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999297064583961	WITHOUT_CLASSIFICATION	7.029354160401584E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999745534793553	WITHOUT_CLASSIFICATION	2.5446520644688932E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9998590892193705	WITHOUT_CLASSIFICATION	1.409107806294727E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999818665256	WITHOUT_CLASSIFICATION	1.8133474399495962E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999899590141774	WITHOUT_CLASSIFICATION	1.004098582253229E-5	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9933042581080648	WITHOUT_CLASSIFICATION	0.006695741891935253	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999976322315869	WITHOUT_CLASSIFICATION	2.367768413003891E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.9765508147333358	DESIGN	0.023449185266664247	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999745534793553	WITHOUT_CLASSIFICATION	2.5446520644688932E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999788633002312	WITHOUT_CLASSIFICATION	2.1136699768814843E-5	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999995601257672	WITHOUT_CLASSIFICATION	4.39874232814707E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997549804147	WITHOUT_CLASSIFICATION	2.450195851952152E-7	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999815900290583	WITHOUT_CLASSIFICATION	1.840997094168848E-5	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9998295590523301	WITHOUT_CLASSIFICATION	1.7044094767000215E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999983475244811	WITHOUT_CLASSIFICATION	1.6524755189133529E-6	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999980780149441	WITHOUT_CLASSIFICATION	1.9219850557944725E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999906464328305	WITHOUT_CLASSIFICATION	9.353567169520528E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9996282500003956	WITHOUT_CLASSIFICATION	3.7174999960447753E-4	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999597711945709	WITHOUT_CLASSIFICATION	4.022880542906059E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.992697856164307	WITHOUT_CLASSIFICATION	0.007302143835693053	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998810308698666	WITHOUT_CLASSIFICATION	1.1896913013347471E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.99999818665256	WITHOUT_CLASSIFICATION	1.8133474399495962E-6	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999788633002312	WITHOUT_CLASSIFICATION	2.1136699768814843E-5	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997549804147	WITHOUT_CLASSIFICATION	2.450195851952152E-7	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999845311883273	WITHOUT_CLASSIFICATION	1.5468811672731002E-5	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9955174249625454	WITHOUT_CLASSIFICATION	0.004482575037454588	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999895432517409	WITHOUT_CLASSIFICATION	1.0456748259122038E-5	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999745534793553	WITHOUT_CLASSIFICATION	2.5446520644688932E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.999981075270508	WITHOUT_CLASSIFICATION	1.8924729492075803E-5	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999999910003839	WITHOUT_CLASSIFICATION	8.999616099334463E-8	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999958746188883	WITHOUT_CLASSIFICATION	4.125381111635686E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999771387717804	WITHOUT_CLASSIFICATION	2.2861228219573834E-5	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999906464328305	WITHOUT_CLASSIFICATION	9.353567169520528E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999899590141774	WITHOUT_CLASSIFICATION	1.004098582253229E-5	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999983655179765	WITHOUT_CLASSIFICATION	1.6344820235861166E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999989182353364	WITHOUT_CLASSIFICATION	1.0817646635811167E-6	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9998661846100315	WITHOUT_CLASSIFICATION	1.3381538996836632E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9990056774506176	WITHOUT_CLASSIFICATION	9.943225493823642E-4	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9978723226079584	WITHOUT_CLASSIFICATION	0.0021276773920416306	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999299415200921	WITHOUT_CLASSIFICATION	7.005847990800674E-5	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9993352298554923	WITHOUT_CLASSIFICATION	6.647701445075802E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981910998234	WITHOUT_CLASSIFICATION	1.8089001766230103E-6	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994320667406009	WITHOUT_CLASSIFICATION	5.679332593990765E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999991211157221	WITHOUT_CLASSIFICATION	8.78884277902254E-7	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.999967405305996	WITHOUT_CLASSIFICATION	3.259469400396506E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998967671587	WITHOUT_CLASSIFICATION	1.0323284125981023E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999057835293	WITHOUT_CLASSIFICATION	9.421647070100118E-8	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999995098840521	WITHOUT_CLASSIFICATION	4.901159479521503E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999982698068135	WITHOUT_CLASSIFICATION	1.7301931864864176E-6	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999996427055917	WITHOUT_CLASSIFICATION	3.5729440821629563E-7	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999771387717804	WITHOUT_CLASSIFICATION	2.2861228219573834E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999979349035807	WITHOUT_CLASSIFICATION	2.065096419287307E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999987322215522	WITHOUT_CLASSIFICATION	1.267778447824975E-6	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999928579758207	WITHOUT_CLASSIFICATION	7.142024179319702E-6	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999952008677655	WITHOUT_CLASSIFICATION	4.799132234518562E-6	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9935638866296503	WITHOUT_CLASSIFICATION	0.006436113370349646	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9969540467747561	WITHOUT_CLASSIFICATION	0.003045953225243916	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999987179582667	WITHOUT_CLASSIFICATION	1.2820417333708465E-6	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9984114423941888	WITHOUT_CLASSIFICATION	0.0015885576058112102	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999964787922397	WITHOUT_CLASSIFICATION	3.5212077602150414E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.996142692349185	WITHOUT_CLASSIFICATION	0.003857307650814987	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999985722121573	WITHOUT_CLASSIFICATION	1.427787842774297E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999990522071376	WITHOUT_CLASSIFICATION	9.477928623379025E-7	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.8702962250688404	WITHOUT_CLASSIFICATION	0.12970377493115956	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.9999705051192573	WITHOUT_CLASSIFICATION	2.9494880742647876E-5	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999844019079012	WITHOUT_CLASSIFICATION	1.559809209883104E-5	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999987645540053	WITHOUT_CLASSIFICATION	1.2354459947618829E-6	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9437736032235574	WITHOUT_CLASSIFICATION	0.05622639677644258	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999951262794734	WITHOUT_CLASSIFICATION	4.87372052661854E-6	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999896496739185	WITHOUT_CLASSIFICATION	1.0350326081568603E-5	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9991699977891733	WITHOUT_CLASSIFICATION	8.300022108267968E-4	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999970975200858	WITHOUT_CLASSIFICATION	2.902479914181972E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999629441247501	WITHOUT_CLASSIFICATION	3.7055875249887246E-5	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999999737483859	WITHOUT_CLASSIFICATION	2.625161400499188E-8	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999999802741107	WITHOUT_CLASSIFICATION	1.972588920561797E-8	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.999999668156011	WITHOUT_CLASSIFICATION	3.318439890008419E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8059258157267819	DESIGN	0.19407418427321796	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999904375640897	WITHOUT_CLASSIFICATION	9.562435910315572E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999999199436782	WITHOUT_CLASSIFICATION	8.00563218145036E-8	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999920695270754	WITHOUT_CLASSIFICATION	7.930472924617128E-6	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.794785062876832	WITHOUT_CLASSIFICATION	0.20521493712316793	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999774517755395	WITHOUT_CLASSIFICATION	2.254822446048245E-5	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9988897753655215	WITHOUT_CLASSIFICATION	0.0011102246344784998	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998514001937587	WITHOUT_CLASSIFICATION	1.485998062412843E-4	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9963950997586157	WITHOUT_CLASSIFICATION	0.0036049002413842974	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999829094903746	WITHOUT_CLASSIFICATION	1.709050962542445E-5	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999030265582	WITHOUT_CLASSIFICATION	9.697344184721537E-8	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999420222224211	WITHOUT_CLASSIFICATION	5.7977777578892155E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9246620459045255	WITHOUT_CLASSIFICATION	0.0753379540954745	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999999030265582	WITHOUT_CLASSIFICATION	9.697344184721537E-8	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9999829094903746	WITHOUT_CLASSIFICATION	1.709050962542445E-5	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999420222224211	WITHOUT_CLASSIFICATION	5.7977777578892155E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.999955288462123	WITHOUT_CLASSIFICATION	4.4711537876983085E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999895891256968	WITHOUT_CLASSIFICATION	1.0410874303085234E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999780109072	WITHOUT_CLASSIFICATION	2.1989092758659686E-8	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.9968294879397303	WITHOUT_CLASSIFICATION	0.003170512060269839	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9998898645694073	WITHOUT_CLASSIFICATION	1.1013543059270551E-4	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9998345001136744	DESIGN	1.654998863255689E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.8673883539531325	DESIGN	0.13261164604686745	WITHOUT_CLASSIFICATION
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9999459235843882	WITHOUT_CLASSIFICATION	5.4076415611813365E-5	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9996303141285964	WITHOUT_CLASSIFICATION	3.696858714036093E-4	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999968672348556	WITHOUT_CLASSIFICATION	3.132765144349444E-6	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999895194835601	WITHOUT_CLASSIFICATION	1.0480516439992507E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998610548379516	WITHOUT_CLASSIFICATION	1.3894516204840903E-4	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999725019801546	WITHOUT_CLASSIFICATION	2.7498019845365484E-5	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.9955613521365769	WITHOUT_CLASSIFICATION	0.004438647863423103	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999996385005914	WITHOUT_CLASSIFICATION	3.614994086909659E-7	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999976057198136	WITHOUT_CLASSIFICATION	2.394280186470608E-6	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999980476857024	WITHOUT_CLASSIFICATION	1.9523142976043842E-5	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9999169371787316	WITHOUT_CLASSIFICATION	8.306282126838132E-5	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9998247101926416	WITHOUT_CLASSIFICATION	1.7528980735843244E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999994673706166	WITHOUT_CLASSIFICATION	5.326293833986309E-7	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.5888227991858302	DESIGN	0.4111772008141697	WITHOUT_CLASSIFICATION
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999580731249	WITHOUT_CLASSIFICATION	4.1926875093505984E-8	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999847086238414	WITHOUT_CLASSIFICATION	1.5291376158659088E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999994432071565	WITHOUT_CLASSIFICATION	5.567928434674756E-7	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999966038492699	WITHOUT_CLASSIFICATION	3.396150730087924E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999966038492699	WITHOUT_CLASSIFICATION	3.396150730087924E-6	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999871984205	WITHOUT_CLASSIFICATION	1.2801579388219624E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999871984205	WITHOUT_CLASSIFICATION	1.2801579388219624E-8	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9985582534280083	WITHOUT_CLASSIFICATION	0.0014417465719917184	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999980476857024	WITHOUT_CLASSIFICATION	1.9523142976043842E-5	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999470193865141	WITHOUT_CLASSIFICATION	5.2980613485869524E-5	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999973401772171	WITHOUT_CLASSIFICATION	2.6598227829130733E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9994723490873536	WITHOUT_CLASSIFICATION	5.276509126463675E-4	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9994723490873536	WITHOUT_CLASSIFICATION	5.276509126463675E-4	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999997511588851	WITHOUT_CLASSIFICATION	2.4884111498030195E-7	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999984738513777	WITHOUT_CLASSIFICATION	1.526148622202954E-6	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999280218484228	WITHOUT_CLASSIFICATION	7.197815157714264E-5	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999984084748944	WITHOUT_CLASSIFICATION	1.5915251056467228E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8134267842171881	WITHOUT_CLASSIFICATION	0.18657321578281186	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999718833619776	WITHOUT_CLASSIFICATION	2.811663802234649E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9995727677484979	WITHOUT_CLASSIFICATION	4.272322515021997E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9868758945483731	WITHOUT_CLASSIFICATION	0.013124105451626851	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9997345710159677	WITHOUT_CLASSIFICATION	2.654289840322886E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999774945605817	WITHOUT_CLASSIFICATION	2.2505439418340455E-5	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999997926279482	WITHOUT_CLASSIFICATION	2.073720517760691E-7	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999854672214539	WITHOUT_CLASSIFICATION	1.453277854603371E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999920458066993	WITHOUT_CLASSIFICATION	7.954193300739488E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.999985071515745	WITHOUT_CLASSIFICATION	1.492848425507383E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9940157950883645	WITHOUT_CLASSIFICATION	0.005984204911635553	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9997010732084747	WITHOUT_CLASSIFICATION	2.98926791525436E-4	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997716734275112	WITHOUT_CLASSIFICATION	2.2832657248881278E-4	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999992076172116	WITHOUT_CLASSIFICATION	7.923827883208267E-7	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999414577436324	WITHOUT_CLASSIFICATION	5.854225636762314E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999999604167152	WITHOUT_CLASSIFICATION	3.9583284821756136E-8	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999624242632361	WITHOUT_CLASSIFICATION	3.757573676395588E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999999638151749	WITHOUT_CLASSIFICATION	3.618482510107753E-8	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999953453020346	WITHOUT_CLASSIFICATION	4.654697965403679E-6	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999966671330406	WITHOUT_CLASSIFICATION	3.3328669594407646E-6	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9997614376293881	WITHOUT_CLASSIFICATION	2.385623706118967E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.99999956605743	WITHOUT_CLASSIFICATION	4.339425699574362E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999990522071376	WITHOUT_CLASSIFICATION	9.477928623379025E-7	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998364591732	WITHOUT_CLASSIFICATION	1.6354082670082148E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.999994755163272	WITHOUT_CLASSIFICATION	5.244836727946484E-6	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999812581758057	WITHOUT_CLASSIFICATION	1.874182419416049E-5	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995280330551	WITHOUT_CLASSIFICATION	4.719669449178981E-7	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9996384473678993	WITHOUT_CLASSIFICATION	3.61552632100597E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9996384473678993	WITHOUT_CLASSIFICATION	3.61552632100597E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999989225616959	WITHOUT_CLASSIFICATION	1.0774383041721822E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999933669072781	WITHOUT_CLASSIFICATION	6.633092721846121E-6	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999794177284238	WITHOUT_CLASSIFICATION	2.0582271576184745E-4	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999794177284238	WITHOUT_CLASSIFICATION	2.0582271576184745E-4	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999932095502974	WITHOUT_CLASSIFICATION	6.790449702691479E-6	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9998977692437894	WITHOUT_CLASSIFICATION	1.022307562105417E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999980184876707	WITHOUT_CLASSIFICATION	1.981512329374627E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997635065077	WITHOUT_CLASSIFICATION	2.3649349242423495E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9990051813895757	WITHOUT_CLASSIFICATION	9.948186104243384E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999223489430215	WITHOUT_CLASSIFICATION	7.765105697858281E-5	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9977143453557558	WITHOUT_CLASSIFICATION	0.0022856546442442576	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.9999327176174531	WITHOUT_CLASSIFICATION	6.728238254699272E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9910844728932597	WITHOUT_CLASSIFICATION	0.008915527106740317	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9910844728932597	WITHOUT_CLASSIFICATION	0.008915527106740317	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9864896573092617	WITHOUT_CLASSIFICATION	0.013510342690738265	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999925328783372	WITHOUT_CLASSIFICATION	7.467121662774959E-6	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999925328783372	WITHOUT_CLASSIFICATION	7.467121662774959E-6	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9979041472713048	WITHOUT_CLASSIFICATION	0.0020958527286950358	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999965707652175	WITHOUT_CLASSIFICATION	3.4292347823350328E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9198537404173446	WITHOUT_CLASSIFICATION	0.08014625958265542	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999998601042027	WITHOUT_CLASSIFICATION	1.3989579720221165E-7	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999999188999691	WITHOUT_CLASSIFICATION	8.110003086035178E-8	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999985621647	WITHOUT_CLASSIFICATION	1.437835310508701E-9	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999996320444798	WITHOUT_CLASSIFICATION	3.679555202270917E-7	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9999909785695584	WITHOUT_CLASSIFICATION	9.021430441675834E-6	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999995243283131	WITHOUT_CLASSIFICATION	4.7567168689965847E-7	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9990899695597629	WITHOUT_CLASSIFICATION	9.100304402370988E-4	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998003693328	WITHOUT_CLASSIFICATION	1.996306672468771E-7	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999989208994091	WITHOUT_CLASSIFICATION	1.0791005908600518E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999624478614582	WITHOUT_CLASSIFICATION	3.7552138541776374E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999624478614582	WITHOUT_CLASSIFICATION	3.7552138541776374E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999624478614582	WITHOUT_CLASSIFICATION	3.7552138541776374E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999624478614582	WITHOUT_CLASSIFICATION	3.7552138541776374E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999996503694417	WITHOUT_CLASSIFICATION	3.4963055821334764E-7	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999978037548161	WITHOUT_CLASSIFICATION	2.1962451838861938E-6	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999960119551516	WITHOUT_CLASSIFICATION	3.988044848338544E-6	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.9994889659067439	WITHOUT_CLASSIFICATION	5.110340932561459E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999997658422505	WITHOUT_CLASSIFICATION	2.34157749456558E-7	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9986004502254379	WITHOUT_CLASSIFICATION	0.0013995497745621396	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9994033801795921	WITHOUT_CLASSIFICATION	5.966198204079718E-4	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999940448373452	WITHOUT_CLASSIFICATION	5.955162654816669E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999995888252372	WITHOUT_CLASSIFICATION	4.1117476277759473E-7	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999998228586785	WITHOUT_CLASSIFICATION	1.7714132150337335E-7	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9970437898090097	WITHOUT_CLASSIFICATION	0.002956210190990406	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998400856267571	WITHOUT_CLASSIFICATION	1.599143732429673E-4	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999826350382531	WITHOUT_CLASSIFICATION	1.7364961746861903E-5	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999395462698	WITHOUT_CLASSIFICATION	6.04537302073694E-8	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.999765264022959	WITHOUT_CLASSIFICATION	2.347359770411485E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998400856267571	WITHOUT_CLASSIFICATION	1.599143732429673E-4	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.9999999517713336	WITHOUT_CLASSIFICATION	4.822866637484228E-8	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999299175169968	WITHOUT_CLASSIFICATION	7.008248300325413E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999998149197983	WITHOUT_CLASSIFICATION	1.8508020179344792E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9996871550954195	WITHOUT_CLASSIFICATION	3.128449045804395E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999917294150721	WITHOUT_CLASSIFICATION	8.270584927885545E-6	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998862653161137	WITHOUT_CLASSIFICATION	1.1373468388642711E-4	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999965360996086	WITHOUT_CLASSIFICATION	3.463900391321639E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999976729470853	WITHOUT_CLASSIFICATION	2.3270529146400492E-6	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981037655397	WITHOUT_CLASSIFICATION	1.89623446044406E-6	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999996261171513	WITHOUT_CLASSIFICATION	3.738828487046341E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993139679583	WITHOUT_CLASSIFICATION	6.860320417252111E-7	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999988990995248	WITHOUT_CLASSIFICATION	1.1009004752524783E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9994817548588474	WITHOUT_CLASSIFICATION	5.182451411527277E-4	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9098839172230865	WITHOUT_CLASSIFICATION	0.09011608277691345	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999954086640362	WITHOUT_CLASSIFICATION	4.591335963658582E-6	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.8579556766298352	WITHOUT_CLASSIFICATION	0.14204432337016484	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948859987503	WITHOUT_CLASSIFICATION	5.114001249666171E-6	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999949885908126	WITHOUT_CLASSIFICATION	5.011409187349177E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999433430225794	WITHOUT_CLASSIFICATION	5.665697742057535E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999949885908126	WITHOUT_CLASSIFICATION	5.011409187349177E-6	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999405898772	WITHOUT_CLASSIFICATION	5.941012289608058E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998083245517372	WITHOUT_CLASSIFICATION	1.916754482627302E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9995122656115363	WITHOUT_CLASSIFICATION	4.8773438846374704E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9993832659368063	WITHOUT_CLASSIFICATION	6.167340631937395E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999948859987503	WITHOUT_CLASSIFICATION	5.114001249666171E-6	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9999433430225794	WITHOUT_CLASSIFICATION	5.665697742057535E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999999405898772	WITHOUT_CLASSIFICATION	5.941012289608058E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998710850498755	WITHOUT_CLASSIFICATION	1.2891495012454243E-4	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.9999678129006948	WITHOUT_CLASSIFICATION	3.218709930511547E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9998678081933887	WITHOUT_CLASSIFICATION	1.3219180661133315E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999869476670445	WITHOUT_CLASSIFICATION	1.3052332955502734E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9988743148918944	WITHOUT_CLASSIFICATION	0.0011256851081055791	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999564983012	WITHOUT_CLASSIFICATION	4.350169880630414E-8	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997716734275112	WITHOUT_CLASSIFICATION	2.2832657248881278E-4	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998083245517372	WITHOUT_CLASSIFICATION	1.916754482627302E-4	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9975090068355765	WITHOUT_CLASSIFICATION	0.00249099316442359	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996789505688176	WITHOUT_CLASSIFICATION	3.21049431182315E-4	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999893850037727	WITHOUT_CLASSIFICATION	1.0614996227260673E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997716734275112	WITHOUT_CLASSIFICATION	2.2832657248881278E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999936522747117	WITHOUT_CLASSIFICATION	6.3477252883522535E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997716734275112	WITHOUT_CLASSIFICATION	2.2832657248881278E-4	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999998782509929	WITHOUT_CLASSIFICATION	1.2174900708898614E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997814130467	WITHOUT_CLASSIFICATION	2.1858695333841072E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.99999245223243	WITHOUT_CLASSIFICATION	7.547767569952139E-6	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999993148546711	WITHOUT_CLASSIFICATION	6.851453289768513E-7	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999984762057923	WITHOUT_CLASSIFICATION	1.5237942076335565E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999902403786795	WITHOUT_CLASSIFICATION	9.759621320511333E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999124579830373	WITHOUT_CLASSIFICATION	8.754201696272252E-5	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999839614026395	WITHOUT_CLASSIFICATION	1.6038597360497877E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999999518738734	WITHOUT_CLASSIFICATION	4.812612659338806E-7	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.9997558244324398	WITHOUT_CLASSIFICATION	2.441755675602001E-4	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999956685405088	WITHOUT_CLASSIFICATION	4.331459491207596E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999981940335079	WITHOUT_CLASSIFICATION	1.8059664921415379E-6	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9198537404173446	WITHOUT_CLASSIFICATION	0.08014625958265542	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.999923366054002	WITHOUT_CLASSIFICATION	7.663394599802752E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9993165514512383	WITHOUT_CLASSIFICATION	6.834485487617068E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9999240079818021	WITHOUT_CLASSIFICATION	7.599201819789493E-5	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9998949172796966	WITHOUT_CLASSIFICATION	1.050827203034147E-4	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999914756367944	WITHOUT_CLASSIFICATION	8.524363205603641E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999896554303626	WITHOUT_CLASSIFICATION	1.0344569637566933E-5	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999976104129034	WITHOUT_CLASSIFICATION	2.389587096592123E-6	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9725177955066528	WITHOUT_CLASSIFICATION	0.02748220449334723	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999994720741585	WITHOUT_CLASSIFICATION	5.279258414982106E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999611571221112	WITHOUT_CLASSIFICATION	3.884287788879349E-5	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.6283976762126595	WITHOUT_CLASSIFICATION	0.3716023237873405	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999984786443415	WITHOUT_CLASSIFICATION	1.521355658484168E-6	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999907383359701	WITHOUT_CLASSIFICATION	9.261664029953907E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999995918576956	WITHOUT_CLASSIFICATION	4.0814230434379944E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.999991887636215	WITHOUT_CLASSIFICATION	8.112363784915104E-6	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9999726086119999	WITHOUT_CLASSIFICATION	2.7391388000087086E-5	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999995894483522	WITHOUT_CLASSIFICATION	4.105516477813051E-7	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9993732905999103	WITHOUT_CLASSIFICATION	6.267094000896346E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999989715231354	WITHOUT_CLASSIFICATION	1.028476864545257E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9973620580376551	WITHOUT_CLASSIFICATION	0.002637941962344973	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9995421539352085	WITHOUT_CLASSIFICATION	4.5784606479146997E-4	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9966777749625166	WITHOUT_CLASSIFICATION	0.003322225037483259	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999999150137941	WITHOUT_CLASSIFICATION	8.498620588860533E-8	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9995486211379604	WITHOUT_CLASSIFICATION	4.5137886203960203E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.998634144530889	WITHOUT_CLASSIFICATION	0.0013658554691110202	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999459443932391	WITHOUT_CLASSIFICATION	5.405560676093099E-5	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9998753040748185	WITHOUT_CLASSIFICATION	1.2469592518153907E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.7138948053999393	WITHOUT_CLASSIFICATION	0.2861051946000607	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998049896776	WITHOUT_CLASSIFICATION	1.950103224388165E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.792219364408126	DESIGN	0.2077806355918739	WITHOUT_CLASSIFICATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999831561574204	WITHOUT_CLASSIFICATION	1.6843842579662696E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999831561574204	WITHOUT_CLASSIFICATION	1.6843842579662696E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998707838973	WITHOUT_CLASSIFICATION	1.2921610279550633E-7	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999839614026395	WITHOUT_CLASSIFICATION	1.6038597360497877E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9404542423674827	WITHOUT_CLASSIFICATION	0.05954575763251729	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999998595530628	WITHOUT_CLASSIFICATION	1.404469371862965E-7	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999998259452977	WITHOUT_CLASSIFICATION	1.7405470232284606E-7	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999998950917343	WITHOUT_CLASSIFICATION	1.0490826576076689E-7	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9999424755391597	WITHOUT_CLASSIFICATION	5.752446084037823E-5	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9998768021150563	WITHOUT_CLASSIFICATION	1.2319788494372246E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999685415283	WITHOUT_CLASSIFICATION	3.145847181331429E-8	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9998696808368354	WITHOUT_CLASSIFICATION	1.3031916316468022E-4	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.996066314938482	WITHOUT_CLASSIFICATION	0.0039336850615179775	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999863770626636	WITHOUT_CLASSIFICATION	1.3622937336534932E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.7296868479217712	WITHOUT_CLASSIFICATION	0.2703131520782288	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999992842835524	WITHOUT_CLASSIFICATION	7.157164474636539E-7	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999959386032621	WITHOUT_CLASSIFICATION	4.061396737894346E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999976182098	WITHOUT_CLASSIFICATION	2.381790311544349E-9	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999984638721	WITHOUT_CLASSIFICATION	1.5361278748525998E-9	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999958530428	WITHOUT_CLASSIFICATION	4.146957230840759E-9	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999932178232191	WITHOUT_CLASSIFICATION	6.782176780913595E-6	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9929780749774401	WITHOUT_CLASSIFICATION	0.007021925022560024	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999992265552591	WITHOUT_CLASSIFICATION	7.734447408229388E-7	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9999807615058895	WITHOUT_CLASSIFICATION	1.923849411034841E-5	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999993159148541	WITHOUT_CLASSIFICATION	6.840851459434031E-7	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999716573704	WITHOUT_CLASSIFICATION	2.834262955508064E-8	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.7138948053999393	WITHOUT_CLASSIFICATION	0.2861051946000607	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999914338307261	WITHOUT_CLASSIFICATION	8.566169273991941E-6	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999674174298633	WITHOUT_CLASSIFICATION	3.2582570136760754E-5	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999999819168484	WITHOUT_CLASSIFICATION	1.8083151644315827E-8	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999973326797048	WITHOUT_CLASSIFICATION	2.667320295071511E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9996734448335773	WITHOUT_CLASSIFICATION	3.2655516642263215E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999845191599132	WITHOUT_CLASSIFICATION	1.5480840086867364E-5	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999999033250327	WITHOUT_CLASSIFICATION	9.667496730162597E-7	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.999999474453887	WITHOUT_CLASSIFICATION	5.255461129469703E-7	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999999734375353	WITHOUT_CLASSIFICATION	2.6562464704044977E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999926614283279	WITHOUT_CLASSIFICATION	7.338571672149567E-6	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998640515927	WITHOUT_CLASSIFICATION	1.3594840721476358E-7	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999999970297583	WITHOUT_CLASSIFICATION	2.970241703312343E-8	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9990434576468648	WITHOUT_CLASSIFICATION	9.56542353135215E-4	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9993876349774008	WITHOUT_CLASSIFICATION	6.123650225991498E-4	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999674861198743	WITHOUT_CLASSIFICATION	3.251388012567306E-5	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999674861198743	WITHOUT_CLASSIFICATION	3.251388012567306E-5	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999502015961794	WITHOUT_CLASSIFICATION	4.9798403820671936E-5	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998320287096533	WITHOUT_CLASSIFICATION	1.679712903466512E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998972857598873	WITHOUT_CLASSIFICATION	1.0271424011263337E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9998972857598873	WITHOUT_CLASSIFICATION	1.0271424011263337E-4	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9999366516971047	WITHOUT_CLASSIFICATION	6.334830289530902E-5	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9997630472741503	WITHOUT_CLASSIFICATION	2.369527258497598E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5531708028304239	WITHOUT_CLASSIFICATION	0.4468291971695762	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.99999380756832	WITHOUT_CLASSIFICATION	6.192431679966936E-6	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999324844825	WITHOUT_CLASSIFICATION	6.751551761951908E-8	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999736307168	WITHOUT_CLASSIFICATION	2.636928322012984E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999983042605087	WITHOUT_CLASSIFICATION	1.6957394911656317E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999983042605087	WITHOUT_CLASSIFICATION	1.6957394911656317E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999618113375	WITHOUT_CLASSIFICATION	3.818866250561115E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.99463697334636	WITHOUT_CLASSIFICATION	0.005363026653640055	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999903435394055	WITHOUT_CLASSIFICATION	9.656460594483025E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999877363456912	WITHOUT_CLASSIFICATION	1.2263654308834316E-5	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.9999877363456912	WITHOUT_CLASSIFICATION	1.2263654308834316E-5	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.999999778157231	WITHOUT_CLASSIFICATION	2.2184276902038797E-7	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999997557661703	WITHOUT_CLASSIFICATION	2.442338298052033E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9985077890493838	WITHOUT_CLASSIFICATION	0.0014922109506163152	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999991102876907	WITHOUT_CLASSIFICATION	8.897123093609423E-7	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.999893168013245	WITHOUT_CLASSIFICATION	1.0683198675500268E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999775851148067	WITHOUT_CLASSIFICATION	2.2414885193264943E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9998887826700806	WITHOUT_CLASSIFICATION	1.1121732991930095E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999672205906638	WITHOUT_CLASSIFICATION	3.277940933619961E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9996379834378283	WITHOUT_CLASSIFICATION	3.6201656217172714E-4	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999849885497657	WITHOUT_CLASSIFICATION	1.5011450234246367E-5	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9820891606654444	WITHOUT_CLASSIFICATION	0.01791083933455561	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9998124408912685	WITHOUT_CLASSIFICATION	1.875591087314042E-4	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9999438873043778	WITHOUT_CLASSIFICATION	5.611269562224461E-5	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999641440449771	WITHOUT_CLASSIFICATION	3.585595502289427E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999904821400396	WITHOUT_CLASSIFICATION	9.517859960406566E-6	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999943399019	WITHOUT_CLASSIFICATION	5.660098031686868E-9	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999986112124996	WITHOUT_CLASSIFICATION	1.3887875004459253E-6	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999994864563	WITHOUT_CLASSIFICATION	5.135437215677499E-10	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999716674821533	WITHOUT_CLASSIFICATION	2.833251784669464E-5	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998917665045879	WITHOUT_CLASSIFICATION	1.0823349541211928E-4	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.999927977955513	WITHOUT_CLASSIFICATION	7.202204448694835E-5	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9997422574914296	WITHOUT_CLASSIFICATION	2.577425085704142E-4	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9970955733705751	WITHOUT_CLASSIFICATION	0.002904426629424967	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999999651668429	WITHOUT_CLASSIFICATION	3.483315707105272E-8	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9789935080151002	WITHOUT_CLASSIFICATION	0.0210064919848998	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.9999481786062939	WITHOUT_CLASSIFICATION	5.1821393706056726E-5	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999956835412548	WITHOUT_CLASSIFICATION	4.316458745137612E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999991883202071	WITHOUT_CLASSIFICATION	8.116797929319297E-7	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999999854985506	WITHOUT_CLASSIFICATION	1.450144934734178E-8	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998850033957148	WITHOUT_CLASSIFICATION	1.1499660428510005E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9526283221027559	WITHOUT_CLASSIFICATION	0.04737167789724416	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999934805027296	WITHOUT_CLASSIFICATION	6.519497270340291E-6	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999985493322497	WITHOUT_CLASSIFICATION	1.4506677503265054E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9998688877331856	WITHOUT_CLASSIFICATION	1.3111226681433675E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999510132943813	WITHOUT_CLASSIFICATION	4.898670561861687E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998886611870932	WITHOUT_CLASSIFICATION	1.1133881290680555E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9975528056955008	WITHOUT_CLASSIFICATION	0.0024471943044992043	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999905014412	WITHOUT_CLASSIFICATION	9.498558818011996E-9	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999973528178843	WITHOUT_CLASSIFICATION	2.6471821156358234E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999903261566394	WITHOUT_CLASSIFICATION	9.673843360560475E-6	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999462874946186	WITHOUT_CLASSIFICATION	5.3712505381533894E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999731815367086	WITHOUT_CLASSIFICATION	2.6818463291448895E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9998891765760941	WITHOUT_CLASSIFICATION	1.1082342390589711E-4	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9998819505771265	WITHOUT_CLASSIFICATION	1.1804942287344317E-4	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999994418982576	WITHOUT_CLASSIFICATION	5.581017424512891E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999839501514313	WITHOUT_CLASSIFICATION	1.604984856868657E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999766306590855	WITHOUT_CLASSIFICATION	2.336934091448987E-5	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9910002842437059	WITHOUT_CLASSIFICATION	0.008999715756294128	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999990191878252	WITHOUT_CLASSIFICATION	9.808121747811892E-7	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999993078481	WITHOUT_CLASSIFICATION	6.921518604192976E-10	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9994773787867868	WITHOUT_CLASSIFICATION	5.226212132131994E-4	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999879384185514	WITHOUT_CLASSIFICATION	1.2061581448732763E-5	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999431510304	WITHOUT_CLASSIFICATION	5.684896961349329E-8	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999973727304	WITHOUT_CLASSIFICATION	2.62726969007263E-9	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999951046873197	WITHOUT_CLASSIFICATION	4.895312680361747E-6	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999595075165942	WITHOUT_CLASSIFICATION	4.04924834057816E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.999956478350734	WITHOUT_CLASSIFICATION	4.352164926597964E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999388739753833	WITHOUT_CLASSIFICATION	6.112602461665715E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999549447937943	WITHOUT_CLASSIFICATION	4.505520620569117E-5	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.9999576570640529	WITHOUT_CLASSIFICATION	4.234293594707192E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999933288376	WITHOUT_CLASSIFICATION	6.671162374864484E-9	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999933288376	WITHOUT_CLASSIFICATION	6.671162374864484E-9	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999994804373649	WITHOUT_CLASSIFICATION	5.19562635202488E-7	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9999813832200438	WITHOUT_CLASSIFICATION	1.8616779956226092E-5	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.999999817950923	WITHOUT_CLASSIFICATION	1.8204907695328524E-7	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9997145744030079	WITHOUT_CLASSIFICATION	2.85425596992117E-4	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999994671400572	WITHOUT_CLASSIFICATION	5.328599428514239E-7	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999980595294373	WITHOUT_CLASSIFICATION	1.94047056272106E-6	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.9999975450326948	WITHOUT_CLASSIFICATION	2.4549673052434217E-6	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999999999578986	WITHOUT_CLASSIFICATION	4.2101430753887893E-11	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999995878722056	WITHOUT_CLASSIFICATION	4.121277944241667E-7	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999994777411476	WITHOUT_CLASSIFICATION	5.22258852467268E-7	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9987531006033471	WITHOUT_CLASSIFICATION	0.0012468993966529393	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999662150009402	WITHOUT_CLASSIFICATION	3.37849990598182E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999941964219	WITHOUT_CLASSIFICATION	5.8035781273369285E-9	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9992758788267935	WITHOUT_CLASSIFICATION	7.241211732066439E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999951347650308	WITHOUT_CLASSIFICATION	4.865234969172886E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999951347650308	WITHOUT_CLASSIFICATION	4.865234969172886E-6	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999994221843526	WITHOUT_CLASSIFICATION	5.778156475114883E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999912358131392	WITHOUT_CLASSIFICATION	8.764186860750165E-6	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999966492255	WITHOUT_CLASSIFICATION	3.350774589212626E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999838118269	WITHOUT_CLASSIFICATION	1.6188173192235687E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999993845280835	WITHOUT_CLASSIFICATION	6.154719165965212E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999951634238681	WITHOUT_CLASSIFICATION	4.836576131942512E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999989610778383	WITHOUT_CLASSIFICATION	1.0389221616906852E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9660793609642001	WITHOUT_CLASSIFICATION	0.03392063903579985	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998820098534682	WITHOUT_CLASSIFICATION	1.1799014653178012E-4	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999975615196	WITHOUT_CLASSIFICATION	2.43848041840435E-9	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999996012964	WITHOUT_CLASSIFICATION	3.987035680251991E-10	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999646371548	WITHOUT_CLASSIFICATION	3.536284511489021E-8	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999997834139	WITHOUT_CLASSIFICATION	2.165861174917221E-10	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999943848217393	WITHOUT_CLASSIFICATION	5.6151782606549415E-6	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9987013491833812	DESIGN	0.0012986508166188014	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9990801337114511	WITHOUT_CLASSIFICATION	9.198662885487935E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.7023413430195468	WITHOUT_CLASSIFICATION	0.29765865698045324	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999868648114411	WITHOUT_CLASSIFICATION	1.313518855895312E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.999985561914029	WITHOUT_CLASSIFICATION	1.4438085970988044E-5	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999904520582	WITHOUT_CLASSIFICATION	9.547941815171242E-9	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999425641033542	WITHOUT_CLASSIFICATION	5.74358966457925E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999952237	WITHOUT_CLASSIFICATION	4.77625142971258E-12	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999934066770014	WITHOUT_CLASSIFICATION	6.593322998590377E-6	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998141243407782	WITHOUT_CLASSIFICATION	1.8587565922173583E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9478107032793481	WITHOUT_CLASSIFICATION	0.05218929672065178	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9988379058658629	WITHOUT_CLASSIFICATION	0.0011620941341371537	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999972482073	WITHOUT_CLASSIFICATION	2.751792641334434E-9	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9997287198035972	WITHOUT_CLASSIFICATION	2.712801964027463E-4	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999704090944962	WITHOUT_CLASSIFICATION	2.959090550377527E-5	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9997299344091441	WITHOUT_CLASSIFICATION	2.700655908558872E-4	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9995098043458412	WITHOUT_CLASSIFICATION	4.901956541587428E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.9999999839432911	WITHOUT_CLASSIFICATION	1.605670885926385E-8	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999919908191448	WITHOUT_CLASSIFICATION	8.00918085514781E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999978366355728	WITHOUT_CLASSIFICATION	2.1633644270923123E-6	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.7409015088061003	DESIGN	0.2590984911938999	WITHOUT_CLASSIFICATION
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9998136705793967	WITHOUT_CLASSIFICATION	1.8632942060328904E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999745930908003	WITHOUT_CLASSIFICATION	2.540690919970351E-5	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999885475557	WITHOUT_CLASSIFICATION	1.1452444207107477E-8	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999989234721697	WITHOUT_CLASSIFICATION	1.0765278302195875E-6	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9941067594407044	WITHOUT_CLASSIFICATION	0.005893240559295623	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9621453801003773	WITHOUT_CLASSIFICATION	0.0378546198996228	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9621453801003773	WITHOUT_CLASSIFICATION	0.0378546198996228	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999999325609696	WITHOUT_CLASSIFICATION	6.743903032394975E-8	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9996475026704256	WITHOUT_CLASSIFICATION	3.524973295745198E-4	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.9142516593736324	WITHOUT_CLASSIFICATION	0.08574834062636762	DESIGN
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9984160665494521	WITHOUT_CLASSIFICATION	0.0015839334505478025	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999842621525289	WITHOUT_CLASSIFICATION	1.5737847471069238E-5	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999925307127681	WITHOUT_CLASSIFICATION	7.4692872320414056E-6	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999964411000459	WITHOUT_CLASSIFICATION	3.5588999539646478E-6	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999980156979935	WITHOUT_CLASSIFICATION	1.9843020065411957E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9856603478643843	DESIGN	0.014339652135615702	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999703044244	WITHOUT_CLASSIFICATION	2.969557559932582E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998624028339	WITHOUT_CLASSIFICATION	1.3759716619812477E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9936781322492994	WITHOUT_CLASSIFICATION	0.006321867750700724	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999996896042043	WITHOUT_CLASSIFICATION	3.1039579569951826E-7	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.999999996348335	WITHOUT_CLASSIFICATION	3.6516650564742386E-9	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999974257165196	WITHOUT_CLASSIFICATION	2.574283480326346E-6	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9997308439750577	WITHOUT_CLASSIFICATION	2.6915602494218915E-4	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9992398461611335	WITHOUT_CLASSIFICATION	7.601538388664646E-4	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999351933103	WITHOUT_CLASSIFICATION	6.480668966590934E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999999626228611	WITHOUT_CLASSIFICATION	3.737713891335243E-8	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9996420759271335	WITHOUT_CLASSIFICATION	3.5792407286651314E-4	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9379519485056584	WITHOUT_CLASSIFICATION	0.06204805149434163	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999421707099355	WITHOUT_CLASSIFICATION	5.782929006443834E-5	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9994441639887467	WITHOUT_CLASSIFICATION	5.55836011253286E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9478753527579868	WITHOUT_CLASSIFICATION	0.052124647242013065	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9690609508937474	WITHOUT_CLASSIFICATION	0.030939049106252496	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9988780598099727	WITHOUT_CLASSIFICATION	0.0011219401900273377	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999997991366723	WITHOUT_CLASSIFICATION	2.0086332782624285E-7	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999987103032	WITHOUT_CLASSIFICATION	1.2896967638299232E-9	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999999469923182	WITHOUT_CLASSIFICATION	5.3007681849573717E-8	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9989557423098473	WITHOUT_CLASSIFICATION	0.0010442576901527095	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9994481088857519	WITHOUT_CLASSIFICATION	5.518911142481863E-4	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9998322253804607	WITHOUT_CLASSIFICATION	1.6777461953941563E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999780476964646	WITHOUT_CLASSIFICATION	2.1952303535399644E-5	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999995880936747	WITHOUT_CLASSIFICATION	4.1190632532348633E-7	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999889059500641	WITHOUT_CLASSIFICATION	1.1094049935885965E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999286861124251	WITHOUT_CLASSIFICATION	7.131388757480021E-5	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999982553573751	WITHOUT_CLASSIFICATION	1.7446426250152217E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999970962746	WITHOUT_CLASSIFICATION	2.9037254452943242E-9	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9961170665576601	WITHOUT_CLASSIFICATION	0.0038829334423399185	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9999711435317414	WITHOUT_CLASSIFICATION	2.885646825855141E-5	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999998666527192	WITHOUT_CLASSIFICATION	1.333472807469102E-7	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999971944450998	WITHOUT_CLASSIFICATION	2.805554900166594E-6	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999616378845	WITHOUT_CLASSIFICATION	3.836211547211053E-8	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999998971331	WITHOUT_CLASSIFICATION	1.0286693246965677E-10	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9996800561594229	WITHOUT_CLASSIFICATION	3.1994384057703733E-4	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9992625245326998	WITHOUT_CLASSIFICATION	7.374754673001157E-4	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999972713160284	WITHOUT_CLASSIFICATION	2.7286839715054947E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999941964219	WITHOUT_CLASSIFICATION	5.8035781273369285E-9	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.9999999994876243	WITHOUT_CLASSIFICATION	5.123757617489447E-10	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999995930462	WITHOUT_CLASSIFICATION	4.069538219254961E-10	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9998127463364974	WITHOUT_CLASSIFICATION	1.8725366350260566E-4	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9877109243639026	WITHOUT_CLASSIFICATION	0.012289075636097513	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999959945532	WITHOUT_CLASSIFICATION	4.005446710475764E-9	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999628878584649	WITHOUT_CLASSIFICATION	3.711214153515862E-5	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999826861688611	WITHOUT_CLASSIFICATION	1.7313831138974246E-5	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999180477387	WITHOUT_CLASSIFICATION	8.195226137237229E-8	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999244075145	WITHOUT_CLASSIFICATION	7.55924854840588E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999998030315246	WITHOUT_CLASSIFICATION	1.9696847538778544E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999999909292232	WITHOUT_CLASSIFICATION	9.070776781578951E-9	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9850848548719074	WITHOUT_CLASSIFICATION	0.0149151451280925	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999999565358915	WITHOUT_CLASSIFICATION	4.3464108574731356E-8	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999965525236825	WITHOUT_CLASSIFICATION	3.4474763176399334E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996813149569	WITHOUT_CLASSIFICATION	3.1868504308651623E-7	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999999979593628	WITHOUT_CLASSIFICATION	2.0406371959612824E-8	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999999758382558	WITHOUT_CLASSIFICATION	2.4161744220632174E-8	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999993600454025	WITHOUT_CLASSIFICATION	6.399545974960344E-7	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9996843612727304	WITHOUT_CLASSIFICATION	3.1563872726954345E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996813149569	WITHOUT_CLASSIFICATION	3.1868504308651623E-7	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.999997039670604	WITHOUT_CLASSIFICATION	2.960329395833832E-6	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999977657971	WITHOUT_CLASSIFICATION	2.2342028610990847E-9	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999601770490808	WITHOUT_CLASSIFICATION	3.9822950919196854E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999980854945939	WITHOUT_CLASSIFICATION	1.914505406139245E-6	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999836198841598	WITHOUT_CLASSIFICATION	1.6380115840128972E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.999902476288117	WITHOUT_CLASSIFICATION	9.752371188304304E-5	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999999281537529	WITHOUT_CLASSIFICATION	7.184624698714694E-8	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.5821199517064857	DESIGN	0.4178800482935145	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999797738397	WITHOUT_CLASSIFICATION	2.0226160332818293E-8	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999559220897	WITHOUT_CLASSIFICATION	4.4077910246311825E-8	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999978810041936	WITHOUT_CLASSIFICATION	2.1189958064599886E-6	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9861849590770139	WITHOUT_CLASSIFICATION	0.013815040922986146	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999866361011976	WITHOUT_CLASSIFICATION	1.3363898802394232E-5	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999680422029233	WITHOUT_CLASSIFICATION	3.1957797076631416E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999555347493155	WITHOUT_CLASSIFICATION	4.4465250684428506E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999716573704	WITHOUT_CLASSIFICATION	2.834262955508064E-8	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999999716468992	WITHOUT_CLASSIFICATION	2.8353100817872966E-8	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999997867988373	WITHOUT_CLASSIFICATION	2.1320116277306996E-7	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995063278708181	WITHOUT_CLASSIFICATION	4.936721291818938E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.960304051375967	WITHOUT_CLASSIFICATION	0.03969594862403308	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999985585812244	WITHOUT_CLASSIFICATION	1.4414187756616413E-6	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999366547749	WITHOUT_CLASSIFICATION	6.334522508431063E-8	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999995059032104	WITHOUT_CLASSIFICATION	4.940967895638178E-7	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999999086538	WITHOUT_CLASSIFICATION	9.134612594639082E-11	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999999206605	WITHOUT_CLASSIFICATION	7.933952670361233E-11	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999996077531	WITHOUT_CLASSIFICATION	3.922469272126994E-10	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999919706456065	WITHOUT_CLASSIFICATION	8.029354393545184E-6	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999967438337651	WITHOUT_CLASSIFICATION	3.2561662349405314E-6	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9885332413540866	WITHOUT_CLASSIFICATION	0.011466758645913419	DESIGN
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9999795892607957	WITHOUT_CLASSIFICATION	2.0410739204327682E-5	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.99999827710461	WITHOUT_CLASSIFICATION	1.7228953899329184E-6	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.8363766243467399	WITHOUT_CLASSIFICATION	0.16362337565326004	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9984154926353943	WITHOUT_CLASSIFICATION	0.0015845073646056985	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999534678122285	WITHOUT_CLASSIFICATION	4.6532187771562236E-5	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999969012638	WITHOUT_CLASSIFICATION	3.0987361993606035E-9	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999996769973802	WITHOUT_CLASSIFICATION	3.230026197685064E-7	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999354227478586	WITHOUT_CLASSIFICATION	6.457725214126764E-5	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9706840125391972	WITHOUT_CLASSIFICATION	0.029315987460802724	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999999841766296	WITHOUT_CLASSIFICATION	1.582337044975483E-8	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999992171231	WITHOUT_CLASSIFICATION	7.82876925564799E-10	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999968966879178	WITHOUT_CLASSIFICATION	3.1033120822071012E-6	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999968966879178	WITHOUT_CLASSIFICATION	3.1033120822071012E-6	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999864848816062	WITHOUT_CLASSIFICATION	1.3515118393773016E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998115522668	WITHOUT_CLASSIFICATION	1.8844773327063034E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999946313849135	WITHOUT_CLASSIFICATION	5.368615086471617E-6	DESIGN
/**	WITHOUT_CLASSIFICATION	0.91426790781386	DESIGN	0.08573209218613989	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999997635065077	WITHOUT_CLASSIFICATION	2.3649349242423495E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999997635065077	WITHOUT_CLASSIFICATION	2.3649349242423495E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999983408429569	WITHOUT_CLASSIFICATION	1.6591570430769752E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999860582130675	WITHOUT_CLASSIFICATION	1.3941786932517702E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.9965869975279934	WITHOUT_CLASSIFICATION	0.003413002472006589	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.999976911168255	WITHOUT_CLASSIFICATION	2.308883174499575E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999872362643	WITHOUT_CLASSIFICATION	1.2763735771942607E-8	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999997097501547	WITHOUT_CLASSIFICATION	2.902498452452687E-7	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.9999944098514434	WITHOUT_CLASSIFICATION	5.590148556567033E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999994861658663	WITHOUT_CLASSIFICATION	5.138341336530051E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999999739123255	WITHOUT_CLASSIFICATION	2.608767450873032E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989118713465	WITHOUT_CLASSIFICATION	1.0881286535619992E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989118713465	WITHOUT_CLASSIFICATION	1.0881286535619992E-6	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.999714776451748	WITHOUT_CLASSIFICATION	2.8522354825205875E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999906464328305	WITHOUT_CLASSIFICATION	9.353567169520528E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999983475244811	WITHOUT_CLASSIFICATION	1.6524755189133529E-6	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.8648843074165335	WITHOUT_CLASSIFICATION	0.1351156925834664	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.7388676630851748	WITHOUT_CLASSIFICATION	0.26113233691482524	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994320667406009	WITHOUT_CLASSIFICATION	5.679332593990765E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981214344513	WITHOUT_CLASSIFICATION	1.87856554857595E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999997881222719	WITHOUT_CLASSIFICATION	2.1187772811724554E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998795771280682	WITHOUT_CLASSIFICATION	1.2042287193185902E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.7224679638184089	WITHOUT_CLASSIFICATION	0.2775320361815911	DESIGN
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9870528963291836	WITHOUT_CLASSIFICATION	0.012947103670816354	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999999559220897	WITHOUT_CLASSIFICATION	4.4077910246311825E-8	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.5532320371621793	DESIGN	0.4467679628378206	WITHOUT_CLASSIFICATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.999950965157035	WITHOUT_CLASSIFICATION	4.9034842965143847E-5	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999926988999	WITHOUT_CLASSIFICATION	7.301100067353734E-9	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999911821901443	WITHOUT_CLASSIFICATION	8.817809855693304E-6	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999996265466	WITHOUT_CLASSIFICATION	3.734534118921015E-10	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999938722279358	WITHOUT_CLASSIFICATION	6.127772064250854E-6	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9728454218775967	WITHOUT_CLASSIFICATION	0.027154578122403253	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9998364464560499	WITHOUT_CLASSIFICATION	1.6355354395007515E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999429369587	WITHOUT_CLASSIFICATION	5.706304125382702E-8	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998903306000545	WITHOUT_CLASSIFICATION	1.0966939994551682E-4	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9998903306000545	WITHOUT_CLASSIFICATION	1.0966939994551682E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998400856267571	WITHOUT_CLASSIFICATION	1.599143732429673E-4	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999988792609	WITHOUT_CLASSIFICATION	1.1207390530407328E-9	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9997221444272898	WITHOUT_CLASSIFICATION	2.778555727101454E-4	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999981846886853	WITHOUT_CLASSIFICATION	1.815311314700846E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999997503277874	WITHOUT_CLASSIFICATION	2.496722125380924E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999958643384756	WITHOUT_CLASSIFICATION	4.135661524276458E-6	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999954086640362	WITHOUT_CLASSIFICATION	4.591335963658582E-6	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9991992280595405	WITHOUT_CLASSIFICATION	8.007719404595041E-4	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9998710850498755	WITHOUT_CLASSIFICATION	1.2891495012454243E-4	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999869622576248	WITHOUT_CLASSIFICATION	1.3037742375117652E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997716734275112	WITHOUT_CLASSIFICATION	2.2832657248881278E-4	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9699495420573863	DESIGN	0.03005045794261375	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.6993775588913596	WITHOUT_CLASSIFICATION	0.3006224411086406	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999882343535	WITHOUT_CLASSIFICATION	1.1765646413796384E-8	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9905433617666708	WITHOUT_CLASSIFICATION	0.009456638233329208	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999677944954246	WITHOUT_CLASSIFICATION	3.220550457533528E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.8458060481828468	DESIGN	0.1541939518171533	WITHOUT_CLASSIFICATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999999071068368	WITHOUT_CLASSIFICATION	9.289316320402172E-7	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999901548462724	WITHOUT_CLASSIFICATION	9.845153727568852E-6	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9997122931928455	WITHOUT_CLASSIFICATION	2.8770680715453346E-4	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999989498023485	WITHOUT_CLASSIFICATION	1.050197651491982E-6	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.9999976901242413	WITHOUT_CLASSIFICATION	2.309875758715309E-6	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9985077890493838	WITHOUT_CLASSIFICATION	0.0014922109506163152	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999995045608872	WITHOUT_CLASSIFICATION	4.954391129397247E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999962076111599	WITHOUT_CLASSIFICATION	3.792388840198072E-6	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999962076111599	WITHOUT_CLASSIFICATION	3.792388840198072E-6	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9989960883159003	WITHOUT_CLASSIFICATION	0.001003911684099768	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.7260228062001969	WITHOUT_CLASSIFICATION	0.2739771937998032	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9989492889017286	WITHOUT_CLASSIFICATION	0.0010507110982713585	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9998955678989633	WITHOUT_CLASSIFICATION	1.044321010367961E-4	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9999607074298212	WITHOUT_CLASSIFICATION	3.9292570178873214E-5	DESIGN
// todo : what else to do here?	DESIGN	0.9959404910238945	WITHOUT_CLASSIFICATION	0.004059508976105517	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9814996432084815	WITHOUT_CLASSIFICATION	0.01850035679151854	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.8942897465466001	WITHOUT_CLASSIFICATION	0.10571025345339996	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9665882347054524	DESIGN	0.033411765294547674	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9665882347054524	DESIGN	0.033411765294547674	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.999961329579475	WITHOUT_CLASSIFICATION	3.867042052497175E-5	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9997514090170755	WITHOUT_CLASSIFICATION	2.4859098292451704E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.7649226633372844	DESIGN	0.23507733666271555	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999794420467303	DESIGN	2.0557953269732875E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999794420467303	DESIGN	2.0557953269732875E-5	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999956857797	DESIGN	4.314220303510742E-9	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999956857797	DESIGN	4.314220303510742E-9	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.9994314807304683	DESIGN	5.685192695317447E-4	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9958808925848475	DESIGN	0.004119107415152483	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9958808925848475	DESIGN	0.004119107415152483	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999996074762605	DESIGN	3.9252373960137013E-7	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9997514090170755	WITHOUT_CLASSIFICATION	2.4859098292451704E-4	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.6379737127197849	DESIGN	0.3620262872802152	WITHOUT_CLASSIFICATION
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999854694112145	WITHOUT_CLASSIFICATION	1.4530588785576158E-5	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999977173470869	WITHOUT_CLASSIFICATION	2.2826529130893933E-6	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.6491975315183068	WITHOUT_CLASSIFICATION	0.3508024684816932	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.9907666919197019	DESIGN	0.0092333080802981	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9337941027825223	WITHOUT_CLASSIFICATION	0.06620589721747781	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999811460961274	WITHOUT_CLASSIFICATION	1.885390387260629E-5	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.8699511970116403	WITHOUT_CLASSIFICATION	0.13004880298835972	DESIGN
// todo : what else to do here?	DESIGN	0.9959404910238945	WITHOUT_CLASSIFICATION	0.004059508976105517	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9998723682133004	WITHOUT_CLASSIFICATION	1.2763178669970772E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9959404910238945	WITHOUT_CLASSIFICATION	0.004059508976105517	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9042518404361163	WITHOUT_CLASSIFICATION	0.0957481595638837	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9723265603431888	WITHOUT_CLASSIFICATION	0.027673439656811197	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999922500227307	DESIGN	7.74997726922423E-6	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.9814996432084815	WITHOUT_CLASSIFICATION	0.01850035679151854	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9508238593279984	DESIGN	0.04917614067200146	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.9999797531501431	WITHOUT_CLASSIFICATION	2.0246849856910945E-5	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.6538281975695664	DESIGN	0.3461718024304336	WITHOUT_CLASSIFICATION
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.5649308001361938	WITHOUT_CLASSIFICATION	0.4350691998638063	DESIGN
// todo : what is the implication of this?	DESIGN	0.7422903167843231	WITHOUT_CLASSIFICATION	0.25770968321567694	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9763396355993679	WITHOUT_CLASSIFICATION	0.02366036440063219	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9830946027443564	DESIGN	0.01690539725564352	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9995649799712586	DESIGN	4.3502002874144287E-4	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9970745780586339	WITHOUT_CLASSIFICATION	0.0029254219413662446	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.6699187001243313	DESIGN	0.33008129987566875	WITHOUT_CLASSIFICATION
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.8742274199515881	DESIGN	0.12577258004841188	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9950510076528696	DESIGN	0.004948992347130412	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9923416607268799	DESIGN	0.00765833927312014	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.999815232239785	DESIGN	1.8476776021510814E-4	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9991568943345744	DESIGN	8.431056654255105E-4	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999828579327	DESIGN	1.7142067331171804E-8	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.5560188104831104	WITHOUT_CLASSIFICATION	0.4439811895168896	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.5560188104831104	WITHOUT_CLASSIFICATION	0.4439811895168896	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9957072600411688	DESIGN	0.004292739958831115	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.952114920505935	WITHOUT_CLASSIFICATION	0.047885079494064835	DESIGN
//TODO possibly relax that	DESIGN	0.815145295515623	DESIGN	0.1848547044843769	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.815145295515623	DESIGN	0.1848547044843769	WITHOUT_CLASSIFICATION
//TODO possibly relax that	DESIGN	0.815145295515623	DESIGN	0.1848547044843769	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9991568943345744	DESIGN	8.431056654255105E-4	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9978853058273532	WITHOUT_CLASSIFICATION	0.002114694172646758	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.636969608688605	WITHOUT_CLASSIFICATION	0.3630303913113952	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.960765199618197	DESIGN	0.03923480038180307	WITHOUT_CLASSIFICATION
//just to help out during the load (ugly, i know)	DESIGN	0.9982445120526285	WITHOUT_CLASSIFICATION	0.0017554879473715415	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.6115393368025425	DESIGN	0.3884606631974576	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.7227398280785092	WITHOUT_CLASSIFICATION	0.2772601719214909	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9665882347054524	DESIGN	0.033411765294547674	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9665882347054524	DESIGN	0.033411765294547674	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9689369825358333	WITHOUT_CLASSIFICATION	0.031063017464166683	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.9665882347054524	DESIGN	0.033411765294547674	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999999063638029	DESIGN	9.363619708691259E-8	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9979990379117721	WITHOUT_CLASSIFICATION	0.002000962088227829	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.6149010167533614	WITHOUT_CLASSIFICATION	0.38509898324663855	DESIGN
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9998842705203287	WITHOUT_CLASSIFICATION	1.1572947967140717E-4	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.8968037866196775	WITHOUT_CLASSIFICATION	0.10319621338032242	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.9956993737881554	WITHOUT_CLASSIFICATION	0.004300626211844583	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9970753911568141	WITHOUT_CLASSIFICATION	0.002924608843185884	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999965913522467	WITHOUT_CLASSIFICATION	3.4086477532007847E-6	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9980791607592386	WITHOUT_CLASSIFICATION	0.0019208392407613808	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9997924168148336	WITHOUT_CLASSIFICATION	2.075831851664262E-4	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9985427728044468	WITHOUT_CLASSIFICATION	0.001457227195553118	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9904844672170244	WITHOUT_CLASSIFICATION	0.009515532782975613	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9540645478355727	WITHOUT_CLASSIFICATION	0.045935452164427217	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9891244373951159	WITHOUT_CLASSIFICATION	0.010875562604884105	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9952162903492912	WITHOUT_CLASSIFICATION	0.004783709650708868	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9984031471485154	DESIGN	0.0015968528514845974	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999439484256217	WITHOUT_CLASSIFICATION	5.6051574378343704E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.7134253044859256	WITHOUT_CLASSIFICATION	0.2865746955140745	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9932735991723746	DESIGN	0.006726400827625389	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9055312810049684	DESIGN	0.09446871899503159	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9942311199710763	DESIGN	0.005768880028923682	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9993491829371116	WITHOUT_CLASSIFICATION	6.508170628882565E-4	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9995443277657307	WITHOUT_CLASSIFICATION	4.5567223426935355E-4	DESIGN
//I suppose?	DESIGN	0.9861796538453949	WITHOUT_CLASSIFICATION	0.013820346154605078	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.999522414047931	DESIGN	4.7758595206906317E-4	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.937682369653845	WITHOUT_CLASSIFICATION	0.062317630346155124	DESIGN
//TODO:refactor + make this method private	DESIGN	0.998199013498602	DESIGN	0.0018009865013980722	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9998639452187014	WITHOUT_CLASSIFICATION	1.3605478129873896E-4	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9997914566911414	DESIGN	2.0854330885858844E-4	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9992554422677017	DESIGN	7.445577322982551E-4	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.997654825079949	WITHOUT_CLASSIFICATION	0.002345174920051117	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999358139789588	DESIGN	6.41860210411373E-5	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9999358139789588	DESIGN	6.41860210411373E-5	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9983304830712576	DESIGN	0.0016695169287424042	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.7041871828873095	WITHOUT_CLASSIFICATION	0.2958128171126904	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.7041871828873095	WITHOUT_CLASSIFICATION	0.2958128171126904	DESIGN
//TODO: ugly here:	DESIGN	0.9998605998490084	DESIGN	1.394001509915815E-4	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9865250304823414	WITHOUT_CLASSIFICATION	0.013474969517658624	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9937017814391793	DESIGN	0.006298218560820732	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9809661853366948	DESIGN	0.01903381466330514	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9947341197886667	WITHOUT_CLASSIFICATION	0.005265880211333292	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9997117353301432	DESIGN	2.88264669856837E-4	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.828309656295427	DESIGN	0.17169034370457306	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9965509678164223	DESIGN	0.00344903218357763	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9993985447489345	DESIGN	6.014552510654975E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9868834502309847	DESIGN	0.013116549769015372	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.5388957353312941	DESIGN	0.4611042646687058	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.9998175400838059	DESIGN	1.8245991619414084E-4	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.5165112736482129	DESIGN	0.48348872635178697	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999978853566165	DESIGN	2.114643383580982E-6	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9999724879451148	DESIGN	2.7512054885177105E-5	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.9988784625090538	DESIGN	0.0011215374909462382	WITHOUT_CLASSIFICATION
// this class has no proxies (so do a shortcut)	DESIGN	0.9999278157109992	WITHOUT_CLASSIFICATION	7.218428900080416E-5	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.6558835345476685	WITHOUT_CLASSIFICATION	0.34411646545233154	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9899174197476007	DESIGN	0.010082580252399378	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9613848601482362	WITHOUT_CLASSIFICATION	0.038615139851763736	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9976435610825121	DESIGN	0.002356438917487908	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.7578016025705073	WITHOUT_CLASSIFICATION	0.24219839742949265	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.998715005904951	DESIGN	0.0012849940950491008	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9926336739780471	DESIGN	0.00736632602195288	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999999912610755	DESIGN	8.738924476588342E-9	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9904502431164695	DESIGN	0.009549756883530519	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9212415005241302	WITHOUT_CLASSIFICATION	0.0787584994758698	DESIGN
//TODO: merge into one method!	DESIGN	0.9602816433411627	DESIGN	0.03971835665883733	WITHOUT_CLASSIFICATION
//TODO: refactor to .sql package	DESIGN	0.9895443622415061	DESIGN	0.01045563775849399	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999999099734936	DESIGN	9.002650640448095E-8	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999652079703325	DESIGN	3.479202966748693E-5	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.8569330552550888	DESIGN	0.14306694474491116	WITHOUT_CLASSIFICATION
// TODO : better way?!?	DESIGN	0.9999999945250577	DESIGN	5.4749423300256E-9	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999992608699776	WITHOUT_CLASSIFICATION	7.391300224402373E-7	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9995217183664958	DESIGN	4.7828163350418715E-4	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999894884275	DESIGN	1.0511572450022892E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999996360686	DESIGN	3.6393143607517007E-10	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.9800579332441132	DESIGN	0.019942066755886827	WITHOUT_CLASSIFICATION
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9979260167052183	DESIGN	0.0020739832947816827	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999999891460268	WITHOUT_CLASSIFICATION	1.0853973150849474E-8	DESIGN
//yuck!	DESIGN	0.9689369825358333	WITHOUT_CLASSIFICATION	0.031063017464166683	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9987980540409667	WITHOUT_CLASSIFICATION	0.0012019459590333164	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9999540760407982	DESIGN	4.5923959201738864E-5	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9997478225258045	WITHOUT_CLASSIFICATION	2.521774741954854E-4	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999970083655	DESIGN	2.9916344013815328E-9	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.999968606686772	DESIGN	3.139331322793995E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999994482686011	DESIGN	5.517313989204207E-7	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.9665882347054524	DESIGN	0.033411765294547674	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9990675134013158	WITHOUT_CLASSIFICATION	9.324865986842168E-4	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.9145565245066597	WITHOUT_CLASSIFICATION	0.08544347549334035	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.99997219637876	DESIGN	2.7803621240019352E-5	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.999261501492126	WITHOUT_CLASSIFICATION	7.38498507874011E-4	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.8618505410847701	WITHOUT_CLASSIFICATION	0.13814945891522995	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.9999996046622135	DESIGN	3.953377864858557E-7	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.5417843433433854	DESIGN	0.4582156566566146	WITHOUT_CLASSIFICATION
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999916466105098	DESIGN	8.353389490326382E-6	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9870865100324729	DESIGN	0.012913489967526934	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999816319366895	DESIGN	1.8368063310458758E-5	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.82510193221196	DESIGN	0.17489806778804004	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.9998749181839431	WITHOUT_CLASSIFICATION	1.2508181605690017E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.9755266747571409	DESIGN	0.024473325242859025	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999993133836885	DESIGN	6.866163114897091E-7	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9757404939363074	WITHOUT_CLASSIFICATION	0.024259506063692704	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.5769549279273353	DESIGN	0.42304507207266473	WITHOUT_CLASSIFICATION
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.6607944406119527	DESIGN	0.33920555938804736	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.5544680082055276	DESIGN	0.4455319917944725	WITHOUT_CLASSIFICATION
// unhappy about this being public ... is there a better way?	DESIGN	0.9999990547045184	DESIGN	9.452954814608665E-7	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9998891083264874	DESIGN	1.1089167351274313E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999999883672402	DESIGN	1.1632759780404778E-8	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8927050869088837	WITHOUT_CLASSIFICATION	0.10729491309111623	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9999195428974134	DESIGN	8.045710258657574E-5	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9849917130524676	DESIGN	0.01500828694753234	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9923716270296121	DESIGN	0.007628372970387934	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9969170880620503	WITHOUT_CLASSIFICATION	0.003082911937949714	DESIGN
// short-circuit for performance...	DESIGN	0.9999297377163664	WITHOUT_CLASSIFICATION	7.026228363360956E-5	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9998761725170677	WITHOUT_CLASSIFICATION	1.2382748293231135E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9343407932992632	DESIGN	0.06565920670073669	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.8232726263480628	DESIGN	0.1767273736519374	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999999618019	DESIGN	3.819806631337597E-11	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9956717776551584	DESIGN	0.004328222344841651	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9998043619528512	DESIGN	1.9563804714880918E-4	WITHOUT_CLASSIFICATION
/**	DESIGN	0.91426790781386	DESIGN	0.08573209218613989	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.8848588691835659	WITHOUT_CLASSIFICATION	0.11514113081643403	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9899960739750766	DESIGN	0.010003926024923398	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.7518756167896189	WITHOUT_CLASSIFICATION	0.24812438321038108	DESIGN
//use of trim() here is ugly?	DESIGN	0.5126438772202339	DESIGN	0.4873561227797662	WITHOUT_CLASSIFICATION
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.9994235846864801	DESIGN	5.764153135198835E-4	WITHOUT_CLASSIFICATION
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9970957662477561	WITHOUT_CLASSIFICATION	0.0029042337522438024	DESIGN
//TODO: inefficient	DESIGN	0.9943150529639979	DESIGN	0.005684947036002089	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.6516343736974946	DESIGN	0.34836562630250545	WITHOUT_CLASSIFICATION
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.999999962781989	DESIGN	3.721801094720108E-8	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999996469259378	DESIGN	3.530740621482023E-7	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9998726693127643	DESIGN	1.273306872356468E-4	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.9999898273166596	DESIGN	1.0172683340332716E-5	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999166414464942	WITHOUT_CLASSIFICATION	8.335855350581675E-5	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.8643368565988445	DESIGN	0.13566314340115546	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9913403601757724	DESIGN	0.008659639824227561	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.6526900305065598	WITHOUT_CLASSIFICATION	0.3473099694934402	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.9999055372987743	DESIGN	9.446270122564811E-5	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999993268603	DESIGN	6.73139607499401E-10	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.5703351376973462	WITHOUT_CLASSIFICATION	0.42966486230265377	DESIGN
// TODO should we just collect these like with the collections above?	DESIGN	0.9999905730385406	DESIGN	9.426961459391304E-6	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.7953449648192423	WITHOUT_CLASSIFICATION	0.20465503518075762	DESIGN
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9202091312160832	WITHOUT_CLASSIFICATION	0.07979086878391686	DESIGN
//create an index on the key columns??	DESIGN	0.9999910304345816	WITHOUT_CLASSIFICATION	8.969565418528057E-6	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.9761831327657753	DESIGN	0.023816867234224617	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.9999910304345816	WITHOUT_CLASSIFICATION	8.969565418528057E-6	DESIGN
//TODO: improve this hack!	DESIGN	0.9999998777441137	DESIGN	1.222558862883743E-7	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999214345931136	WITHOUT_CLASSIFICATION	7.856540688633442E-5	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.9904119937009214	DESIGN	0.00958800629907862	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9994820244251256	WITHOUT_CLASSIFICATION	5.179755748744263E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.985415099035391	WITHOUT_CLASSIFICATION	0.014584900964608977	DESIGN
// create an index on the key columns??	DESIGN	0.9999990713779289	WITHOUT_CLASSIFICATION	9.286220711606439E-7	DESIGN
// todo : remove	DESIGN	0.9799621210957162	WITHOUT_CLASSIFICATION	0.02003787890428372	DESIGN
// todo : remove	DESIGN	0.9799621210957162	WITHOUT_CLASSIFICATION	0.02003787890428372	DESIGN
// todo : remove	DESIGN	0.9799621210957162	WITHOUT_CLASSIFICATION	0.02003787890428372	DESIGN
// todo : throw exception?	DESIGN	0.7595934733504152	WITHOUT_CLASSIFICATION	0.24040652664958476	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.7279743510271304	DESIGN	0.2720256489728697	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9997954172993533	DESIGN	2.0458270064669512E-4	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999930592248893	DESIGN	6.9407751106509205E-6	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.7219151714605824	DESIGN	0.27808482853941774	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999990351591671	DESIGN	9.648408327905839E-7	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.6689251613276803	WITHOUT_CLASSIFICATION	0.3310748386723197	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.5238054267891559	WITHOUT_CLASSIFICATION	0.476194573210844	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9852992871116666	DESIGN	0.014700712888333394	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9825356306230402	WITHOUT_CLASSIFICATION	0.017464369376959766	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9868198559909316	DESIGN	0.013180144009068317	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9957421888106687	DESIGN	0.004257811189331288	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999999723822786	DESIGN	2.761772141486502E-8	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.5806841242588895	WITHOUT_CLASSIFICATION	0.4193158757411105	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9457154252340737	DESIGN	0.05428457476592627	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.8525428921821334	WITHOUT_CLASSIFICATION	0.14745710781786656	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6045356419842451	WITHOUT_CLASSIFICATION	0.3954643580157547	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6460355603461521	DESIGN	0.353964439653848	WITHOUT_CLASSIFICATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9998389626359699	DESIGN	1.6103736403006493E-4	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.9991404334674696	DESIGN	8.595665325304309E-4	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9998774422798117	DESIGN	1.2255772018824668E-4	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.9573822802431845	DESIGN	0.04261771975681549	WITHOUT_CLASSIFICATION
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999989879248563	DESIGN	1.0120751437455914E-6	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9923516307978721	WITHOUT_CLASSIFICATION	0.007648369202127775	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.9435277255963486	DESIGN	0.056472274403651435	WITHOUT_CLASSIFICATION
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9998911457729985	DESIGN	1.088542270015013E-4	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9989288099681127	DESIGN	0.001071190031887233	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.999153091853149	DESIGN	8.46908146850943E-4	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999860463664763	DESIGN	1.3953633523730734E-5	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9305354707275322	WITHOUT_CLASSIFICATION	0.06946452927246777	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9970901289913648	WITHOUT_CLASSIFICATION	0.002909871008635125	DESIGN
//is this ok?	DESIGN	0.9914096871820909	WITHOUT_CLASSIFICATION	0.008590312817909045	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.999999937532862	DESIGN	6.246713805756596E-8	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9998261127104899	DESIGN	1.7388728951011763E-4	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.7905539670182514	WITHOUT_CLASSIFICATION	0.20944603298174852	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999999909623087	DESIGN	9.037691197670562E-9	WITHOUT_CLASSIFICATION
/**	DESIGN	0.91426790781386	DESIGN	0.08573209218613989	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9997158177093209	DESIGN	2.8418229067903104E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999998391013438	DESIGN	1.6089865615148402E-7	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.996371589026581	DESIGN	0.0036284109734191013	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9887044147472994	WITHOUT_CLASSIFICATION	0.011295585252700493	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.999978866142707	DESIGN	2.1133857293044618E-5	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9998177826669206	DESIGN	1.8221733307948238E-4	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.5788306070375067	DESIGN	0.42116939296249345	WITHOUT_CLASSIFICATION
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9986583312833816	DESIGN	0.0013416687166184727	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.6599098304036217	DESIGN	0.3400901695963782	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9878470733899292	DESIGN	0.012152926610070789	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9651214287063401	DESIGN	0.03487857129365978	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.9980706991821297	DESIGN	0.0019293008178704546	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9999857187531572	DESIGN	1.4281246842674582E-5	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.8790329826759472	WITHOUT_CLASSIFICATION	0.12096701732405278	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9920401920142079	DESIGN	0.007959807985792225	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9416749808859148	DESIGN	0.05832501911408513	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9985411956571517	DESIGN	0.0014588043428482658	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999996159	DESIGN	3.841083211338076E-13	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999992381400948	DESIGN	7.618599051811134E-7	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.9990383912602402	WITHOUT_CLASSIFICATION	9.616087397597875E-4	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999998335944315	DESIGN	1.6640556857374884E-7	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9851592678222525	DESIGN	0.014840732177747545	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9999859420707059	DESIGN	1.40579292940976E-5	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9998788504050339	WITHOUT_CLASSIFICATION	1.211495949662181E-4	DESIGN
// short cut check...	DESIGN	0.999521369686164	WITHOUT_CLASSIFICATION	4.78630313836071E-4	DESIGN
// todo : move to StringHelper?	DESIGN	0.98678692108403	WITHOUT_CLASSIFICATION	0.013213078915970053	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.999570885753209	DESIGN	4.291142467909608E-4	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.999386189736918	DESIGN	6.138102630820538E-4	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999999994412708	DESIGN	5.587291808894648E-10	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.9997517566616093	DESIGN	2.482433383906919E-4	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9621660244243226	WITHOUT_CLASSIFICATION	0.03783397557567745	DESIGN
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.5994487406075822	WITHOUT_CLASSIFICATION	0.40055125939241776	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9110912820999966	DESIGN	0.0889087179000034	WITHOUT_CLASSIFICATION
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999999957475613	DESIGN	4.252438728411695E-9	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9978159064704646	WITHOUT_CLASSIFICATION	0.0021840935295354244	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.9999485700996509	DESIGN	5.142990034908628E-5	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9999945391641184	WITHOUT_CLASSIFICATION	5.460835881555235E-6	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9985719284548717	DESIGN	0.0014280715451282814	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999952008918298	WITHOUT_CLASSIFICATION	4.7991081701903166E-6	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9838294592133937	WITHOUT_CLASSIFICATION	0.016170540786606298	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999997835493	DESIGN	2.164507113573587E-10	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.999982530314032	DESIGN	1.7469685968093453E-5	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.793367969623681	WITHOUT_CLASSIFICATION	0.206632030376319	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9420666103412763	WITHOUT_CLASSIFICATION	0.05793338965872374	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.7341304980991475	WITHOUT_CLASSIFICATION	0.26586950190085246	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9892102845639547	DESIGN	0.010789715436045354	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999973609926301	DESIGN	2.6390073698780437E-6	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.693438387510555	DESIGN	0.30656161248944497	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9799621210957162	WITHOUT_CLASSIFICATION	0.02003787890428372	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9966697453477275	DESIGN	0.003330254652272531	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9999225962395849	DESIGN	7.74037604150108E-5	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999632262065216	DESIGN	3.677379347851092E-5	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9226009132725687	WITHOUT_CLASSIFICATION	0.07739908672743132	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999964875382794	DESIGN	3.51246172052749E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.8026897515636572	DESIGN	0.1973102484363427	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.7300080767042134	DESIGN	0.26999192329578653	WITHOUT_CLASSIFICATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9987868161280381	DESIGN	0.0012131838719619489	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9999904109631335	DESIGN	9.589036866634797E-6	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.9857014780659522	DESIGN	0.014298521934047743	WITHOUT_CLASSIFICATION
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.999883623782402	DESIGN	1.1637621759793258E-4	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.6091478145669177	WITHOUT_CLASSIFICATION	0.3908521854330823	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.997458505128286	DESIGN	0.0025414948717139094	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999998803567653	WITHOUT_CLASSIFICATION	1.1964323466284678E-7	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999935184554644	DESIGN	6.481544535575441E-6	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.7748232857448621	DESIGN	0.22517671425513797	WITHOUT_CLASSIFICATION
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999988123686293	DESIGN	1.1876313707695044E-6	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9745583353838798	WITHOUT_CLASSIFICATION	0.025441664616120255	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9897318366975228	DESIGN	0.010268163302477191	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9949612460270054	DESIGN	0.005038753972994513	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9558562282479033	DESIGN	0.044143771752096723	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.99999999998878	DESIGN	1.1220018351899508E-11	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999988931945	DESIGN	1.1068054357524472E-9	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.7739461207710253	DESIGN	0.2260538792289747	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999976365332643	DESIGN	2.3634667355467408E-6	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.993488240973849	DESIGN	0.00651175902615092	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999654986774899	WITHOUT_CLASSIFICATION	3.450132251011414E-5	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999991942618145	WITHOUT_CLASSIFICATION	8.057381856178458E-7	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999589738	DESIGN	4.102624013214156E-11	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9999059517858929	DESIGN	9.404821410696271E-5	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999979125030728	DESIGN	2.087496927209254E-6	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.999819422149992	DESIGN	1.805778500080645E-4	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9996273827882208	DESIGN	3.7261721177921396E-4	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.8819666470515544	DESIGN	0.11803335294844562	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9989288099681127	DESIGN	0.001071190031887233	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.6010592074072665	WITHOUT_CLASSIFICATION	0.3989407925927334	DESIGN
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999995413440428	DESIGN	4.586559572443834E-7	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9305354707275322	WITHOUT_CLASSIFICATION	0.06946452927246777	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9998261127104899	DESIGN	1.7388728951011763E-4	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9802121510905276	DESIGN	0.019787848909472362	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999794420467303	DESIGN	2.0557953269732875E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999794420467303	DESIGN	2.0557953269732875E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.9999794420467303	DESIGN	2.0557953269732875E-5	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999999664118868	DESIGN	3.3588113162211735E-8	WITHOUT_CLASSIFICATION
