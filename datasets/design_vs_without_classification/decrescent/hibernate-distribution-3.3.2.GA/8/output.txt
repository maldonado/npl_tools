test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999972123453371	WITHOUT_CLASSIFICATION	2.78765466288913E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999448393215508	WITHOUT_CLASSIFICATION	5.51606784491361E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999448393215508	WITHOUT_CLASSIFICATION	5.51606784491361E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.998559326651372	WITHOUT_CLASSIFICATION	0.001440673348628033	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999954825753389	WITHOUT_CLASSIFICATION	4.517424661235683E-6	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999970300571577	WITHOUT_CLASSIFICATION	2.9699428422056942E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999953384165973	WITHOUT_CLASSIFICATION	4.66158340263594E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999953384165973	WITHOUT_CLASSIFICATION	4.66158340263594E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999990805347633	WITHOUT_CLASSIFICATION	9.194652366269357E-7	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999627964758	WITHOUT_CLASSIFICATION	3.720352405489866E-8	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999997803058097	WITHOUT_CLASSIFICATION	2.1969419023374958E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932848446973	WITHOUT_CLASSIFICATION	6.715155302677356E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999885869208974	WITHOUT_CLASSIFICATION	1.1413079102556415E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999885869208974	WITHOUT_CLASSIFICATION	1.1413079102556415E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999631129973741	WITHOUT_CLASSIFICATION	3.688700262601374E-5	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9996610846028658	WITHOUT_CLASSIFICATION	3.3891539713423594E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9995032136429116	WITHOUT_CLASSIFICATION	4.967863570883656E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999986818049321	WITHOUT_CLASSIFICATION	1.3181950679054769E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999988129358153	WITHOUT_CLASSIFICATION	1.1870641846751229E-6	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.99979039916376	WITHOUT_CLASSIFICATION	2.0960083623985834E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9999560805704104	WITHOUT_CLASSIFICATION	4.3919429589485354E-5	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999994131683677	WITHOUT_CLASSIFICATION	5.868316322960977E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999970586455259	WITHOUT_CLASSIFICATION	2.941354474221081E-6	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999997293365224	WITHOUT_CLASSIFICATION	2.706634776489043E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999972568552518	WITHOUT_CLASSIFICATION	2.743144748219158E-6	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999893781686723	WITHOUT_CLASSIFICATION	1.0621831327763707E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999567286317649	WITHOUT_CLASSIFICATION	4.327136823509766E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999857625727467	WITHOUT_CLASSIFICATION	1.423742725324313E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999857625727467	WITHOUT_CLASSIFICATION	1.423742725324313E-5	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9999910661700798	WITHOUT_CLASSIFICATION	8.933829920152352E-6	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999873884800151	WITHOUT_CLASSIFICATION	1.2611519984867281E-5	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999997186852303	WITHOUT_CLASSIFICATION	2.81314769709606E-7	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999897416754505	WITHOUT_CLASSIFICATION	1.0258324549562015E-5	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9906602592153131	DESIGN	0.009339740784686941	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999993689538328	WITHOUT_CLASSIFICATION	6.310461672392218E-7	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999980750046985	WITHOUT_CLASSIFICATION	1.9249953013698764E-6	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999996407485436	WITHOUT_CLASSIFICATION	3.592514563659001E-7	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.999914515013441	WITHOUT_CLASSIFICATION	8.548498655897622E-5	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999990840032164	WITHOUT_CLASSIFICATION	9.159967836956013E-7	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999995434806	WITHOUT_CLASSIFICATION	4.565193783660151E-10	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999998863237228	WITHOUT_CLASSIFICATION	1.1367627719647631E-7	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999981101044348	WITHOUT_CLASSIFICATION	1.8898955651761327E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999849705125216	WITHOUT_CLASSIFICATION	1.5029487478400883E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999860807209106	WITHOUT_CLASSIFICATION	1.3919279089502273E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999970378512927	WITHOUT_CLASSIFICATION	2.9621487073518263E-6	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937595358095	WITHOUT_CLASSIFICATION	6.240464190504166E-6	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999999961118049	WITHOUT_CLASSIFICATION	3.888195140326448E-9	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996804198524456	WITHOUT_CLASSIFICATION	3.195801475543377E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999968984918709	WITHOUT_CLASSIFICATION	3.1015081290572285E-6	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9999338832409855	WITHOUT_CLASSIFICATION	6.611675901449056E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999899404315343	WITHOUT_CLASSIFICATION	1.0059568465676112E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999968984918709	WITHOUT_CLASSIFICATION	3.1015081290572285E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999899404315343	WITHOUT_CLASSIFICATION	1.0059568465676112E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999984728568219	WITHOUT_CLASSIFICATION	1.5271431781020663E-6	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9962766635693077	WITHOUT_CLASSIFICATION	0.0037233364306923445	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999975271369712	WITHOUT_CLASSIFICATION	2.4728630288105925E-6	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999794783123027	WITHOUT_CLASSIFICATION	2.0521687697250503E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999864555659186	WITHOUT_CLASSIFICATION	1.3544434081452196E-5	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999538679613672	WITHOUT_CLASSIFICATION	4.61320386327884E-5	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998858692564846	WITHOUT_CLASSIFICATION	1.1413074351537812E-4	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9308488313502717	WITHOUT_CLASSIFICATION	0.06915116864972826	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999999994636695	WITHOUT_CLASSIFICATION	5.363304566501375E-10	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9994536878719656	WITHOUT_CLASSIFICATION	5.463121280343592E-4	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999892759471258	WITHOUT_CLASSIFICATION	1.0724052874195343E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999899404315343	WITHOUT_CLASSIFICATION	1.0059568465676112E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999800832451	WITHOUT_CLASSIFICATION	1.9916754909337964E-8	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999789444937887	WITHOUT_CLASSIFICATION	2.105550621125725E-5	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9584511532724238	WITHOUT_CLASSIFICATION	0.041548846727576166	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999393240451669	WITHOUT_CLASSIFICATION	6.0675954832971496E-5	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9997164097437301	WITHOUT_CLASSIFICATION	2.8359025626989995E-4	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999625809506655	WITHOUT_CLASSIFICATION	3.741904933455591E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999038390448487	WITHOUT_CLASSIFICATION	9.616095515123019E-5	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999965253103343	WITHOUT_CLASSIFICATION	3.4746896656573218E-6	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.999937462594252	WITHOUT_CLASSIFICATION	6.253740574796963E-5	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999998534896418	WITHOUT_CLASSIFICATION	1.4651035821719614E-7	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999376839145069	WITHOUT_CLASSIFICATION	6.231608549312761E-5	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987016458761	WITHOUT_CLASSIFICATION	1.298354123974738E-6	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9546611922599203	WITHOUT_CLASSIFICATION	0.04533880774007974	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999970395781707	WITHOUT_CLASSIFICATION	2.960421829352004E-6	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999998803876095	WITHOUT_CLASSIFICATION	1.1961239048147088E-7	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.98256396824793	DESIGN	0.017436031752070032	WITHOUT_CLASSIFICATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999668478573	WITHOUT_CLASSIFICATION	3.3152142686690884E-8	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999714641412	WITHOUT_CLASSIFICATION	2.8535858828547445E-8	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999939324997	WITHOUT_CLASSIFICATION	6.067500278673601E-9	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999998288696997	WITHOUT_CLASSIFICATION	1.7113030035904956E-7	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999753753796263	WITHOUT_CLASSIFICATION	2.462462037372695E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999486061541438	WITHOUT_CLASSIFICATION	5.139384585611489E-5	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.999999771827637	WITHOUT_CLASSIFICATION	2.281723630636995E-7	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.999999999638138	WITHOUT_CLASSIFICATION	3.618619180282654E-10	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999486061541438	WITHOUT_CLASSIFICATION	5.139384585611489E-5	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999999974919618	WITHOUT_CLASSIFICATION	2.5080382479162615E-9	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999985748735721	WITHOUT_CLASSIFICATION	1.4251264279234459E-6	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999968984918709	WITHOUT_CLASSIFICATION	3.1015081290572285E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999982782679079	WITHOUT_CLASSIFICATION	1.7217320921522738E-6	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9999789233437716	WITHOUT_CLASSIFICATION	2.1076656228518875E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879172098022	WITHOUT_CLASSIFICATION	1.2082790197715762E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879172098022	WITHOUT_CLASSIFICATION	1.2082790197715762E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999940643368147	WITHOUT_CLASSIFICATION	5.935663185301823E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9998288619567254	WITHOUT_CLASSIFICATION	1.7113804327458014E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999774639937	WITHOUT_CLASSIFICATION	2.253600630649508E-8	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999942260250392	WITHOUT_CLASSIFICATION	5.7739749607857975E-6	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999976034742537	WITHOUT_CLASSIFICATION	2.3965257462637515E-6	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999922533422764	WITHOUT_CLASSIFICATION	7.746657723671757E-6	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999640447733	WITHOUT_CLASSIFICATION	3.595522664984392E-8	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999886158639921	WITHOUT_CLASSIFICATION	1.1384136007956184E-5	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999942000459281	WITHOUT_CLASSIFICATION	5.799954071855471E-6	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.999999943901136	WITHOUT_CLASSIFICATION	5.609886396605338E-8	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999888578036921	WITHOUT_CLASSIFICATION	1.1142196307985503E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999888578036921	WITHOUT_CLASSIFICATION	1.1142196307985503E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999996686740077	WITHOUT_CLASSIFICATION	3.313259923117001E-7	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999637258381	WITHOUT_CLASSIFICATION	3.6274161827445316E-8	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9993782571394305	WITHOUT_CLASSIFICATION	6.217428605694517E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999888578036921	WITHOUT_CLASSIFICATION	1.1142196307985503E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999996686740077	WITHOUT_CLASSIFICATION	3.313259923117001E-7	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999996686740077	WITHOUT_CLASSIFICATION	3.313259923117001E-7	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999102679467928	WITHOUT_CLASSIFICATION	8.973205320715488E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9995269588074618	WITHOUT_CLASSIFICATION	4.730411925382912E-4	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999596998	WITHOUT_CLASSIFICATION	4.0300118057399726E-11	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999989176952396	WITHOUT_CLASSIFICATION	1.0823047604050115E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9989598151196893	WITHOUT_CLASSIFICATION	0.0010401848803107193	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9989598151196893	WITHOUT_CLASSIFICATION	0.0010401848803107193	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999997617751814	WITHOUT_CLASSIFICATION	2.3822481859074908E-7	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998338769962479	WITHOUT_CLASSIFICATION	1.6612300375215276E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999947512140003	WITHOUT_CLASSIFICATION	5.248785999705234E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999906126562962	WITHOUT_CLASSIFICATION	9.38734370389638E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999906126562962	WITHOUT_CLASSIFICATION	9.38734370389638E-6	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999565293295907	WITHOUT_CLASSIFICATION	4.347067040931719E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9991326393371139	WITHOUT_CLASSIFICATION	8.67360662885993E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9997060525626245	WITHOUT_CLASSIFICATION	2.939474373755504E-4	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999955297026	WITHOUT_CLASSIFICATION	4.470297305818479E-9	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9995916203372832	WITHOUT_CLASSIFICATION	4.0837966271680206E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999999947489433	WITHOUT_CLASSIFICATION	5.2510566371898145E-9	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999989762230813	WITHOUT_CLASSIFICATION	1.0237769186297075E-6	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998921981736252	WITHOUT_CLASSIFICATION	1.0780182637478911E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999987293595431	WITHOUT_CLASSIFICATION	1.270640456825547E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9997060525626245	WITHOUT_CLASSIFICATION	2.939474373755504E-4	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9996816630603987	WITHOUT_CLASSIFICATION	3.183369396012507E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998825125179233	WITHOUT_CLASSIFICATION	1.1748748207672439E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998825125179233	WITHOUT_CLASSIFICATION	1.1748748207672439E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.999996201232822	WITHOUT_CLASSIFICATION	3.798767177996062E-6	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9994735006470054	WITHOUT_CLASSIFICATION	5.264993529945992E-4	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999993650617124	WITHOUT_CLASSIFICATION	6.349382876733501E-7	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9071842202902969	WITHOUT_CLASSIFICATION	0.09281577970970317	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999981616438871	WITHOUT_CLASSIFICATION	1.8383561128998074E-5	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9999898123564279	WITHOUT_CLASSIFICATION	1.0187643572094385E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9994727318550174	WITHOUT_CLASSIFICATION	5.272681449825446E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9999098421955294	WITHOUT_CLASSIFICATION	9.015780447061542E-5	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.999988449421729	WITHOUT_CLASSIFICATION	1.1550578271008702E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999992001163	WITHOUT_CLASSIFICATION	7.998837073188337E-9	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999999992001163	WITHOUT_CLASSIFICATION	7.998837073188337E-9	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999634967909361	WITHOUT_CLASSIFICATION	3.650320906380733E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999972123453371	WITHOUT_CLASSIFICATION	2.78765466288913E-6	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999993164100369	WITHOUT_CLASSIFICATION	6.835899630936202E-7	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999996315273086	WITHOUT_CLASSIFICATION	3.6847269131947334E-7	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999448393215508	WITHOUT_CLASSIFICATION	5.51606784491361E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999932368737198	WITHOUT_CLASSIFICATION	6.763126280126488E-6	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999721778224078	WITHOUT_CLASSIFICATION	2.7822177592315198E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999936553405496	WITHOUT_CLASSIFICATION	6.3446594503408745E-6	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.999997526416759	WITHOUT_CLASSIFICATION	2.4735832408939498E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999907629246947	WITHOUT_CLASSIFICATION	9.237075305313473E-6	DESIGN
new	WITHOUT_CLASSIFICATION	0.9998578700623458	WITHOUT_CLASSIFICATION	1.4212993765413403E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995160211644035	WITHOUT_CLASSIFICATION	4.8397883559649026E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999958963832098	WITHOUT_CLASSIFICATION	4.103616790179564E-6	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999954825753389	WITHOUT_CLASSIFICATION	4.517424661235683E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994711313274	WITHOUT_CLASSIFICATION	5.288686726773486E-7	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994711313274	WITHOUT_CLASSIFICATION	5.288686726773486E-7	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.999993383020491	WITHOUT_CLASSIFICATION	6.6169795089440234E-6	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.99491940466416	WITHOUT_CLASSIFICATION	0.005080595335840123	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999841826897721	WITHOUT_CLASSIFICATION	1.581731022799061E-5	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.999998170590252	WITHOUT_CLASSIFICATION	1.8294097480881698E-6	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9999908874493016	WITHOUT_CLASSIFICATION	9.112550698246787E-6	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9995054221768187	WITHOUT_CLASSIFICATION	4.945778231813095E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999953384165973	WITHOUT_CLASSIFICATION	4.66158340263594E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9992814131363553	WITHOUT_CLASSIFICATION	7.185868636447693E-4	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999976868011945	WITHOUT_CLASSIFICATION	2.3131988056140544E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9999861819311396	WITHOUT_CLASSIFICATION	1.3818068860403325E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999985633683639	WITHOUT_CLASSIFICATION	1.4366316361497928E-6	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9998559387412564	WITHOUT_CLASSIFICATION	1.4406125874348791E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9999831476515143	WITHOUT_CLASSIFICATION	1.6852348485763416E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999432950016	WITHOUT_CLASSIFICATION	5.670499839997092E-5	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999546862163	WITHOUT_CLASSIFICATION	4.531378369402889E-7	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999973565303862	WITHOUT_CLASSIFICATION	2.6434696137910915E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999982061307636	WITHOUT_CLASSIFICATION	1.7938692363475979E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9923875540546121	WITHOUT_CLASSIFICATION	0.007612445945387809	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999744229342661	WITHOUT_CLASSIFICATION	2.55770657338837E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999956064783565	WITHOUT_CLASSIFICATION	4.3935216435729104E-6	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999448393215508	WITHOUT_CLASSIFICATION	5.51606784491361E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999448393215508	WITHOUT_CLASSIFICATION	5.51606784491361E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995160211644035	WITHOUT_CLASSIFICATION	4.8397883559649026E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999994711313274	WITHOUT_CLASSIFICATION	5.288686726773486E-7	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999432950016	WITHOUT_CLASSIFICATION	5.670499839997092E-5	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999990805347633	WITHOUT_CLASSIFICATION	9.194652366269357E-7	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999948579417993	WITHOUT_CLASSIFICATION	5.142058200717345E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9999696575275485	WITHOUT_CLASSIFICATION	3.034247245140772E-5	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999749024979182	WITHOUT_CLASSIFICATION	2.5097502081774357E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999975194314374	WITHOUT_CLASSIFICATION	2.480568562621114E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999997563965597	WITHOUT_CLASSIFICATION	2.436034403244156E-7	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9999260385052678	WITHOUT_CLASSIFICATION	7.396149473218413E-5	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999994406104578	WITHOUT_CLASSIFICATION	5.593895421532315E-7	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999931627452792	WITHOUT_CLASSIFICATION	6.837254720892271E-6	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9999526619582643	WITHOUT_CLASSIFICATION	4.7338041735815E-5	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999936421023558	WITHOUT_CLASSIFICATION	6.357897644202129E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999936421023558	WITHOUT_CLASSIFICATION	6.357897644202129E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.999976688743706	WITHOUT_CLASSIFICATION	2.3311256293991683E-5	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999991437843403	WITHOUT_CLASSIFICATION	8.562156598434177E-7	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9987767812970239	WITHOUT_CLASSIFICATION	0.0012232187029761297	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999900421679822	WITHOUT_CLASSIFICATION	9.95783201790758E-6	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999796080197334	WITHOUT_CLASSIFICATION	2.0391980266579435E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999947980400132	WITHOUT_CLASSIFICATION	5.201959986774083E-6	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9999212230492963	WITHOUT_CLASSIFICATION	7.877695070365644E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999627964758	WITHOUT_CLASSIFICATION	3.720352405489866E-8	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.999996476804503	WITHOUT_CLASSIFICATION	3.523195497055053E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999973098134046	WITHOUT_CLASSIFICATION	2.6901865954669018E-6	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999973098134046	WITHOUT_CLASSIFICATION	2.6901865954669018E-6	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999997996907964	WITHOUT_CLASSIFICATION	2.0030920348815993E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999930139237089	WITHOUT_CLASSIFICATION	6.9860762910908345E-6	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999997154484569	WITHOUT_CLASSIFICATION	2.845515432017253E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999767271145	WITHOUT_CLASSIFICATION	2.3272885473292397E-8	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999763393016745	WITHOUT_CLASSIFICATION	2.3660698325445017E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999448393215508	WITHOUT_CLASSIFICATION	5.51606784491361E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9995160211644035	WITHOUT_CLASSIFICATION	4.8397883559649026E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999954825753389	WITHOUT_CLASSIFICATION	4.517424661235683E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999432950016	WITHOUT_CLASSIFICATION	5.670499839997092E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9999432950016	WITHOUT_CLASSIFICATION	5.670499839997092E-5	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999733778724	WITHOUT_CLASSIFICATION	2.6622127572526658E-8	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999999733778724	WITHOUT_CLASSIFICATION	2.6622127572526658E-8	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999997264054302	WITHOUT_CLASSIFICATION	2.735945697667336E-7	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999970701654181	WITHOUT_CLASSIFICATION	2.929834581917417E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999970701654181	WITHOUT_CLASSIFICATION	2.929834581917417E-6	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9998620763572428	WITHOUT_CLASSIFICATION	1.3792364275733979E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9999709675727776	WITHOUT_CLASSIFICATION	2.903242722250306E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999980264303205	WITHOUT_CLASSIFICATION	1.9735696794100477E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999946490432344	WITHOUT_CLASSIFICATION	5.350956765636823E-6	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999993837489465	WITHOUT_CLASSIFICATION	6.16251053542898E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932848446973	WITHOUT_CLASSIFICATION	6.715155302677356E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932848446973	WITHOUT_CLASSIFICATION	6.715155302677356E-6	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9996125206157064	WITHOUT_CLASSIFICATION	3.874793842936386E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999980062376667	WITHOUT_CLASSIFICATION	1.993762333244222E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999952835672274	WITHOUT_CLASSIFICATION	4.716432772564729E-6	DESIGN
byte	WITHOUT_CLASSIFICATION	0.999891431080934	WITHOUT_CLASSIFICATION	1.0856891906594791E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.999995765362674	WITHOUT_CLASSIFICATION	4.234637325998371E-6	DESIGN
short	WITHOUT_CLASSIFICATION	0.9998620007882008	WITHOUT_CLASSIFICATION	1.3799921179917572E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999885869208974	WITHOUT_CLASSIFICATION	1.1413079102556415E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999936206616152	WITHOUT_CLASSIFICATION	6.37933838470048E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999936206616152	WITHOUT_CLASSIFICATION	6.37933838470048E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999631129973741	WITHOUT_CLASSIFICATION	3.688700262601374E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999631129973741	WITHOUT_CLASSIFICATION	3.688700262601374E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999440036956224	WITHOUT_CLASSIFICATION	5.599630437763238E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999440036956224	WITHOUT_CLASSIFICATION	5.599630437763238E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998848940046	WITHOUT_CLASSIFICATION	1.1510599540465467E-7	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998848940046	WITHOUT_CLASSIFICATION	1.1510599540465467E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999932848446973	WITHOUT_CLASSIFICATION	6.715155302677356E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999885869208974	WITHOUT_CLASSIFICATION	1.1413079102556415E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999936206616152	WITHOUT_CLASSIFICATION	6.37933838470048E-6	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999936206616152	WITHOUT_CLASSIFICATION	6.37933838470048E-6	DESIGN
long	WITHOUT_CLASSIFICATION	0.9999631129973741	WITHOUT_CLASSIFICATION	3.688700262601374E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999440036956224	WITHOUT_CLASSIFICATION	5.599630437763238E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999440036956224	WITHOUT_CLASSIFICATION	5.599630437763238E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999998848940046	WITHOUT_CLASSIFICATION	1.1510599540465467E-7	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9997775094700527	WITHOUT_CLASSIFICATION	2.2249052994730714E-4	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999991748305431	WITHOUT_CLASSIFICATION	8.251694568597406E-7	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999541239149934	WITHOUT_CLASSIFICATION	4.587608500665015E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999937188077412	WITHOUT_CLASSIFICATION	6.2811922586808194E-6	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999527823365228	WITHOUT_CLASSIFICATION	4.721766347708234E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999708285073217	WITHOUT_CLASSIFICATION	2.9171492678278578E-5	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9833809714500598	WITHOUT_CLASSIFICATION	0.016619028549940292	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9848348908168234	WITHOUT_CLASSIFICATION	0.01516510918317661	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999898953876415	WITHOUT_CLASSIFICATION	1.0104612358457875E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999994947	WITHOUT_CLASSIFICATION	5.051901503039857E-13	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999550059367	WITHOUT_CLASSIFICATION	4.499406321392766E-8	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999994584331475	WITHOUT_CLASSIFICATION	5.415668525591508E-7	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999940643368147	WITHOUT_CLASSIFICATION	5.935663185301823E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999708285073217	WITHOUT_CLASSIFICATION	2.9171492678278578E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999708285073217	WITHOUT_CLASSIFICATION	2.9171492678278578E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999708285073217	WITHOUT_CLASSIFICATION	2.9171492678278578E-5	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999723512399494	WITHOUT_CLASSIFICATION	2.764876005053503E-5	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999941099996476	WITHOUT_CLASSIFICATION	5.89000035235366E-6	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999941099996476	WITHOUT_CLASSIFICATION	5.89000035235366E-6	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999949287866603	WITHOUT_CLASSIFICATION	5.071213339672286E-6	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999959736831144	WITHOUT_CLASSIFICATION	4.026316885532649E-6	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999864699706	WITHOUT_CLASSIFICATION	1.353002953606816E-8	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999870770898983	WITHOUT_CLASSIFICATION	1.2922910101650112E-5	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999870770898983	WITHOUT_CLASSIFICATION	1.2922910101650112E-5	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999988129358153	WITHOUT_CLASSIFICATION	1.1870641846751229E-6	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995938778780924	WITHOUT_CLASSIFICATION	4.0612212190751216E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9995938778780924	WITHOUT_CLASSIFICATION	4.0612212190751216E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9999344611067036	WITHOUT_CLASSIFICATION	6.553889329645454E-5	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999951958130395	WITHOUT_CLASSIFICATION	4.8041869605034E-6	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999870275291621	WITHOUT_CLASSIFICATION	1.297247083793322E-5	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999958333327695	WITHOUT_CLASSIFICATION	4.166667230413311E-6	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9999822662309394	WITHOUT_CLASSIFICATION	1.7733769060502552E-5	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9999494615390041	WITHOUT_CLASSIFICATION	5.053846099585851E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.99979039916376	WITHOUT_CLASSIFICATION	2.0960083623985834E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.999967075387858	WITHOUT_CLASSIFICATION	3.292461214202805E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9817462644459837	WITHOUT_CLASSIFICATION	0.018253735554016284	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9999584232902249	WITHOUT_CLASSIFICATION	4.157670977502538E-5	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999996965202368	WITHOUT_CLASSIFICATION	3.034797631107085E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999970586455259	WITHOUT_CLASSIFICATION	2.941354474221081E-6	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999990038696668	WITHOUT_CLASSIFICATION	9.96130333263735E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999997446320918	WITHOUT_CLASSIFICATION	2.5536790811322805E-7	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999999325568384	WITHOUT_CLASSIFICATION	6.744316157450198E-8	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999970586455259	WITHOUT_CLASSIFICATION	2.941354474221081E-6	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999978646796369	WITHOUT_CLASSIFICATION	2.1353203630420107E-6	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999998425487339	WITHOUT_CLASSIFICATION	1.5745126615730022E-7	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999986051098744	WITHOUT_CLASSIFICATION	1.3948901256085094E-6	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999898311331564	WITHOUT_CLASSIFICATION	1.0168866843467012E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999889673520576	WITHOUT_CLASSIFICATION	1.1032647942475543E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999989924070924	WITHOUT_CLASSIFICATION	1.0075929075330513E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999988868278135	WITHOUT_CLASSIFICATION	1.1131721865554955E-6	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999893781686723	WITHOUT_CLASSIFICATION	1.0621831327763707E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999864632924116	WITHOUT_CLASSIFICATION	1.3536707588377403E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999567286317649	WITHOUT_CLASSIFICATION	4.327136823509766E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999791778927304	WITHOUT_CLASSIFICATION	2.0822107269639648E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999984288136393	WITHOUT_CLASSIFICATION	1.5711863606472087E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9997896816696976	WITHOUT_CLASSIFICATION	2.1031833030238535E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.99979039916376	WITHOUT_CLASSIFICATION	2.0960083623985834E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999864632924116	WITHOUT_CLASSIFICATION	1.3536707588377403E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999791778927304	WITHOUT_CLASSIFICATION	2.0822107269639648E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9997896816696976	WITHOUT_CLASSIFICATION	2.1031833030238535E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999031364367	WITHOUT_CLASSIFICATION	9.686356330158913E-8	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9999560541667611	WITHOUT_CLASSIFICATION	4.3945833238967705E-5	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999824011333	WITHOUT_CLASSIFICATION	1.759886672761711E-8	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999857625727467	WITHOUT_CLASSIFICATION	1.423742725324313E-5	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999847473034182	WITHOUT_CLASSIFICATION	1.5252696581841204E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999973911230019	WITHOUT_CLASSIFICATION	2.608876998154354E-6	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999966126383493	WITHOUT_CLASSIFICATION	3.3873616507688327E-6	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9850588662790531	WITHOUT_CLASSIFICATION	0.014941133720946952	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999973451484546	WITHOUT_CLASSIFICATION	2.6548515453619944E-6	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999999999822413	WITHOUT_CLASSIFICATION	1.7758693385228496E-10	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999862163889294	WITHOUT_CLASSIFICATION	1.3783611070604917E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999811163117743	WITHOUT_CLASSIFICATION	1.8883688225746126E-5	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999912698	WITHOUT_CLASSIFICATION	8.73029030334222E-12	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999967481344151	WITHOUT_CLASSIFICATION	3.2518655849747255E-6	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9999331892526615	WITHOUT_CLASSIFICATION	6.68107473384879E-5	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999867027315293	WITHOUT_CLASSIFICATION	1.3297268470620255E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999873884800151	WITHOUT_CLASSIFICATION	1.2611519984867281E-5	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999997537822486	WITHOUT_CLASSIFICATION	2.462177514594291E-7	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9999729459640577	WITHOUT_CLASSIFICATION	2.7054035942186665E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999864632924116	WITHOUT_CLASSIFICATION	1.3536707588377403E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999999614843747	WITHOUT_CLASSIFICATION	3.851562529496387E-7	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999959584418918	WITHOUT_CLASSIFICATION	4.041558108102406E-6	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999993871450235	WITHOUT_CLASSIFICATION	6.128549765902562E-7	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999684576260875	WITHOUT_CLASSIFICATION	3.1542373912461774E-5	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999958970046727	WITHOUT_CLASSIFICATION	4.102995327230875E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999782314757729	WITHOUT_CLASSIFICATION	2.17685242270397E-5	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999805454708	WITHOUT_CLASSIFICATION	1.9454529188096213E-8	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999756226381	WITHOUT_CLASSIFICATION	2.4377361970848656E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999987837060529	WITHOUT_CLASSIFICATION	1.2162939471559511E-6	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9998850232689528	WITHOUT_CLASSIFICATION	1.1497673104718578E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999829858824917	WITHOUT_CLASSIFICATION	1.7014117508329225E-5	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999954012692462	WITHOUT_CLASSIFICATION	4.598730753710328E-6	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9988405210198414	WITHOUT_CLASSIFICATION	0.0011594789801585813	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999897416754505	WITHOUT_CLASSIFICATION	1.0258324549562015E-5	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.999986111952034	WITHOUT_CLASSIFICATION	1.38880479660404E-5	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999790811785341	WITHOUT_CLASSIFICATION	2.0918821465838283E-5	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999892785203	WITHOUT_CLASSIFICATION	1.0721479700052604E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999992961581008	WITHOUT_CLASSIFICATION	7.038418992642662E-7	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999976223626551	WITHOUT_CLASSIFICATION	2.377637344815578E-6	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999376608733057	WITHOUT_CLASSIFICATION	6.233912669431701E-5	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999997618169	WITHOUT_CLASSIFICATION	2.3818313955215876E-10	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999812773935538	WITHOUT_CLASSIFICATION	1.872260644612372E-5	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9858709908168308	WITHOUT_CLASSIFICATION	0.014129009183169143	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999767021450332	WITHOUT_CLASSIFICATION	2.3297854966853757E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999365802678011	WITHOUT_CLASSIFICATION	6.341973219888128E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999365802678011	WITHOUT_CLASSIFICATION	6.341973219888128E-5	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999977243318652	WITHOUT_CLASSIFICATION	2.2756681349354855E-6	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999796931823265	WITHOUT_CLASSIFICATION	2.0306817673512922E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.999987364540614	WITHOUT_CLASSIFICATION	1.2635459385983113E-5	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9998522503184861	WITHOUT_CLASSIFICATION	1.477496815139052E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9997983825732053	WITHOUT_CLASSIFICATION	2.016174267946532E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9992357940567312	WITHOUT_CLASSIFICATION	7.642059432687176E-4	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9999288336514388	WITHOUT_CLASSIFICATION	7.116634856114836E-5	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999862296001238	WITHOUT_CLASSIFICATION	1.3770399876136752E-5	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999073068688035	WITHOUT_CLASSIFICATION	9.269313119658096E-5	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999950666731424	WITHOUT_CLASSIFICATION	4.9333268575372384E-6	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999991541047296	WITHOUT_CLASSIFICATION	8.458952702901114E-7	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999988333390556	WITHOUT_CLASSIFICATION	1.1666609443930186E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999943267791825	WITHOUT_CLASSIFICATION	5.673220817425614E-6	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.999999846278665	WITHOUT_CLASSIFICATION	1.5372133499347824E-7	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.999741039741225	WITHOUT_CLASSIFICATION	2.589602587750681E-4	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9978656599054383	WITHOUT_CLASSIFICATION	0.002134340094561797	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999997643776322	WITHOUT_CLASSIFICATION	2.3562236793793655E-7	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9995998519844634	WITHOUT_CLASSIFICATION	4.001480155364804E-4	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999862272725182	WITHOUT_CLASSIFICATION	1.3772727481795542E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9993677426354926	WITHOUT_CLASSIFICATION	6.322573645075612E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975144417244117	WITHOUT_CLASSIFICATION	0.0024855582755882585	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999992364899	WITHOUT_CLASSIFICATION	7.635102033823969E-10	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999803201755121	WITHOUT_CLASSIFICATION	1.96798244878475E-5	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9999785505658946	WITHOUT_CLASSIFICATION	2.1449434105508035E-5	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9994721879371208	WITHOUT_CLASSIFICATION	5.278120628792337E-4	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999187338121125	WITHOUT_CLASSIFICATION	8.126618788751081E-5	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999254633875	WITHOUT_CLASSIFICATION	7.453661253137616E-8	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9999978357717546	WITHOUT_CLASSIFICATION	2.1642282453397037E-6	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999999370062832	WITHOUT_CLASSIFICATION	6.299371680829033E-8	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9950377236128343	WITHOUT_CLASSIFICATION	0.004962276387165735	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9993677426354926	WITHOUT_CLASSIFICATION	6.322573645075612E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9989116880235825	WITHOUT_CLASSIFICATION	0.0010883119764174556	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999986824510746	WITHOUT_CLASSIFICATION	1.3175489254864087E-6	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999984991736427	WITHOUT_CLASSIFICATION	1.5008263573533088E-6	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998743928051028	WITHOUT_CLASSIFICATION	1.2560719489718326E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9998743928051028	WITHOUT_CLASSIFICATION	1.2560719489718326E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9997396864298278	WITHOUT_CLASSIFICATION	2.6031357017222207E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999985241024824	WITHOUT_CLASSIFICATION	1.4758975177378355E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999916028893964	WITHOUT_CLASSIFICATION	8.39711060354954E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999916028893964	WITHOUT_CLASSIFICATION	8.39711060354954E-6	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.9858709908168308	WITHOUT_CLASSIFICATION	0.014129009183169143	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999946734267	WITHOUT_CLASSIFICATION	5.3265732606766765E-9	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999113485945128	WITHOUT_CLASSIFICATION	8.865140548720443E-5	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994664658488	WITHOUT_CLASSIFICATION	5.335341511256533E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999634967909361	WITHOUT_CLASSIFICATION	3.650320906380733E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9999113485945128	WITHOUT_CLASSIFICATION	8.865140548720443E-5	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999994664658488	WITHOUT_CLASSIFICATION	5.335341511256533E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999971608459441	WITHOUT_CLASSIFICATION	2.8391540559328392E-6	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9999784809259716	WITHOUT_CLASSIFICATION	2.1519074028429703E-5	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999893850631714	WITHOUT_CLASSIFICATION	1.061493682854094E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.999998455750789	WITHOUT_CLASSIFICATION	1.5442492109384479E-6	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9995591143412811	WITHOUT_CLASSIFICATION	4.4088565871892816E-4	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.5361916294759289	WITHOUT_CLASSIFICATION	0.46380837052407103	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999938436336169	WITHOUT_CLASSIFICATION	6.156366383134742E-6	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999938436336169	WITHOUT_CLASSIFICATION	6.156366383134742E-6	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9996211934004094	WITHOUT_CLASSIFICATION	3.7880659959053963E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999999894842	WITHOUT_CLASSIFICATION	1.0515777410416055E-11	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999993453887935	WITHOUT_CLASSIFICATION	6.54611206476731E-7	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.999965569719289	WITHOUT_CLASSIFICATION	3.443028071099435E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999945379592479	WITHOUT_CLASSIFICATION	5.4620407520589E-6	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.999998836131237	WITHOUT_CLASSIFICATION	1.163868763026222E-6	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999634967909361	WITHOUT_CLASSIFICATION	3.650320906380733E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999986428983869	WITHOUT_CLASSIFICATION	1.3571016131566182E-6	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999980424321266	WITHOUT_CLASSIFICATION	1.9575678733967557E-6	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999980424321266	WITHOUT_CLASSIFICATION	1.9575678733967557E-6	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9995909721202573	WITHOUT_CLASSIFICATION	4.0902787974266626E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999971608459441	WITHOUT_CLASSIFICATION	2.8391540559328392E-6	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9997112656527465	WITHOUT_CLASSIFICATION	2.8873434725353394E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999629163858846	DESIGN	3.708361411525289E-5	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5565402050181016	WITHOUT_CLASSIFICATION	0.44345979498189825	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997704543694	WITHOUT_CLASSIFICATION	2.2954563061891283E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993619430623861	WITHOUT_CLASSIFICATION	6.380569376138688E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999971608459441	WITHOUT_CLASSIFICATION	2.8391540559328392E-6	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999997704543694	WITHOUT_CLASSIFICATION	2.2954563061891283E-7	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9993619430623861	WITHOUT_CLASSIFICATION	6.380569376138688E-4	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999999842077707	WITHOUT_CLASSIFICATION	1.57922293035298E-7	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999483526679	WITHOUT_CLASSIFICATION	5.16473320364107E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999999839742112	WITHOUT_CLASSIFICATION	1.6025788748147782E-8	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999971608459441	WITHOUT_CLASSIFICATION	2.8391540559328392E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999971608459441	WITHOUT_CLASSIFICATION	2.8391540559328392E-6	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9999677984532891	WITHOUT_CLASSIFICATION	3.2201546710887755E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9999384701450549	WITHOUT_CLASSIFICATION	6.152985494522255E-5	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999742915128208	WITHOUT_CLASSIFICATION	2.5708487179137342E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999849705125216	WITHOUT_CLASSIFICATION	1.5029487478400883E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999969061979105	WITHOUT_CLASSIFICATION	3.0938020894804326E-6	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999997547501	WITHOUT_CLASSIFICATION	2.452499145400461E-10	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999999539032287	WITHOUT_CLASSIFICATION	4.6096771322051206E-8	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9990755080566976	WITHOUT_CLASSIFICATION	9.244919433023851E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999307889505729	WITHOUT_CLASSIFICATION	6.921104942713515E-5	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999865347045288	WITHOUT_CLASSIFICATION	1.346529547109997E-5	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999963400776732	WITHOUT_CLASSIFICATION	3.659922326668652E-6	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999936718504258	WITHOUT_CLASSIFICATION	6.328149574249084E-6	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999864976851125	WITHOUT_CLASSIFICATION	1.3502314887505577E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.987993810426071	WITHOUT_CLASSIFICATION	0.012006189573928907	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996559536115	WITHOUT_CLASSIFICATION	3.4404638844527007E-7	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999965986965105	WITHOUT_CLASSIFICATION	3.4013034895681933E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999849705125216	WITHOUT_CLASSIFICATION	1.5029487478400883E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9987090131902199	WITHOUT_CLASSIFICATION	0.0012909868097800887	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999966627628248	WITHOUT_CLASSIFICATION	3.3372371751698435E-6	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999682288887	WITHOUT_CLASSIFICATION	3.1771111310659894E-8	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.99999938280553	WITHOUT_CLASSIFICATION	6.17194470035419E-7	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999143590057258	WITHOUT_CLASSIFICATION	8.564099427417158E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9999143590057258	WITHOUT_CLASSIFICATION	8.564099427417158E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.999849705125216	WITHOUT_CLASSIFICATION	1.5029487478400883E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999990228964727	WITHOUT_CLASSIFICATION	9.77103527324282E-7	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9998794703190239	WITHOUT_CLASSIFICATION	1.2052968097616574E-4	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.6090215169572704	WITHOUT_CLASSIFICATION	0.3909784830427296	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999999363954158	WITHOUT_CLASSIFICATION	6.360458414459483E-8	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999875894254706	WITHOUT_CLASSIFICATION	1.2410574529434793E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999988740102546	WITHOUT_CLASSIFICATION	1.125989745385647E-6	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9991211684294609	WITHOUT_CLASSIFICATION	8.788315705392425E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998925029586638	WITHOUT_CLASSIFICATION	1.0749704133624475E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999667965147	WITHOUT_CLASSIFICATION	3.320348539739555E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999992736352515	WITHOUT_CLASSIFICATION	7.263647484270121E-7	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996330139417	WITHOUT_CLASSIFICATION	3.6698605823895755E-7	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.999914084149132	WITHOUT_CLASSIFICATION	8.591585086801761E-5	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9997445714928531	WITHOUT_CLASSIFICATION	2.554285071468172E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999986586705	WITHOUT_CLASSIFICATION	1.341329537337054E-9	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999677127517	WITHOUT_CLASSIFICATION	3.2287248393769156E-8	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9995456647525026	WITHOUT_CLASSIFICATION	4.543352474974443E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999879746888849	WITHOUT_CLASSIFICATION	1.2025311115060715E-5	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999956855782528	WITHOUT_CLASSIFICATION	4.314421747171783E-6	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997040352030236	WITHOUT_CLASSIFICATION	2.959647969763637E-4	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.999992306632836	WITHOUT_CLASSIFICATION	7.693367163869196E-6	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999985444959956	WITHOUT_CLASSIFICATION	1.455504004505567E-6	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9994690282318118	WITHOUT_CLASSIFICATION	5.309717681882205E-4	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998350222673109	WITHOUT_CLASSIFICATION	1.6497773268906384E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999741640543699	WITHOUT_CLASSIFICATION	2.583594563014924E-5	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999338048011639	WITHOUT_CLASSIFICATION	6.619519883606849E-5	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999444847713697	WITHOUT_CLASSIFICATION	5.5515228630394855E-5	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868819439495	WITHOUT_CLASSIFICATION	1.3118056050571001E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998769881289054	WITHOUT_CLASSIFICATION	1.230118710946655E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998006859991877	WITHOUT_CLASSIFICATION	1.9931400081218753E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898425033138	WITHOUT_CLASSIFICATION	1.0157496686081195E-5	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9992626652515451	WITHOUT_CLASSIFICATION	7.373347484549668E-4	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9888684225550547	WITHOUT_CLASSIFICATION	0.011131577444945282	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984150028576	WITHOUT_CLASSIFICATION	1.5849971424337686E-6	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999406693930337	WITHOUT_CLASSIFICATION	5.93306069661734E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998875099583874	WITHOUT_CLASSIFICATION	1.1249004161260792E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994349304566	WITHOUT_CLASSIFICATION	5.650695433344718E-7	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997234046303288	WITHOUT_CLASSIFICATION	2.765953696711558E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720257321802	WITHOUT_CLASSIFICATION	2.797426781977345E-5	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999787422212314	WITHOUT_CLASSIFICATION	2.1257778768655865E-5	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999513897156114	WITHOUT_CLASSIFICATION	4.861028438864809E-5	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999620461345898	WITHOUT_CLASSIFICATION	3.795386541015797E-5	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999944669422225	WITHOUT_CLASSIFICATION	5.53305777751311E-6	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9891254680109401	WITHOUT_CLASSIFICATION	0.010874531989059785	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999634337714061	WITHOUT_CLASSIFICATION	3.6566228593945105E-5	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999929074673	WITHOUT_CLASSIFICATION	7.092532677651945E-9	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999622154427136	WITHOUT_CLASSIFICATION	3.7784557286515874E-5	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999930067345957	WITHOUT_CLASSIFICATION	6.993265404361867E-6	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999997002554142	WITHOUT_CLASSIFICATION	2.997445858911256E-7	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9931503321159578	WITHOUT_CLASSIFICATION	0.0068496678840421245	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999984903597151	WITHOUT_CLASSIFICATION	1.5096402848896615E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999989993423233	WITHOUT_CLASSIFICATION	1.0006576766677135E-6	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999955365239471	WITHOUT_CLASSIFICATION	4.463476052850369E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999586621512196	WITHOUT_CLASSIFICATION	4.1337848780321703E-5	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999795460353711	WITHOUT_CLASSIFICATION	2.045396462894525E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9997159388549252	WITHOUT_CLASSIFICATION	2.840611450747999E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999289500611475	WITHOUT_CLASSIFICATION	7.10499388525727E-5	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9997323651860741	WITHOUT_CLASSIFICATION	2.6763481392591586E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9999387714794374	WITHOUT_CLASSIFICATION	6.122852056258217E-5	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9999526017275289	WITHOUT_CLASSIFICATION	4.739827247102233E-5	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999968854042819	WITHOUT_CLASSIFICATION	3.1145957181723447E-6	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999980029034506	WITHOUT_CLASSIFICATION	1.9970965493392587E-6	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999973846740174	WITHOUT_CLASSIFICATION	2.6153259826258805E-6	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884632380269	WITHOUT_CLASSIFICATION	1.1536761972937652E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9927474680443634	WITHOUT_CLASSIFICATION	0.0072525319556365955	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999996997132	WITHOUT_CLASSIFICATION	3.002868249445072E-10	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999867294342635	WITHOUT_CLASSIFICATION	1.327056573645764E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999456112955	WITHOUT_CLASSIFICATION	5.438870467904098E-8	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989519810104	WITHOUT_CLASSIFICATION	1.0480189896622802E-6	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999963247248166	WITHOUT_CLASSIFICATION	3.6752751834173734E-6	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9958837224094014	WITHOUT_CLASSIFICATION	0.004116277590598694	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999894574988711	WITHOUT_CLASSIFICATION	1.0542501128812204E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999991075020805	WITHOUT_CLASSIFICATION	8.924979194938869E-7	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999979811589241	WITHOUT_CLASSIFICATION	2.0188410758899975E-6	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9982706533250808	WITHOUT_CLASSIFICATION	0.0017293466749191794	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999109035772157	WITHOUT_CLASSIFICATION	8.909642278437952E-5	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9996415965645137	WITHOUT_CLASSIFICATION	3.5840343548634797E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999622154427136	WITHOUT_CLASSIFICATION	3.7784557286515874E-5	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999421223147412	WITHOUT_CLASSIFICATION	5.787768525880057E-4	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999997132388376	WITHOUT_CLASSIFICATION	2.8676116240841206E-7	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999951298196	WITHOUT_CLASSIFICATION	4.87018043713807E-9	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999955850642089	WITHOUT_CLASSIFICATION	4.414935791001348E-6	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999931073537283	WITHOUT_CLASSIFICATION	6.8926462718050766E-6	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999997910662091	WITHOUT_CLASSIFICATION	2.089337910258966E-7	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9927474680443634	WITHOUT_CLASSIFICATION	0.0072525319556365955	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9997708068471293	WITHOUT_CLASSIFICATION	2.2919315287074377E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999999617650768	WITHOUT_CLASSIFICATION	3.8234923286875E-8	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999899088911054	WITHOUT_CLASSIFICATION	1.0091108894591512E-5	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999771031620959	WITHOUT_CLASSIFICATION	2.2896837904086442E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999876494032927	WITHOUT_CLASSIFICATION	1.2350596707429545E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999988062303722	WITHOUT_CLASSIFICATION	1.1937696278023803E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9960120291851794	WITHOUT_CLASSIFICATION	0.003987970814820652	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999987675713153	WITHOUT_CLASSIFICATION	1.232428684587296E-6	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999869217692366	WITHOUT_CLASSIFICATION	1.3078230763374134E-5	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999896463521212	WITHOUT_CLASSIFICATION	1.0353647878693806E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999998331122699	WITHOUT_CLASSIFICATION	1.6688773013173465E-7	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999922466914247	WITHOUT_CLASSIFICATION	7.753308575363446E-6	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.999999840822823	WITHOUT_CLASSIFICATION	1.5917717710984927E-7	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999996089234162	WITHOUT_CLASSIFICATION	3.9107658372210943E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999977754666011	WITHOUT_CLASSIFICATION	2.2245333989832255E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992376114679	WITHOUT_CLASSIFICATION	7.623885321029631E-7	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999981581981703	WITHOUT_CLASSIFICATION	1.8418018296915898E-6	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999999853910524	WITHOUT_CLASSIFICATION	1.4608947686941704E-8	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.999937248921013	WITHOUT_CLASSIFICATION	6.275107898704905E-5	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9999876935433221	WITHOUT_CLASSIFICATION	1.2306456677871187E-5	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999982573039091	WITHOUT_CLASSIFICATION	1.7426960909364755E-6	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998440804774984	WITHOUT_CLASSIFICATION	1.5591952250159917E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999998134311432	WITHOUT_CLASSIFICATION	1.8656885669477257E-7	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.6339908208051107	WITHOUT_CLASSIFICATION	0.3660091791948893	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999997327625245	WITHOUT_CLASSIFICATION	2.6723747540908605E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999998160979267	WITHOUT_CLASSIFICATION	1.8390207342782888E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999861223469161	WITHOUT_CLASSIFICATION	1.387765308383593E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999622154427136	WITHOUT_CLASSIFICATION	3.7784557286515874E-5	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9993619846995568	WITHOUT_CLASSIFICATION	6.380153004432097E-4	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999990731348822	WITHOUT_CLASSIFICATION	9.268651178862194E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999875000795668	WITHOUT_CLASSIFICATION	1.2499920433202966E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999998134383443	WITHOUT_CLASSIFICATION	1.8656165566715393E-7	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999999885449179	WITHOUT_CLASSIFICATION	1.1455082111832209E-7	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999964653355663	WITHOUT_CLASSIFICATION	3.534664433765824E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999622154427136	WITHOUT_CLASSIFICATION	3.7784557286515874E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999809686844977	WITHOUT_CLASSIFICATION	1.9031315502282135E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999981581981703	WITHOUT_CLASSIFICATION	1.8418018296915898E-6	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9965287776781149	WITHOUT_CLASSIFICATION	0.0034712223218851695	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992376114679	WITHOUT_CLASSIFICATION	7.623885321029631E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999978653689	WITHOUT_CLASSIFICATION	2.1346310931841062E-9	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.8215767975975303	WITHOUT_CLASSIFICATION	0.1784232024024697	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9994690459725705	WITHOUT_CLASSIFICATION	5.309540274296367E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9999899088911054	WITHOUT_CLASSIFICATION	1.0091108894591512E-5	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9999771031620959	WITHOUT_CLASSIFICATION	2.2896837904086442E-5	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999876494032927	WITHOUT_CLASSIFICATION	1.2350596707429545E-5	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999848090414	WITHOUT_CLASSIFICATION	1.519095856537543E-8	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999917128301703	WITHOUT_CLASSIFICATION	8.28716982962963E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999998798735436	WITHOUT_CLASSIFICATION	1.2012645646061026E-7	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999992376114679	WITHOUT_CLASSIFICATION	7.623885321029631E-7	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999978653689	WITHOUT_CLASSIFICATION	2.1346310931841062E-9	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999622154427136	WITHOUT_CLASSIFICATION	3.7784557286515874E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999988062303722	WITHOUT_CLASSIFICATION	1.1937696278023803E-5	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9960120291851794	WITHOUT_CLASSIFICATION	0.003987970814820652	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999987675713153	WITHOUT_CLASSIFICATION	1.232428684587296E-6	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995482358681638	WITHOUT_CLASSIFICATION	4.517641318362083E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990808863728	WITHOUT_CLASSIFICATION	9.191136271671249E-7	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999955396590169	WITHOUT_CLASSIFICATION	4.460340983108615E-6	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999999996191118	WITHOUT_CLASSIFICATION	3.8088816458840807E-10	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999687326134277	WITHOUT_CLASSIFICATION	3.126738657237518E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9983857811879833	WITHOUT_CLASSIFICATION	0.0016142188120166375	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999513897156114	WITHOUT_CLASSIFICATION	4.861028438864809E-5	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9996459376703614	WITHOUT_CLASSIFICATION	3.5406232963863517E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.975872988979722	WITHOUT_CLASSIFICATION	0.024127011020278068	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9892703065052976	WITHOUT_CLASSIFICATION	0.010729693494702383	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999924618163699	WITHOUT_CLASSIFICATION	7.5381836301266105E-6	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999992317226993	WITHOUT_CLASSIFICATION	7.682773005611742E-7	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999868819439495	WITHOUT_CLASSIFICATION	1.3118056050571001E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998769881289054	WITHOUT_CLASSIFICATION	1.230118710946655E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999406693930337	WITHOUT_CLASSIFICATION	5.93306069661734E-5	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999992317226993	WITHOUT_CLASSIFICATION	7.682773005611742E-7	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9969871484253315	WITHOUT_CLASSIFICATION	0.0030128515746685727	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999971276168674	WITHOUT_CLASSIFICATION	2.8723831324671307E-6	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672443669412	WITHOUT_CLASSIFICATION	3.2755633058801345E-5	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999978809204779	WITHOUT_CLASSIFICATION	2.1190795220200224E-6	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999961268047008	WITHOUT_CLASSIFICATION	3.873195299205525E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999512552667371	WITHOUT_CLASSIFICATION	4.874473326275591E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998875099583874	WITHOUT_CLASSIFICATION	1.1249004161260792E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999720257321802	WITHOUT_CLASSIFICATION	2.797426781977345E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999991075020805	WITHOUT_CLASSIFICATION	8.924979194938869E-7	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9993105883396806	WITHOUT_CLASSIFICATION	6.894116603193033E-4	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999874083221045	WITHOUT_CLASSIFICATION	1.2591677895482592E-5	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999999695857423	WITHOUT_CLASSIFICATION	3.0414257699274855E-8	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999884743994167	WITHOUT_CLASSIFICATION	1.1525600583112131E-5	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999999445489431	WITHOUT_CLASSIFICATION	5.545105689287132E-7	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999996224662	WITHOUT_CLASSIFICATION	3.7753383081534054E-10	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999581802206436	WITHOUT_CLASSIFICATION	4.181977935640078E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999667965147	WITHOUT_CLASSIFICATION	3.320348539739555E-8	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999984782012857	WITHOUT_CLASSIFICATION	1.5217987142734817E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9999550918143919	WITHOUT_CLASSIFICATION	4.490818560800864E-5	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999979338106461	WITHOUT_CLASSIFICATION	2.066189353887107E-6	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999963529358388	WITHOUT_CLASSIFICATION	3.647064161148696E-6	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999976103976821	WITHOUT_CLASSIFICATION	2.3896023179159456E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999521219278514	WITHOUT_CLASSIFICATION	4.7878072148676185E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999867235340992	WITHOUT_CLASSIFICATION	1.32764659007574E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999904817177263	WITHOUT_CLASSIFICATION	9.518282273634472E-6	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999986059475482	WITHOUT_CLASSIFICATION	1.39405245186954E-6	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9987649462757244	WITHOUT_CLASSIFICATION	0.0012350537242755524	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999895685337764	WITHOUT_CLASSIFICATION	1.0431466223655826E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999974454600812	WITHOUT_CLASSIFICATION	2.554539918807431E-6	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998510901651	WITHOUT_CLASSIFICATION	1.489098347993511E-7	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999181914829	WITHOUT_CLASSIFICATION	8.180851710959238E-7	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999818628762	WITHOUT_CLASSIFICATION	1.81371237753178E-8	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9998390244260188	WITHOUT_CLASSIFICATION	1.6097557398117357E-4	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9998744943580163	WITHOUT_CLASSIFICATION	1.255056419836848E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995230196937	WITHOUT_CLASSIFICATION	4.76980306193735E-7	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.99923927702343	WITHOUT_CLASSIFICATION	7.607229765699942E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999962997394334	WITHOUT_CLASSIFICATION	3.7002605665080096E-6	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870779029716	WITHOUT_CLASSIFICATION	1.2922097028355354E-5	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9998583673410476	WITHOUT_CLASSIFICATION	1.416326589524298E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.999999592357447	WITHOUT_CLASSIFICATION	4.0764255295457575E-7	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999891425193352	WITHOUT_CLASSIFICATION	1.0857480664777633E-5	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.999997772168849	WITHOUT_CLASSIFICATION	2.227831150939615E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999389965590848	WITHOUT_CLASSIFICATION	6.1003440915242277E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998034111366951	WITHOUT_CLASSIFICATION	1.965888633048417E-4	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999999121774705	WITHOUT_CLASSIFICATION	8.782252958119015E-8	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999999125500572	WITHOUT_CLASSIFICATION	8.744994277789654E-8	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999748962621909	WITHOUT_CLASSIFICATION	2.510373780909757E-5	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999976699458193	WITHOUT_CLASSIFICATION	2.3300541806079792E-6	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9987116015035341	WITHOUT_CLASSIFICATION	0.0012883984964658995	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9989411109848971	WITHOUT_CLASSIFICATION	0.0010588890151027905	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999997307968114	WITHOUT_CLASSIFICATION	2.6920318867568324E-7	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999998548132129	WITHOUT_CLASSIFICATION	1.4518678728628531E-7	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999992622370649	WITHOUT_CLASSIFICATION	7.377629350063928E-7	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999993066520849	WITHOUT_CLASSIFICATION	6.933479149550793E-7	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999802973367486	WITHOUT_CLASSIFICATION	1.970266325133723E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999999505739585	WITHOUT_CLASSIFICATION	4.942604152534104E-8	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999997457702129	WITHOUT_CLASSIFICATION	2.5422978709202027E-7	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9989405801292406	WITHOUT_CLASSIFICATION	0.0010594198707595094	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999982774472593	WITHOUT_CLASSIFICATION	1.7225527406655946E-6	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9847632098151494	WITHOUT_CLASSIFICATION	0.015236790184850421	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999712217293	WITHOUT_CLASSIFICATION	2.8778270584771633E-8	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9998860491724594	WITHOUT_CLASSIFICATION	1.1395082754053944E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9997661444830017	WITHOUT_CLASSIFICATION	2.3385551699830687E-4	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999862880344677	WITHOUT_CLASSIFICATION	1.3711965532309818E-5	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998902010171	WITHOUT_CLASSIFICATION	1.097989830058725E-7	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999804808399274	WITHOUT_CLASSIFICATION	1.9519160072606592E-5	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999952083306711	WITHOUT_CLASSIFICATION	4.7916693289231955E-6	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9999934785369525	WITHOUT_CLASSIFICATION	6.521463047481221E-6	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994711324562	WITHOUT_CLASSIFICATION	5.288675437138064E-7	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.99996401969681	WITHOUT_CLASSIFICATION	3.598030318991866E-5	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999993004383746	WITHOUT_CLASSIFICATION	6.995616254036536E-7	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.999999305703557	WITHOUT_CLASSIFICATION	6.942964429247696E-7	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9414829465269268	WITHOUT_CLASSIFICATION	0.0585170534730731	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9999911369997525	WITHOUT_CLASSIFICATION	8.863000247535214E-6	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999966761322057	WITHOUT_CLASSIFICATION	3.3238677942512197E-6	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999983268332623	WITHOUT_CLASSIFICATION	1.673166737723014E-6	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999999260312024	WITHOUT_CLASSIFICATION	7.396879759970263E-8	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9990659293862711	WITHOUT_CLASSIFICATION	9.340706137289724E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999974597367158	WITHOUT_CLASSIFICATION	2.54026328417888E-6	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9998958677703517	WITHOUT_CLASSIFICATION	1.0413222964841056E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.942345432149026	WITHOUT_CLASSIFICATION	0.057654567850973976	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999983393781584	WITHOUT_CLASSIFICATION	1.6606218415791926E-6	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8547183337773153	WITHOUT_CLASSIFICATION	0.14528166622268476	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999445888006	WITHOUT_CLASSIFICATION	5.5411199327005116E-8	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9831188848798658	WITHOUT_CLASSIFICATION	0.016881115120134214	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999992929854162	WITHOUT_CLASSIFICATION	7.070145837336011E-7	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999992897950174	WITHOUT_CLASSIFICATION	7.102049825202495E-7	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9972535720077969	WITHOUT_CLASSIFICATION	0.0027464279922031157	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9989549901085947	WITHOUT_CLASSIFICATION	0.0010450098914052764	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9997829293853969	WITHOUT_CLASSIFICATION	2.17070614603118E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999997897327642	WITHOUT_CLASSIFICATION	2.1026723582980855E-7	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999996884407312	WITHOUT_CLASSIFICATION	3.115592687987085E-7	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9998542043232636	WITHOUT_CLASSIFICATION	1.4579567673643677E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999950198870853	WITHOUT_CLASSIFICATION	4.9801129146346225E-6	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999973510347904	WITHOUT_CLASSIFICATION	2.648965209650288E-6	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999984086996264	WITHOUT_CLASSIFICATION	1.59130037354924E-6	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9999256679996792	WITHOUT_CLASSIFICATION	7.433200032082612E-5	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9995472206219745	WITHOUT_CLASSIFICATION	4.5277937802535407E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999817299921	WITHOUT_CLASSIFICATION	1.8270007887291518E-7	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9586454346970888	WITHOUT_CLASSIFICATION	0.041354565302911074	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999998683870835	WITHOUT_CLASSIFICATION	1.3161291650338288E-6	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999979370512865	WITHOUT_CLASSIFICATION	2.062948713497817E-6	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999991305851894	WITHOUT_CLASSIFICATION	8.694148104928756E-7	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999934335183032	WITHOUT_CLASSIFICATION	6.566481696906261E-6	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9999858839939862	WITHOUT_CLASSIFICATION	1.4116006013884286E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999154085207488	WITHOUT_CLASSIFICATION	8.459147925123359E-5	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999089162579	WITHOUT_CLASSIFICATION	9.108374202390855E-8	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9997697708685985	WITHOUT_CLASSIFICATION	2.302291314014009E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9999469892507212	WITHOUT_CLASSIFICATION	5.301074927878244E-5	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999932815380772	WITHOUT_CLASSIFICATION	6.718461922866583E-6	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9997697708685985	WITHOUT_CLASSIFICATION	2.302291314014009E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999979344215874	WITHOUT_CLASSIFICATION	2.065578412611023E-6	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999906542080522	WITHOUT_CLASSIFICATION	9.345791947769491E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999986024140139	WITHOUT_CLASSIFICATION	1.3975859861051406E-5	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999807426376642	WITHOUT_CLASSIFICATION	1.9257362335688924E-5	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999998507719399	WITHOUT_CLASSIFICATION	1.492280600695981E-7	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999996405092314	WITHOUT_CLASSIFICATION	3.5949076862015684E-7	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9999876539202742	WITHOUT_CLASSIFICATION	1.2346079725724527E-5	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999993464095722	WITHOUT_CLASSIFICATION	6.535904277418401E-7	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9999137964436179	WITHOUT_CLASSIFICATION	8.620355638209533E-5	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999606333875033	WITHOUT_CLASSIFICATION	3.936661249671382E-5	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999999931220367	WITHOUT_CLASSIFICATION	6.877963297094078E-8	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999983512456785	WITHOUT_CLASSIFICATION	1.6487543214587823E-6	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9576781949655484	WITHOUT_CLASSIFICATION	0.042321805034451716	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999774990214	WITHOUT_CLASSIFICATION	2.250097865534352E-8	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999992715111935	WITHOUT_CLASSIFICATION	7.284888065276063E-7	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9433108059811562	WITHOUT_CLASSIFICATION	0.05668919401884365	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999176724563397	WITHOUT_CLASSIFICATION	8.232754366025558E-5	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9999176724563397	WITHOUT_CLASSIFICATION	8.232754366025558E-5	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999998633747625	WITHOUT_CLASSIFICATION	1.366252374125121E-7	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.999998076976858	WITHOUT_CLASSIFICATION	1.9230231419972496E-6	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999984879913554	WITHOUT_CLASSIFICATION	1.5120086445709234E-6	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.999974575067784	WITHOUT_CLASSIFICATION	2.542493221602401E-5	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999982824994378	WITHOUT_CLASSIFICATION	1.7175005622334867E-6	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.7662644005945786	WITHOUT_CLASSIFICATION	0.2337355994054214	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999996923085226	WITHOUT_CLASSIFICATION	3.0769147739915335E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999806673843927	WITHOUT_CLASSIFICATION	1.933261560730615E-5	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9984255380066078	WITHOUT_CLASSIFICATION	0.0015744619933922381	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.999983506692965	WITHOUT_CLASSIFICATION	1.6493307035051334E-5	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9995060280799577	WITHOUT_CLASSIFICATION	4.939719200422173E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999997836402884	WITHOUT_CLASSIFICATION	2.1635971170394213E-7	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999977446746984	WITHOUT_CLASSIFICATION	2.2553253015317127E-6	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9965335507403451	WITHOUT_CLASSIFICATION	0.0034664492596548596	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999946210822759	WITHOUT_CLASSIFICATION	5.378917724143911E-6	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9999521219278514	WITHOUT_CLASSIFICATION	4.7878072148676185E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999986361442909	WITHOUT_CLASSIFICATION	1.363855709187518E-6	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999999588078239	WITHOUT_CLASSIFICATION	4.1192176147862894E-8	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999991417994895	WITHOUT_CLASSIFICATION	8.58200510594214E-7	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999986625421644	WITHOUT_CLASSIFICATION	1.3374578355693696E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999986313599645	WITHOUT_CLASSIFICATION	1.3686400355511141E-6	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9999965098431545	WITHOUT_CLASSIFICATION	3.4901568455128803E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9994174607009134	WITHOUT_CLASSIFICATION	5.825392990864797E-4	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999993728316042	WITHOUT_CLASSIFICATION	6.271683958516316E-7	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999989797859489	WITHOUT_CLASSIFICATION	1.020214051170123E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999329980836593	WITHOUT_CLASSIFICATION	6.700191634069632E-5	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999958667205776	WITHOUT_CLASSIFICATION	4.133279422347213E-6	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.8874370771381659	WITHOUT_CLASSIFICATION	0.11256292286183407	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9999946713193623	WITHOUT_CLASSIFICATION	5.328680637685563E-6	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999985646041416	WITHOUT_CLASSIFICATION	1.435395858390847E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999998150652221	WITHOUT_CLASSIFICATION	1.849347778575781E-7	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999998753639505	WITHOUT_CLASSIFICATION	1.2463604951200913E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9999289124713491	WITHOUT_CLASSIFICATION	7.108752865093979E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999993176526345	WITHOUT_CLASSIFICATION	6.823473655020749E-6	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999653842460785	WITHOUT_CLASSIFICATION	3.461575392138473E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999996150744808	WITHOUT_CLASSIFICATION	3.849255192133208E-7	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999999277583415	WITHOUT_CLASSIFICATION	7.224165856082265E-8	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9998763912008313	WITHOUT_CLASSIFICATION	1.2360879916865238E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999993817013	WITHOUT_CLASSIFICATION	6.182987347254446E-10	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999965095940131	WITHOUT_CLASSIFICATION	3.4904059868720153E-6	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9999156009663035	WITHOUT_CLASSIFICATION	8.439903369649445E-5	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999913402079723	WITHOUT_CLASSIFICATION	8.659792027782785E-6	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999993363598484	WITHOUT_CLASSIFICATION	6.636401516854427E-7	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999799299322991	WITHOUT_CLASSIFICATION	2.0070067700789693E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999989385200695	WITHOUT_CLASSIFICATION	1.0614799304581425E-6	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999976889353006	WITHOUT_CLASSIFICATION	2.311064699392254E-6	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995892052860255	WITHOUT_CLASSIFICATION	4.1079471397460787E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996172562277	WITHOUT_CLASSIFICATION	3.827437722803621E-7	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898363564776	WITHOUT_CLASSIFICATION	1.0163643522267222E-5	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9842425283152925	WITHOUT_CLASSIFICATION	0.01575747168470747	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.999999320989378	WITHOUT_CLASSIFICATION	6.790106219522886E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999685762427	WITHOUT_CLASSIFICATION	3.142375725500245E-8	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.8119302859749624	WITHOUT_CLASSIFICATION	0.18806971402503758	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998490533313017	WITHOUT_CLASSIFICATION	1.5094666869831179E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999800303596925	WITHOUT_CLASSIFICATION	1.9969640307437556E-5	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9998490533313017	WITHOUT_CLASSIFICATION	1.5094666869831179E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995497967202137	WITHOUT_CLASSIFICATION	4.5020327978628354E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9996636325650824	WITHOUT_CLASSIFICATION	3.3636743491764407E-4	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999756701435462	WITHOUT_CLASSIFICATION	2.4329856453826262E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999786409470913	WITHOUT_CLASSIFICATION	2.1359052908598604E-5	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999996578592901	WITHOUT_CLASSIFICATION	3.4214070990879006E-7	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999996408357318	WITHOUT_CLASSIFICATION	3.5916426825297287E-7	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999757525504752	WITHOUT_CLASSIFICATION	2.424744952473846E-5	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999993446434141	WITHOUT_CLASSIFICATION	6.553565858436426E-7	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999980012894227	WITHOUT_CLASSIFICATION	1.998710577263689E-6	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998536499754433	WITHOUT_CLASSIFICATION	1.4635002455674052E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9998778791904027	WITHOUT_CLASSIFICATION	1.2212080959724897E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.999610938255911	WITHOUT_CLASSIFICATION	3.8906174408905817E-4	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999497402866366	WITHOUT_CLASSIFICATION	5.025971336339539E-5	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9859944305822045	WITHOUT_CLASSIFICATION	0.014005569417795552	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9994850199489513	WITHOUT_CLASSIFICATION	5.149800510486158E-4	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9997958943296334	WITHOUT_CLASSIFICATION	2.041056703665062E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999861937154215	WITHOUT_CLASSIFICATION	1.3806284578457104E-5	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999861937154215	WITHOUT_CLASSIFICATION	1.3806284578457104E-5	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9998051178644053	WITHOUT_CLASSIFICATION	1.94882135594731E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999045256094	WITHOUT_CLASSIFICATION	9.547439063124636E-8	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999979034997479	WITHOUT_CLASSIFICATION	2.0965002521498353E-6	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999972319416016	WITHOUT_CLASSIFICATION	2.7680583983754176E-6	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9778286649359874	WITHOUT_CLASSIFICATION	0.022171335064012542	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999812837592292	WITHOUT_CLASSIFICATION	1.8716240770754332E-5	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999967248953185	WITHOUT_CLASSIFICATION	3.275104681505384E-5	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999816638858263	WITHOUT_CLASSIFICATION	1.833611417373979E-5	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999948538477662	WITHOUT_CLASSIFICATION	5.146152233749611E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999985574803	WITHOUT_CLASSIFICATION	1.4425197107620834E-9	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999969995151131	WITHOUT_CLASSIFICATION	3.000484886807312E-6	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999965716502777	WITHOUT_CLASSIFICATION	3.4283497223065137E-6	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999890392739	WITHOUT_CLASSIFICATION	1.0960726108147117E-8	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999913958719819	WITHOUT_CLASSIFICATION	8.604128018080282E-6	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.999805857323478	WITHOUT_CLASSIFICATION	1.9414267652191494E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999847326474158	WITHOUT_CLASSIFICATION	1.5267352584191174E-5	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9998543634554318	WITHOUT_CLASSIFICATION	1.4563654456825864E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9690895505241216	WITHOUT_CLASSIFICATION	0.030910449475878413	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999886237646871	WITHOUT_CLASSIFICATION	1.137623531294652E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999995154627193	WITHOUT_CLASSIFICATION	4.845372807125351E-7	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.999992817426649	WITHOUT_CLASSIFICATION	7.182573350973411E-6	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999987382101039	WITHOUT_CLASSIFICATION	1.2617898960848843E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9997153448850494	WITHOUT_CLASSIFICATION	2.8465511495051095E-4	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9984474130721317	WITHOUT_CLASSIFICATION	0.0015525869278683003	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999975079357526	WITHOUT_CLASSIFICATION	2.4920642474079017E-6	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999786157737914	WITHOUT_CLASSIFICATION	2.1384226208611298E-5	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999999689062741	WITHOUT_CLASSIFICATION	3.1093725839176606E-8	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9946258321572782	WITHOUT_CLASSIFICATION	0.005374167842721799	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999948303785868	WITHOUT_CLASSIFICATION	5.169621413212094E-6	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999664690107416	WITHOUT_CLASSIFICATION	3.35309892582864E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999128932070042	WITHOUT_CLASSIFICATION	8.710679299580651E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999803990155358	WITHOUT_CLASSIFICATION	1.960098446413972E-5	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999930684224844	WITHOUT_CLASSIFICATION	6.931577515565065E-6	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9964267619493941	WITHOUT_CLASSIFICATION	0.003573238050605958	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9995712010762128	WITHOUT_CLASSIFICATION	4.287989237871632E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999994058132561	WITHOUT_CLASSIFICATION	5.941867438796799E-7	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.999997473346212	WITHOUT_CLASSIFICATION	2.5266537878631033E-6	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9738736082568452	WITHOUT_CLASSIFICATION	0.026126391743154724	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9993224828222235	WITHOUT_CLASSIFICATION	6.775171777765081E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999682278317	WITHOUT_CLASSIFICATION	3.177216831397641E-8	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999710668133	WITHOUT_CLASSIFICATION	2.893318668408345E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999195886835	WITHOUT_CLASSIFICATION	8.04113165102918E-7	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999817332307562	WITHOUT_CLASSIFICATION	1.8266769243803646E-5	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999329678081728	WITHOUT_CLASSIFICATION	6.703219182725367E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999997283271	WITHOUT_CLASSIFICATION	2.716728210287738E-10	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9997002101203412	WITHOUT_CLASSIFICATION	2.9978987965877633E-4	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9542215554873956	DESIGN	0.04577844451260436	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999827902165149	WITHOUT_CLASSIFICATION	1.7209783485048693E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999996963429146	WITHOUT_CLASSIFICATION	3.036570853856417E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9997973346432195	WITHOUT_CLASSIFICATION	2.026653567803807E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992283346983	WITHOUT_CLASSIFICATION	7.716653016108452E-7	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999983889082196	WITHOUT_CLASSIFICATION	1.6110917804418862E-6	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.999999869599348	WITHOUT_CLASSIFICATION	1.3040065208753544E-7	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.999978014688695	WITHOUT_CLASSIFICATION	2.1985311305114466E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999943353712589	WITHOUT_CLASSIFICATION	5.664628741060307E-6	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999809686844977	WITHOUT_CLASSIFICATION	1.9031315502282135E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999809686844977	WITHOUT_CLASSIFICATION	1.9031315502282135E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999994168782	WITHOUT_CLASSIFICATION	5.8312177403918E-10	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999980006703826	WITHOUT_CLASSIFICATION	1.9993296174038866E-5	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9997940802477941	WITHOUT_CLASSIFICATION	2.059197522057851E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999946207199968	WITHOUT_CLASSIFICATION	5.379280003179711E-6	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999831900528	WITHOUT_CLASSIFICATION	1.6809947158567896E-8	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999997520813088	WITHOUT_CLASSIFICATION	2.4791869122283915E-7	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999960557818313	WITHOUT_CLASSIFICATION	3.9442181687905555E-6	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.998303614278525	WITHOUT_CLASSIFICATION	0.0016963857214749435	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9999938114219744	WITHOUT_CLASSIFICATION	6.18857802554936E-6	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9998401876767711	WITHOUT_CLASSIFICATION	1.5981232322885057E-4	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999953196878	WITHOUT_CLASSIFICATION	4.6803122769546595E-9	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999995695327243	WITHOUT_CLASSIFICATION	4.304672756928919E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999474357613688	WITHOUT_CLASSIFICATION	5.256423863112406E-5	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999999817691088	WITHOUT_CLASSIFICATION	1.8230891201158767E-7	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.999992078960512	WITHOUT_CLASSIFICATION	7.921039488069779E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9419534245013569	DESIGN	0.05804657549864302	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9998067940318832	WITHOUT_CLASSIFICATION	1.9320596811673706E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998119445739	WITHOUT_CLASSIFICATION	1.8805542609934559E-6	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999899880329961	WITHOUT_CLASSIFICATION	1.0011967003869995E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999977339120067	WITHOUT_CLASSIFICATION	2.2660879932763917E-6	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9999730661256344	WITHOUT_CLASSIFICATION	2.693387436556573E-5	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999572634602717	WITHOUT_CLASSIFICATION	4.273653972829136E-5	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999999189368501	WITHOUT_CLASSIFICATION	8.106314985111039E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999953810257074	WITHOUT_CLASSIFICATION	4.6189742925508125E-6	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9998523895078156	WITHOUT_CLASSIFICATION	1.4761049218433369E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999444004732628	WITHOUT_CLASSIFICATION	5.559952673717793E-5	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9980294904024942	DESIGN	0.0019705095975057333	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999952815578776	WITHOUT_CLASSIFICATION	4.718442122322746E-6	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999965177278167	WITHOUT_CLASSIFICATION	3.4822721832918856E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999841507787437	WITHOUT_CLASSIFICATION	1.5849221256376004E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999953810257074	WITHOUT_CLASSIFICATION	4.6189742925508125E-6	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9998730392253334	WITHOUT_CLASSIFICATION	1.2696077466653246E-4	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999187119909201	WITHOUT_CLASSIFICATION	8.128800907991697E-4	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9999791033798823	WITHOUT_CLASSIFICATION	2.0896620117788226E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999927898687144	WITHOUT_CLASSIFICATION	7.210131285571792E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997821381852	WITHOUT_CLASSIFICATION	2.178618148093999E-7	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.603673506006329	DESIGN	0.396326493993671	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9964681589676849	WITHOUT_CLASSIFICATION	0.003531841032314988	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999996589607808	WITHOUT_CLASSIFICATION	3.410392192090782E-6	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.999990202197637	WITHOUT_CLASSIFICATION	9.797802362975002E-6	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999927898687144	WITHOUT_CLASSIFICATION	7.210131285571792E-6	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999983886558348	WITHOUT_CLASSIFICATION	1.6113441652310415E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999996589607808	WITHOUT_CLASSIFICATION	3.410392192090782E-6	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.999966860988548	WITHOUT_CLASSIFICATION	3.313901145201561E-5	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999937919177492	WITHOUT_CLASSIFICATION	6.208082250793761E-6	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999997588245424	WITHOUT_CLASSIFICATION	2.411754576424477E-7	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999969995151131	WITHOUT_CLASSIFICATION	3.000484886807312E-6	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999997150326124	WITHOUT_CLASSIFICATION	2.849673876108667E-7	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999996556500855	WITHOUT_CLASSIFICATION	3.443499145530881E-7	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999988301537643	WITHOUT_CLASSIFICATION	1.1698462357136514E-6	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.99689558458608	WITHOUT_CLASSIFICATION	0.003104415413920013	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999610118575	WITHOUT_CLASSIFICATION	3.898814246396267E-8	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9998578695272095	WITHOUT_CLASSIFICATION	1.421304727906728E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999349137670214	WITHOUT_CLASSIFICATION	6.508623297857935E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999983144825836	WITHOUT_CLASSIFICATION	1.6855174164059317E-6	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999750004654506	WITHOUT_CLASSIFICATION	2.499953454937463E-5	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9999446017943745	WITHOUT_CLASSIFICATION	5.539820562546937E-5	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999953680629132	WITHOUT_CLASSIFICATION	4.631937086785951E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.999997643186076	WITHOUT_CLASSIFICATION	2.356813923996093E-6	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999836113173707	WITHOUT_CLASSIFICATION	1.6388682629358458E-5	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9991181230830966	WITHOUT_CLASSIFICATION	8.818769169035461E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999984375542338	WITHOUT_CLASSIFICATION	1.56244576629753E-6	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999959765626294	WITHOUT_CLASSIFICATION	4.023437370606014E-5	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999998359883371	WITHOUT_CLASSIFICATION	1.6401166285155485E-7	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999995477893514	WITHOUT_CLASSIFICATION	4.5221064856386673E-7	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999958806016841	WITHOUT_CLASSIFICATION	4.119398315944448E-6	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999883129122022	WITHOUT_CLASSIFICATION	1.1687087797738093E-5	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999875148615331	WITHOUT_CLASSIFICATION	1.2485138466741441E-5	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999990970186452	WITHOUT_CLASSIFICATION	9.029813548602189E-7	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999676537804	WITHOUT_CLASSIFICATION	3.234621965822518E-8	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999867595964163	WITHOUT_CLASSIFICATION	1.3240403583799127E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9999998921145999	WITHOUT_CLASSIFICATION	1.0788540007170949E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9989010925792576	WITHOUT_CLASSIFICATION	0.001098907420742304	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.999999357845825	WITHOUT_CLASSIFICATION	6.421541750561892E-7	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994778338056	WITHOUT_CLASSIFICATION	5.22166194348885E-7	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980582080992285	WITHOUT_CLASSIFICATION	0.001941791900771594	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9940565984547317	WITHOUT_CLASSIFICATION	0.005943401545268247	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999523338621196	WITHOUT_CLASSIFICATION	4.7666137880453576E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999907554073635	WITHOUT_CLASSIFICATION	9.244592636619151E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994831739356	WITHOUT_CLASSIFICATION	5.168260643203536E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994831739356	WITHOUT_CLASSIFICATION	5.168260643203536E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999907928101041	WITHOUT_CLASSIFICATION	9.207189895880262E-6	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9999687116487217	WITHOUT_CLASSIFICATION	3.128835127836873E-5	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999992420661576	WITHOUT_CLASSIFICATION	7.579338423888624E-7	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999982649408825	WITHOUT_CLASSIFICATION	1.735059117459961E-6	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999993073104938	WITHOUT_CLASSIFICATION	6.926895062123356E-7	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9711823471655864	WITHOUT_CLASSIFICATION	0.028817652834413673	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9996469635356174	WITHOUT_CLASSIFICATION	3.530364643825591E-4	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999905764978306	WITHOUT_CLASSIFICATION	9.423502169358005E-6	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999978151165603	WITHOUT_CLASSIFICATION	2.1848834397112195E-6	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999776600973	WITHOUT_CLASSIFICATION	2.2339902707689505E-7	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999998980615781	WITHOUT_CLASSIFICATION	1.0193842188985154E-7	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999986264174607	WITHOUT_CLASSIFICATION	1.3735825392137224E-6	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999990798844101	WITHOUT_CLASSIFICATION	9.201155898610426E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994831739356	WITHOUT_CLASSIFICATION	5.168260643203536E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999924458696721	WITHOUT_CLASSIFICATION	7.554130327874317E-6	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9989244333358523	WITHOUT_CLASSIFICATION	0.0010755666641476625	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995508393144168	WITHOUT_CLASSIFICATION	4.4916068558318976E-4	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999618950154214	WITHOUT_CLASSIFICATION	3.810498457865028E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999981692438533	WITHOUT_CLASSIFICATION	1.8307561466081236E-6	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999723652170138	WITHOUT_CLASSIFICATION	2.7634782986207067E-5	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999664261347885	WITHOUT_CLASSIFICATION	3.357386521150338E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999993804668853	WITHOUT_CLASSIFICATION	6.195331147400683E-7	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996324362856005	WITHOUT_CLASSIFICATION	3.6756371439950977E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9994250682525309	WITHOUT_CLASSIFICATION	5.749317474691981E-4	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998676970960422	WITHOUT_CLASSIFICATION	1.3230290395785775E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994778338056	WITHOUT_CLASSIFICATION	5.22166194348885E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994831739356	WITHOUT_CLASSIFICATION	5.168260643203536E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999870771137	WITHOUT_CLASSIFICATION	1.2922886378721524E-8	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998747554363	WITHOUT_CLASSIFICATION	1.2524456364048291E-7	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999650068630719	WITHOUT_CLASSIFICATION	3.499313692803019E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999941941562696	WITHOUT_CLASSIFICATION	5.805843730481839E-6	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9850254334977572	WITHOUT_CLASSIFICATION	0.014974566502242765	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999997458111106	WITHOUT_CLASSIFICATION	2.5418888931917305E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999611865870611	WITHOUT_CLASSIFICATION	3.8813412938863505E-5	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999993589737559	WITHOUT_CLASSIFICATION	6.4102624412893E-7	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999605535288	WITHOUT_CLASSIFICATION	3.944647120913955E-8	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999984094709271	WITHOUT_CLASSIFICATION	1.590529072820479E-6	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999998889890821	WITHOUT_CLASSIFICATION	1.11010917900598E-7	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999432324930388	WITHOUT_CLASSIFICATION	5.676750696107447E-5	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999898566480951	WITHOUT_CLASSIFICATION	1.0143351904923305E-5	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9999901180954734	WITHOUT_CLASSIFICATION	9.881904526613904E-6	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9995497967202137	WITHOUT_CLASSIFICATION	4.5020327978628354E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999996358841722	WITHOUT_CLASSIFICATION	3.64115827909403E-7	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999997609017949	WITHOUT_CLASSIFICATION	2.3909820507631424E-7	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999995261226535	WITHOUT_CLASSIFICATION	4.7387734648209093E-7	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999985175750157	WITHOUT_CLASSIFICATION	1.4824249843225942E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.999999991128011	WITHOUT_CLASSIFICATION	8.87198900772774E-9	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998988296164668	WITHOUT_CLASSIFICATION	1.0117038353325153E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998988296164668	WITHOUT_CLASSIFICATION	1.0117038353325153E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9981955940000797	WITHOUT_CLASSIFICATION	0.0018044059999202794	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999933165473165	WITHOUT_CLASSIFICATION	6.683452683495982E-5	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999999279946574	WITHOUT_CLASSIFICATION	7.200534258232101E-8	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999876068775228	WITHOUT_CLASSIFICATION	1.2393122477285493E-5	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999741232814979	WITHOUT_CLASSIFICATION	2.5876718502047133E-5	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999964677957266	WITHOUT_CLASSIFICATION	3.5322042735174088E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.994912939462551	WITHOUT_CLASSIFICATION	0.005087060537448937	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999973665531	WITHOUT_CLASSIFICATION	2.6334468373501826E-9	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999973665531	WITHOUT_CLASSIFICATION	2.6334468373501826E-9	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999995009365391	WITHOUT_CLASSIFICATION	4.990634609951384E-7	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9999995903563144	WITHOUT_CLASSIFICATION	4.096436856646937E-7	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999952018273386	WITHOUT_CLASSIFICATION	4.798172661383687E-6	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999321019209425	WITHOUT_CLASSIFICATION	6.78980790574277E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999321019209425	WITHOUT_CLASSIFICATION	6.78980790574277E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999321019209425	WITHOUT_CLASSIFICATION	6.78980790574277E-5	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9997483061943531	WITHOUT_CLASSIFICATION	2.5169380564692444E-4	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9999115263907138	WITHOUT_CLASSIFICATION	8.847360928621948E-5	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999999695581454	WITHOUT_CLASSIFICATION	3.044185446017507E-8	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9987431221306105	WITHOUT_CLASSIFICATION	0.0012568778693895248	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9999665871887091	WITHOUT_CLASSIFICATION	3.3412811290873516E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994831739356	WITHOUT_CLASSIFICATION	5.168260643203536E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994831739356	WITHOUT_CLASSIFICATION	5.168260643203536E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9999573527323113	WITHOUT_CLASSIFICATION	4.2647267688719E-5	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9981777658538581	WITHOUT_CLASSIFICATION	0.0018222341461419246	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9998530841352166	WITHOUT_CLASSIFICATION	1.469158647834131E-4	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999991925023402	WITHOUT_CLASSIFICATION	8.074976599153215E-7	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999971630349211	WITHOUT_CLASSIFICATION	2.83696507879577E-6	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9998548527199355	WITHOUT_CLASSIFICATION	1.451472800645665E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999986591434337	WITHOUT_CLASSIFICATION	1.3408565662587098E-6	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9784597829382666	WITHOUT_CLASSIFICATION	0.021540217061733348	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9997878097337444	WITHOUT_CLASSIFICATION	2.1219026625573652E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999989700518201	WITHOUT_CLASSIFICATION	1.0299481798787307E-6	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999447715264	WITHOUT_CLASSIFICATION	5.5228473518066214E-8	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999949235005939	WITHOUT_CLASSIFICATION	5.076499406079259E-6	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999560673454174	WITHOUT_CLASSIFICATION	4.3932654582635165E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999560673454174	WITHOUT_CLASSIFICATION	4.3932654582635165E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.999920146281598	WITHOUT_CLASSIFICATION	7.985371840192108E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.999920146281598	WITHOUT_CLASSIFICATION	7.985371840192108E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999467136294572	WITHOUT_CLASSIFICATION	5.328637054285621E-5	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999937700895808	WITHOUT_CLASSIFICATION	6.2299104192031025E-6	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999937700895808	WITHOUT_CLASSIFICATION	6.2299104192031025E-6	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999940349549044	WITHOUT_CLASSIFICATION	5.965045095605739E-6	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999838617887954	WITHOUT_CLASSIFICATION	1.613821120461357E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999992762737758	WITHOUT_CLASSIFICATION	7.237262242219724E-7	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9998988296164668	WITHOUT_CLASSIFICATION	1.0117038353325153E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999985979333573	WITHOUT_CLASSIFICATION	1.4020666427239512E-6	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999838617887954	WITHOUT_CLASSIFICATION	1.613821120461357E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999853345168555	WITHOUT_CLASSIFICATION	1.4665483144566664E-5	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9964679089986339	WITHOUT_CLASSIFICATION	0.003532091001366137	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999999793336589	WITHOUT_CLASSIFICATION	2.0666341117649889E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.999999710496373	WITHOUT_CLASSIFICATION	2.8950362702279156E-7	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999982391351164	WITHOUT_CLASSIFICATION	1.7608648834856285E-6	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9995731857495677	WITHOUT_CLASSIFICATION	4.268142504322629E-4	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999995139783622	WITHOUT_CLASSIFICATION	4.86021637803113E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.987920685217195	WITHOUT_CLASSIFICATION	0.012079314782804903	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999999714469131	WITHOUT_CLASSIFICATION	2.855308684036151E-8	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9969686552781843	WITHOUT_CLASSIFICATION	0.00303134472181556	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999829822259	WITHOUT_CLASSIFICATION	1.701777398297908E-8	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999724893985007	WITHOUT_CLASSIFICATION	2.751060149935342E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964537575476	WITHOUT_CLASSIFICATION	3.546242452509114E-6	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999990103771309	WITHOUT_CLASSIFICATION	9.896228691367525E-7	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9999992696597605	WITHOUT_CLASSIFICATION	7.303402393861588E-7	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9880977384876994	WITHOUT_CLASSIFICATION	0.011902261512300576	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999998191089394	WITHOUT_CLASSIFICATION	1.8089106048258242E-7	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996237022376787	WITHOUT_CLASSIFICATION	3.762977623213766E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996237022376787	WITHOUT_CLASSIFICATION	3.762977623213766E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999795451565869	WITHOUT_CLASSIFICATION	2.045484341309731E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999989931610488	WITHOUT_CLASSIFICATION	1.0068389512469903E-6	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999989112257821	WITHOUT_CLASSIFICATION	1.088774217896805E-5	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.999848020496002	WITHOUT_CLASSIFICATION	1.5197950399805155E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9988316028253966	WITHOUT_CLASSIFICATION	0.0011683971746033746	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999857640151133	WITHOUT_CLASSIFICATION	1.4235984886755645E-5	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9998188014907623	WITHOUT_CLASSIFICATION	1.8119850923771036E-4	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999998595280412	WITHOUT_CLASSIFICATION	1.4047195878877335E-7	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9998858445983655	WITHOUT_CLASSIFICATION	1.1415540163458841E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997346394191337	WITHOUT_CLASSIFICATION	2.6536058086640686E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9999746897213452	WITHOUT_CLASSIFICATION	2.531027865476053E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999432324930388	WITHOUT_CLASSIFICATION	5.676750696107447E-5	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999960501369642	WITHOUT_CLASSIFICATION	3.949863035686226E-6	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999994802027644	WITHOUT_CLASSIFICATION	5.197972356836489E-7	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997931025968656	WITHOUT_CLASSIFICATION	2.0689740313443008E-4	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999888574349256	WITHOUT_CLASSIFICATION	1.1142565074374668E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999660607434	WITHOUT_CLASSIFICATION	3.3939256625175046E-8	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999660607434	WITHOUT_CLASSIFICATION	3.3939256625175046E-8	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9999770257860298	WITHOUT_CLASSIFICATION	2.297421397016941E-5	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9994736087526546	WITHOUT_CLASSIFICATION	5.263912473454104E-4	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999857693464599	WITHOUT_CLASSIFICATION	1.423065354024179E-5	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9998409817382424	WITHOUT_CLASSIFICATION	1.590182617575277E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999789327481625	WITHOUT_CLASSIFICATION	2.1067251837530074E-5	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999965879487979	WITHOUT_CLASSIFICATION	3.412051202038623E-6	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9985678396831076	WITHOUT_CLASSIFICATION	0.0014321603168924	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999894756869853	WITHOUT_CLASSIFICATION	1.0524313014715904E-5	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999936032950252	WITHOUT_CLASSIFICATION	6.396704974760365E-6	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999581844368	WITHOUT_CLASSIFICATION	4.181556320132462E-8	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999619179269084	WITHOUT_CLASSIFICATION	3.808207309172426E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999894756869853	WITHOUT_CLASSIFICATION	1.0524313014715904E-5	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.5424103694762303	DESIGN	0.4575896305237696	WITHOUT_CLASSIFICATION
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9978430284788321	WITHOUT_CLASSIFICATION	0.0021569715211678573	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9978353816150595	WITHOUT_CLASSIFICATION	0.0021646183849404685	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999986629861525	WITHOUT_CLASSIFICATION	1.337013847488798E-6	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999971027436123	WITHOUT_CLASSIFICATION	2.8972563876757566E-6	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999999082715338	WITHOUT_CLASSIFICATION	9.172846617895686E-8	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999998003176438	WITHOUT_CLASSIFICATION	1.9968235624680501E-7	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999910211108	WITHOUT_CLASSIFICATION	8.978889220587286E-9	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9997403865458121	WITHOUT_CLASSIFICATION	2.5961345418779914E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994274037077726	WITHOUT_CLASSIFICATION	5.725962922273377E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999768958090062	WITHOUT_CLASSIFICATION	2.3104190993898524E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999997216421128	WITHOUT_CLASSIFICATION	2.783578871481607E-7	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999845600523302	WITHOUT_CLASSIFICATION	1.5439947669839356E-5	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999996449316033	WITHOUT_CLASSIFICATION	3.550683966828083E-7	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999931298970847	WITHOUT_CLASSIFICATION	6.870102915313392E-6	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999908974641755	WITHOUT_CLASSIFICATION	9.10253582454195E-6	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999491551912628	WITHOUT_CLASSIFICATION	5.084480873719232E-5	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9927266406113225	WITHOUT_CLASSIFICATION	0.007273359388677443	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9990736341235271	WITHOUT_CLASSIFICATION	9.263658764727702E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999997928992139	WITHOUT_CLASSIFICATION	2.071007861191041E-7	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999476130887559	WITHOUT_CLASSIFICATION	5.2386911244148575E-5	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.5113455636716292	DESIGN	0.4886544363283708	WITHOUT_CLASSIFICATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9998589829244887	WITHOUT_CLASSIFICATION	1.4101707551130813E-4	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9999710875139741	WITHOUT_CLASSIFICATION	2.891248602599133E-5	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999997962493942	WITHOUT_CLASSIFICATION	2.0375060578372873E-7	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998825125179233	WITHOUT_CLASSIFICATION	1.1748748207672439E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999994609067158	WITHOUT_CLASSIFICATION	5.390932841590788E-7	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999920966404	WITHOUT_CLASSIFICATION	7.90335964796501E-9	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999995497901287	WITHOUT_CLASSIFICATION	4.502098712879341E-7	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9980174294521867	WITHOUT_CLASSIFICATION	0.0019825705478133614	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999983047703	WITHOUT_CLASSIFICATION	1.6952297400943412E-9	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999223663967864	WITHOUT_CLASSIFICATION	7.763360321345216E-5	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999983953867461	WITHOUT_CLASSIFICATION	1.6046132539877374E-6	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9999616998180744	WITHOUT_CLASSIFICATION	3.830018192557908E-5	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999823880825491	WITHOUT_CLASSIFICATION	1.7611917450925033E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999932191760296	WITHOUT_CLASSIFICATION	6.78082397038892E-6	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999715074069535	WITHOUT_CLASSIFICATION	2.8492593046598884E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999864181749	WITHOUT_CLASSIFICATION	1.3581824993437564E-8	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999999198294716	WITHOUT_CLASSIFICATION	8.017052836697175E-8	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999665109395727	WITHOUT_CLASSIFICATION	3.348906042726294E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999998109862129	WITHOUT_CLASSIFICATION	1.89013786951002E-7	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999993516033077	WITHOUT_CLASSIFICATION	6.483966922924775E-7	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999732602770631	WITHOUT_CLASSIFICATION	2.6739722936829225E-5	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999995282221867	WITHOUT_CLASSIFICATION	4.7177781326098447E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999361045877619	WITHOUT_CLASSIFICATION	6.389541223812722E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9998623196470798	WITHOUT_CLASSIFICATION	1.3768035292010202E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999994122457266	WITHOUT_CLASSIFICATION	5.877542733849433E-7	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999985856694876	WITHOUT_CLASSIFICATION	1.4143305123726916E-6	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999993879948554	WITHOUT_CLASSIFICATION	6.120051445368843E-7	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999511398512325	WITHOUT_CLASSIFICATION	4.886014876740269E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901293165584	WITHOUT_CLASSIFICATION	9.870683441610592E-6	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999892304866559	WITHOUT_CLASSIFICATION	1.076951334406648E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999615124857721	WITHOUT_CLASSIFICATION	3.8487514227762266E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999916773176	WITHOUT_CLASSIFICATION	8.322682406325785E-9	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999998257146071	WITHOUT_CLASSIFICATION	1.7428539298923387E-7	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999908597111135	WITHOUT_CLASSIFICATION	9.140288886537329E-6	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999940224287519	WITHOUT_CLASSIFICATION	5.9775712482062915E-6	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999997738038383	WITHOUT_CLASSIFICATION	2.2619616163016143E-7	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999915622940437	WITHOUT_CLASSIFICATION	8.43770595632054E-6	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999995005262341	WITHOUT_CLASSIFICATION	4.994737659942715E-7	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9994995047486112	WITHOUT_CLASSIFICATION	5.004952513887852E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999999669523376	WITHOUT_CLASSIFICATION	3.304766238588286E-8	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9998970028812222	WITHOUT_CLASSIFICATION	1.0299711877782482E-4	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.884975590885519	WITHOUT_CLASSIFICATION	0.11502440911448107	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9962041913266277	WITHOUT_CLASSIFICATION	0.003795808673372319	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999678449703846	WITHOUT_CLASSIFICATION	3.215502961544647E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999901293165584	WITHOUT_CLASSIFICATION	9.870683441610592E-6	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999643477969588	WITHOUT_CLASSIFICATION	3.56522030412282E-5	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999953772583	WITHOUT_CLASSIFICATION	4.6227416845101445E-9	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999711959571391	WITHOUT_CLASSIFICATION	2.8804042860978934E-5	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999926320126067	WITHOUT_CLASSIFICATION	7.367987393265493E-6	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999456260837551	WITHOUT_CLASSIFICATION	5.4373916244749596E-5	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9991859712932878	WITHOUT_CLASSIFICATION	8.140287067122847E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999936032950252	WITHOUT_CLASSIFICATION	6.396704974760365E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9945377447074046	WITHOUT_CLASSIFICATION	0.005462255292595328	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999823880825491	WITHOUT_CLASSIFICATION	1.7611917450925033E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9832421786120712	WITHOUT_CLASSIFICATION	0.01675782138792873	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999997144683309	WITHOUT_CLASSIFICATION	2.855316690096439E-7	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999991948940122	WITHOUT_CLASSIFICATION	8.051059876942543E-7	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999980813732453	WITHOUT_CLASSIFICATION	1.9186267546314233E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999592466090861	WITHOUT_CLASSIFICATION	4.0753390913841025E-5	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.8873918202644353	WITHOUT_CLASSIFICATION	0.11260817973556461	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9995273780267423	WITHOUT_CLASSIFICATION	4.726219732576456E-4	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9982678255164493	WITHOUT_CLASSIFICATION	0.0017321744835505702	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9998974312287582	WITHOUT_CLASSIFICATION	1.025687712418233E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999970087942799	WITHOUT_CLASSIFICATION	2.991205720168614E-6	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9997879078698552	WITHOUT_CLASSIFICATION	2.1209213014481418E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9981497636120427	WITHOUT_CLASSIFICATION	0.0018502363879572808	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993209020543271	WITHOUT_CLASSIFICATION	6.790979456729397E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9993209020543271	WITHOUT_CLASSIFICATION	6.790979456729397E-4	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998690209068037	WITHOUT_CLASSIFICATION	1.3097909319620375E-4	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999903873679012	WITHOUT_CLASSIFICATION	9.612632098735543E-6	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999997664159388	WITHOUT_CLASSIFICATION	2.3358406118928438E-7	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999991527793316	WITHOUT_CLASSIFICATION	8.472206684341383E-7	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.999994830125283	WITHOUT_CLASSIFICATION	5.169874717070464E-6	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999193835687552	WITHOUT_CLASSIFICATION	8.06164312447525E-5	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994894118137	WITHOUT_CLASSIFICATION	5.105881862232239E-7	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9997957025286975	WITHOUT_CLASSIFICATION	2.042974713025632E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999884620039181	WITHOUT_CLASSIFICATION	1.1537996081825464E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9999027889723135	WITHOUT_CLASSIFICATION	9.721102768645548E-5	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9997723070279904	WITHOUT_CLASSIFICATION	2.276929720097106E-4	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999907951129613	WITHOUT_CLASSIFICATION	9.204887038783562E-6	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999969990860532	WITHOUT_CLASSIFICATION	3.0009139467781335E-6	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999999882819	WITHOUT_CLASSIFICATION	1.1718102548814083E-10	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9984027991425009	WITHOUT_CLASSIFICATION	0.0015972008574991555	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999864908480969	WITHOUT_CLASSIFICATION	1.3509151903086905E-5	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9998799828156424	WITHOUT_CLASSIFICATION	1.2001718435758328E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9990653957360799	WITHOUT_CLASSIFICATION	9.34604263920105E-4	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999998640183	WITHOUT_CLASSIFICATION	1.3598165469772557E-10	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999999796823754	WITHOUT_CLASSIFICATION	2.0317624621314098E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.999885836778899	WITHOUT_CLASSIFICATION	1.1416322110097998E-4	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.999999762499054	WITHOUT_CLASSIFICATION	2.3750094605307307E-7	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999483962969291	WITHOUT_CLASSIFICATION	5.16037030709384E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999951753570022	WITHOUT_CLASSIFICATION	4.824642997812138E-6	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9994818855853345	WITHOUT_CLASSIFICATION	5.18114414665513E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999949377026512	WITHOUT_CLASSIFICATION	5.0622973488301515E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999849815030529	WITHOUT_CLASSIFICATION	1.5018496947098485E-5	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999996330139417	WITHOUT_CLASSIFICATION	3.6698605823895755E-7	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999990371799123	WITHOUT_CLASSIFICATION	9.628200877065255E-7	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9974724348402811	WITHOUT_CLASSIFICATION	0.002527565159718872	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999532746495703	WITHOUT_CLASSIFICATION	4.672535042976408E-5	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999776432288381	WITHOUT_CLASSIFICATION	2.2356771161931446E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.992321741990326	WITHOUT_CLASSIFICATION	0.007678258009674102	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9997960850107167	WITHOUT_CLASSIFICATION	2.039149892832615E-4	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9992942511145517	WITHOUT_CLASSIFICATION	7.057488854482969E-4	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.99999399659711	WITHOUT_CLASSIFICATION	6.003402890062828E-6	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999999031274666	WITHOUT_CLASSIFICATION	9.687253339906712E-8	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9999781509160457	WITHOUT_CLASSIFICATION	2.1849083954280516E-5	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999837610755767	WITHOUT_CLASSIFICATION	1.6238924423255595E-5	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999869699239926	WITHOUT_CLASSIFICATION	1.3030076007328694E-5	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994183080652	WITHOUT_CLASSIFICATION	5.816919347911118E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999705762048364	WITHOUT_CLASSIFICATION	2.9423795163623493E-5	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999964840144	WITHOUT_CLASSIFICATION	3.5159856666021434E-9	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999931705085006	WITHOUT_CLASSIFICATION	6.829491499499347E-6	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999996505129046	WITHOUT_CLASSIFICATION	3.494870954129152E-7	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999997763044286	WITHOUT_CLASSIFICATION	2.2369557143481833E-7	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999672443669412	WITHOUT_CLASSIFICATION	3.2755633058801345E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9817462644459837	WITHOUT_CLASSIFICATION	0.018253735554016284	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999979950889167	WITHOUT_CLASSIFICATION	2.0049110831917875E-6	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999999406997	WITHOUT_CLASSIFICATION	5.930041043791758E-11	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999013155844	WITHOUT_CLASSIFICATION	9.868441564195631E-8	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999056356783402	WITHOUT_CLASSIFICATION	9.436432165984754E-5	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999999888370871	WITHOUT_CLASSIFICATION	1.1162912935660738E-8	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999994474252744	WITHOUT_CLASSIFICATION	5.525747257656108E-7	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999748126477831	WITHOUT_CLASSIFICATION	2.518735221689001E-5	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999995152653073	WITHOUT_CLASSIFICATION	4.847346927720125E-7	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9990491390912514	WITHOUT_CLASSIFICATION	9.508609087487449E-4	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999999392741351	WITHOUT_CLASSIFICATION	6.072586488435082E-8	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999507219097532	WITHOUT_CLASSIFICATION	4.927809024676998E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999996599423445	WITHOUT_CLASSIFICATION	3.4005765547478696E-7	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.999975710942723	WITHOUT_CLASSIFICATION	2.4289057277003484E-5	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9999750962423803	WITHOUT_CLASSIFICATION	2.490375761960071E-5	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999997322633134	WITHOUT_CLASSIFICATION	2.677366865326639E-7	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9916446048355553	WITHOUT_CLASSIFICATION	0.008355395164444793	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999882626785851	WITHOUT_CLASSIFICATION	1.1737321414902078E-5	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999785982104304	WITHOUT_CLASSIFICATION	2.1401789569603987E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.999965044831936	WITHOUT_CLASSIFICATION	3.4955168064053464E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993728013707	WITHOUT_CLASSIFICATION	6.271986292400701E-7	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999997310703891	WITHOUT_CLASSIFICATION	2.6892961101235E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999887038843	WITHOUT_CLASSIFICATION	1.1296115787963152E-8	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999992663408857	WITHOUT_CLASSIFICATION	7.336591144473557E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999887038843	WITHOUT_CLASSIFICATION	1.1296115787963152E-8	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999645636465	WITHOUT_CLASSIFICATION	3.5436353407455164E-8	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999998222880958	WITHOUT_CLASSIFICATION	1.7771190413626502E-7	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999981277941827	WITHOUT_CLASSIFICATION	1.8722058173512577E-6	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999634208874	WITHOUT_CLASSIFICATION	3.657911259112059E-8	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.999999957206863	WITHOUT_CLASSIFICATION	4.2793137096143373E-8	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999988133173228	WITHOUT_CLASSIFICATION	1.1866826772515152E-6	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999934236660775	WITHOUT_CLASSIFICATION	6.576333922522106E-6	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999427334054806	WITHOUT_CLASSIFICATION	5.726659451943662E-5	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999727478167186	WITHOUT_CLASSIFICATION	2.7252183281349884E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999978086359882	WITHOUT_CLASSIFICATION	2.1913640117258627E-6	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999966942871	WITHOUT_CLASSIFICATION	3.3057129376791248E-9	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999704116317675	WITHOUT_CLASSIFICATION	2.9588368232547382E-5	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999944403847	WITHOUT_CLASSIFICATION	5.559615325046963E-9	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999999667017742	DESIGN	3.3298225794299547E-7	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999999338203329	WITHOUT_CLASSIFICATION	6.617966698788608E-8	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999997454897	WITHOUT_CLASSIFICATION	2.5451031681194574E-10	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.999999183136227	WITHOUT_CLASSIFICATION	8.168637728799792E-7	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999165095301	WITHOUT_CLASSIFICATION	8.349046989603826E-8	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999736022752	WITHOUT_CLASSIFICATION	2.6397724730375865E-8	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.998498941315463	WITHOUT_CLASSIFICATION	0.0015010586845369497	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.999998037253489	WITHOUT_CLASSIFICATION	1.962746511007059E-6	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9998622929175517	WITHOUT_CLASSIFICATION	1.377070824482651E-4	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9950845908732161	WITHOUT_CLASSIFICATION	0.0049154091267839236	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999811822907093	WITHOUT_CLASSIFICATION	1.881770929063731E-5	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999994892751363	WITHOUT_CLASSIFICATION	5.107248636316404E-7	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999992167989608	WITHOUT_CLASSIFICATION	7.832010392807951E-7	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9992768617403752	WITHOUT_CLASSIFICATION	7.231382596248803E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999793943602782	WITHOUT_CLASSIFICATION	2.0605639721769746E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999999831110068	WITHOUT_CLASSIFICATION	1.6888993211274764E-8	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9999998378396058	WITHOUT_CLASSIFICATION	1.621603941731619E-7	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999989929982183	WITHOUT_CLASSIFICATION	1.0070017817181347E-6	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999957428885382	WITHOUT_CLASSIFICATION	4.257111461729621E-6	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9915033576407118	WITHOUT_CLASSIFICATION	0.008496642359288207	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9999420760744626	WITHOUT_CLASSIFICATION	5.79239255373658E-5	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999911045114418	WITHOUT_CLASSIFICATION	8.895488558185312E-6	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999961067807713	WITHOUT_CLASSIFICATION	3.893219228669111E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9998957925394076	WITHOUT_CLASSIFICATION	1.042074605923684E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999999983657683	WITHOUT_CLASSIFICATION	1.634231701331139E-8	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999816352092858	WITHOUT_CLASSIFICATION	1.8364790714109317E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999999566665662	WITHOUT_CLASSIFICATION	4.3333433799673997E-7	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999980293655604	WITHOUT_CLASSIFICATION	1.9706344396829876E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999989245317085	WITHOUT_CLASSIFICATION	1.0754682914992825E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999875000795668	WITHOUT_CLASSIFICATION	1.2499920433202966E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999992167989608	WITHOUT_CLASSIFICATION	7.832010392807951E-7	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999735308364156	WITHOUT_CLASSIFICATION	2.6469163584406797E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999913158055086	WITHOUT_CLASSIFICATION	8.684194491403714E-6	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9850925530405464	WITHOUT_CLASSIFICATION	0.014907446959453617	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999999372692252	WITHOUT_CLASSIFICATION	6.273077474822352E-8	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999995697805316	WITHOUT_CLASSIFICATION	4.3021946837330883E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999996704334178	WITHOUT_CLASSIFICATION	3.295665822589635E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9992952795839231	WITHOUT_CLASSIFICATION	7.047204160768867E-4	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9825574983938996	DESIGN	0.017442501606100454	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999874959907824	WITHOUT_CLASSIFICATION	1.2504009217657991E-5	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.999895454605756	WITHOUT_CLASSIFICATION	1.0454539424404019E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999851703853262	WITHOUT_CLASSIFICATION	1.4829614673804373E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999945943415834	WITHOUT_CLASSIFICATION	5.40565841654629E-6	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999964851716427	WITHOUT_CLASSIFICATION	3.514828357312314E-6	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998031444338145	WITHOUT_CLASSIFICATION	1.9685556618560639E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999991627170609	WITHOUT_CLASSIFICATION	8.3728293908015E-7	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999977679883739	WITHOUT_CLASSIFICATION	2.232011626165151E-6	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999999708131199	WITHOUT_CLASSIFICATION	2.9186880085177984E-8	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999324090466	WITHOUT_CLASSIFICATION	6.759095341866767E-8	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999951813940551	WITHOUT_CLASSIFICATION	4.818605944941049E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999735308364156	WITHOUT_CLASSIFICATION	2.6469163584406797E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999999659111778	WITHOUT_CLASSIFICATION	3.408882226660281E-8	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.99977678583143	WITHOUT_CLASSIFICATION	2.2321416857001982E-4	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999970983191816	WITHOUT_CLASSIFICATION	2.9016808184958817E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998958824689991	WITHOUT_CLASSIFICATION	1.0411753100093236E-4	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998667642764872	WITHOUT_CLASSIFICATION	1.3323572351280158E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984982866279953	WITHOUT_CLASSIFICATION	0.0015017133720047363	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984982866279953	WITHOUT_CLASSIFICATION	0.0015017133720047363	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999964138913668	WITHOUT_CLASSIFICATION	3.586108633114742E-6	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984982866279953	WITHOUT_CLASSIFICATION	0.0015017133720047363	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9984982866279953	WITHOUT_CLASSIFICATION	0.0015017133720047363	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.5408298099271936	WITHOUT_CLASSIFICATION	0.4591701900728064	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999762468211	WITHOUT_CLASSIFICATION	2.375317887861882E-8	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.998993449950036	WITHOUT_CLASSIFICATION	0.0010065500499639004	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998612074393244	WITHOUT_CLASSIFICATION	1.3879256067557787E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9985981414879357	WITHOUT_CLASSIFICATION	0.0014018585120643807	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9391675640908418	WITHOUT_CLASSIFICATION	0.060832435909158177	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9997316965535328	WITHOUT_CLASSIFICATION	2.683034464671964E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999917693624	WITHOUT_CLASSIFICATION	8.230637487863735E-9	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.999974930941038	WITHOUT_CLASSIFICATION	2.5069058962016584E-5	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999586776171526	WITHOUT_CLASSIFICATION	4.1322382847479544E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997254198122593	WITHOUT_CLASSIFICATION	2.745801877407681E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999788107511032	WITHOUT_CLASSIFICATION	2.1189248896840726E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9999775589955594	WITHOUT_CLASSIFICATION	2.2441004440622177E-5	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999979186111613	WITHOUT_CLASSIFICATION	2.0813888387052126E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999957860894122	WITHOUT_CLASSIFICATION	4.213910587788483E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9999784079647144	WITHOUT_CLASSIFICATION	2.1592035285642226E-5	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999685762427	WITHOUT_CLASSIFICATION	3.142375725500245E-8	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999999248009447	WITHOUT_CLASSIFICATION	7.51990553030042E-8	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9251277450353355	WITHOUT_CLASSIFICATION	0.07487225496466464	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999588215194071	WITHOUT_CLASSIFICATION	4.1178480593016776E-5	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9998435934623306	WITHOUT_CLASSIFICATION	1.564065376693047E-4	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9999977651182511	WITHOUT_CLASSIFICATION	2.2348817488488293E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999685762427	WITHOUT_CLASSIFICATION	3.142375725500245E-8	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9992768617403752	WITHOUT_CLASSIFICATION	7.231382596248803E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999983378290342	WITHOUT_CLASSIFICATION	1.662170965813072E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999818628762	WITHOUT_CLASSIFICATION	1.81371237753178E-8	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999995230196937	WITHOUT_CLASSIFICATION	4.76980306193735E-7	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999995988756029	WITHOUT_CLASSIFICATION	4.011243972039801E-7	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999851864975241	WITHOUT_CLASSIFICATION	1.4813502475975887E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.999947255757702	WITHOUT_CLASSIFICATION	5.27442422979315E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999669308864461	WITHOUT_CLASSIFICATION	3.3069113553971854E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999962248321924	WITHOUT_CLASSIFICATION	3.7751678075434014E-6	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9997241494984577	WITHOUT_CLASSIFICATION	2.7585050154232954E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999881588622065	WITHOUT_CLASSIFICATION	1.184113779358787E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999997086133962	WITHOUT_CLASSIFICATION	2.913866037791607E-7	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998985909713618	WITHOUT_CLASSIFICATION	1.0140902863810219E-4	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999898456347	WITHOUT_CLASSIFICATION	1.015436541898576E-8	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999976655485936	WITHOUT_CLASSIFICATION	2.334451406476327E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999985958588434	WITHOUT_CLASSIFICATION	1.4041411566558655E-6	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.999988350057436	WITHOUT_CLASSIFICATION	1.1649942563909422E-5	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.999995496288828	WITHOUT_CLASSIFICATION	4.5037111719934576E-6	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999225980029555	WITHOUT_CLASSIFICATION	7.740199704452988E-5	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999969637428271	WITHOUT_CLASSIFICATION	3.0362571730008996E-6	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9993780640710701	WITHOUT_CLASSIFICATION	6.219359289298285E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9999410975169242	WITHOUT_CLASSIFICATION	5.890248307580983E-5	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999995016779929	WITHOUT_CLASSIFICATION	4.983220070577132E-7	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999962248321924	WITHOUT_CLASSIFICATION	3.7751678075434014E-6	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999998028243723	WITHOUT_CLASSIFICATION	1.9717562779173135E-7	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9999071939697948	WITHOUT_CLASSIFICATION	9.28060302053051E-5	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9998441770753359	WITHOUT_CLASSIFICATION	1.5582292466414504E-4	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9973647683474406	WITHOUT_CLASSIFICATION	0.0026352316525595477	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999974808155236	WITHOUT_CLASSIFICATION	2.519184476382252E-6	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.999995287855756	WITHOUT_CLASSIFICATION	4.712144244063504E-6	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999963390517088	WITHOUT_CLASSIFICATION	3.660948291190558E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9999937244363181	WITHOUT_CLASSIFICATION	6.275563681931357E-6	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999992889693956	WITHOUT_CLASSIFICATION	7.110306044336241E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999885741083614	WITHOUT_CLASSIFICATION	1.1425891638527646E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999150671758	WITHOUT_CLASSIFICATION	8.493282413838023E-8	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.999999744799894	WITHOUT_CLASSIFICATION	2.5520010610617116E-7	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9684645730593227	WITHOUT_CLASSIFICATION	0.031535426940677395	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999999757702537	WITHOUT_CLASSIFICATION	2.422974630145859E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999634967909361	WITHOUT_CLASSIFICATION	3.650320906380733E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999970286881299	WITHOUT_CLASSIFICATION	2.971311869991248E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999986618794118	WITHOUT_CLASSIFICATION	1.3381205881907119E-6	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999150671758	WITHOUT_CLASSIFICATION	8.493282413838023E-8	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999766108051861	WITHOUT_CLASSIFICATION	2.338919481395462E-5	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.7368153602806865	WITHOUT_CLASSIFICATION	0.2631846397193135	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999937227273598	WITHOUT_CLASSIFICATION	6.277272640141889E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999705954012985	WITHOUT_CLASSIFICATION	2.940459870152908E-5	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.999989579918058	WITHOUT_CLASSIFICATION	1.0420081941855294E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999381547677	WITHOUT_CLASSIFICATION	6.184523223759858E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999634967909361	WITHOUT_CLASSIFICATION	3.650320906380733E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999998470545487	WITHOUT_CLASSIFICATION	1.529454512875729E-7	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999390988139	WITHOUT_CLASSIFICATION	6.090118611289939E-7	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994205352665	WITHOUT_CLASSIFICATION	5.79464733590159E-7	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999896866091016	WITHOUT_CLASSIFICATION	1.0313390898477882E-5	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999859028985899	WITHOUT_CLASSIFICATION	1.409710141014893E-5	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999953079261469	WITHOUT_CLASSIFICATION	4.692073853144912E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999950507016108	WITHOUT_CLASSIFICATION	4.949298389185109E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999950507016108	WITHOUT_CLASSIFICATION	4.949298389185109E-6	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9997166982596107	WITHOUT_CLASSIFICATION	2.833017403893315E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999997921473	WITHOUT_CLASSIFICATION	2.0785270001646688E-7	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999682274202534	WITHOUT_CLASSIFICATION	3.177257974662969E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999961960419278	WITHOUT_CLASSIFICATION	3.8039580721200096E-6	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999981609752454	WITHOUT_CLASSIFICATION	1.839024754482217E-6	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999696805621339	WITHOUT_CLASSIFICATION	3.0319437866090698E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965982081311	WITHOUT_CLASSIFICATION	3.401791868816722E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926447225903	WITHOUT_CLASSIFICATION	7.355277409809023E-6	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.995451705083278	WITHOUT_CLASSIFICATION	0.0045482949167220035	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998611937403	WITHOUT_CLASSIFICATION	1.3880625958289381E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999696805621339	WITHOUT_CLASSIFICATION	3.0319437866090698E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999965982081311	WITHOUT_CLASSIFICATION	3.401791868816722E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999926447225903	WITHOUT_CLASSIFICATION	7.355277409809023E-6	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999831371854845	WITHOUT_CLASSIFICATION	1.686281451551448E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9994908839186136	WITHOUT_CLASSIFICATION	5.091160813863917E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999343661515906	WITHOUT_CLASSIFICATION	6.563384840940696E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995836271941786	WITHOUT_CLASSIFICATION	4.1637280582148124E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.999997976929662	WITHOUT_CLASSIFICATION	2.0230703380525274E-6	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9932208963285764	DESIGN	0.006779103671423622	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999999846397441	WITHOUT_CLASSIFICATION	1.536025590316253E-7	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9943842999642003	WITHOUT_CLASSIFICATION	0.00561570003579971	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9999484142343144	WITHOUT_CLASSIFICATION	5.158576568557557E-5	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.998992825987041	WITHOUT_CLASSIFICATION	0.0010071740129589783	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9999896685193524	WITHOUT_CLASSIFICATION	1.0331480647569312E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5706169210320425	WITHOUT_CLASSIFICATION	0.42938307896795747	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9969801964621294	WITHOUT_CLASSIFICATION	0.003019803537870557	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9997644888852892	WITHOUT_CLASSIFICATION	2.3551111471076182E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998997471464223	WITHOUT_CLASSIFICATION	1.0025285357770762E-4	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999984856175094	WITHOUT_CLASSIFICATION	1.51438249054808E-6	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9998297611010724	WITHOUT_CLASSIFICATION	1.7023889892765098E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999963932347822	WITHOUT_CLASSIFICATION	3.6067652177552792E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999854346130498	WITHOUT_CLASSIFICATION	1.4565386950158434E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999983390147074	WITHOUT_CLASSIFICATION	1.6609852926335005E-6	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.999997103215203	WITHOUT_CLASSIFICATION	2.8967847970947785E-6	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9691788725214207	WITHOUT_CLASSIFICATION	0.030821127478579267	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999998901877255	WITHOUT_CLASSIFICATION	1.0981227459973311E-7	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999760161530935	WITHOUT_CLASSIFICATION	2.398384690647016E-5	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999992408953315	WITHOUT_CLASSIFICATION	7.591046683908747E-7	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9999818613657764	WITHOUT_CLASSIFICATION	1.813863422362097E-5	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999960231917973	WITHOUT_CLASSIFICATION	3.9768082026688135E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999833921550999	WITHOUT_CLASSIFICATION	1.660784490013913E-5	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9169658511386658	WITHOUT_CLASSIFICATION	0.08303414886133419	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999927264670492	WITHOUT_CLASSIFICATION	7.2735329508588315E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994393583971	WITHOUT_CLASSIFICATION	5.606416029408781E-7	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999817299921	WITHOUT_CLASSIFICATION	1.8270007887291518E-7	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999999817299921	WITHOUT_CLASSIFICATION	1.8270007887291518E-7	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999925025812575	WITHOUT_CLASSIFICATION	7.497418742437953E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999985963587	WITHOUT_CLASSIFICATION	1.403641276779337E-9	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9998486839182119	WITHOUT_CLASSIFICATION	1.5131608178809317E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999432324930388	WITHOUT_CLASSIFICATION	5.676750696107447E-5	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9999480597960603	WITHOUT_CLASSIFICATION	5.194020393972956E-5	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999082668688531	WITHOUT_CLASSIFICATION	9.173313114675872E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9999885146299825	WITHOUT_CLASSIFICATION	1.1485370017491786E-5	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999983119372358	WITHOUT_CLASSIFICATION	1.6880627642468947E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9999154085207488	WITHOUT_CLASSIFICATION	8.459147925123359E-5	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999916467909	WITHOUT_CLASSIFICATION	8.353209101141698E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994236479549	WITHOUT_CLASSIFICATION	5.76352045121734E-7	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998956907816	WITHOUT_CLASSIFICATION	1.043092183846837E-7	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997349212869	WITHOUT_CLASSIFICATION	2.6507871304964553E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998003743458	WITHOUT_CLASSIFICATION	1.9962565426542554E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997742579599	WITHOUT_CLASSIFICATION	2.2574204003326613E-7	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999894435673	WITHOUT_CLASSIFICATION	1.0556432694727687E-7	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999584801459	WITHOUT_CLASSIFICATION	4.151985410314159E-7	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999114108545	WITHOUT_CLASSIFICATION	8.858914539113891E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999711365015	WITHOUT_CLASSIFICATION	2.8863498503184943E-7	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991305710143	WITHOUT_CLASSIFICATION	8.69428985568304E-7	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999248025832005	WITHOUT_CLASSIFICATION	7.519741679944434E-5	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9999806188174762	WITHOUT_CLASSIFICATION	1.9381182523779544E-5	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980708969206769	WITHOUT_CLASSIFICATION	0.0019291030793231535	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999920354152935	WITHOUT_CLASSIFICATION	7.964584706483435E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9994138052704497	WITHOUT_CLASSIFICATION	5.861947295503334E-4	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9965716834707693	WITHOUT_CLASSIFICATION	0.0034283165292307545	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9999985604283201	WITHOUT_CLASSIFICATION	1.4395716799226908E-6	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9996201968930909	WITHOUT_CLASSIFICATION	3.7980310690913276E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980708969206769	WITHOUT_CLASSIFICATION	0.0019291030793231535	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980708969206769	WITHOUT_CLASSIFICATION	0.0019291030793231535	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9464567218222663	WITHOUT_CLASSIFICATION	0.05354327817773367	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999997501118691	WITHOUT_CLASSIFICATION	2.498881308929852E-7	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.99802294919864	WITHOUT_CLASSIFICATION	0.001977050801359977	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9999083399534129	WITHOUT_CLASSIFICATION	9.166004658714302E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964537575476	WITHOUT_CLASSIFICATION	3.546242452509114E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999983390147074	WITHOUT_CLASSIFICATION	1.6609852926335005E-6	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999969080698328	WITHOUT_CLASSIFICATION	3.0919301672955665E-6	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999984801105885	WITHOUT_CLASSIFICATION	1.5198894116562516E-6	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999949930384537	WITHOUT_CLASSIFICATION	5.006961546175584E-6	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999550382423514	WITHOUT_CLASSIFICATION	4.496175764851151E-5	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999935531027718	WITHOUT_CLASSIFICATION	6.4468972282173586E-6	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999068415513872	WITHOUT_CLASSIFICATION	9.315844861289034E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998014800409971	WITHOUT_CLASSIFICATION	1.9851995900302386E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9998014800409971	WITHOUT_CLASSIFICATION	1.9851995900302386E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998931652910805	WITHOUT_CLASSIFICATION	1.0683470891947744E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998931652910805	WITHOUT_CLASSIFICATION	1.0683470891947744E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999695974627265	WITHOUT_CLASSIFICATION	3.040253727347701E-5	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999967927251391	WITHOUT_CLASSIFICATION	3.2072748608885825E-6	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999828408775	WITHOUT_CLASSIFICATION	1.7159122434423513E-8	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998669943247658	WITHOUT_CLASSIFICATION	0.0013300567523419943	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999855366195437	WITHOUT_CLASSIFICATION	1.4463380456297846E-5	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.6760944494444853	DESIGN	0.3239055505555147	WITHOUT_CLASSIFICATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999995725823752	WITHOUT_CLASSIFICATION	4.2741762487363736E-7	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890244257372	WITHOUT_CLASSIFICATION	1.0975574262800541E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.6800143917577509	WITHOUT_CLASSIFICATION	0.3199856082422491	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9999788291450161	WITHOUT_CLASSIFICATION	2.1170854983934785E-5	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996794322065	WITHOUT_CLASSIFICATION	3.205677935613344E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999975007889655	WITHOUT_CLASSIFICATION	2.4992110343818612E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9999713582608224	WITHOUT_CLASSIFICATION	2.864173917758625E-5	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999988997853996	WITHOUT_CLASSIFICATION	1.1002146004155636E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.999999572385498	WITHOUT_CLASSIFICATION	4.276145020325767E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.999999572385498	WITHOUT_CLASSIFICATION	4.276145020325767E-7	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.999999572385498	WITHOUT_CLASSIFICATION	4.276145020325767E-7	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999268240973866	WITHOUT_CLASSIFICATION	7.317590261341874E-5	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999994402654311	WITHOUT_CLASSIFICATION	5.597345689537188E-7	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.999983271376016	WITHOUT_CLASSIFICATION	1.672862398396505E-5	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999781696790447	WITHOUT_CLASSIFICATION	2.1830320955260463E-5	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907817192014	WITHOUT_CLASSIFICATION	9.218280798505833E-6	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999855182479964	WITHOUT_CLASSIFICATION	1.4481752003651845E-5	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999999478819473	WITHOUT_CLASSIFICATION	5.211805257526859E-8	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999295998692054	WITHOUT_CLASSIFICATION	7.040013079469586E-5	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999985530567462	WITHOUT_CLASSIFICATION	1.4469432537414869E-6	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9990176755608161	WITHOUT_CLASSIFICATION	9.823244391839849E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999827622397271	WITHOUT_CLASSIFICATION	1.7237760272896283E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999135600356366	WITHOUT_CLASSIFICATION	8.643996436345559E-5	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996559536115	WITHOUT_CLASSIFICATION	3.4404638844527007E-7	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999291731975	WITHOUT_CLASSIFICATION	7.082680251203131E-8	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999709233900829	WITHOUT_CLASSIFICATION	2.907660991708683E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9751020186541312	WITHOUT_CLASSIFICATION	0.024897981345868767	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999914293647152	WITHOUT_CLASSIFICATION	8.57063528475901E-6	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9998203705876026	WITHOUT_CLASSIFICATION	1.7962941239747562E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9998771333915688	WITHOUT_CLASSIFICATION	1.2286660843124352E-4	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999536237721	WITHOUT_CLASSIFICATION	4.6376227935704784E-8	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999993072879743	WITHOUT_CLASSIFICATION	6.927120257126546E-7	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999933786465	WITHOUT_CLASSIFICATION	6.621353497958703E-9	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.99980682424394	WITHOUT_CLASSIFICATION	1.9317575606002182E-4	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999999192362381	WITHOUT_CLASSIFICATION	8.076376190236846E-8	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999875048240915	WITHOUT_CLASSIFICATION	1.2495175908494183E-5	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9999318803564939	WITHOUT_CLASSIFICATION	6.81196435060637E-5	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999817093949779	WITHOUT_CLASSIFICATION	1.8290605022075065E-5	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999725210286322	WITHOUT_CLASSIFICATION	2.7478971367784816E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999998283363	WITHOUT_CLASSIFICATION	1.7166370824608403E-10	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999993176526345	WITHOUT_CLASSIFICATION	6.823473655020749E-6	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999987630693827	WITHOUT_CLASSIFICATION	1.2369306172814984E-6	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999996114152693	WITHOUT_CLASSIFICATION	3.885847307283595E-7	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9998312126978617	WITHOUT_CLASSIFICATION	1.6878730213841994E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9999323880022052	WITHOUT_CLASSIFICATION	6.761199779481446E-5	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999996736046146	WITHOUT_CLASSIFICATION	3.263953853000102E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9988157280924903	WITHOUT_CLASSIFICATION	0.0011842719075097266	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.999998119445739	WITHOUT_CLASSIFICATION	1.8805542609934559E-6	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9999308567409271	WITHOUT_CLASSIFICATION	6.914325907292765E-5	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999996268713393	WITHOUT_CLASSIFICATION	3.7312866078035697E-7	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999583043218105	WITHOUT_CLASSIFICATION	4.169567818940344E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999626436358987	WITHOUT_CLASSIFICATION	3.7356364101339254E-5	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997829383415515	WITHOUT_CLASSIFICATION	2.17061658448556E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9074555992517831	DESIGN	0.09254440074821697	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999089221208154	WITHOUT_CLASSIFICATION	9.107787918462913E-5	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999948219949375	WITHOUT_CLASSIFICATION	5.178005062446779E-6	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998516103660798	WITHOUT_CLASSIFICATION	1.4838963392025967E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999991422261846	WITHOUT_CLASSIFICATION	8.577738153629256E-7	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999861937154215	WITHOUT_CLASSIFICATION	1.3806284578457104E-5	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9998247188902398	WITHOUT_CLASSIFICATION	1.752811097601321E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999964345877391	WITHOUT_CLASSIFICATION	3.565412260937335E-6	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999918017338096	WITHOUT_CLASSIFICATION	8.198266190344212E-6	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999888304863644	WITHOUT_CLASSIFICATION	1.1169513635534363E-5	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997048205433302	WITHOUT_CLASSIFICATION	2.951794566698137E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999991934634909	WITHOUT_CLASSIFICATION	8.065365090865057E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.999999957233497	WITHOUT_CLASSIFICATION	4.276650304704308E-8	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999886552022778	WITHOUT_CLASSIFICATION	1.1344797722354345E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9997656423046223	WITHOUT_CLASSIFICATION	2.3435769537774863E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999991755299567	WITHOUT_CLASSIFICATION	8.244700433755837E-7	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9999598705830001	WITHOUT_CLASSIFICATION	4.0129416999914764E-5	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9972349384397174	WITHOUT_CLASSIFICATION	0.0027650615602825184	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.999693368130577	WITHOUT_CLASSIFICATION	3.0663186942295255E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999988204899	WITHOUT_CLASSIFICATION	1.1795101015921301E-8	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999999558816387	WITHOUT_CLASSIFICATION	4.411836130482954E-8	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9998478114497212	WITHOUT_CLASSIFICATION	1.5218855027871673E-4	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999998325123489	WITHOUT_CLASSIFICATION	1.6748765110201732E-6	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9996752263867055	WITHOUT_CLASSIFICATION	3.2477361329456454E-4	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999925272718492	WITHOUT_CLASSIFICATION	7.472728150837323E-6	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999999704640451	WITHOUT_CLASSIFICATION	2.9535954898310402E-8	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999953810257074	WITHOUT_CLASSIFICATION	4.6189742925508125E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999953810257074	WITHOUT_CLASSIFICATION	4.6189742925508125E-6	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9999999069409246	WITHOUT_CLASSIFICATION	9.305907554651947E-8	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998427813254345	WITHOUT_CLASSIFICATION	1.572186745655554E-4	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9999540672280577	WITHOUT_CLASSIFICATION	4.593277194221296E-5	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9996234899018089	WITHOUT_CLASSIFICATION	3.765100981910974E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999994862729757	WITHOUT_CLASSIFICATION	5.137270242888825E-7	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9998916800264349	WITHOUT_CLASSIFICATION	1.0831997356502019E-4	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999966803224584	WITHOUT_CLASSIFICATION	3.319677541723164E-6	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999726697450141	WITHOUT_CLASSIFICATION	2.733025498600367E-5	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999473558565108	WITHOUT_CLASSIFICATION	5.264414348925342E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999829553376504	WITHOUT_CLASSIFICATION	1.704466234962489E-5	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998759888706	WITHOUT_CLASSIFICATION	1.24011129320908E-7	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999999374993048	WITHOUT_CLASSIFICATION	6.250069521672736E-8	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9999971596637053	WITHOUT_CLASSIFICATION	2.8403362947365056E-6	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999980235844326	WITHOUT_CLASSIFICATION	1.9764155674651283E-6	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9998459649043705	WITHOUT_CLASSIFICATION	1.5403509562961093E-4	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9801112819875558	WITHOUT_CLASSIFICATION	0.01988871801244415	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999940704129613	WITHOUT_CLASSIFICATION	5.929587038618993E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9974328837479237	WITHOUT_CLASSIFICATION	0.0025671162520762426	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.5533763943463359	WITHOUT_CLASSIFICATION	0.44662360565366416	DESIGN
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9999834714206238	WITHOUT_CLASSIFICATION	1.652857937614541E-5	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999972737093912	WITHOUT_CLASSIFICATION	2.7262906088722066E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999895444897061	WITHOUT_CLASSIFICATION	1.0455510294010471E-5	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9989123313629649	WITHOUT_CLASSIFICATION	0.0010876686370350883	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9980898573973855	WITHOUT_CLASSIFICATION	0.0019101426026143945	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999997400087	WITHOUT_CLASSIFICATION	2.5999120730049195E-10	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999530997375727	WITHOUT_CLASSIFICATION	4.6900262427302486E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999991469058129	WITHOUT_CLASSIFICATION	8.530941871521147E-7	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999669696515975	WITHOUT_CLASSIFICATION	3.3030348402611476E-5	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9999201625503693	WITHOUT_CLASSIFICATION	7.983744963068636E-5	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9984530798542881	WITHOUT_CLASSIFICATION	0.0015469201457118922	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999934798158182	WITHOUT_CLASSIFICATION	6.520184181753238E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999634897757946	WITHOUT_CLASSIFICATION	3.651022420526954E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999284252726583	WITHOUT_CLASSIFICATION	7.157472734168508E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999911730280056	WITHOUT_CLASSIFICATION	8.826971994422956E-6	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.996994975083594	WITHOUT_CLASSIFICATION	0.0030050249164060355	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.996994975083594	WITHOUT_CLASSIFICATION	0.0030050249164060355	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998302301484	WITHOUT_CLASSIFICATION	1.6976985151303757E-7	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999465294072525	WITHOUT_CLASSIFICATION	5.3470592747522765E-5	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9997888807009063	WITHOUT_CLASSIFICATION	2.1111929909360487E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999366462935477	WITHOUT_CLASSIFICATION	6.33537064521792E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.999987251380001	WITHOUT_CLASSIFICATION	1.2748619999060544E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999967279377	WITHOUT_CLASSIFICATION	3.2720622999107045E-6	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999993397367678	WITHOUT_CLASSIFICATION	6.602632321623938E-7	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9999948489634664	WITHOUT_CLASSIFICATION	5.151036533641746E-6	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9995017888461125	WITHOUT_CLASSIFICATION	4.982111538875162E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9991333690629846	WITHOUT_CLASSIFICATION	8.66630937015419E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993809908219	WITHOUT_CLASSIFICATION	6.190091781577321E-7	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999999598053575	WITHOUT_CLASSIFICATION	4.0194642500126185E-8	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999637747211843	WITHOUT_CLASSIFICATION	3.62252788157114E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999614909548519	WITHOUT_CLASSIFICATION	3.8509045148189285E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999881412828285	WITHOUT_CLASSIFICATION	1.1858717171580156E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999999732534746	WITHOUT_CLASSIFICATION	2.6746525458699988E-8	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994538820962531	WITHOUT_CLASSIFICATION	5.461179037468762E-4	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9994538820962531	WITHOUT_CLASSIFICATION	5.461179037468762E-4	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.999999609328231	WITHOUT_CLASSIFICATION	3.906717690945223E-7	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999979941420689	WITHOUT_CLASSIFICATION	2.005857931075031E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9972024185320205	WITHOUT_CLASSIFICATION	0.002797581467979528	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999681080913	WITHOUT_CLASSIFICATION	3.189190869249545E-7	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999644661604	WITHOUT_CLASSIFICATION	3.553383961195099E-8	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.999965177278167	WITHOUT_CLASSIFICATION	3.4822721832918856E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999823086477	WITHOUT_CLASSIFICATION	1.7691352259247492E-8	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9999997235808015	WITHOUT_CLASSIFICATION	2.764191985626151E-7	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999999448798	WITHOUT_CLASSIFICATION	5.5120186646505164E-11	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999912850166599	WITHOUT_CLASSIFICATION	8.714983340188E-6	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9999912850166599	WITHOUT_CLASSIFICATION	8.714983340188E-6	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999996808584094	WITHOUT_CLASSIFICATION	3.1914159064699403E-7	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9780436668276523	WITHOUT_CLASSIFICATION	0.021956333172347648	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999929307962275	WITHOUT_CLASSIFICATION	7.069203772365865E-6	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999999563867801	WITHOUT_CLASSIFICATION	4.361321980480985E-8	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999997009745409	WITHOUT_CLASSIFICATION	2.990254590912055E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9996270285970622	WITHOUT_CLASSIFICATION	3.7297140293772593E-4	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.898978524787745	WITHOUT_CLASSIFICATION	0.10102147521225502	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999937919177492	WITHOUT_CLASSIFICATION	6.208082250793761E-6	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999390290860692	WITHOUT_CLASSIFICATION	6.097091393081108E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999992762737758	WITHOUT_CLASSIFICATION	7.237262242219724E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999994831739356	WITHOUT_CLASSIFICATION	5.168260643203536E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997887080689136	WITHOUT_CLASSIFICATION	2.1129193108642813E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9995508393144168	WITHOUT_CLASSIFICATION	4.4916068558318976E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999941941562696	WITHOUT_CLASSIFICATION	5.805843730481839E-6	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998328535164062	WITHOUT_CLASSIFICATION	1.6714648359393875E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999467136294572	WITHOUT_CLASSIFICATION	5.328637054285621E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9974724348402811	WITHOUT_CLASSIFICATION	0.002527565159718872	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999967324271604	WITHOUT_CLASSIFICATION	3.2675728395617325E-6	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999898349943	WITHOUT_CLASSIFICATION	1.0165005777263967E-8	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999921407324788	WITHOUT_CLASSIFICATION	7.859267521270184E-6	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9997522608105431	WITHOUT_CLASSIFICATION	2.4773918945688477E-4	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999869439437463	WITHOUT_CLASSIFICATION	1.3056056253657226E-5	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999997533253293	WITHOUT_CLASSIFICATION	2.4667467068242985E-7	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999940349549044	WITHOUT_CLASSIFICATION	5.965045095605739E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999995440207838	WITHOUT_CLASSIFICATION	4.559792161300518E-7	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9999586808291298	WITHOUT_CLASSIFICATION	4.1319170870312544E-5	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9999850835935022	WITHOUT_CLASSIFICATION	1.4916406497758706E-5	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999174081197811	WITHOUT_CLASSIFICATION	8.259188021880746E-5	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.999986065589084	WITHOUT_CLASSIFICATION	1.3934410916010151E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9999108763247632	WITHOUT_CLASSIFICATION	8.912367523684871E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9999709334715049	WITHOUT_CLASSIFICATION	2.9066528495022687E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999999660607434	WITHOUT_CLASSIFICATION	3.3939256625175046E-8	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9964041490378731	WITHOUT_CLASSIFICATION	0.0035958509621270016	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.999939206010756	WITHOUT_CLASSIFICATION	6.079398924398452E-5	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.999960469353642	WITHOUT_CLASSIFICATION	3.953064635801971E-5	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999682348545	WITHOUT_CLASSIFICATION	3.1765145432261384E-8	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999978913515849	WITHOUT_CLASSIFICATION	2.1086484152123177E-6	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.999868777308758	WITHOUT_CLASSIFICATION	1.3122269124192203E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999801510067391	WITHOUT_CLASSIFICATION	1.984899326098643E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999801510067391	WITHOUT_CLASSIFICATION	1.984899326098643E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999717037053785	WITHOUT_CLASSIFICATION	2.8296294621595903E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999990038696668	WITHOUT_CLASSIFICATION	9.96130333263735E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998714841326	WITHOUT_CLASSIFICATION	1.2851586734521268E-7	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999736552960036	WITHOUT_CLASSIFICATION	2.6344703996399588E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999930394579903	WITHOUT_CLASSIFICATION	6.960542009616047E-6	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999990168743448	WITHOUT_CLASSIFICATION	9.831256552040928E-7	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999644431	WITHOUT_CLASSIFICATION	3.555686881117398E-11	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999994874781717	WITHOUT_CLASSIFICATION	5.125218283877915E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999717037053785	WITHOUT_CLASSIFICATION	2.8296294621595903E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999990038696668	WITHOUT_CLASSIFICATION	9.96130333263735E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999900167894911	WITHOUT_CLASSIFICATION	9.983210508873983E-6	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9986801868179157	WITHOUT_CLASSIFICATION	0.0013198131820843343	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9999832508872042	WITHOUT_CLASSIFICATION	1.674911279581451E-5	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999986437971924	WITHOUT_CLASSIFICATION	1.3562028076657162E-6	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999998187340243	WITHOUT_CLASSIFICATION	1.812659757094499E-7	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999059606043105	WITHOUT_CLASSIFICATION	9.403939568947303E-5	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999998938938	WITHOUT_CLASSIFICATION	1.0610622065367679E-10	DESIGN
}	WITHOUT_CLASSIFICATION	0.999953896800774	WITHOUT_CLASSIFICATION	4.6103199225904595E-5	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999988505896329	WITHOUT_CLASSIFICATION	1.149410367149939E-6	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.752759102245244	DESIGN	0.24724089775475605	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999958287734	WITHOUT_CLASSIFICATION	4.171226635124229E-9	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.752759102245244	DESIGN	0.24724089775475605	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999949844783	WITHOUT_CLASSIFICATION	5.015521665719258E-9	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999909974871917	WITHOUT_CLASSIFICATION	9.00251280833943E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999998917880718	WITHOUT_CLASSIFICATION	1.0821192826434917E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975604995635	WITHOUT_CLASSIFICATION	2.439500436444849E-6	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9999050755636127	WITHOUT_CLASSIFICATION	9.492443638727579E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999953896800774	WITHOUT_CLASSIFICATION	4.6103199225904595E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999953896800774	WITHOUT_CLASSIFICATION	4.6103199225904595E-5	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999965785111359	WITHOUT_CLASSIFICATION	3.4214888640528604E-6	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999892636024786	WITHOUT_CLASSIFICATION	1.0736397521462364E-5	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999979305809142	WITHOUT_CLASSIFICATION	2.0694190857103038E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999987634919805	WITHOUT_CLASSIFICATION	1.2365080194897001E-6	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999959671963174	WITHOUT_CLASSIFICATION	4.032803682618603E-6	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9998590962924078	WITHOUT_CLASSIFICATION	1.4090370759231984E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5902697079360485	DESIGN	0.40973029206395156	WITHOUT_CLASSIFICATION
strip leading ','	WITHOUT_CLASSIFICATION	0.9999994104992207	WITHOUT_CLASSIFICATION	5.895007792471661E-7	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999986252134047	WITHOUT_CLASSIFICATION	1.3747865953522098E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9997896816696976	WITHOUT_CLASSIFICATION	2.1031833030238535E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9999787362968217	WITHOUT_CLASSIFICATION	2.126370317828242E-5	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999904866064985	WITHOUT_CLASSIFICATION	9.513393501520541E-6	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999999345335684	WITHOUT_CLASSIFICATION	6.54664315762693E-8	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998866013705598	WITHOUT_CLASSIFICATION	1.1339862944017906E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999953468613935	WITHOUT_CLASSIFICATION	4.6531386064347355E-6	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999973307652307	WITHOUT_CLASSIFICATION	2.6692347692881297E-6	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999980127576088	WITHOUT_CLASSIFICATION	1.9872423911432082E-6	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999999107334882	WITHOUT_CLASSIFICATION	8.926651180732103E-7	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999698872792161	WITHOUT_CLASSIFICATION	3.0112720783893294E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999999009992315	WITHOUT_CLASSIFICATION	9.900076839380076E-8	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9999742940459481	WITHOUT_CLASSIFICATION	2.570595405188538E-5	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999807120408874	WITHOUT_CLASSIFICATION	1.928795911260173E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.999998925713224	WITHOUT_CLASSIFICATION	1.0742867759584328E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999629056639376	WITHOUT_CLASSIFICATION	3.709433606239327E-5	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999999630545588	WITHOUT_CLASSIFICATION	3.694544119271273E-7	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.999997897811024	WITHOUT_CLASSIFICATION	2.1021889760040727E-6	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.999896918933622	WITHOUT_CLASSIFICATION	1.0308106637802422E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9997465166008956	WITHOUT_CLASSIFICATION	2.534833991043559E-4	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9943610383992405	WITHOUT_CLASSIFICATION	0.005638961600759509	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9640055836659824	WITHOUT_CLASSIFICATION	0.03599441633401745	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9533555956058836	WITHOUT_CLASSIFICATION	0.04664440439411642	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.9062493396798531	DESIGN	0.0937506603201469	WITHOUT_CLASSIFICATION
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.991862548379787	WITHOUT_CLASSIFICATION	0.008137451620212935	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999994104992207	WITHOUT_CLASSIFICATION	5.895007792471661E-7	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9996659467398099	WITHOUT_CLASSIFICATION	3.340532601901798E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999260848188979	WITHOUT_CLASSIFICATION	7.391518110203255E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9299675853313694	WITHOUT_CLASSIFICATION	0.07003241466863062	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.999999978093419	WITHOUT_CLASSIFICATION	2.1906580924824897E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999998045698223	WITHOUT_CLASSIFICATION	1.9543017769316123E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999998284372684	WITHOUT_CLASSIFICATION	1.7156273157362248E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999987634919805	WITHOUT_CLASSIFICATION	1.2365080194897001E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999987634919805	WITHOUT_CLASSIFICATION	1.2365080194897001E-6	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999979969338275	WITHOUT_CLASSIFICATION	2.003066172458462E-6	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999996461750644	WITHOUT_CLASSIFICATION	3.5382493564366053E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9998391878214633	WITHOUT_CLASSIFICATION	1.6081217853681533E-4	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999998247800773	WITHOUT_CLASSIFICATION	1.7521992260003106E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999978578445395	WITHOUT_CLASSIFICATION	2.1421554604036042E-6	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9996598869291856	WITHOUT_CLASSIFICATION	3.4011307081428165E-4	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9564441083436354	WITHOUT_CLASSIFICATION	0.043555891656364636	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999994172350138	WITHOUT_CLASSIFICATION	5.827649861766826E-7	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.999999984524956	WITHOUT_CLASSIFICATION	1.5475044006049558E-8	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9997632935414936	WITHOUT_CLASSIFICATION	2.3670645850649942E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999991980569178	WITHOUT_CLASSIFICATION	8.019430821994462E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9999869829388777	WITHOUT_CLASSIFICATION	1.3017061122344864E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999980636379949	WITHOUT_CLASSIFICATION	1.9363620050240383E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999717037053785	WITHOUT_CLASSIFICATION	2.8296294621595903E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999991980569178	WITHOUT_CLASSIFICATION	8.019430821994462E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999863701577123	WITHOUT_CLASSIFICATION	1.362984228766214E-5	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9632542912749956	WITHOUT_CLASSIFICATION	0.03674570872500432	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999998496506927	WITHOUT_CLASSIFICATION	1.503493073944764E-7	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.9245126842295267	DESIGN	0.07548731577047323	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999980636379949	WITHOUT_CLASSIFICATION	1.9363620050240383E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999403224117307	WITHOUT_CLASSIFICATION	5.967758826933108E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998458362451	WITHOUT_CLASSIFICATION	1.54163754831483E-7	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997431320262	WITHOUT_CLASSIFICATION	2.568679737282484E-7	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9998339828195584	WITHOUT_CLASSIFICATION	1.6601718044157641E-4	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999981328150023	WITHOUT_CLASSIFICATION	1.8671849976407772E-6	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999943775262163	WITHOUT_CLASSIFICATION	5.6224737836863434E-6	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999975596324883	WITHOUT_CLASSIFICATION	2.4403675117819854E-6	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999548979998094	WITHOUT_CLASSIFICATION	4.5102000190530435E-5	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9998097343649607	WITHOUT_CLASSIFICATION	1.9026563503941838E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.99996972458719	WITHOUT_CLASSIFICATION	3.0275412809962816E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9423403766692711	WITHOUT_CLASSIFICATION	0.05765962333072891	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9998433010055429	WITHOUT_CLASSIFICATION	1.5669899445721274E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.999991980569178	WITHOUT_CLASSIFICATION	8.019430821994462E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999403224117307	WITHOUT_CLASSIFICATION	5.967758826933108E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999997431320262	WITHOUT_CLASSIFICATION	2.568679737282484E-7	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999980233683018	WITHOUT_CLASSIFICATION	1.976631698241921E-6	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9994346349360788	WITHOUT_CLASSIFICATION	5.65365063921351E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999335307998092	WITHOUT_CLASSIFICATION	6.646920019088456E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999980636379949	WITHOUT_CLASSIFICATION	1.9363620050240383E-6	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9999167437002552	WITHOUT_CLASSIFICATION	8.325629974483817E-5	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999998609882509	WITHOUT_CLASSIFICATION	1.3901174915350264E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999970586455259	WITHOUT_CLASSIFICATION	2.941354474221081E-6	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999857625727467	WITHOUT_CLASSIFICATION	1.423742725324313E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999548979998094	WITHOUT_CLASSIFICATION	4.5102000190530435E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999863701577123	WITHOUT_CLASSIFICATION	1.362984228766214E-5	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9999950824406763	WITHOUT_CLASSIFICATION	4.917559323732927E-6	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999999417985865	WITHOUT_CLASSIFICATION	5.820141338662946E-8	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999784504701108	WITHOUT_CLASSIFICATION	2.1549529889254934E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999697190477191	WITHOUT_CLASSIFICATION	3.0280952280817713E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998082316196916	WITHOUT_CLASSIFICATION	1.917683803085031E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.999995243957314	WITHOUT_CLASSIFICATION	4.75604268603442E-6	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999365113411107	WITHOUT_CLASSIFICATION	6.348865888930699E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999975604995635	WITHOUT_CLASSIFICATION	2.439500436444849E-6	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992313433100185	WITHOUT_CLASSIFICATION	7.686566899815512E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999999862485162	WITHOUT_CLASSIFICATION	1.3751483787753258E-7	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999930743752687	WITHOUT_CLASSIFICATION	6.92562473132399E-6	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999787711127	WITHOUT_CLASSIFICATION	2.1228887301774186E-8	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999998663099945	WITHOUT_CLASSIFICATION	1.3369000550399593E-7	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999985126740902	WITHOUT_CLASSIFICATION	1.4873259097277684E-6	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9999893934685965	WITHOUT_CLASSIFICATION	1.0606531403465543E-5	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999992240077173	WITHOUT_CLASSIFICATION	7.759922825997222E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999857625727467	WITHOUT_CLASSIFICATION	1.423742725324313E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9999800379438412	WITHOUT_CLASSIFICATION	1.9962056158792744E-5	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9999950384179531	WITHOUT_CLASSIFICATION	4.961582046873769E-6	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999985182110376	WITHOUT_CLASSIFICATION	1.4817889623460768E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999915459821906	WITHOUT_CLASSIFICATION	8.454017809454194E-6	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9997264610395085	WITHOUT_CLASSIFICATION	2.735389604915675E-4	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9989024023566876	WITHOUT_CLASSIFICATION	0.0010975976433123618	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999989825604123	WITHOUT_CLASSIFICATION	1.0174395877390844E-6	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9990867965763357	WITHOUT_CLASSIFICATION	9.132034236642553E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999924915341313	WITHOUT_CLASSIFICATION	7.508465868803053E-6	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9956454766496068	WITHOUT_CLASSIFICATION	0.004354523350393281	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.999999757374624	WITHOUT_CLASSIFICATION	2.426253760672637E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999995767594894	WITHOUT_CLASSIFICATION	4.2324051064935777E-7	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.988688638282943	WITHOUT_CLASSIFICATION	0.011311361717057135	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999664852407716	WITHOUT_CLASSIFICATION	3.351475922842331E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9997280347567488	WITHOUT_CLASSIFICATION	2.719652432512814E-4	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999999418398424	WITHOUT_CLASSIFICATION	5.8160157533208974E-8	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9694093861392664	WITHOUT_CLASSIFICATION	0.03059061386073362	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999976823114374	WITHOUT_CLASSIFICATION	2.317688562687532E-6	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9998233630011849	WITHOUT_CLASSIFICATION	1.7663699881516286E-4	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999574674019818	WITHOUT_CLASSIFICATION	4.2532598018207706E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9999887839776744	WITHOUT_CLASSIFICATION	1.1216022325616947E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999388496144374	WITHOUT_CLASSIFICATION	6.115038556259915E-5	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999998879840986	WITHOUT_CLASSIFICATION	1.1201590141083979E-7	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.999999980664153	WITHOUT_CLASSIFICATION	1.9335846982056142E-8	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.99999914786939	WITHOUT_CLASSIFICATION	8.52130609979476E-7	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6378958950395	DESIGN	0.3621041049605	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999729528144268	WITHOUT_CLASSIFICATION	2.7047185573184176E-5	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999993298981288	WITHOUT_CLASSIFICATION	6.701018712520179E-7	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999748662457848	WITHOUT_CLASSIFICATION	2.5133754215258943E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7472654094983822	DESIGN	0.2527345905016179	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9998786339147376	WITHOUT_CLASSIFICATION	1.2136608526238347E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9994274037077726	WITHOUT_CLASSIFICATION	5.725962922273377E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999915459644021	WITHOUT_CLASSIFICATION	8.454035597872644E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9945377447074046	WITHOUT_CLASSIFICATION	0.005462255292595328	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995983083285016	WITHOUT_CLASSIFICATION	4.0169167149830057E-4	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999998279636634	WITHOUT_CLASSIFICATION	1.7203633664578305E-7	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999351012537979	WITHOUT_CLASSIFICATION	6.489874620201806E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9659693726510241	WITHOUT_CLASSIFICATION	0.03403062734897589	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999998279636634	WITHOUT_CLASSIFICATION	1.7203633664578305E-7	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9995983083285016	WITHOUT_CLASSIFICATION	4.0169167149830057E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999351012537979	WITHOUT_CLASSIFICATION	6.489874620201806E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999874718021472	WITHOUT_CLASSIFICATION	1.2528197852847208E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999390927139934	WITHOUT_CLASSIFICATION	6.0907286006516455E-5	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999908308038	WITHOUT_CLASSIFICATION	9.16919616422471E-9	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9997722148870756	WITHOUT_CLASSIFICATION	2.2778511292438346E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999984530048794	WITHOUT_CLASSIFICATION	1.5469951205863103E-6	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9983220847275821	DESIGN	0.0016779152724179511	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.7636431922050693	WITHOUT_CLASSIFICATION	0.23635680779493076	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9996150987451828	WITHOUT_CLASSIFICATION	3.8490125481714275E-4	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9874420454112484	WITHOUT_CLASSIFICATION	0.012557954588751693	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999990710686458	WITHOUT_CLASSIFICATION	9.289313541515119E-7	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999965407857712	WITHOUT_CLASSIFICATION	3.459214228889734E-6	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998966212860707	WITHOUT_CLASSIFICATION	1.0337871392930352E-4	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9999862531587637	WITHOUT_CLASSIFICATION	1.3746841236320884E-5	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9997722148870756	WITHOUT_CLASSIFICATION	2.2778511292438346E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999997617791907	WITHOUT_CLASSIFICATION	2.382208092766517E-7	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999994908482134	WITHOUT_CLASSIFICATION	5.091517865527348E-7	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990604905786268	WITHOUT_CLASSIFICATION	9.395094213731804E-4	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9999581190999207	WITHOUT_CLASSIFICATION	4.188090007933853E-5	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999871109363798	WITHOUT_CLASSIFICATION	1.2889063620183526E-5	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999997055691507	WITHOUT_CLASSIFICATION	2.9443084923038595E-7	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.5102406174066157	DESIGN	0.48975938259338414	WITHOUT_CLASSIFICATION
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999999953267216	WITHOUT_CLASSIFICATION	4.673278397161469E-8	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999753405150761	WITHOUT_CLASSIFICATION	2.4659484923900865E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999996617576035	WITHOUT_CLASSIFICATION	3.3824239655531485E-7	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999991569918284	WITHOUT_CLASSIFICATION	8.430081714960289E-7	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999991569918284	WITHOUT_CLASSIFICATION	8.430081714960289E-7	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999951460996	WITHOUT_CLASSIFICATION	4.8539004902174044E-9	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999951460996	WITHOUT_CLASSIFICATION	4.8539004902174044E-9	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9964590631471011	WITHOUT_CLASSIFICATION	0.0035409368528989808	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9990604905786268	WITHOUT_CLASSIFICATION	9.395094213731804E-4	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999555856229019	WITHOUT_CLASSIFICATION	4.441437709814823E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999943592725706	WITHOUT_CLASSIFICATION	5.640727429359925E-6	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999297610522094	WITHOUT_CLASSIFICATION	7.023894779056382E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9999297610522094	WITHOUT_CLASSIFICATION	7.023894779056382E-5	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999998826725149	WITHOUT_CLASSIFICATION	1.1732748503353474E-7	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999973518946036	WITHOUT_CLASSIFICATION	2.6481053964643703E-6	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9991476769147113	WITHOUT_CLASSIFICATION	8.523230852886199E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999995513598104	WITHOUT_CLASSIFICATION	4.486401895328034E-7	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9633387679972428	WITHOUT_CLASSIFICATION	0.036661232002757185	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999996038866961	WITHOUT_CLASSIFICATION	3.961133038892742E-7	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9998415997655675	WITHOUT_CLASSIFICATION	1.58400234432464E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9770229338785109	WITHOUT_CLASSIFICATION	0.02297706612148903	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999056280500541	WITHOUT_CLASSIFICATION	9.437194994586589E-5	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999816718813661	WITHOUT_CLASSIFICATION	1.8328118633954363E-5	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999982671281443	WITHOUT_CLASSIFICATION	1.7328718557554956E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999868278391875	WITHOUT_CLASSIFICATION	1.3172160812648771E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999958131622054	WITHOUT_CLASSIFICATION	4.186837794599222E-6	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999926425499378	WITHOUT_CLASSIFICATION	7.357450062114426E-6	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9976591966775694	WITHOUT_CLASSIFICATION	0.0023408033224306003	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999906215919681	WITHOUT_CLASSIFICATION	9.378408031897036E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978124058412479	WITHOUT_CLASSIFICATION	0.002187594158752095	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.99999979817974	WITHOUT_CLASSIFICATION	2.0182025992223436E-7	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999025047045951	WITHOUT_CLASSIFICATION	9.749529540496751E-5	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999985741850475	WITHOUT_CLASSIFICATION	1.4258149525429917E-6	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.99999021369453	WITHOUT_CLASSIFICATION	9.78630547007203E-6	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999996736335605	WITHOUT_CLASSIFICATION	3.2636643949341186E-7	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999947207909153	WITHOUT_CLASSIFICATION	5.279209084590959E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999466019092056	WITHOUT_CLASSIFICATION	5.339809079444553E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9999432324930388	WITHOUT_CLASSIFICATION	5.676750696107447E-5	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999992144854108	WITHOUT_CLASSIFICATION	7.855145891757498E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999995767594894	WITHOUT_CLASSIFICATION	4.2324051064935777E-7	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999815029973	WITHOUT_CLASSIFICATION	1.849700276485951E-8	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999753980460612	WITHOUT_CLASSIFICATION	2.4601953938736065E-5	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999052536944448	WITHOUT_CLASSIFICATION	9.47463055550507E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935265236316	WITHOUT_CLASSIFICATION	6.473476368394332E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999973050981719	WITHOUT_CLASSIFICATION	2.694901828190081E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999973050981719	WITHOUT_CLASSIFICATION	2.694901828190081E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999996868878851	WITHOUT_CLASSIFICATION	3.1311211490308637E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999895669768997	WITHOUT_CLASSIFICATION	1.0433023100339234E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9998790352934194	WITHOUT_CLASSIFICATION	1.2096470658061303E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9998790352934194	WITHOUT_CLASSIFICATION	1.2096470658061303E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9999940224287519	WITHOUT_CLASSIFICATION	5.9775712482062915E-6	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9996951329721641	WITHOUT_CLASSIFICATION	3.0486702783597393E-4	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999982793080237	WITHOUT_CLASSIFICATION	1.7206919763611018E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964537575476	WITHOUT_CLASSIFICATION	3.546242452509114E-6	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9999630117388028	WITHOUT_CLASSIFICATION	3.698826119715781E-5	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999205698142822	WITHOUT_CLASSIFICATION	7.943018571774815E-5	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9958509860705601	WITHOUT_CLASSIFICATION	0.004149013929439833	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9997775094700527	WITHOUT_CLASSIFICATION	2.2249052994730714E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9962849988401581	WITHOUT_CLASSIFICATION	0.0037150011598418484	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9962849988401581	WITHOUT_CLASSIFICATION	0.0037150011598418484	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9946666939053488	WITHOUT_CLASSIFICATION	0.005333306094651164	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999192938821772	WITHOUT_CLASSIFICATION	8.070611782275751E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999192938821772	WITHOUT_CLASSIFICATION	8.070611782275751E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9969204090923395	WITHOUT_CLASSIFICATION	0.0030795909076604907	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9996426546318179	WITHOUT_CLASSIFICATION	3.573453681820176E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.996835344617244	WITHOUT_CLASSIFICATION	0.0031646553827559413	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.999999330640754	WITHOUT_CLASSIFICATION	6.693592459467106E-7	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999990307510914	WITHOUT_CLASSIFICATION	9.69248908613301E-7	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999994560281	WITHOUT_CLASSIFICATION	5.439717650128714E-10	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999987070022306	WITHOUT_CLASSIFICATION	1.2929977694064646E-6	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.99993855732014	WITHOUT_CLASSIFICATION	6.144267985999262E-5	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999985628357497	WITHOUT_CLASSIFICATION	1.437164250325885E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9997063517615281	WITHOUT_CLASSIFICATION	2.9364823847188496E-4	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999998506849109	WITHOUT_CLASSIFICATION	1.493150890426868E-7	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999913718714007	WITHOUT_CLASSIFICATION	8.628128599186644E-6	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999875894254706	WITHOUT_CLASSIFICATION	1.2410574529434793E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999875894254706	WITHOUT_CLASSIFICATION	1.2410574529434793E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999875894254706	WITHOUT_CLASSIFICATION	1.2410574529434793E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999875894254706	WITHOUT_CLASSIFICATION	1.2410574529434793E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999995490317427	WITHOUT_CLASSIFICATION	4.509682571695116E-7	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999858007018126	WITHOUT_CLASSIFICATION	1.419929818732596E-5	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999975818943234	WITHOUT_CLASSIFICATION	2.4181056766311416E-6	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9998845263781504	WITHOUT_CLASSIFICATION	1.1547362184961053E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999999431503251	WITHOUT_CLASSIFICATION	5.684967489965937E-7	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.997752251165243	WITHOUT_CLASSIFICATION	0.0022477488347570095	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9943618624388334	WITHOUT_CLASSIFICATION	0.005638137561166636	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999948800251156	WITHOUT_CLASSIFICATION	5.11997488440644E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999984313486814	WITHOUT_CLASSIFICATION	1.5686513186502877E-6	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.999999782372907	WITHOUT_CLASSIFICATION	2.1762709287726925E-7	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9991503508983702	WITHOUT_CLASSIFICATION	8.496491016297833E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988571459728	WITHOUT_CLASSIFICATION	1.1428540271528269E-6	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9999747901903046	WITHOUT_CLASSIFICATION	2.5209809695388647E-5	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999999786563004	WITHOUT_CLASSIFICATION	2.1343699572424683E-8	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999845025805697	WITHOUT_CLASSIFICATION	1.5497419430295353E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988571459728	WITHOUT_CLASSIFICATION	1.1428540271528269E-6	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999993828774527	WITHOUT_CLASSIFICATION	6.171225473287207E-7	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9998994613755119	WITHOUT_CLASSIFICATION	1.0053862448817441E-4	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999995453088097	WITHOUT_CLASSIFICATION	4.546911902414053E-7	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9994573685511239	WITHOUT_CLASSIFICATION	5.426314488760494E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9999757442539542	WITHOUT_CLASSIFICATION	2.425574604577591E-5	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9999882220634649	WITHOUT_CLASSIFICATION	1.177793653498006E-5	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9999970178354093	WITHOUT_CLASSIFICATION	2.9821645906878857E-6	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999997345379849	WITHOUT_CLASSIFICATION	2.6546201524601685E-7	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996031533859	WITHOUT_CLASSIFICATION	3.968466141814843E-7	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999969251628469	WITHOUT_CLASSIFICATION	3.074837153149569E-6	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998355472691	WITHOUT_CLASSIFICATION	1.6445273089898775E-7	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999799917511113	WITHOUT_CLASSIFICATION	2.0008248888749957E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9984667763144943	WITHOUT_CLASSIFICATION	0.0015332236855056251	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9814259841380341	WITHOUT_CLASSIFICATION	0.018574015861965876	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999785363969969	WITHOUT_CLASSIFICATION	2.1463603003134334E-5	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.6672045961288021	WITHOUT_CLASSIFICATION	0.3327954038711977	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999725906310489	WITHOUT_CLASSIFICATION	2.7409368950984647E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999932247156043	WITHOUT_CLASSIFICATION	6.7752843956900265E-6	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998809727565515	WITHOUT_CLASSIFICATION	1.1902724344852916E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9999932247156043	WITHOUT_CLASSIFICATION	6.7752843956900265E-6	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994446560014	WITHOUT_CLASSIFICATION	5.553439985300591E-7	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998430032507466	WITHOUT_CLASSIFICATION	1.5699674925353285E-4	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9994284936999933	WITHOUT_CLASSIFICATION	5.715063000066821E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9974982387944918	WITHOUT_CLASSIFICATION	0.002501761205508189	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.991399674253146	WITHOUT_CLASSIFICATION	0.008600325746854005	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9999104826856023	WITHOUT_CLASSIFICATION	8.951731439767928E-5	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999609087466185	WITHOUT_CLASSIFICATION	3.909125338157971E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999725906310489	WITHOUT_CLASSIFICATION	2.7409368950984647E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9998809727565515	WITHOUT_CLASSIFICATION	1.1902724344852916E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999994446560014	WITHOUT_CLASSIFICATION	5.553439985300591E-7	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9976164292423871	WITHOUT_CLASSIFICATION	0.002383570757612867	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9999917023324596	WITHOUT_CLASSIFICATION	8.297667540366849E-6	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999943713813874	WITHOUT_CLASSIFICATION	5.628618612706333E-6	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999991750083	WITHOUT_CLASSIFICATION	8.249916871984674E-10	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999994258468472	WITHOUT_CLASSIFICATION	5.741531527021009E-7	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9998602052315401	WITHOUT_CLASSIFICATION	1.39794768459929E-4	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999836731923	WITHOUT_CLASSIFICATION	1.632680769828825E-8	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978124058412479	WITHOUT_CLASSIFICATION	0.002187594158752095	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9998430032507466	WITHOUT_CLASSIFICATION	1.5699674925353285E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999897501911533	WITHOUT_CLASSIFICATION	1.0249808846813774E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999849291013466	WITHOUT_CLASSIFICATION	1.5070898653390241E-5	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999416211974112	WITHOUT_CLASSIFICATION	5.837880258880954E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999887481096199	WITHOUT_CLASSIFICATION	1.1251890380066759E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978124058412479	WITHOUT_CLASSIFICATION	0.002187594158752095	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.999985162052265	WITHOUT_CLASSIFICATION	1.4837947734986337E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978124058412479	WITHOUT_CLASSIFICATION	0.002187594158752095	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999977489919707	WITHOUT_CLASSIFICATION	2.251008029204881E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999994183080652	WITHOUT_CLASSIFICATION	5.816919347911118E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999505120516847	WITHOUT_CLASSIFICATION	4.9487948315402376E-5	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999994329404688	WITHOUT_CLASSIFICATION	5.670595311481017E-7	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999979950889167	WITHOUT_CLASSIFICATION	2.0049110831917875E-6	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999797623664515	WITHOUT_CLASSIFICATION	2.0237633548583342E-5	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998551469285325	WITHOUT_CLASSIFICATION	1.4485307146750898E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999893291705185	WITHOUT_CLASSIFICATION	1.0670829481434744E-5	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999995467449828	WITHOUT_CLASSIFICATION	4.532550171098338E-7	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999835052724274	WITHOUT_CLASSIFICATION	1.649472757254767E-5	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999953810257074	WITHOUT_CLASSIFICATION	4.6189742925508125E-6	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9999912990377663	WITHOUT_CLASSIFICATION	8.70096223383751E-6	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.996835344617244	WITHOUT_CLASSIFICATION	0.0031646553827559413	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999872904375924	WITHOUT_CLASSIFICATION	1.2709562407606688E-5	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9997487289763191	WITHOUT_CLASSIFICATION	2.512710236809266E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999804432947169	WITHOUT_CLASSIFICATION	1.9556705283041554E-5	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999931705085006	WITHOUT_CLASSIFICATION	6.829491499499347E-6	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9999612482800939	WITHOUT_CLASSIFICATION	3.875171990605573E-5	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9999144922041115	WITHOUT_CLASSIFICATION	8.5507795888405E-5	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9999904954701413	WITHOUT_CLASSIFICATION	9.504529858613622E-6	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9854673290136552	WITHOUT_CLASSIFICATION	0.014532670986344785	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999855081648	WITHOUT_CLASSIFICATION	1.4491835294941272E-8	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9999637404101225	WITHOUT_CLASSIFICATION	3.6259589877562546E-5	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.986444326293792	WITHOUT_CLASSIFICATION	0.01355567370620797	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999908458582	WITHOUT_CLASSIFICATION	9.154141727845218E-9	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999911547924	WITHOUT_CLASSIFICATION	8.845207573772714E-9	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999941960025936	WITHOUT_CLASSIFICATION	5.803997406421822E-6	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999946247404172	WITHOUT_CLASSIFICATION	5.375259582729898E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9999708285073217	WITHOUT_CLASSIFICATION	2.9171492678278578E-5	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999629133786	WITHOUT_CLASSIFICATION	3.7086621416987486E-8	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9993137614551857	WITHOUT_CLASSIFICATION	6.862385448143498E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999991487635506	WITHOUT_CLASSIFICATION	8.512364493894222E-7	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9939880557346207	WITHOUT_CLASSIFICATION	0.006011944265379327	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9998977608390434	WITHOUT_CLASSIFICATION	1.0223916095662435E-4	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9951931507284864	WITHOUT_CLASSIFICATION	0.004806849271513618	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999993728013707	WITHOUT_CLASSIFICATION	6.271986292400701E-7	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9997889417255293	WITHOUT_CLASSIFICATION	2.1105827447075306E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9998696419364242	WITHOUT_CLASSIFICATION	1.3035806357580563E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9999474064979195	WITHOUT_CLASSIFICATION	5.259350208049329E-5	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.990933452071931	WITHOUT_CLASSIFICATION	0.009066547928068974	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9913819654838932	WITHOUT_CLASSIFICATION	0.008618034516106687	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999236712159	WITHOUT_CLASSIFICATION	7.632878400037934E-8	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.785094018772158	WITHOUT_CLASSIFICATION	0.21490598122784188	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998825125179233	WITHOUT_CLASSIFICATION	1.1748748207672439E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998825125179233	WITHOUT_CLASSIFICATION	1.1748748207672439E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999999911655524	WITHOUT_CLASSIFICATION	8.834447539046737E-9	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999893291705185	WITHOUT_CLASSIFICATION	1.0670829481434744E-5	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9600123589502639	WITHOUT_CLASSIFICATION	0.03998764104973609	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999669071497	WITHOUT_CLASSIFICATION	3.309285033182124E-8	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999764763471	WITHOUT_CLASSIFICATION	2.3523652884212354E-8	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999960845091144	WITHOUT_CLASSIFICATION	3.9154908855916355E-6	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999887382814154	WITHOUT_CLASSIFICATION	1.1261718584574596E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999777909519301	WITHOUT_CLASSIFICATION	2.220904806992595E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999965806027	WITHOUT_CLASSIFICATION	3.4193973537294807E-9	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9999904692613657	WITHOUT_CLASSIFICATION	9.530738634322724E-6	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9969491885487852	WITHOUT_CLASSIFICATION	0.003050811451214843	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.999998731291922	WITHOUT_CLASSIFICATION	1.2687080780365267E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9158023687847665	WITHOUT_CLASSIFICATION	0.08419763121523342	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999997711652391	WITHOUT_CLASSIFICATION	2.2883476102513364E-7	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999796873895277	WITHOUT_CLASSIFICATION	2.031261047227691E-5	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999997235723	WITHOUT_CLASSIFICATION	2.764276456243694E-10	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999684188883	WITHOUT_CLASSIFICATION	3.158111168510957E-8	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999999332431359	WITHOUT_CLASSIFICATION	6.675686414421806E-8	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999963815735646	WITHOUT_CLASSIFICATION	3.618426435334273E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9652764191121274	WITHOUT_CLASSIFICATION	0.034723580887872606	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999913710265985	WITHOUT_CLASSIFICATION	8.628973401407509E-6	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994021776307186	WITHOUT_CLASSIFICATION	5.978223692813252E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999977516661422	WITHOUT_CLASSIFICATION	2.2483338577323058E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999872458909538	WITHOUT_CLASSIFICATION	1.27541090462172E-5	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9913819654838932	WITHOUT_CLASSIFICATION	0.008618034516106687	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999894051797328	WITHOUT_CLASSIFICATION	1.059482026722341E-5	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9999873260445794	WITHOUT_CLASSIFICATION	1.2673955420498613E-5	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998913147439	WITHOUT_CLASSIFICATION	1.0868525616947729E-7	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999997900424389	WITHOUT_CLASSIFICATION	2.099575610279814E-7	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9999197685762551	WITHOUT_CLASSIFICATION	8.023142374494298E-5	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999962598659878	WITHOUT_CLASSIFICATION	3.7401340121736224E-6	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999992031388713	WITHOUT_CLASSIFICATION	7.968611287896195E-7	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999893038017352	WITHOUT_CLASSIFICATION	1.0696198264847808E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999998022476249	WITHOUT_CLASSIFICATION	1.9775237521777756E-7	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999979734674	WITHOUT_CLASSIFICATION	2.026532557945561E-9	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9999217031667871	WITHOUT_CLASSIFICATION	7.829683321295243E-5	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999998381909678	WITHOUT_CLASSIFICATION	1.618090321539876E-7	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999998034532522	WITHOUT_CLASSIFICATION	1.965467477903079E-7	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9993044850200538	WITHOUT_CLASSIFICATION	6.95514979946154E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999989860051018	WITHOUT_CLASSIFICATION	1.0139948981010414E-6	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999268571275449	WITHOUT_CLASSIFICATION	7.314287245504239E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999268571275449	WITHOUT_CLASSIFICATION	7.314287245504239E-5	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999919383148962	WITHOUT_CLASSIFICATION	8.061685103747342E-6	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998180566784687	WITHOUT_CLASSIFICATION	1.81943321531319E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999673684293451	WITHOUT_CLASSIFICATION	3.263157065480836E-5	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999673684293451	WITHOUT_CLASSIFICATION	3.263157065480836E-5	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999907351491617	WITHOUT_CLASSIFICATION	9.26485083822409E-6	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999788107511032	WITHOUT_CLASSIFICATION	2.1189248896840726E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.706122929841287	DESIGN	0.29387707015871306	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999906115870985	WITHOUT_CLASSIFICATION	9.388412901532247E-6	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999260800438	WITHOUT_CLASSIFICATION	7.39199562073818E-7	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999416422204	WITHOUT_CLASSIFICATION	5.835777970769242E-8	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999987271723079	WITHOUT_CLASSIFICATION	1.2728276920910833E-6	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999987271723079	WITHOUT_CLASSIFICATION	1.2728276920910833E-6	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999998985468722	WITHOUT_CLASSIFICATION	1.0145312785418941E-7	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.998253510107145	WITHOUT_CLASSIFICATION	0.0017464898928550546	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999967032338369	WITHOUT_CLASSIFICATION	3.296766163101601E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999973436289412	WITHOUT_CLASSIFICATION	2.6563710588602076E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999973436289412	WITHOUT_CLASSIFICATION	2.6563710588602076E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999998253506859	WITHOUT_CLASSIFICATION	1.7464931423710426E-7	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999997607258032	WITHOUT_CLASSIFICATION	2.392741966890006E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9937427908226049	WITHOUT_CLASSIFICATION	0.0062572091773952085	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999982850956474	WITHOUT_CLASSIFICATION	1.7149043525697463E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9993317451404463	WITHOUT_CLASSIFICATION	6.682548595537525E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999794677341337	WITHOUT_CLASSIFICATION	2.053226586622211E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999460089417851	WITHOUT_CLASSIFICATION	5.3991058214778835E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999885879010119	WITHOUT_CLASSIFICATION	1.1412098988073066E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9995139096257	WITHOUT_CLASSIFICATION	4.860903742999249E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999935835255631	WITHOUT_CLASSIFICATION	6.416474436895745E-6	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999995214310434	WITHOUT_CLASSIFICATION	4.785689565355477E-7	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9990845445942333	WITHOUT_CLASSIFICATION	9.15455405766574E-4	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999896363658587	WITHOUT_CLASSIFICATION	1.0363634141270769E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9999495629576544	WITHOUT_CLASSIFICATION	5.043704234569168E-5	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9999182346459556	WITHOUT_CLASSIFICATION	8.17653540444142E-5	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999797723937	WITHOUT_CLASSIFICATION	2.022760629372634E-8	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999981854332545	WITHOUT_CLASSIFICATION	1.8145667455115934E-6	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999999973810814	WITHOUT_CLASSIFICATION	2.618918570249475E-9	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9996388985683522	WITHOUT_CLASSIFICATION	3.611014316477251E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9992808253814444	WITHOUT_CLASSIFICATION	7.191746185555867E-4	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9993908974204011	WITHOUT_CLASSIFICATION	6.091025795989442E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9993625453249952	WITHOUT_CLASSIFICATION	6.374546750047885E-4	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9993052556835841	WITHOUT_CLASSIFICATION	6.947443164159599E-4	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999997321386445	WITHOUT_CLASSIFICATION	2.678613554806317E-7	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9982149340022722	WITHOUT_CLASSIFICATION	0.001785065997727697	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999834546306118	WITHOUT_CLASSIFICATION	1.6545369388314494E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.999998266480778	WITHOUT_CLASSIFICATION	1.733519221890051E-6	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999993566839258	WITHOUT_CLASSIFICATION	6.433160742217672E-7	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999999933352185	WITHOUT_CLASSIFICATION	6.66478150412133E-8	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998997471464223	WITHOUT_CLASSIFICATION	1.0025285357770762E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9691788725214207	WITHOUT_CLASSIFICATION	0.030821127478579267	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999918215542545	WITHOUT_CLASSIFICATION	8.17844574555799E-6	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999963045810847	WITHOUT_CLASSIFICATION	3.6954189151770133E-6	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999720758578683	WITHOUT_CLASSIFICATION	2.7924142131659116E-5	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9999322136417957	WITHOUT_CLASSIFICATION	6.778635820431761E-5	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998698582048253	WITHOUT_CLASSIFICATION	1.3014179517469078E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9996931161535114	WITHOUT_CLASSIFICATION	3.0688384648862934E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9999999991522195	WITHOUT_CLASSIFICATION	8.477804615658025E-10	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999130758728135	WITHOUT_CLASSIFICATION	8.692412718650179E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999979580697774	WITHOUT_CLASSIFICATION	2.0419302226342032E-6	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999772639888356	WITHOUT_CLASSIFICATION	2.273601116446887E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999693371903118	WITHOUT_CLASSIFICATION	3.0662809688302725E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999777463011229	WITHOUT_CLASSIFICATION	2.225369887705153E-5	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999550370039818	WITHOUT_CLASSIFICATION	4.4962996018227436E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999976631855513	WITHOUT_CLASSIFICATION	2.3368144487167056E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999979102050736	WITHOUT_CLASSIFICATION	2.0897949264903075E-6	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999209382039952	WITHOUT_CLASSIFICATION	7.906179600477024E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9876721501578468	WITHOUT_CLASSIFICATION	0.012327849842153306	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999979137369331	WITHOUT_CLASSIFICATION	2.086263066812022E-6	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999847312109	WITHOUT_CLASSIFICATION	1.526878911339684E-8	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9988041285624314	WITHOUT_CLASSIFICATION	0.0011958714375685752	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999570912341642	WITHOUT_CLASSIFICATION	4.2908765835851715E-5	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999998730425242	WITHOUT_CLASSIFICATION	1.2695747578463613E-7	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999824312104	WITHOUT_CLASSIFICATION	1.7568789706025184E-8	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999820355257292	WITHOUT_CLASSIFICATION	1.796447427082379E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999608776304274	WITHOUT_CLASSIFICATION	3.912236957257854E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9998030947115271	WITHOUT_CLASSIFICATION	1.969052884728993E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999560468166464	WITHOUT_CLASSIFICATION	4.395318335351933E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999360382569266	WITHOUT_CLASSIFICATION	6.396174307342647E-5	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999543191513874	WITHOUT_CLASSIFICATION	4.5680848612645754E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999207363008	WITHOUT_CLASSIFICATION	7.92636991851728E-8	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999207363008	WITHOUT_CLASSIFICATION	7.92636991851728E-8	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999533666	WITHOUT_CLASSIFICATION	4.663334170871369E-11	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999911498840531	WITHOUT_CLASSIFICATION	8.85011594683031E-6	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999995640948167	WITHOUT_CLASSIFICATION	4.3590518335208914E-7	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9735534099792643	WITHOUT_CLASSIFICATION	0.026446590020735655	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999997109785571	WITHOUT_CLASSIFICATION	2.890214429048131E-7	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999995561736886	WITHOUT_CLASSIFICATION	4.438263114320401E-7	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999993219605399	WITHOUT_CLASSIFICATION	6.78039460141305E-7	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999992996804	WITHOUT_CLASSIFICATION	7.003196019977808E-9	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999972907185453	WITHOUT_CLASSIFICATION	2.7092814547517438E-6	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.999987547941605	WITHOUT_CLASSIFICATION	1.2452058394989475E-5	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.999926831341505	WITHOUT_CLASSIFICATION	7.316865849499219E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999186604956112	WITHOUT_CLASSIFICATION	8.13395043889349E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998479007841	WITHOUT_CLASSIFICATION	1.5209921592645476E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9994415664826363	WITHOUT_CLASSIFICATION	5.58433517363806E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999986618794118	WITHOUT_CLASSIFICATION	1.3381205881907119E-6	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999986618794118	WITHOUT_CLASSIFICATION	1.3381205881907119E-6	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999832332514819	WITHOUT_CLASSIFICATION	1.6766748518175276E-5	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999247870716935	WITHOUT_CLASSIFICATION	7.521292830654453E-5	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999974136361	WITHOUT_CLASSIFICATION	2.586363895894425E-9	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999715174126	WITHOUT_CLASSIFICATION	2.8482587425762377E-8	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999999150671758	WITHOUT_CLASSIFICATION	8.493282413838023E-8	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886088119831	WITHOUT_CLASSIFICATION	1.1391188016907488E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999969346452688	WITHOUT_CLASSIFICATION	3.065354731200185E-5	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999997161713119	WITHOUT_CLASSIFICATION	2.838286881307244E-7	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9462142933075525	WITHOUT_CLASSIFICATION	0.053785706692447484	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998193487241197	WITHOUT_CLASSIFICATION	1.80651275880318E-4	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999999997499442	WITHOUT_CLASSIFICATION	2.500556968968967E-10	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999988730794	WITHOUT_CLASSIFICATION	1.1269205848591155E-9	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999999284775761	WITHOUT_CLASSIFICATION	7.152242386967317E-8	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999998231519	WITHOUT_CLASSIFICATION	1.7684803969805676E-10	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999980322983996	WITHOUT_CLASSIFICATION	1.967701600327722E-6	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9982228393851302	DESIGN	0.001777160614869698	WITHOUT_CLASSIFICATION
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.999421223147412	WITHOUT_CLASSIFICATION	5.787768525880057E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9994690459725705	WITHOUT_CLASSIFICATION	5.309540274296367E-4	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999984298609172	WITHOUT_CLASSIFICATION	1.5701390827063182E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999978653689	WITHOUT_CLASSIFICATION	2.1346310931841062E-9	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999802215156202	WITHOUT_CLASSIFICATION	1.9778484379885386E-5	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999999337735	WITHOUT_CLASSIFICATION	6.622643898919004E-11	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998941871508213	WITHOUT_CLASSIFICATION	1.0581284917861467E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999966591971	WITHOUT_CLASSIFICATION	3.340802780017856E-9	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9998019298996672	WITHOUT_CLASSIFICATION	1.980701003328999E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999496581709411	WITHOUT_CLASSIFICATION	5.034182905894711E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.5706169210320425	WITHOUT_CLASSIFICATION	0.42938307896795747	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9992109898950661	WITHOUT_CLASSIFICATION	7.890101049340478E-4	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999994538095	WITHOUT_CLASSIFICATION	5.46190602527099E-10	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9989174565079365	WITHOUT_CLASSIFICATION	0.001082543492063524	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999625796225657	WITHOUT_CLASSIFICATION	3.742037743424331E-5	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9996867131422144	WITHOUT_CLASSIFICATION	3.13286857785621E-4	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9994637245761763	WITHOUT_CLASSIFICATION	5.36275423823813E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999899812159	WITHOUT_CLASSIFICATION	1.0018784099078616E-8	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999997136455882	WITHOUT_CLASSIFICATION	2.8635441184523484E-7	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999991126113846	WITHOUT_CLASSIFICATION	8.873886154557642E-7	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.8979851150177518	DESIGN	0.10201488498224816	WITHOUT_CLASSIFICATION
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9992496698677216	WITHOUT_CLASSIFICATION	7.503301322784447E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999955631641863	WITHOUT_CLASSIFICATION	4.436835813699545E-6	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999999555830371	WITHOUT_CLASSIFICATION	4.4416962866511715E-8	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9962312413271317	WITHOUT_CLASSIFICATION	0.0037687586728683622	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.7868835712869624	WITHOUT_CLASSIFICATION	0.2131164287130375	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9486066981997489	WITHOUT_CLASSIFICATION	0.05139330180025125	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9486066981997489	WITHOUT_CLASSIFICATION	0.05139330180025125	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999999780322846	WITHOUT_CLASSIFICATION	2.1967715418592033E-8	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999990937209251	WITHOUT_CLASSIFICATION	9.062790749883677E-7	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.6009505356087904	WITHOUT_CLASSIFICATION	0.39904946439120953	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9865463757768266	WITHOUT_CLASSIFICATION	0.013453624223173364	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999805115588155	WITHOUT_CLASSIFICATION	1.948844118440944E-5	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999821279219651	WITHOUT_CLASSIFICATION	1.787207803495092E-5	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999703287312298	WITHOUT_CLASSIFICATION	2.9671268770152216E-5	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999985962324216	WITHOUT_CLASSIFICATION	1.403767578315874E-6	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.7437131116816218	DESIGN	0.2562868883183781	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999700425911	WITHOUT_CLASSIFICATION	2.9957408899494225E-7	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993012005647	WITHOUT_CLASSIFICATION	6.98799435354118E-7	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9980708969206769	WITHOUT_CLASSIFICATION	0.0019291030793231535	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999997074234847	WITHOUT_CLASSIFICATION	2.9257651538303973E-7	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999888430413	WITHOUT_CLASSIFICATION	1.115695865280841E-8	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9999960220326578	WITHOUT_CLASSIFICATION	3.977967342222608E-6	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.999996804027785	WITHOUT_CLASSIFICATION	3.195972215079338E-6	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9979099643476476	WITHOUT_CLASSIFICATION	0.0020900356523524907	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999999870619474	WITHOUT_CLASSIFICATION	1.2938052587639726E-7	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999720325162	WITHOUT_CLASSIFICATION	2.7967483780823816E-8	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999974908453314	WITHOUT_CLASSIFICATION	2.5091546685981293E-6	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9992560605809503	WITHOUT_CLASSIFICATION	7.439394190497044E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.8961451021842188	WITHOUT_CLASSIFICATION	0.10385489781578118	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999961910727352	WITHOUT_CLASSIFICATION	3.80892726484445E-6	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9994176951875188	WITHOUT_CLASSIFICATION	5.823048124812843E-4	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999700334559601	WITHOUT_CLASSIFICATION	2.996654403988411E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9978614389177985	WITHOUT_CLASSIFICATION	0.0021385610822013835	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997221089466019	WITHOUT_CLASSIFICATION	2.778910533981058E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999975327742769	WITHOUT_CLASSIFICATION	2.4672257230989103E-6	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999962443653	WITHOUT_CLASSIFICATION	3.755634682753768E-9	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9999885573339047	WITHOUT_CLASSIFICATION	1.1442666095450718E-5	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9837862202260788	WITHOUT_CLASSIFICATION	0.016213779773921265	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9954889412062016	WITHOUT_CLASSIFICATION	0.004511058793798406	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999989125105277	WITHOUT_CLASSIFICATION	1.0874894721714286E-6	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9999033307371602	WITHOUT_CLASSIFICATION	9.666926283978747E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9999970087942799	WITHOUT_CLASSIFICATION	2.991205720168614E-6	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999986776833133	WITHOUT_CLASSIFICATION	1.3223166867615688E-6	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999811822907093	WITHOUT_CLASSIFICATION	1.881770929063731E-5	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999932582525237	WITHOUT_CLASSIFICATION	6.741747476169277E-6	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999962331817713	WITHOUT_CLASSIFICATION	3.7668182286008578E-6	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999993693016	WITHOUT_CLASSIFICATION	6.30698420688077E-10	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999593514702825	WITHOUT_CLASSIFICATION	4.064852971755729E-5	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.99999999067997	WITHOUT_CLASSIFICATION	9.320029948450221E-9	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999964495801272	WITHOUT_CLASSIFICATION	3.550419872863704E-6	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999941561412834	WITHOUT_CLASSIFICATION	5.8438587165364825E-6	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999933069307546	WITHOUT_CLASSIFICATION	6.693069245380637E-6	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999999772293	WITHOUT_CLASSIFICATION	2.277056678512597E-11	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9998813676342111	WITHOUT_CLASSIFICATION	1.1863236578888456E-4	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9979489397329904	WITHOUT_CLASSIFICATION	0.002051060267009538	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9996548545340619	WITHOUT_CLASSIFICATION	3.451454659380728E-4	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998479007841	WITHOUT_CLASSIFICATION	1.5209921592645476E-7	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999997649635	WITHOUT_CLASSIFICATION	2.350366257593767E-10	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.999999980871421	WITHOUT_CLASSIFICATION	1.9128579050684235E-8	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9085615998320143	WITHOUT_CLASSIFICATION	0.09143840016798575	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9857492054958248	WITHOUT_CLASSIFICATION	0.014250794504175221	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999999832339745	WITHOUT_CLASSIFICATION	1.6766025460469005E-8	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996474872086338	WITHOUT_CLASSIFICATION	3.525127913661476E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999998720404986	WITHOUT_CLASSIFICATION	1.2795950142826677E-7	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999412248293	WITHOUT_CLASSIFICATION	5.877517062490681E-8	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999996794322065	WITHOUT_CLASSIFICATION	3.205677935613344E-7	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999992670081677	WITHOUT_CLASSIFICATION	7.329918322948748E-6	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999935984663354	WITHOUT_CLASSIFICATION	6.401533664537517E-6	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.999999999969992	WITHOUT_CLASSIFICATION	3.0007988190014563E-11	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9998958824689991	WITHOUT_CLASSIFICATION	1.0411753100093236E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999996341288129	WITHOUT_CLASSIFICATION	3.658711871037605E-7	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999969927617817	WITHOUT_CLASSIFICATION	3.00723821831852E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984761163618	WITHOUT_CLASSIFICATION	1.5238836381989836E-6	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999999362630955	WITHOUT_CLASSIFICATION	6.37369045764487E-8	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999996083190025	WITHOUT_CLASSIFICATION	3.916809974837352E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999980695582826	WITHOUT_CLASSIFICATION	1.9304417173680475E-6	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9947124679490087	WITHOUT_CLASSIFICATION	0.005287532050991312	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999984761163618	WITHOUT_CLASSIFICATION	1.5238836381989836E-6	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999990547875275	WITHOUT_CLASSIFICATION	9.45212472371078E-7	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999728993257	WITHOUT_CLASSIFICATION	2.7100674193221706E-8	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999222634286633	WITHOUT_CLASSIFICATION	7.773657133667314E-5	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999982115211913	WITHOUT_CLASSIFICATION	1.7884788086347414E-6	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999966456472839	WITHOUT_CLASSIFICATION	3.354352716149531E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9971729795201426	WITHOUT_CLASSIFICATION	0.0028270204798574923	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999996113645566	WITHOUT_CLASSIFICATION	3.886354433988677E-7	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9414503614223131	WITHOUT_CLASSIFICATION	0.058549638577687024	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999894251879825	WITHOUT_CLASSIFICATION	1.0574812017382761E-5	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999876731115687	WITHOUT_CLASSIFICATION	1.2326888431270587E-5	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999964820550893	WITHOUT_CLASSIFICATION	3.517944910673088E-6	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9913408734877432	WITHOUT_CLASSIFICATION	0.008659126512256848	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9997623287264774	WITHOUT_CLASSIFICATION	2.3767127352262613E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999471881050003	WITHOUT_CLASSIFICATION	5.281189499988182E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999755130193845	WITHOUT_CLASSIFICATION	2.4486980615536915E-5	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999497073659664	WITHOUT_CLASSIFICATION	5.029263403345698E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999872458909538	WITHOUT_CLASSIFICATION	1.27541090462172E-5	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999998431709984	WITHOUT_CLASSIFICATION	1.5682900150980318E-7	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999995143838232	WITHOUT_CLASSIFICATION	4.85616176779097E-7	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9995336648817208	WITHOUT_CLASSIFICATION	4.6633511827922914E-4	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.981390716454463	WITHOUT_CLASSIFICATION	0.018609283545537054	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9997239803063399	WITHOUT_CLASSIFICATION	2.760196936600142E-4	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999997832614347	WITHOUT_CLASSIFICATION	2.1673856526590593E-7	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999998331885674	WITHOUT_CLASSIFICATION	1.6681143246463545E-7	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999994585139427	WITHOUT_CLASSIFICATION	5.414860572604385E-7	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999999588894	WITHOUT_CLASSIFICATION	4.111053409763024E-11	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999948427942	WITHOUT_CLASSIFICATION	5.15720577796948E-9	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999950303503019	WITHOUT_CLASSIFICATION	4.969649698037281E-6	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999914293647152	WITHOUT_CLASSIFICATION	8.57063528475901E-6	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9729770049838312	WITHOUT_CLASSIFICATION	0.027022995016168776	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9966306025282847	WITHOUT_CLASSIFICATION	0.0033693974717152572	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9999991300117804	WITHOUT_CLASSIFICATION	8.699882196082917E-7	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.948143382234181	WITHOUT_CLASSIFICATION	0.05185661776581893	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9816133727873692	WITHOUT_CLASSIFICATION	0.018386627212630912	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999895265140881	WITHOUT_CLASSIFICATION	1.0473485911819163E-5	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999958359703	WITHOUT_CLASSIFICATION	4.164029729489038E-9	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999541643082239	WITHOUT_CLASSIFICATION	4.583569177611907E-5	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999990457655692	WITHOUT_CLASSIFICATION	9.542344308260014E-7	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9986515511771189	WITHOUT_CLASSIFICATION	0.0013484488228809942	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999981891573929	WITHOUT_CLASSIFICATION	1.810842607058336E-6	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999997400087	WITHOUT_CLASSIFICATION	2.5999120730049195E-10	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999998700630196	WITHOUT_CLASSIFICATION	1.2993698040245223E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999998700630196	WITHOUT_CLASSIFICATION	1.2993698040245223E-7	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999967279377	WITHOUT_CLASSIFICATION	3.2720622999107045E-6	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999993809908219	WITHOUT_CLASSIFICATION	6.190091781577321E-7	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.999999681080913	WITHOUT_CLASSIFICATION	3.189190869249545E-7	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.6413878019929982	DESIGN	0.3586121980070018	WITHOUT_CLASSIFICATION
ignore	WITHOUT_CLASSIFICATION	0.9999964537575476	WITHOUT_CLASSIFICATION	3.546242452509114E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999964537575476	WITHOUT_CLASSIFICATION	3.546242452509114E-6	DESIGN
}	WITHOUT_CLASSIFICATION	0.999953896800774	WITHOUT_CLASSIFICATION	4.6103199225904595E-5	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999948030055931	WITHOUT_CLASSIFICATION	5.1969944070302155E-6	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999692105078	WITHOUT_CLASSIFICATION	3.078949217333116E-8	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999967324271604	WITHOUT_CLASSIFICATION	3.2675728395617325E-6	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999998551428666	WITHOUT_CLASSIFICATION	1.4485713339089357E-7	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999995440207838	WITHOUT_CLASSIFICATION	4.559792161300518E-7	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999999844612759	WITHOUT_CLASSIFICATION	1.5538724069021213E-8	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999992357731944	WITHOUT_CLASSIFICATION	7.642268055395825E-7	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999990473121787	WITHOUT_CLASSIFICATION	9.526878212962988E-7	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999973977557312	WITHOUT_CLASSIFICATION	2.6022442687041486E-6	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999762948492856	WITHOUT_CLASSIFICATION	2.3705150714367575E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983758518409	WITHOUT_CLASSIFICATION	1.624148159037733E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983758518409	WITHOUT_CLASSIFICATION	1.624148159037733E-6	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999999175016174	WITHOUT_CLASSIFICATION	8.249838252823964E-8	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999548979998094	WITHOUT_CLASSIFICATION	4.5102000190530435E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999943775262163	WITHOUT_CLASSIFICATION	5.6224737836863434E-6	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9992896628664485	WITHOUT_CLASSIFICATION	7.103371335515323E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9091424403785071	WITHOUT_CLASSIFICATION	0.09085755962149294	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992313433100185	WITHOUT_CLASSIFICATION	7.686566899815512E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999954086982948	WITHOUT_CLASSIFICATION	4.591301705202054E-5	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999956587442206	WITHOUT_CLASSIFICATION	4.341255779363928E-6	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9996006715565886	WITHOUT_CLASSIFICATION	3.993284434114445E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.8489122135911548	WITHOUT_CLASSIFICATION	0.15108778640884524	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.5662337212431214	WITHOUT_CLASSIFICATION	0.4337662787568785	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9999876731115687	WITHOUT_CLASSIFICATION	1.2326888431270587E-5	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9905581654866739	DESIGN	0.009441834513326133	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9999751091085662	WITHOUT_CLASSIFICATION	2.489089143370511E-5	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999999504912918	WITHOUT_CLASSIFICATION	4.9508708318792585E-8	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999936249061198	WITHOUT_CLASSIFICATION	6.375093880320699E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999974759358	WITHOUT_CLASSIFICATION	2.524064235596983E-9	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999942276087615	WITHOUT_CLASSIFICATION	5.772391238512404E-5	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9973561305195255	WITHOUT_CLASSIFICATION	0.0026438694804745253	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9999944384224279	WITHOUT_CLASSIFICATION	5.561577572154577E-6	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999998499971386	WITHOUT_CLASSIFICATION	1.5000286138756966E-7	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9994263379570401	WITHOUT_CLASSIFICATION	5.736620429598735E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9994263379570401	WITHOUT_CLASSIFICATION	5.736620429598735E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999988571459728	WITHOUT_CLASSIFICATION	1.1428540271528269E-6	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999999833641045	WITHOUT_CLASSIFICATION	1.6635895498824857E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9999348643774109	WITHOUT_CLASSIFICATION	6.513562258909755E-5	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999947523403058	WITHOUT_CLASSIFICATION	5.2476596941446125E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999982782679079	WITHOUT_CLASSIFICATION	1.7217320921522738E-6	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999708857787387	WITHOUT_CLASSIFICATION	2.9114221261296316E-5	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999785363969969	WITHOUT_CLASSIFICATION	2.1463603003134334E-5	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999981764136873	WITHOUT_CLASSIFICATION	1.8235863127517488E-6	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9976164292423871	WITHOUT_CLASSIFICATION	0.002383570757612867	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999794783123027	WITHOUT_CLASSIFICATION	2.0521687697250503E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9978124058412479	WITHOUT_CLASSIFICATION	0.002187594158752095	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.5733212628897881	DESIGN	0.42667873711021187	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.8265957310796844	WITHOUT_CLASSIFICATION	0.1734042689203156	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999800832451	WITHOUT_CLASSIFICATION	1.9916754909337964E-8	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.9980588510068731	WITHOUT_CLASSIFICATION	0.00194114899312701	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999376839145069	WITHOUT_CLASSIFICATION	6.231608549312761E-5	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.9221964845119166	WITHOUT_CLASSIFICATION	0.0778035154880834	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999987016458761	WITHOUT_CLASSIFICATION	1.298354123974738E-6	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999503120946001	WITHOUT_CLASSIFICATION	4.96879053998522E-5	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9999145465962749	WITHOUT_CLASSIFICATION	8.545340372514587E-5	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999934907404717	WITHOUT_CLASSIFICATION	6.509259528277083E-6	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9998972322934981	WITHOUT_CLASSIFICATION	1.0276770650194283E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9937427908226049	WITHOUT_CLASSIFICATION	0.0062572091773952085	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999987229022078	WITHOUT_CLASSIFICATION	1.2770977921774126E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879172098022	WITHOUT_CLASSIFICATION	1.2082790197715762E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999879172098022	WITHOUT_CLASSIFICATION	1.2082790197715762E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9991326393371139	WITHOUT_CLASSIFICATION	8.67360662885993E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9071842202902969	WITHOUT_CLASSIFICATION	0.09281577970970317	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9970129947932131	WITHOUT_CLASSIFICATION	0.002987005206786936	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.8608229045713921	WITHOUT_CLASSIFICATION	0.1391770954286079	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999634967909361	WITHOUT_CLASSIFICATION	3.650320906380733E-5	DESIGN
todo : what else to do here?	DESIGN	0.9882527073055138	WITHOUT_CLASSIFICATION	0.011747292694486117	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9872011693104601	WITHOUT_CLASSIFICATION	0.012798830689539863	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9443677088689264	DESIGN	0.05563229113107368	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9661176261019866	DESIGN	0.0338823738980134	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9661176261019866	DESIGN	0.0338823738980134	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9987633340858824	WITHOUT_CLASSIFICATION	0.0012366659141176035	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9998447559605597	WITHOUT_CLASSIFICATION	1.5524403944026176E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.8397684530922943	DESIGN	0.1602315469077057	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.992386524077212	DESIGN	0.007613475922788001	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.992386524077212	DESIGN	0.007613475922788001	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999987049728	DESIGN	1.2950272931993216E-9	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999987049728	DESIGN	1.2950272931993216E-9	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9993286219121417	DESIGN	6.713780878582591E-4	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9490283295046532	DESIGN	0.050971670495346816	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9490283295046532	DESIGN	0.050971670495346816	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999881603078994	DESIGN	1.1839692100620847E-5	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9998447559605597	WITHOUT_CLASSIFICATION	1.5524403944026176E-4	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.8397684530922943	DESIGN	0.1602315469077057	WITHOUT_CLASSIFICATION
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9999969219822525	WITHOUT_CLASSIFICATION	3.078017747479852E-6	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999955021708709	WITHOUT_CLASSIFICATION	4.497829129194041E-6	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9815435314942734	DESIGN	0.018456468505726603	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9919924468820973	DESIGN	0.00800755311790274	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.661042760790952	WITHOUT_CLASSIFICATION	0.338957239209048	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9977006990288858	WITHOUT_CLASSIFICATION	0.0022993009711142196	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.9165464671028799	DESIGN	0.08345353289712003	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9882527073055138	WITHOUT_CLASSIFICATION	0.011747292694486117	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9993866962066396	WITHOUT_CLASSIFICATION	6.133037933604637E-4	DESIGN
todo : what else to do here?	DESIGN	0.9882527073055138	WITHOUT_CLASSIFICATION	0.011747292694486117	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.8238302443635945	WITHOUT_CLASSIFICATION	0.17616975563640552	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.7893787578751624	WITHOUT_CLASSIFICATION	0.21062124212483754	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9999985455217437	DESIGN	1.4544782562683243E-6	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9872011693104601	WITHOUT_CLASSIFICATION	0.012798830689539863	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9949551659506934	DESIGN	0.005044834049306494	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9999352676980261	WITHOUT_CLASSIFICATION	6.473230197390654E-5	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.5285715461743378	WITHOUT_CLASSIFICATION	0.4714284538256623	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.6330227886145811	WITHOUT_CLASSIFICATION	0.36697721138541883	DESIGN
todo : what is the implication of this?	DESIGN	0.660615218126098	DESIGN	0.339384781873902	WITHOUT_CLASSIFICATION
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9995694832813107	WITHOUT_CLASSIFICATION	4.3051671868931274E-4	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9999991566135532	DESIGN	8.433864467413749E-7	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9999597635084725	DESIGN	4.023649152754106E-5	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9958105615345021	WITHOUT_CLASSIFICATION	0.004189438465497903	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.8512886835207968	WITHOUT_CLASSIFICATION	0.14871131647920321	DESIGN
todo : again, how should this work for non-pojo entities?	DESIGN	0.7080592142374124	DESIGN	0.29194078576258753	WITHOUT_CLASSIFICATION
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9768783370216201	DESIGN	0.02312166297837996	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.994973638939741	DESIGN	0.005026361060258903	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9999693107292	DESIGN	3.068927079993033E-5	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.999528167944338	DESIGN	4.7183205566207455E-4	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999998612328349	DESIGN	1.387671651743401E-7	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.7960827066396033	WITHOUT_CLASSIFICATION	0.20391729336039666	DESIGN
FIXME: get the PersistentClass	DESIGN	0.7960827066396033	WITHOUT_CLASSIFICATION	0.20391729336039666	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.9976401343101036	DESIGN	0.00235986568989641	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.922387062766724	WITHOUT_CLASSIFICATION	0.07761293723327597	DESIGN
TODO possibly relax that	DESIGN	0.5853898808482934	DESIGN	0.41461011915170654	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.5853898808482934	DESIGN	0.41461011915170654	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.5853898808482934	DESIGN	0.41461011915170654	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.999528167944338	DESIGN	4.7183205566207455E-4	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9995540422751866	WITHOUT_CLASSIFICATION	4.4595772481339233E-4	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.981924831988182	WITHOUT_CLASSIFICATION	0.018075168011818025	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9412631896244412	DESIGN	0.05873681037555883	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.999817737207412	WITHOUT_CLASSIFICATION	1.8226279258799172E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8933282209522309	WITHOUT_CLASSIFICATION	0.10667177904776909	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.8439455468220741	WITHOUT_CLASSIFICATION	0.15605445317792588	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9661176261019866	DESIGN	0.0338823738980134	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9661176261019866	DESIGN	0.0338823738980134	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9774064991687265	WITHOUT_CLASSIFICATION	0.022593500831273598	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9661176261019866	DESIGN	0.0338823738980134	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999991891072159	DESIGN	8.108927840794941E-7	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9951359471895767	WITHOUT_CLASSIFICATION	0.004864052810423356	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.8834152418349972	WITHOUT_CLASSIFICATION	0.1165847581650028	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999886150708632	WITHOUT_CLASSIFICATION	1.138492913673691E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9952524315087173	WITHOUT_CLASSIFICATION	0.004747568491282709	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9999650062942368	WITHOUT_CLASSIFICATION	3.499370576324153E-5	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9989173379058355	WITHOUT_CLASSIFICATION	0.0010826620941644899	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999978512361246	WITHOUT_CLASSIFICATION	2.148763875469644E-6	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9967338870408243	WITHOUT_CLASSIFICATION	0.003266112959175782	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.999958317182311	WITHOUT_CLASSIFICATION	4.168281768889197E-5	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9965107397034131	WITHOUT_CLASSIFICATION	0.0034892602965869712	DESIGN
Does this dialect support check constraints?	DESIGN	0.9993435403625399	WITHOUT_CLASSIFICATION	6.564596374601569E-4	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9970165174489705	WITHOUT_CLASSIFICATION	0.0029834825510295514	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9901407127391194	WITHOUT_CLASSIFICATION	0.009859287260880565	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9972703274588264	WITHOUT_CLASSIFICATION	0.0027296725411737333	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9931250997950674	DESIGN	0.006874900204932667	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9998354114364368	WITHOUT_CLASSIFICATION	1.6458856356316748E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9209867674828539	WITHOUT_CLASSIFICATION	0.07901323251714606	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9865657088247618	DESIGN	0.013434291175238105	WITHOUT_CLASSIFICATION
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9928469971458492	DESIGN	0.007153002854150824	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.9990381478608269	DESIGN	9.618521391731975E-4	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9778414410817686	WITHOUT_CLASSIFICATION	0.022158558918231333	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9871776232839882	WITHOUT_CLASSIFICATION	0.012822376716011939	DESIGN
I suppose?	DESIGN	0.9946414446301368	WITHOUT_CLASSIFICATION	0.005358555369863222	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9999551496901399	DESIGN	4.4850309860077456E-5	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.727541455431313	WITHOUT_CLASSIFICATION	0.272458544568687	DESIGN
TODO:refactor + make this method private	DESIGN	0.9337022927106661	DESIGN	0.06629770728933398	WITHOUT_CLASSIFICATION
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9986448536668023	WITHOUT_CLASSIFICATION	0.0013551463331977248	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999454421277163	DESIGN	5.455787228369857E-5	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.9972511446812135	DESIGN	0.002748855318786549	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.9779308772320988	WITHOUT_CLASSIFICATION	0.02206912276790111	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9996098335326136	DESIGN	3.9016646738643273E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9996098335326136	DESIGN	3.9016646738643273E-4	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9963767352226073	DESIGN	0.003623264777392726	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.5766286965297072	DESIGN	0.4233713034702928	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.5766286965297072	DESIGN	0.4233713034702928	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9995139919346958	DESIGN	4.860080653042212E-4	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9831342241384047	WITHOUT_CLASSIFICATION	0.016865775861595336	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.9971376930167506	DESIGN	0.0028623069832492986	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.985859160605458	DESIGN	0.014140839394542025	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.999345206006569	WITHOUT_CLASSIFICATION	6.547939934311505E-4	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9997165016926701	DESIGN	2.8349830732983864E-4	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.7647547805542335	DESIGN	0.23524521944576657	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9866029679553199	DESIGN	0.013397032044680238	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9961051948876104	DESIGN	0.0038948051123895155	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9975172078803202	DESIGN	0.0024827921196797663	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.5971148905109189	WITHOUT_CLASSIFICATION	0.40288510948908124	DESIGN
TODO: suck into event class	DESIGN	0.9999718395904291	DESIGN	2.816040957080518E-5	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.8981079570412656	DESIGN	0.1018920429587344	WITHOUT_CLASSIFICATION
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999988469068885	DESIGN	1.1530931114808141E-6	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9999470661993745	DESIGN	5.293380062547573E-5	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.9989410289609644	DESIGN	0.0010589710390356496	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9998361290584488	WITHOUT_CLASSIFICATION	1.638709415512034E-4	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.554499202095828	WITHOUT_CLASSIFICATION	0.44550079790417185	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9999767861341765	DESIGN	2.3213865823560098E-5	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9374999246785243	WITHOUT_CLASSIFICATION	0.0625000753214758	DESIGN
TODO: is this 100% correct?	DESIGN	0.9986741133614498	DESIGN	0.0013258866385501644	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9881756463519181	DESIGN	0.011824353648081855	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9997917179641278	DESIGN	2.082820358723247E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.99983581982946	DESIGN	1.641801705399497E-4	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9999999679498841	DESIGN	3.205011594850301E-8	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9438891025509626	DESIGN	0.05611089744903745	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.9682527849947337	WITHOUT_CLASSIFICATION	0.031747215005266415	DESIGN
TODO: merge into one method!	DESIGN	0.9932807968355604	DESIGN	0.006719203164439628	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9973842704602428	DESIGN	0.0026157295397572383	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9999967929516254	DESIGN	3.2070483745844793E-6	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999571600695433	DESIGN	4.283993045675216E-5	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.8751549463730601	WITHOUT_CLASSIFICATION	0.12484505362693989	DESIGN
TODO : better way?!?	DESIGN	0.9999998327543359	DESIGN	1.6724566415900615E-7	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999997595824096	WITHOUT_CLASSIFICATION	2.4041759038917074E-7	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.994025097709158	DESIGN	0.005974902290841849	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999778171647	DESIGN	2.218283543487688E-8	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999998829737	DESIGN	1.1702630390040083E-10	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9989125775593588	DESIGN	0.001087422440641231	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999402673292669	DESIGN	5.973267073306639E-5	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.9999893400750564	WITHOUT_CLASSIFICATION	1.065992494362933E-5	DESIGN
yuck!	DESIGN	0.9774064991687265	WITHOUT_CLASSIFICATION	0.022593500831273598	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9776646995328387	WITHOUT_CLASSIFICATION	0.022335300467161284	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9997565032000434	DESIGN	2.4349679995668735E-4	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9995197417257845	WITHOUT_CLASSIFICATION	4.802582742155369E-4	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999626110793	DESIGN	3.7388920704124916E-8	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999270289183495	DESIGN	7.297108165052516E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9999684572751263	DESIGN	3.154272487380086E-5	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9661176261019866	DESIGN	0.0338823738980134	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9774064991687265	WITHOUT_CLASSIFICATION	0.022593500831273598	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9061282165900781	WITHOUT_CLASSIFICATION	0.0938717834099218	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9996906168961125	DESIGN	3.093831038874895E-4	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9486350339863383	WITHOUT_CLASSIFICATION	0.051364966013661695	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.8737441364740041	DESIGN	0.126255863525996	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9999996447568072	DESIGN	3.552431926440168E-7	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8056809542497791	DESIGN	0.19431904575022085	WITHOUT_CLASSIFICATION
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999695774586892	DESIGN	3.0422541310691673E-5	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9490421692600958	DESIGN	0.05095783073990425	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9998928024579736	DESIGN	1.0719754202631725E-4	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.9913577280661495	DESIGN	0.008642271933850388	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9999937271618841	WITHOUT_CLASSIFICATION	6.272838116010288E-6	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9691526605761825	DESIGN	0.03084733942381746	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.999998808234387	DESIGN	1.1917656129595612E-6	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9636663745471908	WITHOUT_CLASSIFICATION	0.03633362545280922	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9287749072120999	WITHOUT_CLASSIFICATION	0.07122509278790012	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9955532333734204	DESIGN	0.004446766626579567	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.8610431797375844	WITHOUT_CLASSIFICATION	0.1389568202624156	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9999949933530815	DESIGN	5.0066469185013366E-6	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999892511040233	DESIGN	1.074889597680136E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9999999943138381	DESIGN	5.686161890356966E-9	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8818499910648591	WITHOUT_CLASSIFICATION	0.11815000893514085	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9972962993836242	DESIGN	0.0027037006163757446	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9696462508780204	DESIGN	0.030353749121979665	WITHOUT_CLASSIFICATION
TODO: what type?	DESIGN	0.9799387752823293	DESIGN	0.020061224717670766	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9981074752295753	WITHOUT_CLASSIFICATION	0.0018925247704247392	DESIGN
short-circuit for performance...	DESIGN	0.9998465745927485	WITHOUT_CLASSIFICATION	1.5342540725151718E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9954393356670223	WITHOUT_CLASSIFICATION	0.004560664332977771	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9593819926368089	DESIGN	0.040618007363191204	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.7917618391766496	WITHOUT_CLASSIFICATION	0.20823816082335045	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999999999995921	DESIGN	4.0799117734903247E-13	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9992332443722386	DESIGN	7.667556277613987E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9999266529658661	DESIGN	7.33470341338774E-5	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999567255117374	DESIGN	4.327448826252414E-5	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9585317186976063	DESIGN	0.04146828130239364	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999213343028774	DESIGN	7.866569712262344E-5	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.8138741442540088	WITHOUT_CLASSIFICATION	0.18612585574599122	DESIGN
use of trim() here is ugly?	DESIGN	0.7921129596091389	WITHOUT_CLASSIFICATION	0.20788704039086117	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9999905439736383	DESIGN	9.456026361601804E-6	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.9293171609162426	WITHOUT_CLASSIFICATION	0.0706828390837574	DESIGN
TODO: inefficient	DESIGN	0.9916982962837103	DESIGN	0.008301703716289653	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.7790185240503207	DESIGN	0.22098147594967926	WITHOUT_CLASSIFICATION
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999995105009167	DESIGN	4.894990832640211E-7	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999999943751401	DESIGN	5.624859907755014E-9	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999963174047508	DESIGN	3.6825952490411367E-6	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.999710834779239	DESIGN	2.8916522076094964E-4	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9999167974894055	WITHOUT_CLASSIFICATION	8.320251059446219E-5	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.996801332461551	DESIGN	0.0031986675384490476	WITHOUT_CLASSIFICATION
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9997981055005448	DESIGN	2.018944994551388E-4	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9565913456697002	DESIGN	0.043408654330299855	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9986528705332686	DESIGN	0.0013471294667314168	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999999983313	DESIGN	1.6686406482666018E-12	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.5791640410276679	DESIGN	0.4208359589723321	WITHOUT_CLASSIFICATION
TODO should we just collect these like with the collections above?	DESIGN	0.9999889422154175	DESIGN	1.1057784582533463E-5	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9680544860601986	DESIGN	0.031945513939801364	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.90614499500642	WITHOUT_CLASSIFICATION	0.09385500499358003	DESIGN
create an index on the key columns??	DESIGN	0.9999929520979532	WITHOUT_CLASSIFICATION	7.047902046785606E-6	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.9943447008831319	DESIGN	0.005655299116868071	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999929520979532	WITHOUT_CLASSIFICATION	7.047902046785606E-6	DESIGN
TODO: improve this hack!	DESIGN	0.9999999201603369	DESIGN	7.983966302688514E-8	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9999676693951908	WITHOUT_CLASSIFICATION	3.233060480917944E-5	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9973127714417838	DESIGN	0.0026872285582162383	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9999410293510635	WITHOUT_CLASSIFICATION	5.8970648936341904E-5	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8993974591065422	WITHOUT_CLASSIFICATION	0.10060254089345781	DESIGN
create an index on the key columns??	DESIGN	0.9999929520979532	WITHOUT_CLASSIFICATION	7.047902046785606E-6	DESIGN
todo : remove	DESIGN	0.9703858469568225	WITHOUT_CLASSIFICATION	0.029614153043177504	DESIGN
todo : remove	DESIGN	0.9703858469568225	WITHOUT_CLASSIFICATION	0.029614153043177504	DESIGN
todo : remove	DESIGN	0.9703858469568225	WITHOUT_CLASSIFICATION	0.029614153043177504	DESIGN
todo : throw exception?	DESIGN	0.6339619402448883	WITHOUT_CLASSIFICATION	0.36603805975511156	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9566158496733249	DESIGN	0.04338415032667501	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9999768867790537	DESIGN	2.3113220946319363E-5	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9999921028735778	DESIGN	7.897126422294455E-6	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.6819311349137558	DESIGN	0.31806886508624416	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999999721421687	DESIGN	2.7857831193322442E-8	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.8407314643655072	WITHOUT_CLASSIFICATION	0.15926853563449292	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.6349843402817587	WITHOUT_CLASSIFICATION	0.3650156597182413	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.9777163657840287	DESIGN	0.022283634215971362	WITHOUT_CLASSIFICATION
ie. the subquery! yuck!	DESIGN	0.9641138450963562	WITHOUT_CLASSIFICATION	0.03588615490364367	DESIGN
TODO: move to .sql package!!	DESIGN	0.994578850307338	DESIGN	0.005421149692662006	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9953233810012344	DESIGN	0.004676618998765578	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999997944677167	DESIGN	2.055322832809829E-7	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.6007267694525611	DESIGN	0.39927323054743885	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9848011554223779	DESIGN	0.015198844577622134	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9457426741961319	WITHOUT_CLASSIFICATION	0.05425732580386809	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.851222246481832	WITHOUT_CLASSIFICATION	0.14877775351816802	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.5583702593757582	DESIGN	0.44162974062424165	WITHOUT_CLASSIFICATION
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9999607921756092	DESIGN	3.920782439071589E-5	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.9976549908397281	DESIGN	0.002345009160272007	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9999911142683126	DESIGN	8.885731687417193E-6	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.7777839978589127	DESIGN	0.22221600214108736	WITHOUT_CLASSIFICATION
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9999915209908075	DESIGN	8.479009192437968E-6	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9954801909863837	WITHOUT_CLASSIFICATION	0.004519809013616257	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9992516945270582	DESIGN	7.483054729417739E-4	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9996120275442129	DESIGN	3.879724557871545E-4	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9994563778412751	DESIGN	5.436221587250365E-4	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9985000210635366	DESIGN	0.0014999789364633332	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999998230230701	DESIGN	1.7697692982135071E-7	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.821883582260224	WITHOUT_CLASSIFICATION	0.178116417739776	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9998504407841068	WITHOUT_CLASSIFICATION	1.4955921589320263E-4	DESIGN
is this ok?	DESIGN	0.9969029543230359	WITHOUT_CLASSIFICATION	0.0030970456769641034	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.999999911065707	DESIGN	8.893429295291743E-8	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9997018420614956	DESIGN	2.9815793850433817E-4	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9265147342413853	WITHOUT_CLASSIFICATION	0.07348526575861467	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999994496400068	DESIGN	5.503599932121138E-7	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.8313807265681926	DESIGN	0.16861927343180738	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9967482062329004	DESIGN	0.003251793767099497	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999999882488215	DESIGN	1.1751178474129309E-8	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9981990080245599	DESIGN	0.0018009919754402616	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9751129796839535	WITHOUT_CLASSIFICATION	0.024887020316046504	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9999710802775142	DESIGN	2.8919722485683315E-5	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9996269630732303	DESIGN	3.730369267697519E-4	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5176580873621678	DESIGN	0.48234191263783216	WITHOUT_CLASSIFICATION
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9986130260956226	DESIGN	0.0013869739043773273	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.5539773145494483	DESIGN	0.44602268545055157	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9647509918884907	DESIGN	0.03524900811150933	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9905508410689635	DESIGN	0.009449158931036592	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9998783574905695	DESIGN	1.2164250943053684E-4	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9999959229921087	DESIGN	4.077007891306581E-6	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.8702874073710363	WITHOUT_CLASSIFICATION	0.12971259262896376	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.999940303996734	DESIGN	5.9696003265978144E-5	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.903333886502288	DESIGN	0.09666611349771206	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.990564089033379	DESIGN	0.009435910966620999	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999999037	DESIGN	9.631743714217076E-14	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999996721503761	DESIGN	3.2784962392223483E-7	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9999994924696188	WITHOUT_CLASSIFICATION	5.075303812334217E-7	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9999999427263511	DESIGN	5.727364884789368E-8	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9773967495257079	DESIGN	0.022603250474292066	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9999888829695407	DESIGN	1.1117030459334515E-5	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9999101199494775	WITHOUT_CLASSIFICATION	8.988005052256627E-5	DESIGN
short cut check...	DESIGN	0.9986100647068589	WITHOUT_CLASSIFICATION	0.0013899352931412501	DESIGN
todo : move to StringHelper?	DESIGN	0.7482245578586596	WITHOUT_CLASSIFICATION	0.2517754421413405	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.9997112633150824	DESIGN	2.8873668491761985E-4	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9997954766720558	DESIGN	2.0452332794408345E-4	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999999986783114	DESIGN	1.3216886378090911E-9	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9998851468487312	DESIGN	1.1485315126882247E-4	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.87419359923259	WITHOUT_CLASSIFICATION	0.12580640076741	DESIGN
TODO: simply remove this override if we fix the above todos	DESIGN	0.8481038254816362	DESIGN	0.15189617451836387	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.9595926484196023	DESIGN	0.04040735158039757	WITHOUT_CLASSIFICATION
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999999980710862	DESIGN	1.928913761939687E-9	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9962302365090085	WITHOUT_CLASSIFICATION	0.0037697634909913515	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9999371794095333	DESIGN	6.282059046665236E-5	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.9952289818622516	WITHOUT_CLASSIFICATION	0.0047710181377484	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999915035433723	DESIGN	8.496456627600921E-6	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9997113156528078	DESIGN	2.886843471922562E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9867134081074338	WITHOUT_CLASSIFICATION	0.013286591892566152	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999919116429	DESIGN	8.088357082115456E-9	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999983355913553	DESIGN	1.664408644708095E-6	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9140573266383654	WITHOUT_CLASSIFICATION	0.08594267336163466	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.8968146165061082	DESIGN	0.10318538349389192	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.9868899080299471	DESIGN	0.013110091970052844	WITHOUT_CLASSIFICATION
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9755985209853147	DESIGN	0.024401479014685253	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999840837716072	DESIGN	1.5916228392808583E-5	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9240708610250827	DESIGN	0.07592913897491729	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9703858469568225	WITHOUT_CLASSIFICATION	0.029614153043177504	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9917657008696917	DESIGN	0.008234299130308261	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.99999998379744	DESIGN	1.6202560046782587E-8	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999783225327503	DESIGN	2.1677467249666234E-5	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9250156771738691	WITHOUT_CLASSIFICATION	0.07498432282613095	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9998236522759285	DESIGN	1.7634772407147456E-4	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.839032496262107	DESIGN	0.16096750373789298	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.7407013807178598	WITHOUT_CLASSIFICATION	0.25929861928214015	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9997084882642221	DESIGN	2.915117357779322E-4	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.999996873251546	DESIGN	3.1267484540396224E-6	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.8837378252841956	DESIGN	0.11626217471580436	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999997696534701	DESIGN	2.3034652976890033E-7	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.7432593991798891	DESIGN	0.2567406008201108	WITHOUT_CLASSIFICATION
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9920111903433944	DESIGN	0.007988809656605577	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999999983584739	WITHOUT_CLASSIFICATION	1.6415260901287428E-9	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999989509648843	DESIGN	1.0490351156865766E-6	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.9262762472373423	DESIGN	0.07372375276265777	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9999995314894964	DESIGN	4.685105036634045E-7	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9784840645706107	WITHOUT_CLASSIFICATION	0.021515935429389312	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.9982374386449158	DESIGN	0.001762561355084249	WITHOUT_CLASSIFICATION
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.9994577089347179	DESIGN	5.422910652822124E-4	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9916555244681612	DESIGN	0.008344475531838803	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999934102	DESIGN	6.58977365954552E-12	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999999999588	DESIGN	4.1088388229273945E-14	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9766191838947447	DESIGN	0.0233808161052553	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999632205377	DESIGN	3.677946228296881E-8	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9895693777267275	DESIGN	0.010430622273272405	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999881993286925	WITHOUT_CLASSIFICATION	1.1800671307507417E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999867041267	WITHOUT_CLASSIFICATION	1.3295873335788806E-8	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999999946676	DESIGN	5.3324308017300735E-12	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.99896730494941	DESIGN	0.0010326950505899438	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999999657591006	DESIGN	3.424089953623181E-8	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9997408582255949	DESIGN	2.591417744050573E-4	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9999960677618384	DESIGN	3.932238161604519E-6	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.6952353197740436	DESIGN	0.3047646802259564	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9994563778412751	DESIGN	5.436221587250365E-4	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.5280351888926849	WITHOUT_CLASSIFICATION	0.47196481110731503	DESIGN
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999972285441874	DESIGN	2.7714558125750315E-6	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.821883582260224	WITHOUT_CLASSIFICATION	0.178116417739776	DESIGN
TODO: make this a bit nicer	DESIGN	0.9997018420614956	DESIGN	2.9815793850433817E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9992188924307073	DESIGN	7.811075692927609E-4	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.992386524077212	DESIGN	0.007613475922788001	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.992386524077212	DESIGN	0.007613475922788001	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.992386524077212	DESIGN	0.007613475922788001	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999993345842716	DESIGN	6.65415728290604E-7	WITHOUT_CLASSIFICATION
