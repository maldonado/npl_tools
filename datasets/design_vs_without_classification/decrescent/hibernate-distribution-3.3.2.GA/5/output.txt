test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994118996683	WITHOUT_CLASSIFICATION	5.881003317352299E-7	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999194698655869	WITHOUT_CLASSIFICATION	8.053013441314196E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999194698655869	WITHOUT_CLASSIFICATION	8.053013441314196E-5	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9984074837263641	WITHOUT_CLASSIFICATION	0.0015925162736359253	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999914886027914	WITHOUT_CLASSIFICATION	8.511397208573996E-6	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999823253864836	WITHOUT_CLASSIFICATION	1.7674613516345786E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999994101141401	WITHOUT_CLASSIFICATION	5.898858598952397E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999994101141401	WITHOUT_CLASSIFICATION	5.898858598952397E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999988433974845	WITHOUT_CLASSIFICATION	1.1566025155683504E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991405480353	WITHOUT_CLASSIFICATION	8.594519646920507E-7	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999995268495967	WITHOUT_CLASSIFICATION	4.731504033122851E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999949360623243	WITHOUT_CLASSIFICATION	5.063937675710792E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999563265255277	WITHOUT_CLASSIFICATION	4.367347447227445E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999563265255277	WITHOUT_CLASSIFICATION	4.367347447227445E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997940748606177	WITHOUT_CLASSIFICATION	2.0592513938223528E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9999348630082711	WITHOUT_CLASSIFICATION	6.513699172888541E-5	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9976279096451267	WITHOUT_CLASSIFICATION	0.0023720903548732743	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999976845280649	WITHOUT_CLASSIFICATION	2.315471935040378E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999970694665222	WITHOUT_CLASSIFICATION	2.9305334776536514E-6	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9990513669465221	WITHOUT_CLASSIFICATION	9.486330534778506E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9998874413009061	WITHOUT_CLASSIFICATION	1.1255869909387123E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.999993732095904	WITHOUT_CLASSIFICATION	6.267904096002442E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999977283955278	WITHOUT_CLASSIFICATION	2.2716044722083215E-5	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999992733511003	WITHOUT_CLASSIFICATION	7.266488996363586E-7	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999616516696823	WITHOUT_CLASSIFICATION	3.834833031761214E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999586115871049	WITHOUT_CLASSIFICATION	4.138841289504959E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999298792445513	WITHOUT_CLASSIFICATION	7.012075544866913E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692667649518	WITHOUT_CLASSIFICATION	3.073323504820777E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692667649518	WITHOUT_CLASSIFICATION	3.073323504820777E-5	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9996893291338713	WITHOUT_CLASSIFICATION	3.1067086612868297E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999739697457226	WITHOUT_CLASSIFICATION	2.603025427735807E-5	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999985254185756	WITHOUT_CLASSIFICATION	1.474581424357791E-6	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999870195336183	WITHOUT_CLASSIFICATION	1.2980466381743346E-5	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9000151166830251	DESIGN	0.09998488331697494	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9998784409901126	WITHOUT_CLASSIFICATION	1.2155900988747005E-4	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9999750044638309	WITHOUT_CLASSIFICATION	2.4995536169121885E-5	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9999984022683935	WITHOUT_CLASSIFICATION	1.5977316064635467E-6	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9993031624592085	WITHOUT_CLASSIFICATION	6.968375407915359E-4	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999986861182394	WITHOUT_CLASSIFICATION	1.3138817606555797E-6	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999977098185	WITHOUT_CLASSIFICATION	2.2901815327994216E-9	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.999999635750366	WITHOUT_CLASSIFICATION	3.642496340360756E-7	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999863404764322	WITHOUT_CLASSIFICATION	1.365952356771698E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998629686924426	WITHOUT_CLASSIFICATION	1.370313075573584E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.999948071603688	WITHOUT_CLASSIFICATION	5.192839631194636E-5	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999963111283438	WITHOUT_CLASSIFICATION	3.688871656331978E-6	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999996534982029	WITHOUT_CLASSIFICATION	3.4650179709805783E-6	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9999999758044776	WITHOUT_CLASSIFICATION	2.4195522458717462E-8	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999328088480732	WITHOUT_CLASSIFICATION	6.719115192673119E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999950663588042	WITHOUT_CLASSIFICATION	4.933641195769773E-6	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9889110596107126	WITHOUT_CLASSIFICATION	0.01108894038928736	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999218654895342	WITHOUT_CLASSIFICATION	7.813451046580174E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999950663588042	WITHOUT_CLASSIFICATION	4.933641195769773E-6	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999218654895342	WITHOUT_CLASSIFICATION	7.813451046580174E-5	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999992914031876	WITHOUT_CLASSIFICATION	7.085968123261662E-7	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9855222815650755	WITHOUT_CLASSIFICATION	0.014477718434924446	DESIGN
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999986128172413	WITHOUT_CLASSIFICATION	1.3871827587612662E-6	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999954797862196	WITHOUT_CLASSIFICATION	4.520213780395928E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999984218602211	WITHOUT_CLASSIFICATION	1.5781397788437986E-6	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999999052600251	WITHOUT_CLASSIFICATION	9.473997478629952E-8	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999899978203639	WITHOUT_CLASSIFICATION	1.0002179636025085E-5	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.7720530162310889	WITHOUT_CLASSIFICATION	0.22794698376891112	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999997355205635	WITHOUT_CLASSIFICATION	2.644794364439218E-7	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9987468980668496	WITHOUT_CLASSIFICATION	0.001253101933150318	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999599846800585	WITHOUT_CLASSIFICATION	4.001531994147454E-5	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9999218654895342	WITHOUT_CLASSIFICATION	7.813451046580174E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999996007456	WITHOUT_CLASSIFICATION	3.9925452505395186E-10	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.999999350575455	WITHOUT_CLASSIFICATION	6.494245450090509E-7	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9489075477041512	WITHOUT_CLASSIFICATION	0.05109245229584868	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9997356998460335	WITHOUT_CLASSIFICATION	2.6430015396650206E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9996316190399012	WITHOUT_CLASSIFICATION	3.683809600987865E-4	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999846348259651	WITHOUT_CLASSIFICATION	1.5365174034810762E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998966981551352	WITHOUT_CLASSIFICATION	1.0330184486478158E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999984065310993	WITHOUT_CLASSIFICATION	1.5934689007874653E-6	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9998692853265048	WITHOUT_CLASSIFICATION	1.3071467349521165E-4	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999725495374	WITHOUT_CLASSIFICATION	2.7450462514892346E-8	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998994118706368	WITHOUT_CLASSIFICATION	1.0058812936318066E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999977491035993	WITHOUT_CLASSIFICATION	2.250896400753491E-6	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9987617023652265	WITHOUT_CLASSIFICATION	0.0012382976347734545	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999936407347862	WITHOUT_CLASSIFICATION	6.3592652138454585E-6	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999994256361456	WITHOUT_CLASSIFICATION	5.743638543774759E-7	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.7432815803989619	DESIGN	0.2567184196010381	WITHOUT_CLASSIFICATION
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999688273155	WITHOUT_CLASSIFICATION	3.117268444641413E-8	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999880243847	WITHOUT_CLASSIFICATION	1.1975615206942829E-8	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999998983621	WITHOUT_CLASSIFICATION	1.0163792504123583E-10	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999692627547	WITHOUT_CLASSIFICATION	3.07372453462678E-8	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999874282198641	WITHOUT_CLASSIFICATION	1.257178013583967E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998821751428784	WITHOUT_CLASSIFICATION	1.1782485712168522E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999997079514705	WITHOUT_CLASSIFICATION	2.9204852945506097E-7	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999997904995	WITHOUT_CLASSIFICATION	2.095003932476239E-10	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9998821751428784	WITHOUT_CLASSIFICATION	1.1782485712168522E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999997863970875	WITHOUT_CLASSIFICATION	2.1360291241958495E-7	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999886806527986	WITHOUT_CLASSIFICATION	1.1319347201549442E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9999950663588042	WITHOUT_CLASSIFICATION	4.933641195769773E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999991561394429	WITHOUT_CLASSIFICATION	8.43860557090648E-7	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.999952194666067	WITHOUT_CLASSIFICATION	4.780533393301599E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982207095129	WITHOUT_CLASSIFICATION	1.7792904870598054E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982207095129	WITHOUT_CLASSIFICATION	1.7792904870598054E-6	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999777574254911	WITHOUT_CLASSIFICATION	2.2242574508901232E-5	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9897265434784449	WITHOUT_CLASSIFICATION	0.010273456521555077	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9999999285570791	WITHOUT_CLASSIFICATION	7.144292090720762E-8	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999955185452	WITHOUT_CLASSIFICATION	4.481454719578889E-9	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999995258094165	WITHOUT_CLASSIFICATION	4.741905835389165E-7	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.999963468037729	WITHOUT_CLASSIFICATION	3.653196227112741E-5	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999600748666	WITHOUT_CLASSIFICATION	3.9925133460317555E-8	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9999953964833789	WITHOUT_CLASSIFICATION	4.603516621118898E-6	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999837573669142	WITHOUT_CLASSIFICATION	1.624263308580598E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999997610664089	WITHOUT_CLASSIFICATION	2.389335910910562E-7	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999742178967407	WITHOUT_CLASSIFICATION	2.5782103259417088E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999742178967407	WITHOUT_CLASSIFICATION	2.5782103259417088E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997675189558	WITHOUT_CLASSIFICATION	2.324810440529978E-7	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999813008635	WITHOUT_CLASSIFICATION	1.8699136469825457E-8	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9996430331929346	WITHOUT_CLASSIFICATION	3.5696680706541505E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999742178967407	WITHOUT_CLASSIFICATION	2.5782103259417088E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997675189558	WITHOUT_CLASSIFICATION	2.324810440529978E-7	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997675189558	WITHOUT_CLASSIFICATION	2.324810440529978E-7	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999187288978602	WITHOUT_CLASSIFICATION	8.127110213982565E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9989769444138838	WITHOUT_CLASSIFICATION	0.0010230555861161143	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999999429866	WITHOUT_CLASSIFICATION	5.701326502594198E-11	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999999673451545	WITHOUT_CLASSIFICATION	3.265484552444669E-8	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999061952603525	WITHOUT_CLASSIFICATION	9.380473964752403E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9999061952603525	WITHOUT_CLASSIFICATION	9.380473964752403E-5	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999986573577273	WITHOUT_CLASSIFICATION	1.342642272712709E-6	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998392855825153	WITHOUT_CLASSIFICATION	1.6071441748459443E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9999947665711575	WITHOUT_CLASSIFICATION	5.233428842541396E-6	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999096288611969	WITHOUT_CLASSIFICATION	9.037113880308322E-5	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999096288611969	WITHOUT_CLASSIFICATION	9.037113880308322E-5	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999880053288056	WITHOUT_CLASSIFICATION	1.1994671194461309E-5	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998329247188125	WITHOUT_CLASSIFICATION	1.6707528118761408E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999618846697302	WITHOUT_CLASSIFICATION	3.8115330269644854E-5	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999999963561431	WITHOUT_CLASSIFICATION	3.6438568268899895E-9	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9983965739503982	WITHOUT_CLASSIFICATION	0.001603426049601752	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999998837571347	WITHOUT_CLASSIFICATION	1.1624286536367105E-7	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9999970999651648	WITHOUT_CLASSIFICATION	2.900034835139999E-6	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9998323503371325	WITHOUT_CLASSIFICATION	1.6764966286753085E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9999986150433435	WITHOUT_CLASSIFICATION	1.384956656422337E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9999618846697302	WITHOUT_CLASSIFICATION	3.8115330269644854E-5	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9997926544027541	WITHOUT_CLASSIFICATION	2.073455972458973E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999244315258663	WITHOUT_CLASSIFICATION	7.556847413363304E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999244315258663	WITHOUT_CLASSIFICATION	7.556847413363304E-5	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.991785853400058	WITHOUT_CLASSIFICATION	0.00821414659994198	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9669603923105239	WITHOUT_CLASSIFICATION	0.033039607689476086	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999941162818855	WITHOUT_CLASSIFICATION	5.883718114464901E-6	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9973458689889251	WITHOUT_CLASSIFICATION	0.0026541310110748924	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9998622523271576	WITHOUT_CLASSIFICATION	1.377476728422624E-4	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.999987716966044	WITHOUT_CLASSIFICATION	1.2283033955906708E-5	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9997671577302478	WITHOUT_CLASSIFICATION	2.328422697521293E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9997539120640879	WITHOUT_CLASSIFICATION	2.4608793591212685E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9999948950609551	WITHOUT_CLASSIFICATION	5.104939044911784E-6	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999937657117	WITHOUT_CLASSIFICATION	6.234288251641687E-9	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999937657117	WITHOUT_CLASSIFICATION	6.234288251641687E-9	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999447837634241	WITHOUT_CLASSIFICATION	5.521623657593109E-5	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999994118996683	WITHOUT_CLASSIFICATION	5.881003317352299E-7	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999886878199422	WITHOUT_CLASSIFICATION	1.1312180057699984E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9999990745222656	WITHOUT_CLASSIFICATION	9.254777344815087E-7	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999194698655869	WITHOUT_CLASSIFICATION	8.053013441314196E-5	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9999811672468192	WITHOUT_CLASSIFICATION	1.8832753180814892E-5	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9999147113077258	WITHOUT_CLASSIFICATION	8.52886922742719E-5	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999873033716554	WITHOUT_CLASSIFICATION	1.2696628344595164E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9999950996833703	WITHOUT_CLASSIFICATION	4.900316629647791E-6	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999978508986469	WITHOUT_CLASSIFICATION	2.1491013530915532E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9995475678594364	WITHOUT_CLASSIFICATION	4.524321405636844E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9986277463056634	WITHOUT_CLASSIFICATION	0.0013722536943364784	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9999922605581854	WITHOUT_CLASSIFICATION	7.739441814698082E-6	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999914886027914	WITHOUT_CLASSIFICATION	8.511397208573996E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999984308793354	WITHOUT_CLASSIFICATION	1.5691206646841135E-6	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999984308793354	WITHOUT_CLASSIFICATION	1.5691206646841135E-6	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9999875715798646	WITHOUT_CLASSIFICATION	1.2428420135403301E-5	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9935542998639834	WITHOUT_CLASSIFICATION	0.0064457001360166055	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9999193819774101	WITHOUT_CLASSIFICATION	8.061802258979059E-5	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999993593661601	WITHOUT_CLASSIFICATION	6.406338398373339E-7	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.999978889121234	WITHOUT_CLASSIFICATION	2.111087876598844E-5	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9964448994658787	WITHOUT_CLASSIFICATION	0.0035551005341213915	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999994101141401	WITHOUT_CLASSIFICATION	5.898858598952397E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9973827521976407	WITHOUT_CLASSIFICATION	0.0026172478023593656	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999952107247417	WITHOUT_CLASSIFICATION	4.789275258291089E-6	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999963884786142	WITHOUT_CLASSIFICATION	3.6115213858034704E-5	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9999975187558858	WITHOUT_CLASSIFICATION	2.4812441141498484E-6	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9996486613897458	WITHOUT_CLASSIFICATION	3.5133861025408124E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.999956006813037	WITHOUT_CLASSIFICATION	4.399318696299349E-5	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998470763185485	WITHOUT_CLASSIFICATION	1.5292368145150846E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9999985608268749	WITHOUT_CLASSIFICATION	1.4391731250953068E-6	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999907458906447	WITHOUT_CLASSIFICATION	9.254109355306531E-6	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999965304640452	WITHOUT_CLASSIFICATION	3.4695359547155393E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.954525118570335	WITHOUT_CLASSIFICATION	0.04547488142966511	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9999421014936268	WITHOUT_CLASSIFICATION	5.789850637324349E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9999863201013692	WITHOUT_CLASSIFICATION	1.3679898630747731E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999194698655869	WITHOUT_CLASSIFICATION	8.053013441314196E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999194698655869	WITHOUT_CLASSIFICATION	8.053013441314196E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9986277463056634	WITHOUT_CLASSIFICATION	0.0013722536943364784	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9999984308793354	WITHOUT_CLASSIFICATION	1.5691206646841135E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998470763185485	WITHOUT_CLASSIFICATION	1.5292368145150846E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999988433974845	WITHOUT_CLASSIFICATION	1.1566025155683504E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999941916465267	WITHOUT_CLASSIFICATION	5.80835347334347E-6	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9998969317261619	WITHOUT_CLASSIFICATION	1.0306827383817908E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9999661978085926	WITHOUT_CLASSIFICATION	3.380219140731741E-5	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9999976172219994	WITHOUT_CLASSIFICATION	2.382778000478303E-6	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999993444425813	WITHOUT_CLASSIFICATION	6.555574187768992E-7	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9998884124283375	WITHOUT_CLASSIFICATION	1.115875716625471E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999988874371427	WITHOUT_CLASSIFICATION	1.1125628573423199E-6	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9999461992103692	WITHOUT_CLASSIFICATION	5.380078963065432E-5	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9999397027306746	WITHOUT_CLASSIFICATION	6.0297269325347664E-5	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999946373547837	WITHOUT_CLASSIFICATION	5.362645216305206E-6	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9999946373547837	WITHOUT_CLASSIFICATION	5.362645216305206E-6	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9997873415676084	WITHOUT_CLASSIFICATION	2.1265843239165016E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9999981197670255	WITHOUT_CLASSIFICATION	1.8802329745069911E-6	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.998469840955429	WITHOUT_CLASSIFICATION	0.001530159044571012	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9999802369248513	WITHOUT_CLASSIFICATION	1.976307514870782E-5	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999507509470115	WITHOUT_CLASSIFICATION	4.9249052988624694E-5	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.999977725119043	WITHOUT_CLASSIFICATION	2.2274880956995176E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9994569047563718	WITHOUT_CLASSIFICATION	5.430952436281537E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999991405480353	WITHOUT_CLASSIFICATION	8.594519646920507E-7	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9999896424216232	WITHOUT_CLASSIFICATION	1.0357578376685125E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999861142836332	WITHOUT_CLASSIFICATION	1.3885716366772114E-5	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9999861142836332	WITHOUT_CLASSIFICATION	1.3885716366772114E-5	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9999991409993705	WITHOUT_CLASSIFICATION	8.590006295778886E-7	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9999820033341815	WITHOUT_CLASSIFICATION	1.7996665818508453E-5	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9999993355871122	WITHOUT_CLASSIFICATION	6.644128878154315E-7	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9999999647560018	WITHOUT_CLASSIFICATION	3.52439981939997E-8	DESIGN
int	WITHOUT_CLASSIFICATION	0.9999631624444398	WITHOUT_CLASSIFICATION	3.6837555560120396E-5	DESIGN
return	WITHOUT_CLASSIFICATION	0.9999194698655869	WITHOUT_CLASSIFICATION	8.053013441314196E-5	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9986277463056634	WITHOUT_CLASSIFICATION	0.0013722536943364784	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9999914886027914	WITHOUT_CLASSIFICATION	8.511397208573996E-6	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998470763185485	WITHOUT_CLASSIFICATION	1.5292368145150846E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9998470763185485	WITHOUT_CLASSIFICATION	1.5292368145150846E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994828595606	WITHOUT_CLASSIFICATION	5.171404393206362E-7	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999994828595606	WITHOUT_CLASSIFICATION	5.171404393206362E-7	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999972025397362	WITHOUT_CLASSIFICATION	2.797460263873164E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999940814972402	WITHOUT_CLASSIFICATION	5.918502759769405E-6	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9999940814972402	WITHOUT_CLASSIFICATION	5.918502759769405E-6	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9997637446012342	WITHOUT_CLASSIFICATION	2.362553987656929E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.999969209897453	WITHOUT_CLASSIFICATION	3.079010254699582E-5	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9999961635326486	WITHOUT_CLASSIFICATION	3.836467351420761E-6	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999889459145745	WITHOUT_CLASSIFICATION	1.1054085425395508E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9999995172201076	WITHOUT_CLASSIFICATION	4.827798924360847E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999949360623243	WITHOUT_CLASSIFICATION	5.063937675710792E-6	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999949360623243	WITHOUT_CLASSIFICATION	5.063937675710792E-6	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9992043904336375	WITHOUT_CLASSIFICATION	7.956095663624274E-4	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9999956370741251	WITHOUT_CLASSIFICATION	4.362925874954367E-6	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9999456072362004	WITHOUT_CLASSIFICATION	5.439276379970317E-5	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9998952587703519	WITHOUT_CLASSIFICATION	1.0474122964817333E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9999800114639861	WITHOUT_CLASSIFICATION	1.9988536013896563E-5	DESIGN
short	WITHOUT_CLASSIFICATION	0.9996391107277836	WITHOUT_CLASSIFICATION	3.608892722164221E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999563265255277	WITHOUT_CLASSIFICATION	4.367347447227445E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999894662605763	WITHOUT_CLASSIFICATION	1.053373942363152E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999894662605763	WITHOUT_CLASSIFICATION	1.053373942363152E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997940748606177	WITHOUT_CLASSIFICATION	2.0592513938223528E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997940748606177	WITHOUT_CLASSIFICATION	2.0592513938223528E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999753003257742	WITHOUT_CLASSIFICATION	2.4699674225893176E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999753003257742	WITHOUT_CLASSIFICATION	2.4699674225893176E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995868559919	WITHOUT_CLASSIFICATION	4.1314400817518975E-7	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995868559919	WITHOUT_CLASSIFICATION	4.1314400817518975E-7	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9999949360623243	WITHOUT_CLASSIFICATION	5.063937675710792E-6	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999563265255277	WITHOUT_CLASSIFICATION	4.367347447227445E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999894662605763	WITHOUT_CLASSIFICATION	1.053373942363152E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9999894662605763	WITHOUT_CLASSIFICATION	1.053373942363152E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9997940748606177	WITHOUT_CLASSIFICATION	2.0592513938223528E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999753003257742	WITHOUT_CLASSIFICATION	2.4699674225893176E-5	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9999753003257742	WITHOUT_CLASSIFICATION	2.4699674225893176E-5	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999995868559919	WITHOUT_CLASSIFICATION	4.1314400817518975E-7	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999062614302547	WITHOUT_CLASSIFICATION	9.373856974525177E-5	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9999993121787623	WITHOUT_CLASSIFICATION	6.878212376706447E-7	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9999869118376813	WITHOUT_CLASSIFICATION	1.3088162318667832E-5	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999984070857054	WITHOUT_CLASSIFICATION	1.5929142945648573E-6	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9999964355900576	WITHOUT_CLASSIFICATION	3.56440994237783E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999789383452269	WITHOUT_CLASSIFICATION	2.1061654773099346E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9883917139241408	WITHOUT_CLASSIFICATION	0.011608286075859193	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9893437434061402	WITHOUT_CLASSIFICATION	0.010656256593859893	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999929465544886	WITHOUT_CLASSIFICATION	7.053445511409199E-6	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999999762791	WITHOUT_CLASSIFICATION	2.3721021983843168E-11	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999998507575353	WITHOUT_CLASSIFICATION	1.492424646792253E-7	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999997879306315	WITHOUT_CLASSIFICATION	2.1206936845264152E-7	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9999777574254911	WITHOUT_CLASSIFICATION	2.2242574508901232E-5	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999789383452269	WITHOUT_CLASSIFICATION	2.1061654773099346E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999789383452269	WITHOUT_CLASSIFICATION	2.1061654773099346E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999789383452269	WITHOUT_CLASSIFICATION	2.1061654773099346E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999425280858433	WITHOUT_CLASSIFICATION	5.7471914156761024E-5	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997508241435	WITHOUT_CLASSIFICATION	2.4917585653573385E-7	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999997508241435	WITHOUT_CLASSIFICATION	2.4917585653573385E-7	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999923303630084	WITHOUT_CLASSIFICATION	7.669636991548197E-6	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9999915314678824	WITHOUT_CLASSIFICATION	8.468532117616425E-6	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999999630154337	WITHOUT_CLASSIFICATION	3.6984566221194936E-8	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999909122553392	WITHOUT_CLASSIFICATION	9.087744660843733E-6	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9999909122553392	WITHOUT_CLASSIFICATION	9.087744660843733E-6	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999970694665222	WITHOUT_CLASSIFICATION	2.9305334776536514E-6	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997347200486156	WITHOUT_CLASSIFICATION	2.6527995138430775E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9997347200486156	WITHOUT_CLASSIFICATION	2.6527995138430775E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9998665330154851	WITHOUT_CLASSIFICATION	1.3346698451478214E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999865442912063	WITHOUT_CLASSIFICATION	1.3455708793673034E-5	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999698654566266	WITHOUT_CLASSIFICATION	3.013454337338327E-5	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999742438856264	WITHOUT_CLASSIFICATION	2.5756114373558237E-5	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9999534765093239	WITHOUT_CLASSIFICATION	4.652349067611159E-5	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9998304729422491	WITHOUT_CLASSIFICATION	1.6952705775077185E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9990513669465221	WITHOUT_CLASSIFICATION	9.486330534778506E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999152307068202	WITHOUT_CLASSIFICATION	8.476929317988282E-5	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9834829239314454	WITHOUT_CLASSIFICATION	0.016517076068554504	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9997853361915263	WITHOUT_CLASSIFICATION	2.1466380847366432E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999976890032907	WITHOUT_CLASSIFICATION	2.3109967094445074E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999977283955278	WITHOUT_CLASSIFICATION	2.2716044722083215E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999851005374	WITHOUT_CLASSIFICATION	1.4899462607529145E-7	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999998848996411	WITHOUT_CLASSIFICATION	1.151003588748384E-7	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9999941681791373	WITHOUT_CLASSIFICATION	5.831820862714394E-6	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999977283955278	WITHOUT_CLASSIFICATION	2.2716044722083215E-5	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999982811392748	WITHOUT_CLASSIFICATION	1.718860725175645E-6	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999997133669368	WITHOUT_CLASSIFICATION	2.866330631494179E-7	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999848671809506	WITHOUT_CLASSIFICATION	1.5132819049366761E-5	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9999635567161402	WITHOUT_CLASSIFICATION	3.6443283859629504E-5	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999477658104831	WITHOUT_CLASSIFICATION	5.223418951688933E-5	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999988980735302	WITHOUT_CLASSIFICATION	1.1019264698901357E-6	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999857677609495	WITHOUT_CLASSIFICATION	1.4232239050421275E-5	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9999586115871049	WITHOUT_CLASSIFICATION	4.138841289504959E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999775955755669	WITHOUT_CLASSIFICATION	2.240442443309968E-5	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9999298792445513	WITHOUT_CLASSIFICATION	7.012075544866913E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999657534935004	WITHOUT_CLASSIFICATION	3.4246506499632306E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9999982330140015	WITHOUT_CLASSIFICATION	1.7669859984999887E-6	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991031882775102	WITHOUT_CLASSIFICATION	8.968117224896944E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9990513669465221	WITHOUT_CLASSIFICATION	9.486330534778506E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999775955755669	WITHOUT_CLASSIFICATION	2.240442443309968E-5	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999657534935004	WITHOUT_CLASSIFICATION	3.4246506499632306E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991031882775102	WITHOUT_CLASSIFICATION	8.968117224896944E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999997353121113	WITHOUT_CLASSIFICATION	2.646878888206806E-7	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9998542299986714	WITHOUT_CLASSIFICATION	1.4577000132864087E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999590548526	WITHOUT_CLASSIFICATION	4.094514734421599E-8	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692667649518	WITHOUT_CLASSIFICATION	3.073323504820777E-5	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999476445985782	WITHOUT_CLASSIFICATION	5.235540142186635E-5	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999862387490849	WITHOUT_CLASSIFICATION	1.3761250915058287E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999843112830268	WITHOUT_CLASSIFICATION	1.568871697314318E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9965081088458145	WITHOUT_CLASSIFICATION	0.003491891154185405	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9999799817328902	WITHOUT_CLASSIFICATION	2.0018267109812554E-5	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999999995562774	WITHOUT_CLASSIFICATION	4.437225729319596E-10	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999983336853411	WITHOUT_CLASSIFICATION	1.6663146588049018E-6	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.99993304061312	WITHOUT_CLASSIFICATION	6.69593868799878E-5	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999999999995161	WITHOUT_CLASSIFICATION	4.8390294135997135E-12	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999998938710752	WITHOUT_CLASSIFICATION	1.0612892465159654E-7	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9998015549738564	WITHOUT_CLASSIFICATION	1.9844502614368517E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.999956702668329	WITHOUT_CLASSIFICATION	4.3297331671008856E-5	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9999739697457226	WITHOUT_CLASSIFICATION	2.603025427735807E-5	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999991092801933	WITHOUT_CLASSIFICATION	8.907198066624815E-7	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.999936422298968	WITHOUT_CLASSIFICATION	6.357770103210084E-5	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999775955755669	WITHOUT_CLASSIFICATION	2.240442443309968E-5	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9999901518469194	WITHOUT_CLASSIFICATION	9.84815308055869E-6	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999792516537677	WITHOUT_CLASSIFICATION	2.0748346232251598E-5	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999944318814918	WITHOUT_CLASSIFICATION	5.568118508182078E-6	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999593573937683	WITHOUT_CLASSIFICATION	4.0642606231631154E-5	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9999964393489643	WITHOUT_CLASSIFICATION	3.560651035804407E-6	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999138076959665	WITHOUT_CLASSIFICATION	8.619230403357806E-5	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999938836915	WITHOUT_CLASSIFICATION	6.116308505210739E-9	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999411694945	WITHOUT_CLASSIFICATION	5.88305056037735E-8	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999986957711697	WITHOUT_CLASSIFICATION	1.3042288302167495E-6	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9998009654524073	WITHOUT_CLASSIFICATION	1.990345475926476E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9998096611189062	WITHOUT_CLASSIFICATION	1.9033888109376478E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999569472022678	WITHOUT_CLASSIFICATION	4.305279773216445E-5	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9997056415515487	WITHOUT_CLASSIFICATION	2.94358448451371E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999870195336183	WITHOUT_CLASSIFICATION	1.2980466381743346E-5	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9999644419891766	WITHOUT_CLASSIFICATION	3.555801082348787E-5	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9999603329094043	WITHOUT_CLASSIFICATION	3.966709059557333E-5	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999955011596465	WITHOUT_CLASSIFICATION	4.498840353520094E-6	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9999987078270155	WITHOUT_CLASSIFICATION	1.2921729845557785E-6	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9999996459182438	WITHOUT_CLASSIFICATION	3.5408175617167576E-7	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999971843015928	WITHOUT_CLASSIFICATION	2.815698407141755E-6	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999992681883	WITHOUT_CLASSIFICATION	7.318117526662913E-10	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9985041636240916	WITHOUT_CLASSIFICATION	0.0014958363759084176	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.96968343001963	WITHOUT_CLASSIFICATION	0.030316569980370016	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9999492211910301	WITHOUT_CLASSIFICATION	5.077880896977517E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999759466494889	WITHOUT_CLASSIFICATION	2.4053350511110776E-5	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999759466494889	WITHOUT_CLASSIFICATION	2.4053350511110776E-5	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9999803973128815	WITHOUT_CLASSIFICATION	1.9602687118559197E-5	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999802210132406	WITHOUT_CLASSIFICATION	1.9778986759354456E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9999530092478384	WITHOUT_CLASSIFICATION	4.69907521615899E-5	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9999518861294466	WITHOUT_CLASSIFICATION	4.8113870553405274E-5	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9999592846960624	WITHOUT_CLASSIFICATION	4.071530393751004E-5	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9998074036093695	WITHOUT_CLASSIFICATION	1.925963906304077E-4	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.999441523751043	WITHOUT_CLASSIFICATION	5.584762489569646E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999924220136921	WITHOUT_CLASSIFICATION	7.577986307834725E-6	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999719291717643	WITHOUT_CLASSIFICATION	2.8070828235702858E-5	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999936461502614	WITHOUT_CLASSIFICATION	6.3538497386607194E-6	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9999941879232976	WITHOUT_CLASSIFICATION	5.812076702352701E-6	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9999934358554411	WITHOUT_CLASSIFICATION	6.56414455886761E-6	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9999913777049513	WITHOUT_CLASSIFICATION	8.622295048739645E-6	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999995726664397	WITHOUT_CLASSIFICATION	4.273335602577983E-7	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9961519026554053	WITHOUT_CLASSIFICATION	0.0038480973445946098	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9761393881554684	WITHOUT_CLASSIFICATION	0.02386061184453163	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9999971337696542	WITHOUT_CLASSIFICATION	2.8662303458820917E-6	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9999753078029457	WITHOUT_CLASSIFICATION	2.4692197054232483E-5	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999424994550024	WITHOUT_CLASSIFICATION	5.7500544997683574E-5	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999904226961152	WITHOUT_CLASSIFICATION	9.577303884852698E-6	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974764545798269	WITHOUT_CLASSIFICATION	0.0025235454201730655	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9999999810466089	WITHOUT_CLASSIFICATION	1.89533910138677E-8	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9999951075102618	WITHOUT_CLASSIFICATION	4.89248973822001E-6	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9996087846424353	WITHOUT_CLASSIFICATION	3.912153575647081E-4	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9999591513247058	WITHOUT_CLASSIFICATION	4.084867529416407E-5	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999804171684264	WITHOUT_CLASSIFICATION	1.9582831573573442E-5	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999998872151872	WITHOUT_CLASSIFICATION	1.1278481282287929E-7	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999999087897301	WITHOUT_CLASSIFICATION	9.121026989778908E-7	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999937084416907	WITHOUT_CLASSIFICATION	6.291558309307938E-6	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9708351417851433	WITHOUT_CLASSIFICATION	0.029164858214856676	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9999904226961152	WITHOUT_CLASSIFICATION	9.577303884852698E-6	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9997591403952925	WITHOUT_CLASSIFICATION	2.4085960470755845E-4	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999971171723503	WITHOUT_CLASSIFICATION	2.8828276497906176E-6	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9999973261761397	WITHOUT_CLASSIFICATION	2.673823860369852E-6	DESIGN
found	WITHOUT_CLASSIFICATION	0.9991677144590291	WITHOUT_CLASSIFICATION	8.322855409709194E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9991677144590291	WITHOUT_CLASSIFICATION	8.322855409709194E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9999810433561244	WITHOUT_CLASSIFICATION	1.8956643875658265E-5	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9999983615226491	WITHOUT_CLASSIFICATION	1.6384773509810199E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999957892230832	WITHOUT_CLASSIFICATION	4.2107769167409015E-6	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9999957892230832	WITHOUT_CLASSIFICATION	4.2107769167409015E-6	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.96968343001963	WITHOUT_CLASSIFICATION	0.030316569980370016	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999999617768238	WITHOUT_CLASSIFICATION	3.8223176158168964E-8	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998538731445099	WITHOUT_CLASSIFICATION	1.4612685549010655E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999993098671461	WITHOUT_CLASSIFICATION	6.90132853847927E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999447837634241	WITHOUT_CLASSIFICATION	5.521623657593109E-5	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9998538731445099	WITHOUT_CLASSIFICATION	1.4612685549010655E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999993098671461	WITHOUT_CLASSIFICATION	6.90132853847927E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999960479965626	WITHOUT_CLASSIFICATION	3.952003437375881E-6	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9996633331242387	WITHOUT_CLASSIFICATION	3.3666687576129134E-4	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999791848367239	WITHOUT_CLASSIFICATION	2.081516327605982E-5	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999912115183361	WITHOUT_CLASSIFICATION	8.788481663802525E-6	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9981111005745342	WITHOUT_CLASSIFICATION	0.0018888994254657198	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.7870874107387295	DESIGN	0.2129125892612706	WITHOUT_CLASSIFICATION
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999795734003695	WITHOUT_CLASSIFICATION	2.0426599630527852E-5	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9999795734003695	WITHOUT_CLASSIFICATION	2.0426599630527852E-5	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.999845896953805	WITHOUT_CLASSIFICATION	1.541030461950967E-4	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999994328859	WITHOUT_CLASSIFICATION	5.671140788641894E-10	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999974722567955	WITHOUT_CLASSIFICATION	2.527743204515522E-6	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9998585129550868	WITHOUT_CLASSIFICATION	1.414870449132414E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9999962822227392	WITHOUT_CLASSIFICATION	3.717777260933808E-6	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9999997720611078	WITHOUT_CLASSIFICATION	2.2793889219693333E-7	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999447837634241	WITHOUT_CLASSIFICATION	5.521623657593109E-5	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9999974004923774	WITHOUT_CLASSIFICATION	2.5995076225903097E-6	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999992564200034	WITHOUT_CLASSIFICATION	7.435799965305539E-7	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999992564200034	WITHOUT_CLASSIFICATION	7.435799965305539E-7	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9997880496657874	WITHOUT_CLASSIFICATION	2.119503342127191E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999960479965626	WITHOUT_CLASSIFICATION	3.952003437375881E-6	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9992047695884689	WITHOUT_CLASSIFICATION	7.952304115311187E-4	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.9999376187440341	DESIGN	6.238125596601219E-5	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.8221681097957442	WITHOUT_CLASSIFICATION	0.17783189020425583	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999459830401	WITHOUT_CLASSIFICATION	5.401695989092716E-8	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9947706907509538	WITHOUT_CLASSIFICATION	0.005229309249046115	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999960479965626	WITHOUT_CLASSIFICATION	3.952003437375881E-6	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999999459830401	WITHOUT_CLASSIFICATION	5.401695989092716E-8	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9947706907509538	WITHOUT_CLASSIFICATION	0.005229309249046115	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999980894329963	WITHOUT_CLASSIFICATION	1.910567003626376E-6	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999645187538	WITHOUT_CLASSIFICATION	3.548124613882038E-8	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999998303839754	WITHOUT_CLASSIFICATION	1.6961602460631702E-7	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999960479965626	WITHOUT_CLASSIFICATION	3.952003437375881E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999960479965626	WITHOUT_CLASSIFICATION	3.952003437375881E-6	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9999265777773899	WITHOUT_CLASSIFICATION	7.342222261009815E-5	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9998889143020949	WITHOUT_CLASSIFICATION	1.1108569790511934E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.999981518057261	WITHOUT_CLASSIFICATION	1.848194273898675E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998629686924426	WITHOUT_CLASSIFICATION	1.370313075573584E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999986366119367	WITHOUT_CLASSIFICATION	1.3633880632812735E-6	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999999827015265	WITHOUT_CLASSIFICATION	1.7298473445483548E-8	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999999744315664	WITHOUT_CLASSIFICATION	2.556843360771088E-7	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999924855148149	WITHOUT_CLASSIFICATION	7.514485185109046E-5	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9998290088330518	WITHOUT_CLASSIFICATION	1.7099116694811015E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9999952282230572	WITHOUT_CLASSIFICATION	4.77177694283468E-6	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999797961353794	WITHOUT_CLASSIFICATION	2.0203864620643195E-5	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999549223070906	WITHOUT_CLASSIFICATION	4.507769290946246E-5	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999610801740318	WITHOUT_CLASSIFICATION	3.891982596807831E-5	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9622428100116334	WITHOUT_CLASSIFICATION	0.03775718998836658	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999794820904	WITHOUT_CLASSIFICATION	2.0517909613417345E-7	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999974361987946	WITHOUT_CLASSIFICATION	2.5638012053777953E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998629686924426	WITHOUT_CLASSIFICATION	1.370313075573584E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9954422641169383	WITHOUT_CLASSIFICATION	0.004557735883061839	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9999951471431304	WITHOUT_CLASSIFICATION	4.8528568695755765E-6	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999999129471292	WITHOUT_CLASSIFICATION	8.705287091590387E-8	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999976668798187	WITHOUT_CLASSIFICATION	2.3331201812557015E-6	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999785463644629	WITHOUT_CLASSIFICATION	2.1453635537102165E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999785463644629	WITHOUT_CLASSIFICATION	2.1453635537102165E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998629686924426	WITHOUT_CLASSIFICATION	1.370313075573584E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999986841244765	WITHOUT_CLASSIFICATION	1.315875523557179E-6	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9999981259165581	WITHOUT_CLASSIFICATION	1.8740834419887025E-6	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.6681480855913849	DESIGN	0.33185191440861517	WITHOUT_CLASSIFICATION
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999986171078318	WITHOUT_CLASSIFICATION	1.3828921683224118E-6	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999984303331142	WITHOUT_CLASSIFICATION	1.5696668857966066E-5	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999990477381516	WITHOUT_CLASSIFICATION	9.522618483636479E-7	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9999249756271856	WITHOUT_CLASSIFICATION	7.502437281435463E-5	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9996318253213058	WITHOUT_CLASSIFICATION	3.6817467869416963E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999801706473	WITHOUT_CLASSIFICATION	1.982935274142733E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999994082914073	WITHOUT_CLASSIFICATION	5.91708592661428E-7	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999982303307657	WITHOUT_CLASSIFICATION	1.769669234331817E-6	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9998679303247322	WITHOUT_CLASSIFICATION	1.320696752677773E-4	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.999391743493507	WITHOUT_CLASSIFICATION	6.082565064930927E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999976293715	WITHOUT_CLASSIFICATION	2.3706283944244247E-9	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998390493737	WITHOUT_CLASSIFICATION	1.609506261609864E-7	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9998398370157241	WITHOUT_CLASSIFICATION	1.60162984275884E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999954068179976	WITHOUT_CLASSIFICATION	4.593182002424587E-6	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999981665533121	WITHOUT_CLASSIFICATION	1.8334466879800505E-6	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989680436913114	WITHOUT_CLASSIFICATION	0.0010319563086885826	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9998898764021487	WITHOUT_CLASSIFICATION	1.1012359785129056E-4	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9996634371283561	WITHOUT_CLASSIFICATION	3.365628716438846E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.990516072436168	WITHOUT_CLASSIFICATION	0.009483927563832015	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997560361369914	WITHOUT_CLASSIFICATION	2.439638630086888E-4	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997809265454435	WITHOUT_CLASSIFICATION	2.1907345455656082E-4	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996587145172328	WITHOUT_CLASSIFICATION	3.412854827672318E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946212422958	WITHOUT_CLASSIFICATION	5.378757704187876E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322509745455	WITHOUT_CLASSIFICATION	6.774902545453462E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995191941778229	WITHOUT_CLASSIFICATION	4.808058221770762E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990681160232474	WITHOUT_CLASSIFICATION	9.318839767524902E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999350124500431	WITHOUT_CLASSIFICATION	6.49875499569138E-5	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9998733045447843	WITHOUT_CLASSIFICATION	1.2669545521563767E-4	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9985997724941041	WITHOUT_CLASSIFICATION	0.001400227505895799	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999923100160643	WITHOUT_CLASSIFICATION	7.689983935768128E-6	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988486476839669	WITHOUT_CLASSIFICATION	0.001151352316033086	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994441985215249	WITHOUT_CLASSIFICATION	5.558014784751139E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977495106804	WITHOUT_CLASSIFICATION	2.2504893195898286E-6	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997874837204328	WITHOUT_CLASSIFICATION	2.125162795672216E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584732373078	WITHOUT_CLASSIFICATION	4.152676269214102E-5	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998531470052221	WITHOUT_CLASSIFICATION	1.468529947778492E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999027545231264	WITHOUT_CLASSIFICATION	9.724547687359807E-5	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999991920001383	WITHOUT_CLASSIFICATION	8.079998616512843E-7	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999653624772675	WITHOUT_CLASSIFICATION	3.463752273250461E-5	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9993463214598546	WITHOUT_CLASSIFICATION	6.536785401453281E-4	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999954995507789	WITHOUT_CLASSIFICATION	4.500449221097545E-5	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999998026258465	WITHOUT_CLASSIFICATION	1.9737415345430755E-7	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999686669822948	WITHOUT_CLASSIFICATION	3.1333017705266947E-5	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999826755226552	WITHOUT_CLASSIFICATION	1.7324477344829173E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9999990681467672	WITHOUT_CLASSIFICATION	9.318532328603281E-7	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999941587439651	WITHOUT_CLASSIFICATION	5.841256034954232E-6	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999950227260381	WITHOUT_CLASSIFICATION	4.977273961939548E-6	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999980567451386	WITHOUT_CLASSIFICATION	1.943254861383396E-6	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999814079066125	WITHOUT_CLASSIFICATION	1.8592093387572358E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.999988536263451	WITHOUT_CLASSIFICATION	1.1463736549048434E-5	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9999758878081598	WITHOUT_CLASSIFICATION	2.4112191840182448E-5	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9996666791944893	WITHOUT_CLASSIFICATION	3.333208055106368E-4	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9999282103907339	WITHOUT_CLASSIFICATION	7.178960926611052E-5	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9993566540445847	WITHOUT_CLASSIFICATION	6.433459554152149E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9996527817433646	WITHOUT_CLASSIFICATION	3.472182566354336E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.999921757431401	WITHOUT_CLASSIFICATION	7.82425685989608E-5	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999984596243259	WITHOUT_CLASSIFICATION	1.5403756740976148E-5	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999781656402227	WITHOUT_CLASSIFICATION	2.1834359777348885E-5	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999705707170047	WITHOUT_CLASSIFICATION	2.9429282995281552E-5	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999587200208342	WITHOUT_CLASSIFICATION	4.127997916592041E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9936850951236246	WITHOUT_CLASSIFICATION	0.006314904876375457	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999999994250217	WITHOUT_CLASSIFICATION	5.749784279488327E-10	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999147576337158	WITHOUT_CLASSIFICATION	8.524236628414904E-5	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999724102995	WITHOUT_CLASSIFICATION	2.7589700445630897E-8	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999929307995453	WITHOUT_CLASSIFICATION	7.069200454734291E-6	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999963736523825	WITHOUT_CLASSIFICATION	3.6263476175966065E-6	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9775910137602329	WITHOUT_CLASSIFICATION	0.022408986239767146	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.999978347243808	WITHOUT_CLASSIFICATION	2.1652756192025673E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999292317791	WITHOUT_CLASSIFICATION	7.076822088794115E-7	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999859941116015	WITHOUT_CLASSIFICATION	1.4005888398605905E-5	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9996981697753882	WITHOUT_CLASSIFICATION	3.018302246118374E-4	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9990627151928666	WITHOUT_CLASSIFICATION	9.372848071333427E-4	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9990438426294574	WITHOUT_CLASSIFICATION	9.561573705425768E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999686669822948	WITHOUT_CLASSIFICATION	3.1333017705266947E-5	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999259670304697	WITHOUT_CLASSIFICATION	7.403296953026794E-5	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999998413084297	WITHOUT_CLASSIFICATION	1.5869157023857573E-7	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999345985886	WITHOUT_CLASSIFICATION	6.540141143111006E-8	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999927002580488	WITHOUT_CLASSIFICATION	7.2997419512608895E-6	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9998322757510495	WITHOUT_CLASSIFICATION	1.6772424895051906E-4	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999989384743028	WITHOUT_CLASSIFICATION	1.0615256972103677E-6	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9936850951236246	WITHOUT_CLASSIFICATION	0.006314904876375457	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9881273536384446	WITHOUT_CLASSIFICATION	0.011872646361555272	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9999996961344415	WITHOUT_CLASSIFICATION	3.038655584691326E-7	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998803910188725	WITHOUT_CLASSIFICATION	1.1960898112745308E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9995312500840128	WITHOUT_CLASSIFICATION	4.687499159871451E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997567810396142	WITHOUT_CLASSIFICATION	2.4321896038571758E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996041374726	WITHOUT_CLASSIFICATION	3.9586252744692196E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9933755126206539	WITHOUT_CLASSIFICATION	0.0066244873793459775	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999897446707751	WITHOUT_CLASSIFICATION	1.0255329224853304E-5	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999976159988747	WITHOUT_CLASSIFICATION	2.384001125356025E-6	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9999341404981227	WITHOUT_CLASSIFICATION	6.585950187730903E-5	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999989838398807	WITHOUT_CLASSIFICATION	1.0161601192701906E-6	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999965476689764	WITHOUT_CLASSIFICATION	3.452331023639367E-6	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999998135155524	WITHOUT_CLASSIFICATION	1.8648444748837376E-7	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9999981273030326	WITHOUT_CLASSIFICATION	1.8726969674633213E-6	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9999975864647115	WITHOUT_CLASSIFICATION	2.4135352885076408E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999973228191	WITHOUT_CLASSIFICATION	2.677180900414119E-8	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999995944810197	WITHOUT_CLASSIFICATION	4.05518980344032E-7	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9999995327876877	WITHOUT_CLASSIFICATION	4.672123122598844E-7	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9999285436636745	WITHOUT_CLASSIFICATION	7.145633632550895E-5	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9998738187103196	WITHOUT_CLASSIFICATION	1.2618128968052802E-4	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999958799243835	WITHOUT_CLASSIFICATION	4.120075616415394E-6	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9998525905144464	WITHOUT_CLASSIFICATION	1.4740948555351825E-4	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999991251244795	WITHOUT_CLASSIFICATION	8.748755204781605E-7	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.9753119734373926	WITHOUT_CLASSIFICATION	0.024688026562607365	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999997170801905	WITHOUT_CLASSIFICATION	2.8291980950317674E-7	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999996093199316	WITHOUT_CLASSIFICATION	3.906800684923848E-7	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999993532265597	WITHOUT_CLASSIFICATION	6.467734403042459E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999686669822948	WITHOUT_CLASSIFICATION	3.1333017705266947E-5	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9991405505467759	WITHOUT_CLASSIFICATION	8.594494532242226E-4	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999998976100919	WITHOUT_CLASSIFICATION	1.0238990814984875E-7	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999527638992963	WITHOUT_CLASSIFICATION	4.723610070372215E-5	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9999999522020017	WITHOUT_CLASSIFICATION	4.779799827563097E-8	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999999507777182	WITHOUT_CLASSIFICATION	4.922228183726069E-8	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9999980772610525	WITHOUT_CLASSIFICATION	1.92273894755366E-6	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999686669822948	WITHOUT_CLASSIFICATION	3.1333017705266947E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999464115082487	WITHOUT_CLASSIFICATION	5.3588491751239605E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999995944810197	WITHOUT_CLASSIFICATION	4.05518980344032E-7	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9990093519480981	WITHOUT_CLASSIFICATION	9.906480519018307E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999973228191	WITHOUT_CLASSIFICATION	2.677180900414119E-8	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999988932669	WITHOUT_CLASSIFICATION	1.106733110221326E-9	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9425127157852049	WITHOUT_CLASSIFICATION	0.05748728421479514	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9973015846426216	WITHOUT_CLASSIFICATION	0.00269841535737836	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9998803910188725	WITHOUT_CLASSIFICATION	1.1960898112745308E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9995312500840128	WITHOUT_CLASSIFICATION	4.687499159871451E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9997567810396142	WITHOUT_CLASSIFICATION	2.4321896038571758E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999569050216	WITHOUT_CLASSIFICATION	4.3094978245193753E-8	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9999982279609441	WITHOUT_CLASSIFICATION	1.7720390559444985E-6	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999999408288821	WITHOUT_CLASSIFICATION	5.917111784738265E-8	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999999973228191	WITHOUT_CLASSIFICATION	2.677180900414119E-8	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999988932669	WITHOUT_CLASSIFICATION	1.106733110221326E-9	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9999686669822948	WITHOUT_CLASSIFICATION	3.1333017705266947E-5	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999996041374726	WITHOUT_CLASSIFICATION	3.9586252744692196E-7	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9933755126206539	WITHOUT_CLASSIFICATION	0.0066244873793459775	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9999897446707751	WITHOUT_CLASSIFICATION	1.0255329224853304E-5	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999336489768692	WITHOUT_CLASSIFICATION	6.635102313077773E-5	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999562020894	WITHOUT_CLASSIFICATION	4.3797910732463275E-8	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999994048378548	WITHOUT_CLASSIFICATION	5.95162145234041E-7	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999999986194288	WITHOUT_CLASSIFICATION	1.3805712018856358E-8	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9999626900808681	WITHOUT_CLASSIFICATION	3.73099191318405E-5	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9839208868979948	WITHOUT_CLASSIFICATION	0.016079113102005153	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999027545231264	WITHOUT_CLASSIFICATION	9.724547687359807E-5	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9995018686696201	WITHOUT_CLASSIFICATION	4.981313303799108E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9992133942484952	WITHOUT_CLASSIFICATION	7.866057515048368E-4	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9996924063271778	WITHOUT_CLASSIFICATION	3.0759367282219574E-4	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999994749878272	WITHOUT_CLASSIFICATION	5.250121728588763E-7	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986047709472	WITHOUT_CLASSIFICATION	1.3952290528471205E-6	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999322509745455	WITHOUT_CLASSIFICATION	6.774902545453462E-5	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995191941778229	WITHOUT_CLASSIFICATION	4.808058221770762E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988486476839669	WITHOUT_CLASSIFICATION	0.001151352316033086	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9999986047709472	WITHOUT_CLASSIFICATION	1.3952290528471205E-6	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9996246212128811	WITHOUT_CLASSIFICATION	3.753787871189384E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999930653075602	WITHOUT_CLASSIFICATION	6.934692439831752E-6	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565280192809	WITHOUT_CLASSIFICATION	1.4347198071916343E-4	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999992441109221	WITHOUT_CLASSIFICATION	7.558890778954581E-6	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9998986768372076	WITHOUT_CLASSIFICATION	1.0132316279239758E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9999393036600928	WITHOUT_CLASSIFICATION	6.069633990718586E-5	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994441985215249	WITHOUT_CLASSIFICATION	5.558014784751139E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999584732373078	WITHOUT_CLASSIFICATION	4.152676269214102E-5	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.999999292317791	WITHOUT_CLASSIFICATION	7.076822088794115E-7	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9998015362921063	WITHOUT_CLASSIFICATION	1.9846370789365937E-4	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9999286622572563	WITHOUT_CLASSIFICATION	7.133774274361353E-5	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998293580308	WITHOUT_CLASSIFICATION	1.7064196917374363E-7	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999948878921653	WITHOUT_CLASSIFICATION	5.112107834735836E-6	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999997758609184	WITHOUT_CLASSIFICATION	2.2413908167747677E-7	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999999893478339	WITHOUT_CLASSIFICATION	1.0652166148715131E-8	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999921432170801	WITHOUT_CLASSIFICATION	7.8567829198827E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999801706473	WITHOUT_CLASSIFICATION	1.982935274142733E-8	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999948870645653	WITHOUT_CLASSIFICATION	5.112935434623692E-6	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9998989086478673	WITHOUT_CLASSIFICATION	1.0109135213253687E-4	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999781166916847	WITHOUT_CLASSIFICATION	2.1883308315382787E-5	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999565675452687	WITHOUT_CLASSIFICATION	4.3432454731271443E-5	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999639059715513	WITHOUT_CLASSIFICATION	3.6094028448689887E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999936867977864	WITHOUT_CLASSIFICATION	6.313202213610238E-5	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999886444579869	WITHOUT_CLASSIFICATION	1.1355542013032462E-5	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999943489426751	WITHOUT_CLASSIFICATION	5.651057324956342E-6	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999891871935005	WITHOUT_CLASSIFICATION	1.0812806499402786E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9964174301578835	WITHOUT_CLASSIFICATION	0.00358256984211657	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999766109902375	WITHOUT_CLASSIFICATION	2.3389009762603895E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999868005908829	WITHOUT_CLASSIFICATION	1.3199409117117949E-5	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999987753923218	WITHOUT_CLASSIFICATION	1.224607678128006E-6	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999926021248154	WITHOUT_CLASSIFICATION	7.397875184552303E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999671035087	WITHOUT_CLASSIFICATION	3.28964912802996E-8	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999770323941533	WITHOUT_CLASSIFICATION	2.296760584670236E-4	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999639827340435	WITHOUT_CLASSIFICATION	3.601726595656366E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998983489425	WITHOUT_CLASSIFICATION	1.016510574986813E-6	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9996408180272822	WITHOUT_CLASSIFICATION	3.5918197271773126E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999104137303649	WITHOUT_CLASSIFICATION	8.958626963501598E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999864589581815	WITHOUT_CLASSIFICATION	1.3541041818504844E-5	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9996470838974951	WITHOUT_CLASSIFICATION	3.529161025048501E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999651763869	WITHOUT_CLASSIFICATION	3.4823613124232854E-8	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999819704855077	WITHOUT_CLASSIFICATION	1.8029514492198905E-5	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999957111477987	WITHOUT_CLASSIFICATION	4.288852201279088E-6	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999939949535822	WITHOUT_CLASSIFICATION	6.005046417841929E-6	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999917780191271	WITHOUT_CLASSIFICATION	8.221980872980017E-6	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999989700706179	WITHOUT_CLASSIFICATION	1.0299293821683344E-6	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9999996779146955	WITHOUT_CLASSIFICATION	3.220853044738928E-7	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9999325399933308	WITHOUT_CLASSIFICATION	6.746000666929067E-5	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999622432031202	WITHOUT_CLASSIFICATION	3.7756796879739735E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9992096888482161	WITHOUT_CLASSIFICATION	7.903111517838393E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997632474450452	WITHOUT_CLASSIFICATION	2.3675255495482102E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999907896063913	WITHOUT_CLASSIFICATION	9.210393608676294E-6	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.999998501523644	WITHOUT_CLASSIFICATION	1.4984763559247599E-6	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999756912856389	WITHOUT_CLASSIFICATION	2.430871436114893E-5	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999993969668488	WITHOUT_CLASSIFICATION	6.030331511736946E-7	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9998504900592698	WITHOUT_CLASSIFICATION	1.4950994073017175E-4	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999980363914697	WITHOUT_CLASSIFICATION	1.9636085303965283E-6	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999433838124411	WITHOUT_CLASSIFICATION	5.66161875590347E-5	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9998933247370979	WITHOUT_CLASSIFICATION	1.0667526290208255E-4	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999890002507197	WITHOUT_CLASSIFICATION	1.0999749280421251E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.8986270435512977	WITHOUT_CLASSIFICATION	0.10137295644870233	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999999351101617	WITHOUT_CLASSIFICATION	6.488983825435501E-8	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9997967916569692	WITHOUT_CLASSIFICATION	2.0320834303077647E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9998962960821705	WITHOUT_CLASSIFICATION	1.0370391782961832E-4	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999694216422101	WITHOUT_CLASSIFICATION	3.0578357789906695E-5	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.999999657650634	WITHOUT_CLASSIFICATION	3.423493659204841E-7	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999926118219243	WITHOUT_CLASSIFICATION	7.388178075676052E-6	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9999983462143976	WITHOUT_CLASSIFICATION	1.6537856022991363E-6	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999926074601058	WITHOUT_CLASSIFICATION	7.392539894196748E-5	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999993416947562	WITHOUT_CLASSIFICATION	6.583052437832448E-7	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999700601594872	WITHOUT_CLASSIFICATION	2.9939840512828367E-5	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999769112347	WITHOUT_CLASSIFICATION	2.308876535054499E-8	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999996294944247	WITHOUT_CLASSIFICATION	3.70505575231904E-7	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9825199345814545	WITHOUT_CLASSIFICATION	0.017480065418545576	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998940287834512	WITHOUT_CLASSIFICATION	1.0597121654880667E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999347917161748	WITHOUT_CLASSIFICATION	6.520828382510116E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999974055982611	WITHOUT_CLASSIFICATION	2.594401738839456E-6	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999998367149469	WITHOUT_CLASSIFICATION	1.6328505317194303E-7	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9998904831823088	WITHOUT_CLASSIFICATION	1.0951681769127676E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999994829874436	WITHOUT_CLASSIFICATION	5.170125565068553E-7	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9996395108648405	WITHOUT_CLASSIFICATION	3.6048913515946356E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.8355887990180766	WITHOUT_CLASSIFICATION	0.1644112009819235	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9999826679096624	WITHOUT_CLASSIFICATION	1.733209033765022E-5	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7628241842275031	WITHOUT_CLASSIFICATION	0.2371758157724969	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999663362688	WITHOUT_CLASSIFICATION	3.3663731243047376E-8	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.997098368689843	WITHOUT_CLASSIFICATION	0.0029016313101570042	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.99999062262308	WITHOUT_CLASSIFICATION	9.377376919961143E-6	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999763483787277	WITHOUT_CLASSIFICATION	2.3651621272214583E-5	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9986923451713208	WITHOUT_CLASSIFICATION	0.0013076548286792744	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9998525278342659	WITHOUT_CLASSIFICATION	1.474721657340643E-4	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999660304529332	WITHOUT_CLASSIFICATION	3.396954706676236E-5	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999996374258935	WITHOUT_CLASSIFICATION	3.625741064642844E-7	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999940905720602	WITHOUT_CLASSIFICATION	5.909427939694337E-6	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9999505799028482	WITHOUT_CLASSIFICATION	4.942009715192545E-5	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999964420423472	WITHOUT_CLASSIFICATION	3.557957652778949E-6	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999855453057392	WITHOUT_CLASSIFICATION	1.4454694260793509E-5	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999997310554087	WITHOUT_CLASSIFICATION	2.6894459131774985E-7	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9998804798994755	WITHOUT_CLASSIFICATION	1.1952010052459714E-4	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9999649823946614	WITHOUT_CLASSIFICATION	3.501760533864455E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999933948895331	WITHOUT_CLASSIFICATION	6.605110466960393E-6	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9836862212907271	WITHOUT_CLASSIFICATION	0.016313778709272853	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999984938791798	WITHOUT_CLASSIFICATION	1.506120820147134E-6	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9999909658309657	WITHOUT_CLASSIFICATION	9.034169034238257E-6	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9999999125993986	WITHOUT_CLASSIFICATION	8.74006013907984E-8	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9999959735368664	WITHOUT_CLASSIFICATION	4.0264631335722736E-6	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.999943131689745	WITHOUT_CLASSIFICATION	5.686831025487769E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9989222362412697	WITHOUT_CLASSIFICATION	0.0010777637587301998	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9999999251373057	WITHOUT_CLASSIFICATION	7.486269421509391E-8	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998193322833832	WITHOUT_CLASSIFICATION	1.806677166169204E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9997102647410436	WITHOUT_CLASSIFICATION	2.8973525895639485E-4	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999955237108934	WITHOUT_CLASSIFICATION	4.47628910665143E-6	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9998193322833832	WITHOUT_CLASSIFICATION	1.806677166169204E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999852469439142	WITHOUT_CLASSIFICATION	1.4753056085721678E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999972741554414	WITHOUT_CLASSIFICATION	2.7258445585769432E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999915120895464	WITHOUT_CLASSIFICATION	8.487910453652157E-6	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999917918725952	WITHOUT_CLASSIFICATION	8.208127404798312E-6	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9999997280379408	WITHOUT_CLASSIFICATION	2.7196205915489756E-7	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999993421345093	WITHOUT_CLASSIFICATION	6.578654907083138E-7	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9996288803655414	WITHOUT_CLASSIFICATION	3.711196344586049E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9999973752186085	WITHOUT_CLASSIFICATION	2.624781391409815E-6	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9997413922779288	WITHOUT_CLASSIFICATION	2.586077220711813E-4	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9997218245569589	WITHOUT_CLASSIFICATION	2.7817544304103216E-4	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999986684767693	WITHOUT_CLASSIFICATION	1.3315232306539214E-6	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999929566263538	WITHOUT_CLASSIFICATION	7.043373646083902E-6	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9964228738681619	WITHOUT_CLASSIFICATION	0.003577126131837987	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999236535745	WITHOUT_CLASSIFICATION	7.634642551541042E-8	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999961402706599	WITHOUT_CLASSIFICATION	3.859729340177902E-6	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9898159143318884	WITHOUT_CLASSIFICATION	0.010184085668111584	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998110162561304	WITHOUT_CLASSIFICATION	1.8898374386968345E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9998110162561304	WITHOUT_CLASSIFICATION	1.8898374386968345E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999648052599	WITHOUT_CLASSIFICATION	3.51947400931177E-7	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999967122571072	WITHOUT_CLASSIFICATION	3.2877428928063115E-6	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9999993242827488	WITHOUT_CLASSIFICATION	6.757172512337035E-7	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9998584568945916	WITHOUT_CLASSIFICATION	1.4154310540844098E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999979640186345	WITHOUT_CLASSIFICATION	2.035981365552939E-6	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9833140037774483	WITHOUT_CLASSIFICATION	0.016685996222551746	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999997913298537	WITHOUT_CLASSIFICATION	2.086701462278386E-7	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999865115201662	WITHOUT_CLASSIFICATION	1.3488479833811467E-5	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9996135838972136	WITHOUT_CLASSIFICATION	3.864161027864001E-4	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9998823806485451	WITHOUT_CLASSIFICATION	1.1761935145496999E-4	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9999447502287062	WITHOUT_CLASSIFICATION	5.524977129383005E-5	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.999999973963852	WITHOUT_CLASSIFICATION	2.6036148052025104E-8	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999873696130476	WITHOUT_CLASSIFICATION	1.2630386952304696E-5	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9997448923620659	WITHOUT_CLASSIFICATION	2.551076379342031E-4	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997254304913479	WITHOUT_CLASSIFICATION	2.7456950865220565E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.999936867977864	WITHOUT_CLASSIFICATION	6.313202213610238E-5	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999993153965006	WITHOUT_CLASSIFICATION	6.84603499367547E-7	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999996771730385	WITHOUT_CLASSIFICATION	3.2282696155032596E-7	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999977761009522	WITHOUT_CLASSIFICATION	2.2238990477894453E-6	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999967887190724	WITHOUT_CLASSIFICATION	3.2112809275907958E-6	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999981672194286	WITHOUT_CLASSIFICATION	1.8327805714345662E-6	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.999995999310748	WITHOUT_CLASSIFICATION	4.000689251997872E-6	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9999399633767215	WITHOUT_CLASSIFICATION	6.003662327842532E-5	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999996798851343	WITHOUT_CLASSIFICATION	3.2011486579001116E-7	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999939375624927	WITHOUT_CLASSIFICATION	6.062437507418272E-6	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999126571117828	WITHOUT_CLASSIFICATION	8.734288821720925E-5	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999999878333162	WITHOUT_CLASSIFICATION	1.2166683862879703E-8	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9992409303314276	WITHOUT_CLASSIFICATION	7.590696685723355E-4	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9903466684410059	WITHOUT_CLASSIFICATION	0.009653331558994071	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999967683057938	WITHOUT_CLASSIFICATION	3.2316942062736355E-6	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999992391886299	WITHOUT_CLASSIFICATION	7.608113701297989E-7	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999993148922559	WITHOUT_CLASSIFICATION	6.851077441750333E-7	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9997713874992212	WITHOUT_CLASSIFICATION	2.2861250077875337E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999970583017647	WITHOUT_CLASSIFICATION	2.9416982353533336E-6	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9999408276573547	WITHOUT_CLASSIFICATION	5.9172342645448665E-5	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9999997029881746	WITHOUT_CLASSIFICATION	2.970118254171882E-7	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999990034664129	WITHOUT_CLASSIFICATION	9.965335870797446E-7	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9999450882858203	WITHOUT_CLASSIFICATION	5.491171417965383E-5	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999357081049	WITHOUT_CLASSIFICATION	6.429189513886849E-8	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999458480695251	WITHOUT_CLASSIFICATION	5.415193047484373E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9995103362274118	WITHOUT_CLASSIFICATION	4.896637725882003E-4	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9999934532203879	WITHOUT_CLASSIFICATION	6.546779612143413E-6	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999971053665361	WITHOUT_CLASSIFICATION	2.8946334640414894E-6	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999596234059643	WITHOUT_CLASSIFICATION	4.037659403565374E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999971459300563	WITHOUT_CLASSIFICATION	2.854069943705241E-6	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999976920134585	WITHOUT_CLASSIFICATION	2.307986541554925E-6	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994225510292465	WITHOUT_CLASSIFICATION	5.774489707535412E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999989911464922	WITHOUT_CLASSIFICATION	1.0088535078914285E-6	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999903359292134	WITHOUT_CLASSIFICATION	9.664070786638591E-6	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.7372152627025849	DESIGN	0.262784737297415	WITHOUT_CLASSIFICATION
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999780030820679	WITHOUT_CLASSIFICATION	2.1996917932189665E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997995421372	WITHOUT_CLASSIFICATION	2.0045786281688054E-7	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9826306995624591	WITHOUT_CLASSIFICATION	0.017369300437540966	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9990862520830759	WITHOUT_CLASSIFICATION	9.137479169239807E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999474107646439	WITHOUT_CLASSIFICATION	5.258923535611561E-5	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9990862520830759	WITHOUT_CLASSIFICATION	9.137479169239807E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999689136604197	WITHOUT_CLASSIFICATION	3.108633958023151E-5	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999920786691984	WITHOUT_CLASSIFICATION	7.921330801562166E-6	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9999702905604221	WITHOUT_CLASSIFICATION	2.9709439577895242E-5	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9994184599957674	WITHOUT_CLASSIFICATION	5.815400042325771E-4	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.999985915694339	WITHOUT_CLASSIFICATION	1.4084305660892861E-5	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999907809710921	WITHOUT_CLASSIFICATION	9.219028908005383E-6	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999530944404416	WITHOUT_CLASSIFICATION	4.690555955842018E-5	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9999775823457249	WITHOUT_CLASSIFICATION	2.2417654275105464E-5	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999927937097333	WITHOUT_CLASSIFICATION	7.206290266788536E-6	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9998681435795386	WITHOUT_CLASSIFICATION	1.3185642046139033E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9997499118260971	WITHOUT_CLASSIFICATION	2.5008817390290096E-4	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9944169541500109	WITHOUT_CLASSIFICATION	0.005583045849989097	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999981850471971	WITHOUT_CLASSIFICATION	1.8149528029622045E-6	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9992577068434783	WITHOUT_CLASSIFICATION	7.422931565216619E-4	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9726043760989961	WITHOUT_CLASSIFICATION	0.02739562390100383	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9993091190546171	WITHOUT_CLASSIFICATION	6.908809453829771E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999951735850564	WITHOUT_CLASSIFICATION	4.826414943597227E-6	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999951735850564	WITHOUT_CLASSIFICATION	4.826414943597227E-6	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9997815768063053	WITHOUT_CLASSIFICATION	2.1842319369464654E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9999972267641644	WITHOUT_CLASSIFICATION	2.773235835669301E-6	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999346675204	WITHOUT_CLASSIFICATION	6.533247966926018E-8	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999997022504035	WITHOUT_CLASSIFICATION	2.977495965177347E-7	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9991924238943516	WITHOUT_CLASSIFICATION	8.075761056483189E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999964583117957	WITHOUT_CLASSIFICATION	3.541688204327302E-6	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.999028978293305	WITHOUT_CLASSIFICATION	9.710217066950585E-4	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999868722715226	WITHOUT_CLASSIFICATION	1.3127728477461433E-5	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999967607041856	WITHOUT_CLASSIFICATION	3.2392958143488924E-6	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999981595342	WITHOUT_CLASSIFICATION	1.840465803471788E-9	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999789903770437	WITHOUT_CLASSIFICATION	2.100962295624347E-5	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999505268501674	WITHOUT_CLASSIFICATION	4.947314983271149E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999012773312	WITHOUT_CLASSIFICATION	9.872266882644793E-8	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999992465904427	WITHOUT_CLASSIFICATION	7.534095572390889E-7	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9980831776359702	WITHOUT_CLASSIFICATION	0.0019168223640298352	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.999976205753137	WITHOUT_CLASSIFICATION	2.379424686297519E-5	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9993003032219617	WITHOUT_CLASSIFICATION	6.996967780383727E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9969235819984167	WITHOUT_CLASSIFICATION	0.003076418001583279	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.999981071390826	WITHOUT_CLASSIFICATION	1.8928609173985726E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999997766909944	WITHOUT_CLASSIFICATION	2.2330900566202827E-7	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999994717535204	WITHOUT_CLASSIFICATION	5.282464794645222E-7	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999963521352155	WITHOUT_CLASSIFICATION	3.6478647845917148E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9998991483112434	WITHOUT_CLASSIFICATION	1.0085168875659797E-4	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999881549645541	WITHOUT_CLASSIFICATION	1.1845035445994758E-5	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9999835509669466	WITHOUT_CLASSIFICATION	1.6449033053358994E-5	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9999961443450157	WITHOUT_CLASSIFICATION	3.855654984241487E-6	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999998682067962	WITHOUT_CLASSIFICATION	1.3179320372834364E-7	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9982913716910089	WITHOUT_CLASSIFICATION	0.0017086283089910426	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9999837997040498	WITHOUT_CLASSIFICATION	1.6200295950220304E-5	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999778281438702	WITHOUT_CLASSIFICATION	2.217185612986419E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999734792865324	WITHOUT_CLASSIFICATION	2.652071346759695E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997806550608074	WITHOUT_CLASSIFICATION	2.1934493919268722E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999963992415567	WITHOUT_CLASSIFICATION	3.6007584432854578E-6	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999634441653574	WITHOUT_CLASSIFICATION	3.6555834642630954E-5	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9985643383555002	WITHOUT_CLASSIFICATION	0.001435661644499866	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999996051978502	WITHOUT_CLASSIFICATION	3.9480214969749524E-7	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999961201084564	WITHOUT_CLASSIFICATION	3.8798915436152765E-6	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9955952853333331	WITHOUT_CLASSIFICATION	0.00440471466666691	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9943285615422189	WITHOUT_CLASSIFICATION	0.005671438457781042	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999569635739	WITHOUT_CLASSIFICATION	4.30364261377259E-8	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999998823337257	WITHOUT_CLASSIFICATION	1.1766627421244452E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999946901223916	WITHOUT_CLASSIFICATION	5.309877608368251E-6	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9999787164939871	WITHOUT_CLASSIFICATION	2.1283506013024307E-5	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999898656514966	WITHOUT_CLASSIFICATION	1.0134348503444642E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.99999999970523	WITHOUT_CLASSIFICATION	2.947699168734474E-10	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9999526641993126	WITHOUT_CLASSIFICATION	4.733580068741994E-5	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9694197760254057	DESIGN	0.03058022397459424	WITHOUT_CLASSIFICATION
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999989363807036	WITHOUT_CLASSIFICATION	1.063619296410245E-6	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999996599824291	WITHOUT_CLASSIFICATION	3.400175708885644E-7	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9999138564386129	WITHOUT_CLASSIFICATION	8.61435613871652E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997223861198	WITHOUT_CLASSIFICATION	2.776138801997077E-6	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999997484985993	WITHOUT_CLASSIFICATION	2.5150140074011615E-7	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9999999865094416	WITHOUT_CLASSIFICATION	1.3490558424799091E-8	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9999599009811159	WITHOUT_CLASSIFICATION	4.009901888421899E-5	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9999572968758315	WITHOUT_CLASSIFICATION	4.2703124168566584E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999464115082487	WITHOUT_CLASSIFICATION	5.3588491751239605E-5	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9999464115082487	WITHOUT_CLASSIFICATION	5.3588491751239605E-5	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999942346848	WITHOUT_CLASSIFICATION	5.765315259692625E-9	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.999991334160594	WITHOUT_CLASSIFICATION	8.665839405930898E-6	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999947220294463	WITHOUT_CLASSIFICATION	5.2779705536470564E-6	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999944619372343	WITHOUT_CLASSIFICATION	5.538062765720739E-6	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999998983379992	WITHOUT_CLASSIFICATION	1.0166200076785977E-7	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9999999447515917	WITHOUT_CLASSIFICATION	5.5248408372804535E-8	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9999995036203416	WITHOUT_CLASSIFICATION	4.963796584367305E-7	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999587269467952	WITHOUT_CLASSIFICATION	4.127305320481808E-5	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.999983482206706	WITHOUT_CLASSIFICATION	1.651779329402565E-5	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999555999786875	WITHOUT_CLASSIFICATION	4.440002131241139E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999999595102875	WITHOUT_CLASSIFICATION	4.048971236698783E-8	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999999721691882	WITHOUT_CLASSIFICATION	2.783081179152083E-7	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9999874955960572	WITHOUT_CLASSIFICATION	1.2504403942818255E-5	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999988204687691	WITHOUT_CLASSIFICATION	1.1795312309123744E-6	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999944139270159	WITHOUT_CLASSIFICATION	5.586072984040816E-6	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.986606613251527	DESIGN	0.013393386748473065	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9997106870297524	WITHOUT_CLASSIFICATION	2.8931297024768657E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999529135681	WITHOUT_CLASSIFICATION	4.7086431897682166E-8	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9999754026713279	WITHOUT_CLASSIFICATION	2.4597328672187745E-5	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9999982738702227	WITHOUT_CLASSIFICATION	1.7261297773969332E-6	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9996538026692373	WITHOUT_CLASSIFICATION	3.4619733076267026E-4	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.999820258378752	WITHOUT_CLASSIFICATION	1.7974162124798938E-4	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999997884023415	WITHOUT_CLASSIFICATION	2.1159765859314524E-7	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999960942206528	WITHOUT_CLASSIFICATION	3.9057793472476924E-6	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9941870247861723	WITHOUT_CLASSIFICATION	0.005812975213827668	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9987991958621342	WITHOUT_CLASSIFICATION	0.001200804137865858	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9205505653940748	DESIGN	0.07944943460592532	WITHOUT_CLASSIFICATION
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999751838390842	WITHOUT_CLASSIFICATION	2.4816160915781894E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99998114059055	WITHOUT_CLASSIFICATION	1.8859409449995732E-5	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9997669754501947	WITHOUT_CLASSIFICATION	2.330245498054259E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999960942206528	WITHOUT_CLASSIFICATION	3.9057793472476924E-6	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9984426715363569	WITHOUT_CLASSIFICATION	0.0015573284636431195	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.999951947124078	WITHOUT_CLASSIFICATION	4.805287592202136E-5	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9999274983962788	WITHOUT_CLASSIFICATION	7.250160372119115E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999835146961514	WITHOUT_CLASSIFICATION	1.6485303848602243E-5	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999999717817367	WITHOUT_CLASSIFICATION	2.821826327587503E-8	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5862481473312181	DESIGN	0.41375185266878184	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9981548134573127	WITHOUT_CLASSIFICATION	0.0018451865426872363	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999357534864	WITHOUT_CLASSIFICATION	6.424651359102035E-7	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999924412412624	WITHOUT_CLASSIFICATION	7.558758737577106E-6	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9999835146961514	WITHOUT_CLASSIFICATION	1.6485303848602243E-5	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9999973772972286	WITHOUT_CLASSIFICATION	2.622702771496198E-6	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999999357534864	WITHOUT_CLASSIFICATION	6.424651359102035E-7	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9998003549094288	WITHOUT_CLASSIFICATION	1.9964509057122628E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999932929319458	WITHOUT_CLASSIFICATION	6.707068054088882E-6	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999989145605495	WITHOUT_CLASSIFICATION	1.0854394504973398E-6	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999789903770437	WITHOUT_CLASSIFICATION	2.100962295624347E-5	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999449234246	WITHOUT_CLASSIFICATION	5.5076575436613996E-8	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999987438006582	WITHOUT_CLASSIFICATION	1.2561993417897079E-6	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999539440283136	WITHOUT_CLASSIFICATION	4.605597168640381E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9996037472828702	WITHOUT_CLASSIFICATION	3.9625271712984887E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999999775114053	WITHOUT_CLASSIFICATION	2.2488594670743295E-8	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9998691551498692	WITHOUT_CLASSIFICATION	1.308448501308477E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999804531530021	WITHOUT_CLASSIFICATION	1.9546846997880052E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999962913106611	WITHOUT_CLASSIFICATION	3.7086893387552423E-6	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999815529318772	WITHOUT_CLASSIFICATION	1.8447068122858708E-5	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9998900689184206	WITHOUT_CLASSIFICATION	1.0993108157931485E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999975083960018	WITHOUT_CLASSIFICATION	2.491603998246205E-6	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.99990251963763	WITHOUT_CLASSIFICATION	9.748036236998413E-5	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999053680451961	WITHOUT_CLASSIFICATION	9.463195480396546E-5	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9995962847571763	WITHOUT_CLASSIFICATION	4.037152428236472E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999983806751155	WITHOUT_CLASSIFICATION	1.6193248844455552E-6	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9995112972327306	WITHOUT_CLASSIFICATION	4.887027672694375E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9999879656338	WITHOUT_CLASSIFICATION	1.2034366200021853E-5	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9999974263773747	WITHOUT_CLASSIFICATION	2.573622625320743E-6	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9999688022665454	WITHOUT_CLASSIFICATION	3.11977334547257E-5	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9999883377034832	WITHOUT_CLASSIFICATION	1.1662296516772715E-5	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999952396170536	WITHOUT_CLASSIFICATION	4.760382946310968E-6	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999997143643904	WITHOUT_CLASSIFICATION	2.8563560961090035E-7	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999999822466167	WITHOUT_CLASSIFICATION	1.7753383278699707E-8	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999747721972806	WITHOUT_CLASSIFICATION	2.522780271937577E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999999661451961	WITHOUT_CLASSIFICATION	3.3854803910641207E-7	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9992745528073875	WITHOUT_CLASSIFICATION	7.254471926124415E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9999929547382373	WITHOUT_CLASSIFICATION	7.045261762720432E-6	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997392538478	WITHOUT_CLASSIFICATION	2.607461522972069E-7	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9953077189047193	WITHOUT_CLASSIFICATION	0.004692281095280766	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9521544668228494	WITHOUT_CLASSIFICATION	0.047845533177150554	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999231089979985	WITHOUT_CLASSIFICATION	7.689100200154203E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999504405352843	WITHOUT_CLASSIFICATION	4.955946471575254E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999991818451132	WITHOUT_CLASSIFICATION	8.181548867712391E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999991818451132	WITHOUT_CLASSIFICATION	8.181548867712391E-7	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999728712821047	WITHOUT_CLASSIFICATION	2.71287178952819E-5	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.999532554946558	WITHOUT_CLASSIFICATION	4.6744505344199105E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999999046464099	WITHOUT_CLASSIFICATION	9.535359013548537E-8	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999477692736173	WITHOUT_CLASSIFICATION	5.2230726382850367E-5	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.999986544074486	WITHOUT_CLASSIFICATION	1.345592551402394E-5	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9101877113033245	WITHOUT_CLASSIFICATION	0.08981228869667553	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9942636234474262	WITHOUT_CLASSIFICATION	0.005736376552573728	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998936578889553	WITHOUT_CLASSIFICATION	1.0634211104471876E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999924314094664	WITHOUT_CLASSIFICATION	7.568590533615448E-6	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9999984826337139	WITHOUT_CLASSIFICATION	1.5173662861070757E-6	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999995869365388	WITHOUT_CLASSIFICATION	4.130634613104377E-7	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999981449409954	WITHOUT_CLASSIFICATION	1.8550590046119677E-6	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9998683596176224	WITHOUT_CLASSIFICATION	1.316403823776629E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999991818451132	WITHOUT_CLASSIFICATION	8.181548867712391E-7	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999228137070966	WITHOUT_CLASSIFICATION	7.718629290340357E-5	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9989476151120533	WITHOUT_CLASSIFICATION	0.0010523848879467643	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9975659841446107	WITHOUT_CLASSIFICATION	0.002434015855389372	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999477405363832	WITHOUT_CLASSIFICATION	5.2259463616740995E-5	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999975002840925	WITHOUT_CLASSIFICATION	2.4997159074041344E-6	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9999073333598729	WITHOUT_CLASSIFICATION	9.266664012711764E-5	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999825478177725	WITHOUT_CLASSIFICATION	1.7452182227489203E-5	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999991771006762	WITHOUT_CLASSIFICATION	8.228993237688028E-7	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9995212302192843	WITHOUT_CLASSIFICATION	4.7876978071568967E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.995030067381901	WITHOUT_CLASSIFICATION	0.004969932618098938	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9998641776067303	WITHOUT_CLASSIFICATION	1.35822393269631E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997392538478	WITHOUT_CLASSIFICATION	2.607461522972069E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999991818451132	WITHOUT_CLASSIFICATION	8.181548867712391E-7	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999374076494	WITHOUT_CLASSIFICATION	6.259235055004714E-8	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998411148446	WITHOUT_CLASSIFICATION	1.5888515536094508E-7	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9999397911331567	WITHOUT_CLASSIFICATION	6.0208866843298365E-5	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999607385645223	WITHOUT_CLASSIFICATION	3.92614354777353E-5	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9953003367649385	WITHOUT_CLASSIFICATION	0.004699663235061636	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9999996815373764	WITHOUT_CLASSIFICATION	3.1846262360864923E-7	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993838851842519	WITHOUT_CLASSIFICATION	6.161148157480946E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999681372117	WITHOUT_CLASSIFICATION	3.186278822842155E-8	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999999684274308	WITHOUT_CLASSIFICATION	3.157256921097949E-7	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999826135595691	WITHOUT_CLASSIFICATION	1.7386440430922973E-5	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999970264068041	WITHOUT_CLASSIFICATION	2.973593195851393E-6	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998512266543914	WITHOUT_CLASSIFICATION	1.487733456086039E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999755514230637	WITHOUT_CLASSIFICATION	2.4448576936254003E-5	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9992517301933087	WITHOUT_CLASSIFICATION	7.482698066912926E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9999689136604197	WITHOUT_CLASSIFICATION	3.108633958023151E-5	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999988517090018	WITHOUT_CLASSIFICATION	1.1482909982519494E-6	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999994433373832	WITHOUT_CLASSIFICATION	5.566626167679055E-7	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9999992141565979	WITHOUT_CLASSIFICATION	7.858434020456982E-7	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9999958416419827	WITHOUT_CLASSIFICATION	4.158358017319351E-6	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999996505777863	WITHOUT_CLASSIFICATION	3.494222136401014E-7	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992758774935702	WITHOUT_CLASSIFICATION	7.241225064298071E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992758774935702	WITHOUT_CLASSIFICATION	7.241225064298071E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9979249749694156	WITHOUT_CLASSIFICATION	0.002075025030584357	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9989777846378037	WITHOUT_CLASSIFICATION	0.001022215362196288	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999966350943504	WITHOUT_CLASSIFICATION	3.3649056494969104E-6	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9999465026779899	WITHOUT_CLASSIFICATION	5.349732201007509E-5	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999561221739666	WITHOUT_CLASSIFICATION	4.3877826033412705E-5	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999976860398344	WITHOUT_CLASSIFICATION	2.3139601655162895E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9937718754631334	WITHOUT_CLASSIFICATION	0.006228124536866612	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999873498917	WITHOUT_CLASSIFICATION	1.2650108203621576E-8	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999873498917	WITHOUT_CLASSIFICATION	1.2650108203621576E-8	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999704379820137	WITHOUT_CLASSIFICATION	2.9562017986410046E-5	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.999994844004836	WITHOUT_CLASSIFICATION	5.1559951640178174E-6	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999877964982765	WITHOUT_CLASSIFICATION	1.2203501723520418E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997258122517865	WITHOUT_CLASSIFICATION	2.7418774821357845E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997258122517865	WITHOUT_CLASSIFICATION	2.7418774821357845E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9997258122517865	WITHOUT_CLASSIFICATION	2.7418774821357845E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999981238730081	WITHOUT_CLASSIFICATION	1.87612699187395E-6	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999118387793254	WITHOUT_CLASSIFICATION	8.816122067459209E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999996432487018	WITHOUT_CLASSIFICATION	3.5675129815222374E-7	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999487420697105	WITHOUT_CLASSIFICATION	5.125793028949352E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9997987790182044	WITHOUT_CLASSIFICATION	2.0122098179564007E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999991818451132	WITHOUT_CLASSIFICATION	8.181548867712391E-7	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999991818451132	WITHOUT_CLASSIFICATION	8.181548867712391E-7	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9975103329955729	WITHOUT_CLASSIFICATION	0.002489667004427021	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9991332157507651	WITHOUT_CLASSIFICATION	8.667842492348432E-4	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9996306515178195	WITHOUT_CLASSIFICATION	3.693484821804588E-4	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999955783657046	WITHOUT_CLASSIFICATION	4.421634295358051E-6	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999215570227912	WITHOUT_CLASSIFICATION	7.844297720879486E-5	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9998907106992203	WITHOUT_CLASSIFICATION	1.0928930077968427E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999886292657358	WITHOUT_CLASSIFICATION	1.1370734264192135E-5	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.993675976816318	WITHOUT_CLASSIFICATION	0.006324023183681984	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9995608563669021	WITHOUT_CLASSIFICATION	4.39143633097941E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999983013406192	WITHOUT_CLASSIFICATION	1.6986593807488406E-6	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999463639448	WITHOUT_CLASSIFICATION	5.3636055183539604E-8	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999898267811962	WITHOUT_CLASSIFICATION	1.0173218803847305E-5	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999835826162289	WITHOUT_CLASSIFICATION	1.6417383771132253E-5	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999835826162289	WITHOUT_CLASSIFICATION	1.6417383771132253E-5	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999804829623883	WITHOUT_CLASSIFICATION	1.9517037611715225E-5	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999804829623883	WITHOUT_CLASSIFICATION	1.9517037611715225E-5	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999909662489487	WITHOUT_CLASSIFICATION	9.033751051336118E-6	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999960799674812	WITHOUT_CLASSIFICATION	3.9200325188774916E-6	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999960799674812	WITHOUT_CLASSIFICATION	3.9200325188774916E-6	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999978060147683	WITHOUT_CLASSIFICATION	2.1939852316263635E-6	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999802232311306	WITHOUT_CLASSIFICATION	1.9776768869444266E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999995480122255	WITHOUT_CLASSIFICATION	4.519877744932787E-6	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9992758774935702	WITHOUT_CLASSIFICATION	7.241225064298071E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999986260487342	WITHOUT_CLASSIFICATION	1.373951265780002E-6	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999802232311306	WITHOUT_CLASSIFICATION	1.9776768869444266E-5	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999944405642236	WITHOUT_CLASSIFICATION	5.5594357764484724E-6	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9985205284967734	WITHOUT_CLASSIFICATION	0.0014794715032265906	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999993358070937	WITHOUT_CLASSIFICATION	6.641929062423508E-7	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999979484359841	WITHOUT_CLASSIFICATION	2.051564015867408E-6	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999998132243022	WITHOUT_CLASSIFICATION	1.8677569779542124E-7	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.999995719252369	WITHOUT_CLASSIFICATION	4.280747631007293E-6	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999813396707044	WITHOUT_CLASSIFICATION	1.8660329295649722E-5	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9915292483963345	WITHOUT_CLASSIFICATION	0.008470751603665477	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999988609208411	WITHOUT_CLASSIFICATION	1.1390791589811524E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9987044776279079	WITHOUT_CLASSIFICATION	0.0012955223720921363	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999813710347	WITHOUT_CLASSIFICATION	1.8628965235264542E-8	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999822743150831	WITHOUT_CLASSIFICATION	1.7725684916951477E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999936066038573	WITHOUT_CLASSIFICATION	6.39339614263376E-6	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999988561394886	WITHOUT_CLASSIFICATION	1.1438605114771618E-6	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9993391809503498	WITHOUT_CLASSIFICATION	6.608190496503202E-4	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9979687186751435	WITHOUT_CLASSIFICATION	0.0020312813248566227	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999063528742	WITHOUT_CLASSIFICATION	9.364712590144445E-8	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998688707778063	WITHOUT_CLASSIFICATION	1.3112922219375004E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9998688707778063	WITHOUT_CLASSIFICATION	1.3112922219375004E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9999400024349414	WITHOUT_CLASSIFICATION	5.9997565058550015E-5	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999994098046152	WITHOUT_CLASSIFICATION	5.901953847748581E-7	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999380662860194	WITHOUT_CLASSIFICATION	6.193371398055329E-5	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9997712690233628	WITHOUT_CLASSIFICATION	2.2873097663717227E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.999832003738545	WITHOUT_CLASSIFICATION	1.67996261455033E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999865429667959	WITHOUT_CLASSIFICATION	1.3457033204041798E-5	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.968890558551209	WITHOUT_CLASSIFICATION	0.031109441448790975	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999999334181554	WITHOUT_CLASSIFICATION	6.658184468160787E-8	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999930525563093	WITHOUT_CLASSIFICATION	6.947443690690059E-6	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998365240753613	WITHOUT_CLASSIFICATION	1.6347592463867674E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9997297270758592	WITHOUT_CLASSIFICATION	2.702729241407806E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998512266543914	WITHOUT_CLASSIFICATION	1.487733456086039E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999960858274643	WITHOUT_CLASSIFICATION	3.914172535697569E-5	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999853043184	WITHOUT_CLASSIFICATION	1.4695681636317339E-8	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999962689040145	WITHOUT_CLASSIFICATION	3.7310959855501635E-6	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999983717225251	WITHOUT_CLASSIFICATION	1.628277474815525E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995350869209	WITHOUT_CLASSIFICATION	4.649130791445998E-7	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995350869209	WITHOUT_CLASSIFICATION	4.649130791445998E-7	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998483847259795	WITHOUT_CLASSIFICATION	1.5161527402055675E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9982824554376563	WITHOUT_CLASSIFICATION	0.0017175445623437062	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9999723965260195	WITHOUT_CLASSIFICATION	2.760347398057982E-5	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9998150928292512	WITHOUT_CLASSIFICATION	1.8490717074882534E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9999909531874567	WITHOUT_CLASSIFICATION	9.046812543259767E-6	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999937987724172	WITHOUT_CLASSIFICATION	6.201227582852156E-6	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9995441067509493	WITHOUT_CLASSIFICATION	4.5589324905068217E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999943456279714	WITHOUT_CLASSIFICATION	5.654372028689836E-6	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999433889178966	WITHOUT_CLASSIFICATION	5.661108210334192E-5	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999370161755	WITHOUT_CLASSIFICATION	6.298382448902989E-8	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9992366957111327	WITHOUT_CLASSIFICATION	7.633042888672152E-4	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9999943456279714	WITHOUT_CLASSIFICATION	5.654372028689836E-6	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9972485578562782	WITHOUT_CLASSIFICATION	0.0027514421437218567	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9796038117801737	WITHOUT_CLASSIFICATION	0.020396188219826288	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9910759185290956	WITHOUT_CLASSIFICATION	0.008924081470904318	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9999946868617868	WITHOUT_CLASSIFICATION	5.313138213083681E-6	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999795596727067	WITHOUT_CLASSIFICATION	2.04403272932577E-5	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999987061878177	WITHOUT_CLASSIFICATION	1.2938121823250946E-6	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999961785921491	WITHOUT_CLASSIFICATION	3.821407850925266E-6	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999870822321	WITHOUT_CLASSIFICATION	1.2917767880323564E-8	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9993634297723608	WITHOUT_CLASSIFICATION	6.36570227639189E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999625720619604	WITHOUT_CLASSIFICATION	3.742793803973161E-5	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999007034497094	WITHOUT_CLASSIFICATION	9.929655029050653E-5	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999993707629057	WITHOUT_CLASSIFICATION	6.292370943279678E-7	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999844732237444	WITHOUT_CLASSIFICATION	1.552677625563852E-5	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.999996902314265	WITHOUT_CLASSIFICATION	3.0976857351593837E-6	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999531466417454	WITHOUT_CLASSIFICATION	4.68533582545895E-5	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9999785766395796	WITHOUT_CLASSIFICATION	2.142336042049083E-5	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999827721526924	WITHOUT_CLASSIFICATION	1.7227847307645602E-5	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9988523232659203	WITHOUT_CLASSIFICATION	0.0011476767340796927	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998098476373398	WITHOUT_CLASSIFICATION	1.9015236266006647E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999996724543303	WITHOUT_CLASSIFICATION	3.2754566970264166E-6	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9999776101089694	WITHOUT_CLASSIFICATION	2.2389891030758547E-5	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.9867500542835707	DESIGN	0.013249945716429262	WITHOUT_CLASSIFICATION
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9991603749658874	WITHOUT_CLASSIFICATION	8.396250341126217E-4	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9998804083321375	WITHOUT_CLASSIFICATION	1.1959166786257007E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999998377865483	WITHOUT_CLASSIFICATION	1.6221345154378366E-7	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999244315258663	WITHOUT_CLASSIFICATION	7.556847413363304E-5	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999998047640584	WITHOUT_CLASSIFICATION	1.95235941687468E-7	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999999779268994	WITHOUT_CLASSIFICATION	2.20731005741185E-8	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.999991697304386	WITHOUT_CLASSIFICATION	8.302695614126424E-6	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9974707761234494	WITHOUT_CLASSIFICATION	0.0025292238765506217	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999999962803697	WITHOUT_CLASSIFICATION	3.719630200755184E-9	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.999983236695616	WITHOUT_CLASSIFICATION	1.676330438414001E-5	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999590258611165	WITHOUT_CLASSIFICATION	4.0974138883439665E-5	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.999236630216073	WITHOUT_CLASSIFICATION	7.633697839270905E-4	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998646535014168	WITHOUT_CLASSIFICATION	1.3534649858314846E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999718661037896	WITHOUT_CLASSIFICATION	2.8133896210324512E-5	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999994775923094	WITHOUT_CLASSIFICATION	5.224076904352912E-7	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999952815216	WITHOUT_CLASSIFICATION	4.718478350088406E-9	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998072121031	WITHOUT_CLASSIFICATION	1.9278789692619856E-7	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999581712845962	WITHOUT_CLASSIFICATION	4.182871540375041E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999434367963	WITHOUT_CLASSIFICATION	5.656320376636917E-8	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999853756144347	WITHOUT_CLASSIFICATION	1.4624385565397647E-5	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999860088181554	WITHOUT_CLASSIFICATION	1.3991181844660578E-5	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999995944240593	WITHOUT_CLASSIFICATION	4.0557594064735223E-7	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9999248437968026	WITHOUT_CLASSIFICATION	7.515620319744385E-5	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9983490491363953	WITHOUT_CLASSIFICATION	0.0016509508636046919	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999998707757907	WITHOUT_CLASSIFICATION	1.292242093166167E-7	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999993074887936	WITHOUT_CLASSIFICATION	6.925112063365118E-7	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999985727090849	WITHOUT_CLASSIFICATION	1.4272909151084296E-6	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999605454680706	WITHOUT_CLASSIFICATION	3.945453192950107E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678692019859	WITHOUT_CLASSIFICATION	3.2130798014162284E-5	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999940529097248	WITHOUT_CLASSIFICATION	5.947090275194021E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.999964274654812	WITHOUT_CLASSIFICATION	3.572534518811213E-5	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999999096875403	WITHOUT_CLASSIFICATION	9.03124597499934E-8	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999992338582486	WITHOUT_CLASSIFICATION	7.661417513488972E-7	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999835979839197	WITHOUT_CLASSIFICATION	1.640201608030229E-5	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998868446929533	WITHOUT_CLASSIFICATION	1.1315530704666993E-4	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999990826569303	WITHOUT_CLASSIFICATION	9.173430697835538E-7	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9999911352319694	WITHOUT_CLASSIFICATION	8.864768030701642E-6	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999934890987499	WITHOUT_CLASSIFICATION	6.510901250040374E-6	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999731774373208	WITHOUT_CLASSIFICATION	2.682256267919796E-5	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999995411292875	WITHOUT_CLASSIFICATION	4.5887071257236136E-7	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9995247313771658	WITHOUT_CLASSIFICATION	4.752686228341486E-4	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.9983187172841648	WITHOUT_CLASSIFICATION	0.00168128271583525	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.999610460615327	WITHOUT_CLASSIFICATION	3.89539384672963E-4	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9999326094722563	WITHOUT_CLASSIFICATION	6.739052774380011E-5	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999678692019859	WITHOUT_CLASSIFICATION	3.2130798014162284E-5	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.999965404490029	WITHOUT_CLASSIFICATION	3.4595509971060325E-5	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999905384176	WITHOUT_CLASSIFICATION	9.461582533377163E-9	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999978622826439	WITHOUT_CLASSIFICATION	2.1377173560140664E-6	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9999993304220036	WITHOUT_CLASSIFICATION	6.695779964419888E-7	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999801631630704	WITHOUT_CLASSIFICATION	1.9836836929556523E-5	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9984564865773327	WITHOUT_CLASSIFICATION	0.001543513422667368	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9999433889178966	WITHOUT_CLASSIFICATION	5.661108210334192E-5	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9991366580107508	WITHOUT_CLASSIFICATION	8.633419892493378E-4	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998646535014168	WITHOUT_CLASSIFICATION	1.3534649858314846E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.8996040141587679	WITHOUT_CLASSIFICATION	0.10039598584123213	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999993004194108	WITHOUT_CLASSIFICATION	6.995805891721394E-7	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999998872120683	WITHOUT_CLASSIFICATION	1.1278793170469871E-6	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999945252903113	WITHOUT_CLASSIFICATION	5.47470968875378E-6	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9999022433997874	WITHOUT_CLASSIFICATION	9.775660021266455E-5	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.6155558745071723	WITHOUT_CLASSIFICATION	0.3844441254928277	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9997913501644096	WITHOUT_CLASSIFICATION	2.086498355904814E-4	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9963546024050307	WITHOUT_CLASSIFICATION	0.0036453975949692946	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9999792661778291	WITHOUT_CLASSIFICATION	2.0733822170930376E-5	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998396256546056	WITHOUT_CLASSIFICATION	1.6037434539447002E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9998239637377278	WITHOUT_CLASSIFICATION	1.7603626227226973E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9992184551483015	WITHOUT_CLASSIFICATION	7.815448516984841E-4	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999816240079736	WITHOUT_CLASSIFICATION	1.8375992026397243E-5	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999816240079736	WITHOUT_CLASSIFICATION	1.8375992026397243E-5	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9997719817586789	WITHOUT_CLASSIFICATION	2.2801824132124456E-4	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999534878994009	WITHOUT_CLASSIFICATION	4.6512100599071856E-5	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999981215061864	WITHOUT_CLASSIFICATION	1.8784938136216656E-6	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999994035436349	WITHOUT_CLASSIFICATION	5.964563651549351E-7	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999945743564468	WITHOUT_CLASSIFICATION	5.425643553265116E-6	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9998926420365127	WITHOUT_CLASSIFICATION	1.0735796348727947E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994283160686	WITHOUT_CLASSIFICATION	5.716839313487383E-7	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9997352383312649	WITHOUT_CLASSIFICATION	2.647616687351368E-4	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999983257357197	WITHOUT_CLASSIFICATION	1.6742642803321432E-6	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9965061985291703	WITHOUT_CLASSIFICATION	0.0034938014708297284	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9997937415079339	WITHOUT_CLASSIFICATION	2.062584920661143E-4	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9999662420047727	WITHOUT_CLASSIFICATION	3.375799522736239E-5	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999623653521053	WITHOUT_CLASSIFICATION	3.763464789470171E-5	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999998833277	WITHOUT_CLASSIFICATION	1.1667240306771434E-10	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9974509429518659	WITHOUT_CLASSIFICATION	0.0025490570481341195	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999778478781698	WITHOUT_CLASSIFICATION	2.2152121830205186E-5	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9998012616163461	WITHOUT_CLASSIFICATION	1.9873838365391648E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.977263141316096	WITHOUT_CLASSIFICATION	0.022736858683903887	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999975905232	WITHOUT_CLASSIFICATION	2.4094769029494375E-9	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999999627046241	WITHOUT_CLASSIFICATION	3.7295375892785994E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999272842826443	WITHOUT_CLASSIFICATION	7.271571735564731E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9999997999703323	WITHOUT_CLASSIFICATION	2.00029667773246E-7	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999696544571721	WITHOUT_CLASSIFICATION	3.0345542827908787E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999909957884456	WITHOUT_CLASSIFICATION	9.004211554418873E-6	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9992675457241904	WITHOUT_CLASSIFICATION	7.324542758095241E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999996327458959	WITHOUT_CLASSIFICATION	3.672541041279205E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998473647993681	WITHOUT_CLASSIFICATION	1.5263520063182206E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999982303307657	WITHOUT_CLASSIFICATION	1.769669234331817E-6	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9999824567358274	WITHOUT_CLASSIFICATION	1.7543264172551867E-5	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996496388471234	WITHOUT_CLASSIFICATION	3.503611528765796E-4	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999684186162419	WITHOUT_CLASSIFICATION	3.15813837581266E-5	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999967220801227	WITHOUT_CLASSIFICATION	3.2779198773477367E-6	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9995575160533801	WITHOUT_CLASSIFICATION	4.4248394661997167E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999918610601778	WITHOUT_CLASSIFICATION	8.138939822281677E-6	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9964919358512128	WITHOUT_CLASSIFICATION	0.0035080641487872442	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999998045998827	WITHOUT_CLASSIFICATION	1.9540011731397062E-7	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999989479933825	WITHOUT_CLASSIFICATION	1.0520066173893652E-6	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999999498883038	WITHOUT_CLASSIFICATION	5.011169620331403E-7	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999432474996804	WITHOUT_CLASSIFICATION	5.67525003195565E-5	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9999980912051809	WITHOUT_CLASSIFICATION	1.9087948190371676E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996764215119	WITHOUT_CLASSIFICATION	3.2357848807649826E-7	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999272537392674	WITHOUT_CLASSIFICATION	7.274626073268067E-5	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999998960007089	WITHOUT_CLASSIFICATION	1.0399929096137383E-7	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999992438186976	WITHOUT_CLASSIFICATION	7.561813022788056E-7	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999999460748759	WITHOUT_CLASSIFICATION	5.3925124237404066E-8	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999823294724	WITHOUT_CLASSIFICATION	1.7670527542009492E-8	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565280192809	WITHOUT_CLASSIFICATION	1.4347198071916343E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.9834829239314454	WITHOUT_CLASSIFICATION	0.016517076068554504	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992402456254	WITHOUT_CLASSIFICATION	7.597543745869271E-7	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999999917418944	WITHOUT_CLASSIFICATION	8.258105567304038E-9	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999993553272716	WITHOUT_CLASSIFICATION	6.446727284894616E-7	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998884857214658	WITHOUT_CLASSIFICATION	1.1151427853414635E-4	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.999999900762983	WITHOUT_CLASSIFICATION	9.923701704581354E-8	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999969252836635	WITHOUT_CLASSIFICATION	3.0747163364554953E-6	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9999382380066577	WITHOUT_CLASSIFICATION	6.176199334229429E-5	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999981048134551	WITHOUT_CLASSIFICATION	1.8951865449375973E-6	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9155870670156896	WITHOUT_CLASSIFICATION	0.08441293298431045	DESIGN
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9999994581189102	WITHOUT_CLASSIFICATION	5.418810897457586E-7	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9999386236724136	WITHOUT_CLASSIFICATION	6.137632758644018E-5	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999979056416629	WITHOUT_CLASSIFICATION	2.0943583371409054E-6	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999753847765529	WITHOUT_CLASSIFICATION	2.4615223447131946E-5	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999838264523485	WITHOUT_CLASSIFICATION	1.617354765149643E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999970104831675	WITHOUT_CLASSIFICATION	2.9895168325227925E-6	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9814879130229784	WITHOUT_CLASSIFICATION	0.018512086977021582	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999763771417142	WITHOUT_CLASSIFICATION	2.3622858285920514E-5	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9999827813642773	WITHOUT_CLASSIFICATION	1.721863572273876E-5	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9999806001067144	WITHOUT_CLASSIFICATION	1.939989328565943E-5	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999965240106389	WITHOUT_CLASSIFICATION	3.4759893610895357E-6	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999993943777953	WITHOUT_CLASSIFICATION	6.056222045953469E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999864696789	WITHOUT_CLASSIFICATION	1.353032114193619E-8	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999995604800713	WITHOUT_CLASSIFICATION	4.3951992862560145E-7	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999864696789	WITHOUT_CLASSIFICATION	1.353032114193619E-8	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999998673175	WITHOUT_CLASSIFICATION	1.3268259701318112E-10	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999977120559576	WITHOUT_CLASSIFICATION	2.2879440424952585E-6	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999891252840686	WITHOUT_CLASSIFICATION	1.0874715931506166E-5	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999897421641	WITHOUT_CLASSIFICATION	1.025783601576393E-8	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999999222923784	WITHOUT_CLASSIFICATION	7.770762163179315E-8	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999831683197146	WITHOUT_CLASSIFICATION	1.683168028536801E-5	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999984715789495	WITHOUT_CLASSIFICATION	1.5284210505377518E-6	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999465965775483	WITHOUT_CLASSIFICATION	5.3403422451647527E-5	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999637433701752	WITHOUT_CLASSIFICATION	3.6256629824813214E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9999903169661212	WITHOUT_CLASSIFICATION	9.683033878807829E-6	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999908414837	WITHOUT_CLASSIFICATION	9.158516192684444E-9	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9997715998377713	WITHOUT_CLASSIFICATION	2.2840016222867585E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999964248378	WITHOUT_CLASSIFICATION	3.575162304670536E-9	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999975765845	DESIGN	2.4234155169127893E-9	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999996665444209	WITHOUT_CLASSIFICATION	3.334555791012294E-7	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999999982307584	WITHOUT_CLASSIFICATION	1.7692416694593899E-9	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999987994790825	WITHOUT_CLASSIFICATION	1.2005209175330933E-6	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999999045586745	WITHOUT_CLASSIFICATION	9.544132545869411E-8	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999999447978436	WITHOUT_CLASSIFICATION	5.520215641593051E-8	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9792360763850232	WITHOUT_CLASSIFICATION	0.020763923614976854	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9999538159346822	WITHOUT_CLASSIFICATION	4.6184065317748596E-5	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9999705191667191	WITHOUT_CLASSIFICATION	2.9480833280884312E-5	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.8880493054810459	WITHOUT_CLASSIFICATION	0.11195069451895409	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999765188332259	WITHOUT_CLASSIFICATION	2.3481166774175986E-5	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999996531598184	WITHOUT_CLASSIFICATION	3.468401815075204E-7	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999992989494282	WITHOUT_CLASSIFICATION	7.010505719185078E-7	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9986790628432107	WITHOUT_CLASSIFICATION	0.0013209371567892872	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9999529343534781	WITHOUT_CLASSIFICATION	4.706564652183671E-5	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999996659274722	WITHOUT_CLASSIFICATION	3.3407252782008415E-7	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999999748626012	WITHOUT_CLASSIFICATION	2.5137398798213403E-7	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9999983187847921	WITHOUT_CLASSIFICATION	1.6812152078939438E-6	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9999915134464283	WITHOUT_CLASSIFICATION	8.48655357154246E-6	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9618726481599013	WITHOUT_CLASSIFICATION	0.03812735184009877	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9996438208272787	WITHOUT_CLASSIFICATION	3.561791727213482E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999868766539071	WITHOUT_CLASSIFICATION	1.3123346093042943E-5	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999966444661227	WITHOUT_CLASSIFICATION	3.35553387737593E-6	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9999713425013167	WITHOUT_CLASSIFICATION	2.865749868331959E-5	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999997808883412	WITHOUT_CLASSIFICATION	2.191116587808656E-7	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9999583315714174	WITHOUT_CLASSIFICATION	4.166842858258234E-5	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999998279973582	WITHOUT_CLASSIFICATION	1.7200264173015736E-7	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9999940180036455	WITHOUT_CLASSIFICATION	5.981996354541074E-6	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9999956279874364	WITHOUT_CLASSIFICATION	4.3720125636414E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9999527638992963	WITHOUT_CLASSIFICATION	4.723610070372215E-5	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999992989494282	WITHOUT_CLASSIFICATION	7.010505719185078E-7	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999328470135743	WITHOUT_CLASSIFICATION	6.715298642562224E-5	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9999843121509832	WITHOUT_CLASSIFICATION	1.5687849016783392E-5	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9962193496783348	WITHOUT_CLASSIFICATION	0.0037806503216651693	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.999999558206464	WITHOUT_CLASSIFICATION	4.4179353591586E-7	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999995665707543	WITHOUT_CLASSIFICATION	4.3342924574281946E-7	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999992916277285	WITHOUT_CLASSIFICATION	7.083722715647703E-7	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9998349144384571	WITHOUT_CLASSIFICATION	1.6508556154287956E-4	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.987192244357706	DESIGN	0.012807755642294033	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999899833991861	WITHOUT_CLASSIFICATION	1.0016600813790136E-5	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9997009509689003	WITHOUT_CLASSIFICATION	2.990490310996661E-4	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9999577674639739	WITHOUT_CLASSIFICATION	4.223253602605795E-5	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999978016931786	WITHOUT_CLASSIFICATION	2.1983068212434037E-6	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999831113761224	WITHOUT_CLASSIFICATION	1.6888623877544242E-5	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998965114507724	WITHOUT_CLASSIFICATION	1.0348854922756331E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999986506517641	WITHOUT_CLASSIFICATION	1.349348235943357E-6	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999945757898862	WITHOUT_CLASSIFICATION	5.4242101138933794E-6	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998582028569	WITHOUT_CLASSIFICATION	1.4179714311027448E-7	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999997547783923	WITHOUT_CLASSIFICATION	2.4522160763367014E-7	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9999953099613106	WITHOUT_CLASSIFICATION	4.690038689513957E-6	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9999328470135743	WITHOUT_CLASSIFICATION	6.715298642562224E-5	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999997837634271	WITHOUT_CLASSIFICATION	2.1623657302038966E-7	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9933547527800165	WITHOUT_CLASSIFICATION	0.006645247219983563	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999884554938453	WITHOUT_CLASSIFICATION	1.1544506154697624E-5	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9993509642209764	WITHOUT_CLASSIFICATION	6.490357790237364E-4	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9999488045253307	WITHOUT_CLASSIFICATION	5.1195474669293034E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9947942890969136	WITHOUT_CLASSIFICATION	0.005205710903086493	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9947942890969136	WITHOUT_CLASSIFICATION	0.005205710903086493	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999993773516938	WITHOUT_CLASSIFICATION	6.226483061435267E-7	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9947942890969136	WITHOUT_CLASSIFICATION	0.005205710903086493	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9947942890969136	WITHOUT_CLASSIFICATION	0.005205710903086493	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.976776930185256	WITHOUT_CLASSIFICATION	0.02322306981474388	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999991116666769	WITHOUT_CLASSIFICATION	8.883333230344779E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999450593604157	WITHOUT_CLASSIFICATION	5.4940639584190045E-5	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9999964307723427	WITHOUT_CLASSIFICATION	3.569227657294979E-6	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999540255038367	WITHOUT_CLASSIFICATION	4.5974496163265E-5	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9963705374234604	WITHOUT_CLASSIFICATION	0.003629462576539549	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.995412175424348	WITHOUT_CLASSIFICATION	0.004587824575651992	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999999765492725	WITHOUT_CLASSIFICATION	2.3450727469872686E-8	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9999792906702819	WITHOUT_CLASSIFICATION	2.0709329718039493E-5	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9999727742580435	WITHOUT_CLASSIFICATION	2.7225741956494054E-5	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998610084219801	WITHOUT_CLASSIFICATION	1.389915780199401E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999805764003648	WITHOUT_CLASSIFICATION	1.9423599635198497E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998559430577302	WITHOUT_CLASSIFICATION	1.4405694226976172E-4	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999993695744424	WITHOUT_CLASSIFICATION	6.304255575799726E-7	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999965339638675	WITHOUT_CLASSIFICATION	3.4660361324441605E-6	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9998464058136888	WITHOUT_CLASSIFICATION	1.5359418631121971E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997995421372	WITHOUT_CLASSIFICATION	2.0045786281688054E-7	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999994638207376	WITHOUT_CLASSIFICATION	5.361792623714053E-7	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9416057618453784	WITHOUT_CLASSIFICATION	0.058394238154621636	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9999951254736841	WITHOUT_CLASSIFICATION	4.874526315850362E-6	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9999788546832125	WITHOUT_CLASSIFICATION	2.1145316787510634E-5	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.99999423596874	WITHOUT_CLASSIFICATION	5.764031259940975E-6	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999997995421372	WITHOUT_CLASSIFICATION	2.0045786281688054E-7	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9986790628432107	WITHOUT_CLASSIFICATION	0.0013209371567892872	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999971582060521	WITHOUT_CLASSIFICATION	2.8417939479876063E-6	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999999671035087	WITHOUT_CLASSIFICATION	3.28964912802996E-8	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999998983489425	WITHOUT_CLASSIFICATION	1.016510574986813E-6	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999989425433248	WITHOUT_CLASSIFICATION	1.0574566751903725E-6	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999829706842646	WITHOUT_CLASSIFICATION	1.7029315735373707E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9999075630624967	WITHOUT_CLASSIFICATION	9.243693750331903E-5	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999755647746302	WITHOUT_CLASSIFICATION	2.4435225369744526E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999958769279516	WITHOUT_CLASSIFICATION	4.1230720484167375E-6	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.999431910043302	WITHOUT_CLASSIFICATION	5.680899566980484E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999824552111695	WITHOUT_CLASSIFICATION	1.754478883049108E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999992578131033	WITHOUT_CLASSIFICATION	7.421868966818611E-7	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9998528548106327	WITHOUT_CLASSIFICATION	1.4714518936743967E-4	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999934914565	WITHOUT_CLASSIFICATION	6.508543443808501E-9	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999977012427973	WITHOUT_CLASSIFICATION	2.2987572026207416E-6	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999976722426679	WITHOUT_CLASSIFICATION	2.3277573320836705E-6	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.999992870137476	WITHOUT_CLASSIFICATION	7.129862524027043E-6	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999921085989768	WITHOUT_CLASSIFICATION	7.891401023172993E-6	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9999605846802208	WITHOUT_CLASSIFICATION	3.941531977919215E-5	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999849192134938	WITHOUT_CLASSIFICATION	1.5080786506219859E-5	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9998985458626675	WITHOUT_CLASSIFICATION	1.0145413733251452E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9998602117957174	WITHOUT_CLASSIFICATION	1.3978820428253502E-4	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999996412220403	WITHOUT_CLASSIFICATION	3.587779596807039E-7	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9999958769279516	WITHOUT_CLASSIFICATION	4.1230720484167375E-6	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.999999922185096	WITHOUT_CLASSIFICATION	7.781490391954061E-8	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9996706735974129	WITHOUT_CLASSIFICATION	3.2932640258703116E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9997062668865283	WITHOUT_CLASSIFICATION	2.9373311347164063E-4	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9995074611618376	WITHOUT_CLASSIFICATION	4.925388381623753E-4	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999898125721778	WITHOUT_CLASSIFICATION	1.018742782217942E-5	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9999959448712676	WITHOUT_CLASSIFICATION	4.05512873242897E-6	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999942553901597	WITHOUT_CLASSIFICATION	5.7446098402660905E-6	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.999954550759963	WITHOUT_CLASSIFICATION	4.544924003711103E-5	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.999999576129045	WITHOUT_CLASSIFICATION	4.2387095507873194E-7	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9999881465460553	WITHOUT_CLASSIFICATION	1.1853453944834841E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997606166403	WITHOUT_CLASSIFICATION	2.3938335968822774E-7	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999977467734045	WITHOUT_CLASSIFICATION	2.253226595476553E-6	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9989925466362214	WITHOUT_CLASSIFICATION	0.0010074533637786237	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999609455977	WITHOUT_CLASSIFICATION	3.905440236226385E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999447837634241	WITHOUT_CLASSIFICATION	5.521623657593109E-5	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9999992138649345	WITHOUT_CLASSIFICATION	7.861350656361094E-7	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999893362927794	WITHOUT_CLASSIFICATION	1.066370722063614E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997606166403	WITHOUT_CLASSIFICATION	2.3938335968822774E-7	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999995226696642	WITHOUT_CLASSIFICATION	4.773303357581148E-7	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9833035106596744	WITHOUT_CLASSIFICATION	0.016696489340325648	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999913021171384	WITHOUT_CLASSIFICATION	8.697882861694392E-6	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9999931942369429	WITHOUT_CLASSIFICATION	6.805763057084952E-6	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.999942944394953	WITHOUT_CLASSIFICATION	5.705560504702168E-5	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999517343856	WITHOUT_CLASSIFICATION	4.82656143844362E-8	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999447837634241	WITHOUT_CLASSIFICATION	5.521623657593109E-5	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999990252798566	WITHOUT_CLASSIFICATION	9.747201434376175E-7	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999873759952143	WITHOUT_CLASSIFICATION	1.262400478564417E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981690286589	WITHOUT_CLASSIFICATION	1.8309713410551821E-6	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999962785774582	WITHOUT_CLASSIFICATION	3.7214225418761713E-6	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999989663345038	WITHOUT_CLASSIFICATION	1.0336654961940796E-5	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995671219919	WITHOUT_CLASSIFICATION	4.32878008098167E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999979275772473	WITHOUT_CLASSIFICATION	2.072422752777019E-6	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999979275772473	WITHOUT_CLASSIFICATION	2.072422752777019E-6	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9998831008383146	WITHOUT_CLASSIFICATION	1.1689916168543377E-4	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9999996888247128	WITHOUT_CLASSIFICATION	3.1117528720478E-7	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9999164967715748	WITHOUT_CLASSIFICATION	8.350322842520111E-5	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9999686316822509	WITHOUT_CLASSIFICATION	3.136831774914282E-5	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999993937877324	WITHOUT_CLASSIFICATION	6.062122675790102E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438318056789	WITHOUT_CLASSIFICATION	5.616819432104247E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937244528012	WITHOUT_CLASSIFICATION	6.275547198791219E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936701020689	WITHOUT_CLASSIFICATION	6.329897931135969E-6	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9748034139112346	WITHOUT_CLASSIFICATION	0.025196586088765384	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998072989322	WITHOUT_CLASSIFICATION	1.9270106777478522E-7	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999438318056789	WITHOUT_CLASSIFICATION	5.616819432104247E-5	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937244528012	WITHOUT_CLASSIFICATION	6.275547198791219E-6	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999936701020689	WITHOUT_CLASSIFICATION	6.329897931135969E-6	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9999355972136403	WITHOUT_CLASSIFICATION	6.440278635972247E-5	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9996610585150529	WITHOUT_CLASSIFICATION	3.389414849470906E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9999193664144734	WITHOUT_CLASSIFICATION	8.063358552652584E-5	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9997998701707197	WITHOUT_CLASSIFICATION	2.0012982928029855E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999924991190293	WITHOUT_CLASSIFICATION	7.500880970666407E-6	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9999769699692413	DESIGN	2.3030030758662894E-5	WITHOUT_CLASSIFICATION
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.999999186849073	WITHOUT_CLASSIFICATION	8.131509270507618E-7	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.999610104090284	WITHOUT_CLASSIFICATION	3.898959097160923E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9998785236860128	WITHOUT_CLASSIFICATION	1.214763139871931E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9958794768861106	WITHOUT_CLASSIFICATION	0.004120523113889474	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999990453571796	WITHOUT_CLASSIFICATION	9.54642820404527E-6	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9263172155033158	WITHOUT_CLASSIFICATION	0.0736827844966842	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9956525704813266	WITHOUT_CLASSIFICATION	0.004347429518673394	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9998945141057595	WITHOUT_CLASSIFICATION	1.0548589424054726E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998794970097656	WITHOUT_CLASSIFICATION	1.2050299023441942E-4	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9999677710327133	WITHOUT_CLASSIFICATION	3.2228967286733306E-5	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9999278386940187	WITHOUT_CLASSIFICATION	7.216130598132845E-5	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999978975085742	WITHOUT_CLASSIFICATION	2.1024914258020884E-6	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9999510405742198	WITHOUT_CLASSIFICATION	4.895942578021395E-5	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999902809515899	WITHOUT_CLASSIFICATION	9.71904841008914E-6	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999993650359845	WITHOUT_CLASSIFICATION	6.349640155122858E-7	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8236621251633605	WITHOUT_CLASSIFICATION	0.1763378748366394	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999836485164	WITHOUT_CLASSIFICATION	1.6351483690964778E-8	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999161033986101	WITHOUT_CLASSIFICATION	8.389660138976833E-5	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999984994545222	WITHOUT_CLASSIFICATION	1.500545477805124E-6	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.999387261739741	WITHOUT_CLASSIFICATION	6.127382602589007E-4	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999955764514881	WITHOUT_CLASSIFICATION	4.423548511869309E-6	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999875177281256	WITHOUT_CLASSIFICATION	1.2482271874547782E-5	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.9954726835238198	WITHOUT_CLASSIFICATION	0.004527316476180128	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999948860472047	WITHOUT_CLASSIFICATION	5.113952795248999E-6	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999990118473207	WITHOUT_CLASSIFICATION	9.881526794026512E-7	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999933948895331	WITHOUT_CLASSIFICATION	6.605110466960393E-6	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999933948895331	WITHOUT_CLASSIFICATION	6.605110466960393E-6	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999918729943262	WITHOUT_CLASSIFICATION	8.127005673722028E-6	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999999997375307	WITHOUT_CLASSIFICATION	2.624692692367162E-10	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999483986025599	WITHOUT_CLASSIFICATION	5.160139744001726E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998512266543914	WITHOUT_CLASSIFICATION	1.487733456086039E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9997236093017968	WITHOUT_CLASSIFICATION	2.763906982031997E-4	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999621430360583	WITHOUT_CLASSIFICATION	3.785696394175197E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9998882149582765	WITHOUT_CLASSIFICATION	1.1178504172359172E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999985073825197	WITHOUT_CLASSIFICATION	1.4926174802304302E-6	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9989222362412697	WITHOUT_CLASSIFICATION	0.0010777637587301998	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999736655281	WITHOUT_CLASSIFICATION	2.63344718728451E-8	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998270370232	WITHOUT_CLASSIFICATION	1.729629768655411E-7	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999121165024	WITHOUT_CLASSIFICATION	8.78834975486489E-8	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998376636638	WITHOUT_CLASSIFICATION	1.6233633618016818E-7	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998796197465	WITHOUT_CLASSIFICATION	1.203802535464284E-7	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997925918921	WITHOUT_CLASSIFICATION	2.0740810787980308E-7	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999960754367	WITHOUT_CLASSIFICATION	3.9245633067704566E-8	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998379433429	WITHOUT_CLASSIFICATION	1.6205665706041005E-7	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999493351704	WITHOUT_CLASSIFICATION	5.0664829469232945E-8	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999075441249	WITHOUT_CLASSIFICATION	9.245587515816313E-8	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987049769976	WITHOUT_CLASSIFICATION	1.2950230024313953E-6	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999435493845603	WITHOUT_CLASSIFICATION	5.645061543959303E-5	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9998382350546832	WITHOUT_CLASSIFICATION	1.6176494531676416E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996955075082832	WITHOUT_CLASSIFICATION	3.044924917168156E-4	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999961629689154	WITHOUT_CLASSIFICATION	3.837031084643016E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9998056006902679	WITHOUT_CLASSIFICATION	1.943993097320529E-4	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9913523880875159	WITHOUT_CLASSIFICATION	0.008647611912484135	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.999999143906347	WITHOUT_CLASSIFICATION	8.560936528522023E-7	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9996585769509604	WITHOUT_CLASSIFICATION	3.4142304903957946E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996955075082832	WITHOUT_CLASSIFICATION	3.044924917168156E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996955075082832	WITHOUT_CLASSIFICATION	3.044924917168156E-4	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.8249570606378216	WITHOUT_CLASSIFICATION	0.17504293936217846	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9999926850212199	WITHOUT_CLASSIFICATION	7.314978780203239E-6	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9978870245589061	WITHOUT_CLASSIFICATION	0.0021129754410938056	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9997280238034684	WITHOUT_CLASSIFICATION	2.7197619653164355E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999936066038573	WITHOUT_CLASSIFICATION	6.39339614263376E-6	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9999902809515899	WITHOUT_CLASSIFICATION	9.71904841008914E-6	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999828746609056	WITHOUT_CLASSIFICATION	1.71253390944642E-5	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999984631310581	WITHOUT_CLASSIFICATION	1.536868941912638E-6	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9999639112864603	WITHOUT_CLASSIFICATION	3.608871353970405E-5	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993995690487372	WITHOUT_CLASSIFICATION	6.004309512628037E-4	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999769839645571	WITHOUT_CLASSIFICATION	2.3016035442857285E-5	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999886130084384	WITHOUT_CLASSIFICATION	1.1386991561600557E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999693377555819	WITHOUT_CLASSIFICATION	3.06622444180755E-5	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9999693377555819	WITHOUT_CLASSIFICATION	3.06622444180755E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999680113100181	WITHOUT_CLASSIFICATION	3.198868998199105E-5	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9999680113100181	WITHOUT_CLASSIFICATION	3.198868998199105E-5	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998525317418013	WITHOUT_CLASSIFICATION	1.4746825819866424E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999884306917985	WITHOUT_CLASSIFICATION	1.1569308201497368E-5	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999979378629	WITHOUT_CLASSIFICATION	2.0621370787224505E-9	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983763260920305	WITHOUT_CLASSIFICATION	0.0016236739079694533	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9999597138802415	WITHOUT_CLASSIFICATION	4.02861197585174E-5	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.8129295964075258	DESIGN	0.1870704035924743	WITHOUT_CLASSIFICATION
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971111076753	WITHOUT_CLASSIFICATION	2.88889232472278E-6	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999743752328444	WITHOUT_CLASSIFICATION	2.5624767155553805E-5	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9178133104911238	WITHOUT_CLASSIFICATION	0.08218668950887623	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9999967069578767	WITHOUT_CLASSIFICATION	3.293042123320445E-6	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999691940153	WITHOUT_CLASSIFICATION	3.0805984703462337E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999944736144937	WITHOUT_CLASSIFICATION	5.526385506275665E-6	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9988342865207787	WITHOUT_CLASSIFICATION	0.0011657134792214124	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999934408174769	WITHOUT_CLASSIFICATION	6.559182523146869E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999972715277354	WITHOUT_CLASSIFICATION	2.7284722646144135E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999972715277354	WITHOUT_CLASSIFICATION	2.7284722646144135E-6	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999972715277354	WITHOUT_CLASSIFICATION	2.7284722646144135E-6	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9999971781503127	WITHOUT_CLASSIFICATION	2.8218496872381693E-6	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9999973129781174	WITHOUT_CLASSIFICATION	2.6870218826418268E-6	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999892779936	WITHOUT_CLASSIFICATION	1.072200646831504E-8	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999903134633925	WITHOUT_CLASSIFICATION	9.686536607465245E-6	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999382888148031	WITHOUT_CLASSIFICATION	6.171118519689113E-5	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998760237830033	WITHOUT_CLASSIFICATION	1.239762169966063E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999996481893625	WITHOUT_CLASSIFICATION	3.5181063754938653E-7	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999594489189702	WITHOUT_CLASSIFICATION	4.055108102989078E-5	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999992182052191	WITHOUT_CLASSIFICATION	7.817947808394551E-7	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999905486217145	WITHOUT_CLASSIFICATION	9.45137828550343E-6	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9998551615265825	WITHOUT_CLASSIFICATION	1.4483847341752586E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999748374192726	WITHOUT_CLASSIFICATION	2.5162580727404083E-5	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999794820904	WITHOUT_CLASSIFICATION	2.0517909613417345E-7	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999242338182	WITHOUT_CLASSIFICATION	7.57661817907148E-8	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999131524115441	WITHOUT_CLASSIFICATION	8.684758845583892E-5	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9995443255252703	WITHOUT_CLASSIFICATION	4.5567447472973164E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999928212638094	WITHOUT_CLASSIFICATION	7.178736190647065E-6	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9993531071040257	WITHOUT_CLASSIFICATION	6.468928959743632E-4	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9989403171273451	WITHOUT_CLASSIFICATION	0.0010596828726548812	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999456010733	WITHOUT_CLASSIFICATION	5.439892668268801E-8	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999636289891	WITHOUT_CLASSIFICATION	3.637101086425455E-8	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999985678717	WITHOUT_CLASSIFICATION	1.4321282731248297E-9	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999910036074856	WITHOUT_CLASSIFICATION	8.996392514380617E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999983193843653	WITHOUT_CLASSIFICATION	1.6806156345581956E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999767868504732	WITHOUT_CLASSIFICATION	2.3213149526760934E-5	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9997374338736201	WITHOUT_CLASSIFICATION	2.6256612637983573E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999910336103326	WITHOUT_CLASSIFICATION	8.966389667344251E-6	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9999581847351157	WITHOUT_CLASSIFICATION	4.181526488441912E-5	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999970950468	WITHOUT_CLASSIFICATION	2.9049531935099572E-9	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999970583017647	WITHOUT_CLASSIFICATION	2.9416982353533336E-6	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999384328359519	WITHOUT_CLASSIFICATION	6.15671640480683E-5	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999975547325357	WITHOUT_CLASSIFICATION	2.445267464306765E-6	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999398261057159	WITHOUT_CLASSIFICATION	6.017389428416216E-5	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9997859410419042	WITHOUT_CLASSIFICATION	2.1405895809585478E-4	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9999995090678744	WITHOUT_CLASSIFICATION	4.909321256050707E-7	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9999916057229028	WITHOUT_CLASSIFICATION	8.39427709706799E-6	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999529135681	WITHOUT_CLASSIFICATION	4.7086431897682166E-8	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.99988738547733	WITHOUT_CLASSIFICATION	1.1261452266999183E-4	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999997732123971	WITHOUT_CLASSIFICATION	2.267876029625677E-7	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9999121967959121	WITHOUT_CLASSIFICATION	8.78032040877696E-5	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999936756848783	WITHOUT_CLASSIFICATION	6.324315121766E-6	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999219458685407	WITHOUT_CLASSIFICATION	7.805413145934926E-5	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9748247631599479	DESIGN	0.02517523684005215	WITHOUT_CLASSIFICATION
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9998515155572717	WITHOUT_CLASSIFICATION	1.4848444272830448E-4	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9998419133261777	WITHOUT_CLASSIFICATION	1.5808667382231713E-4	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9998179656379446	WITHOUT_CLASSIFICATION	1.820343620553285E-4	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9999999281196238	WITHOUT_CLASSIFICATION	7.188037629518547E-8	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9999951735850564	WITHOUT_CLASSIFICATION	4.826414943597227E-6	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999962776057708	WITHOUT_CLASSIFICATION	3.722394229208782E-6	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.999984282121855	WITHOUT_CLASSIFICATION	1.5717878145014023E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999998691888994	WITHOUT_CLASSIFICATION	1.308111006036325E-6	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999715848582894	WITHOUT_CLASSIFICATION	2.841514171053544E-5	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9997837266002225	WITHOUT_CLASSIFICATION	2.1627339977748E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999995006376466	WITHOUT_CLASSIFICATION	4.993623534681313E-7	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999999523975935	WITHOUT_CLASSIFICATION	4.7602406461490644E-8	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999778190657682	WITHOUT_CLASSIFICATION	2.2180934231794574E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9993910862363141	WITHOUT_CLASSIFICATION	6.089137636859211E-4	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9999993156847811	WITHOUT_CLASSIFICATION	6.843152190031403E-7	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9997122810879697	WITHOUT_CLASSIFICATION	2.877189120302859E-4	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9962789339177005	WITHOUT_CLASSIFICATION	0.0037210660822994085	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999079040247401	WITHOUT_CLASSIFICATION	9.209597525993578E-5	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9999999732601149	WITHOUT_CLASSIFICATION	2.6739885049873462E-8	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999992194125985	WITHOUT_CLASSIFICATION	7.805874016061887E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.999914887662009	WITHOUT_CLASSIFICATION	8.511233799097724E-5	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999987436881662	WITHOUT_CLASSIFICATION	1.2563118338604912E-6	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9954304325078505	WITHOUT_CLASSIFICATION	0.004569567492149606	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9998298907756432	WITHOUT_CLASSIFICATION	1.7010922435672075E-4	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999998054890473	WITHOUT_CLASSIFICATION	1.9451095258679475E-7	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999960942206528	WITHOUT_CLASSIFICATION	3.9057793472476924E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999960942206528	WITHOUT_CLASSIFICATION	3.9057793472476924E-6	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.999999432324144	WITHOUT_CLASSIFICATION	5.676758560475221E-7	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9998825358632683	WITHOUT_CLASSIFICATION	1.1746413673164224E-4	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9997831507558055	WITHOUT_CLASSIFICATION	2.168492441945426E-4	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9987241583836833	WITHOUT_CLASSIFICATION	0.0012758416163166585	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999962388419413	WITHOUT_CLASSIFICATION	3.7611580586636937E-6	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9999243060534387	WITHOUT_CLASSIFICATION	7.569394656123972E-5	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999988723257177	WITHOUT_CLASSIFICATION	1.1276742822420142E-6	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999961081853281	WITHOUT_CLASSIFICATION	3.891814671855871E-6	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9999511084499106	WITHOUT_CLASSIFICATION	4.8891550089472085E-5	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9999973177434137	WITHOUT_CLASSIFICATION	2.6822565862430616E-6	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999998073217407	WITHOUT_CLASSIFICATION	1.9267825934005613E-7	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999998672576533	WITHOUT_CLASSIFICATION	1.3274234670046347E-7	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.999998105840795	WITHOUT_CLASSIFICATION	1.8941592050982081E-6	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9998750358903563	WITHOUT_CLASSIFICATION	1.2496410964376122E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999383361146196	WITHOUT_CLASSIFICATION	6.166388538041881E-5	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9860811748028383	WITHOUT_CLASSIFICATION	0.013918825197161686	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9999977476231018	WITHOUT_CLASSIFICATION	2.2523768981959455E-6	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8322283655931795	WITHOUT_CLASSIFICATION	0.16777163440682058	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8046640861485829	DESIGN	0.1953359138514171	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9998427681110144	WITHOUT_CLASSIFICATION	1.5723188898566232E-4	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9999953784807339	WITHOUT_CLASSIFICATION	4.6215192660504695E-6	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999965442230556	WITHOUT_CLASSIFICATION	3.455776944304573E-6	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9995593719518893	WITHOUT_CLASSIFICATION	4.406280481107216E-4	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999663230827467	WITHOUT_CLASSIFICATION	3.3676917253242905E-5	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999990292316	WITHOUT_CLASSIFICATION	9.707683799189638E-10	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9999703137045208	WITHOUT_CLASSIFICATION	2.96862954792162E-5	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999976583909201	WITHOUT_CLASSIFICATION	2.3416090798016025E-6	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999967066756611	WITHOUT_CLASSIFICATION	3.2933243388042606E-6	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9997827221394872	WITHOUT_CLASSIFICATION	2.1727786051286153E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999810773297573	WITHOUT_CLASSIFICATION	1.8922670242673075E-5	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999950213827069	WITHOUT_CLASSIFICATION	4.978617293181012E-6	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999611854377765	WITHOUT_CLASSIFICATION	3.881456222353142E-5	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9999710431979775	WITHOUT_CLASSIFICATION	2.8956802022518018E-5	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9999972058851713	WITHOUT_CLASSIFICATION	2.794114828707048E-6	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9988420059343631	WITHOUT_CLASSIFICATION	0.001157994065636891	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9988420059343631	WITHOUT_CLASSIFICATION	0.001157994065636891	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999998593656012	WITHOUT_CLASSIFICATION	1.406343988039207E-7	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9999570474037817	WITHOUT_CLASSIFICATION	4.29525962183587E-5	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9989842880420896	WITHOUT_CLASSIFICATION	0.0010157119579104674	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9999779993071237	WITHOUT_CLASSIFICATION	2.2000692876261516E-5	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9997920818151095	WITHOUT_CLASSIFICATION	2.0791818489049392E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999977835966213	WITHOUT_CLASSIFICATION	2.2164033786261664E-6	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999982010028118	WITHOUT_CLASSIFICATION	1.798997188193925E-6	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997874698179378	WITHOUT_CLASSIFICATION	2.125301820621901E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9990738771260114	WITHOUT_CLASSIFICATION	9.261228739886534E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9894572468266779	WITHOUT_CLASSIFICATION	0.010542753173322109	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999982224791599	WITHOUT_CLASSIFICATION	1.7775208401150278E-6	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999933978438315	WITHOUT_CLASSIFICATION	6.602156168513295E-6	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9985443134003841	WITHOUT_CLASSIFICATION	0.001455686599615984	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.999998591826896	WITHOUT_CLASSIFICATION	1.4081731039661214E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999922029933129	WITHOUT_CLASSIFICATION	7.797006687155981E-6	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999999822326499	WITHOUT_CLASSIFICATION	1.7767350101976313E-7	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993810732251894	WITHOUT_CLASSIFICATION	6.189267748104346E-4	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9993810732251894	WITHOUT_CLASSIFICATION	6.189267748104346E-4	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999992671316317	WITHOUT_CLASSIFICATION	7.328683683217317E-7	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999938295443508	WITHOUT_CLASSIFICATION	6.170455649179263E-6	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9974021744312904	WITHOUT_CLASSIFICATION	0.0025978255687096005	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998285759404	WITHOUT_CLASSIFICATION	1.7142405964671208E-7	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999221426439	WITHOUT_CLASSIFICATION	7.785735603590189E-8	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.99998114059055	WITHOUT_CLASSIFICATION	1.8859409449995732E-5	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999787412327	WITHOUT_CLASSIFICATION	2.1258767397998776E-8	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.999997249276961	WITHOUT_CLASSIFICATION	2.7507230391139285E-6	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999998187505	WITHOUT_CLASSIFICATION	1.812494453760527E-10	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9993294459525824	WITHOUT_CLASSIFICATION	6.705540474175488E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9993294459525824	WITHOUT_CLASSIFICATION	6.705540474175488E-4	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999989669999002	WITHOUT_CLASSIFICATION	1.033000099733029E-6	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9942794949281792	WITHOUT_CLASSIFICATION	0.005720505071820833	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9999992113844692	WITHOUT_CLASSIFICATION	7.886155308069497E-7	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999944320341286	WITHOUT_CLASSIFICATION	5.567965871341548E-6	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9999996284667595	WITHOUT_CLASSIFICATION	3.715332404778926E-7	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999586598762036	WITHOUT_CLASSIFICATION	4.134012379646286E-5	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.6893389889399563	DESIGN	0.3106610110600438	WITHOUT_CLASSIFICATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999932929319458	WITHOUT_CLASSIFICATION	6.707068054088882E-6	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999648043482845	WITHOUT_CLASSIFICATION	3.519565171543878E-5	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.999995480122255	WITHOUT_CLASSIFICATION	4.519877744932787E-6	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9999991818451132	WITHOUT_CLASSIFICATION	8.181548867712391E-7	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9995153330966909	WITHOUT_CLASSIFICATION	4.846669033090466E-4	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9975659841446107	WITHOUT_CLASSIFICATION	0.002434015855389372	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9999607385645223	WITHOUT_CLASSIFICATION	3.92614354777353E-5	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9986359046327301	WITHOUT_CLASSIFICATION	0.0013640953672698856	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999909662489487	WITHOUT_CLASSIFICATION	9.033751051336118E-6	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996496388471234	WITHOUT_CLASSIFICATION	3.503611528765796E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999996614685289	WITHOUT_CLASSIFICATION	3.385314710927538E-7	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999639667821	WITHOUT_CLASSIFICATION	3.603321795313554E-8	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9999866811774072	WITHOUT_CLASSIFICATION	1.3318822592932018E-5	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.999450723815862	WITHOUT_CLASSIFICATION	5.492761841380702E-4	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999883708275766	WITHOUT_CLASSIFICATION	1.1629172423354549E-5	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999984160900278	WITHOUT_CLASSIFICATION	1.5839099721598107E-6	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999978060147683	WITHOUT_CLASSIFICATION	2.1939852316263635E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996212563633	WITHOUT_CLASSIFICATION	3.7874363669539507E-7	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992318433123506	WITHOUT_CLASSIFICATION	7.681566876494456E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9992967586909519	WITHOUT_CLASSIFICATION	7.032413090480802E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9996639802187232	WITHOUT_CLASSIFICATION	3.3601978127680514E-4	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999899326129252	WITHOUT_CLASSIFICATION	1.006738707469736E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.999947584150978	WITHOUT_CLASSIFICATION	5.2415849022117536E-5	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9997444044138892	WITHOUT_CLASSIFICATION	2.555955861107607E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995350869209	WITHOUT_CLASSIFICATION	4.649130791445998E-7	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.999825664784975	WITHOUT_CLASSIFICATION	1.7433521502492407E-4	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9998278530082281	WITHOUT_CLASSIFICATION	1.721469917719155E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9971271141309875	WITHOUT_CLASSIFICATION	0.002872885869012485	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999754369328	WITHOUT_CLASSIFICATION	2.4563067210559875E-8	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999995555353133	WITHOUT_CLASSIFICATION	4.444646867031996E-6	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9999442360295046	WITHOUT_CLASSIFICATION	5.576397049551827E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999803651480237	WITHOUT_CLASSIFICATION	1.963485197630883E-5	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9999803651480237	WITHOUT_CLASSIFICATION	1.963485197630883E-5	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999085897803119	WITHOUT_CLASSIFICATION	9.141021968803425E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999851005374	WITHOUT_CLASSIFICATION	1.4899462607529145E-7	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999989904387473	WITHOUT_CLASSIFICATION	1.0095612526943441E-6	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9999850474409376	WITHOUT_CLASSIFICATION	1.4952559062425851E-5	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999963695245129	WITHOUT_CLASSIFICATION	3.6304754869940914E-6	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999827157337499	WITHOUT_CLASSIFICATION	1.728426625010996E-5	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999997930464	WITHOUT_CLASSIFICATION	2.0695355388553861E-10	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9999993095718955	WITHOUT_CLASSIFICATION	6.904281043523535E-7	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999085897803119	WITHOUT_CLASSIFICATION	9.141021968803425E-5	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.999999851005374	WITHOUT_CLASSIFICATION	1.4899462607529145E-7	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999622638359342	WITHOUT_CLASSIFICATION	3.773616406577704E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.998125687393256	WITHOUT_CLASSIFICATION	0.0018743126067439176	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9997929823990442	WITHOUT_CLASSIFICATION	2.0701760095581437E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999570674826781	WITHOUT_CLASSIFICATION	4.293251732186666E-5	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999981967032012	WITHOUT_CLASSIFICATION	1.803296798822918E-6	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9999754522045611	WITHOUT_CLASSIFICATION	2.4547795438902287E-5	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999999999257638	WITHOUT_CLASSIFICATION	7.423611714267032E-11	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998941915173806	WITHOUT_CLASSIFICATION	1.0580848261933398E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999991086092033	WITHOUT_CLASSIFICATION	8.913907967907872E-7	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5002558838938405	WITHOUT_CLASSIFICATION	0.4997441161061597	DESIGN
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999999995166433	WITHOUT_CLASSIFICATION	4.833567021885782E-10	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.5002558838938405	WITHOUT_CLASSIFICATION	0.4997441161061597	DESIGN
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.99999999113552	WITHOUT_CLASSIFICATION	8.864479992420688E-9	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9999967179073903	WITHOUT_CLASSIFICATION	3.2820926096391525E-6	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9999995276110385	WITHOUT_CLASSIFICATION	4.723889614736615E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992148954348	WITHOUT_CLASSIFICATION	7.851045651223027E-7	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9994642353762988	WITHOUT_CLASSIFICATION	5.357646237012221E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998941915173806	WITHOUT_CLASSIFICATION	1.0580848261933398E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998941915173806	WITHOUT_CLASSIFICATION	1.0580848261933398E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9999815657472781	WITHOUT_CLASSIFICATION	1.8434252721802046E-5	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9999808115302165	WITHOUT_CLASSIFICATION	1.9188469783604687E-5	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999964397342518	WITHOUT_CLASSIFICATION	3.5602657482496014E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999933575550074	WITHOUT_CLASSIFICATION	6.642444992596113E-6	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9999984357656951	WITHOUT_CLASSIFICATION	1.5642343047537218E-6	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.999865601362271	WITHOUT_CLASSIFICATION	1.3439863772895792E-4	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9109380468832177	DESIGN	0.08906195311678233	WITHOUT_CLASSIFICATION
strip leading ','	WITHOUT_CLASSIFICATION	0.999998920461204	WITHOUT_CLASSIFICATION	1.0795387960992489E-6	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999801756170958	WITHOUT_CLASSIFICATION	1.982438290422321E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9991031882775102	WITHOUT_CLASSIFICATION	8.968117224896944E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9997851119970707	WITHOUT_CLASSIFICATION	2.1488800292944097E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9999920562518028	WITHOUT_CLASSIFICATION	7.943748197275294E-6	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9999997826306399	WITHOUT_CLASSIFICATION	2.1736936005689912E-7	DESIGN
types	WITHOUT_CLASSIFICATION	0.9998985607235652	WITHOUT_CLASSIFICATION	1.0143927643488457E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999683682709979	WITHOUT_CLASSIFICATION	3.163172900216758E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9999662811704874	WITHOUT_CLASSIFICATION	3.3718829512669604E-5	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999908956097819	WITHOUT_CLASSIFICATION	9.104390217988804E-6	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999994277917352	WITHOUT_CLASSIFICATION	5.722082647985853E-7	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.99997148054035	WITHOUT_CLASSIFICATION	2.8519459649957418E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9999993932416118	WITHOUT_CLASSIFICATION	6.06758388282694E-7	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.999932844304728	WITHOUT_CLASSIFICATION	6.715569527211827E-5	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999933980093428	WITHOUT_CLASSIFICATION	6.601990657196849E-5	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999956358474736	WITHOUT_CLASSIFICATION	4.364152526424365E-6	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998023333572511	WITHOUT_CLASSIFICATION	1.976666427489949E-4	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999990408799937	WITHOUT_CLASSIFICATION	9.591200062400438E-7	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999979054496383	WITHOUT_CLASSIFICATION	2.0945503618052086E-6	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9999140341758226	WITHOUT_CLASSIFICATION	8.596582417737165E-5	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999073949206823	WITHOUT_CLASSIFICATION	9.260507931782726E-5	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9947460995791282	WITHOUT_CLASSIFICATION	0.005253900420871839	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9963114116331646	WITHOUT_CLASSIFICATION	0.0036885883668354323	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9951066965014829	WITHOUT_CLASSIFICATION	0.004893303498517125	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.7546224827024209	WITHOUT_CLASSIFICATION	0.24537751729757912	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9787566996754132	WITHOUT_CLASSIFICATION	0.021243300324586767	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.999998920461204	WITHOUT_CLASSIFICATION	1.0795387960992489E-6	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9996723697350328	WITHOUT_CLASSIFICATION	3.276302649671792E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9999274478187136	WITHOUT_CLASSIFICATION	7.255218128643654E-5	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7547017747071154	WITHOUT_CLASSIFICATION	0.2452982252928846	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9999999841817749	WITHOUT_CLASSIFICATION	1.581822507131158E-8	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999984658906673	WITHOUT_CLASSIFICATION	1.5341093327567007E-6	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999997758632931	WITHOUT_CLASSIFICATION	2.2413670693245178E-7	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999933575550074	WITHOUT_CLASSIFICATION	6.642444992596113E-6	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9999933575550074	WITHOUT_CLASSIFICATION	6.642444992596113E-6	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999991900948229	WITHOUT_CLASSIFICATION	8.099051772416803E-7	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999998162385711	WITHOUT_CLASSIFICATION	1.8376142886734942E-7	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9999677997572066	WITHOUT_CLASSIFICATION	3.220024279337345E-5	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999997262023851	WITHOUT_CLASSIFICATION	2.737976149130324E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999968018571516	WITHOUT_CLASSIFICATION	3.198142848438312E-6	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.999933251702531	WITHOUT_CLASSIFICATION	6.674829746894923E-5	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9986694185003486	WITHOUT_CLASSIFICATION	0.0013305814996513066	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999991853452997	WITHOUT_CLASSIFICATION	8.146547002780422E-7	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9999999620330844	WITHOUT_CLASSIFICATION	3.7966915620635296E-8	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999802729590377	WITHOUT_CLASSIFICATION	1.972704096231751E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999968822006311	WITHOUT_CLASSIFICATION	3.117799369029667E-6	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.999933990548197	WITHOUT_CLASSIFICATION	6.600945180308863E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999961506070728	WITHOUT_CLASSIFICATION	3.849392927150783E-6	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9999085897803119	WITHOUT_CLASSIFICATION	9.141021968803425E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999968822006311	WITHOUT_CLASSIFICATION	3.117799369029667E-6	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999870869508078	WITHOUT_CLASSIFICATION	1.2913049192149875E-5	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.8570556164635955	WITHOUT_CLASSIFICATION	0.14294438353640448	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999987530123837	WITHOUT_CLASSIFICATION	1.2469876162664315E-6	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.7114221263761269	DESIGN	0.288577873623873	WITHOUT_CLASSIFICATION
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999961506070728	WITHOUT_CLASSIFICATION	3.849392927150783E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999158252815235	WITHOUT_CLASSIFICATION	8.417471847652172E-5	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999990676996404	WITHOUT_CLASSIFICATION	9.323003596640513E-7	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993692386222	WITHOUT_CLASSIFICATION	6.307613778473231E-7	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999995850879879	WITHOUT_CLASSIFICATION	4.149120121581827E-7	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9999940887146391	WITHOUT_CLASSIFICATION	5.911285360944484E-6	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999658739771858	WITHOUT_CLASSIFICATION	3.412602281410433E-5	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9999981245082641	WITHOUT_CLASSIFICATION	1.8754917359712263E-6	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999250899480038	WITHOUT_CLASSIFICATION	7.49100519961994E-5	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999824124329379	WITHOUT_CLASSIFICATION	1.7587567062115643E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999730811783671	WITHOUT_CLASSIFICATION	2.6918821632787298E-5	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.964620698743753	WITHOUT_CLASSIFICATION	0.03537930125624707	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999876138129177	WITHOUT_CLASSIFICATION	1.238618708235285E-5	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999968822006311	WITHOUT_CLASSIFICATION	3.117799369029667E-6	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999158252815235	WITHOUT_CLASSIFICATION	8.417471847652172E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999993692386222	WITHOUT_CLASSIFICATION	6.307613778473231E-7	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9999756418233839	WITHOUT_CLASSIFICATION	2.435817661600521E-5	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9976697986538917	WITHOUT_CLASSIFICATION	0.00233020134610831	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.999933883636674	WITHOUT_CLASSIFICATION	6.61163633259587E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999961506070728	WITHOUT_CLASSIFICATION	3.849392927150783E-6	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9993244067769474	WITHOUT_CLASSIFICATION	6.755932230525016E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999998081258448	WITHOUT_CLASSIFICATION	1.9187415511793792E-7	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.999977283955278	WITHOUT_CLASSIFICATION	2.2716044722083215E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692667649518	WITHOUT_CLASSIFICATION	3.073323504820777E-5	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999250899480038	WITHOUT_CLASSIFICATION	7.49100519961994E-5	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999870869508078	WITHOUT_CLASSIFICATION	1.2913049192149875E-5	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9999658449408143	WITHOUT_CLASSIFICATION	3.415505918570574E-5	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999998715434825	WITHOUT_CLASSIFICATION	1.2845651750364046E-7	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999496362559631	WITHOUT_CLASSIFICATION	5.036374403687493E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9999473434587536	WITHOUT_CLASSIFICATION	5.2656541246444634E-5	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9996710736974751	WITHOUT_CLASSIFICATION	3.2892630252487364E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9999690286387912	WITHOUT_CLASSIFICATION	3.097136120885218E-5	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9999770063358915	WITHOUT_CLASSIFICATION	2.299366410853749E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992148954348	WITHOUT_CLASSIFICATION	7.851045651223027E-7	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996330571352993	WITHOUT_CLASSIFICATION	3.6694286470076546E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999986152261	WITHOUT_CLASSIFICATION	1.3847738125592408E-9	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999806078793637	WITHOUT_CLASSIFICATION	1.9392120636277735E-5	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999999393747087	WITHOUT_CLASSIFICATION	6.06252913329605E-8	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9999996534868296	WITHOUT_CLASSIFICATION	3.465131702941861E-7	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9999998076953578	WITHOUT_CLASSIFICATION	1.9230464219096186E-7	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.999997376403263	WITHOUT_CLASSIFICATION	2.623596736891036E-6	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999998460046091	WITHOUT_CLASSIFICATION	1.539953909416823E-7	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9999692667649518	WITHOUT_CLASSIFICATION	3.073323504820777E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9998231476104918	WITHOUT_CLASSIFICATION	1.7685238950814497E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9999591138821438	WITHOUT_CLASSIFICATION	4.088611785630619E-5	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999952937266333	WITHOUT_CLASSIFICATION	4.706273366701923E-6	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999987973452125	WITHOUT_CLASSIFICATION	1.202654787425288E-6	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9999851404322148	WITHOUT_CLASSIFICATION	1.4859567785306326E-5	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.99997459413047	WITHOUT_CLASSIFICATION	2.5405869530001673E-5	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999997780798943	WITHOUT_CLASSIFICATION	2.2192010574521988E-7	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9947865439064568	WITHOUT_CLASSIFICATION	0.005213456093543157	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999827190782395	WITHOUT_CLASSIFICATION	1.7280921760492794E-5	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.992018329241996	WITHOUT_CLASSIFICATION	0.007981670758003982	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999995311266683	WITHOUT_CLASSIFICATION	4.6887333164540793E-7	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999327026777	WITHOUT_CLASSIFICATION	6.729732227043355E-8	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9957872713130622	WITHOUT_CLASSIFICATION	0.004212728686937771	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9999140221722898	WITHOUT_CLASSIFICATION	8.597782771022724E-5	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9943351562103462	WITHOUT_CLASSIFICATION	0.005664843789653804	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999992753448986	WITHOUT_CLASSIFICATION	7.246551013186805E-7	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.9975067084973022	WITHOUT_CLASSIFICATION	0.002493291502697915	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999409273975853	WITHOUT_CLASSIFICATION	5.907260241469271E-5	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9997557352913748	WITHOUT_CLASSIFICATION	2.4426470862515454E-4	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9999088248451775	WITHOUT_CLASSIFICATION	9.117515482247181E-5	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9999396945154545	WITHOUT_CLASSIFICATION	6.0305484545389976E-5	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999949187170883	WITHOUT_CLASSIFICATION	5.08128291158369E-6	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9999992068622001	WITHOUT_CLASSIFICATION	7.931377998475893E-7	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999995964070081	WITHOUT_CLASSIFICATION	4.035929918433663E-7	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999993688556902	WITHOUT_CLASSIFICATION	6.311443097620252E-7	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8367603128888379	DESIGN	0.16323968711116205	WITHOUT_CLASSIFICATION
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999947824157114	WITHOUT_CLASSIFICATION	5.217584288626186E-6	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999986401754241	WITHOUT_CLASSIFICATION	1.3598245759901707E-6	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999583437694746	WITHOUT_CLASSIFICATION	4.165623052539173E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5966850014617447	DESIGN	0.4033149985382553	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999648501910187	WITHOUT_CLASSIFICATION	3.514980898124213E-5	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9999625720619604	WITHOUT_CLASSIFICATION	3.742793803973161E-5	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9999981376443193	WITHOUT_CLASSIFICATION	1.8623556805521282E-6	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9991366580107508	WITHOUT_CLASSIFICATION	8.633419892493378E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9969372351242097	WITHOUT_CLASSIFICATION	0.003062764875790275	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999998387542978	WITHOUT_CLASSIFICATION	1.6124570213330495E-7	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999693856426716	WITHOUT_CLASSIFICATION	3.061435732834819E-5	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.7734927184646987	WITHOUT_CLASSIFICATION	0.2265072815353014	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9999998387542978	WITHOUT_CLASSIFICATION	1.6124570213330495E-7	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9969372351242097	WITHOUT_CLASSIFICATION	0.003062764875790275	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9999693856426716	WITHOUT_CLASSIFICATION	3.061435732834819E-5	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.999998366096022	WITHOUT_CLASSIFICATION	1.6339039780067218E-6	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9997537971501242	WITHOUT_CLASSIFICATION	2.462028498757415E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999985521641	WITHOUT_CLASSIFICATION	1.4478358136061722E-9	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.999921903243576	WITHOUT_CLASSIFICATION	7.809675642404923E-5	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.99999967612215	WITHOUT_CLASSIFICATION	3.2387784998339757E-7	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.9988428381664514	DESIGN	0.0011571618335485835	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.981698312838998	WITHOUT_CLASSIFICATION	0.018301687161001907	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.999613181367984	WITHOUT_CLASSIFICATION	3.8681863201597903E-4	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999602208747783	WITHOUT_CLASSIFICATION	3.9779125221661775E-5	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999862588972163	WITHOUT_CLASSIFICATION	1.3741102783710763E-5	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999987891514495	WITHOUT_CLASSIFICATION	1.2108485505704454E-6	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999898517929827	WITHOUT_CLASSIFICATION	1.0148207017368088E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9997231999100651	WITHOUT_CLASSIFICATION	2.7680008993489217E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.999921903243576	WITHOUT_CLASSIFICATION	7.809675642404923E-5	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999999561192682	WITHOUT_CLASSIFICATION	4.388073187051386E-8	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999866568136	WITHOUT_CLASSIFICATION	1.3343186429563356E-8	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9985155292806414	WITHOUT_CLASSIFICATION	0.001484470719358577	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9998554570023112	WITHOUT_CLASSIFICATION	1.4454299768891973E-4	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999297714445332	WITHOUT_CLASSIFICATION	7.022855546683868E-5	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999991581525757	WITHOUT_CLASSIFICATION	8.418474243668979E-7	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9874522802967753	WITHOUT_CLASSIFICATION	0.01254771970322468	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999998723289811	WITHOUT_CLASSIFICATION	1.2767101887398484E-7	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.999930427455831	WITHOUT_CLASSIFICATION	6.957254416892547E-5	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.999998974558631	WITHOUT_CLASSIFICATION	1.025441369094372E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999916895189835	WITHOUT_CLASSIFICATION	8.31048101636439E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999916895189835	WITHOUT_CLASSIFICATION	8.31048101636439E-6	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999648513167	WITHOUT_CLASSIFICATION	3.5148683235162704E-8	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999648513167	WITHOUT_CLASSIFICATION	3.5148683235162704E-8	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.994020605791123	WITHOUT_CLASSIFICATION	0.005979394208877055	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9985155292806414	WITHOUT_CLASSIFICATION	0.001484470719358577	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9999465856634974	WITHOUT_CLASSIFICATION	5.341433650255623E-5	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999855158086387	WITHOUT_CLASSIFICATION	1.4484191361227549E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9995412162447367	WITHOUT_CLASSIFICATION	4.587837552633405E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9995412162447367	WITHOUT_CLASSIFICATION	4.587837552633405E-4	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999999932100487	WITHOUT_CLASSIFICATION	6.789951302816439E-8	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999887382287813	WITHOUT_CLASSIFICATION	1.1261771218725896E-5	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9994692571739735	WITHOUT_CLASSIFICATION	5.30742826026486E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.999998754139793	WITHOUT_CLASSIFICATION	1.2458602069800426E-6	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.9702280547936734	WITHOUT_CLASSIFICATION	0.02977194520632657	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999991031453518	WITHOUT_CLASSIFICATION	8.968546482212194E-7	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9999376716298531	WITHOUT_CLASSIFICATION	6.232837014695172E-5	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.8046063962780508	WITHOUT_CLASSIFICATION	0.19539360372194925	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9999919296900562	WITHOUT_CLASSIFICATION	8.07030994376077E-6	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999978017521833	WITHOUT_CLASSIFICATION	2.198247816593165E-6	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9999965915999687	WITHOUT_CLASSIFICATION	3.408400031349064E-6	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9999872400634429	WITHOUT_CLASSIFICATION	1.2759936557171728E-5	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999987257317094	WITHOUT_CLASSIFICATION	1.2742682905380376E-6	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9999777625120321	WITHOUT_CLASSIFICATION	2.2237487967984068E-5	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999845096149788	WITHOUT_CLASSIFICATION	1.5490385021243497E-5	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.99995939949493	WITHOUT_CLASSIFICATION	4.0600505070030156E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9927894380984988	WITHOUT_CLASSIFICATION	0.007210561901501099	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999964642677088	WITHOUT_CLASSIFICATION	3.5357322910834334E-6	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999610363935403	WITHOUT_CLASSIFICATION	3.896360645962517E-5	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999900404098622	WITHOUT_CLASSIFICATION	9.959590137805855E-6	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999853516624905	WITHOUT_CLASSIFICATION	1.464833750948643E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9999995759534182	WITHOUT_CLASSIFICATION	4.2404658186716234E-7	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999977399073069	WITHOUT_CLASSIFICATION	2.260092693008219E-6	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998653704473266	WITHOUT_CLASSIFICATION	1.346295526735211E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998512266543914	WITHOUT_CLASSIFICATION	1.487733456086039E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999987146835309	WITHOUT_CLASSIFICATION	1.285316469184066E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999999327026777	WITHOUT_CLASSIFICATION	6.729732227043355E-8	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999999702796474	WITHOUT_CLASSIFICATION	2.9720352556292955E-8	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.999562936909713	WITHOUT_CLASSIFICATION	4.3706309028709465E-4	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671591400612	WITHOUT_CLASSIFICATION	3.284085993880564E-5	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765467003319	WITHOUT_CLASSIFICATION	2.3453299668144673E-5	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999976077362032	WITHOUT_CLASSIFICATION	2.3922637968909845E-6	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9999976077362032	WITHOUT_CLASSIFICATION	2.3922637968909845E-6	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999972903122685	WITHOUT_CLASSIFICATION	2.709687731515264E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9999642674259546	WITHOUT_CLASSIFICATION	3.573257404544378E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999664229811831	WITHOUT_CLASSIFICATION	3.357701881692561E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9999664229811831	WITHOUT_CLASSIFICATION	3.357701881692561E-5	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9998868446929533	WITHOUT_CLASSIFICATION	1.1315530704666993E-4	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9988906873252129	WITHOUT_CLASSIFICATION	0.0011093126747870176	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9999943931149212	WITHOUT_CLASSIFICATION	5.606885078797223E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999936066038573	WITHOUT_CLASSIFICATION	6.39339614263376E-6	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.999875810253068	WITHOUT_CLASSIFICATION	1.2418974693201795E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9999365956960159	WITHOUT_CLASSIFICATION	6.34043039840991E-5	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9948833096595023	WITHOUT_CLASSIFICATION	0.005116690340497618	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9999062614302547	WITHOUT_CLASSIFICATION	9.373856974525177E-5	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9982716442179123	WITHOUT_CLASSIFICATION	0.0017283557820877914	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9982716442179123	WITHOUT_CLASSIFICATION	0.0017283557820877914	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8370980950940734	WITHOUT_CLASSIFICATION	0.16290190490592657	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999748544454826	WITHOUT_CLASSIFICATION	2.5145554517406548E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999748544454826	WITHOUT_CLASSIFICATION	2.5145554517406548E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9982208755773806	WITHOUT_CLASSIFICATION	0.0017791244226195	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9999414159555472	WITHOUT_CLASSIFICATION	5.858404445290711E-5	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9959306615617458	WITHOUT_CLASSIFICATION	0.004069338438254216	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999992808091367	WITHOUT_CLASSIFICATION	7.191908632306888E-7	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9999973028482149	WITHOUT_CLASSIFICATION	2.6971517850806203E-6	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9999999921164243	WITHOUT_CLASSIFICATION	7.883575781974734E-9	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9999991619844049	WITHOUT_CLASSIFICATION	8.380155950579586E-7	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.999754285152513	WITHOUT_CLASSIFICATION	2.4571484748702E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999975380344817	WITHOUT_CLASSIFICATION	2.461965518274661E-6	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9994566863967613	WITHOUT_CLASSIFICATION	5.433136032386409E-4	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.999997056209568	WITHOUT_CLASSIFICATION	2.943790432082186E-6	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999965714121736	WITHOUT_CLASSIFICATION	3.428587826465315E-6	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999984303331142	WITHOUT_CLASSIFICATION	1.5696668857966066E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999984303331142	WITHOUT_CLASSIFICATION	1.5696668857966066E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999984303331142	WITHOUT_CLASSIFICATION	1.5696668857966066E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.999984303331142	WITHOUT_CLASSIFICATION	1.5696668857966066E-5	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999972653984044	WITHOUT_CLASSIFICATION	2.734601595529062E-6	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999023438771637	WITHOUT_CLASSIFICATION	9.765612283617579E-5	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999899259957953	WITHOUT_CLASSIFICATION	1.0074004204766483E-5	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9998175934253782	WITHOUT_CLASSIFICATION	1.824065746218355E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999929196258849	WITHOUT_CLASSIFICATION	7.080374115057675E-6	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9954266403044771	WITHOUT_CLASSIFICATION	0.004573359695522861	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9911590141089657	WITHOUT_CLASSIFICATION	0.008840985891034268	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999927292073799	WITHOUT_CLASSIFICATION	7.270792620095457E-6	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999995570474852	WITHOUT_CLASSIFICATION	4.4295251477089786E-7	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9999999216431931	WITHOUT_CLASSIFICATION	7.835680698624857E-8	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9998741444272037	WITHOUT_CLASSIFICATION	1.25855572796267E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996599925225	WITHOUT_CLASSIFICATION	3.400074774834758E-7	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9983876786532185	WITHOUT_CLASSIFICATION	0.0016123213467814943	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999905178437266	WITHOUT_CLASSIFICATION	9.482156273378893E-6	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999535693057404	WITHOUT_CLASSIFICATION	4.6430694259628974E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996599925225	WITHOUT_CLASSIFICATION	3.400074774834758E-7	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9999981747488575	WITHOUT_CLASSIFICATION	1.8252511424743877E-6	DESIGN
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999607289670921	WITHOUT_CLASSIFICATION	3.927103290793107E-5	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999991200429265	WITHOUT_CLASSIFICATION	8.799570736066023E-7	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9999186591091141	WITHOUT_CLASSIFICATION	8.134089088576811E-5	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.8910355225783518	WITHOUT_CLASSIFICATION	0.10896447742164816	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9998937961606826	WITHOUT_CLASSIFICATION	1.0620383931737392E-4	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999985270921134	WITHOUT_CLASSIFICATION	1.4729078866002425E-5	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999968694371113	WITHOUT_CLASSIFICATION	3.1305628886440866E-6	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999972653526265	WITHOUT_CLASSIFICATION	2.7346473735168873E-6	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9999990753442776	WITHOUT_CLASSIFICATION	9.246557224195484E-7	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958395167883	WITHOUT_CLASSIFICATION	4.160483211735024E-6	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999635883577558	WITHOUT_CLASSIFICATION	3.641164224414267E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9972190420810415	WITHOUT_CLASSIFICATION	0.0027809579189584785	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9982748060815595	WITHOUT_CLASSIFICATION	0.001725193918440541	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999995209857897	WITHOUT_CLASSIFICATION	4.790142102930553E-6	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9585193911186375	WITHOUT_CLASSIFICATION	0.04148060888136262	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9993412471867511	WITHOUT_CLASSIFICATION	6.587528132489628E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999871001965681	WITHOUT_CLASSIFICATION	1.289980343189337E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9987738617250456	WITHOUT_CLASSIFICATION	0.0012261382749544313	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999871001965681	WITHOUT_CLASSIFICATION	1.289980343189337E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999939920750157	WITHOUT_CLASSIFICATION	6.007924984317672E-6	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999468877987031	WITHOUT_CLASSIFICATION	5.311220129680227E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.998991531777313	WITHOUT_CLASSIFICATION	0.0010084682226869015	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9804611417335827	WITHOUT_CLASSIFICATION	0.01953885826641732	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9912100416126054	WITHOUT_CLASSIFICATION	0.008789958387394686	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9998928119397412	WITHOUT_CLASSIFICATION	1.0718806025878633E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999837474886624	WITHOUT_CLASSIFICATION	1.625251133763676E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9993412471867511	WITHOUT_CLASSIFICATION	6.587528132489628E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9987738617250456	WITHOUT_CLASSIFICATION	0.0012261382749544313	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999939920750157	WITHOUT_CLASSIFICATION	6.007924984317672E-6	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9920114367153355	WITHOUT_CLASSIFICATION	0.007988563284664562	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9999946824061715	WITHOUT_CLASSIFICATION	5.317593828505155E-6	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999987054270076	WITHOUT_CLASSIFICATION	1.2945729924081982E-6	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9999999939934725	WITHOUT_CLASSIFICATION	6.006527463990654E-9	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999983592936085	WITHOUT_CLASSIFICATION	1.6407063915566197E-6	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9895308120852645	WITHOUT_CLASSIFICATION	0.010469187914735386	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.999999994400856	WITHOUT_CLASSIFICATION	5.59914400835934E-9	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9927894380984988	WITHOUT_CLASSIFICATION	0.007210561901501099	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999468877987031	WITHOUT_CLASSIFICATION	5.311220129680227E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999014742066935	WITHOUT_CLASSIFICATION	9.852579330648433E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9999571639181316	WITHOUT_CLASSIFICATION	4.283608186838698E-5	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999165946985198	WITHOUT_CLASSIFICATION	8.340530148023344E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9999965649652145	WITHOUT_CLASSIFICATION	3.435034785384414E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9927894380984988	WITHOUT_CLASSIFICATION	0.007210561901501099	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999917384095116	WITHOUT_CLASSIFICATION	8.261590488383437E-6	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9927894380984988	WITHOUT_CLASSIFICATION	0.007210561901501099	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9999979200772146	WITHOUT_CLASSIFICATION	2.0799227855548046E-6	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999996764215119	WITHOUT_CLASSIFICATION	3.2357848807649826E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9998149983919842	WITHOUT_CLASSIFICATION	1.8500160801589006E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999837976343102	WITHOUT_CLASSIFICATION	1.6202365689684207E-5	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999992402456254	WITHOUT_CLASSIFICATION	7.597543745869271E-7	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9999929198383245	WITHOUT_CLASSIFICATION	7.080161675463478E-6	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998448952770291	WITHOUT_CLASSIFICATION	1.551047229708904E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999803019449907	WITHOUT_CLASSIFICATION	1.969805500940244E-5	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999999585316005	WITHOUT_CLASSIFICATION	4.1468399566388687E-8	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9999969860298091	WITHOUT_CLASSIFICATION	3.0139701908200617E-6	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999960942206528	WITHOUT_CLASSIFICATION	3.9057793472476924E-6	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9874821032772695	WITHOUT_CLASSIFICATION	0.012517896722730444	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9959306615617458	WITHOUT_CLASSIFICATION	0.004069338438254216	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9999960541900861	WITHOUT_CLASSIFICATION	3.945809913857273E-6	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9998840829467185	WITHOUT_CLASSIFICATION	1.159170532814966E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9999936767749092	WITHOUT_CLASSIFICATION	6.323225090788586E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9999992438186976	WITHOUT_CLASSIFICATION	7.561813022788056E-7	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999990788958707	WITHOUT_CLASSIFICATION	9.21104129299992E-6	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9996920704633953	WITHOUT_CLASSIFICATION	3.079295366047464E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9991017236798272	WITHOUT_CLASSIFICATION	8.982763201728717E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.9527353562343983	WITHOUT_CLASSIFICATION	0.047264643765601716	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9999999952470388	WITHOUT_CLASSIFICATION	4.752961267554301E-9	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9996426214534576	WITHOUT_CLASSIFICATION	3.573785465424313E-4	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.991015782082632	WITHOUT_CLASSIFICATION	0.008984217917368038	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999779931119	WITHOUT_CLASSIFICATION	2.200688811291207E-8	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999999336129639	WITHOUT_CLASSIFICATION	6.638703610332585E-8	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9999976784412019	WITHOUT_CLASSIFICATION	2.3215587980019628E-6	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999939456528937	WITHOUT_CLASSIFICATION	6.054347106331317E-6	DESIGN
noop	WITHOUT_CLASSIFICATION	0.999789383452269	WITHOUT_CLASSIFICATION	2.1061654773099346E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999551298777	WITHOUT_CLASSIFICATION	4.487012221821149E-8	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9999582210172534	WITHOUT_CLASSIFICATION	4.177898274660968E-5	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999959959728375	WITHOUT_CLASSIFICATION	4.004027162502367E-6	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9976506499722483	WITHOUT_CLASSIFICATION	0.0023493500277517684	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999466984402917	WITHOUT_CLASSIFICATION	5.3301559708314496E-5	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.9947758171888114	WITHOUT_CLASSIFICATION	0.005224182811188566	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999965240106389	WITHOUT_CLASSIFICATION	3.4759893610895357E-6	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9999779221744833	WITHOUT_CLASSIFICATION	2.207782551669783E-5	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9998790905490141	WITHOUT_CLASSIFICATION	1.2090945098592629E-4	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9996824458663808	WITHOUT_CLASSIFICATION	3.175541336192206E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9905859670004301	WITHOUT_CLASSIFICATION	0.009414032999569904	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9950451598346087	WITHOUT_CLASSIFICATION	0.004954840165391201	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999922637746	WITHOUT_CLASSIFICATION	7.73622541855508E-9	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.8054922706682781	WITHOUT_CLASSIFICATION	0.19450772933172192	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999244315258663	WITHOUT_CLASSIFICATION	7.556847413363304E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9999244315258663	WITHOUT_CLASSIFICATION	7.556847413363304E-5	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998888276134	WITHOUT_CLASSIFICATION	1.1117238656119717E-7	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999803019449907	WITHOUT_CLASSIFICATION	1.969805500940244E-5	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9563919139581105	WITHOUT_CLASSIFICATION	0.04360808604188951	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999999994135239	WITHOUT_CLASSIFICATION	5.864761085025031E-10	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999999808729427	WITHOUT_CLASSIFICATION	1.9127057270025195E-8	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.999978857535286	WITHOUT_CLASSIFICATION	2.1142464713934585E-5	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9999840294204173	WITHOUT_CLASSIFICATION	1.597057958263545E-5	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9999409162701274	WITHOUT_CLASSIFICATION	5.908372987276018E-5	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999999772438326	WITHOUT_CLASSIFICATION	2.2756167463930294E-8	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9998045486121306	WITHOUT_CLASSIFICATION	1.954513878694168E-4	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9999478405510474	WITHOUT_CLASSIFICATION	5.2159448952598E-5	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9999984113596753	WITHOUT_CLASSIFICATION	1.58864032478752E-6	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.8066135454319454	WITHOUT_CLASSIFICATION	0.1933864545680547	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999999762464099	WITHOUT_CLASSIFICATION	2.3753590034568666E-8	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999901754469772	WITHOUT_CLASSIFICATION	9.82455302273765E-6	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999983809605	WITHOUT_CLASSIFICATION	1.6190394880482988E-9	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999997298176613	WITHOUT_CLASSIFICATION	2.7018233870555527E-7	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999994016284809	WITHOUT_CLASSIFICATION	5.983715190700793E-7	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999907701655566	WITHOUT_CLASSIFICATION	9.229834443411838E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.8757259639341852	WITHOUT_CLASSIFICATION	0.12427403606581473	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999988258636316	WITHOUT_CLASSIFICATION	1.1741363683799818E-6	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9979276110221236	WITHOUT_CLASSIFICATION	0.002072388977876354	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.99999449950275	WITHOUT_CLASSIFICATION	5.500497249970735E-6	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999963633047161	WITHOUT_CLASSIFICATION	3.636695283904496E-6	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9950451598346087	WITHOUT_CLASSIFICATION	0.004954840165391201	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999344260240787	WITHOUT_CLASSIFICATION	6.557397592135175E-5	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998851450563458	WITHOUT_CLASSIFICATION	1.1485494365417743E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999990669427994	WITHOUT_CLASSIFICATION	9.330572005472227E-7	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999997850000238	WITHOUT_CLASSIFICATION	2.1499997607161862E-7	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9998989965499894	WITHOUT_CLASSIFICATION	1.0100345001070285E-4	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999978763889602	WITHOUT_CLASSIFICATION	2.123611039712252E-6	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999999813218853	WITHOUT_CLASSIFICATION	1.8678114695550138E-7	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999801558416418	WITHOUT_CLASSIFICATION	1.9844158358176858E-5	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999988185493363	WITHOUT_CLASSIFICATION	1.181450663750181E-6	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999999868271945	WITHOUT_CLASSIFICATION	1.3172805420832247E-8	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9996755901733059	WITHOUT_CLASSIFICATION	3.244098266941569E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999963697846888	WITHOUT_CLASSIFICATION	3.630215311329247E-6	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999999954030388	WITHOUT_CLASSIFICATION	4.5969612110758E-8	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996485900036748	WITHOUT_CLASSIFICATION	3.514099963252134E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9998714323046458	WITHOUT_CLASSIFICATION	1.285676953541821E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999304288141013	WITHOUT_CLASSIFICATION	6.957118589869069E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999304288141013	WITHOUT_CLASSIFICATION	6.957118589869069E-5	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9999848284521063	WITHOUT_CLASSIFICATION	1.5171547893524897E-5	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997486597155145	WITHOUT_CLASSIFICATION	2.513402844854576E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999978118975109	WITHOUT_CLASSIFICATION	2.1881024891156953E-6	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999978118975109	WITHOUT_CLASSIFICATION	2.1881024891156953E-6	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9999745464938702	WITHOUT_CLASSIFICATION	2.5453506129872007E-5	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999805764003648	WITHOUT_CLASSIFICATION	1.9423599635198497E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.6125174259173324	WITHOUT_CLASSIFICATION	0.38748257408266756	DESIGN
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999950370614585	WITHOUT_CLASSIFICATION	4.962938541480064E-6	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999981353764977	WITHOUT_CLASSIFICATION	1.8646235023299213E-6	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.999999279008353	WITHOUT_CLASSIFICATION	7.209916469650533E-7	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997378577479	WITHOUT_CLASSIFICATION	2.621422521145862E-7	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999997378577479	WITHOUT_CLASSIFICATION	2.621422521145862E-7	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999993007995175	WITHOUT_CLASSIFICATION	6.992004824717597E-7	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9976542203477675	WITHOUT_CLASSIFICATION	0.002345779652232512	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9999991042034229	WITHOUT_CLASSIFICATION	8.957965771584133E-7	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999978006608486	WITHOUT_CLASSIFICATION	2.1993391513258376E-6	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9999978006608486	WITHOUT_CLASSIFICATION	2.1993391513258376E-6	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999987641199225	WITHOUT_CLASSIFICATION	1.2358800775479712E-6	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9999978365594621	WITHOUT_CLASSIFICATION	2.1634405379806307E-6	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.7845669372333993	WITHOUT_CLASSIFICATION	0.21543306276660068	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9999956420808803	WITHOUT_CLASSIFICATION	4.357919119685395E-6	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9994070346036851	WITHOUT_CLASSIFICATION	5.92965396314953E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9999892038099364	WITHOUT_CLASSIFICATION	1.0796190063584854E-5	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999042956954223	WITHOUT_CLASSIFICATION	9.570430457773726E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999858610808117	WITHOUT_CLASSIFICATION	1.4138919188201054E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9996069431893733	WITHOUT_CLASSIFICATION	3.9305681062675433E-4	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.99986977180841	WITHOUT_CLASSIFICATION	1.302281915900375E-4	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999995056371958	WITHOUT_CLASSIFICATION	4.94362804206736E-7	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9962126817240334	WITHOUT_CLASSIFICATION	0.0037873182759665717	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9999805649714026	WITHOUT_CLASSIFICATION	1.9435028597407838E-5	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999920954386221	WITHOUT_CLASSIFICATION	7.90456137790836E-5	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9990013937828003	WITHOUT_CLASSIFICATION	9.986062171997703E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999713633969	WITHOUT_CLASSIFICATION	2.8636603211328394E-8	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.999962252629987	WITHOUT_CLASSIFICATION	3.774737001309838E-5	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999996302537393	WITHOUT_CLASSIFICATION	3.6974626073825255E-7	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9999855808499748	WITHOUT_CLASSIFICATION	1.4419150025197127E-5	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999800316482039	WITHOUT_CLASSIFICATION	1.996835179609017E-5	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999790446737455	WITHOUT_CLASSIFICATION	2.095532625443497E-5	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9962137166672184	WITHOUT_CLASSIFICATION	0.0037862833327816916	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9974512552330074	WITHOUT_CLASSIFICATION	0.0025487447669925566	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999993538246655	WITHOUT_CLASSIFICATION	6.461753344441911E-7	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9974730109667499	WITHOUT_CLASSIFICATION	0.002526989033250054	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9999722878373559	WITHOUT_CLASSIFICATION	2.7712162644085962E-5	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9999970840667884	WITHOUT_CLASSIFICATION	2.9159332115709546E-6	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999956774310104	WITHOUT_CLASSIFICATION	4.322568989647547E-6	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999991693830752	WITHOUT_CLASSIFICATION	8.306169247801075E-7	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9998794970097656	WITHOUT_CLASSIFICATION	1.2050299023441942E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8236621251633605	WITHOUT_CLASSIFICATION	0.1763378748366394	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999916011859202	WITHOUT_CLASSIFICATION	8.398814079770027E-6	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999939388887248	WITHOUT_CLASSIFICATION	6.06111127524314E-6	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9999877330691522	WITHOUT_CLASSIFICATION	1.2266930847778014E-5	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9998923623333547	WITHOUT_CLASSIFICATION	1.0763766664539232E-4	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998532845297001	WITHOUT_CLASSIFICATION	1.467154702997589E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.99931395714603	WITHOUT_CLASSIFICATION	6.860428539700606E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999959268338	WITHOUT_CLASSIFICATION	4.073166205586384E-8	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999758925646798	WITHOUT_CLASSIFICATION	2.41074353202745E-5	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.999994509723143	WITHOUT_CLASSIFICATION	5.490276857044264E-6	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999881954082456	WITHOUT_CLASSIFICATION	1.180459175452169E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.999964152592227	WITHOUT_CLASSIFICATION	3.5847407773037305E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9999928159172674	WITHOUT_CLASSIFICATION	7.184082732647163E-6	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9999731799491979	WITHOUT_CLASSIFICATION	2.682005080208661E-5	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9999962351747633	WITHOUT_CLASSIFICATION	3.764825236667635E-6	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9999990314892983	WITHOUT_CLASSIFICATION	9.685107018292096E-7	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999441480870028	WITHOUT_CLASSIFICATION	5.585191299714936E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.988748141657939	WITHOUT_CLASSIFICATION	0.011251858342061048	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999792966562412	WITHOUT_CLASSIFICATION	2.070334375879057E-5	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999999868882539	WITHOUT_CLASSIFICATION	1.3111746107385333E-7	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9991621541387623	WITHOUT_CLASSIFICATION	8.378458612377055E-4	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999459395541156	WITHOUT_CLASSIFICATION	5.406044588445581E-5	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999992141620937	WITHOUT_CLASSIFICATION	7.858379062616524E-7	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9999999458484724	WITHOUT_CLASSIFICATION	5.4151527585690896E-8	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9999765384901161	WITHOUT_CLASSIFICATION	2.3461509883892755E-5	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999824422547987	WITHOUT_CLASSIFICATION	1.7557745201350038E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999566342964223	WITHOUT_CLASSIFICATION	4.3365703577705384E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999980214043167	WITHOUT_CLASSIFICATION	1.9785956833081237E-5	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999961735903922	WITHOUT_CLASSIFICATION	3.826409607810684E-6	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.999981237787068	WITHOUT_CLASSIFICATION	1.8762212931929722E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994934683764	WITHOUT_CLASSIFICATION	5.06531623748843E-7	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999994934683764	WITHOUT_CLASSIFICATION	5.06531623748843E-7	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999999999930954	WITHOUT_CLASSIFICATION	6.90462699474258E-12	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9996375508129128	WITHOUT_CLASSIFICATION	3.624491870871776E-4	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999995062241264	WITHOUT_CLASSIFICATION	4.937758735586472E-7	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9966770210429698	WITHOUT_CLASSIFICATION	0.0033229789570301824	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.999999997088692	WITHOUT_CLASSIFICATION	2.9113079655031317E-9	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9999984700995155	WITHOUT_CLASSIFICATION	1.5299004845813378E-6	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999992553255524	WITHOUT_CLASSIFICATION	7.446744474477876E-7	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999943962506	WITHOUT_CLASSIFICATION	5.603749399506692E-8	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9999973678608239	WITHOUT_CLASSIFICATION	2.6321391760583165E-6	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9999976970050987	WITHOUT_CLASSIFICATION	2.3029949013114543E-6	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999523697482795	WITHOUT_CLASSIFICATION	4.763025172045637E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999117053996964	WITHOUT_CLASSIFICATION	8.829460030350136E-5	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999950676681	WITHOUT_CLASSIFICATION	4.932331837915781E-9	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.99997637996902	WITHOUT_CLASSIFICATION	2.3620030979950475E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999893362927794	WITHOUT_CLASSIFICATION	1.066370722063614E-5	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9999893362927794	WITHOUT_CLASSIFICATION	1.066370722063614E-5	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999904411624954	WITHOUT_CLASSIFICATION	9.558837504671648E-6	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9990207319979312	WITHOUT_CLASSIFICATION	9.792680020688724E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999999996309266	WITHOUT_CLASSIFICATION	3.6907339947001307E-9	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999392365334	WITHOUT_CLASSIFICATION	6.076346657978715E-8	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999997606166403	WITHOUT_CLASSIFICATION	2.3938335968822774E-7	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999830299027755	WITHOUT_CLASSIFICATION	1.6970097224451687E-5	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.99999323025601	WITHOUT_CLASSIFICATION	6.769743990077488E-6	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999986592381637	WITHOUT_CLASSIFICATION	1.3407618363281996E-6	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.958690796116245	WITHOUT_CLASSIFICATION	0.04130920388375497	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999187275646613	WITHOUT_CLASSIFICATION	8.127243533871284E-5	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999997774448411	WITHOUT_CLASSIFICATION	2.2255515875016394E-7	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999999765192481	WITHOUT_CLASSIFICATION	2.348075192538013E-8	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9999996791244635	WITHOUT_CLASSIFICATION	3.20875536447421E-7	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999785476787	WITHOUT_CLASSIFICATION	2.1452321256047203E-8	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999992589610771	WITHOUT_CLASSIFICATION	7.410389227908709E-7	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.7245014012351066	WITHOUT_CLASSIFICATION	0.2754985987648934	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9999259670304697	WITHOUT_CLASSIFICATION	7.403296953026794E-5	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9973015846426216	WITHOUT_CLASSIFICATION	0.00269841535737836	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999988777273867	WITHOUT_CLASSIFICATION	1.1222726132535088E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999999988932669	WITHOUT_CLASSIFICATION	1.106733110221326E-9	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9999617378869318	WITHOUT_CLASSIFICATION	3.826211306821362E-5	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999993973041	WITHOUT_CLASSIFICATION	6.026959290895186E-10	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9999692851104827	WITHOUT_CLASSIFICATION	3.0714889517354696E-5	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999730258744	WITHOUT_CLASSIFICATION	2.69741256697521E-8	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.99903274382995	WITHOUT_CLASSIFICATION	9.672561700501493E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9999729496184006	WITHOUT_CLASSIFICATION	2.7050381599496814E-5	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9263172155033158	WITHOUT_CLASSIFICATION	0.0736827844966842	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.987714300630328	WITHOUT_CLASSIFICATION	0.012285699369671966	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999998587793	WITHOUT_CLASSIFICATION	1.412205994841449E-10	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9878358056380911	WITHOUT_CLASSIFICATION	0.012164194361908845	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999945067345897	WITHOUT_CLASSIFICATION	5.493265410309371E-6	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9992717603014405	WITHOUT_CLASSIFICATION	7.282396985594375E-4	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9993950717177392	WITHOUT_CLASSIFICATION	6.049282822607304E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999999993203041	WITHOUT_CLASSIFICATION	6.796957919602283E-10	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999998511931856	WITHOUT_CLASSIFICATION	1.4880681441117891E-6	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999983490257736	WITHOUT_CLASSIFICATION	1.65097422643087E-6	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.5368137575884249	WITHOUT_CLASSIFICATION	0.463186242411575	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9992043564523454	WITHOUT_CLASSIFICATION	7.956435476545107E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999990586739926	WITHOUT_CLASSIFICATION	9.413260073959617E-7	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999958570336864	WITHOUT_CLASSIFICATION	4.142966313551438E-6	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9471531176039268	WITHOUT_CLASSIFICATION	0.052846882396073214	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.904515259935531	DESIGN	0.09548474006446912	WITHOUT_CLASSIFICATION
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9969691980187576	WITHOUT_CLASSIFICATION	0.0030308019812423648	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9969691980187576	WITHOUT_CLASSIFICATION	0.0030308019812423648	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999998977424015	WITHOUT_CLASSIFICATION	1.0225759844855621E-7	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999998100460976	WITHOUT_CLASSIFICATION	1.8995390241270166E-7	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9298366000893696	DESIGN	0.07016339991063039	WITHOUT_CLASSIFICATION
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.99699390383779	WITHOUT_CLASSIFICATION	0.0030060961622099826	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9999913047841058	WITHOUT_CLASSIFICATION	8.695215894295233E-6	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999974355049961	WITHOUT_CLASSIFICATION	2.564495003900174E-6	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9998665959636082	WITHOUT_CLASSIFICATION	1.3340403639174793E-4	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999960107838927	WITHOUT_CLASSIFICATION	3.9892161074307975E-6	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9696021506532978	DESIGN	0.030397849346702234	WITHOUT_CLASSIFICATION
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999908896609	WITHOUT_CLASSIFICATION	9.110339114660896E-8	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992767223875	WITHOUT_CLASSIFICATION	7.232776124209304E-7	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9996955075082832	WITHOUT_CLASSIFICATION	3.044924917168156E-4	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999969994134387	WITHOUT_CLASSIFICATION	3.000586561262635E-6	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999980405913	WITHOUT_CLASSIFICATION	1.959408701357658E-9	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9998912589832248	WITHOUT_CLASSIFICATION	1.0874101677523208E-4	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9999865228148758	WITHOUT_CLASSIFICATION	1.3477185124314217E-5	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9966015608233291	WITHOUT_CLASSIFICATION	0.003398439176671054	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999999827222698	WITHOUT_CLASSIFICATION	1.727773024130484E-8	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999999756954072	WITHOUT_CLASSIFICATION	2.4304592827933907E-8	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9988615587045471	WITHOUT_CLASSIFICATION	0.001138441295452946	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9997880001085669	WITHOUT_CLASSIFICATION	2.1199989143295926E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9485221375527554	WITHOUT_CLASSIFICATION	0.05147786244724457	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999989299139569	WITHOUT_CLASSIFICATION	1.0700860430889395E-6	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9979509665468274	WITHOUT_CLASSIFICATION	0.0020490334531727493	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999784379043403	WITHOUT_CLASSIFICATION	2.1562095659711416E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9998507619690735	WITHOUT_CLASSIFICATION	1.4923803092642526E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9999633387718184	WITHOUT_CLASSIFICATION	3.66612281815957E-5	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999029197180725	WITHOUT_CLASSIFICATION	9.708028192738134E-5	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999990031679	WITHOUT_CLASSIFICATION	9.968320820803786E-10	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.6856690701199701	WITHOUT_CLASSIFICATION	0.3143309298800298	DESIGN
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9870926016661377	WITHOUT_CLASSIFICATION	0.01290739833386243	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.996506218273098	WITHOUT_CLASSIFICATION	0.0034937817269019003	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999935963255917	WITHOUT_CLASSIFICATION	6.403674408271308E-6	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9998586105063078	WITHOUT_CLASSIFICATION	1.4138949369229187E-4	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998396256546056	WITHOUT_CLASSIFICATION	1.6037434539447002E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999384541149019	WITHOUT_CLASSIFICATION	6.15458850981869E-5	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999765188332259	WITHOUT_CLASSIFICATION	2.3481166774175986E-5	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999963363744664	WITHOUT_CLASSIFICATION	3.6636255337365046E-6	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9999947116744499	WITHOUT_CLASSIFICATION	5.28832555014303E-6	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999990978117	WITHOUT_CLASSIFICATION	9.021883529412569E-10	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9999245240301138	WITHOUT_CLASSIFICATION	7.547596988625068E-5	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999837503106	WITHOUT_CLASSIFICATION	1.624968940857049E-8	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999999631198549	WITHOUT_CLASSIFICATION	3.68801451039422E-7	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9998684603007397	WITHOUT_CLASSIFICATION	1.3153969926029083E-4	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999962162658053	WITHOUT_CLASSIFICATION	3.7837341946544444E-6	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999999973048307	WITHOUT_CLASSIFICATION	2.695169362081752E-9	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9967383379842198	WITHOUT_CLASSIFICATION	0.003261662015780121	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9668340376818184	WITHOUT_CLASSIFICATION	0.03316596231818163	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9998392474199257	WITHOUT_CLASSIFICATION	1.607525800743272E-4	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999950676681	WITHOUT_CLASSIFICATION	4.932331837915781E-9	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9999999779221569	WITHOUT_CLASSIFICATION	2.2077843156261906E-8	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999994283799531	WITHOUT_CLASSIFICATION	5.716200467170916E-7	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9496903438766158	WITHOUT_CLASSIFICATION	0.050309656123384144	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.8794081396271991	WITHOUT_CLASSIFICATION	0.12059186037280083	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999999869155012	WITHOUT_CLASSIFICATION	1.3084498795114138E-7	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9995957695174427	WITHOUT_CLASSIFICATION	4.042304825573051E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999999043661518	WITHOUT_CLASSIFICATION	9.563384825612875E-8	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999743115596	WITHOUT_CLASSIFICATION	2.5688440338465405E-8	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.999999691940153	WITHOUT_CLASSIFICATION	3.0805984703462337E-7	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.999992398656516	WITHOUT_CLASSIFICATION	7.601343483998953E-6	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999999724751011	WITHOUT_CLASSIFICATION	2.7524898891695248E-8	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999998201335955	WITHOUT_CLASSIFICATION	1.7986640460463516E-7	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9993509642209764	WITHOUT_CLASSIFICATION	6.490357790237364E-4	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999837654716143	WITHOUT_CLASSIFICATION	1.623452838573238E-5	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999998716656678	WITHOUT_CLASSIFICATION	1.2833433208180425E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971757283527	WITHOUT_CLASSIFICATION	2.824271647316221E-6	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999997678105584	WITHOUT_CLASSIFICATION	2.3218944151225233E-7	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999992406637426	WITHOUT_CLASSIFICATION	7.593362573647741E-7	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9999817264026364	WITHOUT_CLASSIFICATION	1.827359736363581E-5	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999943520274118	WITHOUT_CLASSIFICATION	5.647972588182978E-6	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971757283527	WITHOUT_CLASSIFICATION	2.824271647316221E-6	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999995061630637	WITHOUT_CLASSIFICATION	4.938369362914959E-7	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9999991474412075	WITHOUT_CLASSIFICATION	8.525587924613015E-7	DESIGN
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999077306811622	WITHOUT_CLASSIFICATION	9.226931883771869E-5	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999998686960155	WITHOUT_CLASSIFICATION	1.3130398447412398E-7	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999921376826817	WITHOUT_CLASSIFICATION	7.862317318301613E-6	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9936860972071758	WITHOUT_CLASSIFICATION	0.0063139027928242105	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999647290420461	WITHOUT_CLASSIFICATION	3.527095795387863E-5	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9766028740310252	DESIGN	0.023397125968974784	WITHOUT_CLASSIFICATION
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999645207948389	WITHOUT_CLASSIFICATION	3.5479205161037746E-5	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9989804782915499	WITHOUT_CLASSIFICATION	0.0010195217084501373	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9999174381101913	WITHOUT_CLASSIFICATION	8.256188980862469E-5	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9694664560801378	WITHOUT_CLASSIFICATION	0.03053354391986223	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.999558612332828	WITHOUT_CLASSIFICATION	4.413876671719834E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999132483690092	WITHOUT_CLASSIFICATION	8.675163099075812E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999984535169709	WITHOUT_CLASSIFICATION	1.5464830290729684E-6	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9999431584122875	WITHOUT_CLASSIFICATION	5.684158771249595E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999963633047161	WITHOUT_CLASSIFICATION	3.636695283904496E-6	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999961177344	WITHOUT_CLASSIFICATION	3.882265600000185E-6	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999948406761706	WITHOUT_CLASSIFICATION	5.1593238293141194E-6	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9999256900828227	WITHOUT_CLASSIFICATION	7.430991717733045E-5	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9881488560931275	WITHOUT_CLASSIFICATION	0.011851143906872358	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9999783468449577	WITHOUT_CLASSIFICATION	2.1653155042310642E-5	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999628311279	WITHOUT_CLASSIFICATION	3.716887208664249E-8	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9999994647403302	WITHOUT_CLASSIFICATION	5.352596699148963E-7	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.999995272572364	WITHOUT_CLASSIFICATION	4.727427636028428E-6	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999999995855501	WITHOUT_CLASSIFICATION	4.144498898250184E-10	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999733786066	WITHOUT_CLASSIFICATION	2.6621393455181947E-8	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997309537629246	WITHOUT_CLASSIFICATION	2.6904623707532844E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999928212638094	WITHOUT_CLASSIFICATION	7.178736190647065E-6	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.8525013207838873	WITHOUT_CLASSIFICATION	0.14749867921611268	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9009149692549278	WITHOUT_CLASSIFICATION	0.09908503074507222	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9999930855206489	WITHOUT_CLASSIFICATION	6.914479351075178E-6	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.8031294884147168	WITHOUT_CLASSIFICATION	0.19687051158528335	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9921915306054295	WITHOUT_CLASSIFICATION	0.007808469394570551	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9999831834101242	WITHOUT_CLASSIFICATION	1.6816589875813322E-5	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999999998813852	WITHOUT_CLASSIFICATION	1.1861473581084991E-10	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999997107738539	WITHOUT_CLASSIFICATION	2.8922614605404774E-7	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9999958819679512	WITHOUT_CLASSIFICATION	4.118032048817873E-6	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9934651066663686	WITHOUT_CLASSIFICATION	0.006534893333631475	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999896429773423	WITHOUT_CLASSIFICATION	1.0357022657767653E-5	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999990292316	WITHOUT_CLASSIFICATION	9.707683799189638E-10	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995357609868	WITHOUT_CLASSIFICATION	4.6423901324583305E-7	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999995357609868	WITHOUT_CLASSIFICATION	4.6423901324583305E-7	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9999977835966213	WITHOUT_CLASSIFICATION	2.2164033786261664E-6	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999982224791599	WITHOUT_CLASSIFICATION	1.7775208401150278E-6	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999998285759404	WITHOUT_CLASSIFICATION	1.7142405964671208E-7	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.7407720904866322	WITHOUT_CLASSIFICATION	0.2592279095133678	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999936066038573	WITHOUT_CLASSIFICATION	6.39339614263376E-6	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9999936066038573	WITHOUT_CLASSIFICATION	6.39339614263376E-6	DESIGN
}	WITHOUT_CLASSIFICATION	0.9998941915173806	WITHOUT_CLASSIFICATION	1.0580848261933398E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999695041072159	WITHOUT_CLASSIFICATION	3.0495892784147248E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999999891552892	WITHOUT_CLASSIFICATION	1.0844710783727583E-8	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9999996614685289	WITHOUT_CLASSIFICATION	3.385314710927538E-7	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9999980237638778	WITHOUT_CLASSIFICATION	1.9762361221609394E-6	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999996212563633	WITHOUT_CLASSIFICATION	3.7874363669539507E-7	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999935822946452	WITHOUT_CLASSIFICATION	6.4177053548581224E-6	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999951968143086	WITHOUT_CLASSIFICATION	4.803185691449793E-6	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9999940553511885	WITHOUT_CLASSIFICATION	5.944648811637009E-6	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999990361729085	WITHOUT_CLASSIFICATION	9.638270914008657E-7	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9677798707489513	WITHOUT_CLASSIFICATION	0.03222012925104872	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993578349512	WITHOUT_CLASSIFICATION	6.421650487853479E-7	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999993578349512	WITHOUT_CLASSIFICATION	6.421650487853479E-7	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9999997568932432	WITHOUT_CLASSIFICATION	2.4310675676414733E-7	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999250899480038	WITHOUT_CLASSIFICATION	7.49100519961994E-5	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9999658739771858	WITHOUT_CLASSIFICATION	3.412602281410433E-5	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9992708101805314	WITHOUT_CLASSIFICATION	7.291898194686019E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9161502755995128	WITHOUT_CLASSIFICATION	0.08384972440048728	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996330571352993	WITHOUT_CLASSIFICATION	3.6694286470076546E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998630507334828	WITHOUT_CLASSIFICATION	1.3694926651711562E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999981118551148	WITHOUT_CLASSIFICATION	1.8881448852554372E-6	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998005899129774	WITHOUT_CLASSIFICATION	1.9941008702268947E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9674003053070974	WITHOUT_CLASSIFICATION	0.03259969469290268	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.7787805317366625	DESIGN	0.22121946826333747	WITHOUT_CLASSIFICATION
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9989804782915499	WITHOUT_CLASSIFICATION	0.0010195217084501373	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.9989572414171936	DESIGN	0.0010427585828064194	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9998689647618837	WITHOUT_CLASSIFICATION	1.3103523811629816E-4	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999991003864682	WITHOUT_CLASSIFICATION	8.996135316892839E-7	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.999997418427819	WITHOUT_CLASSIFICATION	2.581572181033957E-6	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999999975568833	WITHOUT_CLASSIFICATION	2.4431168174212665E-9	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999883295615961	WITHOUT_CLASSIFICATION	1.1670438403789366E-5	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9937400670512591	WITHOUT_CLASSIFICATION	0.006259932948740921	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9997504365138573	WITHOUT_CLASSIFICATION	2.495634861426136E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.999999921962345	WITHOUT_CLASSIFICATION	7.803765504951215E-8	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9973557968462881	WITHOUT_CLASSIFICATION	0.002644203153711928	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9973557968462881	WITHOUT_CLASSIFICATION	0.002644203153711928	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999996599925225	WITHOUT_CLASSIFICATION	3.400074774834758E-7	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999998859815536	WITHOUT_CLASSIFICATION	1.1401844647457878E-7	DESIGN
package	WITHOUT_CLASSIFICATION	0.9993108768650582	WITHOUT_CLASSIFICATION	6.891231349418021E-4	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.999996502870967	WITHOUT_CLASSIFICATION	3.4971290329454148E-6	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9999991561394429	WITHOUT_CLASSIFICATION	8.43860557090648E-7	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999994697298	WITHOUT_CLASSIFICATION	5.302701999846879E-7	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.999995209857897	WITHOUT_CLASSIFICATION	4.790142102930553E-6	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9998717263378277	WITHOUT_CLASSIFICATION	1.2827366217227633E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9920114367153355	WITHOUT_CLASSIFICATION	0.007988563284664562	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.999954797862196	WITHOUT_CLASSIFICATION	4.520213780395928E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9927894380984988	WITHOUT_CLASSIFICATION	0.007210561901501099	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9998853780328398	DESIGN	1.1462196716005978E-4	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9565575820139312	DESIGN	0.04344241798606874	WITHOUT_CLASSIFICATION
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999996007456	WITHOUT_CLASSIFICATION	3.9925452505395186E-10	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8504214069393466	DESIGN	0.1495785930606533	WITHOUT_CLASSIFICATION
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9998994118706368	WITHOUT_CLASSIFICATION	1.0058812936318066E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.5011570770883629	DESIGN	0.49884292291163723	WITHOUT_CLASSIFICATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9999977491035993	WITHOUT_CLASSIFICATION	2.250896400753491E-6	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999321335004422	WITHOUT_CLASSIFICATION	6.78664995578926E-5	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9976193966732562	WITHOUT_CLASSIFICATION	0.0023806033267437902	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999997196382621	WITHOUT_CLASSIFICATION	2.8036173790054897E-7	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999937380285068	WITHOUT_CLASSIFICATION	6.261971493290224E-6	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.7845669372333993	WITHOUT_CLASSIFICATION	0.21543306276660068	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.999999990670413	WITHOUT_CLASSIFICATION	9.329586983685703E-9	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982207095129	WITHOUT_CLASSIFICATION	1.7792904870598054E-6	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999982207095129	WITHOUT_CLASSIFICATION	1.7792904870598054E-6	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998329247188125	WITHOUT_CLASSIFICATION	1.6707528118761408E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9973458689889251	WITHOUT_CLASSIFICATION	0.0026541310110748924	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999923150259038	WITHOUT_CLASSIFICATION	7.68497409617364E-6	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9337276483851005	WITHOUT_CLASSIFICATION	0.06627235161489951	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9999447837634241	WITHOUT_CLASSIFICATION	5.521623657593109E-5	DESIGN
todo : what else to do here?	DESIGN	0.9842578290091146	WITHOUT_CLASSIFICATION	0.01574217099088535	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.937419475143687	WITHOUT_CLASSIFICATION	0.06258052485631307	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.5910149742286452	DESIGN	0.40898502577135476	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9707066287940289	DESIGN	0.02929337120597105	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9707066287940289	DESIGN	0.02929337120597105	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9981788314517758	WITHOUT_CLASSIFICATION	0.0018211685482242594	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.999990740513131	WITHOUT_CLASSIFICATION	9.259486868988512E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.5763833538119891	DESIGN	0.42361664618801087	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9978554531343333	DESIGN	0.0021445468656666796	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9978554531343333	DESIGN	0.0021445468656666796	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999964205449	DESIGN	3.5794549332152046E-9	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999964205449	DESIGN	3.5794549332152046E-9	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.6385619545265703	WITHOUT_CLASSIFICATION	0.36143804547342984	DESIGN
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9615088480759336	DESIGN	0.03849115192406625	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9615088480759336	DESIGN	0.03849115192406625	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999980982057756	DESIGN	1.901794224490041E-6	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.999990740513131	WITHOUT_CLASSIFICATION	9.259486868988512E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.5763833538119891	DESIGN	0.42361664618801087	WITHOUT_CLASSIFICATION
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9998268273986455	WITHOUT_CLASSIFICATION	1.7317260135443467E-4	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9999427485207202	WITHOUT_CLASSIFICATION	5.725147927978465E-5	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.8625540992608477	DESIGN	0.13744590073915233	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.8753930834239346	DESIGN	0.12460691657606535	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.991139376567043	WITHOUT_CLASSIFICATION	0.00886062343295705	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9992772700891679	WITHOUT_CLASSIFICATION	7.227299108321998E-4	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.9350996422911304	DESIGN	0.06490035770886951	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9842578290091146	WITHOUT_CLASSIFICATION	0.01574217099088535	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9505283506512088	WITHOUT_CLASSIFICATION	0.04947164934879117	DESIGN
todo : what else to do here?	DESIGN	0.9842578290091146	WITHOUT_CLASSIFICATION	0.01574217099088535	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9142430229336678	WITHOUT_CLASSIFICATION	0.08575697706633226	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.8834238735767856	WITHOUT_CLASSIFICATION	0.11657612642321434	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.999992300060771	DESIGN	7.699939228953226E-6	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.937419475143687	WITHOUT_CLASSIFICATION	0.06258052485631307	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9931467349537169	DESIGN	0.006853265046283152	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9998402278220435	WITHOUT_CLASSIFICATION	1.5977217795647876E-4	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.6447918498837643	WITHOUT_CLASSIFICATION	0.35520815011623574	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.9228340787786147	DESIGN	0.0771659212213854	WITHOUT_CLASSIFICATION
todo : what is the implication of this?	DESIGN	0.9765091367536628	WITHOUT_CLASSIFICATION	0.023490863246337132	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9993928995286917	WITHOUT_CLASSIFICATION	6.071004713082775E-4	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.999999790959737	DESIGN	2.0904026308129613E-7	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9998551098728363	DESIGN	1.4489012716370576E-4	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9953459427515484	WITHOUT_CLASSIFICATION	0.004654057248451496	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.8863604512483919	WITHOUT_CLASSIFICATION	0.11363954875160805	DESIGN
todo : again, how should this work for non-pojo entities?	DESIGN	0.8954467981843179	DESIGN	0.10455320181568196	WITHOUT_CLASSIFICATION
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9676358147443201	DESIGN	0.032364185255679925	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9991950048368601	DESIGN	8.049951631398222E-4	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9999987911487882	DESIGN	1.208851211734582E-6	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9951880848339328	DESIGN	0.004811915166067198	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999998000838545	DESIGN	1.9991614545881353E-7	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.6961015315071587	WITHOUT_CLASSIFICATION	0.30389846849284136	DESIGN
FIXME: get the PersistentClass	DESIGN	0.6961015315071587	WITHOUT_CLASSIFICATION	0.30389846849284136	DESIGN
Icky workaround for MySQL bug:	DESIGN	0.9984453440294024	DESIGN	0.001554655970597577	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9846231422145516	WITHOUT_CLASSIFICATION	0.015376857785448436	DESIGN
TODO possibly relax that	DESIGN	0.7052093211542244	WITHOUT_CLASSIFICATION	0.29479067884577553	DESIGN
TODO possibly relax that	DESIGN	0.7052093211542244	WITHOUT_CLASSIFICATION	0.29479067884577553	DESIGN
TODO possibly relax that	DESIGN	0.7052093211542244	WITHOUT_CLASSIFICATION	0.29479067884577553	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9951880848339328	DESIGN	0.004811915166067198	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.999168170222556	WITHOUT_CLASSIFICATION	8.318297774439743E-4	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9821458144868348	WITHOUT_CLASSIFICATION	0.01785418551316523	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9951693041696735	WITHOUT_CLASSIFICATION	0.004830695830326551	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9999844865032179	WITHOUT_CLASSIFICATION	1.5513496782073562E-5	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.5749581614298805	WITHOUT_CLASSIFICATION	0.42504183857011946	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.889476298326625	WITHOUT_CLASSIFICATION	0.11052370167337497	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9707066287940289	DESIGN	0.02929337120597105	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9707066287940289	DESIGN	0.02929337120597105	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9550261870955828	WITHOUT_CLASSIFICATION	0.044973812904417106	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.9707066287940289	DESIGN	0.02929337120597105	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999997123433698	DESIGN	2.8765663009722956E-7	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9972123057561828	WITHOUT_CLASSIFICATION	0.0027876942438173438	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.77159511376364	DESIGN	0.2284048862363601	WITHOUT_CLASSIFICATION
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9999449193741927	WITHOUT_CLASSIFICATION	5.508062580731096E-5	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9984445103345078	WITHOUT_CLASSIFICATION	0.0015554896654922932	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9994086358483184	WITHOUT_CLASSIFICATION	5.913641516816792E-4	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9929658644566933	WITHOUT_CLASSIFICATION	0.007034135543306658	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9999970042728302	WITHOUT_CLASSIFICATION	2.995727169810361E-6	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9995913508749101	WITHOUT_CLASSIFICATION	4.086491250898301E-4	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9992738626395193	WITHOUT_CLASSIFICATION	7.26137360480679E-4	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9986754458802127	WITHOUT_CLASSIFICATION	0.0013245541197873189	DESIGN
Does this dialect support check constraints?	DESIGN	0.999829583254228	WITHOUT_CLASSIFICATION	1.7041674577211843E-4	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.999477460594296	WITHOUT_CLASSIFICATION	5.225394057039845E-4	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9978651484862279	WITHOUT_CLASSIFICATION	0.002134851513772121	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9992461538588217	WITHOUT_CLASSIFICATION	7.538461411784161E-4	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9774321641085442	DESIGN	0.022567835891455786	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9996381168730667	WITHOUT_CLASSIFICATION	3.6188312693320024E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6279191747833622	WITHOUT_CLASSIFICATION	0.37208082521663777	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9028410546990987	DESIGN	0.09715894530090131	WITHOUT_CLASSIFICATION
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9984041906978341	DESIGN	0.0015958093021658751	WITHOUT_CLASSIFICATION
TODO: should orphans really be deleted during lock???	DESIGN	0.9944195116533707	DESIGN	0.005580488346629162	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9462303816662128	WITHOUT_CLASSIFICATION	0.0537696183337873	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9826369711102143	WITHOUT_CLASSIFICATION	0.017363028889785755	DESIGN
I suppose?	DESIGN	0.9918354992302006	WITHOUT_CLASSIFICATION	0.008164500769799387	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.9998975076326347	DESIGN	1.0249236736523573E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.8270857106894324	WITHOUT_CLASSIFICATION	0.17291428931056763	DESIGN
TODO:refactor + make this method private	DESIGN	0.8605556164056098	DESIGN	0.13944438359439015	WITHOUT_CLASSIFICATION
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9971925322361433	WITHOUT_CLASSIFICATION	0.002807467763856611	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9999733545057248	DESIGN	2.664549427521368E-5	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.944351541516913	DESIGN	0.05564845848308702	WITHOUT_CLASSIFICATION
todo : potentially look at optimizing these two arrays	DESIGN	0.980274225279094	WITHOUT_CLASSIFICATION	0.019725774720906017	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9960800591381747	DESIGN	0.0039199408618252165	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9960800591381747	DESIGN	0.0039199408618252165	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9887743913917452	DESIGN	0.011225608608254849	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.6506922113590738	DESIGN	0.34930778864092615	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.6506922113590738	DESIGN	0.34930778864092615	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9903130800277228	DESIGN	0.009686919972277143	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.8961856112150359	WITHOUT_CLASSIFICATION	0.10381438878496409	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.9912722417515372	DESIGN	0.008727758248462945	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9620801606399881	DESIGN	0.03791983936001188	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9995224832372032	WITHOUT_CLASSIFICATION	4.7751676279681116E-4	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9866835254965525	DESIGN	0.013316474503447575	WITHOUT_CLASSIFICATION
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.5993772489919101	DESIGN	0.4006227510080898	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9918573342980999	DESIGN	0.008142665701900136	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.9991016850677582	DESIGN	8.983149322417795E-4	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9969069472196314	DESIGN	0.0030930527803685838	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.6244458721070968	WITHOUT_CLASSIFICATION	0.3755541278929034	DESIGN
TODO: suck into event class	DESIGN	0.9998547124548512	DESIGN	1.452875451487169E-4	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.8563964951664627	WITHOUT_CLASSIFICATION	0.14360350483353737	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999869342370072	DESIGN	1.306576299274154E-5	WITHOUT_CLASSIFICATION
TODO: would it be better to do a refresh from db?	DESIGN	0.9996126404889044	DESIGN	3.873595110955371E-4	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.8001051947873836	DESIGN	0.1998948052126165	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9997399602609494	WITHOUT_CLASSIFICATION	2.600397390506073E-4	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.8286045112264953	DESIGN	0.17139548877350477	WITHOUT_CLASSIFICATION
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9999801197619235	DESIGN	1.988023807660332E-5	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9368829794805145	WITHOUT_CLASSIFICATION	0.06311702051948558	DESIGN
TODO: is this 100% correct?	DESIGN	0.9950109998570328	DESIGN	0.004989000142967239	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.7286781203862547	WITHOUT_CLASSIFICATION	0.27132187961374526	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.99926902690494	DESIGN	7.309730950600009E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9998977339004308	DESIGN	1.0226609956917878E-4	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9999991653663809	DESIGN	8.346336189699881E-7	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9442665317060691	DESIGN	0.05573346829393091	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.899790829525151	DESIGN	0.100209170474849	WITHOUT_CLASSIFICATION
TODO: merge into one method!	DESIGN	0.935386855982717	DESIGN	0.06461314401728302	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9993872917383605	DESIGN	6.127082616393839E-4	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.99998276656772	DESIGN	1.7233432279986772E-5	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9999480638167082	DESIGN	5.193618329180885E-5	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9886673679474626	WITHOUT_CLASSIFICATION	0.011332632052537346	DESIGN
TODO : better way?!?	DESIGN	0.9999954552092464	DESIGN	4.5447907536272905E-6	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9999990138365792	WITHOUT_CLASSIFICATION	9.861634208845972E-7	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9977041728403307	DESIGN	0.002295827159669203	WITHOUT_CLASSIFICATION
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999998999103529	DESIGN	1.0008964715808439E-7	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999999983028414	DESIGN	1.6971586167054834E-9	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.9977887107091691	DESIGN	0.0022112892908308333	WITHOUT_CLASSIFICATION
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9999979026236271	DESIGN	2.0973763729364753E-6	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.9997562206094147	WITHOUT_CLASSIFICATION	2.437793905853661E-4	DESIGN
yuck!	DESIGN	0.9550261870955828	WITHOUT_CLASSIFICATION	0.044973812904417106	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9907280310584663	WITHOUT_CLASSIFICATION	0.009271968941533686	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.9977714370954729	DESIGN	0.0022285629045271454	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9992673272514384	WITHOUT_CLASSIFICATION	7.326727485616921E-4	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999996359226887	DESIGN	3.640773112808119E-7	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9999588837552488	DESIGN	4.111624475127498E-5	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9994029527034635	DESIGN	5.970472965364465E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.9707066287940289	DESIGN	0.02929337120597105	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9550261870955828	WITHOUT_CLASSIFICATION	0.044973812904417106	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9687113210596408	WITHOUT_CLASSIFICATION	0.03128867894035917	DESIGN
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9995168586815618	DESIGN	4.831413184382053E-4	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9783771403140104	WITHOUT_CLASSIFICATION	0.021622859685989648	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.7220826203937744	DESIGN	0.2779173796062257	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9999777815504237	DESIGN	2.221844957627039E-5	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8375733290292197	DESIGN	0.16242667097078034	WITHOUT_CLASSIFICATION
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999963342722187	DESIGN	3.6657277814233583E-6	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9955632942678712	DESIGN	0.004436705732128878	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999300625428558	DESIGN	6.993745714421859E-5	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.9910291187977012	DESIGN	0.00897088120229882	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9999875192561948	WITHOUT_CLASSIFICATION	1.248074380530056E-5	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.9178488376076579	DESIGN	0.08215116239234212	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.999963097612407	DESIGN	3.690238759306945E-5	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.950570622363296	WITHOUT_CLASSIFICATION	0.049429377636704026	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9789707315419285	WITHOUT_CLASSIFICATION	0.021029268458071473	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.9997738350328952	DESIGN	2.261649671047853E-4	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.99942397878298	WITHOUT_CLASSIFICATION	5.760212170200063E-4	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9999297821389342	DESIGN	7.021786106573482E-5	WITHOUT_CLASSIFICATION
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999922980556809	DESIGN	7.701944319200011E-6	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9999999844108243	DESIGN	1.5589175711368373E-8	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5863758287683236	DESIGN	0.41362417123167644	WITHOUT_CLASSIFICATION
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9860242737032198	DESIGN	0.013975726296780323	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.8769297539201665	DESIGN	0.12307024607983356	WITHOUT_CLASSIFICATION
TODO: what type?	DESIGN	0.9328536884602806	DESIGN	0.0671463115397194	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9934112088540504	WITHOUT_CLASSIFICATION	0.006588791145949572	DESIGN
short-circuit for performance...	DESIGN	0.992536730126292	WITHOUT_CLASSIFICATION	0.00746326987370803	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9961819932207581	WITHOUT_CLASSIFICATION	0.0038180067792418517	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.993763527744619	DESIGN	0.006236472255381063	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.5830802965750103	DESIGN	0.4169197034249899	WITHOUT_CLASSIFICATION
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999999999999595	DESIGN	4.047380553026679E-14	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9994769410168787	DESIGN	5.230589831213594E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.999403747781515	DESIGN	5.962522184849986E-4	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9997976599450132	DESIGN	2.023400549867153E-4	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9202006305709578	DESIGN	0.0797993694290422	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9982976264584997	DESIGN	0.0017023735415003566	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9856376105841969	WITHOUT_CLASSIFICATION	0.014362389415803135	DESIGN
use of trim() here is ugly?	DESIGN	0.9990886208160632	WITHOUT_CLASSIFICATION	9.113791839367957E-4	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9974231271290976	DESIGN	0.002576872870902365	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.9830188463465717	WITHOUT_CLASSIFICATION	0.016981153653428303	DESIGN
TODO: inefficient	DESIGN	0.869292134673055	DESIGN	0.13070786532694492	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.8888646644856777	WITHOUT_CLASSIFICATION	0.11113533551432242	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999992376522665	DESIGN	7.623477335648186E-7	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9999999372573553	DESIGN	6.27426447471666E-8	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9999967094059518	DESIGN	3.2905940482016827E-6	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.9999071311575142	DESIGN	9.286884248586488E-5	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9989944508801533	WITHOUT_CLASSIFICATION	0.0010055491198467145	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9998614263090813	DESIGN	1.385736909186191E-4	WITHOUT_CLASSIFICATION
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.999707557268377	DESIGN	2.9244273162294795E-4	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.8438761826764752	DESIGN	0.1561238173235247	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9994559195013145	DESIGN	5.440804986855117E-4	WITHOUT_CLASSIFICATION
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999999917962	DESIGN	8.203817607464243E-12	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.6719027709032774	DESIGN	0.32809722909672256	WITHOUT_CLASSIFICATION
TODO should we just collect these like with the collections above?	DESIGN	0.9999780486096185	DESIGN	2.1951390381571128E-5	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9829157008680363	DESIGN	0.01708429913196371	WITHOUT_CLASSIFICATION
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9719751723725054	WITHOUT_CLASSIFICATION	0.028024827627494555	DESIGN
create an index on the key columns??	DESIGN	0.9999948003599795	WITHOUT_CLASSIFICATION	5.199640020577214E-6	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.974948011875305	DESIGN	0.025051988124694925	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999948003599795	WITHOUT_CLASSIFICATION	5.199640020577214E-6	DESIGN
TODO: improve this hack!	DESIGN	0.9999984709596448	DESIGN	1.5290403552676898E-6	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9999889249609457	WITHOUT_CLASSIFICATION	1.1075039054311874E-5	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9914215190197883	DESIGN	0.008578480980211826	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9997667206133423	WITHOUT_CLASSIFICATION	2.3327938665765313E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9441593828309474	WITHOUT_CLASSIFICATION	0.05584061716905269	DESIGN
create an index on the key columns??	DESIGN	0.9999948003599795	WITHOUT_CLASSIFICATION	5.199640020577214E-6	DESIGN
todo : remove	DESIGN	0.9857379413919408	WITHOUT_CLASSIFICATION	0.014262058608059234	DESIGN
todo : remove	DESIGN	0.9857379413919408	WITHOUT_CLASSIFICATION	0.014262058608059234	DESIGN
todo : remove	DESIGN	0.9857379413919408	WITHOUT_CLASSIFICATION	0.014262058608059234	DESIGN
todo : throw exception?	DESIGN	0.7845801219549121	WITHOUT_CLASSIFICATION	0.21541987804508794	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9738840006234395	DESIGN	0.02611599937656041	WITHOUT_CLASSIFICATION
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.99997370111066	DESIGN	2.62988893399567E-5	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9999667961806729	DESIGN	3.320381932718596E-5	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.5428718508830161	WITHOUT_CLASSIFICATION	0.4571281491169839	DESIGN
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999999966338093	DESIGN	3.3661906065724274E-9	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.9393920449006876	WITHOUT_CLASSIFICATION	0.06060795509931229	DESIGN
TODO: copy/paste from recreate()	DESIGN	0.8931382627488097	WITHOUT_CLASSIFICATION	0.1068617372511903	DESIGN
should this interface extend PropertyMapping?	DESIGN	0.9823025776599609	DESIGN	0.01769742234003905	WITHOUT_CLASSIFICATION
ie. the subquery! yuck!	DESIGN	0.9852661526543229	WITHOUT_CLASSIFICATION	0.01473384734567696	DESIGN
TODO: move to .sql package!!	DESIGN	0.99234432430506	DESIGN	0.007655675694939888	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9952389994821295	DESIGN	0.004761000517870515	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.99999395053138	DESIGN	6.04946862010097E-6	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.7439687681398983	DESIGN	0.2560312318601018	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.987873213469438	DESIGN	0.012126786530562003	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.9484637252930952	WITHOUT_CLASSIFICATION	0.05153627470690473	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.7542770882079708	DESIGN	0.2457229117920293	WITHOUT_CLASSIFICATION
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9819105454366372	DESIGN	0.018089454563362778	WITHOUT_CLASSIFICATION
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9998698865447692	DESIGN	1.3011345523076363E-4	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.9834827868771866	DESIGN	0.016517213122813377	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9999567416035307	DESIGN	4.3258396469232646E-5	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9576364664478785	WITHOUT_CLASSIFICATION	0.04236353355212163	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9998507902024312	DESIGN	1.492097975688243E-4	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9922785911591444	WITHOUT_CLASSIFICATION	0.007721408840855518	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.9884716894693	DESIGN	0.011528310530699888	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9885507060627825	DESIGN	0.011449293937217449	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9960055030664875	DESIGN	0.003994496933512484	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9995547898493995	DESIGN	4.45210150600541E-4	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999998764499438	DESIGN	1.2355005624119145E-7	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9271168695613993	WITHOUT_CLASSIFICATION	0.07288313043860081	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.999567636899768	WITHOUT_CLASSIFICATION	4.323631002319751E-4	DESIGN
is this ok?	DESIGN	0.9966466869573583	WITHOUT_CLASSIFICATION	0.003353313042641808	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999998498327869	DESIGN	1.501672130681172E-7	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9974101779886835	DESIGN	0.00258982201131653	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.880979412648992	WITHOUT_CLASSIFICATION	0.11902058735100789	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999794030241603	DESIGN	2.059697583969713E-5	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.5851083248966871	DESIGN	0.414891675103313	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9921214732998593	DESIGN	0.007878526700140706	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999963732639158	DESIGN	3.626736084281409E-6	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9996048640125865	DESIGN	3.9513598741348834E-4	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9887923998672578	WITHOUT_CLASSIFICATION	0.011207600132742298	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9996155758724066	DESIGN	3.8442412759344386E-4	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9999352286913671	DESIGN	6.477130863292578E-5	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.7578619454654847	WITHOUT_CLASSIFICATION	0.2421380545345153	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.9847530038467778	DESIGN	0.015246996153222182	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6598612885042331	DESIGN	0.34013871149576697	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9989033550575448	DESIGN	0.0010966449424552505	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9884564961572714	DESIGN	0.011543503842728602	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.990638322816142	DESIGN	0.009361677183858002	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9999871326080403	DESIGN	1.286739195960141E-5	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9171051706894529	WITHOUT_CLASSIFICATION	0.08289482931054719	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9995561744009541	DESIGN	4.438255990458171E-4	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.8195647876050624	DESIGN	0.18043521239493762	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9949620865988893	DESIGN	0.005037913401110702	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999915589	DESIGN	8.441123964344688E-12	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999923358445532	DESIGN	7.664155446864451E-6	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9985668710557134	WITHOUT_CLASSIFICATION	0.0014331289442866407	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.999999960843401	DESIGN	3.915659897045486E-8	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9655248564979078	DESIGN	0.03447514350209235	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.999919974708024	DESIGN	8.002529197595252E-5	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9996371297370937	WITHOUT_CLASSIFICATION	3.6287026290628794E-4	DESIGN
short cut check...	DESIGN	0.9988135024409608	WITHOUT_CLASSIFICATION	0.0011864975590393035	DESIGN
todo : move to StringHelper?	DESIGN	0.9291136728104473	WITHOUT_CLASSIFICATION	0.07088632718955266	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.997458960329794	DESIGN	0.0025410396702060536	WITHOUT_CLASSIFICATION
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9995803459344075	DESIGN	4.1965406559255883E-4	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999999823407842	DESIGN	1.7659215810280914E-8	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.6328168181939616	DESIGN	0.36718318180603826	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9263752791760711	DESIGN	0.0736247208239288	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.6732398410529432	DESIGN	0.32676015894705673	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.9106324076890914	WITHOUT_CLASSIFICATION	0.08936759231090864	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999997110055439	DESIGN	2.889944561565137E-7	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9642055956201623	WITHOUT_CLASSIFICATION	0.03579440437983759	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.9999486934116767	DESIGN	5.130658832324087E-5	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.998442963859381	WITHOUT_CLASSIFICATION	0.0015570361406189834	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9995577268373113	DESIGN	4.422731626887258E-4	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9999936183059351	DESIGN	6.381694064885324E-6	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9950391070191125	WITHOUT_CLASSIFICATION	0.004960892980887509	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999998862745978	DESIGN	1.1372540218538303E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.999999745388292	DESIGN	2.5461170796399414E-7	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.776922673851462	WITHOUT_CLASSIFICATION	0.2230773261485381	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.554621991974139	WITHOUT_CLASSIFICATION	0.4453780080258611	DESIGN
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.5204072123482749	DESIGN	0.47959278765172525	WITHOUT_CLASSIFICATION
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9993811682560638	DESIGN	6.188317439360566E-4	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999679164528799	DESIGN	3.2083547120182524E-5	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9999879907012578	DESIGN	1.2009298742214685E-5	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9857379413919408	WITHOUT_CLASSIFICATION	0.014262058608059234	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9634744018607403	DESIGN	0.03652559813925976	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9999999846397215	DESIGN	1.5360278462546672E-8	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999893981222318	DESIGN	1.0601877768281814E-5	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9977309078823662	WITHOUT_CLASSIFICATION	0.0022690921176338826	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9999743377550406	DESIGN	2.566224495940615E-5	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.7360069586899882	WITHOUT_CLASSIFICATION	0.2639930413100117	DESIGN
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.7770357580834223	DESIGN	0.22296424191657768	WITHOUT_CLASSIFICATION
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9999345902690494	DESIGN	6.540973095055766E-5	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.999685000718648	DESIGN	3.1499928135197237E-4	WITHOUT_CLASSIFICATION
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.922013959261453	WITHOUT_CLASSIFICATION	0.077986040738547	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9999950600702658	DESIGN	4.939929734197072E-6	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.7204180037949915	DESIGN	0.2795819962050084	WITHOUT_CLASSIFICATION
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9990995137657932	DESIGN	9.004862342067381E-4	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999900203471825	WITHOUT_CLASSIFICATION	9.979652817498574E-6	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999967124393925	DESIGN	3.287560607488711E-6	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.760668865508307	WITHOUT_CLASSIFICATION	0.239331134491693	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9999821529305044	DESIGN	1.784706949563253E-5	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9954785289932686	WITHOUT_CLASSIFICATION	0.0045214710067314435	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.9978592938812605	DESIGN	0.0021407061187395634	WITHOUT_CLASSIFICATION
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.999733129236857	DESIGN	2.668707631430371E-4	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9984477634592778	DESIGN	0.0015522365407222543	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999999731928	DESIGN	2.680718747935824E-11	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999999978237	DESIGN	2.176211085376025E-12	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9969219838184141	DESIGN	0.003078016181585871	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999914065939	DESIGN	8.593406109723889E-9	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9992738712019938	DESIGN	7.261287980061108E-4	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999972674792593	WITHOUT_CLASSIFICATION	2.7325207407495292E-6	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999999907803571	WITHOUT_CLASSIFICATION	9.219642888320127E-9	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999986095153	DESIGN	1.3904847096765275E-9	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9970421633796295	DESIGN	0.0029578366203705663	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999998874537642	DESIGN	1.1254623568580241E-7	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.9999975797912977	DESIGN	2.4202087023187437E-6	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9999877844514584	DESIGN	1.2215548541512168E-5	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.8762664038603022	DESIGN	0.12373359613969794	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9960055030664875	DESIGN	0.003994496933512484	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9655865104238321	DESIGN	0.034413489576167876	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999666274048434	DESIGN	3.3372595156603117E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9271168695613993	WITHOUT_CLASSIFICATION	0.07288313043860081	DESIGN
TODO: make this a bit nicer	DESIGN	0.9974101779886835	DESIGN	0.00258982201131653	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9974738425669393	DESIGN	0.0025261574330607455	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9978554531343333	DESIGN	0.0021445468656666796	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9978554531343333	DESIGN	0.0021445468656666796	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9978554531343333	DESIGN	0.0021445468656666796	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999991691966242	DESIGN	8.30803375835301E-7	WITHOUT_CLASSIFICATION
