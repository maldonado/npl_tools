//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999996271008048	WITHOUT_CLASSIFICATION	3.7289919520651464E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987011796982	WITHOUT_CLASSIFICATION	1.2988203017934468E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987011796982	WITHOUT_CLASSIFICATION	1.2988203017934468E-5	DESIGN
/* | this | bean | args | raw bean | */	WITHOUT_CLASSIFICATION	0.9994987545207777	WITHOUT_CLASSIFICATION	5.012454792222421E-4	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999975327932064	WITHOUT_CLASSIFICATION	2.4672067936615927E-6	DESIGN
// astore 4 // store the raw bean	WITHOUT_CLASSIFICATION	0.9999933618029112	WITHOUT_CLASSIFICATION	6.63819708883496E-6	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996230584944	WITHOUT_CLASSIFICATION	3.769415055389443E-7	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996230584944	WITHOUT_CLASSIFICATION	3.769415055389443E-7	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995561314343	WITHOUT_CLASSIFICATION	4.4386856572339816E-7	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999885113535	WITHOUT_CLASSIFICATION	1.1488646506626681E-7	DESIGN
// putfield // new value of the field	WITHOUT_CLASSIFICATION	0.9999939334088911	WITHOUT_CLASSIFICATION	6.066591108963509E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999910065711857	WITHOUT_CLASSIFICATION	8.993428814383257E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999996054411699	WITHOUT_CLASSIFICATION	3.945588301040391E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999996054411699	WITHOUT_CLASSIFICATION	3.945588301040391E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999782855029492	WITHOUT_CLASSIFICATION	2.1714497050863555E-5	DESIGN
// just decrement the lock, don't recache // (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998178134250401	WITHOUT_CLASSIFICATION	1.8218657495996485E-4	DESIGN
// decode row selection...	WITHOUT_CLASSIFICATION	0.999347413945845	WITHOUT_CLASSIFICATION	6.525860541549705E-4	DESIGN
//disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9999931425940428	WITHOUT_CLASSIFICATION	6.857405957174361E-6	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999681324083	WITHOUT_CLASSIFICATION	3.186759167286427E-8	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999189787476974	WITHOUT_CLASSIFICATION	8.102125230262157E-5	DESIGN
// ROW ID	WITHOUT_CLASSIFICATION	0.99994454113091	WITHOUT_CLASSIFICATION	5.545886908989604E-5	DESIGN
// COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9999980383805646	WITHOUT_CLASSIFICATION	1.9616194355111766E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999837345102308	WITHOUT_CLASSIFICATION	1.6265489769207552E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8958741317335626	WITHOUT_CLASSIFICATION	0.10412586826643744	DESIGN
// DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9999059084733902	WITHOUT_CLASSIFICATION	9.409152660978931E-5	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999921467705988	WITHOUT_CLASSIFICATION	7.853229401181869E-6	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999960401688519	WITHOUT_CLASSIFICATION	3.959831148108598E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999915861347548	WITHOUT_CLASSIFICATION	8.413865245112053E-6	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999915861347548	WITHOUT_CLASSIFICATION	8.413865245112053E-6	DESIGN
// generated properties can *never* be insertable...	WITHOUT_CLASSIFICATION	0.9993426282393063	WITHOUT_CLASSIFICATION	6.573717606936501E-4	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999939920583086	WITHOUT_CLASSIFICATION	6.007941691295645E-6	DESIGN
//by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.999748953992428	WITHOUT_CLASSIFICATION	2.5104600757199077E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999631066981016	WITHOUT_CLASSIFICATION	3.689330189830787E-5	DESIGN
// we found some extends attributes referencing entities which were // not already processed.  here we need to locate all entity-names // and class-names contained in this document itself, making sure // that these get removed from the extendz list such that only // extends names which require us to delay processing (i.e. // external to this document and not yet processed) are contained // in the returned result	WITHOUT_CLASSIFICATION	0.8936906828282304	WITHOUT_CLASSIFICATION	0.1063093171717696	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8934601618932041	DESIGN	0.10653983810679592	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8934601618932041	DESIGN	0.10653983810679592	WITHOUT_CLASSIFICATION
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999999994120234	WITHOUT_CLASSIFICATION	5.879766416387921E-10	DESIGN
// if a ThreadLocalSessionContext-bound session happens to get // serialized, to be completely correct, we need to make sure // that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9999669840105037	WITHOUT_CLASSIFICATION	3.30159894963961E-5	DESIGN
// on the inverse, it makes sense that if a ThreadLocalSessionContext- // bound session then gets deserialized to go ahead and re-bind it to // the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9999982657134217	WITHOUT_CLASSIFICATION	1.734286578419551E-6	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994882483456443	WITHOUT_CLASSIFICATION	5.117516543556602E-4	DESIGN
// 60 second lock timeout	WITHOUT_CLASSIFICATION	0.9999842542558817	WITHOUT_CLASSIFICATION	1.5745744118362152E-5	DESIGN
// OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999992063980014	WITHOUT_CLASSIFICATION	7.93601998648095E-7	DESIGN
// Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999997523857697	WITHOUT_CLASSIFICATION	2.476142303005279E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999985954896378	WITHOUT_CLASSIFICATION	1.4045103622154053E-5	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999815896738629	WITHOUT_CLASSIFICATION	1.8410326137178324E-5	DESIGN
// tree cache in optimistic mode seems to have as very difficult // time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9997474333432842	WITHOUT_CLASSIFICATION	2.525666567158051E-4	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9998252659208661	WITHOUT_CLASSIFICATION	1.7473407913400242E-4	DESIGN
//ignore!	WITHOUT_CLASSIFICATION	0.9999815896738629	WITHOUT_CLASSIFICATION	1.8410326137178324E-5	DESIGN
//60 seconds	WITHOUT_CLASSIFICATION	0.9998252659208661	WITHOUT_CLASSIFICATION	1.7473407913400242E-4	DESIGN
//do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9999988370151638	WITHOUT_CLASSIFICATION	1.162984836186564E-6	DESIGN
// NOTE : evict() operates locally only (i.e., does not propogate // to any other nodes in the potential cluster).  This is // exactly what is needed when we destroy() here; destroy() is used // as part of the process of shutting down a SessionFactory; thus // these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9470748755159868	DESIGN	0.05292512448401325	WITHOUT_CLASSIFICATION
//    protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9999996451353003	WITHOUT_CLASSIFICATION	3.5486469963587424E-7	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999930873890577	WITHOUT_CLASSIFICATION	6.9126109423986355E-6	DESIGN
// If we've been blocking for the mutex, perhaps another // thread has already reestablished the root. // In case the node was reestablised via replication, confirm it's  // marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9992627921872667	WITHOUT_CLASSIFICATION	7.372078127333039E-4	DESIGN
// For pessimistic locking, we just want to toss out our ref // to any old invalid root node and get the latest (may be null)            	WITHOUT_CLASSIFICATION	0.9999989027668701	WITHOUT_CLASSIFICATION	1.0972331299029793E-6	DESIGN
// The rest only matters for optimistic locking, where we // need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997253670702725	WITHOUT_CLASSIFICATION	2.7463292972753907E-4	DESIGN
// Don't hold a transactional lock for this 	WITHOUT_CLASSIFICATION	0.7618678084640851	WITHOUT_CLASSIFICATION	0.23813219153591486	DESIGN
// Make sure the root node for the region exists and  // has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.999998161531479	WITHOUT_CLASSIFICATION	1.8384685209492686E-6	DESIGN
// Never evict this node	WITHOUT_CLASSIFICATION	0.9998161312441177	WITHOUT_CLASSIFICATION	1.8386875588224683E-4	DESIGN
// Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9999883686497809	WITHOUT_CLASSIFICATION	1.1631350218996489E-5	DESIGN
// 60 seconds	WITHOUT_CLASSIFICATION	0.9999828525998996	WITHOUT_CLASSIFICATION	1.7147400100467033E-5	DESIGN
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999999710366	WITHOUT_CLASSIFICATION	2.896343011041579E-11	DESIGN
// no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9999963107222023	WITHOUT_CLASSIFICATION	3.689277797640983E-6	DESIGN
// This should only be possible if the caches are constructor injected 	WITHOUT_CLASSIFICATION	0.9929131070790992	WITHOUT_CLASSIFICATION	0.007086892920900852	DESIGN
// We only build caches if *none* were passed in.  Passing in // caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9999412100436713	WITHOUT_CLASSIFICATION	5.8789956328679084E-5	DESIGN
// Set up the cache factory	WITHOUT_CLASSIFICATION	0.9997444522426542	WITHOUT_CLASSIFICATION	2.5554775734580555E-4	DESIGN
// See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999545644633651	WITHOUT_CLASSIFICATION	4.543553663501451E-5	DESIGN
// Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999888857910205	WITHOUT_CLASSIFICATION	1.1114208979426975E-5	DESIGN
// Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999998347789254	WITHOUT_CLASSIFICATION	1.652210745804461E-7	DESIGN
// For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9999663165869056	WITHOUT_CLASSIFICATION	3.368341309446853E-5	DESIGN
// We can't change the TM on a running cache; just check // if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999999941332931	WITHOUT_CLASSIFICATION	5.8667068479672216E-9	DESIGN
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999499130147216	WITHOUT_CLASSIFICATION	5.008698527839213E-5	DESIGN
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999998833540583	WITHOUT_CLASSIFICATION	1.1664594168865535E-6	DESIGN
// This method should be implemented assuming it's valid to  // do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9889232543012836	WITHOUT_CLASSIFICATION	0.011076745698716516	DESIGN
// Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9999991358227217	WITHOUT_CLASSIFICATION	8.641772782886873E-7	DESIGN
// We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9999999313859108	WITHOUT_CLASSIFICATION	6.861408911399526E-8	DESIGN
// Following methods we don't delegate since they have so little logic // it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.607374939474651	WITHOUT_CLASSIFICATION	0.3926250605253489	DESIGN
// If JBC is using INVALIDATION, we don't want to propagate changes. // We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9999999963852838	WITHOUT_CLASSIFICATION	3.614716110204638E-9	DESIGN
// We don't want to waste effort setting an option if JBC is // already in LOCAL mode. If JBC is REPL_(A)SYNC then check // if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999999150486639	WITHOUT_CLASSIFICATION	8.495133612146918E-8	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents updates // Add a zero (or low) timeout option so we don't block // waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999999925605	WITHOUT_CLASSIFICATION	7.439525367551868E-12	DESIGN
// Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999999970573884	WITHOUT_CLASSIFICATION	2.9426115407967626E-9	DESIGN
// Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.999970061595153	WITHOUT_CLASSIFICATION	2.993840484707839E-5	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999453435810028	WITHOUT_CLASSIFICATION	5.4656418997218384E-5	DESIGN
// Initial load from JBC	WITHOUT_CLASSIFICATION	0.9999999770642061	WITHOUT_CLASSIFICATION	2.293579393774334E-8	DESIGN
// See if we had a 2nd invalidation from the same initial // preinvalidation timestamp. If so, only increment // if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999999999933248	WITHOUT_CLASSIFICATION	6.67517328358113E-12	DESIGN
// We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9999453435810028	WITHOUT_CLASSIFICATION	5.4656418997218384E-5	DESIGN
// If the workspace node has null as well, OK; if not we've // been modified in a non-comparable manner, which we have to // treat as us being newer	WITHOUT_CLASSIFICATION	0.999999897990079	WITHOUT_CLASSIFICATION	1.0200992097764682E-7	DESIGN
// The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999991664843056	WITHOUT_CLASSIFICATION	8.335156944569587E-7	DESIGN
// ignore!	WITHOUT_CLASSIFICATION	0.999999582242179	WITHOUT_CLASSIFICATION	4.1775782103058793E-7	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998144164353	WITHOUT_CLASSIFICATION	1.8558356468750094E-7	DESIGN
// construct the cache	WITHOUT_CLASSIFICATION	0.9999448565461521	WITHOUT_CLASSIFICATION	5.5143453847877124E-5	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993570501634	WITHOUT_CLASSIFICATION	6.429498365484082E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993570501634	WITHOUT_CLASSIFICATION	6.429498365484082E-7	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998512976165389	WITHOUT_CLASSIFICATION	1.4870238346119345E-4	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which //                     hibernate sensibly lets default to minPoolSize, but we'll let users //                     override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.997417398521051	WITHOUT_CLASSIFICATION	0.002582601478948895	DESIGN
/*DataSource unpooled = DataSources.unpooledDataSource(	WITHOUT_CLASSIFICATION	0.9999031264925623	WITHOUT_CLASSIFICATION	9.687350743767488E-5	DESIGN
// TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9999999886771853	WITHOUT_CLASSIFICATION	1.132281470520294E-8	DESIGN
// get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9999987068450552	WITHOUT_CLASSIFICATION	1.2931549447902495E-6	DESIGN
// set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9999310497026394	WITHOUT_CLASSIFICATION	6.895029736072125E-5	DESIGN
// toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999999716287961	WITHOUT_CLASSIFICATION	2.837120392563554E-8	DESIGN
// return the connection	WITHOUT_CLASSIFICATION	0.9999908710481564	WITHOUT_CLASSIFICATION	9.12895184361416E-6	DESIGN
// Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999725936094848	WITHOUT_CLASSIFICATION	2.74063905152453E-5	DESIGN
// Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999999512604804	WITHOUT_CLASSIFICATION	4.873951954048588E-8	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999962479949116	WITHOUT_CLASSIFICATION	3.752005088341939E-6	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999962479949116	WITHOUT_CLASSIFICATION	3.752005088341939E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997991303955	WITHOUT_CLASSIFICATION	2.0086960447019094E-7	DESIGN
// Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9999999902827412	WITHOUT_CLASSIFICATION	9.717258850726201E-9	DESIGN
// Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9992165226136391	WITHOUT_CLASSIFICATION	7.83477386360851E-4	DESIGN
// Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999962479949116	WITHOUT_CLASSIFICATION	3.752005088341939E-6	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997991303955	WITHOUT_CLASSIFICATION	2.0086960447019094E-7	DESIGN
// Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999997991303955	WITHOUT_CLASSIFICATION	2.0086960447019094E-7	DESIGN
// Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998446033407763	WITHOUT_CLASSIFICATION	1.5539665922374357E-4	DESIGN
// Remember Isolation level	WITHOUT_CLASSIFICATION	0.9995641345733737	WITHOUT_CLASSIFICATION	4.358654266263564E-4	DESIGN
// If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999999996895618	WITHOUT_CLASSIFICATION	3.104382435002412E-10	DESIGN
// We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999996022383054	WITHOUT_CLASSIFICATION	3.977616946081126E-7	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998374870291313	WITHOUT_CLASSIFICATION	1.6251297086858525E-4	DESIGN
// not really a many-to-one association *necessarily*	WITHOUT_CLASSIFICATION	0.9998374870291313	WITHOUT_CLASSIFICATION	1.6251297086858525E-4	DESIGN
//always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999893950273909	WITHOUT_CLASSIFICATION	1.060497260906678E-5	DESIGN
//public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9973844664449526	WITHOUT_CLASSIFICATION	0.0026155335550474687	DESIGN
// default is POJO	WITHOUT_CLASSIFICATION	0.9999990665663709	WITHOUT_CLASSIFICATION	9.334336290454312E-7	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999656218356343	WITHOUT_CLASSIFICATION	3.437816436560105E-5	DESIGN
// use setParameter for null values	WITHOUT_CLASSIFICATION	0.9999656218356343	WITHOUT_CLASSIFICATION	3.437816436560105E-5	DESIGN
//private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9999867154367894	WITHOUT_CLASSIFICATION	1.3284563210580284E-5	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997091901715224	WITHOUT_CLASSIFICATION	2.9080982847768755E-4	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9975606505441109	WITHOUT_CLASSIFICATION	0.0024393494558889663	DESIGN
// get the updated snapshot of the entity state by cloning current state; // it is safe to copy in place, since by this time no-one else (should have) // has a reference  to the array	WITHOUT_CLASSIFICATION	0.9999999043467626	WITHOUT_CLASSIFICATION	9.565323748784418E-8	DESIGN
// this entity defines proeprty generation, so process those generated // values...	WITHOUT_CLASSIFICATION	0.9999664424376564	WITHOUT_CLASSIFICATION	3.3557562343469964E-5	DESIGN
// have the entity entry perform post-update processing, passing it the // update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999992633035091	WITHOUT_CLASSIFICATION	7.366964908708211E-7	DESIGN
/*!persister.isCacheInvalidationRequired()*/	WITHOUT_CLASSIFICATION	0.9999831138303474	WITHOUT_CLASSIFICATION	1.6886169652586037E-5	DESIGN
// need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9968550519694878	WITHOUT_CLASSIFICATION	0.003144948030512231	DESIGN
//sort first by role name	WITHOUT_CLASSIFICATION	0.9999832256012737	WITHOUT_CLASSIFICATION	1.677439872631913E-5	DESIGN
//Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9975606505441109	WITHOUT_CLASSIFICATION	0.0024393494558889663	DESIGN
//then by fk	WITHOUT_CLASSIFICATION	0.9997269319295585	WITHOUT_CLASSIFICATION	2.7306807044150724E-4	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999758242684524	WITHOUT_CLASSIFICATION	2.41757315475117E-5	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999758242684524	WITHOUT_CLASSIFICATION	2.41757315475117E-5	DESIGN
// an existing collection that was either non-empty or uninitialized // is replaced by null or a different collection // (if the collection is uninitialized, hibernate has no way of // knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9368819887523205	WITHOUT_CLASSIFICATION	0.0631180112476795	DESIGN
// this method is called when a new non-null collection is persisted // or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9909356475465219	WITHOUT_CLASSIFICATION	0.009064352453478083	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9737339487981136	WITHOUT_CLASSIFICATION	0.02626605120188641	DESIGN
//do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.999824442287865	WITHOUT_CLASSIFICATION	1.755577121350014E-4	DESIGN
//sort first by entity name	WITHOUT_CLASSIFICATION	0.9998909181735933	WITHOUT_CLASSIFICATION	1.0908182640667704E-4	DESIGN
//then by id	WITHOUT_CLASSIFICATION	0.99901877247145	WITHOUT_CLASSIFICATION	9.812275285499212E-4	DESIGN
// to be safe...	WITHOUT_CLASSIFICATION	0.9998527058911684	WITHOUT_CLASSIFICATION	1.4729410883159642E-4	DESIGN
// no transformations took place, so handle it as we would a // non-instrumented class	WITHOUT_CLASSIFICATION	0.9999830085875003	WITHOUT_CLASSIFICATION	1.6991412499659698E-5	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999711849711	WITHOUT_CLASSIFICATION	2.8815028862196415E-8	DESIGN
// see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999999711849711	WITHOUT_CLASSIFICATION	2.8815028862196415E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998259197299036	WITHOUT_CLASSIFICATION	1.740802700964636E-4	DESIGN
//test out the optimizer:	WITHOUT_CLASSIFICATION	0.999996271008048	WITHOUT_CLASSIFICATION	3.7289919520651464E-6	DESIGN
// set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9999789247179447	WITHOUT_CLASSIFICATION	2.1075282055287953E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// invokespecial	WITHOUT_CLASSIFICATION	0.99999984006234	WITHOUT_CLASSIFICATION	1.599376599205342E-7	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987011796982	WITHOUT_CLASSIFICATION	1.2988203017934468E-5	DESIGN
// aload_1 // load bean	WITHOUT_CLASSIFICATION	0.9999923607108041	WITHOUT_CLASSIFICATION	7.639289195897924E-6	DESIGN
// checkcast // cast bean	WITHOUT_CLASSIFICATION	0.9999734563749733	WITHOUT_CLASSIFICATION	2.6543625026730286E-5	DESIGN
// astore_3 // store bean	WITHOUT_CLASSIFICATION	0.9999872163515816	WITHOUT_CLASSIFICATION	1.278364841834525E-5	DESIGN
// aload_2 // args	WITHOUT_CLASSIFICATION	0.9999975717250358	WITHOUT_CLASSIFICATION	2.428274964280962E-6	DESIGN
// iconst_i // continue to aastore // growing stack is 1	WITHOUT_CLASSIFICATION	0.9999927106339007	WITHOUT_CLASSIFICATION	7.28936609933977E-6	DESIGN
// new	WITHOUT_CLASSIFICATION	0.9993861929799106	WITHOUT_CLASSIFICATION	6.138070200893448E-4	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999933182153715	WITHOUT_CLASSIFICATION	6.681784628503233E-5	DESIGN
// aload_3 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999965631281669	WITHOUT_CLASSIFICATION	3.436871833192606E-6	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999975327932064	WITHOUT_CLASSIFICATION	2.4672067936615927E-6	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999994159811945	WITHOUT_CLASSIFICATION	5.840188054861333E-7	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999994159811945	WITHOUT_CLASSIFICATION	5.840188054861333E-7	DESIGN
// aastore // args	WITHOUT_CLASSIFICATION	0.9999972974328947	WITHOUT_CLASSIFICATION	2.702567105340887E-6	DESIGN
/* | this | bean | args | i | raw bean | exception | */	WITHOUT_CLASSIFICATION	0.9985404508338271	WITHOUT_CLASSIFICATION	0.0014595491661728733	DESIGN
// required to exception table // iconst_0 // i	WITHOUT_CLASSIFICATION	0.9999681122515137	WITHOUT_CLASSIFICATION	3.1887748486397754E-5	DESIGN
// istore_3 // store i	WITHOUT_CLASSIFICATION	0.9999974877606546	WITHOUT_CLASSIFICATION	2.5122393454485117E-6	DESIGN
// aload_1 // load the bean	WITHOUT_CLASSIFICATION	0.9999924384592872	WITHOUT_CLASSIFICATION	7.561540712844229E-6	DESIGN
// checkcast // cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9995325939998961	WITHOUT_CLASSIFICATION	4.6740600010390367E-4	DESIGN
/* current stack len = 0 */	WITHOUT_CLASSIFICATION	0.9999996230584944	WITHOUT_CLASSIFICATION	3.769415055389443E-7	DESIGN
// start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9802183598426114	WITHOUT_CLASSIFICATION	0.019781640157388557	DESIGN
// iinc 3, 1	WITHOUT_CLASSIFICATION	0.9999936110575929	WITHOUT_CLASSIFICATION	6.388942407182423E-6	DESIGN
// aload 4 // load the raw bean	WITHOUT_CLASSIFICATION	0.9999900290599798	WITHOUT_CLASSIFICATION	9.970940020207547E-6	DESIGN
// aload_2 // load the args	WITHOUT_CLASSIFICATION	0.9999991625924279	WITHOUT_CLASSIFICATION	8.374075720143902E-7	DESIGN
// iconst_i	WITHOUT_CLASSIFICATION	0.9999122101502332	WITHOUT_CLASSIFICATION	8.77898497666703E-5	DESIGN
// aaload	WITHOUT_CLASSIFICATION	0.999986192722788	WITHOUT_CLASSIFICATION	1.3807277212067471E-5	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999977077562353	WITHOUT_CLASSIFICATION	2.2922437647122414E-6	DESIGN
// checkcast (case of primitive type) // invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.999999978225318	WITHOUT_CLASSIFICATION	2.177468195644768E-8	DESIGN
// checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9999970851408259	WITHOUT_CLASSIFICATION	2.91485917422425E-6	DESIGN
/* current stack len = 2 */	WITHOUT_CLASSIFICATION	0.999999212554899	WITHOUT_CLASSIFICATION	7.874451010764793E-7	DESIGN
// end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.8520022207205151	WITHOUT_CLASSIFICATION	0.1479977792794849	DESIGN
// register in exception table	WITHOUT_CLASSIFICATION	0.999982962712923	WITHOUT_CLASSIFICATION	1.703728707706982E-5	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// aload_0	WITHOUT_CLASSIFICATION	0.9999981387048222	WITHOUT_CLASSIFICATION	1.861295177737783E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987011796982	WITHOUT_CLASSIFICATION	1.2988203017934468E-5	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987011796982	WITHOUT_CLASSIFICATION	1.2988203017934468E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999933182153715	WITHOUT_CLASSIFICATION	6.681784628503233E-5	DESIGN
// invokevirtual	WITHOUT_CLASSIFICATION	0.9999994159811945	WITHOUT_CLASSIFICATION	5.840188054861333E-7	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999977077562353	WITHOUT_CLASSIFICATION	2.2922437647122414E-6	DESIGN
/* local variables | target obj | each oldvalue | */	WITHOUT_CLASSIFICATION	0.9999995561314343	WITHOUT_CLASSIFICATION	4.4386856572339816E-7	DESIGN
// astore 5 // store exception	WITHOUT_CLASSIFICATION	0.9999970973671353	WITHOUT_CLASSIFICATION	2.9026328648157374E-6	DESIGN
// new // BulkAccessorException	WITHOUT_CLASSIFICATION	0.999830105574432	WITHOUT_CLASSIFICATION	1.698944255680841E-4	DESIGN
// aload 5 // load exception	WITHOUT_CLASSIFICATION	0.9999853096397371	WITHOUT_CLASSIFICATION	1.4690360262925212E-5	DESIGN
// iload_3 // i	WITHOUT_CLASSIFICATION	0.9999996069459167	WITHOUT_CLASSIFICATION	3.9305408323608505E-7	DESIGN
// invokespecial // BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9999999615798706	WITHOUT_CLASSIFICATION	3.842012935558775E-8	DESIGN
// athrow	WITHOUT_CLASSIFICATION	0.9999900319588216	WITHOUT_CLASSIFICATION	9.968041178480818E-6	DESIGN
// WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9999964294639545	WITHOUT_CLASSIFICATION	3.5705360455266696E-6	DESIGN
//swallow	WITHOUT_CLASSIFICATION	0.999946717649184	WITHOUT_CLASSIFICATION	5.328235081599174E-5	DESIGN
/* local variable | this | */	WITHOUT_CLASSIFICATION	0.9999818639109773	WITHOUT_CLASSIFICATION	1.8136089022673633E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999586362913729	WITHOUT_CLASSIFICATION	4.13637086270353E-5	DESIGN
// aload_0 // load this	WITHOUT_CLASSIFICATION	0.9999586362913729	WITHOUT_CLASSIFICATION	4.13637086270353E-5	DESIGN
// getfield // get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999907835206433	WITHOUT_CLASSIFICATION	9.21647935668344E-6	DESIGN
// areturn // return the value of the field	WITHOUT_CLASSIFICATION	0.9999965704037532	WITHOUT_CLASSIFICATION	3.4295962467132745E-6	DESIGN
/* local variables | this | callback | */	WITHOUT_CLASSIFICATION	0.9997746648238959	WITHOUT_CLASSIFICATION	2.2533517610415603E-4	DESIGN
// aload_1 // load callback	WITHOUT_CLASSIFICATION	0.9999937502873832	WITHOUT_CLASSIFICATION	6.249712616832337E-6	DESIGN
// putfield // put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9999995888971718	WITHOUT_CLASSIFICATION	4.1110282816219496E-7	DESIGN
// case of non-static field	WITHOUT_CLASSIFICATION	0.9999979985803328	WITHOUT_CLASSIFICATION	2.0014196671385508E-6	DESIGN
// getfield // get each field	WITHOUT_CLASSIFICATION	0.9999161259169776	WITHOUT_CLASSIFICATION	8.387408302231136E-5	DESIGN
// invokeinterface // invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999999885113535	WITHOUT_CLASSIFICATION	1.1488646506626681E-7	DESIGN
// ifnonnull	WITHOUT_CLASSIFICATION	0.9999992048288003	WITHOUT_CLASSIFICATION	7.951711995629809E-7	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999980421057018	WITHOUT_CLASSIFICATION	1.957894298219416E-6	DESIGN
// *return // each type	WITHOUT_CLASSIFICATION	0.9999980421057018	WITHOUT_CLASSIFICATION	1.957894298219416E-6	DESIGN
// *store_1 // each type	WITHOUT_CLASSIFICATION	0.9999998663588642	WITHOUT_CLASSIFICATION	1.3364113576143443E-7	DESIGN
// ldc // name of the field	WITHOUT_CLASSIFICATION	0.9997139219462274	WITHOUT_CLASSIFICATION	2.860780537725828E-4	DESIGN
// *load_1 // each type	WITHOUT_CLASSIFICATION	0.9999998900946736	WITHOUT_CLASSIFICATION	1.0990532642888075E-7	DESIGN
// invokeinterface // invoke Callback.read*() // each type	WITHOUT_CLASSIFICATION	0.9999999764661601	WITHOUT_CLASSIFICATION	2.3533839870380397E-8	DESIGN
// int	WITHOUT_CLASSIFICATION	0.9999939955948969	WITHOUT_CLASSIFICATION	6.004405103086374E-6	DESIGN
// return	WITHOUT_CLASSIFICATION	0.999987011796982	WITHOUT_CLASSIFICATION	1.2988203017934468E-5	DESIGN
// dup	WITHOUT_CLASSIFICATION	0.999933182153715	WITHOUT_CLASSIFICATION	6.681784628503233E-5	DESIGN
// invokeinterface	WITHOUT_CLASSIFICATION	0.9999975327932064	WITHOUT_CLASSIFICATION	2.4672067936615927E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999977077562353	WITHOUT_CLASSIFICATION	2.2922437647122414E-6	DESIGN
// checkcast	WITHOUT_CLASSIFICATION	0.9999977077562353	WITHOUT_CLASSIFICATION	2.2922437647122414E-6	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998299321279	WITHOUT_CLASSIFICATION	1.700678721126379E-7	DESIGN
// invokeinterface // enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9999998299321279	WITHOUT_CLASSIFICATION	1.700678721126379E-7	DESIGN
// ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9999954595854427	WITHOUT_CLASSIFICATION	4.540414557367227E-6	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999992595813	WITHOUT_CLASSIFICATION	7.40418700129233E-7	DESIGN
// *load_1	WITHOUT_CLASSIFICATION	0.9999992595813	WITHOUT_CLASSIFICATION	7.40418700129233E-7	DESIGN
// putfield	WITHOUT_CLASSIFICATION	0.9999954938060577	WITHOUT_CLASSIFICATION	4.506193942312374E-6	DESIGN
// return ;	WITHOUT_CLASSIFICATION	0.9999750382989476	WITHOUT_CLASSIFICATION	2.496170105229966E-5	DESIGN
// ldc // field name	WITHOUT_CLASSIFICATION	0.9999966954138593	WITHOUT_CLASSIFICATION	3.304586140810381E-6	DESIGN
// getfield // old value of the field	WITHOUT_CLASSIFICATION	0.999990126538801	WITHOUT_CLASSIFICATION	9.873461198869925E-6	DESIGN
// invokeinterface // callback.write*(..)	WITHOUT_CLASSIFICATION	0.9999999565681392	WITHOUT_CLASSIFICATION	4.343186064919864E-8	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999910065711857	WITHOUT_CLASSIFICATION	8.993428814383257E-6	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999910065711857	WITHOUT_CLASSIFICATION	8.993428814383257E-6	DESIGN
// not array	WITHOUT_CLASSIFICATION	0.9995521581189779	WITHOUT_CLASSIFICATION	4.478418810221448E-4	DESIGN
// array of reference type	WITHOUT_CLASSIFICATION	0.9999950481350262	WITHOUT_CLASSIFICATION	4.951864973857471E-6	DESIGN
// boolean	WITHOUT_CLASSIFICATION	0.9999966428866257	WITHOUT_CLASSIFICATION	3.3571133743895204E-6	DESIGN
// byte	WITHOUT_CLASSIFICATION	0.9999949093424512	WITHOUT_CLASSIFICATION	5.090657548894265E-6	DESIGN
// char	WITHOUT_CLASSIFICATION	0.9999996222022473	WITHOUT_CLASSIFICATION	3.777977527660168E-7	DESIGN
// short	WITHOUT_CLASSIFICATION	0.9998993063438383	WITHOUT_CLASSIFICATION	1.0069365616168875E-4	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999996054411699	WITHOUT_CLASSIFICATION	3.945588301040391E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999989930536601	WITHOUT_CLASSIFICATION	1.0069463398118717E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999989930536601	WITHOUT_CLASSIFICATION	1.0069463398118717E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999782855029492	WITHOUT_CLASSIFICATION	2.1714497050863555E-5	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999782855029492	WITHOUT_CLASSIFICATION	2.1714497050863555E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999986042965765	WITHOUT_CLASSIFICATION	1.3957034234539644E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999986042965765	WITHOUT_CLASSIFICATION	1.3957034234539644E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999727252573	WITHOUT_CLASSIFICATION	2.7274742618700454E-8	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999727252573	WITHOUT_CLASSIFICATION	2.7274742618700454E-8	DESIGN
// reference type	WITHOUT_CLASSIFICATION	0.9999910065711857	WITHOUT_CLASSIFICATION	8.993428814383257E-6	DESIGN
// double	WITHOUT_CLASSIFICATION	0.999996054411699	WITHOUT_CLASSIFICATION	3.945588301040391E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999989930536601	WITHOUT_CLASSIFICATION	1.0069463398118717E-6	DESIGN
// float	WITHOUT_CLASSIFICATION	0.9999989930536601	WITHOUT_CLASSIFICATION	1.0069463398118717E-6	DESIGN
// long	WITHOUT_CLASSIFICATION	0.9999782855029492	WITHOUT_CLASSIFICATION	2.1714497050863555E-5	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999986042965765	WITHOUT_CLASSIFICATION	1.3957034234539644E-6	DESIGN
// bad type	WITHOUT_CLASSIFICATION	0.9999986042965765	WITHOUT_CLASSIFICATION	1.3957034234539644E-6	DESIGN
// boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9999999727252573	WITHOUT_CLASSIFICATION	2.7274742618700454E-8	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999940911107339	WITHOUT_CLASSIFICATION	5.908889266104194E-5	DESIGN
//Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999854293079089	WITHOUT_CLASSIFICATION	1.4570692091096273E-4	DESIGN
//decrement the lock	WITHOUT_CLASSIFICATION	0.9997590799678241	WITHOUT_CLASSIFICATION	2.409200321759536E-4	DESIGN
// create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9999994413134832	WITHOUT_CLASSIFICATION	5.5868651683623E-7	DESIGN
//recache the updated state	WITHOUT_CLASSIFICATION	0.9999820660352	WITHOUT_CLASSIFICATION	1.7933964799984153E-5	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999525462256236	WITHOUT_CLASSIFICATION	4.745377437647472E-5	DESIGN
//null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9958190081847936	WITHOUT_CLASSIFICATION	0.0041809918152063905	DESIGN
// we really could refresh the item if it // is not a lock, but it might be slower //return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.5379850183713034	WITHOUT_CLASSIFICATION	0.4620149816286967	DESIGN
//by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9997237975926238	WITHOUT_CLASSIFICATION	2.762024073763257E-4	DESIGN
// the user provided resulttransformer, not the one used with "select new". Here to avoid mangling // transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9999999975436049	WITHOUT_CLASSIFICATION	2.4563951336318787E-9	DESIGN
// disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999999502403725	WITHOUT_CLASSIFICATION	4.9759627520107274E-8	DESIGN
// disassemble named parameters	WITHOUT_CLASSIFICATION	0.999999941171922	WITHOUT_CLASSIFICATION	5.8828078095352306E-8	DESIGN
//ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998512976165389	WITHOUT_CLASSIFICATION	1.4870238346119345E-4	DESIGN
// noop	WITHOUT_CLASSIFICATION	0.9999525462256236	WITHOUT_CLASSIFICATION	4.745377437647472E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998214185315748	WITHOUT_CLASSIFICATION	1.7858146842512787E-4	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998214185315748	WITHOUT_CLASSIFICATION	1.7858146842512787E-4	DESIGN
// this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9999868954454794	WITHOUT_CLASSIFICATION	1.3104554520732035E-5	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999974744628698	WITHOUT_CLASSIFICATION	2.5255371301431117E-6	DESIGN
// Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9999974744628698	WITHOUT_CLASSIFICATION	2.5255371301431117E-6	DESIGN
//throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9999958726418092	WITHOUT_CLASSIFICATION	4.127358190779638E-6	DESIGN
//assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9995954463278062	WITHOUT_CLASSIFICATION	4.045536721938376E-4	DESIGN
//persister.setIdentifier(result, id); //before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9999989235234598	WITHOUT_CLASSIFICATION	1.0764765402264619E-6	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999977840611685	WITHOUT_CLASSIFICATION	2.215938831488367E-5	DESIGN
// no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.999977840611685	WITHOUT_CLASSIFICATION	2.215938831488367E-5	DESIGN
// again, CCS did not have such a concept; but a reasonable // proximity is to clear the cache after transaction *as long as* // the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999999681324083	WITHOUT_CLASSIFICATION	3.186759167286427E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999064313491	WITHOUT_CLASSIFICATION	9.356865097559185E-8	DESIGN
// again, CCS did not have such a concept; however a reasonable // proximity is to clear the cache.  For non-transaction aware // caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999999064313491	WITHOUT_CLASSIFICATION	9.356865097559185E-8	DESIGN
// classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999958516920285	WITHOUT_CLASSIFICATION	4.14830797148878E-5	DESIGN
// get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9999647335096943	WITHOUT_CLASSIFICATION	3.5266490305816093E-5	DESIGN
// get meta's from <class>	WITHOUT_CLASSIFICATION	0.9999811363294115	WITHOUT_CLASSIFICATION	1.88636705884415E-5	DESIGN
// DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9999890350525182	WITHOUT_CLASSIFICATION	1.0964947481754447E-5	DESIGN
// MUTABLE	WITHOUT_CLASSIFICATION	0.9999910806231945	WITHOUT_CLASSIFICATION	8.919376805519116E-6	DESIGN
// WHERE	WITHOUT_CLASSIFICATION	0.9999720373011666	WITHOUT_CLASSIFICATION	2.7962698833482155E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999189787476974	WITHOUT_CLASSIFICATION	8.102125230262157E-5	DESIGN
// POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9999925935363455	WITHOUT_CLASSIFICATION	7.406463654539198E-6	DESIGN
// TODO:	WITHOUT_CLASSIFICATION	0.9915402086939642	WITHOUT_CLASSIFICATION	0.008459791306035844	DESIGN
// ID	WITHOUT_CLASSIFICATION	0.9999891747817782	WITHOUT_CLASSIFICATION	1.0825218221741901E-5	DESIGN
// VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9999932711385128	WITHOUT_CLASSIFICATION	6.728861487255808E-6	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999837345102308	WITHOUT_CLASSIFICATION	1.6265489769207552E-5	DESIGN
// Primary key constraint	WITHOUT_CLASSIFICATION	0.9999999473320687	WITHOUT_CLASSIFICATION	5.2667931434515474E-8	DESIGN
// this is either a <version/> tag with no type attribute, // or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9999999813326536	WITHOUT_CLASSIFICATION	1.866734639650131E-8	DESIGN
// for version properties marked as being generated, make sure they are "always" // generated; aka, "insert" is invalid; this is dis-allowed by the DTD, // but just to make sure...	WITHOUT_CLASSIFICATION	0.9999994501210361	WITHOUT_CLASSIFICATION	5.498789638826854E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999837345102308	WITHOUT_CLASSIFICATION	1.6265489769207552E-5	DESIGN
// ( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9999956257529201	WITHOUT_CLASSIFICATION	4.374247079950845E-6	DESIGN
// go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999993582658683	WITHOUT_CLASSIFICATION	6.417341317094186E-7	DESIGN
// DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9999794202417671	WITHOUT_CLASSIFICATION	2.0579758232814806E-5	DESIGN
// IMPORT	WITHOUT_CLASSIFICATION	0.9999888638787335	WITHOUT_CLASSIFICATION	1.1136121266521455E-5	DESIGN
// BATCH SIZE	WITHOUT_CLASSIFICATION	0.9999768004317012	WITHOUT_CLASSIFICATION	2.319956829878861E-5	DESIGN
// SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9999978420023772	WITHOUT_CLASSIFICATION	2.1579976228430536E-6	DESIGN
// OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9999931379031991	WITHOUT_CLASSIFICATION	6.862096800878319E-6	DESIGN
// PERSISTER	WITHOUT_CLASSIFICATION	0.9999921467705988	WITHOUT_CLASSIFICATION	7.853229401181869E-6	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999758225913703	WITHOUT_CLASSIFICATION	2.4177408629750492E-5	DESIGN
// get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999960401688519	WITHOUT_CLASSIFICATION	3.959831148108598E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999995316522262	WITHOUT_CLASSIFICATION	4.6834777369769024E-7	DESIGN
// joined subclasses	WITHOUT_CLASSIFICATION	0.9999990388174066	WITHOUT_CLASSIFICATION	9.611825934193233E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999595036245332	WITHOUT_CLASSIFICATION	4.0496375466655935E-5	DESIGN
// CHECK	WITHOUT_CLASSIFICATION	0.9999189787476974	WITHOUT_CLASSIFICATION	8.102125230262157E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999758225913703	WITHOUT_CLASSIFICATION	2.4177408629750492E-5	DESIGN
// properties	WITHOUT_CLASSIFICATION	0.9999995316522262	WITHOUT_CLASSIFICATION	4.6834777369769024E-7	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999595036245332	WITHOUT_CLASSIFICATION	4.0496375466655935E-5	DESIGN
// model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999994958717593	WITHOUT_CLASSIFICATION	5.041282406717061E-7	DESIGN
// TABLENAME	WITHOUT_CLASSIFICATION	0.9999804078817873	WITHOUT_CLASSIFICATION	1.9592118212696296E-5	DESIGN
// join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9999999826615621	WITHOUT_CLASSIFICATION	1.733843792308248E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999915861347548	WITHOUT_CLASSIFICATION	8.413865245112053E-6	DESIGN
// COLUMN(S)	WITHOUT_CLASSIFICATION	0.9999957189371868	WITHOUT_CLASSIFICATION	4.28106281329484E-6	DESIGN
// column index	WITHOUT_CLASSIFICATION	0.9999932389946777	WITHOUT_CLASSIFICATION	6.761005322257978E-6	DESIGN
//column unique-key	WITHOUT_CLASSIFICATION	0.9999011308951328	WITHOUT_CLASSIFICATION	9.886910486719773E-5	DESIGN
// automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9992779374822687	WITHOUT_CLASSIFICATION	7.220625177313191E-4	DESIGN
// for an any	WITHOUT_CLASSIFICATION	0.9999895334508437	WITHOUT_CLASSIFICATION	1.0466549156261629E-5	DESIGN
// insertable simply because that is the user did not specify // anything; just override it	WITHOUT_CLASSIFICATION	0.999999999798703	WITHOUT_CLASSIFICATION	2.0129709493777803E-10	DESIGN
// the user specifically supplied insert="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999994628828814	WITHOUT_CLASSIFICATION	5.3711711850757E-7	DESIGN
// properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9999829940692295	WITHOUT_CLASSIFICATION	1.700593077043773E-5	DESIGN
// updateable only because the user did not specify  // anything; just override it	WITHOUT_CLASSIFICATION	0.9999999999972834	WITHOUT_CLASSIFICATION	2.7165416015892884E-12	DESIGN
// the user specifically supplied update="true", // which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999999205631488	WITHOUT_CLASSIFICATION	7.943685121297783E-8	DESIGN
// ROLENAME	WITHOUT_CLASSIFICATION	0.9999697613129622	WITHOUT_CLASSIFICATION	3.0238687037698357E-5	DESIGN
// FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9999556896426728	WITHOUT_CLASSIFICATION	4.431035732723792E-5	DESIGN
// TABLE	WITHOUT_CLASSIFICATION	0.9999939920583086	WITHOUT_CLASSIFICATION	6.007941691295645E-6	DESIGN
//tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999894575231589	WITHOUT_CLASSIFICATION	1.0542476841133145E-5	DESIGN
// SORT	WITHOUT_CLASSIFICATION	0.999982690139399	WITHOUT_CLASSIFICATION	1.7309860601049933E-5	DESIGN
// CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9999758225913703	WITHOUT_CLASSIFICATION	2.4177408629750492E-5	DESIGN
// unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999996744600096	WITHOUT_CLASSIFICATION	3.25539990396335E-6	DESIGN
// ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9999773344146397	WITHOUT_CLASSIFICATION	2.2665585360241345E-5	DESIGN
// set up second pass	WITHOUT_CLASSIFICATION	0.9999573188456251	WITHOUT_CLASSIFICATION	4.268115437480314E-5	DESIGN
// an "embedded" component (composite ids and unique) // note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9999132308140594	WITHOUT_CLASSIFICATION	8.676918594069669E-5	DESIGN
// a nested composite element	WITHOUT_CLASSIFICATION	0.999999069469392	WITHOUT_CLASSIFICATION	9.305306079833925E-7	DESIGN
// for an any // we will have to use reflection	WITHOUT_CLASSIFICATION	0.9999915144922352	WITHOUT_CLASSIFICATION	8.485507764724041E-6	DESIGN
//NOTE SPECIAL CASE: // one-to-one constrained=false cannot be proxied, // so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999999816246125	WITHOUT_CLASSIFICATION	1.8375387646348725E-8	DESIGN
// use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999999073987733	WITHOUT_CLASSIFICATION	9.260122666170927E-8	DESIGN
//lazy = !join;	WITHOUT_CLASSIFICATION	0.9999897156677339	WITHOUT_CLASSIFICATION	1.0284332266055246E-5	DESIGN
// GENERATOR	WITHOUT_CLASSIFICATION	0.9999863191410358	WITHOUT_CLASSIFICATION	1.368085896426673E-5	DESIGN
// ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999767057406882	WITHOUT_CLASSIFICATION	2.329425931179071E-5	DESIGN
// VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9999936294044834	WITHOUT_CLASSIFICATION	6.370595516544543E-6	DESIGN
// not necessarily a *unique* property reference	WITHOUT_CLASSIFICATION	0.9998760614932283	WITHOUT_CLASSIFICATION	1.2393850677169745E-4	DESIGN
// ( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() // ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9999631066981016	WITHOUT_CLASSIFICATION	3.689330189830787E-5	DESIGN
// contained elements:	WITHOUT_CLASSIFICATION	0.9999780658711884	WITHOUT_CLASSIFICATION	2.1934128811557368E-5	DESIGN
// for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9998824272718263	WITHOUT_CLASSIFICATION	1.1757272817375033E-4	DESIGN
// Bind the where	WITHOUT_CLASSIFICATION	0.9999689374342379	WITHOUT_CLASSIFICATION	3.106256576212247E-5	DESIGN
// Bind the order-by	WITHOUT_CLASSIFICATION	0.99999460664323	WITHOUT_CLASSIFICATION	5.393356769970179E-6	DESIGN
// Bind the filters	WITHOUT_CLASSIFICATION	0.9999974463604803	WITHOUT_CLASSIFICATION	2.5536395197545995E-6	DESIGN
// overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9999920947135955	WITHOUT_CLASSIFICATION	7.905286404458478E-6	DESIGN
// first, iterate over all elements capable of defining an extends attribute // collecting all found extends references if they cannot be resolved // against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999999995204372	WITHOUT_CLASSIFICATION	4.795629625673344E-10	DESIGN
// mappings might contain either the "raw" extends name (in the case of // an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9981146559806013	WITHOUT_CLASSIFICATION	0.0018853440193986634	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.957209938977993	WITHOUT_CLASSIFICATION	0.04279006102200708	DESIGN
//SessionFactory name:	WITHOUT_CLASSIFICATION	0.9962331145734511	WITHOUT_CLASSIFICATION	0.0037668854265489405	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999569356499717	WITHOUT_CLASSIFICATION	4.306435002835107E-5	DESIGN
//JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9999569356499717	WITHOUT_CLASSIFICATION	4.306435002835107E-5	DESIGN
//Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.999922932629507	WITHOUT_CLASSIFICATION	7.706737049291984E-5	DESIGN
// user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999990252178858	WITHOUT_CLASSIFICATION	9.747821141998574E-6	DESIGN
//use dialect default properties	WITHOUT_CLASSIFICATION	0.9999416843046922	WITHOUT_CLASSIFICATION	5.831569530786786E-5	DESIGN
// Transaction settings:	WITHOUT_CLASSIFICATION	0.9999758493062699	WITHOUT_CLASSIFICATION	2.4150693729986658E-5	DESIGN
//SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9998827247089453	WITHOUT_CLASSIFICATION	1.1727529105461315E-4	DESIGN
//Query parser settings:	WITHOUT_CLASSIFICATION	0.9998001520335413	WITHOUT_CLASSIFICATION	1.998479664586336E-4	DESIGN
// Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998804140458134	WITHOUT_CLASSIFICATION	1.1958595418655537E-4	DESIGN
// The cache provider is needed when we either have second-level cache enabled // or query cache enabled.  Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999991454461375	WITHOUT_CLASSIFICATION	8.54553862491976E-7	DESIGN
//SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9999675904679384	WITHOUT_CLASSIFICATION	3.240953206162334E-5	DESIGN
//Statistics and logging:	WITHOUT_CLASSIFICATION	0.9999683361330349	WITHOUT_CLASSIFICATION	3.166386696500967E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//Schema export:	WITHOUT_CLASSIFICATION	0.9998700135747105	WITHOUT_CLASSIFICATION	1.2998642528943527E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9858961591238014	WITHOUT_CLASSIFICATION	0.014103840876198563	DESIGN
// maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9887068421085362	WITHOUT_CLASSIFICATION	0.011293157891463753	DESIGN
//if dotted and not load-collection nor return-join //regular property	WITHOUT_CLASSIFICATION	0.9999969352709794	WITHOUT_CLASSIFICATION	3.064729020644839E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999958731483473	WITHOUT_CLASSIFICATION	4.126851652675761E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999606546294462	WITHOUT_CLASSIFICATION	3.9345370553700636E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.999971588846489	WITHOUT_CLASSIFICATION	2.8411153511076917E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999779229247875	WITHOUT_CLASSIFICATION	2.2077075212495373E-5	DESIGN
// drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.7899644384848504	WITHOUT_CLASSIFICATION	0.2100355615151495	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9997530083482635	WITHOUT_CLASSIFICATION	2.469916517364253E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998406818601514	WITHOUT_CLASSIFICATION	1.5931813984860642E-4	DESIGN
// found	WITHOUT_CLASSIFICATION	0.9998406818601514	WITHOUT_CLASSIFICATION	1.5931813984860642E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999184575398667	WITHOUT_CLASSIFICATION	8.154246013321003E-5	DESIGN
//<String, String>	WITHOUT_CLASSIFICATION	0.9999184575398667	WITHOUT_CLASSIFICATION	8.154246013321003E-5	DESIGN
//+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.957209938977993	WITHOUT_CLASSIFICATION	0.04279006102200708	DESIGN
//Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9999983129715141	WITHOUT_CLASSIFICATION	1.6870284859278304E-6	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995076778401458	WITHOUT_CLASSIFICATION	4.923221598542175E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999989561540703	WITHOUT_CLASSIFICATION	1.0438459296459123E-6	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998259197299036	WITHOUT_CLASSIFICATION	1.740802700964636E-4	DESIGN
//orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995076778401458	WITHOUT_CLASSIFICATION	4.923221598542175E-4	DESIGN
//element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9999989561540703	WITHOUT_CLASSIFICATION	1.0438459296459123E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947333962423	WITHOUT_CLASSIFICATION	5.2666037576753585E-6	DESIGN
//maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9998886168187437	WITHOUT_CLASSIFICATION	1.113831812562637E-4	DESIGN
// the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9999812754428231	WITHOUT_CLASSIFICATION	1.872455717692189E-5	DESIGN
// the element has changed	WITHOUT_CLASSIFICATION	0.9999916816077559	WITHOUT_CLASSIFICATION	8.318392244103165E-6	DESIGN
//Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9979183582281352	WITHOUT_CLASSIFICATION	0.0020816417718647743	DESIGN
//needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.8111103815833344	WITHOUT_CLASSIFICATION	0.18888961841666568	DESIGN
// override on some subclasses	WITHOUT_CLASSIFICATION	0.9999973196874234	WITHOUT_CLASSIFICATION	2.6803125765630934E-6	DESIGN
//override on some subclasses	WITHOUT_CLASSIFICATION	0.9999777244464393	WITHOUT_CLASSIFICATION	2.2275553560805632E-5	DESIGN
//do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9998753617816569	WITHOUT_CLASSIFICATION	1.2463821834303888E-4	DESIGN
// short-circuit(s) // no new elements, the old list contains only Orphans // no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999999562138678	WITHOUT_CLASSIFICATION	4.378613209974573E-8	DESIGN
// create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9999990684581836	WITHOUT_CLASSIFICATION	9.315418162053939E-7	DESIGN
// collect EntityIdentifier(s) of the *current* elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9998727623589082	WITHOUT_CLASSIFICATION	1.2723764109178888E-4	DESIGN
// iterate over the *old* list	WITHOUT_CLASSIFICATION	0.9999997253516872	WITHOUT_CLASSIFICATION	2.746483127822781E-7	DESIGN
/*(array==null) ? tempList.size() :*/	WITHOUT_CLASSIFICATION	0.9999996225079063	WITHOUT_CLASSIFICATION	3.774920936699963E-7	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998259197299036	WITHOUT_CLASSIFICATION	1.740802700964636E-4	DESIGN
/*(array==null) ? tempList.get(i) :*/	WITHOUT_CLASSIFICATION	0.9999854675824161	WITHOUT_CLASSIFICATION	1.453241758381661E-5	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999950347688348	WITHOUT_CLASSIFICATION	4.965231165223888E-6	DESIGN
//write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9999950347688348	WITHOUT_CLASSIFICATION	4.965231165223888E-6	DESIGN
// amazingly, these two will work because AbstractCollection // uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999854411434895	WITHOUT_CLASSIFICATION	1.4558856510384514E-5	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947333962423	WITHOUT_CLASSIFICATION	5.2666037576753585E-6	DESIGN
// finally, what it's all about...	WITHOUT_CLASSIFICATION	0.99874990238134	WITHOUT_CLASSIFICATION	0.0012500976186600587	DESIGN
// note that if we load this collection from a cartesian product // the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.997198270484165	DESIGN	0.0028017295158349895	WITHOUT_CLASSIFICATION
// Anyway, here we implement <set> semantics for a // <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.9776825421441886	WITHOUT_CLASSIFICATION	0.022317457855811403	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996782806085	WITHOUT_CLASSIFICATION	3.2171939151349817E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9348297009539761	WITHOUT_CLASSIFICATION	0.06517029904602403	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947333962423	WITHOUT_CLASSIFICATION	5.2666037576753585E-6	DESIGN
//a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9999996782806085	WITHOUT_CLASSIFICATION	3.2171939151349817E-7	DESIGN
//search for it //note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9348297009539761	WITHOUT_CLASSIFICATION	0.06517029904602403	DESIGN
/*public boolean equals(Object other) {	WITHOUT_CLASSIFICATION	0.7469593880375716	WITHOUT_CLASSIFICATION	0.25304061196242844	DESIGN
// List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9999999408483643	WITHOUT_CLASSIFICATION	5.9151635568736E-8	DESIGN
//pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999984900163282	WITHOUT_CLASSIFICATION	1.5099836717436603E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947333962423	WITHOUT_CLASSIFICATION	5.2666037576753585E-6	DESIGN
//needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9999947333962423	WITHOUT_CLASSIFICATION	5.2666037576753585E-6	DESIGN
// from Map	WITHOUT_CLASSIFICATION	0.9999786160514338	WITHOUT_CLASSIFICATION	2.138394856613817E-5	DESIGN
// from SortedMap	WITHOUT_CLASSIFICATION	0.9999691729848506	WITHOUT_CLASSIFICATION	3.082701514944748E-5	DESIGN
//inject the data	WITHOUT_CLASSIFICATION	0.9998333489762319	WITHOUT_CLASSIFICATION	1.6665102376815056E-4	DESIGN
// cannot be instantiated	WITHOUT_CLASSIFICATION	0.999977479085427	WITHOUT_CLASSIFICATION	2.2520914572957136E-5	DESIGN
//default pool size 20	WITHOUT_CLASSIFICATION	0.9999953399662957	WITHOUT_CLASSIFICATION	4.660033704210903E-6	DESIGN
// trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999999993390425	WITHOUT_CLASSIFICATION	6.6095749482039935E-9	DESIGN
// if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999999880133372	WITHOUT_CLASSIFICATION	1.1986662804155374E-7	DESIGN
// register a cleanup synch	WITHOUT_CLASSIFICATION	0.9999449038701478	WITHOUT_CLASSIFICATION	5.509612985218453E-5	DESIGN
// wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9999453909148293	WITHOUT_CLASSIFICATION	5.4609085170752184E-5	DESIGN
// then bind it	WITHOUT_CLASSIFICATION	0.9999748610685351	WITHOUT_CLASSIFICATION	2.5138931464956062E-5	DESIGN
// try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9999915535004904	WITHOUT_CLASSIFICATION	8.446499509503537E-6	DESIGN
// allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9999967732690611	WITHOUT_CLASSIFICATION	3.2267309387829513E-6	DESIGN
// limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9999974289593869	WITHOUT_CLASSIFICATION	2.571040613123749E-6	DESIGN
// allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9865544132843446	WITHOUT_CLASSIFICATION	0.013445586715655497	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998864209966	WITHOUT_CLASSIFICATION	1.1357900346519446E-7	DESIGN
// We could register the session against the transaction even though it is // not started, but we'd have no guarentee of ever getting the map // entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999831217192651	WITHOUT_CLASSIFICATION	1.687828073495544E-5	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994882483456443	WITHOUT_CLASSIFICATION	5.117516543556602E-4	DESIGN
//private String propertyName;	WITHOUT_CLASSIFICATION	0.9931739986864633	WITHOUT_CLASSIFICATION	0.006826001313536704	DESIGN
/*public PropertyProjection project() {	WITHOUT_CLASSIFICATION	0.9976865274900115	WITHOUT_CLASSIFICATION	0.0023134725099885505	DESIGN
//String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999991502189391	WITHOUT_CLASSIFICATION	8.497810607980057E-7	DESIGN
//" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999336281492023	WITHOUT_CLASSIFICATION	6.637185079773236E-5	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9981872639542386	WITHOUT_CLASSIFICATION	0.0018127360457613918	DESIGN
//unsupported	WITHOUT_CLASSIFICATION	0.9981872639542386	WITHOUT_CLASSIFICATION	0.0018127360457613918	DESIGN
//cannot be instantiated	WITHOUT_CLASSIFICATION	0.9994882483456443	WITHOUT_CLASSIFICATION	5.117516543556602E-4	DESIGN
//the following two lines were added to ensure that this.params is not null, which //can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9999982694286909	WITHOUT_CLASSIFICATION	1.7305713090653761E-6	DESIGN
//with two-deep subqueries, the same alias would get generated for //both using the old method (criteriaQuery.generateSQLAlias()), so //that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9998784593377508	WITHOUT_CLASSIFICATION	1.2154066224918895E-4	DESIGN
//implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.5342213856662423	WITHOUT_CLASSIFICATION	0.46577861433375767	DESIGN
//pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999954042542725	WITHOUT_CLASSIFICATION	4.59574572748486E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999620379060161	WITHOUT_CLASSIFICATION	3.7962093983970874E-5	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999998016727005	WITHOUT_CLASSIFICATION	1.9832729947869413E-7	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9998266040441041	WITHOUT_CLASSIFICATION	1.733959558959407E-4	DESIGN
// NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9998165578907859	WITHOUT_CLASSIFICATION	1.8344210921414402E-4	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999794977	WITHOUT_CLASSIFICATION	2.05022131752429E-11	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999988723158618	WITHOUT_CLASSIFICATION	1.127684138213645E-6	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999956734303769	WITHOUT_CLASSIFICATION	4.326569623134997E-6	DESIGN
// Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9999690767695645	WITHOUT_CLASSIFICATION	3.0923230435576384E-5	DESIGN
// or BYTE // or TEXT? // or MONEY	WITHOUT_CLASSIFICATION	0.9999481523443524	WITHOUT_CLASSIFICATION	5.18476556476253E-5	DESIGN
// strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999999924861084	WITHOUT_CLASSIFICATION	7.513891643595412E-9	DESIGN
// build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999853321165	WITHOUT_CLASSIFICATION	1.4667883423612086E-8	DESIGN
//pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9992342201789972	WITHOUT_CLASSIFICATION	7.657798210028142E-4	DESIGN
// finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9999978140874831	WITHOUT_CLASSIFICATION	2.1859125168997207E-6	DESIGN
//because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999977098472426	WITHOUT_CLASSIFICATION	2.290152757387177E-6	DESIGN
// constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998754239997005	WITHOUT_CLASSIFICATION	0.0012457600029949511	DESIGN
// standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9986312797149848	WITHOUT_CLASSIFICATION	0.0013687202850152234	DESIGN
//map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9956083855924659	WITHOUT_CLASSIFICATION	0.004391614407534114	DESIGN
// register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9942721694175479	WITHOUT_CLASSIFICATION	0.0057278305824521305	DESIGN
// database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999928540269665	WITHOUT_CLASSIFICATION	7.145973033646806E-6	DESIGN
// hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981757943276964	WITHOUT_CLASSIFICATION	0.001824205672303614	DESIGN
// keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999931487910361	WITHOUT_CLASSIFICATION	6.851208963915417E-6	DESIGN
// native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999869277978243	WITHOUT_CLASSIFICATION	1.307220217559421E-5	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924652208715	WITHOUT_CLASSIFICATION	7.534779128582432E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999320867831737	WITHOUT_CLASSIFICATION	6.791321682633626E-5	DESIGN
// GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998975603750506	WITHOUT_CLASSIFICATION	1.0243962494939838E-4	DESIGN
// limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907840172197	WITHOUT_CLASSIFICATION	9.215982780264398E-6	DESIGN
// by default we report no support	WITHOUT_CLASSIFICATION	0.9999909799675555	WITHOUT_CLASSIFICATION	9.020032444539084E-6	DESIGN
// by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9988694701235399	WITHOUT_CLASSIFICATION	0.0011305298764601936	DESIGN
// table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988950553466	WITHOUT_CLASSIFICATION	1.1049446533401997E-6	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639577755198	WITHOUT_CLASSIFICATION	1.3604222448021107E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495629692501	WITHOUT_CLASSIFICATION	5.043703074988525E-5	DESIGN
// current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997103442219	WITHOUT_CLASSIFICATION	2.896557781734466E-7	DESIGN
// SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999457284326837	WITHOUT_CLASSIFICATION	5.427156731639609E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870668540198	WITHOUT_CLASSIFICATION	1.2933145980198656E-5	DESIGN
// identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999765590757368	WITHOUT_CLASSIFICATION	2.3440924263118097E-5	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878751556239	WITHOUT_CLASSIFICATION	1.212484437599431E-5	DESIGN
// grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999998646530959	WITHOUT_CLASSIFICATION	1.3534690417637491E-7	DESIGN
// Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999917949816031	WITHOUT_CLASSIFICATION	8.205018396881947E-6	DESIGN
// return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9886955841749597	WITHOUT_CLASSIFICATION	0.011304415825040366	DESIGN
// Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9998855130761676	WITHOUT_CLASSIFICATION	1.1448692383252631E-4	DESIGN
// Oracle8 and previous define only a "DATE" type which //      is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9999999140759035	WITHOUT_CLASSIFICATION	8.592409647565494E-8	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998063664663277	WITHOUT_CLASSIFICATION	1.9363353367230038E-4	DESIGN
//" cascade";	WITHOUT_CLASSIFICATION	0.9998998102485067	WITHOUT_CLASSIFICATION	1.0018975149330674E-4	DESIGN
//trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999998960583859	WITHOUT_CLASSIFICATION	1.0394161410683553E-6	DESIGN
/*public boolean dropTemporaryTableAfterUse() {	WITHOUT_CLASSIFICATION	0.5646369695613029	WITHOUT_CLASSIFICATION	0.4353630304386971	DESIGN
// CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9999964927411443	WITHOUT_CLASSIFICATION	3.5072588556647496E-6	DESIGN
// UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9999987522103669	WITHOUT_CLASSIFICATION	1.2477896331517166E-6	DESIGN
// FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9999897554424938	WITHOUT_CLASSIFICATION	1.0244557506075114E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9999561864991978	WITHOUT_CLASSIFICATION	4.381350080221077E-5	DESIGN
// ALL OTHER	WITHOUT_CLASSIFICATION	0.9999951253346817	WITHOUT_CLASSIFICATION	4.874665318402342E-6	DESIGN
// Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9999451681488103	WITHOUT_CLASSIFICATION	5.483185118974706E-5	DESIGN
// seems to not really... //	WITHOUT_CLASSIFICATION	0.9990810202818602	WITHOUT_CLASSIFICATION	9.189797181398432E-4	DESIGN
// seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9996372123002791	WITHOUT_CLASSIFICATION	3.627876997209088E-4	DESIGN
// HHH-2300	WITHOUT_CLASSIFICATION	0.9998898694490526	WITHOUT_CLASSIFICATION	1.1013055094738306E-4	DESIGN
// ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9996257502579331	WITHOUT_CLASSIFICATION	3.742497420669326E-4	DESIGN
// Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924939669999	WITHOUT_CLASSIFICATION	7.50603300015812E-6	DESIGN
// String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999731107983607	WITHOUT_CLASSIFICATION	2.688920163931035E-5	DESIGN
// Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999837479569106	WITHOUT_CLASSIFICATION	1.6252043089498728E-5	DESIGN
// System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999974002247171	WITHOUT_CLASSIFICATION	2.599775282892854E-5	DESIGN
// not null is implicit	WITHOUT_CLASSIFICATION	0.9985793018031139	WITHOUT_CLASSIFICATION	0.0014206981968860432	DESIGN
// 23000: Check constraint violation: {0} // 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999999999306759	WITHOUT_CLASSIFICATION	6.932408950962066E-10	DESIGN
// Display the dialect version.	WITHOUT_CLASSIFICATION	0.9999893531036171	WITHOUT_CLASSIFICATION	1.064689638295808E-5	DESIGN
// The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999999007797269	WITHOUT_CLASSIFICATION	9.922027309511763E-8	DESIGN
// Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971445563157	WITHOUT_CLASSIFICATION	2.855443684255428E-6	DESIGN
// Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9999969160460217	WITHOUT_CLASSIFICATION	3.0839539783874576E-6	DESIGN
// Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9587973912987735	WITHOUT_CLASSIFICATION	0.04120260870122654	DESIGN
// Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9999898670961994	WITHOUT_CLASSIFICATION	1.0132903800574553E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998732449448	WITHOUT_CLASSIFICATION	1.2675505518549732E-7	DESIGN
// *** Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9999727142424998	WITHOUT_CLASSIFICATION	2.7285757500336085E-5	DESIGN
// methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9996726662492613	WITHOUT_CLASSIFICATION	3.273337507386256E-4	DESIGN
// The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9997915725850429	WITHOUT_CLASSIFICATION	2.0842741495708162E-4	DESIGN
// *** Sequence methods - end	WITHOUT_CLASSIFICATION	0.9877051960969429	WITHOUT_CLASSIFICATION	0.01229480390305716	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998063664663277	WITHOUT_CLASSIFICATION	1.9363353367230038E-4	DESIGN
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998870404160164	WITHOUT_CLASSIFICATION	1.1295958398356713E-4	DESIGN
// Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999996878953864	WITHOUT_CLASSIFICATION	3.1210461359714277E-7	DESIGN
// RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9999999175503521	WITHOUT_CLASSIFICATION	8.2449647907581E-8	DESIGN
// RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999646325307511	WITHOUT_CLASSIFICATION	3.536746924898626E-5	DESIGN
// Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9999700104491084	WITHOUT_CLASSIFICATION	2.998955089154795E-5	DESIGN
// function templates	WITHOUT_CLASSIFICATION	0.9999823557879213	WITHOUT_CLASSIFICATION	1.764421207876644E-5	DESIGN
//not null is implicit	WITHOUT_CLASSIFICATION	0.9971670261359408	WITHOUT_CLASSIFICATION	0.0028329738640592976	DESIGN
// this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9714009711265774	WITHOUT_CLASSIFICATION	0.028599028873422496	DESIGN
// HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.999995384291178	WITHOUT_CLASSIFICATION	4.615708822123895E-6	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999979894476506	WITHOUT_CLASSIFICATION	2.0105523493921912E-5	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999874455222218	WITHOUT_CLASSIFICATION	1.2554477778192524E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999551338534406	WITHOUT_CLASSIFICATION	4.486614655946065E-5	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991193618611	WITHOUT_CLASSIFICATION	8.806381389290415E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9829682538939548	WITHOUT_CLASSIFICATION	0.017031746106045197	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// TimesTen has no BLOB/CLOB support, but these types may be suitable  // for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9999987078753723	WITHOUT_CLASSIFICATION	1.2921246277840624E-6	DESIGN
// new methods in dialect3	WITHOUT_CLASSIFICATION	0.9996587070733499	WITHOUT_CLASSIFICATION	3.412929266500657E-4	DESIGN
/*public boolean supportsForUpdateNowait() {	WITHOUT_CLASSIFICATION	0.9993449966042799	WITHOUT_CLASSIFICATION	6.550033957201542E-4	DESIGN
// TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999905764278151	WITHOUT_CLASSIFICATION	9.42357218492102E-6	DESIGN
// iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9999999717438484	WITHOUT_CLASSIFICATION	2.8256151687903534E-8	DESIGN
// add new ordered map	WITHOUT_CLASSIFICATION	0.999999330697568	WITHOUT_CLASSIFICATION	6.69302431950104E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999969202164066	WITHOUT_CLASSIFICATION	3.079783593386808E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997541754572858	WITHOUT_CLASSIFICATION	2.458245427141648E-4	DESIGN
// hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9967776161534121	WITHOUT_CLASSIFICATION	0.0032223838465878407	DESIGN
// IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9999991429045592	WITHOUT_CLASSIFICATION	8.570954408903338E-7	DESIGN
// Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9997977399313009	WITHOUT_CLASSIFICATION	2.0226006869901567E-4	DESIGN
// No batch statements	WITHOUT_CLASSIFICATION	0.9999994822067332	WITHOUT_CLASSIFICATION	5.177932668604735E-7	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8958741317335626	WITHOUT_CLASSIFICATION	0.10412586826643744	DESIGN
//no pointbase BIT	WITHOUT_CLASSIFICATION	0.9999994572705361	WITHOUT_CLASSIFICATION	5.427294638819277E-7	DESIGN
//no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9999994307449179	WITHOUT_CLASSIFICATION	5.692550820719942E-7	DESIGN
// Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999970447403761	WITHOUT_CLASSIFICATION	2.9552596237999147E-6	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998063664663277	WITHOUT_CLASSIFICATION	1.9363353367230038E-4	DESIGN
// The current_timestamp is more accurate, but only known to be supported // in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9986659639182606	WITHOUT_CLASSIFICATION	0.001334036081739492	DESIGN
// SQL Server (at least up through 2005) does not support defining // cascade delete constraints which can circel back to the mutating // table	WITHOUT_CLASSIFICATION	0.9999999377065263	WITHOUT_CLASSIFICATION	6.22934738214959E-8	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9947977741749363	WITHOUT_CLASSIFICATION	0.005202225825063712	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998063664663277	WITHOUT_CLASSIFICATION	1.9363353367230038E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999943461982815	WITHOUT_CLASSIFICATION	5.653801718404614E-6	DESIGN
// sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9999969202164066	WITHOUT_CLASSIFICATION	3.079783593386808E-6	DESIGN
//Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9993830871617713	WITHOUT_CLASSIFICATION	6.169128382287591E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9915347565848337	WITHOUT_CLASSIFICATION	0.008465243415166268	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.7105301882210967	WITHOUT_CLASSIFICATION	0.28946981177890324	DESIGN
// Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.999979894476506	WITHOUT_CLASSIFICATION	2.0105523493921912E-5	DESIGN
// Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999874455222218	WITHOUT_CLASSIFICATION	1.2554477778192524E-4	DESIGN
// Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9999551338534406	WITHOUT_CLASSIFICATION	4.486614655946065E-5	DESIGN
// add another (inner) nested select // add the main query // close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999999994698803	WITHOUT_CLASSIFICATION	5.301196929525237E-10	DESIGN
// add the main query	WITHOUT_CLASSIFICATION	0.9999862674096898	WITHOUT_CLASSIFICATION	1.37325903101343E-5	DESIGN
//add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999996846545639	WITHOUT_CLASSIFICATION	3.1534543611231947E-7	DESIGN
// This assumes you will want to ignore any update counts 	WITHOUT_CLASSIFICATION	0.9999999919118029	WITHOUT_CLASSIFICATION	8.08819710243886E-9	DESIGN
// You may still have other ResultSets or update counts left to process here  // but you can't do it now or the ResultSet you just got will be closed 	WITHOUT_CLASSIFICATION	0.9999999968324399	WITHOUT_CLASSIFICATION	3.167560024903506E-9	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
//starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9998063664663277	WITHOUT_CLASSIFICATION	1.9363353367230038E-4	DESIGN
// simple nullability constraint	WITHOUT_CLASSIFICATION	0.9999991193618611	WITHOUT_CLASSIFICATION	8.806381389290415E-7	DESIGN
// not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9829682538939548	WITHOUT_CLASSIFICATION	0.017031746106045197	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999176111749362	WITHOUT_CLASSIFICATION	8.238882506385269E-5	DESIGN
// features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997895133224	WITHOUT_CLASSIFICATION	2.1048667764900254E-7	DESIGN
// binary %Stream // character %Stream	WITHOUT_CLASSIFICATION	0.9999999910525399	WITHOUT_CLASSIFICATION	8.947460083616504E-9	DESIGN
//getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9999992900476319	WITHOUT_CLASSIFICATION	7.099523681722879E-7	DESIGN
// hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9982889165740233	WITHOUT_CLASSIFICATION	0.001711083425976711	DESIGN
// aggregate functions shouldn't be registered, right? //registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); // stopped on $list	WITHOUT_CLASSIFICATION	0.9830823659609597	WITHOUT_CLASSIFICATION	0.016917634039040372	DESIGN
// DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999878751556239	WITHOUT_CLASSIFICATION	1.212484437599431E-5	DESIGN
// below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9985441638271115	WITHOUT_CLASSIFICATION	0.0014558361728884697	DESIGN
// note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9997246399519939	WITHOUT_CLASSIFICATION	2.753600480060567E-4	DESIGN
// %upper is deprecated	WITHOUT_CLASSIFICATION	0.9996071825973581	WITHOUT_CLASSIFICATION	3.928174026417899E-4	DESIGN
// The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9999999014595667	WITHOUT_CLASSIFICATION	9.854043326370051E-8	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.99999994884655	WITHOUT_CLASSIFICATION	5.1153450082145566E-8	DESIGN
// IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999924652208715	WITHOUT_CLASSIFICATION	7.534779128582432E-6	DESIGN
// SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999320867831737	WITHOUT_CLASSIFICATION	6.791321682633626E-5	DESIGN
// temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998639577755198	WITHOUT_CLASSIFICATION	1.3604222448021107E-4	DESIGN
// identifier-commalist	WITHOUT_CLASSIFICATION	0.99999994884655	WITHOUT_CLASSIFICATION	5.1153450082145566E-8	DESIGN
// The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9999856909499378	WITHOUT_CLASSIFICATION	1.4309050062167397E-5	DESIGN
// Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9999975527097128	WITHOUT_CLASSIFICATION	2.4472902871396316E-6	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999180999178935	WITHOUT_CLASSIFICATION	8.190008210653466E-5	DESIGN
// LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976622353721	WITHOUT_CLASSIFICATION	2.337764627861267E-6	DESIGN
// InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... // Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9999438906939956	WITHOUT_CLASSIFICATION	5.6109306004517096E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
/*<String>*/	WITHOUT_CLASSIFICATION	0.9993595755002463	WITHOUT_CLASSIFICATION	6.404244997536049E-4	DESIGN
// callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999495629692501	WITHOUT_CLASSIFICATION	5.043703074988525E-5	DESIGN
// miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999870668540198	WITHOUT_CLASSIFICATION	1.2933145980198656E-5	DESIGN
// The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9999998732449448	WITHOUT_CLASSIFICATION	1.2675505518549732E-7	DESIGN
// Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9991887469656648	WITHOUT_CLASSIFICATION	8.11253034335044E-4	DESIGN
// Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9987196606337964	WITHOUT_CLASSIFICATION	0.0012803393662036717	DESIGN
// The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999998953792895	WITHOUT_CLASSIFICATION	1.046207105194692E-7	DESIGN
// Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9999931597655847	WITHOUT_CLASSIFICATION	6.840234415340641E-6	DESIGN
// The keyword used to insert a row without specifying // any column values	WITHOUT_CLASSIFICATION	0.9999999942233527	WITHOUT_CLASSIFICATION	5.776647264038554E-9	DESIGN
//registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9999996863683234	WITHOUT_CLASSIFICATION	3.1363167656015663E-7	DESIGN
//skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9999770213816622	WITHOUT_CLASSIFICATION	2.2978618337865423E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
// potentialTrimCharacterArgIndex = 1 assumes that a // trim-specification has been specified.  we handle the // exception to that explicitly	WITHOUT_CLASSIFICATION	0.9999999999794977	WITHOUT_CLASSIFICATION	2.05022131752429E-11	DESIGN
// SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9999949407286953	WITHOUT_CLASSIFICATION	5.059271304628153E-6	DESIGN
// conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.999950148605386	WITHOUT_CLASSIFICATION	4.9851394614069395E-5	DESIGN
// register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999936587938609	WITHOUT_CLASSIFICATION	6.341206139118273E-6	DESIGN
// register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9999956434912007	WITHOUT_CLASSIFICATION	4.3565087993045515E-6	DESIGN
// kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999978635960148	WITHOUT_CLASSIFICATION	2.1364039852128415E-6	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997630751695231	WITHOUT_CLASSIFICATION	2.3692483047678644E-4	DESIGN
// the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907623652774	WITHOUT_CLASSIFICATION	9.237634722594023E-6	DESIGN
// the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907291582697	WITHOUT_CLASSIFICATION	9.270841730325058E-6	DESIGN
// delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999993612598036	WITHOUT_CLASSIFICATION	6.387401964286124E-7	DESIGN
// orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9996300541178524	WITHOUT_CLASSIFICATION	3.6994588214747247E-4	DESIGN
/*(LockMode) anything*/	WITHOUT_CLASSIFICATION	0.9998364651967415	WITHOUT_CLASSIFICATION	1.63534803258404E-4	DESIGN
// lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999949284677453	WITHOUT_CLASSIFICATION	5.071532254657374E-6	DESIGN
// refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999999646506416	WITHOUT_CLASSIFICATION	3.534935839709176E-7	DESIGN
// evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999989860840337	WITHOUT_CLASSIFICATION	1.0139159662481504E-6	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998483062729	WITHOUT_CLASSIFICATION	1.5169372715253824E-7	DESIGN
// orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.999974462802506	WITHOUT_CLASSIFICATION	2.553719749388909E-5	DESIGN
// for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9999942235139543	WITHOUT_CLASSIFICATION	5.776486045704567E-6	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997384529645	WITHOUT_CLASSIFICATION	2.615470354620509E-7	DESIGN
//a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9998694563940262	WITHOUT_CLASSIFICATION	1.3054360597382925E-4	DESIGN
// replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999759055054853	WITHOUT_CLASSIFICATION	2.4094494514580462E-5	DESIGN
// static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999621201211559	WITHOUT_CLASSIFICATION	3.787987884400242E-5	DESIGN
// handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9531236349296217	WITHOUT_CLASSIFICATION	0.04687636507037832	DESIGN
// Actually the semantics of the next three are really "Bag" // Note that, unlike objects, collection insertions, updates, // deletions are not really remembered between flushes. We // just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9999999893147743	WITHOUT_CLASSIFICATION	1.0685225634274583E-8	DESIGN
// Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9999957407096725	WITHOUT_CLASSIFICATION	4.259290327475088E-6	DESIGN
// continue loop	WITHOUT_CLASSIFICATION	0.999997571316746	WITHOUT_CLASSIFICATION	2.428683254036064E-6	DESIGN
//sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999415429252453	WITHOUT_CLASSIFICATION	5.8457074754628214E-5	DESIGN
//sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999507501559208	WITHOUT_CLASSIFICATION	4.924984407909293E-5	DESIGN
// the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999994830658375	WITHOUT_CLASSIFICATION	5.169341625785472E-7	DESIGN
// the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999999882324589	WITHOUT_CLASSIFICATION	1.1767541085789101E-7	DESIGN
//optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9998596828948065	WITHOUT_CLASSIFICATION	1.4031710519352153E-4	DESIGN
// the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999873188419951	WITHOUT_CLASSIFICATION	1.2681158004846551E-5	DESIGN
// remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996646622300921	WITHOUT_CLASSIFICATION	3.3533776990781166E-4	DESIGN
// the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9993510843479545	WITHOUT_CLASSIFICATION	6.48915652045449E-4	DESIGN
// There is already an existing batch for this type of entity. // Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9999974486064767	WITHOUT_CLASSIFICATION	2.5513935232633478E-6	DESIGN
// now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9999789703108649	WITHOUT_CLASSIFICATION	2.1029689135061165E-5	DESIGN
// the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9999911813085369	WITHOUT_CLASSIFICATION	8.818691463062864E-6	DESIGN
// loop through all the associations of the current entity and make sure that they are processed // before the current batch number	WITHOUT_CLASSIFICATION	0.9999998799223675	WITHOUT_CLASSIFICATION	1.2007763260666746E-7	DESIGN
// find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9965506935145253	WITHOUT_CLASSIFICATION	0.0034493064854746874	DESIGN
// create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999980847264885	WITHOUT_CLASSIFICATION	1.9152735114843193E-6	DESIGN
// loop through all the associated entities and make sure they have been // processed before the latest // batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9999997877258027	WITHOUT_CLASSIFICATION	2.1227419738124345E-7	DESIGN
// since this entity will now be processed in the latest possible batch, // we can be assured that it will come after all other associations, // there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9989028550736669	WITHOUT_CLASSIFICATION	0.0010971449263331374	DESIGN
//cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999731021937498	WITHOUT_CLASSIFICATION	2.6897806250221717E-5	DESIGN
//not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.6332710998691916	WITHOUT_CLASSIFICATION	0.3667289001308083	DESIGN
// we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9999996374881417	WITHOUT_CLASSIFICATION	3.625118582495594E-7	DESIGN
//a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9950633572546493	WITHOUT_CLASSIFICATION	0.004936642745350618	DESIGN
// handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9977347368749001	WITHOUT_CLASSIFICATION	0.0022652631250998675	DESIGN
// Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9999946834394263	WITHOUT_CLASSIFICATION	5.316560573753947E-6	DESIGN
// Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9999998182627129	WITHOUT_CLASSIFICATION	1.8173728716559813E-7	DESIGN
// Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9999998505019376	WITHOUT_CLASSIFICATION	1.494980623635958E-7	DESIGN
// Snapshots of current database state for entities // that have *not* been loaded	WITHOUT_CLASSIFICATION	0.99999707817772	WITHOUT_CLASSIFICATION	2.9218222800173426E-6	DESIGN
// Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.999969847250464	WITHOUT_CLASSIFICATION	3.015274953606489E-5	DESIGN
// Collection wrappers, by the CollectionKey //key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9999994552522441	WITHOUT_CLASSIFICATION	5.447477558274016E-7	DESIGN
// Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9999897457199555	WITHOUT_CLASSIFICATION	1.0254280044543712E-5	DESIGN
// properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9999999989180388	WITHOUT_CLASSIFICATION	1.081961275679537E-9	DESIGN
// A list of collection wrappers that were instantiating during result set // processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9999999986246253	WITHOUT_CLASSIFICATION	1.375374714372742E-9	DESIGN
// A container for collections we load up when the owning entity is not // yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9995996826360969	WITHOUT_CLASSIFICATION	4.0031736390319243E-4	DESIGN
// Downgrade locks	WITHOUT_CLASSIFICATION	0.9988407136283041	WITHOUT_CLASSIFICATION	0.0011592863716960273	DESIGN
// any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999336745166096	WITHOUT_CLASSIFICATION	6.632548339035086E-5	DESIGN
//unwrap the object	WITHOUT_CLASSIFICATION	0.999923209504579	WITHOUT_CLASSIFICATION	7.679049542095921E-5	DESIGN
//initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999987739199133	WITHOUT_CLASSIFICATION	1.2260800866231818E-6	DESIGN
//return the proxied object	WITHOUT_CLASSIFICATION	0.9992668094548205	WITHOUT_CLASSIFICATION	7.331905451795559E-4	DESIGN
//overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999925067112415	WITHOUT_CLASSIFICATION	7.493288758504061E-6	DESIGN
// early exit...	WITHOUT_CLASSIFICATION	0.9995184551306676	WITHOUT_CLASSIFICATION	4.815448693324749E-4	DESIGN
// or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.7478118081741356	WITHOUT_CLASSIFICATION	0.2521881918258645	DESIGN
//treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9996910461800265	WITHOUT_CLASSIFICATION	3.08953819973588E-4	DESIGN
//do this work only at the very highest level of the load //don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.6445853078209521	DESIGN	0.35541469217904803	WITHOUT_CLASSIFICATION
//note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999999443152485	WITHOUT_CLASSIFICATION	5.568475150073843E-8	DESIGN
//it might be an unwrapped collection reference! //try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9518885388089406	WITHOUT_CLASSIFICATION	0.04811146119105936	DESIGN
/*public boolean isNonExistant(EntityKey key) {	WITHOUT_CLASSIFICATION	0.9987447137162389	WITHOUT_CLASSIFICATION	0.0012552862837611229	DESIGN
/*public boolean isNonExistant(EntityUniqueKey key) {	WITHOUT_CLASSIFICATION	0.9973964707556197	WITHOUT_CLASSIFICATION	0.0026035292443803183	DESIGN
// iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9985308185568336	WITHOUT_CLASSIFICATION	0.001469181443166523	DESIGN
// does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9999844102865588	WITHOUT_CLASSIFICATION	1.5589713441192455E-5	DESIGN
//check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9999281003023892	WITHOUT_CLASSIFICATION	7.189969761081502E-5	DESIGN
// otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999998647091942	WITHOUT_CLASSIFICATION	1.3529080581230399E-7	DESIGN
// adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9999975798183283	WITHOUT_CLASSIFICATION	2.420181671657205E-6	DESIGN
//bad cast	WITHOUT_CLASSIFICATION	0.9998926729783799	WITHOUT_CLASSIFICATION	1.0732702162003796E-4	DESIGN
//return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9999750586451601	WITHOUT_CLASSIFICATION	2.4941354839960824E-5	DESIGN
//property-refs for associations defined on a //component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9999965351299165	WITHOUT_CLASSIFICATION	3.4648700834568193E-6	DESIGN
//if there is no property-ref, assume the join //is to the subclass table (ie. the table of the //subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999999441643771	WITHOUT_CLASSIFICATION	5.5835622877156115E-8	DESIGN
//handle a property-ref	WITHOUT_CLASSIFICATION	0.9999521701345123	WITHOUT_CLASSIFICATION	4.782986548770402E-5	DESIGN
/*NativeSQLQueryReturn*/	WITHOUT_CLASSIFICATION	0.9997576663651626	WITHOUT_CLASSIFICATION	2.42333634837423E-4	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999379358355406	WITHOUT_CLASSIFICATION	6.206416445946245E-5	DESIGN
// why is all others non final ?	WITHOUT_CLASSIFICATION	0.9882695519404591	WITHOUT_CLASSIFICATION	0.011730448059540936	DESIGN
//this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9999998358954474	WITHOUT_CLASSIFICATION	1.6410455268462972E-7	DESIGN
// HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9998784892646209	WITHOUT_CLASSIFICATION	1.215107353791449E-4	DESIGN
/*return that.type.equals(type) && 	WITHOUT_CLASSIFICATION	0.9995472732716194	WITHOUT_CLASSIFICATION	4.5272672838059144E-4	DESIGN
//Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9998082591190286	WITHOUT_CLASSIFICATION	1.9174088097132606E-4	DESIGN
//take a snapshot	WITHOUT_CLASSIFICATION	0.9995653750384925	WITHOUT_CLASSIFICATION	4.3462496150749975E-4	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9995652933754736	WITHOUT_CLASSIFICATION	4.347066245263362E-4	DESIGN
// the owning entity may have been deleted and its identifier unset due to // identifier-rollback; in which case, try to look up its identifier from // the persistence context	WITHOUT_CLASSIFICATION	0.9999990220165635	WITHOUT_CLASSIFICATION	9.779834364611356E-7	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998701170612899	WITHOUT_CLASSIFICATION	1.2988293871013816E-4	DESIGN
// We've been here before	WITHOUT_CLASSIFICATION	0.9998920553586899	WITHOUT_CLASSIFICATION	1.0794464131010772E-4	DESIGN
// it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.99998983158128	WITHOUT_CLASSIFICATION	1.016841871999125E-5	DESIGN
// do the work	WITHOUT_CLASSIFICATION	0.9998701170612899	WITHOUT_CLASSIFICATION	1.2988293871013816E-4	DESIGN
// if either its role changed,	WITHOUT_CLASSIFICATION	0.9999986663111531	WITHOUT_CLASSIFICATION	1.3336888469522239E-6	DESIGN
// or its key changed	WITHOUT_CLASSIFICATION	0.9999972114780927	WITHOUT_CLASSIFICATION	2.7885219072847285E-6	DESIGN
// we will need to create new entries	WITHOUT_CLASSIFICATION	0.9999969469784137	WITHOUT_CLASSIFICATION	3.0530215862914615E-6	DESIGN
// we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9999912653513934	WITHOUT_CLASSIFICATION	8.734648606696836E-6	DESIGN
// force initialize!	WITHOUT_CLASSIFICATION	0.9999998118430937	WITHOUT_CLASSIFICATION	1.8815690629571094E-7	DESIGN
// else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999993490228121	WITHOUT_CLASSIFICATION	6.509771878738008E-7	DESIGN
//ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9990478715747533	WITHOUT_CLASSIFICATION	9.521284252467583E-4	DESIGN
// session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.999998968931034	WITHOUT_CLASSIFICATION	1.0310689659693868E-6	DESIGN
// allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9997009542029792	WITHOUT_CLASSIFICATION	2.9904579702081275E-4	DESIGN
// ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9999152181959884	WITHOUT_CLASSIFICATION	8.478180401166099E-5	DESIGN
// "current" means the reference that was found during flush() 	WITHOUT_CLASSIFICATION	0.999995590314886	WITHOUT_CLASSIFICATION	4.409685113972434E-6	DESIGN
// "loaded" means the reference that is consistent  // with the current database state	WITHOUT_CLASSIFICATION	0.9999956219973106	WITHOUT_CLASSIFICATION	4.378002689354498E-6	DESIGN
// during flush, we navigate the object graph to // collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9996502700880746	WITHOUT_CLASSIFICATION	3.49729911925369E-4	DESIGN
// if we instantiate a collection during the flush() process, // we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999999988083083	WITHOUT_CLASSIFICATION	1.1916917472765974E-9	DESIGN
// new collections that get found + wrapped // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999802233982675	WITHOUT_CLASSIFICATION	1.9776601732412255E-5	DESIGN
//a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9946469987011458	WITHOUT_CLASSIFICATION	0.0053530012988542396	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9989603054579459	WITHOUT_CLASSIFICATION	0.001039694542054145	DESIGN
//collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9989603054579459	WITHOUT_CLASSIFICATION	0.001039694542054145	DESIGN
// detached collections that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999999918784136	WITHOUT_CLASSIFICATION	8.12158640618966E-8	DESIGN
//optimization	WITHOUT_CLASSIFICATION	0.9999895656052773	WITHOUT_CLASSIFICATION	1.0434394722762648E-5	DESIGN
//optimization //optimization	WITHOUT_CLASSIFICATION	0.9999994294420302	WITHOUT_CLASSIFICATION	5.705579698414806E-7	DESIGN
//re-snapshot	WITHOUT_CLASSIFICATION	0.9992872882690823	WITHOUT_CLASSIFICATION	7.127117309177033E-4	DESIGN
// for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9999990597081044	WITHOUT_CLASSIFICATION	9.402918955449137E-7	DESIGN
//NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.8786843136954883	WITHOUT_CLASSIFICATION	0.12131568630451162	DESIGN
//memory optimization	WITHOUT_CLASSIFICATION	0.9999985857294065	WITHOUT_CLASSIFICATION	1.4142705934599193E-6	DESIGN
// use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9999503896108017	WITHOUT_CLASSIFICATION	4.961038919836046E-5	DESIGN
// copied from Session:	WITHOUT_CLASSIFICATION	0.9998111184798892	WITHOUT_CLASSIFICATION	1.8888152011078952E-4	DESIGN
// this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9993188899857746	WITHOUT_CLASSIFICATION	6.811100142253734E-4	DESIGN
// JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it // can put the where clause fragment in the right place in the SQL AST.   'hasFilterCondition' keeps track // of that fact.	WITHOUT_CLASSIFICATION	0.9991584468232283	WITHOUT_CLASSIFICATION	8.415531767715877E-4	DESIGN
// the current join represents the join between a many-to-many association table // and its "target" table.  Here we need to apply any additional filters // defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999721720457504	WITHOUT_CLASSIFICATION	2.7827954249605657E-5	DESIGN
//check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9994193557685727	WITHOUT_CLASSIFICATION	5.806442314274074E-4	DESIGN
//values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.995485530942439	WITHOUT_CLASSIFICATION	0.004514469057561051	DESIGN
//for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998919012577966	WITHOUT_CLASSIFICATION	1.0809874220335206E-4	DESIGN
//cache the hashcode	WITHOUT_CLASSIFICATION	0.9997630751695231	WITHOUT_CLASSIFICATION	2.3692483047678644E-4	DESIGN
//persistent collections may have components	WITHOUT_CLASSIFICATION	0.9999976904475925	WITHOUT_CLASSIFICATION	2.309552407587106E-6	DESIGN
//check for all components values in the collection	WITHOUT_CLASSIFICATION	0.99999922996086	WITHOUT_CLASSIFICATION	7.70039139964179E-7	DESIGN
/* will check current level if some of them are not null	WITHOUT_CLASSIFICATION	0.9999863474483662	WITHOUT_CLASSIFICATION	1.3652551633689566E-5	DESIGN
//do the test	WITHOUT_CLASSIFICATION	0.9999963920337418	WITHOUT_CLASSIFICATION	3.6079662581511926E-6	DESIGN
// if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999990755623573	WITHOUT_CLASSIFICATION	9.244376426806142E-7	DESIGN
//unwrap it	WITHOUT_CLASSIFICATION	0.9999359765984551	WITHOUT_CLASSIFICATION	6.402340154490954E-5	DESIGN
// See if the entity is already bound to this session, if not look at the // entity identifier and assume that the entity is persistent if the // id is not "unsaved" (that is, we rely on foreign keys to keep // database integrity)	WITHOUT_CLASSIFICATION	0.9999959020254257	WITHOUT_CLASSIFICATION	4.097974574357443E-6	DESIGN
// an unfetched association can only point to // an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999999056047243	WITHOUT_CLASSIFICATION	9.439527574570349E-8	DESIGN
// let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999994644595938	WITHOUT_CLASSIFICATION	5.355404062174456E-7	DESIGN
// let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9999720235883792	WITHOUT_CLASSIFICATION	2.7976411620726004E-5	DESIGN
// we use the assumed value, if there is one, to avoid hitting // the database	WITHOUT_CLASSIFICATION	0.9999999891473236	WITHOUT_CLASSIFICATION	1.0852676415932449E-8	DESIGN
// hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9633420840194366	WITHOUT_CLASSIFICATION	0.036657915980563456	DESIGN
// context-entity-identifier returns null explicitly if the entity // is not associated with the persistence context; so make some // deeper checks...	WITHOUT_CLASSIFICATION	0.9982316208671401	WITHOUT_CLASSIFICATION	0.0017683791328598714	DESIGN
//int count = 0;	WITHOUT_CLASSIFICATION	0.9999665930978549	WITHOUT_CLASSIFICATION	3.3406902145211967E-5	DESIGN
//the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999956812383516	WITHOUT_CLASSIFICATION	4.318761648386656E-6	DESIGN
//checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9999695273882944	WITHOUT_CLASSIFICATION	3.0472611705692124E-5	DESIGN
//count++;	WITHOUT_CLASSIFICATION	0.9988496335668974	WITHOUT_CLASSIFICATION	0.0011503664331026038	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999568624545165	WITHOUT_CLASSIFICATION	4.3137545483550396E-5	DESIGN
//we ran out of keys to try	WITHOUT_CLASSIFICATION	0.99916301451407	WITHOUT_CLASSIFICATION	8.369854859301202E-4	DESIGN
//first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.999997946251998	WITHOUT_CLASSIFICATION	2.0537480019394712E-6	DESIGN
//the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999961951887422	WITHOUT_CLASSIFICATION	3.80481125790209E-6	DESIGN
//we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9985458354355882	WITHOUT_CLASSIFICATION	0.001454164564411871	DESIGN
// look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9999999481825793	WITHOUT_CLASSIFICATION	5.1817420785195666E-8	DESIGN
// ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999959973802438	WITHOUT_CLASSIFICATION	4.002619756154764E-6	DESIGN
// initialize this collection	WITHOUT_CLASSIFICATION	0.9998944845474953	WITHOUT_CLASSIFICATION	1.0551545250466882E-4	DESIGN
// create one	WITHOUT_CLASSIFICATION	0.9999990039641868	WITHOUT_CLASSIFICATION	9.960358131854774E-7	DESIGN
// warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9999926097230114	WITHOUT_CLASSIFICATION	7.390276988581875E-6	DESIGN
// there were no queued additions // and the role has a cache	WITHOUT_CLASSIFICATION	0.9999935054102435	WITHOUT_CLASSIFICATION	6.494589756491424E-6	DESIGN
// and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9999996776735902	WITHOUT_CLASSIFICATION	3.2232640982982267E-7	DESIGN
// some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9999953840585305	WITHOUT_CLASSIFICATION	4.615941469458905E-6	DESIGN
// cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301712550326	WITHOUT_CLASSIFICATION	3.6982874496734616E-4	DESIGN
// loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998936586247	WITHOUT_CLASSIFICATION	1.0634137526439647E-7	DESIGN
// Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999988737068999	WITHOUT_CLASSIFICATION	1.12629310014805E-6	DESIGN
// simple cache of param metadata based on query string.  Ideally, the // original "user-supplied query" string should be used to retreive this // metadata (i.e., not the para-list-expanded query string) to avoid // unnecessary cache entries. // Used solely for caching param metadata for native-sql queries, see // getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.553036423937778	DESIGN	0.44696357606222215	WITHOUT_CLASSIFICATION
// the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9999941728963295	WITHOUT_CLASSIFICATION	5.8271036704624246E-6	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999446704775	WITHOUT_CLASSIFICATION	5.532952244633628E-8	DESIGN
// for native-sql queries, the param metadata is determined outside // any relation to a query plan, because query plan creation and/or // retreival for a native-sql query depends on all of the return // types having been set, which might not be the case up-front when // param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9997943029002195	WITHOUT_CLASSIFICATION	2.0569709978053254E-4	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9997842817500102	WITHOUT_CLASSIFICATION	2.1571824998987908E-4	DESIGN
// Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999308833335957	WITHOUT_CLASSIFICATION	6.911666640426853E-5	DESIGN
// don't care...	WITHOUT_CLASSIFICATION	0.9997842817500102	WITHOUT_CLASSIFICATION	2.1571824998987908E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998673731755582	WITHOUT_CLASSIFICATION	1.3262682444171764E-4	DESIGN
// break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999915650214334	WITHOUT_CLASSIFICATION	8.434978566576247E-6	DESIGN
// named parameter	WITHOUT_CLASSIFICATION	0.9979809962441621	WITHOUT_CLASSIFICATION	0.002019003755837895	DESIGN
// could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9994869895740283	WITHOUT_CLASSIFICATION	5.130104259717155E-4	DESIGN
// a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9999118299743216	WITHOUT_CLASSIFICATION	8.817002567847213E-5	DESIGN
// make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9999655006649053	WITHOUT_CLASSIFICATION	3.449933509469232E-5	DESIGN
// pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9999998727402851	WITHOUT_CLASSIFICATION	1.2725971481115942E-7	DESIGN
// perform the actual work	WITHOUT_CLASSIFICATION	0.999998096380317	WITHOUT_CLASSIFICATION	1.9036196829958381E-6	DESIGN
// if everything went ok, commit the transaction and close the obtained // connection handle...	WITHOUT_CLASSIFICATION	0.9999966285003318	WITHOUT_CLASSIFICATION	3.3714996683322905E-6	DESIGN
// at some point the processing went bad, so we need to: //      1) make sure the connection handle gets released //      2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9999864110207722	WITHOUT_CLASSIFICATION	1.3588979227699257E-5	DESIGN
// finally handle the exception	WITHOUT_CLASSIFICATION	0.9999732457573506	WITHOUT_CLASSIFICATION	2.6754242649492037E-5	DESIGN
// a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9931991984078528	WITHOUT_CLASSIFICATION	0.006800801592147279	DESIGN
//saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9999987859960517	WITHOUT_CLASSIFICATION	1.2140039482799044E-6	DESIGN
// collectionPersister should not be null, but we don't want to throw // an exception if it is null	WITHOUT_CLASSIFICATION	0.9998744006589871	WITHOUT_CLASSIFICATION	1.2559934101277176E-4	DESIGN
// otherwise a null or brand new collection // this will also (inefficiently) handle arrays, which // have no snapshot, so we can't do any better //processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9969593528093043	WITHOUT_CLASSIFICATION	0.003040647190695776	DESIGN
// a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9996311218198843	WITHOUT_CLASSIFICATION	3.6887818011559166E-4	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999960210288068	WITHOUT_CLASSIFICATION	3.978971193189939E-6	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999960210288068	WITHOUT_CLASSIFICATION	3.978971193189939E-6	DESIGN
//Force a substitution!	WITHOUT_CLASSIFICATION	0.9991277463226537	WITHOUT_CLASSIFICATION	8.722536773464272E-4	DESIGN
// The user requested a "greater" (i.e. more restrictive) form of // pessimistic lock	WITHOUT_CLASSIFICATION	0.9999999105022027	WITHOUT_CLASSIFICATION	8.9497797324895E-8	DESIGN
// the database now holds a lock + the object is flushed from the cache, // so release the soft lock	WITHOUT_CLASSIFICATION	0.9999999203064193	WITHOUT_CLASSIFICATION	7.969358070855975E-8	DESIGN
// now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999998000805426	WITHOUT_CLASSIFICATION	1.9991945736533293E-7	DESIGN
// Search for collections by reachability, updating their role. // We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9978245670545852	WITHOUT_CLASSIFICATION	0.002175432945414899	DESIGN
// this is a situation where the entity id is assigned by a post-insert generator // and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9999957484635196	WITHOUT_CLASSIFICATION	4.251536480469735E-6	DESIGN
// NOTE: we need to do the wrap here even if its not "dirty", // because collections need wrapping but changes to _them_ // don't dirty the container. Also, for versioned data, we // need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9960260914041442	WITHOUT_CLASSIFICATION	0.003973908595855802	DESIGN
//grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9999205135389123	WITHOUT_CLASSIFICATION	7.948646108774915E-5	DESIGN
// grab its current state	WITHOUT_CLASSIFICATION	0.9999988511425669	WITHOUT_CLASSIFICATION	1.1488574330047552E-6	DESIGN
// schedule the update // note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999999903611945	WITHOUT_CLASSIFICATION	9.638805611592377E-9	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999918005379834	WITHOUT_CLASSIFICATION	8.199462016564523E-6	DESIGN
// give the Interceptor a chance to process property values, if the properties // were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999955354597291	WITHOUT_CLASSIFICATION	4.464540270889747E-6	DESIGN
// compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999999836979091	WITHOUT_CLASSIFICATION	1.6302090895342815E-8	DESIGN
// if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9999984314020817	WITHOUT_CLASSIFICATION	1.568597918292847E-6	DESIGN
// increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9974946267510074	WITHOUT_CLASSIFICATION	0.002505373248992498	DESIGN
// check nullability but do not perform command execute // we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9999957944552693	WITHOUT_CLASSIFICATION	4.205544730707335E-6	DESIGN
//give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9994573657850113	WITHOUT_CLASSIFICATION	5.426342149886571E-4	DESIGN
//now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9844851336735331	WITHOUT_CLASSIFICATION	0.015514866326467064	DESIGN
//use the current version	WITHOUT_CLASSIFICATION	0.9999662039371687	WITHOUT_CLASSIFICATION	3.379606283134307E-5	DESIGN
// Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999999555872094	WITHOUT_CLASSIFICATION	4.4412790534253764E-8	DESIGN
// object loaded by update()	WITHOUT_CLASSIFICATION	0.9999999001788178	WITHOUT_CLASSIFICATION	9.982118224187467E-8	DESIGN
// dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999989987606422	WITHOUT_CLASSIFICATION	1.0012393576798856E-6	DESIGN
// dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999522530506149	WITHOUT_CLASSIFICATION	4.7746949385185525E-5	DESIGN
// the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9999959164948513	WITHOUT_CLASSIFICATION	4.0835051486632365E-6	DESIGN
//even process null collections	WITHOUT_CLASSIFICATION	0.9999958235867424	WITHOUT_CLASSIFICATION	4.176413257628677E-6	DESIGN
// get the id from the object	WITHOUT_CLASSIFICATION	0.9999814354925586	WITHOUT_CLASSIFICATION	1.8564507441399776E-5	DESIGN
//always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9999716419294142	WITHOUT_CLASSIFICATION	2.8358070585652302E-5	DESIGN
//what is the version on the database?	WITHOUT_CLASSIFICATION	0.9763415022637024	WITHOUT_CLASSIFICATION	0.023658497736297628	DESIGN
/// HHH-2378	WITHOUT_CLASSIFICATION	0.9999590862629617	WITHOUT_CLASSIFICATION	4.0913737038264404E-5	DESIGN
//will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998304789822904	WITHOUT_CLASSIFICATION	1.6952101770960996E-4	DESIGN
//else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9988904199380909	WITHOUT_CLASSIFICATION	0.0011095800619090742	DESIGN
// no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9999388130848295	WITHOUT_CLASSIFICATION	6.118691517047064E-5	DESIGN
//refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999690229823454	WITHOUT_CLASSIFICATION	3.097701765461401E-5	DESIGN
//do not return a proxy! //(this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9999744136238207	WITHOUT_CLASSIFICATION	2.55863761793929E-5	DESIGN
//return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9894236694268864	WITHOUT_CLASSIFICATION	0.010576330573113553	DESIGN
// return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999994230043276	WITHOUT_CLASSIFICATION	5.769956724194298E-7	DESIGN
// return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999978603714947	WITHOUT_CLASSIFICATION	2.139628505305552E-6	DESIGN
// this object was already loaded	WITHOUT_CLASSIFICATION	0.9992535082394534	WITHOUT_CLASSIFICATION	7.464917605467532E-4	DESIGN
// Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9995334994269385	WITHOUT_CLASSIFICATION	4.6650057306155785E-4	DESIGN
// make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9999999434286657	WITHOUT_CLASSIFICATION	5.6571334322615955E-8	DESIGN
// intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999999759234923	WITHOUT_CLASSIFICATION	2.407650763638487E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Pre-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998409156793	WITHOUT_CLASSIFICATION	1.5908432071758132E-7	DESIGN
//some statistics	WITHOUT_CLASSIFICATION	0.9998410585346619	WITHOUT_CLASSIFICATION	1.5894146533816075E-4	DESIGN
//safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998456404600687	WITHOUT_CLASSIFICATION	1.5435953993124792E-4	DESIGN
// Initialize dirty flags for arrays + collections with composite elements // and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999999995787695	WITHOUT_CLASSIFICATION	4.21230514733089E-10	DESIGN
// Among other things, updateReachables() will recursively load all // collections that are moving roles. This might cause entities to // be loaded.	WITHOUT_CLASSIFICATION	0.9999472664154377	WITHOUT_CLASSIFICATION	5.2733584562263813E-5	DESIGN
// So this needs to be safe from concurrent modification problems. // It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.851168655933621	DESIGN	0.14883134406637902	WITHOUT_CLASSIFICATION
// Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999997528166797	WITHOUT_CLASSIFICATION	2.471833202618961E-7	DESIGN
// Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9999998560991789	WITHOUT_CLASSIFICATION	1.4390082118532324E-7	DESIGN
// we need to lock the collection caches before // executing entity inserts/updates in order to // account for bidi associations	WITHOUT_CLASSIFICATION	0.9999502489980302	WITHOUT_CLASSIFICATION	4.975100196976526E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // Post-flushing section // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999438925716	WITHOUT_CLASSIFICATION	5.6107428282320354E-8	DESIGN
//the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9999998422944888	WITHOUT_CLASSIFICATION	1.577055110877831E-7	DESIGN
//if the collection is dereferenced, remove from the session cache //iter.remove(); //does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.99999994896602	WITHOUT_CLASSIFICATION	5.1033979994662944E-8	DESIGN
//otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9998244619314992	WITHOUT_CLASSIFICATION	1.7553806850076567E-4	DESIGN
//get a snapshot	WITHOUT_CLASSIFICATION	0.9996182840408264	WITHOUT_CLASSIFICATION	3.8171595917358444E-4	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999943461982815	WITHOUT_CLASSIFICATION	5.653801718404614E-6	DESIGN
/* package-private */	WITHOUT_CLASSIFICATION	0.9999943461982815	WITHOUT_CLASSIFICATION	5.653801718404614E-6	DESIGN
// key is an entity involved with the operation performed by the listener; // value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999999926920334	WITHOUT_CLASSIFICATION	7.3079665350657306E-9	DESIGN
// EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9999970437623151	WITHOUT_CLASSIFICATION	2.9562376847829334E-6	DESIGN
//ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9999808898482582	WITHOUT_CLASSIFICATION	1.9110151741736985E-5	DESIGN
// before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9999993627678796	WITHOUT_CLASSIFICATION	6.372321204718691E-7	DESIGN
// Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999999965863399	WITHOUT_CLASSIFICATION	3.4136601509962717E-9	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999999860326508	WITHOUT_CLASSIFICATION	1.3967349210869243E-7	DESIGN
// cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9999890381570276	WITHOUT_CLASSIFICATION	1.0961842972467516E-5	DESIGN
// if it is an initialized proxy, let cascade // handle it later on	WITHOUT_CLASSIFICATION	0.9999912088231272	WITHOUT_CLASSIFICATION	8.791176872801635E-6	DESIGN
//assign the requested id to the proxy, *before* //reassociating the proxy	WITHOUT_CLASSIFICATION	0.9991798383266353	WITHOUT_CLASSIFICATION	8.201616733647904E-4	DESIGN
// an uninitialized proxy, noop, don't even need to // return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999994115879118	WITHOUT_CLASSIFICATION	5.884120882582813E-7	DESIGN
//initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999991497380523	WITHOUT_CLASSIFICATION	8.502619477918812E-7	DESIGN
//return the id in the event object	WITHOUT_CLASSIFICATION	0.9997239124810308	WITHOUT_CLASSIFICATION	2.7608751896924605E-4	DESIGN
//TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9999901160569009	WITHOUT_CLASSIFICATION	9.883943099032845E-6	DESIGN
// use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9999945076309349	WITHOUT_CLASSIFICATION	5.492369065071496E-6	DESIGN
// assume this is a newly instantiated transient object // which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.9548032754606582	DESIGN	0.04519672453934171	WITHOUT_CLASSIFICATION
// this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.999725170412789	WITHOUT_CLASSIFICATION	2.7482958721096744E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999935963212	WITHOUT_CLASSIFICATION	6.403678776434741E-9	DESIGN
//cachedState,	WITHOUT_CLASSIFICATION	0.9998508134581164	WITHOUT_CLASSIFICATION	1.4918654188350667E-4	DESIGN
//assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9997998565503128	WITHOUT_CLASSIFICATION	2.0014344968726018E-4	DESIGN
//a "detached" collection!	WITHOUT_CLASSIFICATION	0.9990935306872969	WITHOUT_CLASSIFICATION	9.064693127031313E-4	DESIGN
// if the collection belonged to a different entity, // clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9999825462044557	WITHOUT_CLASSIFICATION	1.745379554430655E-5	DESIGN
//log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9999989786953907	WITHOUT_CLASSIFICATION	1.0213046093868793E-6	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999638545423363	WITHOUT_CLASSIFICATION	3.6145457663717356E-5	DESIGN
// note: performExecutions() clears all collectionXxxxtion  // collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9940542800275628	WITHOUT_CLASSIFICATION	0.005945719972437191	DESIGN
// if no array holder we found an unwrappered array (this can't occur, // because we now always call wrap() before getting to here) // return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9955895895085219	WITHOUT_CLASSIFICATION	0.0044104104914780545	DESIGN
// if not wrappered yet, its dirty (this can't occur, because // we now always call wrap() before getting to here) // return ( ! (obj instanceof PersistentCollection) ) ? //true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9938424153095213	DESIGN	0.006157584690478706	WITHOUT_CLASSIFICATION
//we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998527622502549	WITHOUT_CLASSIFICATION	1.4723774974515787E-4	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998195965560258	WITHOUT_CLASSIFICATION	1.8040344397413481E-4	DESIGN
// find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9999455602323821	WITHOUT_CLASSIFICATION	5.443976761798059E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999638545423363	WITHOUT_CLASSIFICATION	3.6145457663717356E-5	DESIGN
// Check the persistence context for an entry relating to this // entity to be merged...	WITHOUT_CLASSIFICATION	0.9986650807380514	WITHOUT_CLASSIFICATION	0.0013349192619485726	DESIGN
// we have specialized case of a detached entity from the // perspective of the merge operation.  Specifically, we // have an incoming entity instance which has a corresponding // entry in the current persistence context, but registered // under a different entity instance	WITHOUT_CLASSIFICATION	0.9999960920810333	WITHOUT_CLASSIFICATION	3.9079189666207175E-6	DESIGN
//DELETED	WITHOUT_CLASSIFICATION	0.9997711916883857	WITHOUT_CLASSIFICATION	2.2880831161430293E-4	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999563062758168	WITHOUT_CLASSIFICATION	4.3693724183208785E-5	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy //cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999997046941658	WITHOUT_CLASSIFICATION	2.953058342361135E-7	DESIGN
//this bit is only *really* absolutely necessary for handling //requestedId, but is also good if we merge multiple object //graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.8469496212952258	DESIGN	0.15305037870477425	WITHOUT_CLASSIFICATION
// continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9926105938206042	WITHOUT_CLASSIFICATION	0.00738940617939573	DESIGN
// cascade first, so that all unsaved objects get their // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999909479488734	WITHOUT_CLASSIFICATION	9.052051126562128E-6	DESIGN
// check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999972082344699	WITHOUT_CLASSIFICATION	2.791765529995553E-6	DESIGN
//before cascade!	WITHOUT_CLASSIFICATION	0.9999563062758168	WITHOUT_CLASSIFICATION	4.3693724183208785E-5	DESIGN
// we got here because we assumed that an instance // with an assigned id was detached, when it was // really persistent	WITHOUT_CLASSIFICATION	0.9999994896605283	WITHOUT_CLASSIFICATION	5.103394716262746E-7	DESIGN
// cascade first, so that all unsaved objects get their  // copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999832636593137	WITHOUT_CLASSIFICATION	1.6736340686275334E-5	DESIGN
//copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9985309938812083	WITHOUT_CLASSIFICATION	0.0014690061187917548	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999723363556731	WITHOUT_CLASSIFICATION	2.7663644326908427E-5	DESIGN
//source.getBatcher().executeBatch(); //found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9999814393611668	WITHOUT_CLASSIFICATION	1.8560638833200947E-5	DESIGN
// substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9999918005379834	WITHOUT_CLASSIFICATION	8.199462016564523E-6	DESIGN
//now done in EntityIdentityInsertAction //persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9999999861875227	WITHOUT_CLASSIFICATION	1.3812477238516459E-8	DESIGN
//source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9999928285863428	WITHOUT_CLASSIFICATION	7.171413657292319E-6	DESIGN
//keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9997051089906517	WITHOUT_CLASSIFICATION	2.9489100934823516E-4	DESIGN
// cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.999864104469044	WITHOUT_CLASSIFICATION	1.3589553095610062E-4	DESIGN
//pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999999244837663	WITHOUT_CLASSIFICATION	7.551623370714255E-7	DESIGN
// the object is persistent	WITHOUT_CLASSIFICATION	0.9998833901243874	WITHOUT_CLASSIFICATION	1.1660987561250967E-4	DESIGN
//the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999357139730439	WITHOUT_CLASSIFICATION	6.428602695605553E-5	DESIGN
// do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9999966317507654	WITHOUT_CLASSIFICATION	3.3682492345457254E-6	DESIGN
//ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9999722257017114	WITHOUT_CLASSIFICATION	2.7774298288543322E-5	DESIGN
// the object is transient or detached	WITHOUT_CLASSIFICATION	0.9995836696433875	WITHOUT_CLASSIFICATION	4.163303566124614E-4	DESIGN
//NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999635356618723	WITHOUT_CLASSIFICATION	3.646433812759297E-5	DESIGN
// Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9998280279482188	WITHOUT_CLASSIFICATION	1.719720517811692E-4	DESIGN
// First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9999041239732934	WITHOUT_CLASSIFICATION	9.587602670658523E-5	DESIGN
// eat it and try next	WITHOUT_CLASSIFICATION	0.9979625590665265	WITHOUT_CLASSIFICATION	0.002037440933473344	DESIGN
// Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999987517595627	WITHOUT_CLASSIFICATION	1.2482404373198913E-6	DESIGN
// oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.999929683640342	WITHOUT_CLASSIFICATION	7.03163596580537E-5	DESIGN
// CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.999997608496563	WITHOUT_CLASSIFICATION	2.3915034370262106E-6	DESIGN
// remove initial ", "	WITHOUT_CLASSIFICATION	0.9999975902625261	WITHOUT_CLASSIFICATION	2.409737473771224E-6	DESIGN
// remove initial " and "	WITHOUT_CLASSIFICATION	0.9999873403642323	WITHOUT_CLASSIFICATION	1.2659635767690213E-5	DESIGN
//beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.999447447955967	WITHOUT_CLASSIFICATION	5.525520440331496E-4	DESIGN
//notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9999942682633385	WITHOUT_CLASSIFICATION	5.73173666150076E-6	DESIGN
// just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9999999220582482	WITHOUT_CLASSIFICATION	7.794175189029256E-8	DESIGN
//update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9999986914566106	WITHOUT_CLASSIFICATION	1.308543389499446E-6	DESIGN
// select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.999985121510822	WITHOUT_CLASSIFICATION	1.4878489178018705E-5	DESIGN
//scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999994275358734	WITHOUT_CLASSIFICATION	5.724641266004696E-6	DESIGN
// Note this!!	WITHOUT_CLASSIFICATION	0.9993934688376328	WITHOUT_CLASSIFICATION	6.065311623671966E-4	DESIGN
// Error message constants.	WITHOUT_CLASSIFICATION	0.9999949348634645	WITHOUT_CLASSIFICATION	5.065136535525802E-6	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916461267382	WITHOUT_CLASSIFICATION	8.353873261890069E-6	DESIGN
// semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9926954084151912	WITHOUT_CLASSIFICATION	0.007304591584808833	DESIGN
// Handle collection-fiter compilation. // IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.7411816569501489	DESIGN	0.25881834304985113	WITHOUT_CLASSIFICATION
// Show the modified AST.	WITHOUT_CLASSIFICATION	0.9998140173168931	WITHOUT_CLASSIFICATION	1.8598268310698535E-4	DESIGN
// Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9999717504996222	WITHOUT_CLASSIFICATION	2.8249500377829296E-5	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999718845959	WITHOUT_CLASSIFICATION	2.811540410282348E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999718845959	WITHOUT_CLASSIFICATION	2.811540410282348E-7	DESIGN
// Get the names of the columns used to link between the collection // owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9999844302483282	WITHOUT_CLASSIFICATION	1.5569751671846422E-5	DESIGN
// The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9953698664418617	WITHOUT_CLASSIFICATION	0.004630133558138315	DESIGN
// Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999996417985975	WITHOUT_CLASSIFICATION	3.582014025645197E-7	DESIGN
// Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999560872890142	WITHOUT_CLASSIFICATION	4.391271098579827E-5	DESIGN
// Don't forget to resolve the argument! // Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9999973832260942	WITHOUT_CLASSIFICATION	2.6167739058210906E-6	DESIGN
// Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.8206835752477487	WITHOUT_CLASSIFICATION	0.17931642475225132	DESIGN
// Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9981274895229122	WITHOUT_CLASSIFICATION	0.0018725104770877861	DESIGN
// Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998680499408878	WITHOUT_CLASSIFICATION	1.3195005911226248E-4	DESIGN
// Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9999982246024195	WITHOUT_CLASSIFICATION	1.7753975805265719E-6	DESIGN
// Use the explicitly declared select expression; determine the // return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999999947341033	WITHOUT_CLASSIFICATION	5.265896699662092E-8	DESIGN
// After that, process the JOINs. // Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9999999941955683	WITHOUT_CLASSIFICATION	5.8044318117844846E-9	DESIGN
// Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999985971419239	WITHOUT_CLASSIFICATION	1.4028580761529728E-6	DESIGN
// We need to generate ids as part of this bulk insert. // // Note that this is only supported for sequence-style generators and // post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9999954184242451	WITHOUT_CLASSIFICATION	4.581575754924057E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999718845959	WITHOUT_CLASSIFICATION	2.811540410282348E-7	DESIGN
// We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9999817152060807	WITHOUT_CLASSIFICATION	1.8284793919258805E-5	DESIGN
// we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9989906595104	WITHOUT_CLASSIFICATION	0.001009340489599908	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9980844368347853	WITHOUT_CLASSIFICATION	0.0019155631652146583	DESIGN
// Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9999753868392185	WITHOUT_CLASSIFICATION	2.4613160781568655E-5	DESIGN
// Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999971721154299	WITHOUT_CLASSIFICATION	2.8278845700902495E-6	DESIGN
// Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9998619824231837	WITHOUT_CLASSIFICATION	1.380175768163258E-4	DESIGN
// create the node initially with the param name so that it shows // appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999954241756175	WITHOUT_CLASSIFICATION	4.575824382516908E-6	DESIGN
// Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9999997165502893	WITHOUT_CLASSIFICATION	2.8344971077430444E-7	DESIGN
// select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9999274949110305	WITHOUT_CLASSIFICATION	7.250508896955407E-5	DESIGN
// no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9987684302453074	WITHOUT_CLASSIFICATION	0.0012315697546927003	DESIGN
// Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9999460702642174	WITHOUT_CLASSIFICATION	5.392973578254235E-5	DESIGN
// handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999916461267382	WITHOUT_CLASSIFICATION	8.353873261890069E-6	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999718845959	WITHOUT_CLASSIFICATION	2.811540410282348E-7	DESIGN
// --Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9999999887859605	WITHOUT_CLASSIFICATION	1.1214039588601936E-8	DESIGN
// Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9999998356374233	WITHOUT_CLASSIFICATION	1.6436257661080094E-7	DESIGN
// switch	WITHOUT_CLASSIFICATION	0.9999720989773776	WITHOUT_CLASSIFICATION	2.7901022622427256E-5	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999550542596123	WITHOUT_CLASSIFICATION	4.494574038770262E-5	DESIGN
// just do the regular thing if you can't find the ctor // Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.8644077276372527	WITHOUT_CLASSIFICATION	0.1355922723627473	DESIGN
// Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.999999685700041	WITHOUT_CLASSIFICATION	3.142999589275497E-7	DESIGN
// semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999578030178753	WITHOUT_CLASSIFICATION	4.219698212470432E-4	DESIGN
// if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999999863150646	WITHOUT_CLASSIFICATION	1.3684935396198335E-8	DESIGN
// this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999999270369503	WITHOUT_CLASSIFICATION	7.29630497041633E-8	DESIGN
// --- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9999947574357436	WITHOUT_CLASSIFICATION	5.242564256420094E-6	DESIGN
// check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999993818081939	WITHOUT_CLASSIFICATION	6.181918061467198E-7	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995072487727535	WITHOUT_CLASSIFICATION	4.92751227246549E-4	DESIGN
// these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9999846601825062	WITHOUT_CLASSIFICATION	1.5339817493884195E-5	DESIGN
// again, both should be FromElements	WITHOUT_CLASSIFICATION	0.999873191632412	WITHOUT_CLASSIFICATION	1.268083675880365E-4	DESIGN
// NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9998673731755582	WITHOUT_CLASSIFICATION	1.3262682444171764E-4	DESIGN
// right represents a joins originating from left; or // both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9999994848391628	WITHOUT_CLASSIFICATION	5.151608372078211E-7	DESIGN
// check a set of parent/child nodes in the from-clause tree // to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9999999777074601	WITHOUT_CLASSIFICATION	2.2292539899168505E-8	DESIGN
// right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.99999618878656	WITHOUT_CLASSIFICATION	3.8112134399031253E-6	DESIGN
// all clear	WITHOUT_CLASSIFICATION	0.9999969195707316	WITHOUT_CLASSIFICATION	3.080429268392425E-6	DESIGN
// Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9999985276359062	WITHOUT_CLASSIFICATION	1.4723640938221706E-6	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987610429784822	WITHOUT_CLASSIFICATION	0.0012389570215178675	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987610429784822	WITHOUT_CLASSIFICATION	0.0012389570215178675	DESIGN
// remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9989709920684436	WITHOUT_CLASSIFICATION	0.0010290079315563858	DESIGN
// don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9992703180637387	WITHOUT_CLASSIFICATION	7.296819362614161E-4	DESIGN
// If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999991438148087	WITHOUT_CLASSIFICATION	8.561851913083792E-7	DESIGN
// Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9998033567594206	WITHOUT_CLASSIFICATION	1.9664324057953075E-4	DESIGN
// PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9999774016927405	WITHOUT_CLASSIFICATION	2.259830725946014E-5	DESIGN
// PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999872404755077	WITHOUT_CLASSIFICATION	1.27595244923849E-5	DESIGN
// PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9986356850057466	WITHOUT_CLASSIFICATION	0.0013643149942534256	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999410853183	WITHOUT_CLASSIFICATION	5.891468164277193E-8	DESIGN
// we do not actually propogate ANTLRExceptions as a cause, so // log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9999999410853183	WITHOUT_CLASSIFICATION	5.891468164277193E-8	DESIGN
//only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9999492995528103	WITHOUT_CLASSIFICATION	5.070044718959519E-5	DESIGN
// Transform the tree.	WITHOUT_CLASSIFICATION	0.9999839029750787	WITHOUT_CLASSIFICATION	1.6097024921304114E-5	DESIGN
// Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999863231577545	WITHOUT_CLASSIFICATION	1.3676842245441384E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999716541579254	WITHOUT_CLASSIFICATION	2.8345842074510155E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999716541579254	WITHOUT_CLASSIFICATION	2.8345842074510155E-5	DESIGN
// Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9999716541579254	WITHOUT_CLASSIFICATION	2.8345842074510155E-5	DESIGN
// NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999849450802851	WITHOUT_CLASSIFICATION	1.5054919714954858E-5	DESIGN
// -- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9996277412121483	WITHOUT_CLASSIFICATION	3.722587878517765E-4	DESIGN
// If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999998768890866	WITHOUT_CLASSIFICATION	1.231109134194481E-7	DESIGN
// A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.997891990777341	WITHOUT_CLASSIFICATION	0.002108009222658963	DESIGN
// should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9987274376251305	WITHOUT_CLASSIFICATION	0.0012725623748695188	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999718845959	WITHOUT_CLASSIFICATION	2.811540410282348E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999718845959	WITHOUT_CLASSIFICATION	2.811540410282348E-7	DESIGN
// Impl Note: allows multiple collection fetches as long as the // entire fecthed graph still "points back" to a single // root entity for return	WITHOUT_CLASSIFICATION	0.9999929232691163	WITHOUT_CLASSIFICATION	7.076730883716607E-6	DESIGN
// Otherwise, we have a non-scalar select with defined collection fetch(es). // Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9997555062674613	WITHOUT_CLASSIFICATION	2.444937325386295E-4	DESIGN
// This is not strictly true.  We actually just need to make sure that // it is ordered by root-entity PK and that that order-by comes before // any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9999378891033919	WITHOUT_CLASSIFICATION	6.211089660814843E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9999889488210953	WITHOUT_CLASSIFICATION	1.1051178904525515E-5	DESIGN
// igndore it...	WITHOUT_CLASSIFICATION	0.9999065871676183	WITHOUT_CLASSIFICATION	9.341283238175667E-5	DESIGN
// we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9999958847661716	WITHOUT_CLASSIFICATION	4.11523382838073E-6	DESIGN
// [jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9977324838708214	WITHOUT_CLASSIFICATION	0.0022675161291786324	DESIGN
// If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9987336306532822	WITHOUT_CLASSIFICATION	0.0012663693467176614	DESIGN
// ... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999970903862796	WITHOUT_CLASSIFICATION	2.90961372047805E-6	DESIGN
// Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999999909584054	WITHOUT_CLASSIFICATION	9.041594556168891E-9	DESIGN
// Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999939455222896	WITHOUT_CLASSIFICATION	6.054477710355976E-6	DESIGN
// (NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9999680254625314	WITHOUT_CLASSIFICATION	3.1974537468716366E-5	DESIGN
// (NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9999680254625314	WITHOUT_CLASSIFICATION	3.1974537468716366E-5	DESIGN
// (NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9999843588074061	WITHOUT_CLASSIFICATION	1.5641192593931063E-5	DESIGN
// (NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9999843588074061	WITHOUT_CLASSIFICATION	1.5641192593931063E-5	DESIGN
// (NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9999874284593893	WITHOUT_CLASSIFICATION	1.2571540610815802E-5	DESIGN
// (NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9999954166436194	WITHOUT_CLASSIFICATION	4.583356380674515E-6	DESIGN
// (NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9999954166436194	WITHOUT_CLASSIFICATION	4.583356380674515E-6	DESIGN
// (NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9999931832958582	WITHOUT_CLASSIFICATION	6.8167041418095644E-6	DESIGN
// (NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999845948046115	WITHOUT_CLASSIFICATION	1.5405195388452114E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993902214941	WITHOUT_CLASSIFICATION	6.097785058212745E-7	DESIGN
//overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987610429784822	WITHOUT_CLASSIFICATION	0.0012389570215178675	DESIGN
// if // if // Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9999970225308543	WITHOUT_CLASSIFICATION	2.977469145809237E-6	DESIGN
// (NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9999845948046115	WITHOUT_CLASSIFICATION	1.5405195388452114E-5	DESIGN
/* This can never happen because this rule will always eliminate the child NOT.	WITHOUT_CLASSIFICATION	0.9972299703656906	WITHOUT_CLASSIFICATION	0.002770029634309423	DESIGN
// Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9998885281382986	WITHOUT_CLASSIFICATION	1.1147186170134471E-4	DESIGN
// (EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9999992694926024	WITHOUT_CLASSIFICATION	7.305073975545571E-7	DESIGN
// (EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9999972718055562	WITHOUT_CLASSIFICATION	2.728194443820862E-6	DESIGN
// NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. // IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9999992220566238	WITHOUT_CLASSIFICATION	7.77943376276196E-7	DESIGN
// Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9999954563497166	WITHOUT_CLASSIFICATION	4.543650283304159E-6	DESIGN
// Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.999999392281938	WITHOUT_CLASSIFICATION	6.077180619219054E-7	DESIGN
// Case 1: Multi token keywords GROUP BY and ORDER BY // The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9114543921657555	WITHOUT_CLASSIFICATION	0.08854560783424448	DESIGN
// Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999970724048732	WITHOUT_CLASSIFICATION	2.9275951268748267E-6	DESIGN
// This handles HHH-354, where there is a strange property name in a where clause. // If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9594304837782532	WITHOUT_CLASSIFICATION	0.040569516221746725	DESIGN
// See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999999680491078	WITHOUT_CLASSIFICATION	3.1950892177202434E-8	DESIGN
// Set it!	WITHOUT_CLASSIFICATION	0.9999756350239917	WITHOUT_CLASSIFICATION	2.436497600837962E-5	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999996017603694	WITHOUT_CLASSIFICATION	3.982396305501183E-7	DESIGN
// strip the " where "	WITHOUT_CLASSIFICATION	0.9999803689440407	WITHOUT_CLASSIFICATION	1.9631055959247414E-5	DESIGN
// Don't really know all the codes required to adequately decipher returned jdbc exceptions here. // simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9986245430591637	WITHOUT_CLASSIFICATION	0.0013754569408362556	DESIGN
// at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.998635195096474	WITHOUT_CLASSIFICATION	0.0013648049035260164	DESIGN
// First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999999494140498	WITHOUT_CLASSIFICATION	5.058595022343291E-8	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999009380287365	WITHOUT_CLASSIFICATION	9.906197126355081E-5	DESIGN
// jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9999009380287365	WITHOUT_CLASSIFICATION	9.906197126355081E-5	DESIGN
// Start performing the updates	WITHOUT_CLASSIFICATION	0.9999853500411645	WITHOUT_CLASSIFICATION	1.4649958835463938E-5	DESIGN
// First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9999998958340408	WITHOUT_CLASSIFICATION	1.0416595917318428E-7	DESIGN
// Start performing the deletes	WITHOUT_CLASSIFICATION	0.9999840345921766	WITHOUT_CLASSIFICATION	1.5965407823541797E-5	DESIGN
// otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9998710817065465	WITHOUT_CLASSIFICATION	1.289182934535029E-4	DESIGN
// visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9999973459694432	WITHOUT_CLASSIFICATION	2.654030556905996E-6	DESIGN
// if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9999954103839038	WITHOUT_CLASSIFICATION	4.589616096187626E-6	DESIGN
// otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.996356264557456	WITHOUT_CLASSIFICATION	0.003643735442544019	DESIGN
// If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999998177052352	WITHOUT_CLASSIFICATION	1.8229476488756297E-7	DESIGN
// inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999985928129945	WITHOUT_CLASSIFICATION	1.4071870055041595E-6	DESIGN
// Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998737166614383	WITHOUT_CLASSIFICATION	1.2628333856167908E-4	DESIGN
// Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.999904503045848	WITHOUT_CLASSIFICATION	9.549695415198916E-5	DESIGN
///////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995072487727535	WITHOUT_CLASSIFICATION	4.92751227246549E-4	DESIGN
// Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9999794966167164	WITHOUT_CLASSIFICATION	2.0503383283694175E-5	DESIGN
// Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9999999747310415	WITHOUT_CLASSIFICATION	2.526895848162605E-8	DESIGN
// If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9999926741844551	WITHOUT_CLASSIFICATION	7.325815544828177E-6	DESIGN
// The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.999999222517319	WITHOUT_CLASSIFICATION	7.774826810615989E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995134120793	WITHOUT_CLASSIFICATION	4.865879208132674E-7	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995134120793	WITHOUT_CLASSIFICATION	4.865879208132674E-7	DESIGN
// If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9997569217410185	WITHOUT_CLASSIFICATION	2.4307825898155696E-4	DESIGN
// If there is no data type for this node, and we're at the end of the path (top most dot node), then // this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9995095299359963	WITHOUT_CLASSIFICATION	4.904700640037819E-4	DESIGN
// The property is a collection...	WITHOUT_CLASSIFICATION	0.9999839003756621	WITHOUT_CLASSIFICATION	1.6099624337891607E-5	DESIGN
// The property is a component...	WITHOUT_CLASSIFICATION	0.9999855866550038	WITHOUT_CLASSIFICATION	1.4413344996136704E-5	DESIGN
// The property is another class..	WITHOUT_CLASSIFICATION	0.9999978717007604	WITHOUT_CLASSIFICATION	2.1282992396656374E-6	DESIGN
// Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9999956582848246	WITHOUT_CLASSIFICATION	4.341715175327037E-6	DESIGN
//foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9993464359205217	WITHOUT_CLASSIFICATION	6.535640794783461E-4	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999972911795412	WITHOUT_CLASSIFICATION	2.7088204587966948E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999916741691535	WITHOUT_CLASSIFICATION	8.325830846501419E-5	DESIGN
// in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9999999986471161	WITHOUT_CLASSIFICATION	1.3528839013600162E-9	DESIGN
// this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9969125043248511	WITHOUT_CLASSIFICATION	0.0030874956751488244	DESIGN
// This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999972911795412	WITHOUT_CLASSIFICATION	2.7088204587966948E-5	DESIGN
// even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9926583239686753	WITHOUT_CLASSIFICATION	0.007341676031324691	DESIGN
// NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9307543914168851	WITHOUT_CLASSIFICATION	0.06924560858311492	DESIGN
// if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9993928226741763	WITHOUT_CLASSIFICATION	6.071773258237306E-4	DESIGN
// again, null != null here	WITHOUT_CLASSIFICATION	0.999998839424372	WITHOUT_CLASSIFICATION	1.1605756280408484E-6	DESIGN
// If this is an implied join in a from element, then use the impled join type which is part of the // tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9999903750482558	WITHOUT_CLASSIFICATION	9.624951744231297E-6	DESIGN
// otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9999990191381711	WITHOUT_CLASSIFICATION	9.80861828946104E-7	DESIGN
// we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9999966379395402	WITHOUT_CLASSIFICATION	3.362060459821427E-6	DESIGN
// the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999999314065258	WITHOUT_CLASSIFICATION	6.859347422887984E-8	DESIGN
// only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9985765924320261	WITHOUT_CLASSIFICATION	0.001423407567973843	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998651160155673	WITHOUT_CLASSIFICATION	1.3488398443282714E-4	DESIGN
// Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9999019483953552	WITHOUT_CLASSIFICATION	9.805160464478582E-5	DESIGN
// If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9999995368615405	WITHOUT_CLASSIFICATION	4.631384594471208E-7	DESIGN
// Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9999723777443883	WITHOUT_CLASSIFICATION	2.7622255611724696E-5	DESIGN
// Use theta style (for regression) // Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9999930523844477	WITHOUT_CLASSIFICATION	6.947615552248297E-6	DESIGN
// Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9999886670342099	WITHOUT_CLASSIFICATION	1.1332965790190152E-5	DESIGN
// for expected parameter type injection, we expect that the lhs represents // some form of property ref and that the children of the in-list represent // one-or-more params.	WITHOUT_CLASSIFICATION	0.9999865292397603	WITHOUT_CLASSIFICATION	1.3470760239699938E-5	DESIGN
// we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9999994251576337	WITHOUT_CLASSIFICATION	5.748423661974909E-7	DESIGN
// we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9992645397634584	WITHOUT_CLASSIFICATION	7.35460236541613E-4	DESIGN
// we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9998816841163698	WITHOUT_CLASSIFICATION	1.1831588363024361E-4	DESIGN
// we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.999996099865556	WITHOUT_CLASSIFICATION	3.900134443972535E-6	DESIGN
// handle the (assumed) valid cases: // #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9998450075062363	WITHOUT_CLASSIFICATION	1.5499249376364578E-4	DESIGN
// one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.990284676612901	DESIGN	0.009715323387098945	WITHOUT_CLASSIFICATION
// #3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9993382335524185	WITHOUT_CLASSIFICATION	6.617664475815214E-4	DESIGN
// #2	WITHOUT_CLASSIFICATION	0.9999920768513315	WITHOUT_CLASSIFICATION	7.923148668499105E-6	DESIGN
// Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9999999453708682	WITHOUT_CLASSIFICATION	5.462913188192097E-8	DESIGN
// nothing to do	WITHOUT_CLASSIFICATION	0.9999758242684524	WITHOUT_CLASSIFICATION	2.41757315475117E-5	DESIGN
// The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999991418738882	WITHOUT_CLASSIFICATION	8.5812611184896E-7	DESIGN
// Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999998257930632	WITHOUT_CLASSIFICATION	1.742069366948235E-7	DESIGN
// Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9999975853307377	WITHOUT_CLASSIFICATION	2.4146692624098433E-6	DESIGN
// Now, set the text for this node.  It should be the element columns.	WITHOUT_CLASSIFICATION	0.9817059727369809	WITHOUT_CLASSIFICATION	0.01829402726301911	DESIGN
// Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.99999999725639	WITHOUT_CLASSIFICATION	2.7436101139618726E-9	DESIGN
// This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9999919238424745	WITHOUT_CLASSIFICATION	8.076157525493086E-6	DESIGN
// mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9999157538524448	WITHOUT_CLASSIFICATION	8.424614755529404E-5	DESIGN
// "pass along" our initial embedded parameter node(s) to the first generated // sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9950840744346047	WITHOUT_CLASSIFICATION	0.004915925565395245	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998971537083999	WITHOUT_CLASSIFICATION	1.0284629160002585E-4	DESIGN
// Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9999945230164198	WITHOUT_CLASSIFICATION	5.476983580197861E-6	DESIGN
// The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999964536302345	WITHOUT_CLASSIFICATION	3.5463697656186885E-6	DESIGN
// The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999999915358244	WITHOUT_CLASSIFICATION	8.46417549747598E-9	DESIGN
// Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999998941404674	WITHOUT_CLASSIFICATION	1.0585953257652394E-7	DESIGN
// try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9999878246596533	WITHOUT_CLASSIFICATION	1.2175340346771834E-5	DESIGN
// Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999999495847459	WITHOUT_CLASSIFICATION	5.0415254097511346E-8	DESIGN
// Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9999741844246294	WITHOUT_CLASSIFICATION	2.5815575370673533E-5	DESIGN
// Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9999937672644663	WITHOUT_CLASSIFICATION	6.23273553379183E-6	DESIGN
// Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999998905256617	WITHOUT_CLASSIFICATION	1.0947433824018677E-7	DESIGN
// return an empty Type array	WITHOUT_CLASSIFICATION	0.9999238825047956	WITHOUT_CLASSIFICATION	7.611749520446499E-5	DESIGN
// Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9947332561795476	WITHOUT_CLASSIFICATION	0.005266743820452434	DESIGN
// this is the exception returned by ReflectHelper.getConstructor() if it cannot // locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999995931942224	WITHOUT_CLASSIFICATION	4.0680577759309973E-7	DESIGN
// if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999999549527096	WITHOUT_CLASSIFICATION	4.504729038812869E-7	DESIGN
// Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.999996609544394	WITHOUT_CLASSIFICATION	3.3904556060769628E-6	DESIGN
// Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9999840392498394	WITHOUT_CLASSIFICATION	1.5960750160587514E-5	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945453953956	WITHOUT_CLASSIFICATION	5.4546046044737544E-6	DESIGN
// logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999450043735989	WITHOUT_CLASSIFICATION	5.4995626401109556E-5	DESIGN
// Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9999713375812525	WITHOUT_CLASSIFICATION	2.8662418747591877E-5	DESIGN
// Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999994890366181	WITHOUT_CLASSIFICATION	5.10963381913633E-7	DESIGN
// For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9999994156576381	WITHOUT_CLASSIFICATION	5.843423618849759E-7	DESIGN
// Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9999953223998256	WITHOUT_CLASSIFICATION	4.677600174501938E-6	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997719151746718	WITHOUT_CLASSIFICATION	2.2808482532822499E-4	DESIGN
// If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9999989383761392	WITHOUT_CLASSIFICATION	1.0616238609177853E-6	DESIGN
// Collection of components.	WITHOUT_CLASSIFICATION	0.9999783471988242	WITHOUT_CLASSIFICATION	2.1652801175907977E-5	DESIGN
// make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9999927385577297	WITHOUT_CLASSIFICATION	7.261442270284187E-6	DESIGN
// false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9999817597150358	WITHOUT_CLASSIFICATION	1.824028496417752E-5	DESIGN
// Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9999815105769347	WITHOUT_CLASSIFICATION	1.8489423065235343E-5	DESIGN
// currently allowed...	WITHOUT_CLASSIFICATION	0.9994343545844857	WITHOUT_CLASSIFICATION	5.656454155142368E-4	DESIGN
// HHH-276 : implied joins in a subselect where clause - The destination needs to be added // to the destination's from clause. // Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8976437185483906	WITHOUT_CLASSIFICATION	0.10235628145160931	DESIGN
//return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9985325097472018	WITHOUT_CLASSIFICATION	0.0014674902527982083	DESIGN
// This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9998556345596129	WITHOUT_CLASSIFICATION	1.443654403871496E-4	DESIGN
// ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999945453953956	WITHOUT_CLASSIFICATION	5.4546046044737544E-6	DESIGN
// Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9999941693579008	WITHOUT_CLASSIFICATION	5.830642099255924E-6	DESIGN
// If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999999883003142	WITHOUT_CLASSIFICATION	1.1699685745384065E-8	DESIGN
// Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.999996838405015	WITHOUT_CLASSIFICATION	3.161594985123573E-6	DESIGN
// Do nothing, eplicit from elements are *always* in the projection list.	WITHOUT_CLASSIFICATION	0.9999987433702977	WITHOUT_CLASSIFICATION	1.2566297023163292E-6	DESIGN
// propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9999993458842457	WITHOUT_CLASSIFICATION	6.541157544181772E-7	DESIGN
// property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9999748217211345	WITHOUT_CLASSIFICATION	2.517827886561129E-5	DESIGN
// Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999916741691535	WITHOUT_CLASSIFICATION	8.325830846501419E-5	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9987868621682294	WITHOUT_CLASSIFICATION	0.001213137831770618	DESIGN
// logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9998971537083999	WITHOUT_CLASSIFICATION	1.0284629160002585E-4	DESIGN
// DotNode uses null here...	WITHOUT_CLASSIFICATION	0.8714472726513054	WITHOUT_CLASSIFICATION	0.12855272734869458	DESIGN
// We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.999999207048022	WITHOUT_CLASSIFICATION	7.929519779022777E-7	DESIGN
// we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999994469785233	WITHOUT_CLASSIFICATION	5.530214767194529E-7	DESIGN
// we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9999977218987525	WITHOUT_CLASSIFICATION	2.278101247424583E-6	DESIGN
// we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9998701288415737	WITHOUT_CLASSIFICATION	1.2987115842632104E-4	DESIGN
// EARLY EXIT!!!  return so the resolve call explicitly coming from DotNode can // resolve this...	WITHOUT_CLASSIFICATION	0.9725613903707685	WITHOUT_CLASSIFICATION	0.027438609629231506	DESIGN
// assume this ident's text does *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9996558576758177	WITHOUT_CLASSIFICATION	3.441423241823559E-4	DESIGN
// just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9857098361688674	WITHOUT_CLASSIFICATION	0.01429016383113245	DESIGN
// This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9995873989422881	WITHOUT_CLASSIFICATION	4.126010577119148E-4	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998761696048414	WITHOUT_CLASSIFICATION	1.2383039515858905E-4	DESIGN
// these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999841795434122	WITHOUT_CLASSIFICATION	1.582045658781742E-5	DESIGN
// used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9996402391462617	WITHOUT_CLASSIFICATION	3.597608537382866E-4	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999723830181011	WITHOUT_CLASSIFICATION	2.761698189889836E-5	DESIGN
// assume we do *not* refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9999723830181011	WITHOUT_CLASSIFICATION	2.761698189889836E-5	DESIGN
// naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9998215362888931	WITHOUT_CLASSIFICATION	1.7846371110693117E-4	DESIGN
// this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9999918602505515	WITHOUT_CLASSIFICATION	8.139749448522043E-6	DESIGN
// do *not* over-write the column text, as that has already been // "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9999996871846326	WITHOUT_CLASSIFICATION	3.128153674648895E-7	DESIGN
// for some reason the antlr.CommonAST initialization routines force // this method to get called twice.  The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999979993899775	WITHOUT_CLASSIFICATION	2.000610022403959E-6	DESIGN
// Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999873728628005	WITHOUT_CLASSIFICATION	1.2627137199532313E-5	DESIGN
// Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9999442533722409	WITHOUT_CLASSIFICATION	5.5746627759021636E-5	DESIGN
// If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9999994863577262	WITHOUT_CLASSIFICATION	5.136422737767366E-7	DESIGN
// This is the root level node. // Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9999377942967924	WITHOUT_CLASSIFICATION	6.220570320756373E-5	DESIGN
// Correlated subqueries create 'special' implied from nodes // because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999999931413138	WITHOUT_CLASSIFICATION	6.85868619744865E-8	DESIGN
// super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9984322303874029	WITHOUT_CLASSIFICATION	0.0015677696125970724	DESIGN
// A collection of entities...	WITHOUT_CLASSIFICATION	0.9999870854589602	WITHOUT_CLASSIFICATION	1.2914541039715764E-5	DESIGN
// A collection of components...	WITHOUT_CLASSIFICATION	0.9999984397114196	WITHOUT_CLASSIFICATION	1.5602885804336463E-6	DESIGN
// A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9999915809565957	WITHOUT_CLASSIFICATION	8.419043404376708E-6	DESIGN
// according to both the ANSI-SQL and EJB3 specs, trim can either take // exactly one parameter or a variable number of parameters between 1 and 4. // from the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If only <trim specification> is omitted, BOTH is assumed; // if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999980613	WITHOUT_CLASSIFICATION	1.938705881075245E-12	DESIGN
// Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9991939617443583	WITHOUT_CLASSIFICATION	8.060382556417889E-4	DESIGN
// Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9999890512507471	WITHOUT_CLASSIFICATION	1.0948749252864718E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9291073333770069	WITHOUT_CLASSIFICATION	0.07089266662299304	DESIGN
// Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999999965333244	WITHOUT_CLASSIFICATION	3.4666754759205636E-9	DESIGN
// If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999997427220226	WITHOUT_CLASSIFICATION	2.5727797735640664E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// The associated entity is implied, but it must be included in the FROM. // The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999548331623379	WITHOUT_CLASSIFICATION	4.51668376620855E-5	DESIGN
// Tag this node as a JOIN. // Don't include subclasses in the join. // This is a clollection join.	WITHOUT_CLASSIFICATION	0.999999199034903	WITHOUT_CLASSIFICATION	8.009650969276661E-7	DESIGN
// Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999956206358739	WITHOUT_CLASSIFICATION	4.379364126092759E-5	DESIGN
//  origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999980813692098	WITHOUT_CLASSIFICATION	1.9186307902508232E-6	DESIGN
/*implied*/	WITHOUT_CLASSIFICATION	0.999188938209958	WITHOUT_CLASSIFICATION	8.110617900419869E-4	DESIGN
// For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999990554409196	WITHOUT_CLASSIFICATION	9.445590804662074E-7	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999260741259487	WITHOUT_CLASSIFICATION	7.392587405128974E-5	DESIGN
// the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999956734303769	WITHOUT_CLASSIFICATION	4.326569623134997E-6	DESIGN
// This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.999841950509287	WITHOUT_CLASSIFICATION	1.580494907128405E-4	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996608829130358	WITHOUT_CLASSIFICATION	3.391170869641986E-4	DESIGN
// Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9999816077558741	WITHOUT_CLASSIFICATION	1.8392244125929547E-5	DESIGN
/*	WITHOUT_CLASSIFICATION	0.8958741317335626	WITHOUT_CLASSIFICATION	0.10412586826643744	DESIGN
/*public Type[] getSqlResultTypes() {	WITHOUT_CLASSIFICATION	0.8324585068951869	WITHOUT_CLASSIFICATION	0.16754149310481323	DESIGN
// First, collect all of the select expressions. // NOTE: This must be done *before* invoking setScalarColumnText() because setScalarColumnText() // changes the AST!!!	WITHOUT_CLASSIFICATION	0.9999958124231909	WITHOUT_CLASSIFICATION	4.187576809015762E-6	DESIGN
// First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9986497041627015	WITHOUT_CLASSIFICATION	0.0013502958372985897	DESIGN
//sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9999937228611233	WITHOUT_CLASSIFICATION	6.277138876716138E-6	DESIGN
// If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9999958426258178	WITHOUT_CLASSIFICATION	4.157374182248702E-6	DESIGN
//sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.999997049984305	WITHOUT_CLASSIFICATION	2.950015694895039E-6	DESIGN
// Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9999237858907758	WITHOUT_CLASSIFICATION	7.621410922427327E-5	DESIGN
// add the fetched entities	WITHOUT_CLASSIFICATION	0.9999973399744216	WITHOUT_CLASSIFICATION	2.6600255783876164E-6	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997875588174	WITHOUT_CLASSIFICATION	2.1244118263231074E-7	DESIGN
// function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999939563870953	WITHOUT_CLASSIFICATION	6.043612904697048E-5	DESIGN
// If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999999782807791	WITHOUT_CLASSIFICATION	2.1719220938334657E-8	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999793782583623	WITHOUT_CLASSIFICATION	2.062174163771771E-5	DESIGN
/*ArrayList sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999997949656942	WITHOUT_CLASSIFICATION	2.0503430569047715E-7	DESIGN
//sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999999325854233	WITHOUT_CLASSIFICATION	6.741457663519323E-8	DESIGN
// lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999180999178935	WITHOUT_CLASSIFICATION	8.190008210653466E-5	DESIGN
//TODO:	WITHOUT_CLASSIFICATION	0.9962513590650192	WITHOUT_CLASSIFICATION	0.003748640934980755	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999982886619755	WITHOUT_CLASSIFICATION	1.7113380245587274E-6	DESIGN
// Generate an 2d array of column names, the first dimension is parallel with the // return types array.  The second dimension is the list of column names for each // type.	WITHOUT_CLASSIFICATION	0.9999997936066858	WITHOUT_CLASSIFICATION	2.0639331418241322E-7	DESIGN
// Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999416857067	WITHOUT_CLASSIFICATION	5.831429325376425E-8	DESIGN
// union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999925135862314	WITHOUT_CLASSIFICATION	7.486413768563535E-6	DESIGN
// Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999910575267958	WITHOUT_CLASSIFICATION	8.94247320413329E-6	DESIGN
// Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9999959701432548	WITHOUT_CLASSIFICATION	4.029856745157952E-6	DESIGN
// Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999993542249776	WITHOUT_CLASSIFICATION	6.4577502240134645E-6	DESIGN
// Get the function name node.	WITHOUT_CLASSIFICATION	0.9999970214430792	WITHOUT_CLASSIFICATION	2.9785569208081264E-6	DESIGN
// Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9344547514599173	WITHOUT_CLASSIFICATION	0.06554524854008278	DESIGN
// If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.999998816874826	WITHOUT_CLASSIFICATION	1.1831251741329683E-6	DESIGN
// Not elements(x)	WITHOUT_CLASSIFICATION	0.999904064530022	WITHOUT_CLASSIFICATION	9.593546997799632E-5	DESIGN
// Dialect function	WITHOUT_CLASSIFICATION	0.9999958008042635	WITHOUT_CLASSIFICATION	4.199195736533063E-6	DESIGN
// Collection 'property function'	WITHOUT_CLASSIFICATION	0.9999874443572826	WITHOUT_CLASSIFICATION	1.2555642717418143E-5	DESIGN
// If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998482053622817	WITHOUT_CLASSIFICATION	1.517946377182286E-4	DESIGN
// IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9999982969424784	WITHOUT_CLASSIFICATION	1.7030575216187447E-6	DESIGN
// Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9949808921422072	WITHOUT_CLASSIFICATION	0.005019107857792899	DESIGN
// Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9999817185759764	WITHOUT_CLASSIFICATION	1.828142402364973E-5	DESIGN
// the name of an entity class	WITHOUT_CLASSIFICATION	0.9999046636950133	WITHOUT_CLASSIFICATION	9.533630498679744E-5	DESIGN
//the class discriminator value	WITHOUT_CLASSIFICATION	0.9999961223963953	WITHOUT_CLASSIFICATION	3.877603604618635E-6	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995865643428	WITHOUT_CLASSIFICATION	4.1343565720184043E-7	DESIGN
// Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999995877549873	WITHOUT_CLASSIFICATION	4.122450126154408E-7	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999832621949	WITHOUT_CLASSIFICATION	1.673780510926006E-8	DESIGN
// child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9999999820698237	WITHOUT_CLASSIFICATION	1.7930176347246248E-8	DESIGN
// Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999999832621949	WITHOUT_CLASSIFICATION	1.673780510926006E-8	DESIGN
// Filter conditions need to be inserted before the HQL where condition and the // theta join node.  This is because org.hibernate.loader.Loader binds the filter parameters first, // then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999999340415554	WITHOUT_CLASSIFICATION	6.595844450970799E-8	DESIGN
// Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999441009591479	WITHOUT_CLASSIFICATION	5.589904085222422E-5	DESIGN
// add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9999343832892783	WITHOUT_CLASSIFICATION	6.561671072170812E-5	DESIGN
// Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999999333390331	WITHOUT_CLASSIFICATION	6.66609668365957E-8	DESIGN
// Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999973173173687	WITHOUT_CLASSIFICATION	2.682682631157776E-6	DESIGN
// add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9999735489958771	WITHOUT_CLASSIFICATION	2.645100412289115E-5	DESIGN
// First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999967632201872	WITHOUT_CLASSIFICATION	3.236779812907623E-6	DESIGN
// unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9999249218922306	WITHOUT_CLASSIFICATION	7.507810776937744E-5	DESIGN
// If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998692043830973	WITHOUT_CLASSIFICATION	1.3079561690260656E-4	DESIGN
// Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.999997643835177	WITHOUT_CLASSIFICATION	2.356164822946903E-6	DESIGN
// locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999999342373032	WITHOUT_CLASSIFICATION	6.576269691667462E-8	DESIGN
// determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9999826828101864	WITHOUT_CLASSIFICATION	1.7317189813501377E-5	DESIGN
// Use the DOT node to emit the first column name. // Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999999794832832	WITHOUT_CLASSIFICATION	2.0516716693641282E-8	DESIGN
// Note: this simply constructs a "raw" SQL_TOKEN representing the // where fragment and injects this into the tree.  This "works"; // however it is probably not the best long-term solution. // // At some point we probably want to apply an additional grammar to // properly tokenize this where fragment into constituent parts // focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999999815373525	DESIGN	1.8462647537700066E-8	WITHOUT_CLASSIFICATION
// Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999987783321789	WITHOUT_CLASSIFICATION	1.2216678212240334E-6	DESIGN
// If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.999999999336769	WITHOUT_CLASSIFICATION	6.632309468570888E-10	DESIGN
// If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999989374104333	WITHOUT_CLASSIFICATION	1.0625895667281295E-6	DESIGN
// Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999971510033742	WITHOUT_CLASSIFICATION	2.8489966258580737E-6	DESIGN
// If the from element represents a JOIN_FRAGMENT and it is // a theta-style join, convert its type from JOIN_FRAGMENT // to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999998079107725	WITHOUT_CLASSIFICATION	1.920892273904167E-7	DESIGN
// this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.9988749583895902	WITHOUT_CLASSIFICATION	0.0011250416104098234	DESIGN
// If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9997581087683409	WITHOUT_CLASSIFICATION	2.418912316590422E-4	DESIGN
/*&& StringHelper.isNotEmpty( frag )*/	WITHOUT_CLASSIFICATION	0.9999449540272198	WITHOUT_CLASSIFICATION	5.5045972780275954E-5	DESIGN
// The FROM fragment will probably begin with ', '.  Remove this if it is present.	WITHOUT_CLASSIFICATION	0.8574876254295828	WITHOUT_CLASSIFICATION	0.14251237457041727	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999691555980107	WITHOUT_CLASSIFICATION	3.0844401989392726E-5	DESIGN
// SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999998784092262	WITHOUT_CLASSIFICATION	1.2159077381196538E-7	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999895279897713	WITHOUT_CLASSIFICATION	1.0472010228708562E-4	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9945544422738363	WITHOUT_CLASSIFICATION	0.0054455577261637795	DESIGN
//default mode	WITHOUT_CLASSIFICATION	0.9996661493942764	WITHOUT_CLASSIFICATION	3.3385060572357634E-4	DESIGN
//QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999975221760312	WITHOUT_CLASSIFICATION	2.4778239687893665E-6	DESIGN
//reset the dotcount (but not the path) //after reset!	WITHOUT_CLASSIFICATION	0.9999968891139677	WITHOUT_CLASSIFICATION	3.1108860323486793E-6	DESIGN
//after reset!	WITHOUT_CLASSIFICATION	0.9999863651308225	WITHOUT_CLASSIFICATION	1.3634869177497754E-5	DESIGN
// we don't need to worry about any condition in the ON clause // here (toFromFragmentString), since anything in the ON condition // is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9995671180508726	WITHOUT_CLASSIFICATION	4.328819491273273E-4	DESIGN
// bit_length feels a bit broken to me. We have to cast to char in order to // pass when a numeric value is supplied. But of course the answers given will // be wildly different for these two datatypes. 1234.5678 will be 9 bytes as // a char string but will be 8 or 16 bytes as a true numeric. // Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9996238524278009	WITHOUT_CLASSIFICATION	3.761475721990272E-4	DESIGN
// dotcount>=2	WITHOUT_CLASSIFICATION	0.9999802650991835	WITHOUT_CLASSIFICATION	1.9734900816525033E-5	DESIGN
// Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9999899665951836	WITHOUT_CLASSIFICATION	1.0033404816485057E-5	DESIGN
//if its "id"	WITHOUT_CLASSIFICATION	0.9999562468363753	WITHOUT_CLASSIFICATION	4.375316362472071E-5	DESIGN
//or its the id property name	WITHOUT_CLASSIFICATION	0.9999463553738365	WITHOUT_CLASSIFICATION	5.3644626163452526E-5	DESIGN
//join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999981367145576	WITHOUT_CLASSIFICATION	1.8632854423877909E-6	DESIGN
//important!!	WITHOUT_CLASSIFICATION	0.9994737964943727	WITHOUT_CLASSIFICATION	5.262035056272198E-4	DESIGN
//String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9999988010385594	WITHOUT_CLASSIFICATION	1.198961440564262E-6	DESIGN
// an association	WITHOUT_CLASSIFICATION	0.9999934970035822	WITHOUT_CLASSIFICATION	6.502996417796472E-6	DESIGN
//allow index() function:	WITHOUT_CLASSIFICATION	0.9999830860910263	WITHOUT_CLASSIFICATION	1.6913908973705924E-5	DESIGN
// here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9947977741749363	WITHOUT_CLASSIFICATION	0.005202225825063712	DESIGN
// The reason for this is SQL doesn't let you sort by an expression you are // not returning in the result set.	WITHOUT_CLASSIFICATION	0.999895279897713	WITHOUT_CLASSIFICATION	1.0472010228708562E-4	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9988907500790181	WITHOUT_CLASSIFICATION	0.0011092499209818933	DESIGN
// collections of values	WITHOUT_CLASSIFICATION	0.9999956018751999	WITHOUT_CLASSIFICATION	4.398124800157601E-6	DESIGN
//opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9977530226676705	WITHOUT_CLASSIFICATION	0.0022469773323295036	DESIGN
//if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9999992232401854	WITHOUT_CLASSIFICATION	7.767598146588763E-7	DESIGN
//special case	WITHOUT_CLASSIFICATION	0.9999993875055043	WITHOUT_CLASSIFICATION	6.124944956366167E-7	DESIGN
// the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999936298799115	WITHOUT_CLASSIFICATION	6.3701200885424935E-6	DESIGN
//null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9997772929738831	WITHOUT_CLASSIFICATION	2.2270702611704372E-4	DESIGN
//this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9649887134723988	DESIGN	0.03501128652760129	WITHOUT_CLASSIFICATION
// SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9999984641217238	WITHOUT_CLASSIFICATION	1.5358782762369077E-6	DESIGN
// return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9989204732966873	WITHOUT_CLASSIFICATION	0.0010795267033126977	DESIGN
//register collection role	WITHOUT_CLASSIFICATION	0.9999575990972814	WITHOUT_CLASSIFICATION	4.240090271860299E-5	DESIGN
// The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9999999444222668	WITHOUT_CLASSIFICATION	5.55777332468318E-8	DESIGN
//.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9999706240655412	WITHOUT_CLASSIFICATION	2.9375934458764697E-5	DESIGN
//crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9998980303066098	WITHOUT_CLASSIFICATION	1.0196969339007948E-4	DESIGN
//ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9999996046696172	WITHOUT_CLASSIFICATION	3.9533038271968757E-7	DESIGN
// initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9999936621757635	WITHOUT_CLASSIFICATION	6.337824236505609E-6	DESIGN
//ie. no select clause	WITHOUT_CLASSIFICATION	0.9999998860818469	WITHOUT_CLASSIFICATION	1.1391815306450769E-7	DESIGN
//there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9999999020803774	WITHOUT_CLASSIFICATION	9.791962262481506E-8	DESIGN
// return the concrete type, or the underlying type if a concrete type // was not specified	WITHOUT_CLASSIFICATION	0.9999482674742695	WITHOUT_CLASSIFICATION	5.173252573056603E-5	DESIGN
//many-to-many	WITHOUT_CLASSIFICATION	0.9988907500790181	WITHOUT_CLASSIFICATION	0.0011092499209818933	DESIGN
//q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9999968893437093	WITHOUT_CLASSIFICATION	3.1106562907280754E-6	DESIGN
// classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.999442308567154	WITHOUT_CLASSIFICATION	5.576914328459369E-4	DESIGN
// can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9999979370019667	WITHOUT_CLASSIFICATION	2.0629980332834036E-6	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9990162943084638	WITHOUT_CLASSIFICATION	9.837056915361585E-4	DESIGN
// This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9998733020486279	WITHOUT_CLASSIFICATION	1.2669795137204546E-4	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962692121396188	WITHOUT_CLASSIFICATION	0.003730787860381113	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962692121396188	WITHOUT_CLASSIFICATION	0.003730787860381113	DESIGN
// we have the form: trim(trimSource) //      so we trim leading and trailing spaces // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999999668148508	WITHOUT_CLASSIFICATION	3.318514924338657E-8	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962692121396188	WITHOUT_CLASSIFICATION	0.003730787860381113	DESIGN
// not known!	WITHOUT_CLASSIFICATION	0.9962692121396188	WITHOUT_CLASSIFICATION	0.003730787860381113	DESIGN
//Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.5759762238936378	WITHOUT_CLASSIFICATION	0.4240237761063623	DESIGN
//tokens that close a sub expression //tokens that open a sub expression //tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999587365157703	WITHOUT_CLASSIFICATION	4.126348422983108E-5	DESIGN
//expressionTerminators.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999718790597194	WITHOUT_CLASSIFICATION	2.8120940280545874E-5	DESIGN
//expressionOpeners.add(","); // deliberately excluded	WITHOUT_CLASSIFICATION	0.9999969124148375	WITHOUT_CLASSIFICATION	3.087585162509036E-6	DESIGN
// we have the form: trim(from trimSource). //      This is functionally equivalent to trim(trimSource) // EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999127607808226	WITHOUT_CLASSIFICATION	8.723921917745717E-5	DESIGN
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character (what is to be trimmed off?) // the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9628257806307479	WITHOUT_CLASSIFICATION	0.037174219369252096	DESIGN
//Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9976192165253612	WITHOUT_CLASSIFICATION	0.0023807834746388855	DESIGN
//were an odd or even number of NOTs encountered //the join string built up by compound paths inside this expression //a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999993087728793	WITHOUT_CLASSIFICATION	6.912271206601672E-7	DESIGN
//ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9993163515387699	WITHOUT_CLASSIFICATION	6.836484612301722E-4	DESIGN
//Cope with [,]	WITHOUT_CLASSIFICATION	0.9998126489213618	WITHOUT_CLASSIFICATION	1.873510786383223E-4	DESIGN
//Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9980993312290763	WITHOUT_CLASSIFICATION	0.0019006687709236074	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996044857783519	WITHOUT_CLASSIFICATION	3.955142216480928E-4	DESIGN
//Cope with a subselect	WITHOUT_CLASSIFICATION	0.9998179319126483	WITHOUT_CLASSIFICATION	1.8206808735173822E-4	DESIGN
//Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999952332423793	WITHOUT_CLASSIFICATION	4.76675762077884E-6	DESIGN
//Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9999896681554666	WITHOUT_CLASSIFICATION	1.0331844533313858E-5	DESIGN
//take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9963555271288044	WITHOUT_CLASSIFICATION	0.003644472871195489	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999446704775	WITHOUT_CLASSIFICATION	5.532952244633628E-8	DESIGN
//process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9999977929228946	WITHOUT_CLASSIFICATION	2.2070771053878562E-6	DESIGN
//Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.957249546272775	WITHOUT_CLASSIFICATION	0.04275045372722504	DESIGN
//Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.999988743700815	WITHOUT_CLASSIFICATION	1.125629918498751E-5	DESIGN
// the next one up must also be	WITHOUT_CLASSIFICATION	0.99999137692559	WITHOUT_CLASSIFICATION	8.623074410003463E-6	DESIGN
// Add any joins	WITHOUT_CLASSIFICATION	0.9999976660928477	WITHOUT_CLASSIFICATION	2.3339071523249035E-6	DESIGN
// assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999999446704775	WITHOUT_CLASSIFICATION	5.532952244633628E-8	DESIGN
//named query parameter	WITHOUT_CLASSIFICATION	0.9945544422738363	WITHOUT_CLASSIFICATION	0.0054455577261637795	DESIGN
//path expression	WITHOUT_CLASSIFICATION	0.9999509786296324	WITHOUT_CLASSIFICATION	4.9021370367686075E-5	DESIGN
// saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999998483062729	WITHOUT_CLASSIFICATION	1.5169372715253824E-7	DESIGN
// persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999997384529645	WITHOUT_CLASSIFICATION	2.615470354620509E-7	DESIGN
//anything else	WITHOUT_CLASSIFICATION	0.9999862802846414	WITHOUT_CLASSIFICATION	1.3719715358708427E-5	DESIGN
// the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999952187501829	WITHOUT_CLASSIFICATION	4.781249817046504E-6	DESIGN
// careful with this!	WITHOUT_CLASSIFICATION	0.9999571954050351	WITHOUT_CLASSIFICATION	4.2804594964901374E-5	DESIGN
// the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999723924271404	WITHOUT_CLASSIFICATION	2.7607572859658143E-5	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999993686497967	WITHOUT_CLASSIFICATION	6.313502033049164E-7	DESIGN
//NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9933919951637236	WITHOUT_CLASSIFICATION	0.006608004836276468	DESIGN
//cannot instantiate	WITHOUT_CLASSIFICATION	0.9997769535291113	WITHOUT_CLASSIFICATION	2.230464708885269E-4	DESIGN
// start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9999959833500359	WITHOUT_CLASSIFICATION	4.016649964083637E-6	DESIGN
// inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9999586481368733	WITHOUT_CLASSIFICATION	4.135186312675018E-5	DESIGN
// 'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9999999933012245	WITHOUT_CLASSIFICATION	6.698775445079241E-9	DESIGN
// now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9999403530695532	WITHOUT_CLASSIFICATION	5.964693044681066E-5	DESIGN
// process the "old" HQL style where aliases appear _first_ // ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999994196143815	WITHOUT_CLASSIFICATION	5.803856184591568E-7	DESIGN
// treat it as a classname	WITHOUT_CLASSIFICATION	0.9999949196975207	WITHOUT_CLASSIFICATION	5.080302479243393E-6	DESIGN
// treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999950482540683	WITHOUT_CLASSIFICATION	4.951745931751074E-6	DESIGN
// starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9991239771145227	WITHOUT_CLASSIFICATION	8.760228854772877E-4	DESIGN
// starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998249560261231	WITHOUT_CLASSIFICATION	1.7504397387678504E-4	DESIGN
//allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9988379502532031	WITHOUT_CLASSIFICATION	0.0011620497467969427	DESIGN
//handle quoted strings	WITHOUT_CLASSIFICATION	0.9999609909084275	WITHOUT_CLASSIFICATION	3.900909157250272E-5	DESIGN
// Object insertions, updates, and deletions have list semantics because // they must happen in the right order so as to respect referential // integrity	WITHOUT_CLASSIFICATION	0.9999947954791698	WITHOUT_CLASSIFICATION	5.204520830234989E-6	DESIGN
// "finish off" the join	WITHOUT_CLASSIFICATION	0.9999993686497967	WITHOUT_CLASSIFICATION	6.313502033049164E-7	DESIGN
//ignore whitespace	WITHOUT_CLASSIFICATION	0.9999977529477639	WITHOUT_CLASSIFICATION	2.2470522360231507E-6	DESIGN
//do replacements	WITHOUT_CLASSIFICATION	0.9995388115306691	WITHOUT_CLASSIFICATION	4.6118846933081143E-4	DESIGN
//handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9999516488595424	WITHOUT_CLASSIFICATION	4.8351140457667725E-5	DESIGN
// uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9994853126063197	WITHOUT_CLASSIFICATION	5.146873936803604E-4	DESIGN
// AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981859381288	WITHOUT_CLASSIFICATION	1.8140618712295677E-6	DESIGN
//hilo params	WITHOUT_CLASSIFICATION	0.9999857953788539	WITHOUT_CLASSIFICATION	1.420462114611191E-5	DESIGN
//sql = query;	WITHOUT_CLASSIFICATION	0.9999587403149008	WITHOUT_CLASSIFICATION	4.125968509919696E-5	DESIGN
// performance opt	WITHOUT_CLASSIFICATION	0.9999867005079878	WITHOUT_CLASSIFICATION	1.3299492012280487E-5	DESIGN
//sql = update;	WITHOUT_CLASSIFICATION	0.9999965247125523	WITHOUT_CLASSIFICATION	3.4752874477211116E-6	DESIGN
//hilo config	WITHOUT_CLASSIFICATION	0.9999747189614252	WITHOUT_CLASSIFICATION	2.5281038574825338E-5	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999991329339856	WITHOUT_CLASSIFICATION	8.670660144884576E-7	DESIGN
// don't allow comments on these insert statements as comments totally // blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9999998336086598	WITHOUT_CLASSIFICATION	1.6639134007815466E-7	DESIGN
//abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9877504910253583	WITHOUT_CLASSIFICATION	0.012249508974641674	DESIGN
//throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999999773422983	WITHOUT_CLASSIFICATION	2.265770170487928E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998259197299036	WITHOUT_CLASSIFICATION	1.740802700964636E-4	DESIGN
//do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.999997993821055	WITHOUT_CLASSIFICATION	2.0061789448634487E-6	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996498392703818	WITHOUT_CLASSIFICATION	3.501607296182692E-4	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999991329339856	WITHOUT_CLASSIFICATION	8.670660144884576E-7	DESIGN
// do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9999995450211149	WITHOUT_CLASSIFICATION	4.5497888510352245E-7	DESIGN
/* COLUMN and TABLE should be renamed but it would break the public API */	WITHOUT_CLASSIFICATION	0.9863423375818786	WITHOUT_CLASSIFICATION	0.0136576624181214	DESIGN
// Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9999986944080289	WITHOUT_CLASSIFICATION	1.3055919709863647E-6	DESIGN
// if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998864131358204	WITHOUT_CLASSIFICATION	1.1358686417955458E-4	DESIGN
// the default...	WITHOUT_CLASSIFICATION	0.999839136202578	WITHOUT_CLASSIFICATION	1.6086379742190373E-4	DESIGN
// unfortunately not really safe to normalize this // to 1 as an initial value like we do the others // because we would not be able to control this if // we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999999791699107	WITHOUT_CLASSIFICATION	2.08300894250969E-8	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998259197299036	WITHOUT_CLASSIFICATION	1.740802700964636E-4	DESIGN
// Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999997524943821	WITHOUT_CLASSIFICATION	2.4750561792855786E-7	DESIGN
// general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999995856026223	WITHOUT_CLASSIFICATION	4.143973777050599E-6	DESIGN
// table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991816932134	WITHOUT_CLASSIFICATION	8.183067864703573E-7	DESIGN
// Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941572980032	WITHOUT_CLASSIFICATION	5.842701996817315E-6	DESIGN
// IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999971637331904	WITHOUT_CLASSIFICATION	2.8362668097595535E-6	DESIGN
// PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999976480406015	WITHOUT_CLASSIFICATION	2.3519593984833644E-6	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999890420344	WITHOUT_CLASSIFICATION	1.0957965747522995E-8	DESIGN
// prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9999999890420344	WITHOUT_CLASSIFICATION	1.0957965747522995E-8	DESIGN
//fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9971129931619538	WITHOUT_CLASSIFICATION	0.0028870068380462063	DESIGN
// we just hit the last position	WITHOUT_CLASSIFICATION	0.9999980181557973	WITHOUT_CLASSIFICATION	1.9818442026822497E-6	DESIGN
// scroll ahead	WITHOUT_CLASSIFICATION	0.9997587165177478	WITHOUT_CLASSIFICATION	2.412834822520627E-4	DESIGN
// scroll backward	WITHOUT_CLASSIFICATION	0.9999780784194751	WITHOUT_CLASSIFICATION	2.1921580525028672E-5	DESIGN
// we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9999938081290813	WITHOUT_CLASSIFICATION	6.191870918734859E-6	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999592480341096	WITHOUT_CLASSIFICATION	4.075196589030644E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977898425507	WITHOUT_CLASSIFICATION	2.2101574492285534E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981780971112	WITHOUT_CLASSIFICATION	1.821902888811299E-6	DESIGN
// do this when all the properties are updateable since there is // a certain likelihood that the information will already be // snapshot-cached.	WITHOUT_CLASSIFICATION	0.9981549302266199	WITHOUT_CLASSIFICATION	0.0018450697733800438	DESIGN
// Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999984184843	WITHOUT_CLASSIFICATION	1.5815157007642964E-8	DESIGN
// Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999592480341096	WITHOUT_CLASSIFICATION	4.075196589030644E-5	DESIGN
// State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999977898425507	WITHOUT_CLASSIFICATION	2.2101574492285534E-6	DESIGN
// Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999981780971112	WITHOUT_CLASSIFICATION	1.821902888811299E-6	DESIGN
// Caches	WITHOUT_CLASSIFICATION	0.9999820146976746	WITHOUT_CLASSIFICATION	1.798530232543574E-5	DESIGN
//Generators:	WITHOUT_CLASSIFICATION	0.9978652788776979	WITHOUT_CLASSIFICATION	0.0021347211223020942	DESIGN
// cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999990259543296	WITHOUT_CLASSIFICATION	9.740456703940337E-6	DESIGN
//check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9993412633301494	WITHOUT_CLASSIFICATION	6.587366698505179E-4	DESIGN
// after *all* persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9999221539922815	WITHOUT_CLASSIFICATION	7.784600771858075E-5	DESIGN
// if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... // 	WITHOUT_CLASSIFICATION	0.9998196323298743	WITHOUT_CLASSIFICATION	1.8036767012576314E-4	DESIGN
//JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9999979180348945	WITHOUT_CLASSIFICATION	2.081965105597447E-6	DESIGN
//checking for named queries	WITHOUT_CLASSIFICATION	0.9957032317424129	WITHOUT_CLASSIFICATION	0.0042967682575870605	DESIGN
//stats	WITHOUT_CLASSIFICATION	0.9996552865078926	WITHOUT_CLASSIFICATION	3.447134921074556E-4	DESIGN
// EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9999430279866418	WITHOUT_CLASSIFICATION	5.697201335829176E-5	DESIGN
// Check named HQL queries	WITHOUT_CLASSIFICATION	0.999979248681847	WITHOUT_CLASSIFICATION	2.0751318153097998E-5	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9939803890850405	WITHOUT_CLASSIFICATION	0.006019610914959441	DESIGN
//prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9973662564192163	WITHOUT_CLASSIFICATION	0.0026337435807837085	DESIGN
// from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9999074847580776	WITHOUT_CLASSIFICATION	9.25152419225155E-5	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9996851024124069	WITHOUT_CLASSIFICATION	3.1489758759308716E-4	DESIGN
//for a dynamic-class	WITHOUT_CLASSIFICATION	0.999326921864679	WITHOUT_CLASSIFICATION	6.73078135321059E-4	DESIGN
//test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995412904689254	WITHOUT_CLASSIFICATION	4.58709531074565E-4	DESIGN
//NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.999972092300907	WITHOUT_CLASSIFICATION	2.790769909311935E-5	DESIGN
// for backward-compatability	WITHOUT_CLASSIFICATION	0.999983794034822	WITHOUT_CLASSIFICATION	1.6205965178096048E-5	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995604418507	WITHOUT_CLASSIFICATION	4.3955814925931126E-7	DESIGN
//to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9999992983020385	WITHOUT_CLASSIFICATION	7.016979615665274E-7	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8486846696314193	WITHOUT_CLASSIFICATION	0.15131533036858075	DESIGN
//must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9999999929111962	WITHOUT_CLASSIFICATION	7.088803783381087E-9	DESIGN
// Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9999780918112611	WITHOUT_CLASSIFICATION	2.1908188739001225E-5	DESIGN
// for each of the defined parameters, make sure its value // has been set	WITHOUT_CLASSIFICATION	0.9999982052909635	WITHOUT_CLASSIFICATION	1.7947090365678516E-6	DESIGN
//we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9949008537685037	WITHOUT_CLASSIFICATION	0.005099146231496284	DESIGN
// inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999969290479712	WITHOUT_CLASSIFICATION	3.0709520287084875E-6	DESIGN
// deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999991335644349	WITHOUT_CLASSIFICATION	8.664355649894805E-7	DESIGN
// during deserialization, we need to reconnect all proxies and // collections to this session, as well as the EntityEntry and // CollectionEntry instances; these associations are transient // because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.999995893841671	WITHOUT_CLASSIFICATION	4.1061583290384795E-6	DESIGN
// updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999994902375711	WITHOUT_CLASSIFICATION	5.0976242902097E-7	DESIGN
// loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997436222581	WITHOUT_CLASSIFICATION	2.563777419027252E-7	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999379358355406	WITHOUT_CLASSIFICATION	6.206416445946245E-5	DESIGN
//final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999379358355406	WITHOUT_CLASSIFICATION	6.206416445946245E-5	DESIGN
// first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.999989491746229	WITHOUT_CLASSIFICATION	1.0508253770962254E-5	DESIGN
// if the metadata allowed proxy creation and caller did not request forceful eager loading, // generate a proxy	WITHOUT_CLASSIFICATION	0.9999999998684118	WITHOUT_CLASSIFICATION	1.3158823874533896E-10	DESIGN
// otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9999898915555386	WITHOUT_CLASSIFICATION	1.0108444461381147E-5	DESIGN
/////////////////////////////////////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995072487727535	WITHOUT_CLASSIFICATION	4.92751227246549E-4	DESIGN
// no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9998943544142611	WITHOUT_CLASSIFICATION	1.0564558573896164E-4	DESIGN
//after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9992038960279093	WITHOUT_CLASSIFICATION	7.961039720908345E-4	DESIGN
//for EJB3	WITHOUT_CLASSIFICATION	0.9994015838160519	WITHOUT_CLASSIFICATION	5.984161839481389E-4	DESIGN
// just ignore	WITHOUT_CLASSIFICATION	0.9999993626411682	WITHOUT_CLASSIFICATION	6.373588318251866E-7	DESIGN
// do a check	WITHOUT_CLASSIFICATION	0.9995652933754736	WITHOUT_CLASSIFICATION	4.347066245263362E-4	DESIGN
// saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999267788705	WITHOUT_CLASSIFICATION	7.322112955357785E-8	DESIGN
// update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999670564872	WITHOUT_CLASSIFICATION	3.294351280246571E-8	DESIGN
// lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997978913711	WITHOUT_CLASSIFICATION	2.0210862888032799E-7	DESIGN
// persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999321313068	WITHOUT_CLASSIFICATION	6.786869326283044E-8	DESIGN
// persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999247741478	WITHOUT_CLASSIFICATION	7.522585223257621E-8	DESIGN
// merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999481329594	WITHOUT_CLASSIFICATION	5.186704059279401E-7	DESIGN
// saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998465634738	WITHOUT_CLASSIFICATION	1.534365261257496E-7	DESIGN
// delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999740139921	WITHOUT_CLASSIFICATION	2.5986007904086328E-8	DESIGN
// load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999999598036341	WITHOUT_CLASSIFICATION	4.0196365974102155E-8	DESIGN
// refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998508959472	WITHOUT_CLASSIFICATION	1.4910405275224987E-7	DESIGN
// replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987962448416	WITHOUT_CLASSIFICATION	1.203755158394226E-6	DESIGN
// do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9999945928643472	WITHOUT_CLASSIFICATION	5.407135652853469E-6	DESIGN
// this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.999967903525378	WITHOUT_CLASSIFICATION	3.209647462206581E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990161713648215	WITHOUT_CLASSIFICATION	9.838286351784812E-4	DESIGN
//only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999922234675043	WITHOUT_CLASSIFICATION	7.776532495737813E-6	DESIGN
// if it was previously unreferenced, we need to flush in order to // get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.999841079724771	WITHOUT_CLASSIFICATION	1.5892027522911075E-4	DESIGN
// not for internal use:	WITHOUT_CLASSIFICATION	0.9936947495792591	WITHOUT_CLASSIFICATION	0.006305250420740847	DESIGN
// otherwise, we only need to flush if there are in-memory changes // to the queried tables	WITHOUT_CLASSIFICATION	0.9999999566181588	WITHOUT_CLASSIFICATION	4.3381841299491954E-8	DESIGN
// might need to run a different filter entirely after the flush // because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9999871148278616	WITHOUT_CLASSIFICATION	1.288517213834245E-5	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990161713648215	WITHOUT_CLASSIFICATION	9.838286351784812E-4	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990161713648215	WITHOUT_CLASSIFICATION	9.838286351784812E-4	DESIGN
//if it is initialized, see if the underlying //instance is contained, since we need to  //account for the fact that it might have been //evicted	WITHOUT_CLASSIFICATION	0.9414535055098884	WITHOUT_CLASSIFICATION	0.05854649449011167	DESIGN
// basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.999994510721225	WITHOUT_CLASSIFICATION	5.489278775046584E-6	DESIGN
// it is possible for this method to be called during flush processing, // so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997517394779174	WITHOUT_CLASSIFICATION	2.48260522082651E-4	DESIGN
// nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9998552836428887	WITHOUT_CLASSIFICATION	1.4471635711126553E-4	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999996017603694	WITHOUT_CLASSIFICATION	3.982396305501183E-7	DESIGN
// ignore this error for now	WITHOUT_CLASSIFICATION	0.9999995604418507	WITHOUT_CLASSIFICATION	4.3955814925931126E-7	DESIGN
// we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9999896858652737	WITHOUT_CLASSIFICATION	1.0314134726316742E-5	DESIGN
// the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9999979225478648	WITHOUT_CLASSIFICATION	2.0774521352103315E-6	DESIGN
// parameter bind values...	WITHOUT_CLASSIFICATION	0.9999908722960066	WITHOUT_CLASSIFICATION	9.127703993489522E-6	DESIGN
// Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996665067846171	WITHOUT_CLASSIFICATION	3.334932153829901E-4	DESIGN
// prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999989937934413	WITHOUT_CLASSIFICATION	1.0062065587075917E-6	DESIGN
// Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999837201175982	WITHOUT_CLASSIFICATION	1.6279882401816286E-5	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997377839082285	WITHOUT_CLASSIFICATION	2.622160917714773E-4	DESIGN
// we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9997377839082285	WITHOUT_CLASSIFICATION	2.622160917714773E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998941762040016	WITHOUT_CLASSIFICATION	1.0582379599841914E-4	DESIGN
// we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9998941762040016	WITHOUT_CLASSIFICATION	1.0582379599841914E-4	DESIGN
// FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999790298259277	WITHOUT_CLASSIFICATION	2.0970174072243403E-5	DESIGN
// subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999753283698859	WITHOUT_CLASSIFICATION	2.467163011414574E-5	DESIGN
//let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999999467476259	WITHOUT_CLASSIFICATION	5.325237396241312E-8	DESIGN
// FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999235162697078	WITHOUT_CLASSIFICATION	7.648373029222515E-5	DESIGN
// should *not* need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9994627987316861	WITHOUT_CLASSIFICATION	5.372012683138907E-4	DESIGN
// should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9648768917366715	DESIGN	0.03512310826332856	WITHOUT_CLASSIFICATION
// Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999999748069692	WITHOUT_CLASSIFICATION	2.519303079263945E-7	DESIGN
// Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935255560639	WITHOUT_CLASSIFICATION	6.474443936209296E-6	DESIGN
// explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9823827863343114	WITHOUT_CLASSIFICATION	0.01761721366568851	DESIGN
// used from testsuite	WITHOUT_CLASSIFICATION	0.9999894745884588	WITHOUT_CLASSIFICATION	1.0525411541170874E-5	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999813305204	WITHOUT_CLASSIFICATION	1.8669479598397378E-8	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
// register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9999958773813474	WITHOUT_CLASSIFICATION	4.1226186525204565E-6	DESIGN
//noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9936257041162999	WITHOUT_CLASSIFICATION	0.00637429588370012	DESIGN
// calls executeBatch()	WITHOUT_CLASSIFICATION	0.9999975156036507	WITHOUT_CLASSIFICATION	2.4843963492868605E-6	DESIGN
//no big deal	WITHOUT_CLASSIFICATION	0.9999805894741725	WITHOUT_CLASSIFICATION	1.9410525827518028E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999825799575935	WITHOUT_CLASSIFICATION	1.7420042406426646E-5	DESIGN
// no big deal	WITHOUT_CLASSIFICATION	0.9999825799575935	WITHOUT_CLASSIFICATION	1.7420042406426646E-5	DESIGN
// sybase driver (jConnect) throwing NPE here in certain // cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999999523378686	WITHOUT_CLASSIFICATION	4.766213139845728E-7	DESIGN
// see explanation above...	WITHOUT_CLASSIFICATION	0.9999894993303489	WITHOUT_CLASSIFICATION	1.0500669651106782E-5	DESIGN
// If we are in the process of releasing, no sense // checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999999963461702	WITHOUT_CLASSIFICATION	3.6538299262625795E-9	DESIGN
// EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999967736494259	WITHOUT_CLASSIFICATION	3.2263505741937366E-6	DESIGN
// ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994008962237986	WITHOUT_CLASSIFICATION	5.991037762015241E-4	DESIGN
// ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997373752279988	WITHOUT_CLASSIFICATION	2.6262477200127246E-4	DESIGN
// refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999997483321027	WITHOUT_CLASSIFICATION	2.516678972664278E-7	DESIGN
// ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999499194902679	WITHOUT_CLASSIFICATION	5.008050973215995E-5	DESIGN
// Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999989001035635	WITHOUT_CLASSIFICATION	1.0998964365184308E-6	DESIGN
// we already have a callback registered; either a local // (org.hibernate.Transaction) transaction has accepted // callback responsibilities, or we have previously // registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9999988725717983	WITHOUT_CLASSIFICATION	1.1274282016979184E-6	DESIGN
// the configured transaction-factory says it only supports // local callback mode, so no sense attempting to register a // JTA Synchronization	WITHOUT_CLASSIFICATION	0.999881118906161	WITHOUT_CLASSIFICATION	1.1888109383894656E-4	DESIGN
// transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9999996459287689	WITHOUT_CLASSIFICATION	3.540712312161264E-7	DESIGN
// serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999998864209966	WITHOUT_CLASSIFICATION	1.1357900346519446E-7	DESIGN
//postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9999999793615926	WITHOUT_CLASSIFICATION	2.0638407468394142E-8	DESIGN
// cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9999936087778575	WITHOUT_CLASSIFICATION	6.39122214248666E-6	DESIGN
// todo : for 4.0 //	WITHOUT_CLASSIFICATION	0.9989400735188477	WITHOUT_CLASSIFICATION	0.001059926481152313	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999976212652514	WITHOUT_CLASSIFICATION	2.3787347486637664E-6	DESIGN
// don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9997994183109449	WITHOUT_CLASSIFICATION	2.00581689055108E-4	DESIGN
// don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9994666443868826	WITHOUT_CLASSIFICATION	5.333556131174661E-4	DESIGN
// position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999999977771356	WITHOUT_CLASSIFICATION	2.2228645674755314E-9	DESIGN
// sequentially read the result set in reverse until we recognize // a change in the key value.  At that point, we are pointed at // the last physical sequential row for the logical row in which // we are interested in processing	WITHOUT_CLASSIFICATION	0.9999999929436191	WITHOUT_CLASSIFICATION	7.056380866003835E-9	DESIGN
// Read backwards until we read past the first physical sequential // row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999999999761323	WITHOUT_CLASSIFICATION	2.3867755487843186E-11	DESIGN
// Finally, read ahead one row to position result set cursor // at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995619808362	WITHOUT_CLASSIFICATION	4.3801916382406595E-7	DESIGN
// now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999689361989315	WITHOUT_CLASSIFICATION	3.106380106852932E-5	DESIGN
// force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9999944809405449	WITHOUT_CLASSIFICATION	5.519059455227318E-6	DESIGN
// this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9998538605389319	WITHOUT_CLASSIFICATION	1.4613946106805387E-4	DESIGN
//if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999621687669075	WITHOUT_CLASSIFICATION	3.783123309249663E-5	DESIGN
//final String queryString, 	WITHOUT_CLASSIFICATION	0.9993873964086701	WITHOUT_CLASSIFICATION	6.12603591329841E-4	DESIGN
// if it was a reference to self, don't need to nullify // unless we are using native id generation, in which // case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999999990070224	WITHOUT_CLASSIFICATION	9.929775948352192E-10	DESIGN
//end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999568624545165	WITHOUT_CLASSIFICATION	4.3137545483550396E-5	DESIGN
// in an effort to avoid concurrent-modification-exceptions (from // potential recursive calls back through here as a result of the // eventual call to PersistentCollection#endRead), we scan the // internal loadingCollections map for matches and store those matches // in a temp collection.  the temp collection is then used to "drive" // the #endRead processing.	WITHOUT_CLASSIFICATION	0.9999998578465716	WITHOUT_CLASSIFICATION	1.421534283927443E-7	DESIGN
//we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9999976895348534	WITHOUT_CLASSIFICATION	2.3104651465649826E-6	DESIGN
//can't reuse in this case	WITHOUT_CLASSIFICATION	0.9999230117044391	WITHOUT_CLASSIFICATION	7.698829556091059E-5	DESIGN
// First we need to suspend any current JTA transaction and obtain // a JDBC connection	WITHOUT_CLASSIFICATION	0.9988670012695354	WITHOUT_CLASSIFICATION	0.0011329987304646522	DESIGN
//getResultList(results);	WITHOUT_CLASSIFICATION	0.9999984849206518	WITHOUT_CLASSIFICATION	1.5150793481322281E-6	DESIGN
//if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9998003617198136	WITHOUT_CLASSIFICATION	1.9963828018647065E-4	DESIGN
// a collection loaded in the current session // can not possibly be the collection belonging // to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9999999935963212	WITHOUT_CLASSIFICATION	6.403678776434741E-9	DESIGN
// handle empty collection	WITHOUT_CLASSIFICATION	0.9988682498629836	WITHOUT_CLASSIFICATION	0.0011317501370163021	DESIGN
// else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999999532023457	WITHOUT_CLASSIFICATION	4.6797654254807815E-8	DESIGN
//handle empty collections	WITHOUT_CLASSIFICATION	0.9999627797968387	WITHOUT_CLASSIFICATION	3.722020316131603E-5	DESIGN
// else this is not a collection initializer (and empty collections will // be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9999906286798984	WITHOUT_CLASSIFICATION	9.37132010149382E-6	DESIGN
// validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9999988448315871	WITHOUT_CLASSIFICATION	1.1551684129495533E-6	DESIGN
// if we know there is exactly 1 row, we can skip. // it would be great if we could _always_ skip this; // it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.8999677655379549	DESIGN	0.10003223446204512	WITHOUT_CLASSIFICATION
// remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9999806020701839	WITHOUT_CLASSIFICATION	1.9397929816179917E-5	DESIGN
//null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9996570049245023	WITHOUT_CLASSIFICATION	3.429950754976791E-4	DESIGN
//problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9977941457653462	WITHOUT_CLASSIFICATION	0.0022058542346537397	DESIGN
//use the id passed in	WITHOUT_CLASSIFICATION	0.9999994728194753	WITHOUT_CLASSIFICATION	5.271805246314493E-7	DESIGN
//do nothing	WITHOUT_CLASSIFICATION	0.9999960210288068	WITHOUT_CLASSIFICATION	3.978971193189939E-6	DESIGN
// prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9999998407996198	WITHOUT_CLASSIFICATION	1.5920038021066532E-7	DESIGN
//no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999574937393979	WITHOUT_CLASSIFICATION	4.250626060216864E-5	DESIGN
//If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999762103811256	WITHOUT_CLASSIFICATION	2.3789618874477336E-5	DESIGN
//its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9999481398209733	WITHOUT_CLASSIFICATION	5.186017902667372E-5	DESIGN
// cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9999102664078164	WITHOUT_CLASSIFICATION	8.973359218356772E-5	DESIGN
//the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999996478305008	WITHOUT_CLASSIFICATION	3.521694993022942E-7	DESIGN
//we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999976847012932	WITHOUT_CLASSIFICATION	2.315298706640239E-6	DESIGN
// look for a proxy	WITHOUT_CLASSIFICATION	0.99989444884716	WITHOUT_CLASSIFICATION	1.0555115283997492E-4	DESIGN
//we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.984064156267928	WITHOUT_CLASSIFICATION	0.015935843732072002	DESIGN
//its the given optional object	WITHOUT_CLASSIFICATION	0.9999980569426343	WITHOUT_CLASSIFICATION	1.9430573656311356E-6	DESIGN
// instantiate a new instance	WITHOUT_CLASSIFICATION	0.9995256158953414	WITHOUT_CLASSIFICATION	4.7438410465856405E-4	DESIGN
//need to hydrate it.	WITHOUT_CLASSIFICATION	0.97901628198579	WITHOUT_CLASSIFICATION	0.020983718014209972	DESIGN
// return a newly loaded object	WITHOUT_CLASSIFICATION	0.9999796661786176	WITHOUT_CLASSIFICATION	2.0333821382455236E-5	DESIGN
//will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.999999687974399	WITHOUT_CLASSIFICATION	3.1202560102360294E-7	DESIGN
// key is an entity involved with the operation performed by the listener; // value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999998060768902	WITHOUT_CLASSIFICATION	1.9392310978024867E-7	DESIGN
//materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9982675255443083	WITHOUT_CLASSIFICATION	0.0017324744556917527	DESIGN
// Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9999996284459371	WITHOUT_CLASSIFICATION	3.7155406280162137E-7	DESIGN
// ok in normal Hibernate usage to delete a detached entity; JPA however // forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9844459264477898	WITHOUT_CLASSIFICATION	0.015554073552210041	DESIGN
// the entry will be removed after the flush, and will no longer // override the stale snapshot // This is now handled by removeEntity() in EntityDeleteAction //persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999961328305929	WITHOUT_CLASSIFICATION	3.8671694071584745E-6	DESIGN
//addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9999991346854916	WITHOUT_CLASSIFICATION	8.653145083436039E-7	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999638545423363	WITHOUT_CLASSIFICATION	3.6145457663717356E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999638545423363	WITHOUT_CLASSIFICATION	3.6145457663717356E-5	DESIGN
/*|| oj.getJoinable().consumesCollectionAlias() */	WITHOUT_CLASSIFICATION	0.9999997639123873	WITHOUT_CLASSIFICATION	2.3608761266954358E-7	DESIGN
// here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9986523845102921	WITHOUT_CLASSIFICATION	0.0013476154897077933	DESIGN
// Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9998757014401907	WITHOUT_CLASSIFICATION	1.242985598094153E-4	DESIGN
//woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9991518222536511	WITHOUT_CLASSIFICATION	8.481777463489317E-4	DESIGN
// we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999935184874711	WITHOUT_CLASSIFICATION	6.481512529025553E-6	DESIGN
// we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9994374806265243	WITHOUT_CLASSIFICATION	5.625193734757842E-4	DESIGN
// synchronized to avoid multi-thread access issues; defined as method synch to avoid // potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999960648135177	WITHOUT_CLASSIFICATION	3.935186482358233E-6	DESIGN
// Allows various loaders (ok mainly the QueryLoader :) to check // whether scrolling of their result set should be allowed. // // By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999999930102648	WITHOUT_CLASSIFICATION	6.989735327816457E-9	DESIGN
//before adding to collection!	WITHOUT_CLASSIFICATION	0.9998680267835549	WITHOUT_CLASSIFICATION	1.3197321644501511E-4	DESIGN
// if the current depth is 0, the root thing being loaded is the // many-to-many collection itself.  Here, it is alright to use // an inner join...	WITHOUT_CLASSIFICATION	0.9999945865178718	WITHOUT_CLASSIFICATION	5.41348212821949E-6	DESIGN
//operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999996347863602	WITHOUT_CLASSIFICATION	3.652136398154909E-7	DESIGN
// simple, because we can't have a one-to-one or a collection  // (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999996162955763	WITHOUT_CLASSIFICATION	3.837044237656382E-7	DESIGN
//a composite key	WITHOUT_CLASSIFICATION	0.9999953405930643	WITHOUT_CLASSIFICATION	4.659406935723461E-6	DESIGN
// if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9999852221044726	WITHOUT_CLASSIFICATION	1.4777895527480297E-5	DESIGN
//it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9999675138389473	WITHOUT_CLASSIFICATION	3.2486161052689536E-5	DESIGN
// needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.6763069041654549	WITHOUT_CLASSIFICATION	0.3236930958345451	DESIGN
/*&& etype.isReferenceToPrimaryKey()*/	WITHOUT_CLASSIFICATION	0.9999915118489922	WITHOUT_CLASSIFICATION	8.488151007791194E-6	DESIGN
// it might still need to apply a collection ordering based on a // many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9758637839955845	WITHOUT_CLASSIFICATION	0.024136216004415536	DESIGN
// if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching //TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9961263150116485	WITHOUT_CLASSIFICATION	0.0038736849883515916	DESIGN
// belong to other persister // belong to other persister	WITHOUT_CLASSIFICATION	0.9998636060782025	WITHOUT_CLASSIFICATION	1.3639392179747687E-4	DESIGN
// we found it	WITHOUT_CLASSIFICATION	0.9999076347199922	WITHOUT_CLASSIFICATION	9.236528000781934E-5	DESIGN
//we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9999931218968872	WITHOUT_CLASSIFICATION	6.878103112853127E-6	DESIGN
//disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9991399763973411	WITHOUT_CLASSIFICATION	8.600236026589016E-4	DESIGN
//NOTE: unlike all other Loaders, this one is NOT //      multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9999825158519731	WITHOUT_CLASSIFICATION	1.7484148026895775E-5	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999937839591	WITHOUT_CLASSIFICATION	6.216040932745454E-9	DESIGN
//root entity comes *last*	WITHOUT_CLASSIFICATION	0.9996588519260394	WITHOUT_CLASSIFICATION	3.4114807396054547E-4	DESIGN
//deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999954464314603	WITHOUT_CLASSIFICATION	4.55356853969992E-6	DESIGN
//alias may be null //EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999952086960101	WITHOUT_CLASSIFICATION	4.791303989877249E-6	DESIGN
// if it is a compound path	WITHOUT_CLASSIFICATION	0.9997890625166846	WITHOUT_CLASSIFICATION	2.1093748331538578E-4	DESIGN
// otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9999906935955214	WITHOUT_CLASSIFICATION	9.306404478713837E-6	DESIGN
// if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999988912655359	WITHOUT_CLASSIFICATION	1.1087344641551467E-6	DESIGN
// otherwise, recurse	WITHOUT_CLASSIFICATION	0.9999079179289976	WITHOUT_CLASSIFICATION	9.208207100253457E-5	DESIGN
//the criteria instance	WITHOUT_CLASSIFICATION	0.9999565742052847	WITHOUT_CLASSIFICATION	4.34257947151663E-5	DESIGN
// the entity name	WITHOUT_CLASSIFICATION	0.9999930054845382	WITHOUT_CLASSIFICATION	6.994515461887652E-6	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9978138825520657	WITHOUT_CLASSIFICATION	0.002186117447934355	DESIGN
//not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9978138825520657	WITHOUT_CLASSIFICATION	0.002186117447934355	DESIGN
//it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999993477488781	WITHOUT_CLASSIFICATION	6.522511219513241E-7	DESIGN
//should never happen, i think	WITHOUT_CLASSIFICATION	0.9995356260392567	WITHOUT_CLASSIFICATION	4.6437396074337913E-4	DESIGN
// Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9999547489067796	WITHOUT_CLASSIFICATION	4.525109322048966E-5	DESIGN
// Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.999993345123284	WITHOUT_CLASSIFICATION	6.654876716096596E-6	DESIGN
// and the qualifier is not the alias of this criteria //      -> check to see if we belong to some criteria other //          than the one that created us	WITHOUT_CLASSIFICATION	0.9999896945686284	WITHOUT_CLASSIFICATION	1.0305431371726581E-5	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999539860099498	WITHOUT_CLASSIFICATION	4.601399005028507E-5	DESIGN
// Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9999975169774928	WITHOUT_CLASSIFICATION	2.483022507205092E-6	DESIGN
// Currently *not* cachable if autodiscover types is in effect (e.g. "select * ...")	WITHOUT_CLASSIFICATION	0.999988169491658	WITHOUT_CLASSIFICATION	1.183050834188928E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.8655725035215525	WITHOUT_CLASSIFICATION	0.1344274964784476	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998523068799	WITHOUT_CLASSIFICATION	1.4769312003134854E-7	DESIGN
// build an array with indices equal to the total number // of actual returns in the result Hibernate will return // for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999986891610855	WITHOUT_CLASSIFICATION	1.3108389144770904E-6	DESIGN
// replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9989409100381927	WITHOUT_CLASSIFICATION	0.0010590899618072875	DESIGN
// No additional open braces found in the string, append the // rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999979102742931	WITHOUT_CLASSIFICATION	2.089725706936815E-6	DESIGN
// apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999419034982667	WITHOUT_CLASSIFICATION	5.809650173315478E-5	DESIGN
// it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999998044513608	WITHOUT_CLASSIFICATION	1.9554863918452797E-7	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999294736989801	WITHOUT_CLASSIFICATION	7.052630101992028E-5	DESIGN
// passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9999294736989801	WITHOUT_CLASSIFICATION	7.052630101992028E-5	DESIGN
// The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999989987872807	WITHOUT_CLASSIFICATION	1.0012127193614441E-6	DESIGN
// it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9999971057299468	WITHOUT_CLASSIFICATION	2.8942700530959854E-6	DESIGN
// Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9977074687247093	WITHOUT_CLASSIFICATION	0.002292531275290736	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999993359738002	WITHOUT_CLASSIFICATION	6.640261997964045E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
//NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998195965560258	WITHOUT_CLASSIFICATION	1.8040344397413481E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// Now, process the returns	WITHOUT_CLASSIFICATION	0.9999963619576175	WITHOUT_CLASSIFICATION	3.638042382406242E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9997427660374641	WITHOUT_CLASSIFICATION	2.572339625358862E-4	DESIGN
// already been processed...	WITHOUT_CLASSIFICATION	0.9997427660374641	WITHOUT_CLASSIFICATION	2.572339625358862E-4	DESIGN
// Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999973127317767	WITHOUT_CLASSIFICATION	2.687268223307863E-6	DESIGN
// first, break down the returns into maps keyed by alias // so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9994276927563022	WITHOUT_CLASSIFICATION	5.723072436978698E-4	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999994813666994	WITHOUT_CLASSIFICATION	5.186333005970771E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// for merging of versioned entities, we consider the version having // been changed only when: // 1) the two version values are different; //      *AND* // 2) The target actually represents database state! // // This second condition is a special case which allows // an entity to be merged during the same transaction // (though during a seperate operation) in which it was // originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997335074025	WITHOUT_CLASSIFICATION	2.6649259751296447E-7	DESIGN
// this is the second pass through on a merge op, so here we limit the // replacement to associations types (value types were already replaced // during the first pass)	WITHOUT_CLASSIFICATION	0.84848344190886	WITHOUT_CLASSIFICATION	0.15151655809114	DESIGN
//EARLY EXIT	WITHOUT_CLASSIFICATION	0.9999723363556731	WITHOUT_CLASSIFICATION	2.7663644326908427E-5	DESIGN
// cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9999765546128749	WITHOUT_CLASSIFICATION	2.344538712506734E-5	DESIGN
// Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9999993902214941	WITHOUT_CLASSIFICATION	6.097785058212745E-7	DESIGN
// Use the delegate.	WITHOUT_CLASSIFICATION	0.999999718845959	WITHOUT_CLASSIFICATION	2.811540410282348E-7	DESIGN
// currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9997457747120626	WITHOUT_CLASSIFICATION	2.542252879373349E-4	DESIGN
// This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9980844368347853	WITHOUT_CLASSIFICATION	0.0019155631652146583	DESIGN
// make a new one	WITHOUT_CLASSIFICATION	0.9999550542596123	WITHOUT_CLASSIFICATION	4.494574038770262E-5	DESIGN
// not so sure this is even valid subtree.  but if it was, it'd // represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9967117084970879	WITHOUT_CLASSIFICATION	0.0032882915029121404	DESIGN
// (NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9999874284593893	WITHOUT_CLASSIFICATION	1.2571540610815802E-5	DESIGN
//private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9996608829130358	WITHOUT_CLASSIFICATION	3.391170869641986E-4	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999995352992899	WITHOUT_CLASSIFICATION	4.647007101026319E-6	DESIGN
//sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9999999169525069	WITHOUT_CLASSIFICATION	8.304749305530504E-8	DESIGN
//by default	WITHOUT_CLASSIFICATION	0.9999509603026063	WITHOUT_CLASSIFICATION	4.903969739370599E-5	DESIGN
// This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9979911036509843	WITHOUT_CLASSIFICATION	0.002008896349015663	DESIGN
// -- Loader implementation --	WITHOUT_CLASSIFICATION	0.9999978285488972	WITHOUT_CLASSIFICATION	2.171451102905123E-6	DESIGN
// -- Loader overrides --	WITHOUT_CLASSIFICATION	0.9999998608483255	WITHOUT_CLASSIFICATION	1.3915167454389254E-7	DESIGN
// (NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9999931832958582	WITHOUT_CLASSIFICATION	6.8167041418095644E-6	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999640659501151	WITHOUT_CLASSIFICATION	3.5934049884925446E-5	DESIGN
// meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9969579824786718	WITHOUT_CLASSIFICATION	0.0030420175213280313	DESIGN
// --- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995360667683473	WITHOUT_CLASSIFICATION	4.6393323165275663E-4	DESIGN
// -- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9999659050603384	WITHOUT_CLASSIFICATION	3.4094939661504046E-5	DESIGN
//deduplicate unique constraints sharing the same columns //this is needed by Hibernate Annotations since it creates automagically // unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999973755750086	WITHOUT_CLASSIFICATION	2.624424991473908E-6	DESIGN
// Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9993395193889687	WITHOUT_CLASSIFICATION	6.604806110312792E-4	DESIGN
// to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.999973413217341	WITHOUT_CLASSIFICATION	2.6586782658914328E-5	DESIGN
// Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999995134120793	WITHOUT_CLASSIFICATION	4.865879208132674E-7	DESIGN
//used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.9994297103142205	WITHOUT_CLASSIFICATION	5.70289685779468E-4	DESIGN
//usually useless	WITHOUT_CLASSIFICATION	0.9983862014231272	WITHOUT_CLASSIFICATION	0.0016137985768727978	DESIGN
// added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9988439587785515	WITHOUT_CLASSIFICATION	0.0011560412214484243	DESIGN
//do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9999999908189285	WITHOUT_CLASSIFICATION	9.181071452757051E-9	DESIGN
//for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.999991197074777	WITHOUT_CLASSIFICATION	8.80292522302731E-6	DESIGN
//may be final //may be final //may be final	WITHOUT_CLASSIFICATION	0.999782358460126	WITHOUT_CLASSIFICATION	2.17641539873931E-4	DESIGN
//may be final	WITHOUT_CLASSIFICATION	0.9991508341197718	WITHOUT_CLASSIFICATION	8.491658802282147E-4	DESIGN
// may be final	WITHOUT_CLASSIFICATION	0.9999077825678607	WITHOUT_CLASSIFICATION	9.221743213930438E-5	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999526352552041	WITHOUT_CLASSIFICATION	4.736474479596797E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994718080842	WITHOUT_CLASSIFICATION	5.281919158223959E-7	DESIGN
// the root of the incoming property path matched one // of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9999998723022515	WITHOUT_CLASSIFICATION	1.2769774848297932E-7	DESIGN
// ignore it...	WITHOUT_CLASSIFICATION	0.9999921019724237	WITHOUT_CLASSIFICATION	7.898027576214424E-6	DESIGN
//flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9999804073210936	WITHOUT_CLASSIFICATION	1.9592678906399067E-5	DESIGN
//an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() //and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9999961540539757	WITHOUT_CLASSIFICATION	3.8459460242864115E-6	DESIGN
//if the hibernate-mapping did not specify a schema/catalog, use the defaults //specified by properties - but note that if the schema/catalog were specified //in hibernate-mapping, or as params, they will already be initialized and //will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9999999999725366	WITHOUT_CLASSIFICATION	2.7463290431633678E-11	DESIGN
//pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.999993536469131	WITHOUT_CLASSIFICATION	6.463530868962995E-6	DESIGN
// Custom SQL	WITHOUT_CLASSIFICATION	0.9999526352552041	WITHOUT_CLASSIFICATION	4.736474479596797E-5	DESIGN
//Primary key constraint	WITHOUT_CLASSIFICATION	0.9999994718080842	WITHOUT_CLASSIFICATION	5.281919158223959E-7	DESIGN
//pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999901313149257	WITHOUT_CLASSIFICATION	9.86868507429766E-5	DESIGN
//needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9991123764117243	WITHOUT_CLASSIFICATION	8.876235882755504E-4	DESIGN
// empty means no scoping	WITHOUT_CLASSIFICATION	0.9999329197302349	WITHOUT_CLASSIFICATION	6.708026976506024E-5	DESIGN
// index should be last column listed	WITHOUT_CLASSIFICATION	0.9999790894738423	WITHOUT_CLASSIFICATION	2.0910526157734408E-5	DESIGN
//if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9999928449455765	WITHOUT_CLASSIFICATION	7.155054423576063E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns	WITHOUT_CLASSIFICATION	0.9999904440882695	WITHOUT_CLASSIFICATION	9.55591173045664E-6	DESIGN
/*ArrayList list = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999395566446	WITHOUT_CLASSIFICATION	6.044335539211701E-7	DESIGN
// }	WITHOUT_CLASSIFICATION	0.9999859992837543	WITHOUT_CLASSIFICATION	1.4000716245728444E-5	DESIGN
// no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9999933905421804	WITHOUT_CLASSIFICATION	6.609457819672379E-6	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6377490631638523	WITHOUT_CLASSIFICATION	0.3622509368361477	DESIGN
// the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.999999999121761	WITHOUT_CLASSIFICATION	8.782390304891027E-10	DESIGN
//TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.6377490631638523	WITHOUT_CLASSIFICATION	0.3622509368361477	DESIGN
// if the property mapping consists of all formulas,  // make it non-updateable	WITHOUT_CLASSIFICATION	0.9999999899940782	WITHOUT_CLASSIFICATION	1.0005921793951766E-8	DESIGN
//columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.999990000804111	WITHOUT_CLASSIFICATION	9.99919588900891E-6	DESIGN
// if the property mapping consists of all formulas,  // make it insertable	WITHOUT_CLASSIFICATION	0.9999995690946876	WITHOUT_CLASSIFICATION	4.309053124255968E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983510868148	WITHOUT_CLASSIFICATION	1.6489131852040027E-6	DESIGN
// expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9994542511924364	WITHOUT_CLASSIFICATION	5.457488075637086E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998391138663393	WITHOUT_CLASSIFICATION	1.608861336605874E-4	DESIGN
//}	WITHOUT_CLASSIFICATION	0.9998391138663393	WITHOUT_CLASSIFICATION	1.608861336605874E-4	DESIGN
//return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9998708481654729	WITHOUT_CLASSIFICATION	1.2915183452712594E-4	DESIGN
//return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9998956441952518	WITHOUT_CLASSIFICATION	1.0435580474828186E-4	DESIGN
//return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9999851403986288	WITHOUT_CLASSIFICATION	1.485960137108703E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999458703970059	WITHOUT_CLASSIFICATION	5.412960299404067E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.998198555755954	WITHOUT_CLASSIFICATION	0.0018014442440460708	DESIGN
// we need to determine the best way to know that two joinables // represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.7428406814298791	DESIGN	0.2571593185701208	WITHOUT_CLASSIFICATION
//strip leading ','	WITHOUT_CLASSIFICATION	0.999996849040932	WITHOUT_CLASSIFICATION	3.1509590679623157E-6	DESIGN
//public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999994370685016	WITHOUT_CLASSIFICATION	5.629314983980326E-6	DESIGN
// KEY	WITHOUT_CLASSIFICATION	0.9999595036245332	WITHOUT_CLASSIFICATION	4.0496375466655935E-5	DESIGN
//columns	WITHOUT_CLASSIFICATION	0.999453185753545	WITHOUT_CLASSIFICATION	5.468142464549531E-4	DESIGN
//SQL statements	WITHOUT_CLASSIFICATION	0.9999563692914076	WITHOUT_CLASSIFICATION	4.363070859239009E-5	DESIGN
//extra information about the element type	WITHOUT_CLASSIFICATION	0.9999984350107124	WITHOUT_CLASSIFICATION	1.564989287568532E-6	DESIGN
//types	WITHOUT_CLASSIFICATION	0.9994946076159835	WITHOUT_CLASSIFICATION	5.05392384016462E-4	DESIGN
// custom sql	WITHOUT_CLASSIFICATION	0.9999908456904026	WITHOUT_CLASSIFICATION	9.154309597385303E-6	DESIGN
//private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.999785604586518	WITHOUT_CLASSIFICATION	2.1439541348203765E-4	DESIGN
// dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9999969879350159	WITHOUT_CLASSIFICATION	3.0120649839855225E-6	DESIGN
// dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9999998921122664	WITHOUT_CLASSIFICATION	1.078877336255526E-7	DESIGN
// NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999921407240782	WITHOUT_CLASSIFICATION	7.859275921802811E-5	DESIGN
//unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999999613036604	WITHOUT_CLASSIFICATION	3.869633959345562E-7	DESIGN
//ELEMENT	WITHOUT_CLASSIFICATION	0.9996198904723668	WITHOUT_CLASSIFICATION	3.801095276332501E-4	DESIGN
// NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998933177232114	WITHOUT_CLASSIFICATION	1.0668227678848843E-4	DESIGN
// INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9999961319997859	WITHOUT_CLASSIFICATION	3.868000214201854E-6	DESIGN
// NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9994866286066234	WITHOUT_CLASSIFICATION	5.133713933765533E-4	DESIGN
//unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9999961603569425	WITHOUT_CLASSIFICATION	3.839643057530817E-6	DESIGN
//unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9999902780146369	WITHOUT_CLASSIFICATION	9.721985362983684E-6	DESIGN
//GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9996307710325745	WITHOUT_CLASSIFICATION	3.692289674254649E-4	DESIGN
// for non-arrays, we don't need to know the element class //elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9999848035177447	WITHOUT_CLASSIFICATION	1.519648225533211E-5	DESIGN
//not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9982463694742694	WITHOUT_CLASSIFICATION	0.0017536305257306855	DESIGN
// Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9828149708562336	WITHOUT_CLASSIFICATION	0.017185029143766396	DESIGN
// Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9870410874086502	WITHOUT_CLASSIFICATION	0.012958912591349995	DESIGN
//if there is a user-specified loader, return that //TODO: filters!?	WITHOUT_CLASSIFICATION	0.9779664755470729	WITHOUT_CLASSIFICATION	0.02203352445292703	DESIGN
// Take care of any entities that might have // been evicted!	WITHOUT_CLASSIFICATION	0.9994195579139942	WITHOUT_CLASSIFICATION	5.804420860059047E-4	DESIGN
//strip leading ','	WITHOUT_CLASSIFICATION	0.999996849040932	WITHOUT_CLASSIFICATION	3.1509590679623157E-6	DESIGN
// Run a subquery loader	WITHOUT_CLASSIFICATION	0.9999564865535737	WITHOUT_CLASSIFICATION	4.3513446426237016E-5	DESIGN
//needed by arrays	WITHOUT_CLASSIFICATION	0.9998998866885735	WITHOUT_CLASSIFICATION	1.0011331142647323E-4	DESIGN
//TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.9281816677115728	WITHOUT_CLASSIFICATION	0.07181833228842723	DESIGN
//an assertion	WITHOUT_CLASSIFICATION	0.9999997522125463	WITHOUT_CLASSIFICATION	2.477874536551539E-7	DESIGN
// Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999937415897268	WITHOUT_CLASSIFICATION	6.25841027325711E-6	DESIGN
//create all the new entries	WITHOUT_CLASSIFICATION	0.9999975012942504	WITHOUT_CLASSIFICATION	2.498705749690521E-6	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999458703970059	WITHOUT_CLASSIFICATION	5.412960299404067E-5	DESIGN
/*&& !indexIsFormula*/	WITHOUT_CLASSIFICATION	0.9999458703970059	WITHOUT_CLASSIFICATION	5.412960299404067E-5	DESIGN
//delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999947368699943	WITHOUT_CLASSIFICATION	5.263130005736903E-6	DESIGN
//insert all the new entries	WITHOUT_CLASSIFICATION	0.9999983338384812	WITHOUT_CLASSIFICATION	1.6661615187742148E-6	DESIGN
//==elementType ??	WITHOUT_CLASSIFICATION	0.9993143116109586	WITHOUT_CLASSIFICATION	6.856883890414014E-4	DESIGN
//update all the modified entries	WITHOUT_CLASSIFICATION	0.9999745383045001	WITHOUT_CLASSIFICATION	2.546169549989108E-5	DESIGN
//identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9999638206559904	WITHOUT_CLASSIFICATION	3.617934400957549E-5	DESIGN
// update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9999910235754506	WITHOUT_CLASSIFICATION	8.976424549362542E-6	DESIGN
// will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9998334924074156	WITHOUT_CLASSIFICATION	1.6650759258435678E-4	DESIGN
// now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999936435811031	WITHOUT_CLASSIFICATION	6.356418896920333E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9999265374162032	WITHOUT_CLASSIFICATION	7.346258379683914E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995186727823	WITHOUT_CLASSIFICATION	4.813272178656172E-7	DESIGN
//private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9989181592163394	WITHOUT_CLASSIFICATION	0.0010818407836605127	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999360379329899	WITHOUT_CLASSIFICATION	6.396206701010711E-5	DESIGN
//Custom SQL	WITHOUT_CLASSIFICATION	0.9995048734727122	WITHOUT_CLASSIFICATION	4.951265272877915E-4	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995186727823	WITHOUT_CLASSIFICATION	4.813272178656172E-7	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999970582040189	WITHOUT_CLASSIFICATION	2.941795981223504E-6	DESIGN
// This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9851644398796665	WITHOUT_CLASSIFICATION	0.014835560120333468	DESIGN
//chop the last union (all)	WITHOUT_CLASSIFICATION	0.9999923333712019	WITHOUT_CLASSIFICATION	7.666628798113639E-6	DESIGN
//TODO: check this....	WITHOUT_CLASSIFICATION	0.66782343917695	DESIGN	0.3321765608230501	WITHOUT_CLASSIFICATION
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999360379329899	WITHOUT_CLASSIFICATION	6.396206701010711E-5	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999979801944511	WITHOUT_CLASSIFICATION	2.0198055489673505E-6	DESIGN
// the closure of all properties in the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999991523282928	WITHOUT_CLASSIFICATION	8.476717071345368E-7	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998019812052	WITHOUT_CLASSIFICATION	1.9801879474777094E-7	DESIGN
// subclass discrimination works by assigning particular // values to certain combinations of null primary key // values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999980361127631	WITHOUT_CLASSIFICATION	1.963887236922169E-6	DESIGN
//MULTITABLES	WITHOUT_CLASSIFICATION	0.9996431828024889	WITHOUT_CLASSIFICATION	3.568171975111292E-4	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999855980258138	WITHOUT_CLASSIFICATION	1.4401974186232822E-5	DESIGN
// subclass closure properties	WITHOUT_CLASSIFICATION	0.9999918823515314	WITHOUT_CLASSIFICATION	8.117648468639836E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999915086097815	WITHOUT_CLASSIFICATION	8.491390218421383E-6	DESIGN
//( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9993729613886583	WITHOUT_CLASSIFICATION	6.270386113417761E-4	DESIGN
//( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9999519149298589	WITHOUT_CLASSIFICATION	4.8085070141081424E-5	DESIGN
// don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9934560767947332	WITHOUT_CLASSIFICATION	0.006543923205266647	DESIGN
// special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9999760623800024	WITHOUT_CLASSIFICATION	2.3937619997673157E-5	DESIGN
// the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9999995186727823	WITHOUT_CLASSIFICATION	4.813272178656172E-7	DESIGN
// properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9999979801944511	WITHOUT_CLASSIFICATION	2.0198055489673505E-6	DESIGN
// the closure of all columns used by the entire hierarchy including // subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999998019812052	WITHOUT_CLASSIFICATION	1.9801879474777094E-7	DESIGN
//get em on the second pass!	WITHOUT_CLASSIFICATION	0.9998682558479232	WITHOUT_CLASSIFICATION	1.3174415207683037E-4	DESIGN
// now look up the object we are really interested in! // (this lets us correctly handle proxies and multi-row // or multi-column queries)	WITHOUT_CLASSIFICATION	0.9456601803447746	WITHOUT_CLASSIFICATION	0.05433981965522538	DESIGN
// discriminator column	WITHOUT_CLASSIFICATION	0.9999947674311248	WITHOUT_CLASSIFICATION	5.2325688751893385E-6	DESIGN
//INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9999360379329899	WITHOUT_CLASSIFICATION	6.396206701010711E-5	DESIGN
//private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997686081928745	WITHOUT_CLASSIFICATION	2.3139180712554555E-4	DESIGN
// CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999997135501743	WITHOUT_CLASSIFICATION	2.8644982578371896E-7	DESIGN
// DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9999837345102308	WITHOUT_CLASSIFICATION	1.6265489769207552E-5	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999915861347548	WITHOUT_CLASSIFICATION	8.413865245112053E-6	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999915086097815	WITHOUT_CLASSIFICATION	8.491390218421383E-6	DESIGN
// Execute the SQL:	WITHOUT_CLASSIFICATION	0.9999970582040189	WITHOUT_CLASSIFICATION	2.941795981223504E-6	DESIGN
// JOINS	WITHOUT_CLASSIFICATION	0.9999904896120836	WITHOUT_CLASSIFICATION	9.510387916301798E-6	DESIGN
//propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9999971543146352	WITHOUT_CLASSIFICATION	2.845685364763861E-6	DESIGN
//Access cached SQL	WITHOUT_CLASSIFICATION	0.9997746575414368	WITHOUT_CLASSIFICATION	2.2534245856317163E-4	DESIGN
//figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9965711721579809	WITHOUT_CLASSIFICATION	0.003428827842019054	DESIGN
//figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9883579486999264	WITHOUT_CLASSIFICATION	0.011642051300073447	DESIGN
//figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9986103792766723	WITHOUT_CLASSIFICATION	0.0013896207233277068	DESIGN
//render the SQL	WITHOUT_CLASSIFICATION	0.9994987659919252	WITHOUT_CLASSIFICATION	5.012340080748179E-4	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999983510868148	WITHOUT_CLASSIFICATION	1.6489131852040027E-6	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989554916751924	WITHOUT_CLASSIFICATION	0.0010445083248076027	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
// The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999999963414801	WITHOUT_CLASSIFICATION	3.6585198435983837E-9	DESIGN
//information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9999237676997806	WITHOUT_CLASSIFICATION	7.623230021930941E-5	DESIGN
//information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9999996990849633	WITHOUT_CLASSIFICATION	3.009150366429374E-7	DESIGN
//information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.99999940825163	WITHOUT_CLASSIFICATION	5.917483699515893E-7	DESIGN
// dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.999999835993807	WITHOUT_CLASSIFICATION	1.6400619303488802E-7	DESIGN
// SQL strings	WITHOUT_CLASSIFICATION	0.9999994802887537	WITHOUT_CLASSIFICATION	5.197112462901496E-7	DESIGN
// for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999999789942261	WITHOUT_CLASSIFICATION	2.1005773820346327E-8	DESIGN
// PROPERTIES	WITHOUT_CLASSIFICATION	0.9999915861347548	WITHOUT_CLASSIFICATION	8.413865245112053E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
// IDENTIFIER	WITHOUT_CLASSIFICATION	0.999991285849406	WITHOUT_CLASSIFICATION	8.714150594101523E-6	DESIGN
// VERSION	WITHOUT_CLASSIFICATION	0.9999864372146836	WITHOUT_CLASSIFICATION	1.3562785316405616E-5	DESIGN
//WHERE STRING	WITHOUT_CLASSIFICATION	0.9999590329753809	WITHOUT_CLASSIFICATION	4.096702461910504E-5	DESIGN
// SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9999989577619116	WITHOUT_CLASSIFICATION	1.0422380883459575E-6	DESIGN
//before add :-)	WITHOUT_CLASSIFICATION	0.9998992819121278	WITHOUT_CLASSIFICATION	1.0071808787211421E-4	DESIGN
// Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9998615378350122	WITHOUT_CLASSIFICATION	1.3846216498776748E-4	DESIGN
// only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9999997491139183	WITHOUT_CLASSIFICATION	2.5088608171569563E-7	DESIGN
//note early exit here:	WITHOUT_CLASSIFICATION	0.9911969111381491	WITHOUT_CLASSIFICATION	0.008803088861851008	DESIGN
// object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9999914766056744	WITHOUT_CLASSIFICATION	8.523394325576592E-6	DESIGN
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9983288260932502	WITHOUT_CLASSIFICATION	0.0016711739067498167	DESIGN
//strip leading ", "	WITHOUT_CLASSIFICATION	0.9999986391327906	WITHOUT_CLASSIFICATION	1.3608672092661667E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998147243796	WITHOUT_CLASSIFICATION	1.8527562040314173E-7	DESIGN
//otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9130970606420145	WITHOUT_CLASSIFICATION	0.08690293935798546	DESIGN
//null owner ok??	WITHOUT_CLASSIFICATION	0.999858253682487	WITHOUT_CLASSIFICATION	1.4174631751297066E-4	DESIGN
// null sql means that the only lazy properties // are shared PK one-to-one associations which are // handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9989072472014735	WITHOUT_CLASSIFICATION	0.0010927527985265361	DESIGN
// Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999845166293984	WITHOUT_CLASSIFICATION	1.5483370601581115E-5	DESIGN
// the difficulty here is exactly what do we update in order to // force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.989947818227903	WITHOUT_CLASSIFICATION	0.010052181772096914	DESIGN
// performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9999817031683037	WITHOUT_CLASSIFICATION	1.8296831696358812E-5	DESIGN
// properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9999959730192044	WITHOUT_CLASSIFICATION	4.026980795585884E-6	DESIGN
//Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9950222653156069	WITHOUT_CLASSIFICATION	0.0049777346843930675	DESIGN
// ALIASES	WITHOUT_CLASSIFICATION	0.9999904507638876	WITHOUT_CLASSIFICATION	9.549236112416532E-6	DESIGN
// aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9999902968152365	WITHOUT_CLASSIFICATION	9.70318476339763E-6	DESIGN
// aliases for composite-id's	WITHOUT_CLASSIFICATION	0.999999421603446	WITHOUT_CLASSIFICATION	5.783965539625445E-7	DESIGN
// Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9999997975417285	WITHOUT_CLASSIFICATION	2.0245827147099376E-7	DESIGN
// embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9999996228913683	WITHOUT_CLASSIFICATION	3.771086317425765E-7	DESIGN
// TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.8793555735988738	DESIGN	0.1206444264011261	WITHOUT_CLASSIFICATION
//don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9999934988413371	WITHOUT_CLASSIFICATION	6.501158662909829E-6	DESIGN
//do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9999997609289304	WITHOUT_CLASSIFICATION	2.3907106958320383E-7	DESIGN
// select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999964310768069	WITHOUT_CLASSIFICATION	3.568923193100843E-5	DESIGN
//TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.9448374084144789	WITHOUT_CLASSIFICATION	0.05516259158552105	DESIGN
// this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9999970378746836	WITHOUT_CLASSIFICATION	2.9621253162290245E-6	DESIGN
// special shortcut for id properties, skip the join! // this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9998651160155673	WITHOUT_CLASSIFICATION	1.3488398443282714E-4	DESIGN
// we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999995264027184	WITHOUT_CLASSIFICATION	4.735972815979492E-6	DESIGN
// nothing to do; even if the operand is a parameter, no way we could // infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9987868621682294	WITHOUT_CLASSIFICATION	0.001213137831770618	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998777984631496	WITHOUT_CLASSIFICATION	1.2220153685029401E-4	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998713788777	WITHOUT_CLASSIFICATION	1.2862112223565295E-7	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999771160987624	WITHOUT_CLASSIFICATION	2.2883901237568316E-5	DESIGN
// more specifically : "? [op] datetime" //      1) if the operator is MINUS, the param needs to be of //          some datetime type //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.830002525005949	WITHOUT_CLASSIFICATION	0.1699974749940511	DESIGN
// add normal properties	WITHOUT_CLASSIFICATION	0.9999998713788777	WITHOUT_CLASSIFICATION	1.2862112223565295E-7	DESIGN
// this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9998777984631496	WITHOUT_CLASSIFICATION	1.2220153685029401E-4	DESIGN
// add the discriminator	WITHOUT_CLASSIFICATION	0.9999771160987624	WITHOUT_CLASSIFICATION	2.2883901237568316E-5	DESIGN
// add the primary key	WITHOUT_CLASSIFICATION	0.9999873897460724	WITHOUT_CLASSIFICATION	1.2610253927569265E-5	DESIGN
// delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9999868680324139	WITHOUT_CLASSIFICATION	1.3131967586012711E-5	DESIGN
// we can't batch joined inserts, *especially* not if it is an identity insert; // nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999999844331336	WITHOUT_CLASSIFICATION	1.5566866434836917E-8	DESIGN
// Render the SQL query	WITHOUT_CLASSIFICATION	0.998407623282443	WITHOUT_CLASSIFICATION	0.00159237671755695	DESIGN
// Write the values of fields onto the prepared statement - we MUST use the state at the time the // insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999873821833265	WITHOUT_CLASSIFICATION	1.2617816673478012E-5	DESIGN
// TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.999614441826801	DESIGN	3.855581731989849E-4	WITHOUT_CLASSIFICATION
//don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.5125087831537927	WITHOUT_CLASSIFICATION	0.4874912168462074	DESIGN
//if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9998284917420163	WITHOUT_CLASSIFICATION	1.715082579837752E-4	DESIGN
//there is probably a row there, so try to update //if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9999930673084136	WITHOUT_CLASSIFICATION	6.932691586308897E-6	DESIGN
//note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9999224752609507	WITHOUT_CLASSIFICATION	7.752473904929451E-5	DESIGN
// starting index	WITHOUT_CLASSIFICATION	0.9999811337549156	WITHOUT_CLASSIFICATION	1.8866245084355946E-5	DESIGN
//Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999751943455654	WITHOUT_CLASSIFICATION	2.4805654434584294E-5	DESIGN
// Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9990519109245023	WITHOUT_CLASSIFICATION	9.480890754975737E-4	DESIGN
//Render the SQL query	WITHOUT_CLASSIFICATION	0.996759291629436	WITHOUT_CLASSIFICATION	0.003240708370564037	DESIGN
// Do the key. The key is immutable so we can use the _current_ object state - not necessarily // the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999998744082005	WITHOUT_CLASSIFICATION	1.2559179950897793E-7	DESIGN
// We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9999999608565772	WITHOUT_CLASSIFICATION	3.914342277988565E-8	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998937032620232	WITHOUT_CLASSIFICATION	1.0629673797674559E-4	DESIGN
//note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update //	WITHOUT_CLASSIFICATION	0.9994673207451266	WITHOUT_CLASSIFICATION	5.326792548735024E-4	DESIGN
// more specifically : "datetime [op] ?" //      1) if the operator is MINUS, we really cannot determine //          the expected type as either another datetime or //          numeric would be valid //      2) if the operator is PLUS, the param needs to be of //          some numeric type	WITHOUT_CLASSIFICATION	0.9998753789209507	WITHOUT_CLASSIFICATION	1.246210790493273E-4	DESIGN
// For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999993444123613	WITHOUT_CLASSIFICATION	6.555876386860223E-7	DESIGN
// don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9893958024721633	WITHOUT_CLASSIFICATION	0.010604197527836739	DESIGN
// For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999999238361302	WITHOUT_CLASSIFICATION	7.616386974068048E-8	DESIGN
// if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9999429130864149	WITHOUT_CLASSIFICATION	5.708691358502322E-5	DESIGN
// Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999985193826288	WITHOUT_CLASSIFICATION	1.4806173710740943E-6	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999868412371806	WITHOUT_CLASSIFICATION	1.3158762819319796E-5	DESIGN
// For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999868412371806	WITHOUT_CLASSIFICATION	1.3158762819319796E-5	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999414250342	WITHOUT_CLASSIFICATION	5.8574965760406734E-8	DESIGN
// For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999999414250342	WITHOUT_CLASSIFICATION	5.8574965760406734E-8	DESIGN
// not supported	WITHOUT_CLASSIFICATION	0.9983188675492647	WITHOUT_CLASSIFICATION	0.0016811324507354042	DESIGN
// this property belongs to the table and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9998937032620232	WITHOUT_CLASSIFICATION	1.0629673797674559E-4	DESIGN
// we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9998132996109039	WITHOUT_CLASSIFICATION	1.8670038909613006E-4	DESIGN
// otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999924257660259	WITHOUT_CLASSIFICATION	7.57423397400865E-6	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9972261371458513	WITHOUT_CLASSIFICATION	0.0027738628541485997	DESIGN
//just a performance opt!	WITHOUT_CLASSIFICATION	0.9972261371458513	WITHOUT_CLASSIFICATION	0.0027738628541485997	DESIGN
//all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.999999560207815	WITHOUT_CLASSIFICATION	4.3979218505370706E-7	DESIGN
//notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9999831124434466	WITHOUT_CLASSIFICATION	1.6887556553356172E-5	DESIGN
//we can inner join to superclass tables (the row MUST be there) //we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9996055771921176	WITHOUT_CLASSIFICATION	3.9442280788238047E-4	DESIGN
//skip the driving table	WITHOUT_CLASSIFICATION	0.9999964308388527	WITHOUT_CLASSIFICATION	3.5691611472229503E-6	DESIGN
//get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8196108309114851	WITHOUT_CLASSIFICATION	0.1803891690885149	DESIGN
// here, we work under the following assumptions: //      ------------ valid cases -------------------------------------- //      1) datetime + {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      2) datetime - datetime : always results in a DOUBLE //      3) datetime - {something other than datetime} : always results //              in a datetime ( db will catch invalid conversions ) //      ------------ invalid cases ------------------------------------ //      4) datetime + datetime //      5) {something other than datetime} - datetime //      6) datetime * {any type} //      7) datetime / {any type} //      8) {any type} / datetime // doing so allows us to properly handle parameters as either the left // or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.999938367485857	WITHOUT_CLASSIFICATION	6.163251414302691E-5	DESIGN
//render the where and from parts	WITHOUT_CLASSIFICATION	0.9991773413483115	WITHOUT_CLASSIFICATION	8.226586516886301E-4	DESIGN
//we *could* regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9451130003397397	WITHOUT_CLASSIFICATION	0.05488699966026034	DESIGN
//now render the joins	WITHOUT_CLASSIFICATION	0.9998507709085637	WITHOUT_CLASSIFICATION	1.4922909143635368E-4	DESIGN
// This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9999981574116654	WITHOUT_CLASSIFICATION	1.8425883345970142E-6	DESIGN
//now render the select clause	WITHOUT_CLASSIFICATION	0.9999985150810786	WITHOUT_CLASSIFICATION	1.4849189213392654E-6	DESIGN
//now tie it all together	WITHOUT_CLASSIFICATION	0.9999030191476033	WITHOUT_CLASSIFICATION	9.698085239673288E-5	DESIGN
//insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9999941483786635	WITHOUT_CLASSIFICATION	5.851621336438169E-6	DESIGN
//select SQL	WITHOUT_CLASSIFICATION	0.999940494294852	WITHOUT_CLASSIFICATION	5.950570514810571E-5	DESIGN
//no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9999464522237907	WITHOUT_CLASSIFICATION	5.3547776209242356E-5	DESIGN
// Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999958439192142	WITHOUT_CLASSIFICATION	4.156080785802888E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989400609494238	WITHOUT_CLASSIFICATION	0.0010599390505762502	DESIGN
// The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999967070737141	WITHOUT_CLASSIFICATION	3.2929262859172196E-6	DESIGN
// for dialects which are known to not support ANSI-SQL row-value-constructor syntax, // we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9999863054862742	WITHOUT_CLASSIFICATION	1.36945137256789E-5	DESIGN
// Due to the complexity in initializing the SelectClause, do not generate one here. // If it is not found; simply return null... // // Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9999998801138342	WITHOUT_CLASSIFICATION	1.1988616576525687E-7	DESIGN
// check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999779691990308	WITHOUT_CLASSIFICATION	2.2030800969214332E-5	DESIGN
// let this take precedence if defined, since it works for // assigned identifiers	WITHOUT_CLASSIFICATION	0.9999975035991238	WITHOUT_CLASSIFICATION	2.4964008761896856E-6	DESIGN
// check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9999992941213565	WITHOUT_CLASSIFICATION	7.058786435903465E-7	DESIGN
// check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.99998012146011	WITHOUT_CLASSIFICATION	1.9878539890058544E-5	DESIGN
///////////////////////////////////////////////////////////////////////	WITHOUT_CLASSIFICATION	0.9995072487727535	WITHOUT_CLASSIFICATION	4.92751227246549E-4	DESIGN
// For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999993950328686	WITHOUT_CLASSIFICATION	6.049671314556919E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
//if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999998147243796	WITHOUT_CLASSIFICATION	1.8527562040314173E-7	DESIGN
//force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9999998258922957	WITHOUT_CLASSIFICATION	1.741077042100459E-7	DESIGN
// If this from element is a collection and the path is a collection property (maxIndex, etc.) then // generate a sub-query.	WITHOUT_CLASSIFICATION	0.9999478226502602	WITHOUT_CLASSIFICATION	5.217734973974622E-5	DESIGN
// entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999935010689653	WITHOUT_CLASSIFICATION	6.4989310346721734E-6	DESIGN
// collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999947124699479	WITHOUT_CLASSIFICATION	5.287530052118824E-6	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9997595172816369	WITHOUT_CLASSIFICATION	2.40482718363072E-4	DESIGN
//cannot occur	WITHOUT_CLASSIFICATION	0.9997595172816369	WITHOUT_CLASSIFICATION	2.40482718363072E-4	DESIGN
// only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.999998812361925	WITHOUT_CLASSIFICATION	1.1876380749965236E-6	DESIGN
// try "get"	WITHOUT_CLASSIFICATION	0.9999760895125722	WITHOUT_CLASSIFICATION	2.3910487427698074E-5	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999919237763416	WITHOUT_CLASSIFICATION	8.076223658397265E-5	DESIGN
// do nothing...	WITHOUT_CLASSIFICATION	0.999919237763416	WITHOUT_CLASSIFICATION	8.076223658397265E-5	DESIGN
// should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997719151746718	WITHOUT_CLASSIFICATION	2.2808482532822499E-4	DESIGN
// this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9997499269444343	WITHOUT_CLASSIFICATION	2.500730555656339E-4	DESIGN
// do not do anything	WITHOUT_CLASSIFICATION	0.9999971037278117	WITHOUT_CLASSIFICATION	2.8962721882020754E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999996017603694	WITHOUT_CLASSIFICATION	3.982396305501183E-7	DESIGN
//cant instantiate	WITHOUT_CLASSIFICATION	0.9990349794355833	WITHOUT_CLASSIFICATION	9.650205644168247E-4	DESIGN
//if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9996033375058286	WITHOUT_CLASSIFICATION	3.966624941713896E-4	DESIGN
// otherwise:	WITHOUT_CLASSIFICATION	0.9977949561897423	WITHOUT_CLASSIFICATION	0.002205043810257713	DESIGN
// skip finalize methods	WITHOUT_CLASSIFICATION	0.999940911107339	WITHOUT_CLASSIFICATION	5.908889266104194E-5	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9947042701502958	WITHOUT_CLASSIFICATION	0.005295729849704114	DESIGN
// note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9947042701502958	WITHOUT_CLASSIFICATION	0.005295729849704114	DESIGN
// HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.5429811051897026	WITHOUT_CLASSIFICATION	0.4570188948102973	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999971157671299	WITHOUT_CLASSIFICATION	2.8842328700289375E-6	DESIGN
// while constructor is running	WITHOUT_CLASSIFICATION	0.9999971157671299	WITHOUT_CLASSIFICATION	2.8842328700289375E-6	DESIGN
// note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.996339784765029	WITHOUT_CLASSIFICATION	0.003660215234970869	DESIGN
// interfaces // arguments	WITHOUT_CLASSIFICATION	0.9999991024265056	WITHOUT_CLASSIFICATION	8.975734943328781E-7	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9803572156988893	WITHOUT_CLASSIFICATION	0.019642784301110636	DESIGN
// Get the caller	WITHOUT_CLASSIFICATION	0.9999997339176292	WITHOUT_CLASSIFICATION	2.66082370792887E-7	DESIGN
// Get the caller principals	WITHOUT_CLASSIFICATION	0.9999993628296574	WITHOUT_CLASSIFICATION	6.371703425903035E-7	DESIGN
//private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.99999996736172	WITHOUT_CLASSIFICATION	3.263827998561958E-8	DESIGN
// Needed to bump this up to DotNode, because that is the only thing which currently // knows about the property-ref path in the correct format; it is either this, or // recurse over the DotNodes constructing the property path just like DotNode does // internally	WITHOUT_CLASSIFICATION	0.9999998499085951	WITHOUT_CLASSIFICATION	1.500914048011068E-7	DESIGN
//if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9997794411435216	WITHOUT_CLASSIFICATION	2.205588564783782E-4	DESIGN
//truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999951764901963	WITHOUT_CLASSIFICATION	4.823509803715816E-6	DESIGN
//full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9993163407852391	WITHOUT_CLASSIFICATION	6.836592147609273E-4	DESIGN
// null is not considered the same type as Integer. //$NON-NLS-1 //$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999985677422578	WITHOUT_CLASSIFICATION	1.4322577422526816E-6	DESIGN
// the outerJoinsAfterWhere needs to come before where clause to properly // handle dynamic filters	WITHOUT_CLASSIFICATION	0.9999985691929937	WITHOUT_CLASSIFICATION	1.4308070063427605E-6	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999620379060161	WITHOUT_CLASSIFICATION	3.7962093983970874E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999620379060161	WITHOUT_CLASSIFICATION	3.7962093983970874E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999620379060161	WITHOUT_CLASSIFICATION	3.7962093983970874E-5	DESIGN
//$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9999620379060161	WITHOUT_CLASSIFICATION	3.7962093983970874E-5	DESIGN
// strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999965455521397	WITHOUT_CLASSIFICATION	3.4544478603137095E-6	DESIGN
// if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9999698420740488	WITHOUT_CLASSIFICATION	3.0157925951190207E-5	DESIGN
//dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9999652430596314	WITHOUT_CLASSIFICATION	3.4756940368539206E-5	DESIGN
//for MySQL	WITHOUT_CLASSIFICATION	0.999389290881744	WITHOUT_CLASSIFICATION	6.107091182560676E-4	DESIGN
//HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9999952311488994	WITHOUT_CLASSIFICATION	4.768851100509294E-6	DESIGN
//null caused some problems	WITHOUT_CLASSIFICATION	0.9947486555429897	WITHOUT_CLASSIFICATION	0.005251344457010294	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
//not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9984465263546173	WITHOUT_CLASSIFICATION	0.0015534736453828234	DESIGN
//even on inverse="true"	WITHOUT_CLASSIFICATION	0.9999851423117666	WITHOUT_CLASSIFICATION	1.4857688233365843E-5	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
// If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999995302345742	WITHOUT_CLASSIFICATION	4.697654257587279E-7	DESIGN
// we only release the connection	WITHOUT_CLASSIFICATION	0.9999999009906523	WITHOUT_CLASSIFICATION	9.9009347738886E-8	DESIGN
// deprecated option...	WITHOUT_CLASSIFICATION	0.9994734754685896	WITHOUT_CLASSIFICATION	5.265245314104109E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999721477223709	WITHOUT_CLASSIFICATION	2.78522776292452E-5	DESIGN
//actually, this last test is probably unnecessary, since  //beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9987179533490143	WITHOUT_CLASSIFICATION	0.0012820466509857807	DESIGN
// this one only really needed for badly-behaved applications! // (if the TransactionManager has a Sychronization registered, // its a noop) // (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9999780455904218	WITHOUT_CLASSIFICATION	2.1954409578219187E-5	DESIGN
// Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9996841839930561	WITHOUT_CLASSIFICATION	3.1581600694392743E-4	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999721477223709	WITHOUT_CLASSIFICATION	2.78522776292452E-5	DESIGN
//if we could not register a synchronization, //do the before/after completion callbacks //ourself (but we need to let jdbcContext //know that this is what we are going to //do, so it doesn't keep trying to register //synchronizations)	WITHOUT_CLASSIFICATION	0.999997905828876	WITHOUT_CLASSIFICATION	2.094171123832707E-6	DESIGN
// swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9999496100360356	WITHOUT_CLASSIFICATION	5.0389963964485486E-5	DESIGN
// so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.999999644756895	WITHOUT_CLASSIFICATION	3.552431050473416E-7	DESIGN
// this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9998652900608345	WITHOUT_CLASSIFICATION	1.3470993916561675E-4	DESIGN
// two conditions where we need to transform this to a theta-join syntax: //      1) 'elem' is the "root from-element" in correlated subqueries //      2) The DotNode.useThetaStyleImplicitJoins has been set to true //          and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.7631451390785924	WITHOUT_CLASSIFICATION	0.23685486092140756	DESIGN
// WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9992386236732527	WITHOUT_CLASSIFICATION	7.613763267473202E-4	DESIGN
// for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999992160374182	WITHOUT_CLASSIFICATION	7.839625817881704E-6	DESIGN
//swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9999699081720408	WITHOUT_CLASSIFICATION	3.009182795913387E-5	DESIGN
// all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999890108601411	WITHOUT_CLASSIFICATION	1.0989139858778709E-5	DESIGN
// Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.999998683955576	WITHOUT_CLASSIFICATION	1.3160444240064463E-6	DESIGN
// all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999907242291238	WITHOUT_CLASSIFICATION	9.275770876122703E-6	DESIGN
// map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999930546991259	WITHOUT_CLASSIFICATION	6.945300874014301E-6	DESIGN
// this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9988125815704727	WITHOUT_CLASSIFICATION	0.0011874184295272835	DESIGN
//this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9698089521730701	WITHOUT_CLASSIFICATION	0.03019104782692988	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999988422651138	WITHOUT_CLASSIFICATION	1.1577348861799914E-6	DESIGN
// todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.8864381908670742	WITHOUT_CLASSIFICATION	0.11356180913292575	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999098357241736	WITHOUT_CLASSIFICATION	9.016427582637025E-5	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999961629743213	WITHOUT_CLASSIFICATION	3.837025678706593E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9993606779366314	WITHOUT_CLASSIFICATION	6.393220633685376E-4	DESIGN
// Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999961629743213	WITHOUT_CLASSIFICATION	3.837025678706593E-5	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999999979073586	WITHOUT_CLASSIFICATION	2.092641403745986E-8	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999974256373361	WITHOUT_CLASSIFICATION	2.5743626639071376E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// cached for efficiency...	WITHOUT_CLASSIFICATION	0.9808059163508583	WITHOUT_CLASSIFICATION	0.0191940836491416	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9997015583020437	WITHOUT_CLASSIFICATION	2.984416979563451E-4	DESIGN
// then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999098357241736	WITHOUT_CLASSIFICATION	9.016427582637025E-5	DESIGN
// then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9993606779366314	WITHOUT_CLASSIFICATION	6.393220633685376E-4	DESIGN
// put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.999999979073586	WITHOUT_CLASSIFICATION	2.092641403745986E-8	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9975166621251459	WITHOUT_CLASSIFICATION	0.0024833378748540256	DESIGN
//return currentId;	WITHOUT_CLASSIFICATION	0.999920965739173	WITHOUT_CLASSIFICATION	7.903426082698547E-5	DESIGN
//reset the id	WITHOUT_CLASSIFICATION	0.9999269878877485	WITHOUT_CLASSIFICATION	7.301211225151028E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//reset the version	WITHOUT_CLASSIFICATION	0.9999347121446281	WITHOUT_CLASSIFICATION	6.528785537191482E-5	DESIGN
// the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9884647034898303	WITHOUT_CLASSIFICATION	0.011535296510169777	DESIGN
// Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9999999906546332	WITHOUT_CLASSIFICATION	9.345366910445853E-9	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989400609494238	WITHOUT_CLASSIFICATION	0.0010599390505762502	DESIGN
// found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999974256373361	WITHOUT_CLASSIFICATION	2.5743626639071376E-5	DESIGN
// determine the id getter and setter methods from the proxy interface (if any) // determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9984807270381421	WITHOUT_CLASSIFICATION	0.0015192729618579794	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999752295739787	WITHOUT_CLASSIFICATION	2.4770426021340016E-5	DESIGN
// superclass entity-name	WITHOUT_CLASSIFICATION	0.9999928686952348	WITHOUT_CLASSIFICATION	7.13130476515906E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989400609494238	WITHOUT_CLASSIFICATION	0.0010599390505762502	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
//init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9999704313548956	WITHOUT_CLASSIFICATION	2.956864510442275E-5	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989400609494238	WITHOUT_CLASSIFICATION	0.0010599390505762502	DESIGN
// legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.999999721986684	WITHOUT_CLASSIFICATION	2.780133159620855E-7	DESIGN
// Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9999997875588174	WITHOUT_CLASSIFICATION	2.1244118263231074E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
//note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9999545612505856	WITHOUT_CLASSIFICATION	4.543874941450633E-5	DESIGN
// Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9999902976432165	WITHOUT_CLASSIFICATION	9.702356783564874E-6	DESIGN
// Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9999982886619755	WITHOUT_CLASSIFICATION	1.7113380245587274E-6	DESIGN
// Collection Types:	WITHOUT_CLASSIFICATION	0.9999949442145566	WITHOUT_CLASSIFICATION	5.055785443382032E-6	DESIGN
// convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998956266723937	WITHOUT_CLASSIFICATION	1.0437332760623214E-4	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999717372558342	WITHOUT_CLASSIFICATION	2.826274416582385E-5	DESIGN
//Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.999999940084835	WITHOUT_CLASSIFICATION	5.991516514122818E-8	DESIGN
//value is the entity name	WITHOUT_CLASSIFICATION	0.999916984743453	WITHOUT_CLASSIFICATION	8.301525654706674E-5	DESIGN
//EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9999638545423363	WITHOUT_CLASSIFICATION	3.6145457663717356E-5	DESIGN
// generate id select fragment and then property select fragment for // each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9967138934367658	WITHOUT_CLASSIFICATION	0.0032861065632341906	DESIGN
//TODO!	WITHOUT_CLASSIFICATION	0.9803572156988893	WITHOUT_CLASSIFICATION	0.019642784301110636	DESIGN
//xml is the entity name	WITHOUT_CLASSIFICATION	0.9999655585491235	WITHOUT_CLASSIFICATION	3.4441450876601053E-5	DESIGN
//special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9996440582667432	WITHOUT_CLASSIFICATION	3.5594173325677016E-4	DESIGN
//tolerates nulls	WITHOUT_CLASSIFICATION	0.9998949415842632	WITHOUT_CLASSIFICATION	1.0505841573684894E-4	DESIGN
/*sqlResultTypeList,*/	WITHOUT_CLASSIFICATION	0.9999793782583623	WITHOUT_CLASSIFICATION	2.062174163771771E-5	DESIGN
// metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.999991649808295	WITHOUT_CLASSIFICATION	8.350191704966781E-6	DESIGN
// Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9997479572133928	WITHOUT_CLASSIFICATION	2.520427866071104E-4	DESIGN
// Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998800555337595	WITHOUT_CLASSIFICATION	1.1994446624049259E-4	DESIGN
//return AssociationType.FOREIGN_KEY_TO_PARENT; //this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.754099069311323	WITHOUT_CLASSIFICATION	0.24590093068867688	DESIGN
// Use the lower case function name. // Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.999999895563791	WITHOUT_CLASSIFICATION	1.0443620901151999E-7	DESIGN
// IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9997267246848118	WITHOUT_CLASSIFICATION	2.732753151881797E-4	DESIGN
//TODO!!!	WITHOUT_CLASSIFICATION	0.9503105685449782	WITHOUT_CLASSIFICATION	0.049689431455021756	DESIGN
//st.setTimestamp( index,  new Timestamp( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999992083963908	WITHOUT_CLASSIFICATION	7.916036092265383E-7	DESIGN
//st.setDate( index,  new Date( cal.getTimeInMillis() ), cal ); //JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9999931265219608	WITHOUT_CLASSIFICATION	6.873478039213738E-6	DESIGN
// both are Timestamps	WITHOUT_CLASSIFICATION	0.9999996165305423	WITHOUT_CLASSIFICATION	3.834694577496796E-7	DESIGN
// at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9999787521811939	WITHOUT_CLASSIFICATION	2.1247818806048522E-5	DESIGN
//noop	WITHOUT_CLASSIFICATION	0.9998214185315748	WITHOUT_CLASSIFICATION	1.7858146842512787E-4	DESIGN
// if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999999659947739	WITHOUT_CLASSIFICATION	3.4005226144492794E-8	DESIGN
// Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.999817594897181	WITHOUT_CLASSIFICATION	1.8240510281901373E-4	DESIGN
// Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999987026977734	WITHOUT_CLASSIFICATION	1.2973022265871417E-6	DESIGN
//or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9982996797987922	WITHOUT_CLASSIFICATION	0.001700320201207781	DESIGN
//Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9999157823233791	WITHOUT_CLASSIFICATION	8.421767662099262E-5	DESIGN
//TODO	WITHOUT_CLASSIFICATION	0.9991807055772892	WITHOUT_CLASSIFICATION	8.19294422710697E-4	DESIGN
// Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9999995865643428	WITHOUT_CLASSIFICATION	4.1343565720184043E-7	DESIGN
//different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999869516318416	WITHOUT_CLASSIFICATION	1.304836815839048E-4	DESIGN
//cache this	WITHOUT_CLASSIFICATION	0.9984411386837678	WITHOUT_CLASSIFICATION	0.001558861316232201	DESIGN
//only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9995307538005486	WITHOUT_CLASSIFICATION	4.692461994513817E-4	DESIGN
// Forcefully remove leading ands from where fragments; the grammar will // handle adding them	WITHOUT_CLASSIFICATION	0.9993509015185756	WITHOUT_CLASSIFICATION	6.490984814243839E-4	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9688382091103659	WITHOUT_CLASSIFICATION	0.031161790889634073	DESIGN
// Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999998125408469	WITHOUT_CLASSIFICATION	1.8745915316579088E-7	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
//public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9190309692865244	DESIGN	0.08096903071347561	WITHOUT_CLASSIFICATION
//nothing to do	WITHOUT_CLASSIFICATION	0.9999677774889181	WITHOUT_CLASSIFICATION	3.2222511082034445E-5	DESIGN
//nothing to do	WITHOUT_CLASSIFICATION	0.9999677774889181	WITHOUT_CLASSIFICATION	3.2222511082034445E-5	DESIGN
// VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ //      Note : simply returns null for seed() and next() as the only known //      application of binary types for versioning is for use with the //      TIMESTAMP datatype supported by Sybase and SQL Server, which //      are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999998372985456	WITHOUT_CLASSIFICATION	1.627014544636661E-7	DESIGN
//lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9999717372558342	WITHOUT_CLASSIFICATION	2.826274416582385E-5	DESIGN
//not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.8708183375088264	WITHOUT_CLASSIFICATION	0.12918166249117358	DESIGN
//Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.999999996377592	WITHOUT_CLASSIFICATION	3.622407979243567E-9	DESIGN
// we do not have to worry about queued additions to uninitialized // collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999997848548275	WITHOUT_CLASSIFICATION	2.1514517251980691E-7	DESIGN
// collections cannot be compared	WITHOUT_CLASSIFICATION	0.9999980367192033	WITHOUT_CLASSIFICATION	1.963280796645155E-6	DESIGN
//remember the uk value	WITHOUT_CLASSIFICATION	0.9998943317800267	WITHOUT_CLASSIFICATION	1.0566821997317492E-4	DESIGN
//NOOP	WITHOUT_CLASSIFICATION	0.9996169604008324	WITHOUT_CLASSIFICATION	3.830395991676808E-4	DESIGN
//processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9999984362382253	WITHOUT_CLASSIFICATION	1.5637617747427342E-6	DESIGN
//we must use the "remembered" uk value, since it is  //not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9983465705005289	WITHOUT_CLASSIFICATION	0.0016534294994710657	DESIGN
// collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9998603533433189	WITHOUT_CLASSIFICATION	1.3964665668103724E-4	DESIGN
// return false;	WITHOUT_CLASSIFICATION	0.9999828815813633	WITHOUT_CLASSIFICATION	1.7118418636744832E-5	DESIGN
// This just handles a particular case of component // projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.6204915086793951	WITHOUT_CLASSIFICATION	0.37950849132060493	DESIGN
//NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999992661072061	WITHOUT_CLASSIFICATION	7.338927938359627E-7	DESIGN
// the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.999965339381547	WITHOUT_CLASSIFICATION	3.466061845294624E-5	DESIGN
// if the original is a PersistentCollection, and that original // was not flagged as dirty, then reset the target's dirty flag // here after the copy operation. // </p> // One thing to be careful of here is a "bare" original collection // in which case we should never ever ever reset the dirty flag // on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999999541002823	WITHOUT_CLASSIFICATION	4.5899717646477906E-8	DESIGN
//ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9999999244632256	WITHOUT_CLASSIFICATION	7.553677433616993E-8	DESIGN
// copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9999998397670068	WITHOUT_CLASSIFICATION	1.6023299314476236E-7	DESIGN
// for a null target, or a target which is the same as the original, we // need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999858827574017	WITHOUT_CLASSIFICATION	1.4117242598252743E-5	DESIGN
// by default just use an unanticipated capacity since we don't // know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9525071610445908	WITHOUT_CLASSIFICATION	0.04749283895540915	DESIGN
// get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999998041657795	WITHOUT_CLASSIFICATION	1.9583422051345E-7	DESIGN
// check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9998559970775939	WITHOUT_CLASSIFICATION	1.440029224061845E-4	DESIGN
// check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999981693824351	WITHOUT_CLASSIFICATION	1.8306175648095779E-6	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999882929661	WITHOUT_CLASSIFICATION	1.1707033883463E-8	DESIGN
//TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9688382091103659	WITHOUT_CLASSIFICATION	0.031161790889634073	DESIGN
// create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9999477149456338	WITHOUT_CLASSIFICATION	5.228505436608599E-5	DESIGN
// Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9996267992519487	WITHOUT_CLASSIFICATION	3.732007480512638E-4	DESIGN
// our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999998040407674	WITHOUT_CLASSIFICATION	1.959592326114781E-7	DESIGN
//cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999976840110824	WITHOUT_CLASSIFICATION	2.3159889176210237E-6	DESIGN
// we already know current is not null...	WITHOUT_CLASSIFICATION	0.9995087573003046	WITHOUT_CLASSIFICATION	4.912426996953851E-4	DESIGN
// the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9999741258103265	WITHOUT_CLASSIFICATION	2.587418967349283E-5	DESIGN
//the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9999997866102983	WITHOUT_CLASSIFICATION	2.1338970165948395E-7	DESIGN
// ----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9999902226090853	WITHOUT_CLASSIFICATION	9.777390914703966E-6	DESIGN
// ----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999993012558065	WITHOUT_CLASSIFICATION	6.987441934741109E-7	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// --------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9998741273896864	WITHOUT_CLASSIFICATION	1.2587261031359428E-4	DESIGN
// Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9999972959535157	WITHOUT_CLASSIFICATION	2.704046484301855E-6	DESIGN
// Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9999999954633626	WITHOUT_CLASSIFICATION	4.536637429918003E-9	DESIGN
//Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9963044236983615	WITHOUT_CLASSIFICATION	0.003695576301638428	DESIGN
// Handles things like: // a and b or c // a and ( b or c ) // not a and not b // not ( a and b ) // x between y and z            (overloaded "and") // x in ( a, b, c )             (overloaded brackets) // not not a // a is not null                (overloaded "not") // etc...... // and expressions like // foo = bar                    (maps to: foo.id = bar.id) // foo.Bar = 'foo'              (maps to: foo.bar = 'foo') // foo.Bar.Baz = 1.0            (maps to: foo.bar = bar.id and bar.baz = 1.0) // 1.0 = foo.Bar.Baz            (maps to: bar.baz = 1.0 and foo.Bar = bar.id) // foo.Bar.Baz = a.B.C          (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) // foo.Bar.Baz + a.B.C          (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) // ( foo.Bar.Baz + 1.0 ) < 2.0  (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9513123304816588	WITHOUT_CLASSIFICATION	0.04868766951834137	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999977447901582	WITHOUT_CLASSIFICATION	2.25520984179028E-6	DESIGN
// release the jdk internal caches everytime to ensure this // plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9999977447901582	WITHOUT_CLASSIFICATION	2.25520984179028E-6	DESIGN
// try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998960807549145	WITHOUT_CLASSIFICATION	1.039192450855452E-4	DESIGN
// otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997367549452891	WITHOUT_CLASSIFICATION	2.632450547109423E-4	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999694680795103	WITHOUT_CLASSIFICATION	3.053192048966007E-5	DESIGN
//its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9999694680795103	WITHOUT_CLASSIFICATION	3.053192048966007E-5	DESIGN
// use default behavior	WITHOUT_CLASSIFICATION	0.9998994051666057	WITHOUT_CLASSIFICATION	1.005948333943301E-4	DESIGN
//NOTE: early return	WITHOUT_CLASSIFICATION	0.9996044857783519	WITHOUT_CLASSIFICATION	3.955142216480928E-4	DESIGN
// the MRU cache used to keep hard references to the most recently used query plans; // note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the // actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.5353816204148674	WITHOUT_CLASSIFICATION	0.46461837958513275	DESIGN
// we want to be able to just use the defaults, // if JNDI environment properties are not supplied // so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999971606426126	WITHOUT_CLASSIFICATION	2.8393573874266996E-6	DESIGN
// Clone //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999056430389	WITHOUT_CLASSIFICATION	9.435696105576289E-8	DESIGN
// Serialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999533958759	WITHOUT_CLASSIFICATION	4.660412397197541E-8	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999986345264218	WITHOUT_CLASSIFICATION	1.3654735782455726E-6	DESIGN
// stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999986345264218	WITHOUT_CLASSIFICATION	1.3654735782455726E-6	DESIGN
// Deserialize //-----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9999999668251282	WITHOUT_CLASSIFICATION	3.3174871956760956E-8	DESIGN
/* static methods only - hide constructor */	WITHOUT_CLASSIFICATION	0.97621052104758	WITHOUT_CLASSIFICATION	0.02378947895242003	DESIGN
/*&& !('_'==character)*/	WITHOUT_CLASSIFICATION	0.9999960109464466	WITHOUT_CLASSIFICATION	3.9890535534501235E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999992686624302	WITHOUT_CLASSIFICATION	7.313375698135094E-6	DESIGN
// returnign null!	WITHOUT_CLASSIFICATION	0.999992686624302	WITHOUT_CLASSIFICATION	7.313375698135094E-6	DESIGN
// includes last '.'	WITHOUT_CLASSIFICATION	0.9999984535016392	WITHOUT_CLASSIFICATION	1.5464983608586506E-6	DESIGN
// +1 to include the following '.'	WITHOUT_CLASSIFICATION	0.999989236209106	WITHOUT_CLASSIFICATION	1.0763790894078373E-5	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.96794255189308	WITHOUT_CLASSIFICATION	0.03205744810692008	DESIGN
// first time we find match!	WITHOUT_CLASSIFICATION	0.9999988070644513	WITHOUT_CLASSIFICATION	1.1929355486843345E-6	DESIGN
// entityNames may now include slashes for the representations //classname may be an inner class	WITHOUT_CLASSIFICATION	0.9997715279680925	WITHOUT_CLASSIFICATION	2.2847203190755932E-4	DESIGN
// wrapped iterators	WITHOUT_CLASSIFICATION	0.9999335553903916	WITHOUT_CLASSIFICATION	6.644460960837333E-5	DESIGN
// index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999780981736536	WITHOUT_CLASSIFICATION	2.1901826346415213E-4	DESIGN
// the current iterator	WITHOUT_CLASSIFICATION	0.9999617116077951	WITHOUT_CLASSIFICATION	3.828839220484633E-5	DESIGN
// the last used iterator	WITHOUT_CLASSIFICATION	0.9998292771518075	WITHOUT_CLASSIFICATION	1.7072284819256438E-4	DESIGN
//it was a boolean expression	WITHOUT_CLASSIFICATION	0.9982400482375943	WITHOUT_CLASSIFICATION	0.0017599517624056885	DESIGN
/*public static Object[] clone(Class elementClass, Object[] array) {	WITHOUT_CLASSIFICATION	0.9961302498571615	WITHOUT_CLASSIFICATION	0.003869750142838381	DESIGN
// call this before any Iterator method to make sure that the current Iterator // is not exhausted	WITHOUT_CLASSIFICATION	0.9984229818142762	WITHOUT_CLASSIFICATION	0.0015770181857237089	DESIGN
//doable if needed	WITHOUT_CLASSIFICATION	0.9994757021244295	WITHOUT_CLASSIFICATION	5.242978755705228E-4	DESIGN
// set last used iterator here, in case the user calls remove // before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.999891841611242	WITHOUT_CLASSIFICATION	1.0815838875806388E-4	DESIGN
// peek ahead	WITHOUT_CLASSIFICATION	0.9999339745501094	WITHOUT_CLASSIFICATION	6.602544989058261E-5	DESIGN
// if we reach the end of the string w/o finding the // matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999999893236755	WITHOUT_CLASSIFICATION	1.0676324617466293E-8	DESIGN
// we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9999271922479237	WITHOUT_CLASSIFICATION	7.280775207632337E-5	DESIGN
// make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999994731737563	WITHOUT_CLASSIFICATION	5.268262437841567E-7	DESIGN
// First, try to locate this resource through the current // context classloader.	WITHOUT_CLASSIFICATION	0.9999983424256111	WITHOUT_CLASSIFICATION	1.6575743888384231E-6	DESIGN
// Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9999959283594236	WITHOUT_CLASSIFICATION	4.071640576377137E-6	DESIGN
// Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9999973246622752	WITHOUT_CLASSIFICATION	2.675337724770187E-6	DESIGN
// Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9944636929407284	WITHOUT_CLASSIFICATION	0.0055363070592715155	DESIGN
// would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9845523900858965	WITHOUT_CLASSIFICATION	0.01544760991410361	DESIGN
//Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9999997182674008	WITHOUT_CLASSIFICATION	2.817325992199989E-7	DESIGN
//faster?	WITHOUT_CLASSIFICATION	0.9770059504799702	WITHOUT_CLASSIFICATION	0.0229940495200298	DESIGN
// the name of a class	WITHOUT_CLASSIFICATION	0.999876570605997	WITHOUT_CLASSIFICATION	1.2342939400304987E-4	DESIGN
// Its the listener class name	WITHOUT_CLASSIFICATION	0.9999966897398617	WITHOUT_CLASSIFICATION	3.310260138415176E-6	DESIGN
//allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9999721226259465	WITHOUT_CLASSIFICATION	2.787737405359667E-5	DESIGN
// default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9999997299502544	WITHOUT_CLASSIFICATION	2.7004974562416893E-7	DESIGN
// look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9996851024124069	WITHOUT_CLASSIFICATION	3.1489758759308716E-4	DESIGN
// in case we were deserialized in a different JVM, look for an instance with the same name // (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8486846696314193	WITHOUT_CLASSIFICATION	0.15131533036858075	DESIGN
// first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9999810911542663	WITHOUT_CLASSIFICATION	1.8908845733750677E-5	DESIGN
// Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9999976842453399	WITHOUT_CLASSIFICATION	2.31575466019678E-6	DESIGN
//entirely optional!!	WITHOUT_CLASSIFICATION	0.9997549632021216	WITHOUT_CLASSIFICATION	2.450367978783164E-4	DESIGN
// Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.999923987371098	WITHOUT_CLASSIFICATION	7.601262890195442E-5	DESIGN
//context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9998610038834288	WITHOUT_CLASSIFICATION	1.3899611657112537E-4	DESIGN
//readResolveObject	WITHOUT_CLASSIFICATION	0.9979241296579282	WITHOUT_CLASSIFICATION	0.0020758703420716965	DESIGN
//cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999999804180286	WITHOUT_CLASSIFICATION	1.9581971406083103E-7	DESIGN
// Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9999977197165384	WITHOUT_CLASSIFICATION	2.280283461612806E-6	DESIGN
// Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9999815172855259	WITHOUT_CLASSIFICATION	1.84827144741334E-5	DESIGN
// Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999257729196148	WITHOUT_CLASSIFICATION	7.422708038514976E-5	DESIGN
// Begin unit of work	WITHOUT_CLASSIFICATION	0.9999830234174724	WITHOUT_CLASSIFICATION	1.6976582527560007E-5	DESIGN
// Write HTML header	WITHOUT_CLASSIFICATION	0.9999394101099647	WITHOUT_CLASSIFICATION	6.058989003537821E-5	DESIGN
// Handle actions	WITHOUT_CLASSIFICATION	0.9998765866797825	WITHOUT_CLASSIFICATION	1.2341332021743686E-4	DESIGN
// Print page	WITHOUT_CLASSIFICATION	0.9999993663049342	WITHOUT_CLASSIFICATION	6.336950656544282E-7	DESIGN
// Write HTML footer	WITHOUT_CLASSIFICATION	0.9999876400918389	WITHOUT_CLASSIFICATION	1.2359908161097991E-5	DESIGN
// End unit of work	WITHOUT_CLASSIFICATION	0.9999932785974641	WITHOUT_CLASSIFICATION	6.72140253589948E-6	DESIGN
// Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.9994015837036436	WITHOUT_CLASSIFICATION	5.984162963562656E-4	DESIGN
// make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9999843455133459	WITHOUT_CLASSIFICATION	1.5654486654066057E-5	DESIGN
// pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999999954567037	WITHOUT_CLASSIFICATION	4.5432962098465486E-9	DESIGN
// remove session from "current context"	WITHOUT_CLASSIFICATION	0.9999087800832149	WITHOUT_CLASSIFICATION	9.121991678504469E-5	DESIGN
// Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9999959535599224	WITHOUT_CLASSIFICATION	4.046440077619595E-6	DESIGN
// If we want to handle it bidirectional and detached, we also need to load this // collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9999999895384709	WITHOUT_CLASSIFICATION	1.0461529022880079E-8	DESIGN
/*        Event anEvent = (Event) session                .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN)                .add( Expression.eq("id", eventId) )                .uniqueResult(); // Eager fetch the colleciton so we can use it detached        */	WITHOUT_CLASSIFICATION	0.9999999994895584	WITHOUT_CLASSIFICATION	5.104415834580314E-10	DESIGN
// End of first unit of work	WITHOUT_CLASSIFICATION	0.9999980432754896	WITHOUT_CLASSIFICATION	1.956724510334535E-6	DESIGN
// or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999337716206105	WITHOUT_CLASSIFICATION	6.622837938956247E-5	DESIGN
// Begin second unit of work	WITHOUT_CLASSIFICATION	0.9999436692672593	WITHOUT_CLASSIFICATION	5.6330732740585714E-5	DESIGN
// Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9999798020929984	WITHOUT_CLASSIFICATION	2.019790700156367E-5	DESIGN
// The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9999987475912461	WITHOUT_CLASSIFICATION	1.252408754001573E-6	DESIGN
// We need our tm, so get it now and avoid doing other work // if there is a problem	WITHOUT_CLASSIFICATION	0.999982006769833	WITHOUT_CLASSIFICATION	1.7993230166979885E-5	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999320328236	WITHOUT_CLASSIFICATION	6.796717646615248E-8	DESIGN
// Don't hold the JBC node lock throughout the tx, as that // prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999999320328236	WITHOUT_CLASSIFICATION	6.796717646615248E-8	DESIGN
// JBC put a version in the node when it created as part of // some internal operation. We are always newer, but if // the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.999999991022559	WITHOUT_CLASSIFICATION	8.977441027258083E-9	DESIGN
//swaldman 2006-08-28: define c3p0-style configuration parameters for properties with //                     hibernate-specific overrides to detect and warn about conflicting //                     declarations	WITHOUT_CLASSIFICATION	0.9998582197608781	WITHOUT_CLASSIFICATION	1.4178023912185937E-4	DESIGN
// Not null if the Isolation level has been specified in the configuration file. // Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999996375705597	WITHOUT_CLASSIFICATION	3.6242944042448233E-7	DESIGN
// Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container // already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.999644621160963	WITHOUT_CLASSIFICATION	3.553788390369719E-4	DESIGN
// If you're closing down the ConnectionProvider chances are an // is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999999985093948	WITHOUT_CLASSIFICATION	1.4906051989829318E-9	DESIGN
// (AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.99998108963097	WITHOUT_CLASSIFICATION	1.8910369029944732E-5	DESIGN
// process the "new" HQL style where aliases are assigned // _after_ the class name or path expression ie. using // the AS construction	WITHOUT_CLASSIFICATION	0.999999693876977	WITHOUT_CLASSIFICATION	3.0612302304806367E-7	DESIGN
// the loaded owner will be set to null after the collection is removed, // so capture its value as the affected owner so it is accessible to // both pre- and post- events	WITHOUT_CLASSIFICATION	0.999999998169599	WITHOUT_CLASSIFICATION	1.8304010960941635E-9	DESIGN
// is a primitive type // invokespecial	WITHOUT_CLASSIFICATION	0.9999997625174339	WITHOUT_CLASSIFICATION	2.374825660843478E-7	DESIGN
// array of primitive type // do nothing	WITHOUT_CLASSIFICATION	0.9999998894394113	WITHOUT_CLASSIFICATION	1.1056058872423675E-7	DESIGN
// handle a path expression or class name that // appears at the start, in the "new" HQL // style or an alias that appears at the start // in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9897853647140936	WITHOUT_CLASSIFICATION	0.010214635285906305	DESIGN
//handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9999387256501236	WITHOUT_CLASSIFICATION	6.127434987634388E-5	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999986013246	WITHOUT_CLASSIFICATION	1.3986754177046092E-9	DESIGN
// transfer an explicitly defined entity name // handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9999236631224088	WITHOUT_CLASSIFICATION	7.63368775912486E-5	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996498392703818	WITHOUT_CLASSIFICATION	3.501607296182692E-4	DESIGN
//keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9996498392703818	WITHOUT_CLASSIFICATION	3.501607296182692E-4	DESIGN
// get meta's from // <joined-subclass>	WITHOUT_CLASSIFICATION	0.9999994888410095	WITHOUT_CLASSIFICATION	5.111589903685849E-7	DESIGN
// parameters on the property mapping should // override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9999896133582623	WITHOUT_CLASSIFICATION	1.0386641737707711E-5	DESIGN
//fetch="join" overrides default laziness //fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9999999909240107	WITHOUT_CLASSIFICATION	9.075989177867558E-9	DESIGN
//NOTE SPECIAL CASE: // default to join and non-lazy for the "second join" // of the many-to-many	WITHOUT_CLASSIFICATION	0.9999999686439862	WITHOUT_CLASSIFICATION	3.135601375636819E-8	DESIGN
// so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999991329339856	WITHOUT_CLASSIFICATION	8.670660144884576E-7	DESIGN
// state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999783407402973	WITHOUT_CLASSIFICATION	2.1659259702704356E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//element //index -> id	WITHOUT_CLASSIFICATION	0.9999947505789788	WITHOUT_CLASSIFICATION	5.249421021192639E-6	DESIGN
// note that it might be better to iterate the snapshot but this is safe, // assuming the user implements equals() properly, as required by the Set // contract!	WITHOUT_CLASSIFICATION	0.9111549645054167	WITHOUT_CLASSIFICATION	0.0888450354945833	DESIGN
// collections detect changes made via their public interface and mark // themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999476252293339	WITHOUT_CLASSIFICATION	5.237477066606447E-5	DESIGN
// essentially, if the real session is closed allow any // method call to pass through since the real session // will complain by throwing an appropriate exception; // NOTE that allowing close() above has the same basic effect, //   but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999998269350086	WITHOUT_CLASSIFICATION	1.7306499154879176E-7	DESIGN
// The default SQLExceptionConverter for all dialects is based on SQLState // since SQLErrorCode is extremely vendor-specific.  Specific Dialects // may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999998854349537	WITHOUT_CLASSIFICATION	1.1456504640342394E-7	DESIGN
//only necessary for postgre < 7.4 //http://anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.999999409785231	WITHOUT_CLASSIFICATION	5.902147690450081E-7	DESIGN
// select topic, syntax from information_schema.help // where section like 'Function%' order by section, topic // // see also ->  http://www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999999842473265	WITHOUT_CLASSIFICATION	1.5752673497872504E-8	DESIGN
// registerColumnType(Types.VARBINARY, "CHARACTER($l)"); // registerColumnType(Types.BLOB, "CHARACTER($l)" );  // For use prior to CP 11.0 // registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9999988960203645	WITHOUT_CLASSIFICATION	1.1039796354429972E-6	DESIGN
//the BLOB type requires a size arguement - this defaults to //bytes - no arg defaults to 1 whole byte! //other argument mods include K - kilobyte, M - megabyte, G - gigabyte. //refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9170727205787951	DESIGN	0.0829272794212049	WITHOUT_CLASSIFICATION
// We must return a valid RDMS/RSA command from this method to // prevent RDMS/RSA from issuing *ERROR 400	WITHOUT_CLASSIFICATION	0.9998870404160164	WITHOUT_CLASSIFICATION	1.1295958398356713E-4	DESIGN
// Oracle driver reports to support getGeneratedKeys(), but they only // support the version taking an array of the names of the columns to // be returned (via its RETURNING clause).  No other driver seems to // support this overloaded version.	WITHOUT_CLASSIFICATION	0.7105301882210967	WITHOUT_CLASSIFICATION	0.28946981177890324	DESIGN
// add the comment // nest the main query in an outer select // add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999855330534301	WITHOUT_CLASSIFICATION	1.4466946569886269E-5	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// Note: For object <-> SQL datatype mappings see: //	WITHOUT_CLASSIFICATION	0.9999212892220403	WITHOUT_CLASSIFICATION	7.87107779596885E-5	DESIGN
// TRIM(end_keyword string-expression-1 FROM string-expression-2) // use Hibernate implementation "From" is one of the parameters they pass in position ?3 //registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999999746101984	WITHOUT_CLASSIFICATION	2.5389801706613675E-8	DESIGN
// Whether this dialect has an Identity clause added to the data type or a completely seperate identity // data type	WITHOUT_CLASSIFICATION	0.9999579078723905	WITHOUT_CLASSIFICATION	4.209212760955256E-5	DESIGN
// According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. // at least one paramer (trimSource) is required.  From the SQL spec: // // <trim function> ::= //      TRIM <left paren> <trim operands> <right paren> // // <trim operands> ::= //      [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> // // <trim specification> ::= //      LEADING //      | TRAILING //      | BOTH // // If <trim specification> is omitted, BOTH is assumed. // If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999999171802	WITHOUT_CLASSIFICATION	8.281982513660053E-11	DESIGN
/////////////////////////////////////////////////////////////////////// // Prepare persisters and link them up with their cache // region/access-strategy	WITHOUT_CLASSIFICATION	0.9999386691887838	WITHOUT_CLASSIFICATION	6.133081121618945E-5	DESIGN
//Named Queries:	WITHOUT_CLASSIFICATION	0.9998537889111688	WITHOUT_CLASSIFICATION	1.462110888311203E-4	DESIGN
// this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.9939803890850405	WITHOUT_CLASSIFICATION	0.006019610914959441	DESIGN
// does not handle arrays (thats ok, cos they can't be lazy) // or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9940914324339617	WITHOUT_CLASSIFICATION	0.00590856756603828	DESIGN
// collection deletions are a special case since update() can add // deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999999999507463	WITHOUT_CLASSIFICATION	4.925373139339167E-11	DESIGN
// we can do the cast since orphan-delete does not apply to: // 1. newly instantiated collections // 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.988823878423739	WITHOUT_CLASSIFICATION	0.011176121576261107	DESIGN
// if the natural-id is marked as non-mutable, it is not retrieved during a // normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9999868482139239	WITHOUT_CLASSIFICATION	1.3151786076041219E-5	DESIGN
// watch out for a case where old is still referenced // somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9981163453273111	WITHOUT_CLASSIFICATION	0.0018836546726889278	DESIGN
//slice, to get the columns for this component //property	WITHOUT_CLASSIFICATION	0.9990199103634079	WITHOUT_CLASSIFICATION	9.800896365921425E-4	DESIGN
//int result = 17; //result = 37 * result + type.hashCode(); //result = 37 * result + ( value==null ? 0 : value.hashCode() ); //return result;	WITHOUT_CLASSIFICATION	0.99999999816178	WITHOUT_CLASSIFICATION	1.8382199910445375E-9	DESIGN
// The CollectionEntry.isReached() stuff is just to detect any silly users   // who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999913839819807	WITHOUT_CLASSIFICATION	8.61601801928042E-6	DESIGN
// detached collection wrappers that get found + reattached // during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999997247727012	WITHOUT_CLASSIFICATION	2.752272988245937E-7	DESIGN
// The unique property value represented here may or may not be // serializable, so we do an explicit check here in order to generate // a better error message	WITHOUT_CLASSIFICATION	0.7128877971282619	WITHOUT_CLASSIFICATION	0.2871122028717381	DESIGN
// if the version of a newly instantiated object is not the same // as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9992462433024581	WITHOUT_CLASSIFICATION	7.53756697541819E-4	DESIGN
// ie. we never have to null out a reference to // an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999946664223963	WITHOUT_CLASSIFICATION	5.3335776036494534E-6	DESIGN
// ignore this row, the collection is in process of // being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999997670234752	WITHOUT_CLASSIFICATION	2.329765247730874E-7	DESIGN
// Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // 	WITHOUT_CLASSIFICATION	0.9999996800105416	WITHOUT_CLASSIFICATION	3.1998945834018737E-7	DESIGN
// should be ok performance-wise to generate new delegate instances for each // request since these are locally stack-scoped.  Besides, it makes the code // much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.7436449314710191	DESIGN	0.2563550685289809	WITHOUT_CLASSIFICATION
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994999695622747	WITHOUT_CLASSIFICATION	5.000304377252918E-4	DESIGN
// this implementation is supposed to tolerate incorrect unsaved-value // mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9994999695622747	WITHOUT_CLASSIFICATION	5.000304377252918E-4	DESIGN
// wrap up any new collections directly referenced by the object // or its components	WITHOUT_CLASSIFICATION	0.9999993371404953	WITHOUT_CLASSIFICATION	6.628595047774481E-7	DESIGN
// remove any snapshot, not really for memory management purposes, but // rather because it might now be stale, and there is no longer any  // EntityEntry to take precedence // This is now handled by removeEntity() //session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9999722995194382	WITHOUT_CLASSIFICATION	2.770048056172735E-5	DESIGN
// skip this check for composite-ids relating to dom4j entity-mode; // alternatively, we could add a check to make sure the incoming id value is // an instance of Element...	WITHOUT_CLASSIFICATION	0.6529214668002189	DESIGN	0.34707853319978105	WITHOUT_CLASSIFICATION
// upgrade the lock if necessary: //lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9997573057440797	WITHOUT_CLASSIFICATION	2.4269425592030028E-4	DESIGN
// now, any collections that are initialized // inside this block do not get updated - they // are ignored until the next flush	WITHOUT_CLASSIFICATION	0.999998381618552	WITHOUT_CLASSIFICATION	1.6183814478711676E-6	DESIGN
//we must clone embedded composite identifiers, or  //we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9999990672189764	WITHOUT_CLASSIFICATION	9.32781023614588E-7	DESIGN
// Sub-insertions should occur before containing insertion so // Try to do the callback now	WITHOUT_CLASSIFICATION	0.9999475216200223	WITHOUT_CLASSIFICATION	5.2478379977722655E-5	DESIGN
//the entity is not associated with the session, so //try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999916515113364	WITHOUT_CLASSIFICATION	8.348488663701794E-6	DESIGN
//scan the query string for class names appearing in the from clause and replace //with all persistent implementors of the class/interface, returning multiple //query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9975544028963729	DESIGN	0.0024455971036270703	WITHOUT_CLASSIFICATION
// save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999996026362132	WITHOUT_CLASSIFICATION	3.973637867492162E-7	DESIGN
// evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999997161520409	WITHOUT_CLASSIFICATION	2.8384795911234314E-7	DESIGN
//stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9990161713648215	WITHOUT_CLASSIFICATION	9.838286351784812E-4	DESIGN
//if it is an uninitialized proxy, pointing //with this session, then when it is accessed, //the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9999902334298258	WITHOUT_CLASSIFICATION	9.76657017424143E-6	DESIGN
// Generate an explicit join for the root dot node.   The implied joins will be collected and passed up // to the root dot node.	WITHOUT_CLASSIFICATION	0.9999999960906488	WITHOUT_CLASSIFICATION	3.909351144498372E-9	DESIGN
// A session is considered to contain an entity only if the entity has // an entry in the session's persistence context and the entry reports // that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9998538982595898	WITHOUT_CLASSIFICATION	1.4610174041013323E-4	DESIGN
// Does the collection referenced by this FromElement // specify an order-by attribute?  If so, attach it to // the query's order-by	WITHOUT_CLASSIFICATION	0.9994148324702481	WITHOUT_CLASSIFICATION	5.851675297519993E-4	DESIGN
// ... and the token could be an identifer and the error is // a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9965117876764287	WITHOUT_CLASSIFICATION	0.0034882123235714297	DESIGN
// If a where clause was specified in the update/delete query, use it to limit the // returned ids here...	WITHOUT_CLASSIFICATION	0.9999999744497604	WITHOUT_CLASSIFICATION	2.5550239604181217E-8	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// Default implementation: // If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9999392625862552	WITHOUT_CLASSIFICATION	6.0737413744789905E-5	DESIGN
// Resolve the LHS fully, generate implicit joins.  Pass in the property name so that the resolver can // discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999829084750063	WITHOUT_CLASSIFICATION	1.7091524993693856E-5	DESIGN
// If the propertyType is null and there isn't a parent, just // stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.7627884027495904	WITHOUT_CLASSIFICATION	0.23721159725040977	DESIGN
//We do not look for an existing join on the same path, because //it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9999936385147218	WITHOUT_CLASSIFICATION	6.361485278333356E-6	DESIGN
// our parent is another dot node, meaning we are being further dereferenced. // thus we need to generate a join unless the parent refers to the associated // entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999276046602142	WITHOUT_CLASSIFICATION	7.239533978580073E-4	DESIGN
/*public final Currency getCurrency(int col) throws HibernateException {	WITHOUT_CLASSIFICATION	0.9711512355647056	WITHOUT_CLASSIFICATION	0.02884876443529445	DESIGN
// here, we have two possibilities: // 	WITHOUT_CLASSIFICATION	0.9997726993923184	WITHOUT_CLASSIFICATION	2.273006076815759E-4	DESIGN
// Set the unresolved path in this node and the parent. // Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9998350270634192	WITHOUT_CLASSIFICATION	1.6497293658081675E-4	DESIGN
// Get the first child to be considered.  Sub-classes may do this differently in order to skip nodes that // are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9999963422364512	WITHOUT_CLASSIFICATION	3.6577635488365012E-6	DESIGN
// If this is an entity and the property is the identifier property, then use getIdentifierType(). //      Note that the propertyName.equals( propertyPath ) checks whether we have a component //      key reference, where the component class property name is the same as the //      entity id property name; if the two are not equal, this is the case and //      we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999999983862706	WITHOUT_CLASSIFICATION	1.613729407633798E-9	DESIGN
// for a subquery, the alias to use depends on a few things (we // already know this is not an overall SELECT): //      1) if this FROM_ELEMENT represents a correlation to the //          outer-most query //              A) if the outer query represents a multi-table //                  persister, we need to use the given alias //                  in anticipation of one of the multi-table //                  executors being used (as this subquery will //                  actually be used in the "id select" phase //                  of that multi-table executor) //              B) otherwise, we need to use the persister's //                  table name as the column qualification //      2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.962534378313468	WITHOUT_CLASSIFICATION	0.03746562168653195	DESIGN
// Not a collection? // Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9982050226975372	WITHOUT_CLASSIFICATION	0.0017949773024628203	DESIGN
// collection of <many-to-any/> mappings... // used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9995777341681426	WITHOUT_CLASSIFICATION	4.222658318574591E-4	DESIGN
// Otherwise, the destination node was implied by the FROM clause and the FROM clause processor // will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9993343494015379	WITHOUT_CLASSIFICATION	6.656505984621077E-4	DESIGN
// If the first identifier in the path referrs to the class alias (not the class name), then this // is a correlated subselect.  If it's a correlated sub-select, use the existing table alias.  Otherwise // generate a new one.	WITHOUT_CLASSIFICATION	0.9999038433310452	WITHOUT_CLASSIFICATION	9.615666895486303E-5	DESIGN
// check to see if our "propPath" actually // represents a property on the persister	WITHOUT_CLASSIFICATION	0.9998761696048414	WITHOUT_CLASSIFICATION	1.2383039515858905E-4	DESIGN
// An ident node can represent an index expression if the ident // represents a naked property ref //      *Note: this makes the assumption (which is currently the case //      in the hql-sql grammar) that the ident is first resolved //      itself (addrExpr -> resolve()).  The other option, if that //      changes, is to call resolve from here; but it is //      currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999370125012276	WITHOUT_CLASSIFICATION	6.298749877247014E-5	DESIGN
// This uses a PathExpressionParser but notice that compound paths are not valid, // only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9999691555980107	WITHOUT_CLASSIFICATION	3.0844401989392726E-5	DESIGN
// If this is an implied join in a FROM clause, then use ANSI-style joining, and set the // flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9999976664942898	WITHOUT_CLASSIFICATION	2.333505710262135E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// For an explicit many-to-many relationship, add a second join from the intermediate  // (many-to-many) table to the destination table.  Also, make sure that the from element's  // idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999999958301053	WITHOUT_CLASSIFICATION	4.169894615199505E-9	DESIGN
// Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was // for the factory to create the right sub-class.  This might get reset again later on anyway to make the // SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9972811922091886	WITHOUT_CLASSIFICATION	0.0027188077908113745	DESIGN
//explicit = true;	WITHOUT_CLASSIFICATION	0.9998984347983948	WITHOUT_CLASSIFICATION	1.0156520160525024E-4	DESIGN
//sqlResultTypeList.add( type ); // Generate the select expression.	WITHOUT_CLASSIFICATION	0.9999999587852026	WITHOUT_CLASSIFICATION	4.1214797367345524E-8	DESIGN
// If the expression list has exactly one expression, and the type of the expression is a collection // then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9999751392774766	WITHOUT_CLASSIFICATION	2.486072252340654E-5	DESIGN
// Need to parse off the column qualifiers; this is assuming (which is true as of now) // that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9999999841785109	WITHOUT_CLASSIFICATION	1.5821489176641922E-8	DESIGN
// for regression testing against output from the old parser... // found it easiest to simply reorder the FromElements here into ascending order // in terms of injecting them into the resulting sql ast in orders relative to those // expected by the old parser; this is definitely another of those "only needed // for regression purposes".  The SyntheticAndFactory, then, simply injects them as it // encounters them.	WITHOUT_CLASSIFICATION	0.9999999382178174	WITHOUT_CLASSIFICATION	6.178218256710757E-8	DESIGN
// The uber-rule here is that we need to include  subclass joins if // the FromElement is in any way dereferenced by a property from // the subclass table; otherwise we end up with column references // qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9957409531762836	WITHOUT_CLASSIFICATION	0.00425904682371639	DESIGN
// classic translator does not support collection of ordinal // param metadata	WITHOUT_CLASSIFICATION	0.9976368734399501	WITHOUT_CLASSIFICATION	0.002363126560049928	DESIGN
// The following variables are stacks that keep information about each subexpression // in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9999982215151814	WITHOUT_CLASSIFICATION	1.778484818694485E-6	DESIGN
// The loop ensures atomicity of the // select + update even for no transaction // or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999999986013246	WITHOUT_CLASSIFICATION	1.3986754177046092E-9	DESIGN
// should not be able to reach last without maxPosition being set // unless there are no results	WITHOUT_CLASSIFICATION	0.999999998514412	WITHOUT_CLASSIFICATION	1.4855880423975685E-9	DESIGN
// we found it in the temp PC.  Should indicate we are in the midst of processing a result set // containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9999999774909619	WITHOUT_CLASSIFICATION	2.2509038081205822E-8	DESIGN
//do not use proxiesByKey, since not all //proxies that point to this session's //instances are in that collection!	WITHOUT_CLASSIFICATION	0.9988346751493421	WITHOUT_CLASSIFICATION	0.0011653248506578867	DESIGN
// if there is no TM configured, we will not be able to access // the javax.transaction.Transaction object in order to // register a synch anyway.	WITHOUT_CLASSIFICATION	0.9043720468747295	WITHOUT_CLASSIFICATION	0.09562795312527055	DESIGN
// Since the result set cursor is always left at the first // physical row after the "last processed", we need to jump // back one position to get the key value we are interested // in skipping	WITHOUT_CLASSIFICATION	0.9999999998808088	WITHOUT_CLASSIFICATION	1.1919110944086123E-10	DESIGN
//true if this is a query and we are loading multiple instances of the same collection role //otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999988026913734	WITHOUT_CLASSIFICATION	1.1973086265544596E-6	DESIGN
// we don't need to worry about existing version being uninitialized // because this block isn't called by a re-entrant load (re-entrant // loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9999984823783767	WITHOUT_CLASSIFICATION	1.5176216232759221E-6	DESIGN
// add temp entry so that the next step is circular-reference // safe - only needed because some types don't take proper // advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999999217701581	WITHOUT_CLASSIFICATION	7.822984188860019E-8	DESIGN
// assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9999999813305204	WITHOUT_CLASSIFICATION	1.8669479598397378E-8	DESIGN
// log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9999989739347512	WITHOUT_CLASSIFICATION	1.0260652487722913E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// this has been shown to happen occasionally in rare cases // when using a transaction manager + transaction-timeout // where the timeout calls back through Hibernate's // registered transaction synchronization on a separate // "reaping" thread.  In cases where that reaping thread // executes through this block at the same time the main // application thread does we can get into situations where // these CMEs occur.  And though it is not "allowed" per-se, // the end result without handling it specifically is infinite // looping.  So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999795167671448	WITHOUT_CLASSIFICATION	2.048323285515026E-5	DESIGN
// unfortunately this stuff can't be cached because // it is per-invocation, not constant for the // QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9990162943084638	WITHOUT_CLASSIFICATION	9.837056915361585E-4	DESIGN
// can't cache this stuff either (per-invocation) // we are given a map of user-alias -> lock mode // create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9999957827099344	WITHOUT_CLASSIFICATION	4.217290065701201E-6	DESIGN
// don't create a unique key, 'cos some // databases don't like a UK on nullable // columns //getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9999999281008418	WITHOUT_CLASSIFICATION	7.189915812780114E-8	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941364451158	WITHOUT_CLASSIFICATION	5.86355488428701E-6	DESIGN
//isSet = collection.isSet(); //isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9999998522390948	WITHOUT_CLASSIFICATION	1.4776090525569028E-7	DESIGN
//lists, arrays //sets, maps, bags	WITHOUT_CLASSIFICATION	0.9999996142483776	WITHOUT_CLASSIFICATION	3.8575162245155377E-7	DESIGN
// we finish all the "removes" first to take care of possible unique // constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.999997618803097	WITHOUT_CLASSIFICATION	2.3811969030335527E-6	DESIGN
//use a combination of foreign key columns and pk columns, since //the ordering of removal and addition is not guaranteed when //a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999957143387722	WITHOUT_CLASSIFICATION	4.285661227792289E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999941364451158	WITHOUT_CLASSIFICATION	5.86355488428701E-6	DESIGN
//information about properties of this class, //including inherited properties //(only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9999984444128787	WITHOUT_CLASSIFICATION	1.555587121403497E-6	DESIGN
// all this only really needs to consider properties // of this class, not its subclasses, but since we // are reusing code used for sequential selects, we // use the subclass closure	WITHOUT_CLASSIFICATION	0.9999999924180257	WITHOUT_CLASSIFICATION	7.581974201129654E-9	DESIGN
// Here we render the select column list based on the properties defined as being generated. // For partial component generation, we currently just re-select the whole component // rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9993319487320139	WITHOUT_CLASSIFICATION	6.680512679860474E-4	DESIGN
// this is the root (versioned) table, and we are using version-based // optimistic locking;  if we are not updating the version, also don't // check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9999978237244017	WITHOUT_CLASSIFICATION	2.1762755983499813E-6	DESIGN
//optimistic-lock="all", include all updatable properties //optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999699056227431	WITHOUT_CLASSIFICATION	3.0094377256838223E-5	DESIGN
// this property belongs to the table, and it is not specifically // excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9989091452053109	WITHOUT_CLASSIFICATION	0.0010908547946890774	DESIGN
// check to see if the connection is in auto-commit  // mode (no connection means aggressive connection // release outside a JTA transaction context, so MUST // be autocommit mode)	WITHOUT_CLASSIFICATION	0.9999970834633191	WITHOUT_CLASSIFICATION	2.9165366809059987E-6	DESIGN
// need to treat this as if it where optimistic-lock="all" (dirty does *not* make sense); // first we need to locate the "loaded" state // // Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9909488254613901	DESIGN	0.009051174538609982	WITHOUT_CLASSIFICATION
// we *always* assume an instance with a null // identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9999999555654056	WITHOUT_CLASSIFICATION	4.443459432719076E-8	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999984641119914	WITHOUT_CLASSIFICATION	1.5358880085015959E-6	DESIGN
//allow any identifier quoted with backtick //only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9996869403018692	WITHOUT_CLASSIFICATION	3.130596981307479E-4	DESIGN
//following doesn't handle (null, not null) but unnecessary //since this would mean all rows	WITHOUT_CLASSIFICATION	0.9888104486050254	WITHOUT_CLASSIFICATION	0.01118955139497467	DESIGN
// IMPL NOTE : due to the delayed population of setters (setters cached // 	WITHOUT_CLASSIFICATION	0.9999990196305066	WITHOUT_CLASSIFICATION	9.80369493378344E-7	DESIGN
// we need to dirty check collections, since they can cause an owner // version number increment	WITHOUT_CLASSIFICATION	0.9999699280610901	WITHOUT_CLASSIFICATION	3.007193890993665E-5	DESIGN
//return the id, so we can use it to reset the proxy id //return result;	WITHOUT_CLASSIFICATION	0.9999937369011719	WITHOUT_CLASSIFICATION	6.263098828191379E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
// cache the actual id of the object, not the value of the // property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9999999882929661	WITHOUT_CLASSIFICATION	1.1707033883463E-8	DESIGN
// We now have the value of the property-ref we reference.  However, // we need to dig a little deeper, as that property might also be // an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999993985445577	WITHOUT_CLASSIFICATION	6.014554422769743E-7	DESIGN
// Retrieve the value of the designated column in the current row of this // ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999988251930824	WITHOUT_CLASSIFICATION	1.1748069176612815E-6	DESIGN
//not absolutely necessary, but helps for some //equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9994033020736147	WITHOUT_CLASSIFICATION	5.966979263853188E-4	DESIGN
//this should be a call to resolve(), not resolveIdentifier(),  //'cos it might be a property-ref, and we did not cache the //referenced value	WITHOUT_CLASSIFICATION	0.9916439506962986	WITHOUT_CLASSIFICATION	0.008356049303701407	DESIGN
// If we have <tt>not-found="ignore"</tt> association mapped to a // formula, we always need to dirty check it, so we can update the // second-level cache	WITHOUT_CLASSIFICATION	0.9999994831554396	WITHOUT_CLASSIFICATION	5.168445603501536E-7	DESIGN
// can't just return null here, since that would // cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999999946019693	WITHOUT_CLASSIFICATION	5.398030683376054E-9	DESIGN
//for arrays, replaceElements() may return a different reference, since //the array length might not match	WITHOUT_CLASSIFICATION	0.9999975188250115	WITHOUT_CLASSIFICATION	2.4811749885154653E-6	DESIGN
// actual cache of the entries.  soft references are used for both the keys and the // values here since the values pertaining to the MRU entries are kept in a // seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9999999824432082	WITHOUT_CLASSIFICATION	1.7556791759801556E-8	DESIGN
// as soon as we encounter our first letter, return the substring // from that position	WITHOUT_CLASSIFICATION	0.9999999994965082	WITHOUT_CLASSIFICATION	5.034918016569124E-10	DESIGN
// Note : expected in the syntax: //      type=listenerClass //          ({sep}type=listenerClass)* // where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999999908067901	WITHOUT_CLASSIFICATION	9.193209891986874E-9	DESIGN
// isTransactionCallbackRegistered denotes whether any Hibernate // Transaction has registered as a callback against this // JDBCContext; only one such callback is allowed.  Directly // serializing this value causes problems with JDBCTransaction, // or really any Transaction impl where the callback is local // to the Transaction instance itself, since that Transaction // is not serialized along with the JDBCContext.  Thus we // handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9999229663140475	WITHOUT_CLASSIFICATION	7.703368595246179E-5	DESIGN
// note that for sequential scrolling, we make the assumption that // the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9999976212652514	WITHOUT_CLASSIFICATION	2.3787347486637664E-6	DESIGN
// We call getKeyFromResultSet() here so that we can know the // key value upon which to perform the breaking logic.  However, // it is also then called from getRowFromResultSet() which is certainly // not the most efficient.  But the call here is needed, and there // currently is no other way without refactoring of the doQuery()/getRowFromResultSet() // methods	WITHOUT_CLASSIFICATION	0.9198145061511782	DESIGN	0.0801854938488217	WITHOUT_CLASSIFICATION
// This check is needed since processing leaves the cursor // after the last physical row for the current logical row; // thus if we are after the last physical row, this might be // caused by either: //      1) scrolling to the last logical row //      2) scrolling past the last logical row // In the latter scenario, the previous logical row // really is the last logical row. // // In all other cases, we should process back two // logical records (the current logic row, plus the // previous logical row).	WITHOUT_CLASSIFICATION	0.9998744188675771	WITHOUT_CLASSIFICATION	1.2558113242278342E-4	DESIGN
// and perform the load	WITHOUT_CLASSIFICATION	0.9999847543985808	WITHOUT_CLASSIFICATION	1.5245601419081058E-5	DESIGN
//important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.6816000044112471	WITHOUT_CLASSIFICATION	0.31839999558875287	DESIGN
//this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9999452552673068	WITHOUT_CLASSIFICATION	5.4744732693023444E-5	DESIGN
// we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9998431120101133	WITHOUT_CLASSIFICATION	1.5688798988665713E-4	DESIGN
// we did not find a collection element in the result set, so we // ensure that a collection is created with the owner's identifier, // since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.99999999915785	WITHOUT_CLASSIFICATION	8.421499671647645E-10	DESIGN
// this is a collection initializer, so we must create a collection // for each of the passed-in keys, to account for the possibility // that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9999999984680032	WITHOUT_CLASSIFICATION	1.5319968461279338E-9	DESIGN
// grab its state from the ResultSet and keep it in the Session // (but don't yet initialize the object itself) // note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9967379060259274	WITHOUT_CLASSIFICATION	0.00326209397407254	DESIGN
// a many-to-many; // decrement currentDepth here to allow join across the association table // without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9891755769739646	WITHOUT_CLASSIFICATION	0.010824423026035446	DESIGN
// if not a composite key, use "foo in (?, ?, ?)" for batching // if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9999996614322226	WITHOUT_CLASSIFICATION	3.385677773484489E-7	DESIGN
//the user visible aliases, which are unknown to the superclass, //these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999999937839591	WITHOUT_CLASSIFICATION	6.216040932745454E-9	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999983811268281	WITHOUT_CLASSIFICATION	1.6188731719053812E-5	DESIGN
//first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.999983811268281	WITHOUT_CLASSIFICATION	1.6188731719053812E-5	DESIGN
//it does not refer to an alias of a projection, //look for a property	WITHOUT_CLASSIFICATION	0.9999539860099498	WITHOUT_CLASSIFICATION	4.601399005028507E-5	DESIGN
// determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999998523068799	WITHOUT_CLASSIFICATION	1.4769312003134854E-7	DESIGN
// Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9999993359738002	WITHOUT_CLASSIFICATION	6.640261997964045E-7	DESIGN
/**	WITHOUT_CLASSIFICATION	0.8934601618932041	DESIGN	0.10653983810679592	WITHOUT_CLASSIFICATION
// ignore	WITHOUT_CLASSIFICATION	0.9999996017603694	WITHOUT_CLASSIFICATION	3.982396305501183E-7	DESIGN
// ignore	WITHOUT_CLASSIFICATION	0.9999996017603694	WITHOUT_CLASSIFICATION	3.982396305501183E-7	DESIGN
//        }	WITHOUT_CLASSIFICATION	0.9999969045054716	WITHOUT_CLASSIFICATION	3.0954945284569314E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.999995352992899	WITHOUT_CLASSIFICATION	4.647007101026319E-6	DESIGN
//	WITHOUT_CLASSIFICATION	0.994561175972044	WITHOUT_CLASSIFICATION	0.00543882402795609	DESIGN
//NONE, because its the requested lock mode, not the actual! 	WITHOUT_CLASSIFICATION	0.9999640659501151	WITHOUT_CLASSIFICATION	3.5934049884925446E-5	DESIGN
// at this point we have (drivingSqlAlias) the SQL alias of the driving table // corresponding to the given user alias.  However, the driving table is not // (necessarily) the table against which we want to apply locks.  Mainly, // the exception case here is joined-subclass hierarchies where we instead // want to apply the lock against the root table (for all other strategies, // it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999602904481709	WITHOUT_CLASSIFICATION	3.9709551829087256E-5	DESIGN
// the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999986609564692	WITHOUT_CLASSIFICATION	1.3390435308029628E-6	DESIGN
// we have a mapped identifier property and the root of // the incoming property path matched that identifier // property	WITHOUT_CLASSIFICATION	0.999991618275884	WITHOUT_CLASSIFICATION	8.381724115905394E-6	DESIGN
// we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9999996568505034	WITHOUT_CLASSIFICATION	3.431494965913871E-7	DESIGN
// both many-to-one and one-to-one are represented as a // Property.  EntityPersister is relying on this value to // determine "lazy fetch groups" in terms of field-level // interception.  So we need to make sure that we return // true here for the case of many-to-one and one-to-one // with lazy="no-proxy" // // * impl note - lazy="no-proxy" currently forces both // lazy and unwrap to be set to true.  The other case we // are extremely interested in here is that of lazy="proxy" // where lazy is set to true, but unwrap is set to false. // thus we use both here under the assumption that this // return is really only ever used during persister // construction to determine the lazy property/field fetch // groupings.  If that assertion changes then this check // needs to change as well.  Partially, this is an issue with // the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9999618472952041	WITHOUT_CLASSIFICATION	3.815270479586825E-5	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987935485962	WITHOUT_CLASSIFICATION	1.2064514037932997E-6	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ // stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ // ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999987935485962	WITHOUT_CLASSIFICATION	1.2064514037932997E-6	DESIGN
/*rootTableName = persistentClass.getRootTable().getQualifiedName( 	WITHOUT_CLASSIFICATION	0.9991608548193325	WITHOUT_CLASSIFICATION	8.391451806676077E-4	DESIGN
// SUBCLASSES	WITHOUT_CLASSIFICATION	0.9999915086097815	WITHOUT_CLASSIFICATION	8.491390218421383E-6	DESIGN
// Custom sql	WITHOUT_CLASSIFICATION	0.9999855980258138	WITHOUT_CLASSIFICATION	1.4401974186232822E-5	DESIGN
/*protected void initPropertyPaths(	WITHOUT_CLASSIFICATION	0.9900841120933798	WITHOUT_CLASSIFICATION	0.009915887906620291	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
//Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.7287810708011189	WITHOUT_CLASSIFICATION	0.2712189291988812	DESIGN
// moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989554916751924	WITHOUT_CLASSIFICATION	0.0010445083248076027	DESIGN
// ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999937626152944	WITHOUT_CLASSIFICATION	6.237384705697975E-6	DESIGN
// aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9999998836947503	WITHOUT_CLASSIFICATION	1.1630524962876388E-7	DESIGN
//decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998301530871094	WITHOUT_CLASSIFICATION	1.6984691289070164E-4	DESIGN
//note: it is conceptually possible that a UserType could map null to //	WITHOUT_CLASSIFICATION	0.5835154760309884	DESIGN	0.41648452396901164	WITHOUT_CLASSIFICATION
// the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null // is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9718193654344486	WITHOUT_CLASSIFICATION	0.028180634565551397	DESIGN
// Need to use the identifier type of the collection owner // since the incoming is value is actually the owner's id. // Using the collection's key type causes problems with // property-ref keys...	WITHOUT_CLASSIFICATION	0.9999984641119914	WITHOUT_CLASSIFICATION	1.5358880085015959E-6	DESIGN
// cache these since they are stateless // this one could even be static...	WITHOUT_CLASSIFICATION	0.9568663724830629	DESIGN	0.04313362751693702	WITHOUT_CLASSIFICATION
//"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9995131511996918	WITHOUT_CLASSIFICATION	4.8684880030826894E-4	DESIGN
// --Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999997324350411	WITHOUT_CLASSIFICATION	2.6756495879873543E-7	DESIGN
//use the id column alias	WITHOUT_CLASSIFICATION	0.9999909260492312	WITHOUT_CLASSIFICATION	9.073950768671617E-6	DESIGN
//private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999999999363389	WITHOUT_CLASSIFICATION	6.366110636477542E-10	DESIGN
//columns.add(columnName); //aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9999858412339022	WITHOUT_CLASSIFICATION	1.4158766097784542E-5	DESIGN
//where fragment must be empty!	WITHOUT_CLASSIFICATION	0.982020823519346	WITHOUT_CLASSIFICATION	0.01797917648065396	DESIGN
// revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize // unless otherwise specified with a c3p0.*-style parameter.	WITHOUT_CLASSIFICATION	0.9997055821317179	WITHOUT_CLASSIFICATION	2.944178682821097E-4	DESIGN
//arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9999999307292479	WITHOUT_CLASSIFICATION	6.927075210553885E-8	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9977091307508865	WITHOUT_CLASSIFICATION	0.00229086924911351	DESIGN
// might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9977091307508865	WITHOUT_CLASSIFICATION	0.00229086924911351	DESIGN
//if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999721477223709	WITHOUT_CLASSIFICATION	2.78522776292452E-5	DESIGN
// Essentially: // 1) If we have a local (Hibernate) transaction in progress //      and it already has the UserTransaction cached, use that //      UserTransaction to determine the status. // 2) If a transaction manager has been located, use //      that transaction manager to determine the status. // 3) Finally, as the last resort, try to lookup the //      UserTransaction via JNDI and use that to determine the //      status.	WITHOUT_CLASSIFICATION	0.9999999999068362	WITHOUT_CLASSIFICATION	9.316391047513766E-11	DESIGN
/*package*/	WITHOUT_CLASSIFICATION	0.9981875345217461	WITHOUT_CLASSIFICATION	0.0018124654782538713	DESIGN
//swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9999802574691317	WITHOUT_CLASSIFICATION	1.9742530868375994E-5	DESIGN
// ignore it	WITHOUT_CLASSIFICATION	0.9999998144164353	WITHOUT_CLASSIFICATION	1.8558356468750094E-7	DESIGN
// we need to dirty check many-to-ones with not-found="ignore" in order  // to update the cache (not the database), since in this case a null // entity reference can lose information	WITHOUT_CLASSIFICATION	0.9999998883222044	WITHOUT_CLASSIFICATION	1.1167779556110698E-7	DESIGN
// create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999988422651138	WITHOUT_CLASSIFICATION	1.1577348861799914E-6	DESIGN
// Regions can get instantiated in the course of normal work (e.g. // a named query region will be created the first time the query is // executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9902966593142669	WITHOUT_CLASSIFICATION	0.009703340685733022	DESIGN
// then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9975166621251459	WITHOUT_CLASSIFICATION	0.0024833378748540256	DESIGN
// Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999930873890577	WITHOUT_CLASSIFICATION	6.9126109423986355E-6	DESIGN
// temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989400609494238	WITHOUT_CLASSIFICATION	0.0010599390505762502	DESIGN
// NOTE : this is being used from the process of shutting down a // SessionFactory. Specific things to consider: // (1) this clearing of the region should not propagate to // other nodes on the cluster (if any); this is the // cache-mode-local option bit... // (2) really just trying a best effort to cleanup after // ourselves; lock failures, etc are not critical here; // this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9999850292936232	DESIGN	1.4970706376768424E-5	WITHOUT_CLASSIFICATION
// need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9943422475201601	DESIGN	0.005657752479839923	WITHOUT_CLASSIFICATION
// We ignore minimalPutOverride. JBossCache putForExternalRead is // already about as minimal as we can get; it will promptly return // if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999999999710366	WITHOUT_CLASSIFICATION	2.896343011041579E-11	DESIGN
// for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.953184063489215	DESIGN	0.04681593651078499	WITHOUT_CLASSIFICATION
// Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9999499130147216	WITHOUT_CLASSIFICATION	5.008698527839213E-5	DESIGN
//This solution would allow us to eliminate the owner arg to disassemble(), but //what if the collection was null, and then later had elements added? seems unsafe //session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.90068323803639	DESIGN	0.09931676196360989	WITHOUT_CLASSIFICATION
// Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999998833540583	WITHOUT_CLASSIFICATION	1.1664594168865535E-6	DESIGN
// some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9999833149633618	WITHOUT_CLASSIFICATION	1.6685036638211308E-5	DESIGN
// Here we don't want to suspend the tx. If we do: // 1) We might be caching query results that reflect uncommitted // changes. No tx == no WL on cache node, so other threads // can prematurely see those query results // 2) No tx == immediate replication. More overhead, plus we // spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9927196041963484	WITHOUT_CLASSIFICATION	0.007280395803651635	DESIGN
// return the (fully resolved) identifier value, but do not resolve // to the actual referenced entity instance // NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9999999350890746	WITHOUT_CLASSIFICATION	6.491092544028967E-8	DESIGN
// Add a zero (or quite low) timeout option so we don't block. // Ignore any TimeoutException. Basically we forego caching the // query result in order to avoid blocking. // Reads are done with suspended tx, so they should not hold the // lock for long.  Not caching the query result is OK, since // any subsequent read will just see the old result with its // out-of-date timestamp; that result will be discarded and the // db query performed again.	WITHOUT_CLASSIFICATION	0.999999370253301	WITHOUT_CLASSIFICATION	6.297466990630131E-7	DESIGN
// Impl note: takes advantage of the fact that an escpaed single quote // embedded within a quote-block can really be handled as two seperate // quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.96794255189308	WITHOUT_CLASSIFICATION	0.03205744810692008	DESIGN
// We have the JBCWriteMutex, so no other *local* thread will  // be trying to write this key.  // It's possible here some remote thread has come in and // changed the values again, but since we are reading the // values to write to JBC right now, we know we are writing // the latest values; i.e. we don't assume that what we cached // in entry.update() above is what we should write to JBC *now*. // Our write could be redundant, i.e. we are writing what // some remote thread just came in an wrote.  There is a chance  // that yet another remote thread will update us, and we'll then // overwrite that later data in JBC.  But, all remote nodes will // ignore that change in their localCache; the only place it  // will live will be in JBC, where it can only effect the  // initial state transfer values on newly joined nodes  // (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999999998032989	WITHOUT_CLASSIFICATION	1.967010527467526E-10	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993570501634	WITHOUT_CLASSIFICATION	6.429498365484082E-7	DESIGN
// local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9999993570501634	WITHOUT_CLASSIFICATION	6.429498365484082E-7	DESIGN
// Don't need to lock the cache here, since if someone // else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9997091901715224	WITHOUT_CLASSIFICATION	2.9080982847768755E-4	DESIGN
// we need to grab the version value from the entity, otherwise // we have issues with generated-version entities that may have // multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9737339487981136	WITHOUT_CLASSIFICATION	0.02626605120188641	DESIGN
// we need to obtain the lock before any actions are // executed, since this may be an inverse="true" // bidirectional association and it is one of the // earlier entity actions which actually updates // the database (this action is resposible for // second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9999797220789738	WITHOUT_CLASSIFICATION	2.0277921026279396E-5	DESIGN
//postDelete: // After actually deleting a row, record the fact that the instance no longer  // exists on the database (needed for identity-column key generation), and // remove it from the session cache	WITHOUT_CLASSIFICATION	0.9999574414914523	WITHOUT_CLASSIFICATION	4.255850854770003E-5	DESIGN
// intentionally empty	WITHOUT_CLASSIFICATION	0.9998259197299036	WITHOUT_CLASSIFICATION	1.740802700964636E-4	DESIGN
// todo : what else to do here?	DESIGN	0.9909317010314839	WITHOUT_CLASSIFICATION	0.009068298968516242	DESIGN
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7468751511291384	WITHOUT_CLASSIFICATION	0.2531248488708615	DESIGN
// 'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. // The need for it is intended to be alleviated with future developement, thus it is // not defined as an Environment constant... // // it is used to control whether we should consult the JDBC metadata to determine // certain Settings default values; it is useful to *not* do this when the database // may not be available (mainly in tools usage).	DESIGN	0.6333905090559121	WITHOUT_CLASSIFICATION	0.3666094909440879	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.870230768201272	DESIGN	0.129769231798728	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.870230768201272	DESIGN	0.129769231798728	WITHOUT_CLASSIFICATION
// todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9996728426913137	WITHOUT_CLASSIFICATION	3.2715730868626276E-4	DESIGN
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999989511231347	WITHOUT_CLASSIFICATION	1.048876865197861E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction.  no idea...	DESIGN	0.707986273161688	DESIGN	0.2920137268383119	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999950284764489	DESIGN	4.971523551092208E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999950284764489	DESIGN	4.971523551092208E-5	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999869995211	DESIGN	1.3000478865678395E-8	WITHOUT_CLASSIFICATION
// FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9999999869995211	DESIGN	1.3000478865678395E-8	WITHOUT_CLASSIFICATION
// TODO: I considered validating TS cache config here, // but decided to defer unti getTimestampsCacheInstance() in case the  // cache is never actually used	DESIGN	0.8256578029127518	DESIGN	0.17434219708724816	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9925048349505258	DESIGN	0.007495165049474251	WITHOUT_CLASSIFICATION
// TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9925048349505258	DESIGN	0.007495165049474251	WITHOUT_CLASSIFICATION
// TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9999998634151158	DESIGN	1.3658488411910432E-7	WITHOUT_CLASSIFICATION
// can happen because of the multiple ways Cache.remove() // can be invoked :(	DESIGN	0.9999989511231347	WITHOUT_CLASSIFICATION	1.048876865197861E-6	DESIGN
// work around the "feature" where tree cache is validating the // inserted node during the next transaction. no idea...	DESIGN	0.5795901241826052	DESIGN	0.4204098758173948	WITHOUT_CLASSIFICATION
//swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9995899316924397	WITHOUT_CLASSIFICATION	4.100683075602515E-4	DESIGN
// turn hibernate.c3p0.* into c3p0.*, so c3p0 // gets a chance to see all hibernate.c3p0.*	DESIGN	0.9999057577835336	WITHOUT_CLASSIFICATION	9.424221646628938E-5	DESIGN
//TODO: this bit actually has to be called after all cascades! //      but since identity insert is called *synchronously*, //      instead of asynchronously as other actions, it isn't	DESIGN	0.9932413700238251	WITHOUT_CLASSIFICATION	0.00675862997617497	DESIGN
//TODO: reenable if we also fix the above todo	DESIGN	0.5192448910820356	DESIGN	0.48075510891796436	WITHOUT_CLASSIFICATION
//TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9992573952626485	WITHOUT_CLASSIFICATION	7.426047373515617E-4	DESIGN
// we may be screwed here since the collection action is about to execute // and we do not know the final owner key value	DESIGN	0.9999135785415997	WITHOUT_CLASSIFICATION	8.64214584003372E-5	DESIGN
/** Create an action that will evict collection and entity regions based on queryspaces (table names).	DESIGN	0.6584327029342076	WITHOUT_CLASSIFICATION	0.3415672970657924	DESIGN
// todo : what else to do here?	DESIGN	0.9909317010314839	WITHOUT_CLASSIFICATION	0.009068298968516242	DESIGN
// todo : modify the class definition if not already transformed...	DESIGN	0.9639643524459279	WITHOUT_CLASSIFICATION	0.036035647554072105	DESIGN
// todo : what else to do here?	DESIGN	0.9909317010314839	WITHOUT_CLASSIFICATION	0.009068298968516242	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9161326527916656	WITHOUT_CLASSIFICATION	0.08386734720833444	DESIGN
// this is called by SessionFactory irregardless; we just disregard here; // could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9441733841185287	WITHOUT_CLASSIFICATION	0.055826615881471274	DESIGN
//TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9998755947879493	DESIGN	1.2440521205064623E-4	WITHOUT_CLASSIFICATION
//put() has nowait semantics, is this really appropriate? //note that it needs to be async replication, never local or sync	DESIGN	0.7468751511291384	WITHOUT_CLASSIFICATION	0.2531248488708615	DESIGN
//TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9353926326061212	DESIGN	0.06460736739387889	WITHOUT_CLASSIFICATION
//TODO: assumes all collections disassemble to an array!	DESIGN	0.99998858875198	WITHOUT_CLASSIFICATION	1.1411248019923177E-5	DESIGN
//TODO: reuse the PreLoadEvent	DESIGN	0.9679415274600324	WITHOUT_CLASSIFICATION	0.03205847253996755	DESIGN
// todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; // this should be refactored to instead expose a method to assemble a EntityEntry based on this // state for return.	DESIGN	0.9878584753067539	DESIGN	0.012141524693246171	WITHOUT_CLASSIFICATION
// todo : what is the implication of this?	DESIGN	0.9943975529347637	WITHOUT_CLASSIFICATION	0.005602447065236278	DESIGN
// use COUNT as the default.  This mimics the old behavior, although // NONE might be a better option moving forward in the case of callable	DESIGN	0.9455997708953254	WITHOUT_CLASSIFICATION	0.054400229104674645	DESIGN
/* TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a	DESIGN	0.9941764407325141	DESIGN	0.005823559267485909	WITHOUT_CLASSIFICATION
//TODO: suck this into initLaziness!	DESIGN	0.9935228129927298	DESIGN	0.006477187007270166	WITHOUT_CLASSIFICATION
// we have to set up the table later!! yuck	DESIGN	0.9978586644085946	WITHOUT_CLASSIFICATION	0.0021413355914053286	DESIGN
//TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7084948804075243	WITHOUT_CLASSIFICATION	0.2915051195924756	DESIGN
// todo : again, how *should* this work for non-pojo entities?	DESIGN	0.9716462742908015	DESIGN	0.02835372570919848	WITHOUT_CLASSIFICATION
// TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9864665534654781	DESIGN	0.013533446534522021	WITHOUT_CLASSIFICATION
// This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9968124799020688	DESIGN	0.0031875200979311676	WITHOUT_CLASSIFICATION
//TODO: bad implementation, cos it depends upon ordering of mapping doc //      fixing this requires that Collection/PersistentClass gain access //      to the Mappings reference from Configuration (or the filterDefinitions //      map directly) sometime during Configuration.buildSessionFactory //      (after all the types/filter-defs are known and before building //      persisters).	DESIGN	0.9999480372914281	DESIGN	5.196270857178984E-5	WITHOUT_CLASSIFICATION
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9982294244908504	DESIGN	0.001770575509149514	WITHOUT_CLASSIFICATION
// hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9999999827993801	DESIGN	1.720061998229008E-8	WITHOUT_CLASSIFICATION
//FIXME: get the PersistentClass	DESIGN	0.7614727286567406	WITHOUT_CLASSIFICATION	0.2385272713432593	DESIGN
//FIXME: get the PersistentClass	DESIGN	0.7614727286567406	WITHOUT_CLASSIFICATION	0.2385272713432593	DESIGN
//Icky workaround for MySQL bug:	DESIGN	0.9979996253360361	DESIGN	0.0020003746639638076	WITHOUT_CLASSIFICATION
//TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9961996557526184	WITHOUT_CLASSIFICATION	0.00380034424738162	DESIGN
//TODO possibly relax that	DESIGN	0.7876667908014519	WITHOUT_CLASSIFICATION	0.2123332091985481	DESIGN
//TODO possibly relax that	DESIGN	0.7876667908014519	WITHOUT_CLASSIFICATION	0.2123332091985481	DESIGN
//TODO possibly relax that	DESIGN	0.7876667908014519	WITHOUT_CLASSIFICATION	0.2123332091985481	DESIGN
//use of a stringbuffer to workaround a JDK bug	DESIGN	0.9982294244908504	DESIGN	0.001770575509149514	WITHOUT_CLASSIFICATION
//use a degenerated strategy for backward compatibility	DESIGN	0.9977145534538857	WITHOUT_CLASSIFICATION	0.0022854465461142376	DESIGN
// Sets can be just a view of a part of another collection. // do we need to copy it to be sure it won't be changing // underneath us? // ie. this.set.addAll(set);	DESIGN	0.9914403239256893	WITHOUT_CLASSIFICATION	0.008559676074310789	DESIGN
//note that i parameter is now unused (delete it?)	DESIGN	0.9199679204651913	WITHOUT_CLASSIFICATION	0.0800320795348088	DESIGN
//just to help out during the load (ugly, i know)	DESIGN	0.9995417325337734	WITHOUT_CLASSIFICATION	4.5826746622652553E-4	DESIGN
// TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9245770266730217	DESIGN	0.07542297332697832	WITHOUT_CLASSIFICATION
// yick!  need this for proper serialization/deserialization handling...	DESIGN	0.8148165186848125	WITHOUT_CLASSIFICATION	0.1851834813151876	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.870230768201272	DESIGN	0.129769231798728	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.870230768201272	DESIGN	0.129769231798728	WITHOUT_CLASSIFICATION
//yuck!	DESIGN	0.9182980478684428	WITHOUT_CLASSIFICATION	0.08170195213155719	DESIGN
//TODO: get SQL rendering out of this package!	DESIGN	0.870230768201272	DESIGN	0.129769231798728	WITHOUT_CLASSIFICATION
// TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9999999531487158	DESIGN	4.685128420197754E-8	WITHOUT_CLASSIFICATION
//HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9988815059905118	WITHOUT_CLASSIFICATION	0.0011184940094881397	DESIGN
// does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9060316208777328	DESIGN	0.0939683791222671	WITHOUT_CLASSIFICATION
// sql-server, at least needed this dropped after use; strange!	DESIGN	0.9988264407434991	WITHOUT_CLASSIFICATION	0.0011735592565008549	DESIGN
// todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.8626572356721777	WITHOUT_CLASSIFICATION	0.13734276432782228	DESIGN
// TBD should this be varbinary($1)? //	DESIGN	0.972607570579037	WITHOUT_CLASSIFICATION	0.02739242942096301	DESIGN
// is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9834281369348203	WITHOUT_CLASSIFICATION	0.016571863065179708	DESIGN
// xmlforest requires a new kind of function constructor	DESIGN	0.9999806996623654	WITHOUT_CLASSIFICATION	1.9300337634632704E-5	DESIGN
// Does this dialect support the ALTER TABLE syntax?	DESIGN	0.999741019024497	WITHOUT_CLASSIFICATION	2.589809755030846E-4	DESIGN
// Do we need to qualify index names with the schema name?	DESIGN	0.9851593865936668	WITHOUT_CLASSIFICATION	0.014840613406333168	DESIGN
// Does this dialect support the UNIQUE column syntax?	DESIGN	0.9994727467742465	WITHOUT_CLASSIFICATION	5.27253225753499E-4	DESIGN
// Does this dialect support check constraints?	DESIGN	0.9993224429563359	WITHOUT_CLASSIFICATION	6.775570436640846E-4	DESIGN
// Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.995265878882306	WITHOUT_CLASSIFICATION	0.004734121117694047	DESIGN
// Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9975762594414103	WITHOUT_CLASSIFICATION	0.00242374055858969	DESIGN
// Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9982892621539027	WITHOUT_CLASSIFICATION	0.001710737846097253	DESIGN
// Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.9977052144506142	DESIGN	0.002294785549385839	WITHOUT_CLASSIFICATION
//note there is a wierd implementation in the client side	DESIGN	0.9999167002358628	WITHOUT_CLASSIFICATION	8.329976413722315E-5	DESIGN
//TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.5957613840205553	WITHOUT_CLASSIFICATION	0.40423861597944477	DESIGN
// todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9843220071377744	DESIGN	0.015677992862225588	WITHOUT_CLASSIFICATION
// todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9705020667061104	DESIGN	0.029497933293889545	WITHOUT_CLASSIFICATION
//TODO: should orphans really be deleted during lock???	DESIGN	0.9654208714778751	DESIGN	0.034579128522124844	WITHOUT_CLASSIFICATION
// orphans should not be deleted during merge??	DESIGN	0.9984321940210534	WITHOUT_CLASSIFICATION	0.0015678059789465807	DESIGN
// orphans should not be deleted during copy??	DESIGN	0.9991476589392994	WITHOUT_CLASSIFICATION	8.523410607006713E-4	DESIGN
//I suppose?	DESIGN	0.978279750810427	WITHOUT_CLASSIFICATION	0.021720249189573014	DESIGN
//TODO: suck this logic into the collection!	DESIGN	0.9912834191680249	DESIGN	0.008716580831975074	WITHOUT_CLASSIFICATION
// TODO: an alternative is to check if the owner has changed; if it hasn't then // get the ID from collection.getOwner()	DESIGN	0.9298990034221818	WITHOUT_CLASSIFICATION	0.07010099657781825	DESIGN
//TODO:refactor + make this method private	DESIGN	0.9698823536824693	DESIGN	0.030117646317530593	WITHOUT_CLASSIFICATION
// todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9989565821888186	WITHOUT_CLASSIFICATION	0.001043417811181483	DESIGN
//TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.999759403375784	DESIGN	2.4059662421593896E-4	WITHOUT_CLASSIFICATION
//TODO: better to pass the id in as an argument?	DESIGN	0.9056780445983467	DESIGN	0.09432195540165335	WITHOUT_CLASSIFICATION
// todo : potentially look at optimizing these two arrays	DESIGN	0.9954508136851294	WITHOUT_CLASSIFICATION	0.004549186314870657	DESIGN
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9989597181243558	DESIGN	0.0010402818756441716	WITHOUT_CLASSIFICATION
/* trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp */	DESIGN	0.9989597181243558	DESIGN	0.0010402818756441716	WITHOUT_CLASSIFICATION
//TODO: temporary	DESIGN	0.9876465731704203	DESIGN	0.012353426829579692	WITHOUT_CLASSIFICATION
//TODO: not quite sure about the full implications of this!	DESIGN	0.7124302844199025	WITHOUT_CLASSIFICATION	0.2875697155800974	DESIGN
//TODO: not quite sure about the full implications of this!	DESIGN	0.7124302844199025	WITHOUT_CLASSIFICATION	0.2875697155800974	DESIGN
//TODO: ugly here:	DESIGN	0.9904385803344902	DESIGN	0.009561419665509758	WITHOUT_CLASSIFICATION
//this is kinda the best we can do...	DESIGN	0.9195989894614995	WITHOUT_CLASSIFICATION	0.08040101053850046	DESIGN
//TODO: this needn't exclude subclasses...	DESIGN	0.9433786838875617	DESIGN	0.05662131611243826	WITHOUT_CLASSIFICATION
// todo : need map? the prob is a proper key, right?	DESIGN	0.9851648292587728	DESIGN	0.014835170741227269	WITHOUT_CLASSIFICATION
// todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9943340610717473	WITHOUT_CLASSIFICATION	0.005665938928252746	DESIGN
// todo : hack!!! // NOTE : here we cleanup the load context when we have no more local // LCE entries.  This "works" for the time being because really // only the collection load contexts are implemented.  Long term, // this cleanup should become part of the "close result set" // processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9389409521719833	DESIGN	0.06105904782801671	WITHOUT_CLASSIFICATION
// todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.8575733188001252	DESIGN	0.14242668119987473	WITHOUT_CLASSIFICATION
// TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.9993105104856059	DESIGN	6.894895143941473E-4	WITHOUT_CLASSIFICATION
// TODO : add this info to the translator and aggregate it here...	DESIGN	0.9998565203057227	DESIGN	1.434796942774317E-4	WITHOUT_CLASSIFICATION
//TODO: move into collection type, so we can use polymorphism!	DESIGN	0.8973368148177079	DESIGN	0.10266318518229213	WITHOUT_CLASSIFICATION
// todo : should we check the current isolation mode explicitly?	DESIGN	0.6414645202023891	DESIGN	0.358535479797611	WITHOUT_CLASSIFICATION
//TODO: suck into event class	DESIGN	0.9979847622270244	DESIGN	0.0020152377729756484	WITHOUT_CLASSIFICATION
//do we even really need this? the update will fail anyway....	DESIGN	0.5708003388869055	DESIGN	0.4291996611130945	WITHOUT_CLASSIFICATION
//hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9999884566240265	DESIGN	1.1543375973429194E-5	WITHOUT_CLASSIFICATION
//TODO: would it be better to do a refresh from db?	DESIGN	0.9996101112981091	DESIGN	3.898887018909776E-4	WITHOUT_CLASSIFICATION
//TODO: we use two visitors here, inefficient!	DESIGN	0.5131073819290713	WITHOUT_CLASSIFICATION	0.4868926180709286	DESIGN
// this class has no proxies (so do a shortcut)	DESIGN	0.9998513447506023	WITHOUT_CLASSIFICATION	1.4865524939774454E-4	DESIGN
//PostLoad is needed for EJB3 //TODO: reuse the PostLoadEvent...	DESIGN	0.586051425983659	WITHOUT_CLASSIFICATION	0.41394857401634094	DESIGN
//TODO: put this stuff back in to read snapshot from //      the second-level cache (needs some extra work)	DESIGN	0.9212789092439025	DESIGN	0.0787210907560974	WITHOUT_CLASSIFICATION
// null or brand new collection // this will also (inefficiently) handle arrays, which have // no snapshot, so we can't do any better	DESIGN	0.9671476112733622	WITHOUT_CLASSIFICATION	0.03285238872663771	DESIGN
//TODO: is this 100% correct?	DESIGN	0.9764084270514717	DESIGN	0.023591572948528386	WITHOUT_CLASSIFICATION
// TODO: iteratively get transient entities and retry merge until one of the following conditions: //       1) transientCopyCache.size() == 0 //       2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing // TODO: find out if retrying can add entities to copyCache (don't think it can...) // For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.99398108472954	WITHOUT_CLASSIFICATION	0.006018915270460033	DESIGN
// entity name will not be available for non-POJO entities // TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9307716048353113	DESIGN	0.06922839516468869	WITHOUT_CLASSIFICATION
//TODO: we should throw an exception if we really *know* for sure   //      that this is a detached instance, rather than just assuming //throw new StaleObjectStateException(entityName, id);	DESIGN	0.9069259624303947	DESIGN	0.09307403756960524	WITHOUT_CLASSIFICATION
// TODO : perhaps we should additionally require that the incoming entity // version be equivalent to the defined unsaved-value?	DESIGN	0.9999996666144471	DESIGN	3.333855528686751E-7	WITHOUT_CLASSIFICATION
// perhaps this should be an exception since it is only ever used // in the above method?	DESIGN	0.9691890708279894	DESIGN	0.030810929172010525	WITHOUT_CLASSIFICATION
// Put a placeholder in entries, so we don't recurse back and try to save() the // same object again. QUESTION: should this be done before onSave() is called? // likewise, should it be done before onUpdate()?	DESIGN	0.9840739356975078	DESIGN	0.015926064302492285	WITHOUT_CLASSIFICATION
//TODO: merge into one method!	DESIGN	0.5405889848367826	WITHOUT_CLASSIFICATION	0.4594110151632175	DESIGN
//TODO: refactor to .sql package	DESIGN	0.9869594805350624	DESIGN	0.013040519464937431	WITHOUT_CLASSIFICATION
/** * Provides query splitting methods, which were originally in QueryTranslator. * <br> * TODO: This will need to be refactored at some point. * * @author josh */	DESIGN	0.9999953605898624	DESIGN	4.639410137654137E-6	WITHOUT_CLASSIFICATION
//TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9994809912938075	DESIGN	5.190087061924565E-4	WITHOUT_CLASSIFICATION
// todo : temporary //      needed because currently persister is the one that //      creates and renders the join fragments for inheritence //      hierarchies...	DESIGN	0.7453954968769424	WITHOUT_CLASSIFICATION	0.2546045031230576	DESIGN
// TODO : better way?!?	DESIGN	0.9999998531695055	DESIGN	1.468304945916954E-7	WITHOUT_CLASSIFICATION
// Not possible to simply re-use the versionPropertyNode here as it causes // OOM errors due to circularity :(	DESIGN	0.9999997791382872	WITHOUT_CLASSIFICATION	2.2086171290616537E-7	DESIGN
//TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9985037002748607	DESIGN	0.001496299725139294	WITHOUT_CLASSIFICATION
// TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9999999413964048	DESIGN	5.8603595183416064E-8	WITHOUT_CLASSIFICATION
// even here, if only properties mapped to the "base table" are referenced // in the set and where clauses, this could be handled by the BasicDelegate. // TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999998906425467	DESIGN	1.0935745323034622E-7	WITHOUT_CLASSIFICATION
//TODO: switch statements are always evil! We already had bugs because  //      of forgotten token types. Use polymorphism for this!	DESIGN	0.6686693932993838	WITHOUT_CLASSIFICATION	0.3313306067006162	DESIGN
// TODO : we really need to be able to deal with component paths here also; // this is difficult because the hql-sql grammar expects all those node types // to be FromReferenceNodes.  One potential fix here would be to convert the // IntoClause to just use a FromClause/FromElement combo (as a child of the // InsertStatement) and move all this logic into the InsertStatement.  That's // probably the easiest approach (read: least amount of changes to the grammar // and code), but just doesn't feel right as then an insert would contain // 2 from-clauses	DESIGN	0.9995750525803219	DESIGN	4.2494741967819547E-4	WITHOUT_CLASSIFICATION
// really there are two situations where it should be ok to allow the insertion // into properties defined on a superclass: //      1) union-subclass with an abstract root entity //      2) discrim-subclass // // #1 is handled already because of the fact that // UnionSubclassPersister alreay always returns 0 // for this call... // // we may want to disallow it for discrim-subclass just for // consistency-sake (currently does not work anyway)...	DESIGN	0.9999942281820896	WITHOUT_CLASSIFICATION	5.771817910376302E-6	DESIGN
//yuck!	DESIGN	0.9182980478684428	WITHOUT_CLASSIFICATION	0.08170195213155719	DESIGN
// implicit joins are always(?) ok to reuse	DESIGN	0.9991636152405855	WITHOUT_CLASSIFICATION	8.363847594144456E-4	DESIGN
// TODO : we may also want to check that the types here map to exactly one column/JDBC-type //      can't think of a situation where arithmetic expression between multi-column mappings //      makes any sense.	DESIGN	0.9996907005387851	DESIGN	3.092994612148935E-4	WITHOUT_CLASSIFICATION
// we do not know either type //BLIND GUESS!	DESIGN	0.9989763169898598	WITHOUT_CLASSIFICATION	0.001023683010140153	DESIGN
//TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999506906636	DESIGN	4.930933647164444E-8	WITHOUT_CLASSIFICATION
// TODO: Replace this with a more elegant solution.	DESIGN	0.9999877283275973	DESIGN	1.2271672402649717E-5	WITHOUT_CLASSIFICATION
// TODO: Should this really return null?  If not, figure out something better to do here.	DESIGN	0.9999958082222212	DESIGN	4.191777778765935E-6	WITHOUT_CLASSIFICATION
//TODO: get SQL rendering out of this package!	DESIGN	0.870230768201272	DESIGN	0.129769231798728	WITHOUT_CLASSIFICATION
// yuck!	DESIGN	0.9963220717973126	WITHOUT_CLASSIFICATION	0.0036779282026873144	DESIGN
// ignore it; the incoming property could not be found so we // cannot be sure what to do here.  At the very least, the // safest is to simply not apply any dereference toggling...	DESIGN	0.993037951724658	WITHOUT_CLASSIFICATION	0.0069620482753419075	DESIGN
// TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9999471101696306	DESIGN	5.288983036943165E-5	WITHOUT_CLASSIFICATION
// otherwise, a trim-specification and/or a trim-character // have been specified;  we need to decide which options // are present and "do the right thing" // should leading trim-characters be trimmed? // should trailing trim-characters be trimmed? // the trim-character // the trim-source	DESIGN	0.9327881609336216	WITHOUT_CLASSIFICATION	0.06721183906637838	DESIGN
// todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.555070677589093	WITHOUT_CLASSIFICATION	0.44492932241090694	DESIGN
//TODO: is this a bit ugly?	DESIGN	0.999909359020115	DESIGN	9.064097988494768E-5	WITHOUT_CLASSIFICATION
// Need a better way to define the suffixes here...	DESIGN	0.8492589344756513	DESIGN	0.15074106552434868	WITHOUT_CLASSIFICATION
// TODO: something much better - look at the type of the other expression! // TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9999975166184812	DESIGN	2.483381518813212E-6	WITHOUT_CLASSIFICATION
// TODO : what amount of significant digits need to be supported here? //      - from the DecimalFormat docs: //          [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.9977527908100766	DESIGN	0.002247209189923452	WITHOUT_CLASSIFICATION
// Needed the "clazz_" check to work around union-subclasses // TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9999942665442009	DESIGN	5.733455799049015E-6	WITHOUT_CLASSIFICATION
//We should actually rework this class to not implement Parser //and just process path expressions in the most convenient way.	DESIGN	0.9967255811674475	DESIGN	0.0032744188325525424	WITHOUT_CLASSIFICATION
//The class is now way to complex!	DESIGN	0.999849049111426	WITHOUT_CLASSIFICATION	1.509508885739395E-4	DESIGN
//TODO: get SQL rendering out of here	DESIGN	0.7657919177264748	DESIGN	0.2342080822735251	WITHOUT_CLASSIFICATION
//TODO: is there a better way?	DESIGN	0.9999821561283898	DESIGN	1.7843871610172582E-5	WITHOUT_CLASSIFICATION
//Must be done here because of side-effect! yuck...	DESIGN	0.9590548600352655	WITHOUT_CLASSIFICATION	0.04094513996473444	DESIGN
//name from a super query (a bit inelegant that it shows up here)	DESIGN	0.5641242061252351	WITHOUT_CLASSIFICATION	0.43587579387476494	DESIGN
// We should reengineer this class so that, rather than the current ad - // hoc linear approach to processing a stream of tokens, we instead // build up a tree of expressions.	DESIGN	0.9781435932985701	DESIGN	0.021856406701429857	WITHOUT_CLASSIFICATION
// this is ugly here, but needed because its a subquery	DESIGN	0.9976760897178262	WITHOUT_CLASSIFICATION	0.0023239102821738713	DESIGN
// unhappy about this being public ... is there a better way?	DESIGN	0.9999168809417103	DESIGN	8.311905828974308E-5	WITHOUT_CLASSIFICATION
// Make sure this is a defined parameter and check the incoming value type // TODO: what should be the actual exception type here?	DESIGN	0.9997444754566055	DESIGN	2.555245433945898E-4	WITHOUT_CLASSIFICATION
// TODO : this constructor form is *only* used from constructor directly below us; can it go away?	DESIGN	0.9999999120530636	DESIGN	8.794693633538579E-8	WITHOUT_CLASSIFICATION
//TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.8509868326183573	WITHOUT_CLASSIFICATION	0.14901316738164266	DESIGN
// TODO : should remove this exposure //  and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9957368030425502	DESIGN	0.004263196957449893	WITHOUT_CLASSIFICATION
// todo : should this get moved to PersistentContext? // logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.9937782607638683	DESIGN	0.006221739236131652	WITHOUT_CLASSIFICATION
// TODO: what type?	DESIGN	0.9715559297122568	DESIGN	0.028444070287743237	WITHOUT_CLASSIFICATION
// todo : should seriously consider not allowing a txn to begin from a child session //      can always route the request to the root session...	DESIGN	0.9944702073623721	WITHOUT_CLASSIFICATION	0.005529792637627794	DESIGN
// short-circuit for performance...	DESIGN	0.9903509980682492	WITHOUT_CLASSIFICATION	0.009649001931750653	DESIGN
// not absolutely necessary, but does help with aggressive release	DESIGN	0.9995268645127198	WITHOUT_CLASSIFICATION	4.73135487280341E-4	DESIGN
// TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.8688870061507988	DESIGN	0.13111299384920108	WITHOUT_CLASSIFICATION
//work around a bug in all known connection pools....	DESIGN	0.9530720199058073	DESIGN	0.04692798009419271	WITHOUT_CLASSIFICATION
// TODO : make this the factory for "entity mode related" sessions; // also means making this the target of transaction-synch and the // thing that knows how to cascade things between related sessions // // At that point, perhaps this thing is a "SessionContext", and // ConnectionManager is a "JDBCContext"?  A "SessionContext" should // live in the impl package...	DESIGN	0.9999999999997871	DESIGN	2.1302323760572742E-13	WITHOUT_CLASSIFICATION
//TODO: does this really need to be here? //      does the collection already have //      it's own up-to-date snapshot?	DESIGN	0.9738882492505979	DESIGN	0.026111750749402113	WITHOUT_CLASSIFICATION
//TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9935252060170812	DESIGN	0.00647479398291882	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8934601618932041	DESIGN	0.10653983810679592	WITHOUT_CLASSIFICATION
// todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; //      but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; //      currently this works in conjuction with the check on //      DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from //      cache with enabled filters). // EARLY EXIT!!!!!	DESIGN	0.996005988075296	WITHOUT_CLASSIFICATION	0.0039940119247040325	DESIGN
//for sets, we should end the collection load after resolving //the entities, since we might call hashCode() on the elements //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.6622860944785852	DESIGN	0.3377139055214147	WITHOUT_CLASSIFICATION
//This is not very nice (and quite slow):	DESIGN	0.9916055924983882	WITHOUT_CLASSIFICATION	0.008394407501611786	DESIGN
//use of trim() here is ugly?	DESIGN	0.9965712028635156	WITHOUT_CLASSIFICATION	0.0034287971364844166	DESIGN
//TODO: this is too conservative; if all preceding joins were  //      also inner joins, we could use an inner join here	DESIGN	0.6945876876151682	WITHOUT_CLASSIFICATION	0.30541231238483196	DESIGN
//TODO: look at the owning property and check that it  //      isn't lazy (by instrumentation)	DESIGN	0.9998340319500416	WITHOUT_CLASSIFICATION	1.65968049958322E-4	DESIGN
//TODO: inefficient	DESIGN	0.691570830579219	DESIGN	0.3084291694207809	WITHOUT_CLASSIFICATION
// why does this matter?	DESIGN	0.7329011059280933	WITHOUT_CLASSIFICATION	0.2670988940719067	DESIGN
// from the collection of associations, locate OJA for the // ManyToOne corresponding to this persister to fully // define the many-to-many; we need that OJA so that we can // use its alias here // TODO : is there a better way here?	DESIGN	0.9999995652102638	DESIGN	4.347897361781215E-7	WITHOUT_CLASSIFICATION
//TODO: this class depends directly upon CriteriaImpl,  //      in the impl package ... add a CriteriaImplementor  //      interface	DESIGN	0.9999336530739562	DESIGN	6.634692604383288E-5	WITHOUT_CLASSIFICATION
//TODO: add a CriteriaImplementor interface //      this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9994797052691428	DESIGN	5.202947308571314E-4	WITHOUT_CLASSIFICATION
// TODO : not so sure this is needed...	DESIGN	0.999994762605438	DESIGN	5.237394562053614E-6	WITHOUT_CLASSIFICATION
// meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9991581661588628	WITHOUT_CLASSIFICATION	8.418338411371691E-4	DESIGN
// TODO: The order in which entities are saved may matter (e.g., a particular transient entity //       may need to be saved before other transient entities can be saved; //       Keep retrying the batch of transient entities until either: //       1) there are no transient entities left in transientCopyCache //       or 2) no transient entities were saved in the last batch // For now, just run through the transient entities and retry the merge	DESIGN	0.9559923621602119	DESIGN	0.04400763783978817	WITHOUT_CLASSIFICATION
// todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9877845803910202	DESIGN	0.012215419608979776	WITHOUT_CLASSIFICATION
// todo : currently expects that the individual with expressions apply to the same sql table join. //      This may not be the case for joined-subclass where the property values //      might be coming from different tables in the joined hierarchy.  At some //      point we should expand this to support that capability.  However, that has //      some difficulties: //          1) the biggest is how to handle ORs when the individual comparisons are //              linked to different sql joins. //          2) here we would need to track each comparison individually, along with //              the join alias to which it applies and then pass that information //              back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.7306801692874276	WITHOUT_CLASSIFICATION	0.2693198307125723	DESIGN
// this function has a template -> restore output, apply the template and write the result out // TODO: Downcast to avoid using an interface?  Yuck.	DESIGN	0.999915004018089	DESIGN	8.499598191101122E-5	WITHOUT_CLASSIFICATION
// at some point the generate phase needs to be moved out of here, // because a single object-level DML might spawn multiple SQL DML // command executions. // // Possible to just move the sql generation for dml stuff, but for // consistency-sake probably best to just move responsiblity for // the generation phase completely into the delegates // (QueryLoader/StatementExecutor) themselves.  Also, not sure why // QueryLoader currently even has a dependency on this at all; does // it need it?  Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999998300145	DESIGN	1.6998540221756196E-10	WITHOUT_CLASSIFICATION
// get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.88889272044454	DESIGN	0.11110727955545985	WITHOUT_CLASSIFICATION
// TODO should we just collect these like with the collections above?	DESIGN	0.9999949477907821	DESIGN	5.0522092178711086E-6	WITHOUT_CLASSIFICATION
// todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification // see the discussion there in DynamicFilterParameterSpecification's javadocs as to why // it is currently not done that way.	DESIGN	0.7928422990145657	DESIGN	0.20715770098543435	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////////// // USED ONLY FOR REGRESSION TESTING!!!! // // todo : obviously get rid of all this junk ;) ///////////////////////////////////////////////////////////////////////////	DESIGN	0.9624681393082548	WITHOUT_CLASSIFICATION	0.03753186069174511	DESIGN
//create an index on the key columns??	DESIGN	0.999967524052678	WITHOUT_CLASSIFICATION	3.2475947321967076E-5	DESIGN
//TODO: deprecated, remove eventually	DESIGN	0.8050641507323875	DESIGN	0.19493584926761248	WITHOUT_CLASSIFICATION
//create an index on the key columns??	DESIGN	0.999967524052678	WITHOUT_CLASSIFICATION	3.2475947321967076E-5	DESIGN
//TODO: improve this hack!	DESIGN	0.9999832318147427	DESIGN	1.676818525729901E-5	WITHOUT_CLASSIFICATION
// inheritance cycle detection (paranoid check)	DESIGN	0.9999777966162899	WITHOUT_CLASSIFICATION	2.2203383710037984E-5	DESIGN
//TODO: remove use of instanceof!	DESIGN	0.8529088849959147	DESIGN	0.14709111500408542	WITHOUT_CLASSIFICATION
//shortcut	DESIGN	0.9992699363682087	WITHOUT_CLASSIFICATION	7.300636317912858E-4	DESIGN
//TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.9949448773683919	WITHOUT_CLASSIFICATION	0.005055122631608198	DESIGN
// create an index on the key columns??	DESIGN	0.9999950965063101	WITHOUT_CLASSIFICATION	4.903493689843383E-6	DESIGN
// todo : remove	DESIGN	0.9914684762227056	WITHOUT_CLASSIFICATION	0.008531523777294466	DESIGN
// todo : remove	DESIGN	0.9914684762227056	WITHOUT_CLASSIFICATION	0.008531523777294466	DESIGN
// todo : remove	DESIGN	0.9914684762227056	WITHOUT_CLASSIFICATION	0.008531523777294466	DESIGN
// todo : throw exception?	DESIGN	0.710568428948655	WITHOUT_CLASSIFICATION	0.2894315710513451	DESIGN
// todo : throw exception?  maybe warn if not the same?	DESIGN	0.8910844723734962	DESIGN	0.10891552762650389	WITHOUT_CLASSIFICATION
//TODO: make EntityPersister *not* depend on SessionFactoryImplementor //interface, if possible	DESIGN	0.9981315306087787	DESIGN	0.0018684693912212676	WITHOUT_CLASSIFICATION
//TODO: is there a more elegant way than downcasting?	DESIGN	0.9999715183110646	DESIGN	2.848168893539531E-5	WITHOUT_CLASSIFICATION
// TODO: encapsulate the protected instance variables!	DESIGN	0.5921941480778887	DESIGN	0.4078058519221112	WITHOUT_CLASSIFICATION
// should indicate that we are processing an INSERT/UPDATE/DELETE // query with a subquery implied via a collection property // function. Here, we need to use the table name itself as the // qualification alias. // TODO : verify this works for all databases... // TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9999999591106749	DESIGN	4.08893252574467E-8	WITHOUT_CLASSIFICATION
//TODO: copy/paste from insertRows()	DESIGN	0.9459540443416606	WITHOUT_CLASSIFICATION	0.05404595565833935	DESIGN
//TODO: copy/paste from recreate()	DESIGN	0.9636008007068257	WITHOUT_CLASSIFICATION	0.036399199293174235	DESIGN
//should this interface extend PropertyMapping?	DESIGN	0.9892266027602172	DESIGN	0.010773397239782647	WITHOUT_CLASSIFICATION
//ie. the subquery! yuck!	DESIGN	0.9749213520688536	WITHOUT_CLASSIFICATION	0.025078647931146475	DESIGN
//TODO: move to .sql package!!	DESIGN	0.9284247124609397	DESIGN	0.07157528753906024	WITHOUT_CLASSIFICATION
//TODO: code duplication with SingleTableEntityPersister	DESIGN	0.9950896721971464	DESIGN	0.00491032780285353	WITHOUT_CLASSIFICATION
// TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9999995095163846	DESIGN	4.904836153862132E-7	WITHOUT_CLASSIFICATION
//TODO: *two* hashmap lookups here is one too many...	DESIGN	0.6991945570432315	WITHOUT_CLASSIFICATION	0.3008054429567683	DESIGN
//TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.9788681650134828	DESIGN	0.02113183498651712	WITHOUT_CLASSIFICATION
//perhaps not really necessary...	DESIGN	0.7214062729466532	DESIGN	0.2785937270533468	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.6508147920459977	DESIGN	0.3491852079540024	WITHOUT_CLASSIFICATION
// NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! // was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried // to remove that unqoting and missing aliases..	DESIGN	0.8804967928687824	DESIGN	0.11950320713121763	WITHOUT_CLASSIFICATION
//TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9979981622035995	DESIGN	0.002001837796400453	WITHOUT_CLASSIFICATION
//TODO: optimize this better!	DESIGN	0.8995226955042122	DESIGN	0.1004773044957879	WITHOUT_CLASSIFICATION
//TODO: should we allow suffixes on these ?	DESIGN	0.9989026449845743	DESIGN	0.0010973550154257724	WITHOUT_CLASSIFICATION
//This is really ugly, but necessary:	DESIGN	0.7324517661797171	WITHOUT_CLASSIFICATION	0.26754823382028303	DESIGN
//ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.999965515561834	DESIGN	3.448443816598734E-5	WITHOUT_CLASSIFICATION
//TODO: disable batch loading if lockMode > READ?	DESIGN	0.9950737550200249	WITHOUT_CLASSIFICATION	0.004926244979975118	DESIGN
// append the SQL to return the generated identifier //TODO: suck into Insert	DESIGN	0.5158045275924976	WITHOUT_CLASSIFICATION	0.4841954724075023	DESIGN
//TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9273177594244614	DESIGN	0.07268224057553858	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9891465893449948	DESIGN	0.010853410655005261	WITHOUT_CLASSIFICATION
//TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9994164260453063	DESIGN	5.835739546937543E-4	WITHOUT_CLASSIFICATION
//TODO: implement functionality //  this might be painful to do here, as the "join post processing" for //  the subquery has already been performed (meaning that for //  theta-join dialects, the join conditions have already been moved //  over to the where clause).  A "simple" solution here might to //  perform "join post processing" once for the entire query (including //  any subqueries) at one fell swoop	DESIGN	0.9999880421661724	DESIGN	1.1957833827604757E-5	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9170609259259326	WITHOUT_CLASSIFICATION	0.08293907407406739	DESIGN
//kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9878926331825496	WITHOUT_CLASSIFICATION	0.012107366817450357	DESIGN
//is this ok?	DESIGN	0.9638913254976601	WITHOUT_CLASSIFICATION	0.03610867450233985	DESIGN
//TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999999062583943	DESIGN	9.374160572677987E-8	WITHOUT_CLASSIFICATION
//TODO: make this a bit nicer	DESIGN	0.9958671142247134	DESIGN	0.004132885775286554	WITHOUT_CLASSIFICATION
//Yuck:	DESIGN	0.7516426633047375	WITHOUT_CLASSIFICATION	0.24835733669526258	DESIGN
//TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.999980107306542	DESIGN	1.9892693458078468E-5	WITHOUT_CLASSIFICATION
/**	DESIGN	0.8934601618932041	DESIGN	0.10653983810679592	WITHOUT_CLASSIFICATION
// TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9992492879930498	DESIGN	7.507120069501379E-4	WITHOUT_CLASSIFICATION
//TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9999789863990078	DESIGN	2.101360099218233E-5	WITHOUT_CLASSIFICATION
//TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.9987963669710304	DESIGN	0.0012036330289696604	WITHOUT_CLASSIFICATION
// todo : YUCK!!!	DESIGN	0.9951907005635524	WITHOUT_CLASSIFICATION	0.004809299436447583	DESIGN
// TODO : YUCK!!!  fix after HHH-1907 is complete	DESIGN	0.9995553898846922	DESIGN	4.4461011530782683E-4	WITHOUT_CLASSIFICATION
//TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9996038259322747	DESIGN	3.9617406772529955E-4	WITHOUT_CLASSIFICATION
//TODO: design new lifecycle for ProxyFactory	DESIGN	0.69888946104131	WITHOUT_CLASSIFICATION	0.30111053895869005	DESIGN
//TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.951024844358179	DESIGN	0.04897515564182109	WITHOUT_CLASSIFICATION
// TODO: copy/paste from ManyToOneType	DESIGN	0.7841590278189452	DESIGN	0.21584097218105486	WITHOUT_CLASSIFICATION
//TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.998157538515121	DESIGN	0.0018424614848791012	WITHOUT_CLASSIFICATION
//TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9484788554988878	DESIGN	0.05152114450111213	WITHOUT_CLASSIFICATION
//TODO: implement caching?! proxies?!	DESIGN	0.6786593574337696	DESIGN	0.32134064256623035	WITHOUT_CLASSIFICATION
//TODO: is this right??	DESIGN	0.9998905560604704	DESIGN	1.0944393952958761E-4	WITHOUT_CLASSIFICATION
// is this really necessary?	DESIGN	0.8423979946672834	WITHOUT_CLASSIFICATION	0.15760200533271668	DESIGN
//TODO: move these to a new JoinableType abstract class, //extended by EntityType and PersistentCollectionType:	DESIGN	0.9729597593762652	DESIGN	0.027040240623734762	WITHOUT_CLASSIFICATION
// TODO: this is very suboptimal for some subclasses (namely components), // since it does not take advantage of two-phase-load	DESIGN	0.9119823769225882	DESIGN	0.08801762307741177	WITHOUT_CLASSIFICATION
// worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.9993124724706219	DESIGN	6.8752752937802E-4	WITHOUT_CLASSIFICATION
// NOTE VERY HACKISH WORKAROUND!! // TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999999999786379	DESIGN	2.1362144123957465E-11	WITHOUT_CLASSIFICATION
// TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9999913261783917	DESIGN	8.67382160824992E-6	WITHOUT_CLASSIFICATION
// We would probably refactor to have LogicParser (builds a tree of simple // expressions connected by and, or, not), ExpressionParser (translates // from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like // FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much // the same thing it does now)	DESIGN	0.768083378372435	WITHOUT_CLASSIFICATION	0.23191662162756504	DESIGN
//TODO: this is a little inefficient, don't need to do a whole //      deep replaceElements() call	DESIGN	0.9999987863980382	DESIGN	1.2136019618711231E-6	WITHOUT_CLASSIFICATION
//workaround for WebLogic	DESIGN	0.9783322175067235	DESIGN	0.021667782493276548	WITHOUT_CLASSIFICATION
//TODO: this dependency is kinda Bad	DESIGN	0.9998867289720484	DESIGN	1.1327102795147353E-4	WITHOUT_CLASSIFICATION
//ick!	DESIGN	0.9988467387817809	WITHOUT_CLASSIFICATION	0.001153261218219047	DESIGN
// short cut check...	DESIGN	0.9982770337392423	WITHOUT_CLASSIFICATION	0.0017229662607577598	DESIGN
// todo : move to StringHelper?	DESIGN	0.982705829521115	WITHOUT_CLASSIFICATION	0.017294170478884974	DESIGN
//yukky! Don't you have subclasses for that! //TODO race conditions can happen here	DESIGN	0.9941431410179821	DESIGN	0.005856858982018001	WITHOUT_CLASSIFICATION
//TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9980188164229085	DESIGN	0.001981183577091536	WITHOUT_CLASSIFICATION
// FIXME hack to work around fact that calling // Node added = root.addChild( fqn ); doesn't  // properly set the version on the node	DESIGN	0.9999998351046542	DESIGN	1.6489534585670133E-7	WITHOUT_CLASSIFICATION
// TODO: I considered validating the presence of the TS cache here, // but decided to defer unti getQueryCacheInstance() in case the  // cache is never actually used	DESIGN	0.929648231012204	DESIGN	0.07035176898779605	WITHOUT_CLASSIFICATION
//need to do that here rather than in the save event listener to let //the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.5822741863303734	DESIGN	0.4177258136696266	WITHOUT_CLASSIFICATION
//TODO: simply remove this override //      if we fix the above todos	DESIGN	0.9557867617064424	WITHOUT_CLASSIFICATION	0.04421323829355758	DESIGN
// This, is used by SessionFactoryImpl to hand to the generated SessionImpl; // was the only reason I could see that we cannot just use null as // Settings.cacheProvider	DESIGN	0.9531619326375775	WITHOUT_CLASSIFICATION	0.04683806736242237	DESIGN
// this is done here 'cos we might only know the type here (ugly!) // TODO: improve this a lot:	DESIGN	0.9999991538153599	DESIGN	8.461846401389808E-7	WITHOUT_CLASSIFICATION
// todo : would love to have this work on a notification basis //    where the successful binding of an entity/subclass would //    emit a notification which the extendsQueue entries could //    react to...	DESIGN	0.9936698386493397	WITHOUT_CLASSIFICATION	0.0063301613506603046	DESIGN
// TODO : not sure the best way to handle this. // The non-performant way :	DESIGN	0.999758460479064	DESIGN	2.41539520935971E-4	WITHOUT_CLASSIFICATION
// would be better to use the element-type to determine // whether the old and the new are equal here; the problem being // we do not necessarily have access to the element type in all // cases	DESIGN	0.9999900672416561	WITHOUT_CLASSIFICATION	9.932758343899575E-6	DESIGN
// This next bit is to allow for both unsaved-value="negative" // and for "older" behavior where version number did not get // seeded if it was already set in the object // TODO: shift it into unsaved-value strategy	DESIGN	0.9977155222745654	DESIGN	0.0022844777254345623	WITHOUT_CLASSIFICATION
// merges don't cascade to uninitialized collections //	DESIGN	0.9999736814799748	WITHOUT_CLASSIFICATION	2.631852002530054E-5	DESIGN
// TODO: an alternative is to check if the owner has changed; if it hasn't then // return collection.getOwner()	DESIGN	0.9924598929163899	WITHOUT_CLASSIFICATION	0.007540107083610115	DESIGN
//it is possible that the tree-walking in OuterJoinLoader can get to //an association defined by a subclass, in which case the property-ref //might refer to a property defined on a subclass of the current class //in this case, the table name is not known - this temporary solution  //assumes that the property-ref refers to a property of the subclass //table that the association belongs to (a reasonable guess) //TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999999991585967	DESIGN	8.414033566158157E-10	WITHOUT_CLASSIFICATION
// this only works because collection entries are kept in a sequenced // map by persistence context (maybe we should do like entities and // keep a separate sequences set...) //TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9999859098126678	DESIGN	1.4090187332286597E-5	WITHOUT_CLASSIFICATION
// important, to account for newly saved entities in query // todo : some kind of check for new status...	DESIGN	0.6824611313591449	WITHOUT_CLASSIFICATION	0.31753886864085507	DESIGN
// brand new collection //TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9969971766127143	WITHOUT_CLASSIFICATION	0.003002823387285806	DESIGN
//TODO: if object was an uninitialized proxy, this is inefficient, //      resulting in two SQL selects	DESIGN	0.9943861181731806	WITHOUT_CLASSIFICATION	0.00561388182681951	DESIGN
//before cascade! //TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9966042753172862	DESIGN	0.0033957246827136843	WITHOUT_CLASSIFICATION
// TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.9999967924109943	DESIGN	3.2075890056641897E-6	WITHOUT_CLASSIFICATION
// todo : need to find a clean way to handle the "event source" role // a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... // passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9999774951356865	DESIGN	2.2504864313572044E-5	WITHOUT_CLASSIFICATION
// todo : remove	DESIGN	0.9914684762227056	WITHOUT_CLASSIFICATION	0.008531523777294466	DESIGN
//aliasRefNode.resolve( false, false, aliasRefNode.getText() ); //TODO: is it kosher to do it here? //TODO: is it kosher to do it here?	DESIGN	0.9951010980870281	DESIGN	0.004898901912971959	WITHOUT_CLASSIFICATION
// No explicit select expression; render the id and properties // projection lists for every persister in the from clause into // a single 'token node'. //TODO: the only reason we need this stuff now is collection filters, //      we should get rid of derived select clause completely!	DESIGN	0.9997150464632183	DESIGN	2.849535367816174E-4	WITHOUT_CLASSIFICATION
// TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; //      the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> //          the table info gotten here should really be self-contained (i.e., a class representation //          defining all the needed attributes), then we could then get an array of those	DESIGN	0.9999759697044016	DESIGN	2.4030295598365618E-5	WITHOUT_CLASSIFICATION
// TODO: get SQL rendering out of here, create an AST for the join expressions. // Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9786151935930004	WITHOUT_CLASSIFICATION	0.021384806406999596	DESIGN
// TODO : this really needs to be delayed unitl after we definitively know all node types // where this is currently a problem is parameters for which where we cannot unequivocally // resolve an expected type	DESIGN	0.9999982300383314	DESIGN	1.7699616685420556E-6	WITHOUT_CLASSIFICATION
// TODO: Figure out a better way to get the FROM elements in a proper tree structure. // If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.6893941417348423	DESIGN	0.3106058582651577	WITHOUT_CLASSIFICATION
// work around that crazy issue where the tree contains // "empty" FromElements (no text); afaict, this is caused // by FromElementFactory.createCollectionJoin()	DESIGN	0.9919546151044077	DESIGN	0.008045384895592221	WITHOUT_CLASSIFICATION
//TODO: this class does too many things! we need a different //kind of path expression parser for each of the diffferent //ways in which path expressions can occur	DESIGN	0.9987050010822447	DESIGN	0.0012949989177553267	WITHOUT_CLASSIFICATION
//real hacky... // used to count the nesting of parentheses	DESIGN	0.9993707785683329	DESIGN	6.292214316670419E-4	WITHOUT_CLASSIFICATION
// TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; // currently not doable though because of the resultset-ref stuff...	DESIGN	0.7626970831365155	WITHOUT_CLASSIFICATION	0.2373029168634845	DESIGN
//for arrays, we should end the collection load before resolving //the entities, since the actual array instances are not instantiated //during loading //TODO: or we could do this polymorphically, and have two //      different operations implemented differently for arrays	DESIGN	0.9964323773601629	DESIGN	0.003567622639837118	WITHOUT_CLASSIFICATION
// polymorphism not really handled completely correctly, // perhaps...well, actually its ok, assuming that the // entity name used in the lookup is the same as the // the one used here, which it will be	DESIGN	0.582522528513549	WITHOUT_CLASSIFICATION	0.41747747148645087	DESIGN
// TODO: should "record" how many properties we have reffered to - and if we  //       don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9993604499607767	DESIGN	6.39550039223351E-4	WITHOUT_CLASSIFICATION
// VERY IMPORTANT!!!! - This class needs to be free of any static references // to any CGLIB or Javassist classes.  Otherwise, users will always need both // on their classpaths no matter which (if either) they use. // // Another option here would be to remove the Hibernate.isPropertyInitialized() // method and have the users go through the SessionFactory to get this information.	DESIGN	0.9999874221759851	WITHOUT_CLASSIFICATION	1.2577824014887166E-5	DESIGN
// TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? // or why does EntityPersister's not get access to configuration ? // // The only reason I could see that Configuration gets passed to collection persisters // is so that they can look up the dom4j node name of the entity element in case // no explicit node name was applied at the collection element level.  Are you kidding me? // Trivial to fix then.  Just store and expose the node name on the entity persister // (which the collection persister looks up anyway via other means...).	DESIGN	0.9999888831685634	DESIGN	1.111683143665771E-5	WITHOUT_CLASSIFICATION
//for backward compatibility, allow a set with no not-null  //element columns, using all columns in the row locater SQL //TODO: create an implicit not null constraint on all cols?	DESIGN	0.9515930200481775	WITHOUT_CLASSIFICATION	0.048406979951822415	DESIGN
//SPACES //TODO: i'm not sure, but perhaps we should exclude //      abstract denormalized tables?	DESIGN	0.9999643029185783	DESIGN	3.569708142173837E-5	WITHOUT_CLASSIFICATION
//workaround, for backward compatibility of sets with no //not-null columns, assume all columns are used in the //row locator SQL	DESIGN	0.9890053315847277	WITHOUT_CLASSIFICATION	0.010994668415272331	DESIGN
//note that this method could easily be moved up to BasicEntityPersister, //if we ever needed to reuse it from other subclasses	DESIGN	0.9991784636548872	DESIGN	8.215363451127693E-4	WITHOUT_CLASSIFICATION
//index += getPropertyColumnSpan( i ); //TODO:  this is kinda slow...	DESIGN	0.9912260687494493	DESIGN	0.008773931250550742	WITHOUT_CLASSIFICATION
//TODO: need some caching scheme? really comes down to decision  //      regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9186607749066201	DESIGN	0.0813392250933799	WITHOUT_CLASSIFICATION
// TODO: here is why we need to make bytecode provider global :( // TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999994831513	DESIGN	5.168487197880756E-10	WITHOUT_CLASSIFICATION
//TODO: Yuck! This is not quite good enough, it's a quick //hack around the problem of having a to-one association //that refers to an embedded component:	DESIGN	0.9999999845759089	DESIGN	1.5424091114122234E-8	WITHOUT_CLASSIFICATION
// for DOM4J "collections" only // TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9942123595102269	DESIGN	0.0057876404897730886	WITHOUT_CLASSIFICATION
// would be great to move all this below here into another method that could also be used // from the new scrolling stuff. // // Would need to change the way the max-row stuff is handled (i.e. behind an interface) so // that I could do the control breaking at the means to know when to stop	DESIGN	0.9999706661361144	DESIGN	2.9333863885613786E-5	WITHOUT_CLASSIFICATION
//TODO: can we *always* use the "null property" approach for everything?	DESIGN	0.9974192980037677	DESIGN	0.0025807019962323435	WITHOUT_CLASSIFICATION
//polymorphism comment above	DESIGN	0.9999929542003231	WITHOUT_CLASSIFICATION	7.045799676937676E-6	DESIGN
// some messy, complex stuff here, since createCriteria() can take an // aliased path, or a path rooted at the creating criteria instance	DESIGN	0.999998219630601	WITHOUT_CLASSIFICATION	1.780369399020002E-6	DESIGN
//TODO: really bad, evil hack to fix!!!	DESIGN	0.9999999213529314	DESIGN	7.864706864538174E-8	WITHOUT_CLASSIFICATION
// ugly hack for cases like "elements(foo.bar.collection)" // (multi-part path expression ending in elements or indices)	DESIGN	0.9967466236683982	DESIGN	0.0032533763316018884	WITHOUT_CLASSIFICATION
// try block is a hack around fact that currently tuplizers are not // given the opportunity to resolve a subclass entity name.  this // allows the (we assume custom) interceptor the ability to // influence this decision if we were not able to based on the // given entityName	DESIGN	0.9999127927783432	DESIGN	8.720722165675688E-5	WITHOUT_CLASSIFICATION
/////////////////////////////////////////////////////////////////////// // HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! // Attempt to work around "ghost" ImpliedFromElements that occasionally // show up between the actual things being joined.  This consistently // occurs from index nodes (at least against many-to-many).  Not sure // if there are other conditions // // Essentially, look-ahead to the next FromElement that actually // writes something to the SQL	DESIGN	0.9999997866970805	DESIGN	2.1330291961404853E-7	WITHOUT_CLASSIFICATION
//init the table here instead of earlier, so that we can get a quoted table name //TODO: would it be better to simply pass the qualified table name, instead of //      splitting it up into schema/catalog/table names	DESIGN	0.9994352661524323	DESIGN	5.647338475676803E-4	WITHOUT_CLASSIFICATION
// TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method // I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so // if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9872611581554607	DESIGN	0.012738841844539397	WITHOUT_CLASSIFICATION
//TODO: is this really necessary????	DESIGN	0.9891465893449948	DESIGN	0.010853410655005261	WITHOUT_CLASSIFICATION
//TODO: ideally we need the construction of PropertyAccessor to take the following: //      1) EntityMode //      2) EntityMode-specific data (i.e., the classname for pojo entities) //      3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) // The easiest way, with the introduction of the new runtime-metamodel classes, would be the // the following predicates: //      1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a //          org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property //      2) What is now termed a "PropertyAccessor" stores any values needed from those two //          pieces of information //      3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with //          PropertyAccessor.getSetter()	DESIGN	0.9362355528372541	DESIGN	0.06376444716274597	WITHOUT_CLASSIFICATION
//TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9999914847975246	DESIGN	8.515202475422375E-6	WITHOUT_CLASSIFICATION
// todo : this eventually needs to be removed	DESIGN	0.9170609259259326	WITHOUT_CLASSIFICATION	0.08293907407406739	DESIGN
//TODO: make this a bit nicer	DESIGN	0.9958671142247134	DESIGN	0.004132885775286554	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
// todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9750040446722695	DESIGN	0.024995955327730458	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999950284764489	DESIGN	4.971523551092208E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999950284764489	DESIGN	4.971523551092208E-5	WITHOUT_CLASSIFICATION
/**     * FIXME Per the RegionFactory class Javadoc, this constructor version     * should not be necessary.     *      * @param props The configuration properties     */	DESIGN	0.999950284764489	DESIGN	4.971523551092208E-5	WITHOUT_CLASSIFICATION
// TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9999998126037584	DESIGN	1.8739624153593878E-7	WITHOUT_CLASSIFICATION
