test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999398655819665	WITHOUT_CLASSIFICATION	6.013441803357366E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993569920595321	WITHOUT_CLASSIFICATION	6.430079404678616E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993569920595321	WITHOUT_CLASSIFICATION	6.430079404678616E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9991488795130822	WITHOUT_CLASSIFICATION	8.511204869179007E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999025295710446	WITHOUT_CLASSIFICATION	9.747042895536781E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999901568945292	WITHOUT_CLASSIFICATION	9.843105470905527E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999901568945292	WITHOUT_CLASSIFICATION	9.843105470905527E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999850146844971	WITHOUT_CLASSIFICATION	1.4985315502787173E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997787250901852	WITHOUT_CLASSIFICATION	2.2127490981484045E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998843645239214	WITHOUT_CLASSIFICATION	1.156354760786675E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994834853668125	WITHOUT_CLASSIFICATION	5.165146331875393E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999308063452337	WITHOUT_CLASSIFICATION	6.919365476635532E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999308063452337	WITHOUT_CLASSIFICATION	6.919365476635532E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.999160743085832	WITHOUT_CLASSIFICATION	8.392569141680862E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9995677605673565	WITHOUT_CLASSIFICATION	4.3223943264337887E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9995282813934551	WITHOUT_CLASSIFICATION	4.717186065449648E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9976632461732922	WITHOUT_CLASSIFICATION	0.0023367538267077223	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9990169416182157	WITHOUT_CLASSIFICATION	9.83058381784196E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9992704555570465	WITHOUT_CLASSIFICATION	7.295444429535671E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.999111098855734	WITHOUT_CLASSIFICATION	8.889011442658851E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998928214788583	WITHOUT_CLASSIFICATION	1.0717852114175351E-4	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9995284002123217	WITHOUT_CLASSIFICATION	4.715997876782415E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9983420219256895	WITHOUT_CLASSIFICATION	0.0016579780743104194	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9992421345673647	WITHOUT_CLASSIFICATION	7.578654326353904E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9992421345673647	WITHOUT_CLASSIFICATION	7.578654326353904E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.998116517728185	WITHOUT_CLASSIFICATION	0.0018834822718149743	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9994148885861033	WITHOUT_CLASSIFICATION	5.85111413896654E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9997977536326591	WITHOUT_CLASSIFICATION	2.0224636734094157E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995808548538433	WITHOUT_CLASSIFICATION	4.1914514615671195E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.7003719169435281	DESIGN	0.29962808305647187	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999987285717788	WITHOUT_CLASSIFICATION	1.2714282211951081E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9983043417162145	WITHOUT_CLASSIFICATION	0.0016956582837854852	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9996594764766241	WITHOUT_CLASSIFICATION	3.4052352337586144E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.993911155313925	WITHOUT_CLASSIFICATION	0.006088844686074983	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9998989391842719	WITHOUT_CLASSIFICATION	1.0106081572809099E-4	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999434416176799	WITHOUT_CLASSIFICATION	5.6558382319984424E-5	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9887123398228503	WITHOUT_CLASSIFICATION	0.01128766017714964	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.8348025334448044	WITHOUT_CLASSIFICATION	0.16519746655519563	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997845175445592	WITHOUT_CLASSIFICATION	2.154824554408478E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9988831599644284	WITHOUT_CLASSIFICATION	0.0011168400355715752	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996692453237733	WITHOUT_CLASSIFICATION	3.3075467622675596E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9994422780354593	WITHOUT_CLASSIFICATION	5.577219645407438E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996975264114515	WITHOUT_CLASSIFICATION	3.024735885484266E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.884112711888407	WITHOUT_CLASSIFICATION	0.11588728811159299	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9993257432504846	WITHOUT_CLASSIFICATION	6.742567495154287E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9993257432504846	WITHOUT_CLASSIFICATION	6.742567495154287E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9996975264114515	WITHOUT_CLASSIFICATION	3.024735885484266E-4	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9963851502636288	DESIGN	0.00361484973637113	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9961108021512383	WITHOUT_CLASSIFICATION	0.003889197848761766	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998739803889535	WITHOUT_CLASSIFICATION	1.2601961104658218E-4	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999600849462582	WITHOUT_CLASSIFICATION	3.9915053741808157E-5	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999932187624238	WITHOUT_CLASSIFICATION	6.7812375763147095E-6	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998763197184918	WITHOUT_CLASSIFICATION	1.2368028150825026E-4	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9931634757375123	WITHOUT_CLASSIFICATION	0.0068365242624877556	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998311658048122	WITHOUT_CLASSIFICATION	1.6883419518779738E-4	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9975989901604426	WITHOUT_CLASSIFICATION	0.0024010098395572926	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9996861671790661	WITHOUT_CLASSIFICATION	3.138328209339341E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9993257432504846	WITHOUT_CLASSIFICATION	6.742567495154287E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999721678067564	WITHOUT_CLASSIFICATION	2.78321932437073E-5	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9980560034452807	WITHOUT_CLASSIFICATION	0.00194399655471934	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9661579766519687	WITHOUT_CLASSIFICATION	0.03384202334803123	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9989746736043986	WITHOUT_CLASSIFICATION	0.0010253263956014004	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9971421920174507	WITHOUT_CLASSIFICATION	0.0028578079825493535	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999811711749862	WITHOUT_CLASSIFICATION	1.8828825013878062E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998591887136143	WITHOUT_CLASSIFICATION	1.4081128638562668E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.999895541488024	WITHOUT_CLASSIFICATION	1.044585119760544E-4	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9994969138095599	WITHOUT_CLASSIFICATION	5.030861904402252E-4	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999837851187773	WITHOUT_CLASSIFICATION	1.6214881222703747E-5	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9986344767737821	WITHOUT_CLASSIFICATION	0.00136552322621795	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999039316044595	WITHOUT_CLASSIFICATION	9.606839554051076E-4	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9213072647156535	WITHOUT_CLASSIFICATION	0.07869273528434652	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9941909733598963	WITHOUT_CLASSIFICATION	0.0058090266401037635	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9991288996302405	WITHOUT_CLASSIFICATION	8.711003697593993E-4	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9895981767715674	WITHOUT_CLASSIFICATION	0.010401823228432696	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9995945290121332	WITHOUT_CLASSIFICATION	4.054709878668962E-4	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.999998671951373	WITHOUT_CLASSIFICATION	1.3280486268743326E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999852743049	WITHOUT_CLASSIFICATION	1.472569508226205E-8	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999724521829313	WITHOUT_CLASSIFICATION	2.7547817068758083E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9998670384523454	WITHOUT_CLASSIFICATION	1.329615476546334E-4	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995130799360941	WITHOUT_CLASSIFICATION	4.8692006390594825E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9986654292663644	WITHOUT_CLASSIFICATION	0.0013345707336357064	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999996332424846	WITHOUT_CLASSIFICATION	3.66757515328058E-7	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9995130799360941	WITHOUT_CLASSIFICATION	4.8692006390594825E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999908360844135	WITHOUT_CLASSIFICATION	9.163915586472638E-6	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.999912910747613	WITHOUT_CLASSIFICATION	8.708925238697949E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999460796927185	WITHOUT_CLASSIFICATION	5.392030728149407E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9994534525709677	WITHOUT_CLASSIFICATION	5.465474290321644E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9986465049759599	WITHOUT_CLASSIFICATION	0.0013534950240402404	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9986465049759599	WITHOUT_CLASSIFICATION	0.0013534950240402404	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995637692219422	WITHOUT_CLASSIFICATION	4.362307780577032E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996678873162994	WITHOUT_CLASSIFICATION	3.321126837005349E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9997944821484868	WITHOUT_CLASSIFICATION	2.055178515133402E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9656180696614461	WITHOUT_CLASSIFICATION	0.03438193033855381	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.998817897829634	WITHOUT_CLASSIFICATION	0.0011821021703659854	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9997689364706055	WITHOUT_CLASSIFICATION	2.310635293943923E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998502705270023	WITHOUT_CLASSIFICATION	1.4972947299777737E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9996003117695127	WITHOUT_CLASSIFICATION	3.9968823048724896E-4	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999629362492134	WITHOUT_CLASSIFICATION	3.7063750786587794E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999914321155209	WITHOUT_CLASSIFICATION	8.56788447916472E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999524970648008	WITHOUT_CLASSIFICATION	4.750293519911849E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999524970648008	WITHOUT_CLASSIFICATION	4.750293519911849E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999199697878338	WITHOUT_CLASSIFICATION	8.003021216614136E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9997852075011109	WITHOUT_CLASSIFICATION	2.147924988889669E-4	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997416380498481	WITHOUT_CLASSIFICATION	2.583619501519569E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999524970648008	WITHOUT_CLASSIFICATION	4.750293519911849E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999199697878338	WITHOUT_CLASSIFICATION	8.003021216614136E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999199697878338	WITHOUT_CLASSIFICATION	8.003021216614136E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9997254527989078	WITHOUT_CLASSIFICATION	2.7454720109219854E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9223785611183999	WITHOUT_CLASSIFICATION	0.0776214388816001	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999984772069282	WITHOUT_CLASSIFICATION	1.522793071732782E-6	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999960262406478	WITHOUT_CLASSIFICATION	3.97375935217842E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9871494820222639	WITHOUT_CLASSIFICATION	0.012850517977736087	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9871494820222639	WITHOUT_CLASSIFICATION	0.012850517977736087	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9997445832738479	WITHOUT_CLASSIFICATION	2.554167261521577E-4	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998321152325214	WITHOUT_CLASSIFICATION	1.6788476747856614E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9996872524470924	WITHOUT_CLASSIFICATION	3.1274755290750195E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9985308766342129	WITHOUT_CLASSIFICATION	0.0014691233657869861	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9985308766342129	WITHOUT_CLASSIFICATION	0.0014691233657869861	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9942652537973257	WITHOUT_CLASSIFICATION	0.005734746202674307	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999768735403342	WITHOUT_CLASSIFICATION	2.312645966578286E-5	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.997968234907675	WITHOUT_CLASSIFICATION	0.0020317650923251406	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999994646637396	WITHOUT_CLASSIFICATION	5.353362604043099E-6	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9990122805459689	WITHOUT_CLASSIFICATION	9.877194540310697E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999676152808786	WITHOUT_CLASSIFICATION	3.238471912140158E-5	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9973199105213797	WITHOUT_CLASSIFICATION	0.002680089478620404	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9998341027060795	WITHOUT_CLASSIFICATION	1.6589729392037166E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.997968234907675	WITHOUT_CLASSIFICATION	0.0020317650923251406	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9992993009716152	WITHOUT_CLASSIFICATION	7.006990283848726E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996427289126996	WITHOUT_CLASSIFICATION	3.5727108730043586E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996427289126996	WITHOUT_CLASSIFICATION	3.5727108730043586E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.7461034045967687	WITHOUT_CLASSIFICATION	0.25389659540323134	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9892274290207361	WITHOUT_CLASSIFICATION	0.01077257097926384	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999058306053333	WITHOUT_CLASSIFICATION	9.416939466672859E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9989395020101617	WITHOUT_CLASSIFICATION	0.001060497989838287	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9974329232930478	WITHOUT_CLASSIFICATION	0.0025670767069521957	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9996661722532285	WITHOUT_CLASSIFICATION	3.3382774677158004E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9994161954949681	WITHOUT_CLASSIFICATION	5.838045050320617E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9989167036413543	WITHOUT_CLASSIFICATION	0.0010832963586456987	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9994280678016283	WITHOUT_CLASSIFICATION	5.719321983717273E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998627652934939	WITHOUT_CLASSIFICATION	1.3723470650600845E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998627652934939	WITHOUT_CLASSIFICATION	1.3723470650600845E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992570669863448	WITHOUT_CLASSIFICATION	7.429330136552112E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999398655819665	WITHOUT_CLASSIFICATION	6.013441803357366E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9988939855675637	WITHOUT_CLASSIFICATION	0.0011060144324363172	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993569920595321	WITHOUT_CLASSIFICATION	6.430079404678616E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9993298464619609	WITHOUT_CLASSIFICATION	6.701535380391712E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9975658536093307	WITHOUT_CLASSIFICATION	0.0024341463906693193	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998625871966424	WITHOUT_CLASSIFICATION	1.3741280335755168E-4	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9993606623100195	WITHOUT_CLASSIFICATION	6.393376899804101E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9998347116714191	WITHOUT_CLASSIFICATION	1.6528832858095534E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.9994132746856956	WITHOUT_CLASSIFICATION	5.867253143042995E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992558863784452	WITHOUT_CLASSIFICATION	7.44113621554762E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9996110870078019	WITHOUT_CLASSIFICATION	3.8891299219819366E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9993606623100195	WITHOUT_CLASSIFICATION	6.393376899804101E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9969178100215176	WITHOUT_CLASSIFICATION	0.003082189978482289	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9991917009731295	WITHOUT_CLASSIFICATION	8.082990268705522E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998734394488308	WITHOUT_CLASSIFICATION	1.2656055116911646E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9992082645340666	WITHOUT_CLASSIFICATION	7.91735465933342E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.99127487693822	WITHOUT_CLASSIFICATION	0.008725123061779985	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999901568945292	WITHOUT_CLASSIFICATION	9.843105470905527E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9969767964077076	WITHOUT_CLASSIFICATION	0.0030232035922922677	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9994926605641504	WITHOUT_CLASSIFICATION	5.073394358494883E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9995245692594134	WITHOUT_CLASSIFICATION	4.754307405867217E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9994590208354464	WITHOUT_CLASSIFICATION	5.409791645536935E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992367181382857	WITHOUT_CLASSIFICATION	7.632818617141592E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997976670992185	WITHOUT_CLASSIFICATION	2.0233290078144574E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998164708856164	WITHOUT_CLASSIFICATION	1.835291143835758E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999798566087453	WITHOUT_CLASSIFICATION	2.0143391254635048E-5	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9975580895079883	WITHOUT_CLASSIFICATION	0.0024419104920116834	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9988356695396838	WITHOUT_CLASSIFICATION	0.0011643304603161627	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993569920595321	WITHOUT_CLASSIFICATION	6.430079404678616E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993569920595321	WITHOUT_CLASSIFICATION	6.430079404678616E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992558863784452	WITHOUT_CLASSIFICATION	7.44113621554762E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992367181382857	WITHOUT_CLASSIFICATION	7.632818617141592E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999850146844971	WITHOUT_CLASSIFICATION	1.4985315502787173E-5	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998851037251824	WITHOUT_CLASSIFICATION	1.1489627481761598E-4	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9992669896601374	WITHOUT_CLASSIFICATION	7.330103398626586E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9994396092192959	WITHOUT_CLASSIFICATION	5.603907807041028E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9986682683627468	WITHOUT_CLASSIFICATION	0.0013317316372532652	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996961971266117	WITHOUT_CLASSIFICATION	3.038028733882553E-4	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9992421966485214	WITHOUT_CLASSIFICATION	7.578033514785506E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9983885439486296	WITHOUT_CLASSIFICATION	0.0016114560513702696	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9978531193410016	WITHOUT_CLASSIFICATION	0.002146880658998358	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9978531193410016	WITHOUT_CLASSIFICATION	0.002146880658998358	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.998901007771848	WITHOUT_CLASSIFICATION	0.0010989922281519982	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998732662632437	WITHOUT_CLASSIFICATION	1.2673373675632584E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9983099345235553	WITHOUT_CLASSIFICATION	0.0016900654764446595	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9991212964032807	WITHOUT_CLASSIFICATION	8.787035967192425E-4	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9995183838008702	WITHOUT_CLASSIFICATION	4.8161619912967204E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999116281896184	WITHOUT_CLASSIFICATION	8.837181038159474E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9991227901704308	WITHOUT_CLASSIFICATION	8.772098295691358E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997787250901852	WITHOUT_CLASSIFICATION	2.2127490981484045E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9993446283601802	WITHOUT_CLASSIFICATION	6.553716398198681E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9993446283601802	WITHOUT_CLASSIFICATION	6.553716398198681E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9992211040103803	WITHOUT_CLASSIFICATION	7.788959896197467E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9994011479609932	WITHOUT_CLASSIFICATION	5.9885203900676E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9992211040103803	WITHOUT_CLASSIFICATION	7.788959896197467E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9996513690356651	WITHOUT_CLASSIFICATION	3.486309643348305E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9996519247043187	WITHOUT_CLASSIFICATION	3.4807529568134507E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9993569920595321	WITHOUT_CLASSIFICATION	6.430079404678616E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9992558863784452	WITHOUT_CLASSIFICATION	7.44113621554762E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992367181382857	WITHOUT_CLASSIFICATION	7.632818617141592E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9992367181382857	WITHOUT_CLASSIFICATION	7.632818617141592E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9993700496956016	WITHOUT_CLASSIFICATION	6.299503043984498E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9992276017196545	WITHOUT_CLASSIFICATION	7.723982803454492E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999533317343586	WITHOUT_CLASSIFICATION	4.6668265641367364E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994834853668125	WITHOUT_CLASSIFICATION	5.165146331875393E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994834853668125	WITHOUT_CLASSIFICATION	5.165146331875393E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9984269922088955	WITHOUT_CLASSIFICATION	0.0015730077911044742	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9996431397805083	WITHOUT_CLASSIFICATION	3.5686021949163057E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9994908133074268	WITHOUT_CLASSIFICATION	5.09186692573128E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9994435290641727	WITHOUT_CLASSIFICATION	5.56470935827329E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9996750777641157	WITHOUT_CLASSIFICATION	3.249222358843426E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.998212315588285	WITHOUT_CLASSIFICATION	0.0017876844117148754	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999308063452337	WITHOUT_CLASSIFICATION	6.919365476635532E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993688229360825	WITHOUT_CLASSIFICATION	6.31177063917523E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993688229360825	WITHOUT_CLASSIFICATION	6.31177063917523E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999160743085832	WITHOUT_CLASSIFICATION	8.392569141680862E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999160743085832	WITHOUT_CLASSIFICATION	8.392569141680862E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9985468838074699	WITHOUT_CLASSIFICATION	0.0014531161925300563	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9985468838074699	WITHOUT_CLASSIFICATION	0.0014531161925300563	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998285887815209	WITHOUT_CLASSIFICATION	0.001714112184791072	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998285887815209	WITHOUT_CLASSIFICATION	0.001714112184791072	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994834853668125	WITHOUT_CLASSIFICATION	5.165146331875393E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999308063452337	WITHOUT_CLASSIFICATION	6.919365476635532E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993688229360825	WITHOUT_CLASSIFICATION	6.31177063917523E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9993688229360825	WITHOUT_CLASSIFICATION	6.31177063917523E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.999160743085832	WITHOUT_CLASSIFICATION	8.392569141680862E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9985468838074699	WITHOUT_CLASSIFICATION	0.0014531161925300563	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9985468838074699	WITHOUT_CLASSIFICATION	0.0014531161925300563	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998285887815209	WITHOUT_CLASSIFICATION	0.001714112184791072	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9988104766136957	WITHOUT_CLASSIFICATION	0.0011895233863042688	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9994946276523498	WITHOUT_CLASSIFICATION	5.053723476501424E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9997602144304268	WITHOUT_CLASSIFICATION	2.3978556957323903E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997599977423169	WITHOUT_CLASSIFICATION	2.40002257683068E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9996569596953385	WITHOUT_CLASSIFICATION	3.430403046614985E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9993598710129005	WITHOUT_CLASSIFICATION	6.401289870996133E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999723157710736	WITHOUT_CLASSIFICATION	2.7684228926486882E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9844287680478282	WITHOUT_CLASSIFICATION	0.015571231952171966	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999814109926507	WITHOUT_CLASSIFICATION	1.8589007349307263E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.997917972877767	WITHOUT_CLASSIFICATION	0.0020820271222330385	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.99990074904579	WITHOUT_CLASSIFICATION	9.925095420996457E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998620337253683	WITHOUT_CLASSIFICATION	1.37966274631731E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995637692219422	WITHOUT_CLASSIFICATION	4.362307780577032E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9993598710129005	WITHOUT_CLASSIFICATION	6.401289870996133E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9993598710129005	WITHOUT_CLASSIFICATION	6.401289870996133E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9993598710129005	WITHOUT_CLASSIFICATION	6.401289870996133E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.987799789206232	WITHOUT_CLASSIFICATION	0.012200210793767912	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9994453389147657	WITHOUT_CLASSIFICATION	5.546610852342432E-4	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9994453389147657	WITHOUT_CLASSIFICATION	5.546610852342432E-4	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.997387196488431	WITHOUT_CLASSIFICATION	0.0026128035115690583	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9982933642971903	WITHOUT_CLASSIFICATION	0.0017066357028096327	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9981127334342008	WITHOUT_CLASSIFICATION	0.0018872665657990793	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988707166349997	WITHOUT_CLASSIFICATION	0.0011292833650002041	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988707166349997	WITHOUT_CLASSIFICATION	0.0011292833650002041	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9990169416182157	WITHOUT_CLASSIFICATION	9.83058381784196E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998803735405118	WITHOUT_CLASSIFICATION	1.1962645948811833E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998803735405118	WITHOUT_CLASSIFICATION	1.1962645948811833E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9986575582750123	WITHOUT_CLASSIFICATION	0.0013424417249876194	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9988814703090969	WITHOUT_CLASSIFICATION	0.0011185296909030596	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9983420219256895	WITHOUT_CLASSIFICATION	0.0016579780743104194	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9998129588579612	WITHOUT_CLASSIFICATION	1.8704114203881857E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9992704555570465	WITHOUT_CLASSIFICATION	7.295444429535671E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5093157294442827	DESIGN	0.49068427055571723	WITHOUT_CLASSIFICATION
ID	WITHOUT_CLASSIFICATION	0.9990961648454116	WITHOUT_CLASSIFICATION	9.038351545882652E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9998763159089192	WITHOUT_CLASSIFICATION	1.2368409108068286E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9993243278614022	WITHOUT_CLASSIFICATION	6.75672138597742E-4	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.998511403690562	WITHOUT_CLASSIFICATION	0.0014885963094379837	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9984408007500273	WITHOUT_CLASSIFICATION	0.001559199249972706	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9995808548538433	WITHOUT_CLASSIFICATION	4.1914514615671195E-4	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999761654631973	WITHOUT_CLASSIFICATION	2.3834536802736972E-5	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9995203095840534	WITHOUT_CLASSIFICATION	4.796904159466009E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9993633960667624	WITHOUT_CLASSIFICATION	6.366039332375727E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9992415606363046	WITHOUT_CLASSIFICATION	7.584393636954438E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9995522158592642	WITHOUT_CLASSIFICATION	4.477841407358048E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9995642759429391	WITHOUT_CLASSIFICATION	4.357240570608914E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9983420219256895	WITHOUT_CLASSIFICATION	0.0016579780743104194	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9994417737118692	WITHOUT_CLASSIFICATION	5.582262881308266E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9997774077661779	WITHOUT_CLASSIFICATION	2.2259223382229505E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9992787581612775	WITHOUT_CLASSIFICATION	7.21241838722417E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9992704555570465	WITHOUT_CLASSIFICATION	7.295444429535671E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9995642759429391	WITHOUT_CLASSIFICATION	4.357240570608914E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9994417737118692	WITHOUT_CLASSIFICATION	5.582262881308266E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9992787581612775	WITHOUT_CLASSIFICATION	7.21241838722417E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995470850548052	WITHOUT_CLASSIFICATION	4.5291494519486694E-4	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9992455426818918	WITHOUT_CLASSIFICATION	7.54457318108177E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9995470850548052	WITHOUT_CLASSIFICATION	4.5291494519486694E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9992421345673647	WITHOUT_CLASSIFICATION	7.578654326353904E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999642322815107	WITHOUT_CLASSIFICATION	3.5767718489373376E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998874395222451	WITHOUT_CLASSIFICATION	1.125604777549542E-4	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9962304477354893	WITHOUT_CLASSIFICATION	0.003769552264510741	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9995135964786597	WITHOUT_CLASSIFICATION	4.8640352134040135E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999978539286649	WITHOUT_CLASSIFICATION	2.1460713350205935E-6	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999610236251626	WITHOUT_CLASSIFICATION	3.8976374837522614E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998163506690817	WITHOUT_CLASSIFICATION	1.8364933091836452E-4	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999995726341796	WITHOUT_CLASSIFICATION	4.273658204693371E-7	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999610236251626	WITHOUT_CLASSIFICATION	3.8976374837522614E-5	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9994148885861033	WITHOUT_CLASSIFICATION	5.85111413896654E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998650481818426	WITHOUT_CLASSIFICATION	1.349518181573067E-4	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9995642759429391	WITHOUT_CLASSIFICATION	4.357240570608914E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9981889089414205	WITHOUT_CLASSIFICATION	0.0018110910585794314	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9997547026209783	WITHOUT_CLASSIFICATION	2.4529737902157303E-4	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9637967658997478	WITHOUT_CLASSIFICATION	0.03620323410025224	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9793187782312834	WITHOUT_CLASSIFICATION	0.020681221768716625	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9991211285322648	WITHOUT_CLASSIFICATION	8.788714677351914E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.999972471262825	WITHOUT_CLASSIFICATION	2.7528737174960063E-5	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999078320955613	WITHOUT_CLASSIFICATION	9.216790443869202E-5	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998030168701998	WITHOUT_CLASSIFICATION	1.96983129800232E-4	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9992586298800222	WITHOUT_CLASSIFICATION	7.413701199776943E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9994151891072313	WITHOUT_CLASSIFICATION	5.848108927687222E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9896608358985627	WITHOUT_CLASSIFICATION	0.010339164101437244	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995808548538433	WITHOUT_CLASSIFICATION	4.1914514615671195E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9994943025503635	WITHOUT_CLASSIFICATION	5.05697449636509E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9976187198492628	WITHOUT_CLASSIFICATION	0.002381280150737271	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9998695439945714	WITHOUT_CLASSIFICATION	1.304560054286008E-4	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9997377907284852	WITHOUT_CLASSIFICATION	2.6220927151476717E-4	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9997452301539471	WITHOUT_CLASSIFICATION	2.547698460528968E-4	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.999360641474356	WITHOUT_CLASSIFICATION	6.393585256440729E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.999997868762918	WITHOUT_CLASSIFICATION	2.1312370820758667E-6	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9998898090179289	WITHOUT_CLASSIFICATION	1.1019098207112116E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6200024698868755	DESIGN	0.3799975301131245	WITHOUT_CLASSIFICATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996741345656583	WITHOUT_CLASSIFICATION	3.258654343416622E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998027648374899	WITHOUT_CLASSIFICATION	1.9723516251012217E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998027648374899	WITHOUT_CLASSIFICATION	1.9723516251012217E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997921358041698	WITHOUT_CLASSIFICATION	2.078641958301405E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999313487197996	WITHOUT_CLASSIFICATION	6.865128020036082E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.995963826425996	WITHOUT_CLASSIFICATION	0.004036173574003919	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9991220893061412	WITHOUT_CLASSIFICATION	8.779106938587009E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9994714675594145	WITHOUT_CLASSIFICATION	5.285324405854118E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9968947852465492	WITHOUT_CLASSIFICATION	0.0031052147534508653	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998363624376916	WITHOUT_CLASSIFICATION	1.6363756230839153E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999995741139135	WITHOUT_CLASSIFICATION	4.258860864406128E-7	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9989660775945811	WITHOUT_CLASSIFICATION	0.0010339224054189216	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9988927730724099	WITHOUT_CLASSIFICATION	0.0011072269275900551	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9995825354527063	WITHOUT_CLASSIFICATION	4.1746454729380217E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999716553770979	WITHOUT_CLASSIFICATION	2.8344622902060134E-5	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9936191096402208	WITHOUT_CLASSIFICATION	0.006380890359779186	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9778922330395587	WITHOUT_CLASSIFICATION	0.02210776696044122	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9953951532094856	WITHOUT_CLASSIFICATION	0.004604846790514465	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9989771398238834	WITHOUT_CLASSIFICATION	0.0010228601761165686	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999317541607929	WITHOUT_CLASSIFICATION	6.824583920698623E-5	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9994888881480211	WITHOUT_CLASSIFICATION	5.111118519789035E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9634437624436537	WITHOUT_CLASSIFICATION	0.036556237556346245	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9994179153408183	WITHOUT_CLASSIFICATION	5.820846591816787E-4	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9997635106086671	WITHOUT_CLASSIFICATION	2.3648939133297226E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9012731161808738	WITHOUT_CLASSIFICATION	0.09872688381912617	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9989771398238834	WITHOUT_CLASSIFICATION	0.0010228601761165686	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9981913944577105	WITHOUT_CLASSIFICATION	0.0018086055422894586	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997798821121793	WITHOUT_CLASSIFICATION	2.2011788782078136E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9997758090671349	WITHOUT_CLASSIFICATION	2.241909328650053E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999707785204984	WITHOUT_CLASSIFICATION	2.9221479501537895E-5	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9968855711352921	WITHOUT_CLASSIFICATION	0.0031144288647080485	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9994888881480211	WITHOUT_CLASSIFICATION	5.111118519789035E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9966688157899966	WITHOUT_CLASSIFICATION	0.00333118421000356	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997730465494155	WITHOUT_CLASSIFICATION	2.2695345058447498E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9992570905284317	WITHOUT_CLASSIFICATION	7.42909471568385E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9994963213623997	WITHOUT_CLASSIFICATION	5.036786376003106E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9994963213623997	WITHOUT_CLASSIFICATION	5.036786376003106E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9994422780354593	WITHOUT_CLASSIFICATION	5.577219645407438E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9997303826268854	WITHOUT_CLASSIFICATION	2.696173731146127E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9995393466973663	WITHOUT_CLASSIFICATION	4.606533026336399E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9995393466973663	WITHOUT_CLASSIFICATION	4.606533026336399E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.6200024698868755	DESIGN	0.3799975301131245	WITHOUT_CLASSIFICATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9917802058109587	WITHOUT_CLASSIFICATION	0.008219794189041249	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995177439349784	WITHOUT_CLASSIFICATION	4.822560650215699E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994547252303188	WITHOUT_CLASSIFICATION	5.45274769681166E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992570669863448	WITHOUT_CLASSIFICATION	7.429330136552112E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995177439349784	WITHOUT_CLASSIFICATION	4.822560650215699E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994547252303188	WITHOUT_CLASSIFICATION	5.45274769681166E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9972528192401402	WITHOUT_CLASSIFICATION	0.002747180759859744	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9976725370436783	WITHOUT_CLASSIFICATION	0.0023274629563217624	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9934488904621734	WITHOUT_CLASSIFICATION	0.006551109537826575	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9994604517645865	WITHOUT_CLASSIFICATION	5.395482354133562E-4	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9859391720465652	WITHOUT_CLASSIFICATION	0.014060827953434855	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9328566626488285	WITHOUT_CLASSIFICATION	0.06714333735117152	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996793204580133	WITHOUT_CLASSIFICATION	3.2067954198667113E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996793204580133	WITHOUT_CLASSIFICATION	3.2067954198667113E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9828885878262523	WITHOUT_CLASSIFICATION	0.01711141217374774	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999980705032964	WITHOUT_CLASSIFICATION	1.929496703662405E-6	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9986162280033923	WITHOUT_CLASSIFICATION	0.00138377199660763	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9994088852462528	WITHOUT_CLASSIFICATION	5.911147537471157E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9997392958347321	WITHOUT_CLASSIFICATION	2.6070416526788743E-4	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9984284725687196	WITHOUT_CLASSIFICATION	0.001571527431280394	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992570669863448	WITHOUT_CLASSIFICATION	7.429330136552112E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9984284725687196	WITHOUT_CLASSIFICATION	0.001571527431280394	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994702346008363	WITHOUT_CLASSIFICATION	5.29765399163685E-4	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9994702346008363	WITHOUT_CLASSIFICATION	5.29765399163685E-4	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9996187866551569	WITHOUT_CLASSIFICATION	3.812133448431641E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9972528192401402	WITHOUT_CLASSIFICATION	0.002747180759859744	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9972871999724447	WITHOUT_CLASSIFICATION	0.0027128000275553274	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.789245591130645	DESIGN	0.210754408869355	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5646738316128519	WITHOUT_CLASSIFICATION	0.43532616838714805	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997832370352562	WITHOUT_CLASSIFICATION	2.167629647437775E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8350313365176709	WITHOUT_CLASSIFICATION	0.16496866348232905	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9972528192401402	WITHOUT_CLASSIFICATION	0.002747180759859744	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997832370352562	WITHOUT_CLASSIFICATION	2.167629647437775E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8350313365176709	WITHOUT_CLASSIFICATION	0.16496866348232905	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999925754452724	WITHOUT_CLASSIFICATION	7.424554727597316E-5	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998452347984003	WITHOUT_CLASSIFICATION	1.5476520159983853E-4	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999568546752756	WITHOUT_CLASSIFICATION	4.3145324724339426E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9972528192401402	WITHOUT_CLASSIFICATION	0.002747180759859744	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9972528192401402	WITHOUT_CLASSIFICATION	0.002747180759859744	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9986442782829078	WITHOUT_CLASSIFICATION	0.001355721717092239	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9992226406661298	WITHOUT_CLASSIFICATION	7.773593338702169E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9998514332018336	WITHOUT_CLASSIFICATION	1.4856679816651225E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997845175445592	WITHOUT_CLASSIFICATION	2.154824554408478E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999400902804907	WITHOUT_CLASSIFICATION	5.990971950933897E-5	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.999987982524837	WITHOUT_CLASSIFICATION	1.2017475163118662E-5	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999848427372068	WITHOUT_CLASSIFICATION	1.5157262793185105E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999226074972073	WITHOUT_CLASSIFICATION	7.739250279269231E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997391965931364	WITHOUT_CLASSIFICATION	2.608034068636114E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9993538471071354	WITHOUT_CLASSIFICATION	6.461528928646239E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9400035272482374	WITHOUT_CLASSIFICATION	0.0599964727517625	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9669683686341729	WITHOUT_CLASSIFICATION	0.03303163136582705	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999664769410898	WITHOUT_CLASSIFICATION	3.352305891019982E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9949308336683459	WITHOUT_CLASSIFICATION	0.005069166331654047	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994404557405858	WITHOUT_CLASSIFICATION	5.595442594142011E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999935517954094	WITHOUT_CLASSIFICATION	6.448204590579254E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997845175445592	WITHOUT_CLASSIFICATION	2.154824554408478E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9942883057978658	WITHOUT_CLASSIFICATION	0.005711694202134285	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9997552311830116	WITHOUT_CLASSIFICATION	2.4476881698846145E-4	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998099279385232	WITHOUT_CLASSIFICATION	1.9007206147679938E-4	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999504841729401	WITHOUT_CLASSIFICATION	4.951582706006881E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995062250117733	WITHOUT_CLASSIFICATION	4.937749882266718E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995062250117733	WITHOUT_CLASSIFICATION	4.937749882266718E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997845175445592	WITHOUT_CLASSIFICATION	2.154824554408478E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9994120895943783	WITHOUT_CLASSIFICATION	5.879104056217681E-4	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9946829505770515	WITHOUT_CLASSIFICATION	0.005317049422948456	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9855043346004334	WITHOUT_CLASSIFICATION	0.014495665399566544	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9998801613363782	WITHOUT_CLASSIFICATION	1.1983866362171044E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992598202776681	WITHOUT_CLASSIFICATION	7.40179722331873E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.999937220628406	WITHOUT_CLASSIFICATION	6.27793715940721E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9991708905262042	WITHOUT_CLASSIFICATION	8.2910947379563E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9913364198615574	WITHOUT_CLASSIFICATION	0.008663580138442678	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999642601285893	WITHOUT_CLASSIFICATION	3.5739871410669024E-5	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999754357662977	WITHOUT_CLASSIFICATION	2.4564233702369977E-5	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9802112556750358	WITHOUT_CLASSIFICATION	0.019788744324964202	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9995828119933082	WITHOUT_CLASSIFICATION	4.1718800669176274E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9999057734703058	WITHOUT_CLASSIFICATION	9.422652969420576E-5	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999109446999456	WITHOUT_CLASSIFICATION	8.905530005445597E-5	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996256026904138	WITHOUT_CLASSIFICATION	3.7439730958628315E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9987316485029653	WITHOUT_CLASSIFICATION	0.0012683514970346756	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999680964939979	WITHOUT_CLASSIFICATION	3.1903506002131935E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.986505222163417	WITHOUT_CLASSIFICATION	0.013494777836583174	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9984613055416447	WITHOUT_CLASSIFICATION	0.0015386944583553844	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9998703407335948	WITHOUT_CLASSIFICATION	1.296592664051612E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9968734262129343	WITHOUT_CLASSIFICATION	0.0031265737870656684	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984684356613928	WITHOUT_CLASSIFICATION	0.0015315643386071217	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9959667612800008	WITHOUT_CLASSIFICATION	0.004033238719999125	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999371084337521	WITHOUT_CLASSIFICATION	6.289156624790022E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997023284847267	WITHOUT_CLASSIFICATION	2.976715152733045E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987186459154682	WITHOUT_CLASSIFICATION	0.0012813540845317633	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9960351416132519	WITHOUT_CLASSIFICATION	0.003964858386748146	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.9750878659938048	WITHOUT_CLASSIFICATION	0.024912134006195158	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994306912022667	WITHOUT_CLASSIFICATION	5.693087977333181E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.989207713332747	WITHOUT_CLASSIFICATION	0.010792286667252923	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993280694262977	WITHOUT_CLASSIFICATION	0.0067193057370230295	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996602700496878	WITHOUT_CLASSIFICATION	3.397299503121767E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986105959477188	WITHOUT_CLASSIFICATION	0.0013894040522811491	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988555852327169	WITHOUT_CLASSIFICATION	0.0011444147672831854	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.999900912238595	WITHOUT_CLASSIFICATION	9.908776140494668E-5	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993727459260328	WITHOUT_CLASSIFICATION	6.272540739671583E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.998593323809202	WITHOUT_CLASSIFICATION	0.0014066761907979926	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9992762240281137	WITHOUT_CLASSIFICATION	7.237759718863858E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9815000735271888	WITHOUT_CLASSIFICATION	0.0184999264728112	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984422936363921	WITHOUT_CLASSIFICATION	0.0015577063636078995	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9997789866797316	WITHOUT_CLASSIFICATION	2.2101332026829078E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.999470529211938	WITHOUT_CLASSIFICATION	5.294707880619348E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999996816292775	WITHOUT_CLASSIFICATION	3.1837072245624623E-7	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9995279899593066	WITHOUT_CLASSIFICATION	4.7201004069337947E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9995270497942982	WITHOUT_CLASSIFICATION	4.7295020570186145E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9991220649943986	WITHOUT_CLASSIFICATION	8.779350056014589E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9984324598380613	WITHOUT_CLASSIFICATION	0.0015675401619386793	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9992301170317862	WITHOUT_CLASSIFICATION	7.698829682137164E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9935660660210416	WITHOUT_CLASSIFICATION	0.00643393397895838	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9964790980750334	WITHOUT_CLASSIFICATION	0.0035209019249665854	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9988714656389598	WITHOUT_CLASSIFICATION	0.0011285343610402667	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9973424609222331	WITHOUT_CLASSIFICATION	0.0026575390777669114	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993942826476083	WITHOUT_CLASSIFICATION	6.05717352391686E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990801819718855	WITHOUT_CLASSIFICATION	9.198180281144564E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993997192286285	WITHOUT_CLASSIFICATION	6.002807713715145E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994558006324861	WITHOUT_CLASSIFICATION	5.441993675139473E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9978860100084161	WITHOUT_CLASSIFICATION	0.0021139899915838508	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999960152185174	WITHOUT_CLASSIFICATION	3.984781482489652E-6	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9993075041881828	WITHOUT_CLASSIFICATION	6.924958118171071E-4	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999991859192294	WITHOUT_CLASSIFICATION	8.140807706154286E-7	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994515536916496	WITHOUT_CLASSIFICATION	5.484463083502688E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9994071078530639	WITHOUT_CLASSIFICATION	5.928921469361216E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.99954107444209	WITHOUT_CLASSIFICATION	4.5892555790997993E-4	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9990382483138375	WITHOUT_CLASSIFICATION	9.617516861625352E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9607852455640287	WITHOUT_CLASSIFICATION	0.03921475443597142	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9247189691190877	WITHOUT_CLASSIFICATION	0.0752810308809123	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9984148662570004	WITHOUT_CLASSIFICATION	0.001585133742999729	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9989586991690081	WITHOUT_CLASSIFICATION	0.0010413008309918942	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9947842474067312	WITHOUT_CLASSIFICATION	0.00521575259326878	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984422936363921	WITHOUT_CLASSIFICATION	0.0015577063636078995	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9877446236581767	WITHOUT_CLASSIFICATION	0.012255376341823195	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999581520449373	WITHOUT_CLASSIFICATION	4.1847955062663E-5	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9995123744568437	WITHOUT_CLASSIFICATION	4.876255431562706E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993146691878093	WITHOUT_CLASSIFICATION	6.853308121906836E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9979966390181807	WITHOUT_CLASSIFICATION	0.002003360981819337	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999096657436257	WITHOUT_CLASSIFICATION	9.033425637424854E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9978860100084161	WITHOUT_CLASSIFICATION	0.0021139899915838508	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9987377596232841	WITHOUT_CLASSIFICATION	0.0012622403767158362	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9994640166997049	WITHOUT_CLASSIFICATION	5.359833002951777E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9994005330501315	WITHOUT_CLASSIFICATION	5.994669498683454E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999128615833534	WITHOUT_CLASSIFICATION	8.713841664660955E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9987093720186517	WITHOUT_CLASSIFICATION	0.001290627981348194	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997700257827719	WITHOUT_CLASSIFICATION	2.2997421722822584E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9868424706883577	WITHOUT_CLASSIFICATION	0.013157529311642274	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9988935143940002	WITHOUT_CLASSIFICATION	0.0011064856059998145	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9995793232936975	WITHOUT_CLASSIFICATION	4.206767063024967E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9985533433862644	WITHOUT_CLASSIFICATION	0.0014466566137355675	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9998369395520597	WITHOUT_CLASSIFICATION	1.6306044794027767E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993223407849046	WITHOUT_CLASSIFICATION	6.776592150954325E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9978702636229309	WITHOUT_CLASSIFICATION	0.002129736377069167	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9990828835183208	WITHOUT_CLASSIFICATION	9.171164816793441E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.999454577018453	WITHOUT_CLASSIFICATION	5.454229815470414E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999360443749599	WITHOUT_CLASSIFICATION	6.395562504009643E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999768606651641	WITHOUT_CLASSIFICATION	2.3139334835901073E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9985524890695568	WITHOUT_CLASSIFICATION	0.001447510930443126	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9994978499700092	WITHOUT_CLASSIFICATION	5.021500299907107E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9839144313135368	WITHOUT_CLASSIFICATION	0.01608556868646321	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9992164216790331	WITHOUT_CLASSIFICATION	7.835783209669001E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9958254665442386	WITHOUT_CLASSIFICATION	0.004174533455761367	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.999933859214501	WITHOUT_CLASSIFICATION	6.614078549905644E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.6214060493198553	WITHOUT_CLASSIFICATION	0.37859395068014456	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997149855496754	WITHOUT_CLASSIFICATION	2.850144503245877E-4	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999674497297286	WITHOUT_CLASSIFICATION	3.255027027140123E-4	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9981321057631533	WITHOUT_CLASSIFICATION	0.0018678942368467967	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984422936363921	WITHOUT_CLASSIFICATION	0.0015577063636078995	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.994942918533064	WITHOUT_CLASSIFICATION	0.00505708146693601	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999739324267887	WITHOUT_CLASSIFICATION	2.606757321134069E-5	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9759567530598153	WITHOUT_CLASSIFICATION	0.024043246940184716	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999457994534966	WITHOUT_CLASSIFICATION	5.420054650341207E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994673330914905	WITHOUT_CLASSIFICATION	5.326669085093921E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994790798439545	WITHOUT_CLASSIFICATION	5.20920156045604E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984422936363921	WITHOUT_CLASSIFICATION	0.0015577063636078995	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995901323616652	WITHOUT_CLASSIFICATION	4.09867638334769E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.999768606651641	WITHOUT_CLASSIFICATION	2.3139334835901073E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.994186736204536	WITHOUT_CLASSIFICATION	0.005813263795464064	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999360443749599	WITHOUT_CLASSIFICATION	6.395562504009643E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999997005309251	WITHOUT_CLASSIFICATION	2.994690748090106E-7	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9878847319168687	WITHOUT_CLASSIFICATION	0.012115268083131295	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999913987061869	WITHOUT_CLASSIFICATION	8.601293813142548E-6	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9994005330501315	WITHOUT_CLASSIFICATION	5.994669498683454E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.999128615833534	WITHOUT_CLASSIFICATION	8.713841664660955E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9987093720186517	WITHOUT_CLASSIFICATION	0.001290627981348194	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999076538630366	WITHOUT_CLASSIFICATION	9.234613696341949E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9997667837479035	WITHOUT_CLASSIFICATION	2.3321625209650847E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999102899673683	WITHOUT_CLASSIFICATION	8.97100326317139E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9999360443749599	WITHOUT_CLASSIFICATION	6.395562504009643E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999997005309251	WITHOUT_CLASSIFICATION	2.994690748090106E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9984422936363921	WITHOUT_CLASSIFICATION	0.0015577063636078995	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9997700257827719	WITHOUT_CLASSIFICATION	2.2997421722822584E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9868424706883577	WITHOUT_CLASSIFICATION	0.013157529311642274	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9988935143940002	WITHOUT_CLASSIFICATION	0.0011064856059998145	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989558373273215	WITHOUT_CLASSIFICATION	0.0010441626726784726	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997949122429802	WITHOUT_CLASSIFICATION	2.0508775701978666E-4	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999239506529408	WITHOUT_CLASSIFICATION	7.604934705918623E-5	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9976339822467608	WITHOUT_CLASSIFICATION	0.0023660177532391774	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.812752760951541	DESIGN	0.18724723904845894	WITHOUT_CLASSIFICATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9974726879034156	WITHOUT_CLASSIFICATION	0.002527312096584362	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9906903318201271	WITHOUT_CLASSIFICATION	0.00930966817987293	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9970902881935323	WITHOUT_CLASSIFICATION	0.002909711806467661	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9961102588740467	WITHOUT_CLASSIFICATION	0.003889741125953234	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987186459154682	WITHOUT_CLASSIFICATION	0.0012813540845317633	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.989207713332747	WITHOUT_CLASSIFICATION	0.010792286667252923	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9981777883749612	WITHOUT_CLASSIFICATION	0.0018222116250387868	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9967872672685938	WITHOUT_CLASSIFICATION	0.0032127327314063108	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998705350586848	WITHOUT_CLASSIFICATION	0.0012946494131521424	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9938880019812257	WITHOUT_CLASSIFICATION	0.006111998018774253	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993280694262977	WITHOUT_CLASSIFICATION	0.0067193057370230295	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984997429003715	WITHOUT_CLASSIFICATION	0.0015002570996285518	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9607852455640287	WITHOUT_CLASSIFICATION	0.03921475443597142	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9934169769609656	WITHOUT_CLASSIFICATION	0.006583023039034364	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9961888901358746	WITHOUT_CLASSIFICATION	0.0038111098641253898	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999604324603435	WITHOUT_CLASSIFICATION	3.956753965649087E-5	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9983916493704433	WITHOUT_CLASSIFICATION	0.0016083506295566296	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9992261475852686	WITHOUT_CLASSIFICATION	7.738524147314004E-4	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9995470850548052	WITHOUT_CLASSIFICATION	4.5291494519486694E-4	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998478843637068	WITHOUT_CLASSIFICATION	1.52115636293192E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9913364198615574	WITHOUT_CLASSIFICATION	0.008663580138442678	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.99910926739792	WITHOUT_CLASSIFICATION	8.907326020798921E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9469692793381104	WITHOUT_CLASSIFICATION	0.053030720661889644	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9993003816537614	WITHOUT_CLASSIFICATION	6.996183462385801E-4	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9993091831248885	WITHOUT_CLASSIFICATION	6.90816875111518E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998861247824569	WITHOUT_CLASSIFICATION	1.1387521754308717E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9995922464658552	WITHOUT_CLASSIFICATION	4.0775353414477665E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995992946850957	WITHOUT_CLASSIFICATION	4.007053149042594E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994370199501861	WITHOUT_CLASSIFICATION	5.629800498139749E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999097044839644	WITHOUT_CLASSIFICATION	9.029551603558801E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9958809391820436	WITHOUT_CLASSIFICATION	0.004119060817956425	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998553360551677	WITHOUT_CLASSIFICATION	1.446639448321558E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9995742168656551	WITHOUT_CLASSIFICATION	4.2578313434499596E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997654543482325	WITHOUT_CLASSIFICATION	2.3454565176762385E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999200755166893	WITHOUT_CLASSIFICATION	7.992448331070683E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997711255682792	WITHOUT_CLASSIFICATION	2.2887443172095535E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9869899315644217	WITHOUT_CLASSIFICATION	0.013010068435578226	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9958515428862096	WITHOUT_CLASSIFICATION	0.004148457113790393	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999200755166893	WITHOUT_CLASSIFICATION	7.992448331070683E-4	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9987746105459503	WITHOUT_CLASSIFICATION	0.0012253894540496738	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997122889737435	WITHOUT_CLASSIFICATION	2.8771102625644034E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981591066140963	WITHOUT_CLASSIFICATION	0.0018408933859036915	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9993898798902994	WITHOUT_CLASSIFICATION	6.101201097006347E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9492899295765607	WITHOUT_CLASSIFICATION	0.05071007042343941	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9980250623710024	WITHOUT_CLASSIFICATION	0.0019749376289976256	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999384755725785	WITHOUT_CLASSIFICATION	6.152442742145561E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999003985588656	WITHOUT_CLASSIFICATION	9.960144113440174E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999003985588656	WITHOUT_CLASSIFICATION	9.960144113440174E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998374537773382	WITHOUT_CLASSIFICATION	1.62546222661683E-4	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9985020848246708	WITHOUT_CLASSIFICATION	0.0014979151753291102	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9993719748580411	WITHOUT_CLASSIFICATION	6.280251419589341E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999518497433901	WITHOUT_CLASSIFICATION	4.815025660976105E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996325233519858	WITHOUT_CLASSIFICATION	3.6747664801423775E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996952553788891	WITHOUT_CLASSIFICATION	3.0474462111080186E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.998870832403982	WITHOUT_CLASSIFICATION	0.001129167596018058	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9996544045719978	WITHOUT_CLASSIFICATION	3.455954280021234E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9978211751564698	WITHOUT_CLASSIFICATION	0.0021788248435301695	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999512506079232	WITHOUT_CLASSIFICATION	4.8749392076672815E-5	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999734634526368	WITHOUT_CLASSIFICATION	2.653654736309363E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998432259566459	WITHOUT_CLASSIFICATION	1.5677404335414952E-4	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9996094992222667	WITHOUT_CLASSIFICATION	3.905007777333287E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9947094377427895	WITHOUT_CLASSIFICATION	0.005290562257210412	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998315227866127	WITHOUT_CLASSIFICATION	1.684772133872686E-4	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9793570758639122	WITHOUT_CLASSIFICATION	0.020642924136087815	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9998023290914172	WITHOUT_CLASSIFICATION	1.9767090858295258E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9982279179954241	WITHOUT_CLASSIFICATION	0.0017720820045759058	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9967751155253435	WITHOUT_CLASSIFICATION	0.003224884474656526	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9993795065390547	WITHOUT_CLASSIFICATION	6.20493460945305E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9988772318344071	WITHOUT_CLASSIFICATION	0.0011227681655928742	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9995369809044551	WITHOUT_CLASSIFICATION	4.6301909554497504E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999925010905581	WITHOUT_CLASSIFICATION	7.498909441897256E-5	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998026090048903	WITHOUT_CLASSIFICATION	1.9739099510967135E-4	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998379003808968	WITHOUT_CLASSIFICATION	1.6209961910312024E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995707391924045	WITHOUT_CLASSIFICATION	4.29260807595613E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9997886179762179	WITHOUT_CLASSIFICATION	2.113820237821748E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9994491074881988	WITHOUT_CLASSIFICATION	5.508925118012456E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9722740563680102	WITHOUT_CLASSIFICATION	0.027725943631989762	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9995257739830409	WITHOUT_CLASSIFICATION	4.7422601695920147E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9997762817772443	WITHOUT_CLASSIFICATION	2.2371822275563493E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9997167108153414	WITHOUT_CLASSIFICATION	2.832891846584968E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998904278856107	WITHOUT_CLASSIFICATION	1.0957211438926558E-4	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9991699365945048	WITHOUT_CLASSIFICATION	8.300634054950901E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999838649133965	WITHOUT_CLASSIFICATION	1.613508660341204E-5	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9996817311757736	WITHOUT_CLASSIFICATION	3.1826882422636123E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9910284907659132	WITHOUT_CLASSIFICATION	0.008971509234086902	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9958467027481139	WITHOUT_CLASSIFICATION	0.004153297251886115	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.8446265745074162	WITHOUT_CLASSIFICATION	0.1553734254925838	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999898113074479	WITHOUT_CLASSIFICATION	1.0188692552008298E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9935467913789704	WITHOUT_CLASSIFICATION	0.006453208621029612	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9998369395520597	WITHOUT_CLASSIFICATION	1.6306044794027767E-4	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9998369395520597	WITHOUT_CLASSIFICATION	1.6306044794027767E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9974246412449268	WITHOUT_CLASSIFICATION	0.0025753587550731293	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9937256045879836	WITHOUT_CLASSIFICATION	0.006274395412016256	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9995730926141477	WITHOUT_CLASSIFICATION	4.2690738585216464E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999869761685671	WITHOUT_CLASSIFICATION	1.3023831432879388E-5	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9997611472072506	WITHOUT_CLASSIFICATION	2.3885279274933475E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9983390405959636	WITHOUT_CLASSIFICATION	0.0016609594040363671	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.99945820711787	WITHOUT_CLASSIFICATION	5.41792882129941E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9983786221591935	WITHOUT_CLASSIFICATION	0.0016213778408064594	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999137654394455	WITHOUT_CLASSIFICATION	8.623456055442562E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9926645452198389	WITHOUT_CLASSIFICATION	0.007335454780161072	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999854941530899	WITHOUT_CLASSIFICATION	1.4505846910104424E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9269107207911852	WITHOUT_CLASSIFICATION	0.07308927920881476	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997079615418614	WITHOUT_CLASSIFICATION	2.9203845813872287E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9993589366165647	WITHOUT_CLASSIFICATION	6.410633834352097E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9991876944389692	WITHOUT_CLASSIFICATION	8.123055610309037E-4	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9968142111835814	WITHOUT_CLASSIFICATION	0.0031857888164187067	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9995187884671263	WITHOUT_CLASSIFICATION	4.812115328736993E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.998663538497589	WITHOUT_CLASSIFICATION	0.00133646150241091	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9978888023236521	WITHOUT_CLASSIFICATION	0.0021111976763479273	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9995083135340835	WITHOUT_CLASSIFICATION	4.91686465916468E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9903066209436209	WITHOUT_CLASSIFICATION	0.00969337905637905	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999542763118339	WITHOUT_CLASSIFICATION	4.572368816606866E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9995083135340835	WITHOUT_CLASSIFICATION	4.91686465916468E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.999850003869616	WITHOUT_CLASSIFICATION	1.4999613038400424E-4	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999723348379365	WITHOUT_CLASSIFICATION	2.76651620635501E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9990473546582833	WITHOUT_CLASSIFICATION	9.526453417166847E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9929762249304419	WITHOUT_CLASSIFICATION	0.007023775069558091	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9980749135068171	WITHOUT_CLASSIFICATION	0.0019250864931828452	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999401759312442	WITHOUT_CLASSIFICATION	5.9824068755690155E-5	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9995272224288901	WITHOUT_CLASSIFICATION	4.7277757110987924E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9973716841641466	WITHOUT_CLASSIFICATION	0.002628315835853448	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9944053219830206	WITHOUT_CLASSIFICATION	0.005594678016979485	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999064706743349	WITHOUT_CLASSIFICATION	9.352932566503879E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999389995993337	WITHOUT_CLASSIFICATION	6.100040066615759E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9951691066943443	WITHOUT_CLASSIFICATION	0.004830893305655732	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9992762212707578	WITHOUT_CLASSIFICATION	7.237787292422486E-4	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9935238234366808	WITHOUT_CLASSIFICATION	0.006476176563319161	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.9158526486967278	WITHOUT_CLASSIFICATION	0.08414735130327224	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992819747379555	WITHOUT_CLASSIFICATION	7.180252620444576E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9998568386062283	WITHOUT_CLASSIFICATION	1.4316139377167238E-4	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9997234846355231	WITHOUT_CLASSIFICATION	2.765153644769179E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9992672464463925	WITHOUT_CLASSIFICATION	7.327535536075237E-4	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9964930418789694	WITHOUT_CLASSIFICATION	0.003506958121030721	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999266274637024	WITHOUT_CLASSIFICATION	7.337253629762189E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9986490158744175	WITHOUT_CLASSIFICATION	0.001350984125582529	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9958470170992771	WITHOUT_CLASSIFICATION	0.004152982900722819	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9982663819188151	WITHOUT_CLASSIFICATION	0.0017336180811848663	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9998517936434822	WITHOUT_CLASSIFICATION	1.4820635651781395E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999835381697338	WITHOUT_CLASSIFICATION	1.6461830266154253E-5	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997782969838628	WITHOUT_CLASSIFICATION	2.2170301613725626E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9939123508776837	WITHOUT_CLASSIFICATION	0.006087649122316314	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9992405325630165	WITHOUT_CLASSIFICATION	7.594674369835045E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9995922464658552	WITHOUT_CLASSIFICATION	4.0775353414477665E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9998571614610642	WITHOUT_CLASSIFICATION	1.4283853893575784E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997250666445306	WITHOUT_CLASSIFICATION	2.7493335546935853E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9997403306697139	WITHOUT_CLASSIFICATION	2.596693302861195E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999606295319861	WITHOUT_CLASSIFICATION	3.93704680139381E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998688792360684	WITHOUT_CLASSIFICATION	1.311207639315411E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9996889653976203	WITHOUT_CLASSIFICATION	3.110346023796848E-4	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9584199129308043	WITHOUT_CLASSIFICATION	0.041580087069195755	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9997943687176762	WITHOUT_CLASSIFICATION	2.056312823236587E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9892824716300996	WITHOUT_CLASSIFICATION	0.010717528369900423	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.96269096076642	WITHOUT_CLASSIFICATION	0.03730903923357994	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999527276388259	WITHOUT_CLASSIFICATION	4.727236117402676E-5	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9901751086768663	WITHOUT_CLASSIFICATION	0.009824891323133649	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9904570707872407	WITHOUT_CLASSIFICATION	0.00954292921275934	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999688420192923	WITHOUT_CLASSIFICATION	3.115798070766668E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999763320083643	WITHOUT_CLASSIFICATION	2.366799163564419E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9997514312766212	WITHOUT_CLASSIFICATION	2.4856872337873957E-4	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999577024206593	WITHOUT_CLASSIFICATION	4.229757934068368E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9972227676862649	WITHOUT_CLASSIFICATION	0.002777232313735	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9977602367793278	WITHOUT_CLASSIFICATION	0.0022397632206722787	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999348427634168	WITHOUT_CLASSIFICATION	6.515723658321984E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9991043287487278	WITHOUT_CLASSIFICATION	8.956712512723628E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9955776722546511	WITHOUT_CLASSIFICATION	0.0044223277453489356	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999126081149012	WITHOUT_CLASSIFICATION	8.739188509869216E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9836374273720412	WITHOUT_CLASSIFICATION	0.016362572627958726	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9994050871335974	WITHOUT_CLASSIFICATION	5.949128664026631E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9928151224526581	WITHOUT_CLASSIFICATION	0.00718487754734195	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9997029471390652	WITHOUT_CLASSIFICATION	2.970528609348715E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9684999175314394	WITHOUT_CLASSIFICATION	0.03150008246856055	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9948634935885572	WITHOUT_CLASSIFICATION	0.005136506411442854	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991798074724907	WITHOUT_CLASSIFICATION	8.201925275092958E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995867431425564	WITHOUT_CLASSIFICATION	4.132568574437301E-4	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995979622021008	WITHOUT_CLASSIFICATION	4.0203779789919284E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9545770806600624	WITHOUT_CLASSIFICATION	0.04542291933993751	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9997503560581985	WITHOUT_CLASSIFICATION	2.49643941801527E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999682776875194	WITHOUT_CLASSIFICATION	3.1722312480578345E-5	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.998808371688145	WITHOUT_CLASSIFICATION	0.0011916283118549582	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9989277878673695	WITHOUT_CLASSIFICATION	0.0010722121326304545	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980815723021389	WITHOUT_CLASSIFICATION	0.0019184276978610722	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9989277878673695	WITHOUT_CLASSIFICATION	0.0010722121326304545	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994484134070339	WITHOUT_CLASSIFICATION	5.515865929660421E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999212804916153	WITHOUT_CLASSIFICATION	7.871950838460141E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9983236288467837	WITHOUT_CLASSIFICATION	0.00167637115321635	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.974526452447452	WITHOUT_CLASSIFICATION	0.025473547552547982	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9854312012816243	WITHOUT_CLASSIFICATION	0.014568798718375766	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9985210757522888	WITHOUT_CLASSIFICATION	0.0014789242477112434	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9993840713357488	WITHOUT_CLASSIFICATION	6.15928664251255E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9990859980233826	WITHOUT_CLASSIFICATION	9.140019766175341E-4	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999878069584481	WITHOUT_CLASSIFICATION	1.2193041551851578E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9866262882954508	WITHOUT_CLASSIFICATION	0.013373711704549103	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9947177656776423	WITHOUT_CLASSIFICATION	0.005282234322357637	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9706449699889945	WITHOUT_CLASSIFICATION	0.029355030011005402	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996800231544979	WITHOUT_CLASSIFICATION	3.1997684550212163E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.8057178461990622	WITHOUT_CLASSIFICATION	0.19428215380093772	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9867662373408653	WITHOUT_CLASSIFICATION	0.013233762659134665	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9893956860397717	WITHOUT_CLASSIFICATION	0.01060431396022826	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999547218505322	WITHOUT_CLASSIFICATION	4.5278149467789384E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999547218505322	WITHOUT_CLASSIFICATION	4.5278149467789384E-4	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9982577078990094	WITHOUT_CLASSIFICATION	0.0017422921009906478	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9984416940169086	WITHOUT_CLASSIFICATION	0.001558305983091435	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9999109626307778	WITHOUT_CLASSIFICATION	8.903736922225789E-5	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999938022337949	WITHOUT_CLASSIFICATION	6.197766205139738E-6	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.998905607092018	WITHOUT_CLASSIFICATION	0.0010943929079819058	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9954132560771775	WITHOUT_CLASSIFICATION	0.004586743922822547	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9533836511290249	WITHOUT_CLASSIFICATION	0.04661634887097507	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9985236244502345	WITHOUT_CLASSIFICATION	0.0014763755497654875	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9998575033584609	WITHOUT_CLASSIFICATION	1.4249664153910744E-4	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9999586575099839	WITHOUT_CLASSIFICATION	4.134249001603904E-5	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9992027783020548	WITHOUT_CLASSIFICATION	7.972216979451372E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.999871530626241	WITHOUT_CLASSIFICATION	1.284693737589591E-4	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9997365274403033	WITHOUT_CLASSIFICATION	2.6347255969673416E-4	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998245874974354	WITHOUT_CLASSIFICATION	1.7541250256451977E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9998454652323349	WITHOUT_CLASSIFICATION	1.545347676649998E-4	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9886606797498113	WITHOUT_CLASSIFICATION	0.01133932025018868	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9973938914125194	WITHOUT_CLASSIFICATION	0.002606108587480546	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9925679743535711	WITHOUT_CLASSIFICATION	0.007432025646428916	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9998503782259859	WITHOUT_CLASSIFICATION	1.4962177401406528E-4	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.999970960904305	WITHOUT_CLASSIFICATION	2.9039095694988325E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9996205109159773	WITHOUT_CLASSIFICATION	3.794890840227752E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999732034379802	WITHOUT_CLASSIFICATION	2.6796562019834218E-5	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999943727590423	WITHOUT_CLASSIFICATION	5.627240957741342E-6	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9984199556225645	WITHOUT_CLASSIFICATION	0.0015800443774355803	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9998387191523938	WITHOUT_CLASSIFICATION	1.6128084760623577E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9985493337162327	WITHOUT_CLASSIFICATION	0.0014506662837672783	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9996878294560448	WITHOUT_CLASSIFICATION	3.1217054395521265E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9993494873590293	WITHOUT_CLASSIFICATION	6.505126409708209E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9998081087704949	WITHOUT_CLASSIFICATION	1.9189122950506127E-4	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998310286527797	WITHOUT_CLASSIFICATION	1.689713472202129E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999274057298263	WITHOUT_CLASSIFICATION	7.259427017376574E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9988647230355814	WITHOUT_CLASSIFICATION	0.001135276964418624	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9997942312929268	WITHOUT_CLASSIFICATION	2.057687070731337E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9983332395103011	WITHOUT_CLASSIFICATION	0.001666760489698871	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9990121969525312	WITHOUT_CLASSIFICATION	9.878030474688058E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9984234231997299	WITHOUT_CLASSIFICATION	0.0015765768002702046	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9997901881206139	WITHOUT_CLASSIFICATION	2.0981187938592783E-4	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9938258878207545	WITHOUT_CLASSIFICATION	0.006174112179245459	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9996941720615641	WITHOUT_CLASSIFICATION	3.058279384358554E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9998126629162241	WITHOUT_CLASSIFICATION	1.8733708377601308E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999470166598962	WITHOUT_CLASSIFICATION	5.2983340103868846E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992973589726991	WITHOUT_CLASSIFICATION	7.026410273008702E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9993892610637369	WITHOUT_CLASSIFICATION	6.1073893626309E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999969054442508	WITHOUT_CLASSIFICATION	3.0945557491957474E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.999963385358818	WITHOUT_CLASSIFICATION	3.6614641182090595E-5	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9811421438291159	WITHOUT_CLASSIFICATION	0.01885785617088406	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9790504622771791	WITHOUT_CLASSIFICATION	0.020949537722820898	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999991764645539	WITHOUT_CLASSIFICATION	8.235354461714707E-7	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9995003245597535	WITHOUT_CLASSIFICATION	4.996754402465988E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9702408152874682	WITHOUT_CLASSIFICATION	0.02975918471253173	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992973589726991	WITHOUT_CLASSIFICATION	7.026410273008702E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9991674311438304	WITHOUT_CLASSIFICATION	8.325688561694543E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9941603941973929	WITHOUT_CLASSIFICATION	0.0058396058026070384	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9992611920128153	WITHOUT_CLASSIFICATION	7.388079871846635E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.999233601697735	WITHOUT_CLASSIFICATION	7.663983022649063E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995901323616652	WITHOUT_CLASSIFICATION	4.09867638334769E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995901323616652	WITHOUT_CLASSIFICATION	4.09867638334769E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999955446204246	WITHOUT_CLASSIFICATION	4.45537957538441E-6	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999306405832066	WITHOUT_CLASSIFICATION	6.935941679339082E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997988228740518	WITHOUT_CLASSIFICATION	2.011771259481262E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999049551455012	WITHOUT_CLASSIFICATION	9.504485449882187E-5	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9993342303456619	WITHOUT_CLASSIFICATION	6.657696543381188E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9994623805288849	WITHOUT_CLASSIFICATION	5.376194711151354E-4	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9995813494902349	WITHOUT_CLASSIFICATION	4.1865050976505413E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9835542486389037	WITHOUT_CLASSIFICATION	0.016445751361096266	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999677484097702	WITHOUT_CLASSIFICATION	3.225159022985207E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9997773525162879	WITHOUT_CLASSIFICATION	2.2264748371207931E-4	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998808968006874	WITHOUT_CLASSIFICATION	1.191031993127465E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.999814337251958	WITHOUT_CLASSIFICATION	1.856627480421197E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9997839929442324	WITHOUT_CLASSIFICATION	2.160070557674932E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9916184089009062	WITHOUT_CLASSIFICATION	0.008381591099093732	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8252163388015985	DESIGN	0.17478366119840144	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9326868354451041	WITHOUT_CLASSIFICATION	0.06731316455489582	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9948006648585186	WITHOUT_CLASSIFICATION	0.00519933514148132	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9983320972433573	WITHOUT_CLASSIFICATION	0.0016679027566427558	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9978220860930125	WITHOUT_CLASSIFICATION	0.0021779139069875663	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9425406948435968	WITHOUT_CLASSIFICATION	0.05745930515640327	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994422780354593	WITHOUT_CLASSIFICATION	5.577219645407438E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9990459133398663	WITHOUT_CLASSIFICATION	9.540866601337224E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999939513432962	WITHOUT_CLASSIFICATION	6.04865670388375E-6	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9992917926195074	WITHOUT_CLASSIFICATION	7.082073804925841E-4	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999302422527422	WITHOUT_CLASSIFICATION	6.975774725779236E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996796014293661	WITHOUT_CLASSIFICATION	3.203985706339922E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9950915547799828	WITHOUT_CLASSIFICATION	0.004908445220017323	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9863650211301521	WITHOUT_CLASSIFICATION	0.01363497886984792	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999877427503648	WITHOUT_CLASSIFICATION	1.2257249635146359E-5	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999674813879605	WITHOUT_CLASSIFICATION	3.251861203950495E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999118909977185	WITHOUT_CLASSIFICATION	8.810900228156984E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5141112979355899	WITHOUT_CLASSIFICATION	0.48588870206441004	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.962262378624151	WITHOUT_CLASSIFICATION	0.037737621375848955	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999118909977185	WITHOUT_CLASSIFICATION	8.810900228156984E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9997529954720322	WITHOUT_CLASSIFICATION	2.4700452796776455E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999674813879605	WITHOUT_CLASSIFICATION	3.251861203950495E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9992663477563842	WITHOUT_CLASSIFICATION	7.336522436158053E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999118909977185	WITHOUT_CLASSIFICATION	8.810900228156984E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9972106858627463	WITHOUT_CLASSIFICATION	0.0027893141372537698	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9994149891702104	WITHOUT_CLASSIFICATION	5.850108297894817E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9992027783020548	WITHOUT_CLASSIFICATION	7.972216979451372E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9992036176534617	WITHOUT_CLASSIFICATION	7.963823465383649E-4	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9995470850548052	WITHOUT_CLASSIFICATION	4.5291494519486694E-4	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999258453225307	WITHOUT_CLASSIFICATION	7.415467746929402E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9985917917081351	WITHOUT_CLASSIFICATION	0.0014082082918649328	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999993464917073	WITHOUT_CLASSIFICATION	6.535082927008734E-7	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9992911127397114	WITHOUT_CLASSIFICATION	7.088872602886366E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.99994969010925	WITHOUT_CLASSIFICATION	5.030989075006458E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998352782129922	WITHOUT_CLASSIFICATION	1.647217870078108E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9994370483103988	WITHOUT_CLASSIFICATION	5.629516896011265E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995808338017669	WITHOUT_CLASSIFICATION	4.191661982331413E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9970932462748388	WITHOUT_CLASSIFICATION	0.0029067537251611375	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9920521696018643	WITHOUT_CLASSIFICATION	0.007947830398135704	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9938648769888083	WITHOUT_CLASSIFICATION	0.006135123011191652	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9985616023056156	WITHOUT_CLASSIFICATION	0.0014383976943842887	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9986799738204424	WITHOUT_CLASSIFICATION	0.00132002617955771	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9981719784923944	WITHOUT_CLASSIFICATION	0.0018280215076056908	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9996920684107933	WITHOUT_CLASSIFICATION	3.079315892067817E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9992428776602836	WITHOUT_CLASSIFICATION	7.571223397163962E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.998993319980055	WITHOUT_CLASSIFICATION	0.0010066800199450036	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9998450949613222	WITHOUT_CLASSIFICATION	1.549050386778697E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9995037977754343	WITHOUT_CLASSIFICATION	4.962022245657445E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9991881205669578	WITHOUT_CLASSIFICATION	8.118794330421403E-4	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9998590090668961	WITHOUT_CLASSIFICATION	1.4099093310393154E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9984731679717932	WITHOUT_CLASSIFICATION	0.0015268320282067838	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979754899900362	WITHOUT_CLASSIFICATION	0.0020245100099638464	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975056747815543	WITHOUT_CLASSIFICATION	0.002494325218445731	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9942105675338533	WITHOUT_CLASSIFICATION	0.005789432466146824	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.999963292583188	WITHOUT_CLASSIFICATION	3.670741681213294E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9926850434321722	WITHOUT_CLASSIFICATION	0.007314956567827822	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9994419789084188	WITHOUT_CLASSIFICATION	5.580210915812014E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9994419789084188	WITHOUT_CLASSIFICATION	5.580210915812014E-4	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9899138682403611	WITHOUT_CLASSIFICATION	0.010086131759638892	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9982625752239237	WITHOUT_CLASSIFICATION	0.0017374247760763171	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999547290033135	WITHOUT_CLASSIFICATION	4.527099668648421E-5	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.99989708788025	WITHOUT_CLASSIFICATION	1.0291211974987586E-4	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9949726752810281	WITHOUT_CLASSIFICATION	0.005027324718971922	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9598316139928793	WITHOUT_CLASSIFICATION	0.04016838600712072	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.993601512773097	WITHOUT_CLASSIFICATION	0.006398487226902895	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999389442288223	WITHOUT_CLASSIFICATION	6.105577117764277E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9993163827593073	WITHOUT_CLASSIFICATION	6.836172406926163E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.999860664742136	WITHOUT_CLASSIFICATION	1.393352578640638E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9992755656948336	WITHOUT_CLASSIFICATION	7.244343051664315E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999604341093359	WITHOUT_CLASSIFICATION	3.95658906640763E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9995479326390646	WITHOUT_CLASSIFICATION	4.5206736093539654E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9994419789084188	WITHOUT_CLASSIFICATION	5.580210915812014E-4	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9995529393762547	WITHOUT_CLASSIFICATION	4.4706062374538834E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9957669150780634	WITHOUT_CLASSIFICATION	0.00423308492193659	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.8821382936380188	WITHOUT_CLASSIFICATION	0.11786170636198126	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9984100980909757	WITHOUT_CLASSIFICATION	0.0015899019090243036	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998613223924682	WITHOUT_CLASSIFICATION	1.3867760753194126E-4	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9993728380693998	WITHOUT_CLASSIFICATION	6.271619306002841E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999036755468328	WITHOUT_CLASSIFICATION	9.632445316725354E-5	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9980766047089762	WITHOUT_CLASSIFICATION	0.0019233952910238765	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9976942032872937	WITHOUT_CLASSIFICATION	0.0023057967127061863	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9797873093414581	WITHOUT_CLASSIFICATION	0.020212690658541883	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9979948132283952	WITHOUT_CLASSIFICATION	0.0020051867716047453	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979754899900362	WITHOUT_CLASSIFICATION	0.0020245100099638464	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9994419789084188	WITHOUT_CLASSIFICATION	5.580210915812014E-4	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998285492870673	WITHOUT_CLASSIFICATION	1.714507129327578E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9956204004086328	WITHOUT_CLASSIFICATION	0.004379599591367185	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9994508902926729	WITHOUT_CLASSIFICATION	5.491097073271444E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9988681476189267	WITHOUT_CLASSIFICATION	0.001131852381073315	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.998878848724189	WITHOUT_CLASSIFICATION	0.001121151275811029	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9991548772600377	WITHOUT_CLASSIFICATION	8.451227399622609E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984078666496032	WITHOUT_CLASSIFICATION	0.0015921333503967545	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999666930082978	WITHOUT_CLASSIFICATION	3.330699170222191E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999394928026195	WITHOUT_CLASSIFICATION	6.050719738041924E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9986007407500146	WITHOUT_CLASSIFICATION	0.001399259249985311	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9994622131416515	WITHOUT_CLASSIFICATION	5.377868583484335E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998081087704949	WITHOUT_CLASSIFICATION	1.9189122950506127E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9983512146278273	WITHOUT_CLASSIFICATION	0.0016487853721726998	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9654103756478554	WITHOUT_CLASSIFICATION	0.0345896243521446	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9994484134070339	WITHOUT_CLASSIFICATION	5.515865929660421E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9989950198608398	WITHOUT_CLASSIFICATION	0.0010049801391602432	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9995964070105579	WITHOUT_CLASSIFICATION	4.0359298944219076E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9977861200098992	WITHOUT_CLASSIFICATION	0.0022138799901008097	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.999407524680451	WITHOUT_CLASSIFICATION	5.924753195489558E-4	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9987124120206774	WITHOUT_CLASSIFICATION	0.0012875879793225826	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9986818210940845	WITHOUT_CLASSIFICATION	0.0013181789059155274	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9986818210940845	WITHOUT_CLASSIFICATION	0.0013181789059155274	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998839902125046	WITHOUT_CLASSIFICATION	1.1600978749538941E-4	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9971397859138351	WITHOUT_CLASSIFICATION	0.002860214086164922	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999348697376604	WITHOUT_CLASSIFICATION	6.513026233961953E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9964657348284436	WITHOUT_CLASSIFICATION	0.0035342651715564583	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9996877307996248	WITHOUT_CLASSIFICATION	3.122692003751228E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999926181087688	WITHOUT_CLASSIFICATION	7.381891231193163E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9993683812100502	WITHOUT_CLASSIFICATION	6.316187899496926E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9988793474970724	WITHOUT_CLASSIFICATION	0.001120652502927619	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9988793474970724	WITHOUT_CLASSIFICATION	0.001120652502927619	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998818059138779	WITHOUT_CLASSIFICATION	1.1819408612213636E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9997114085913915	WITHOUT_CLASSIFICATION	2.885914086084509E-4	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998837396809115	WITHOUT_CLASSIFICATION	1.1626031908851944E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9993339556624355	WITHOUT_CLASSIFICATION	6.660443375643394E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9993339556624355	WITHOUT_CLASSIFICATION	6.660443375643394E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9993339556624355	WITHOUT_CLASSIFICATION	6.660443375643394E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999888712475793	WITHOUT_CLASSIFICATION	1.1128752420640217E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9991177044607962	WITHOUT_CLASSIFICATION	8.822955392037539E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9998178055190172	WITHOUT_CLASSIFICATION	1.821944809828206E-4	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9993918258691927	WITHOUT_CLASSIFICATION	6.081741308071783E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9979659744724267	WITHOUT_CLASSIFICATION	0.0020340255275733015	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9994419789084188	WITHOUT_CLASSIFICATION	5.580210915812014E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9994419789084188	WITHOUT_CLASSIFICATION	5.580210915812014E-4	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9363038063789161	WITHOUT_CLASSIFICATION	0.063696193621084	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998689234094484	WITHOUT_CLASSIFICATION	1.3107659055161083E-4	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9742607088370914	WITHOUT_CLASSIFICATION	0.025739291162908604	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.999805832315016	WITHOUT_CLASSIFICATION	1.941676849839532E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9923959443429776	WITHOUT_CLASSIFICATION	0.007604055657022347	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9973050413241308	WITHOUT_CLASSIFICATION	0.0026949586758690763	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9879811742387996	WITHOUT_CLASSIFICATION	0.012018825761200252	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9900994963339471	WITHOUT_CLASSIFICATION	0.009900503666052891	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9973449280226093	WITHOUT_CLASSIFICATION	0.0026550719773907943	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9998157242391142	WITHOUT_CLASSIFICATION	1.8427576088576392E-4	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999559718700062	WITHOUT_CLASSIFICATION	4.402812999385876E-5	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998324722499715	WITHOUT_CLASSIFICATION	1.6752775002843652E-4	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9993907201056467	WITHOUT_CLASSIFICATION	6.092798943532746E-4	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9993907201056467	WITHOUT_CLASSIFICATION	6.092798943532746E-4	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9993907201056467	WITHOUT_CLASSIFICATION	6.092798943532746E-4	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9993907201056467	WITHOUT_CLASSIFICATION	6.092798943532746E-4	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9993907201056467	WITHOUT_CLASSIFICATION	6.092798943532746E-4	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9995890990224081	WITHOUT_CLASSIFICATION	4.10900977591837E-4	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9995890990224081	WITHOUT_CLASSIFICATION	4.10900977591837E-4	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9995890990224081	WITHOUT_CLASSIFICATION	4.10900977591837E-4	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9995890990224081	WITHOUT_CLASSIFICATION	4.10900977591837E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.99566470439848	WITHOUT_CLASSIFICATION	0.0043352956015199895	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9986818210940845	WITHOUT_CLASSIFICATION	0.0013181789059155274	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9988800559118872	WITHOUT_CLASSIFICATION	0.0011199440881127587	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9995890990224081	WITHOUT_CLASSIFICATION	4.10900977591837E-4	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9998819502982829	WITHOUT_CLASSIFICATION	1.1804970171717487E-4	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9965115211880551	WITHOUT_CLASSIFICATION	0.00348847881194493	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998082123965638	WITHOUT_CLASSIFICATION	1.9178760343612627E-4	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9993687434913537	WITHOUT_CLASSIFICATION	6.312565086462426E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9997762620267462	WITHOUT_CLASSIFICATION	2.2373797325381795E-4	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9978862704864048	WITHOUT_CLASSIFICATION	0.002113729513595178	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999979989682628	WITHOUT_CLASSIFICATION	2.0010317372086024E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9980007166290228	WITHOUT_CLASSIFICATION	0.0019992833709772434	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999993234713711	WITHOUT_CLASSIFICATION	6.765286289003351E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999437051073724	WITHOUT_CLASSIFICATION	5.629489262757681E-5	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9998929379262342	WITHOUT_CLASSIFICATION	1.0706207376578685E-4	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9995964647821756	WITHOUT_CLASSIFICATION	4.0353521782443346E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9992770957809012	WITHOUT_CLASSIFICATION	7.229042190987139E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999060442373019	WITHOUT_CLASSIFICATION	9.395576269812927E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9346911749562523	WITHOUT_CLASSIFICATION	0.06530882504374765	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9975845548931664	WITHOUT_CLASSIFICATION	0.0024154451068335507	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999912525316933	WITHOUT_CLASSIFICATION	8.74746830669614E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9991024468136542	WITHOUT_CLASSIFICATION	8.975531863458803E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9991024468136542	WITHOUT_CLASSIFICATION	8.975531863458803E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9996706411819202	WITHOUT_CLASSIFICATION	3.2935881807978737E-4	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9992946664415978	WITHOUT_CLASSIFICATION	7.053335584023005E-4	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9995051161025016	WITHOUT_CLASSIFICATION	4.948838974982992E-4	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9993839372372695	WITHOUT_CLASSIFICATION	6.160627627305862E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.998571974451051	WITHOUT_CLASSIFICATION	0.0014280255489490267	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9978426422258446	WITHOUT_CLASSIFICATION	0.002157357774155401	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9962577672843546	WITHOUT_CLASSIFICATION	0.0037422327156454217	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999729767105042	WITHOUT_CLASSIFICATION	2.702328949577871E-5	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.999863735805299	WITHOUT_CLASSIFICATION	1.3626419470106024E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997461080296769	WITHOUT_CLASSIFICATION	2.538919703230969E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9939388980770296	WITHOUT_CLASSIFICATION	0.0060611019229704155	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998081087704949	WITHOUT_CLASSIFICATION	1.9189122950506127E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9997925476831367	WITHOUT_CLASSIFICATION	2.074523168631529E-4	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999811548441308	WITHOUT_CLASSIFICATION	1.884515586919339E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9997872729926592	WITHOUT_CLASSIFICATION	2.127270073408002E-4	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999446689805255	WITHOUT_CLASSIFICATION	5.533101947447E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999933478893425	WITHOUT_CLASSIFICATION	6.652110657509253E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999933478893425	WITHOUT_CLASSIFICATION	6.652110657509253E-6	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996531727288644	WITHOUT_CLASSIFICATION	3.468272711356568E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9775740520576065	WITHOUT_CLASSIFICATION	0.022425947942393467	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9996969059104134	WITHOUT_CLASSIFICATION	3.030940895866176E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9995505516874321	WITHOUT_CLASSIFICATION	4.4944831256785975E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9998191619067412	WITHOUT_CLASSIFICATION	1.8083809325869987E-4	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9970595615462284	WITHOUT_CLASSIFICATION	0.0029404384537715374	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9974161667133563	WITHOUT_CLASSIFICATION	0.002583833286643596	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987954327889195	WITHOUT_CLASSIFICATION	0.0012045672110804696	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997631908150054	WITHOUT_CLASSIFICATION	2.3680918499464305E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9983140533678538	WITHOUT_CLASSIFICATION	0.0016859466321461512	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999362957541901	WITHOUT_CLASSIFICATION	6.370424580996349E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987954327889195	WITHOUT_CLASSIFICATION	0.0012045672110804696	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9957847807252183	WITHOUT_CLASSIFICATION	0.004215219274781747	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9986561982606708	WITHOUT_CLASSIFICATION	0.0013438017393292772	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9937709181081753	WITHOUT_CLASSIFICATION	0.0062290818918247	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.997952387353545	WITHOUT_CLASSIFICATION	0.0020476126464550122	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.991087806683517	WITHOUT_CLASSIFICATION	0.008912193316482978	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9997694355630689	WITHOUT_CLASSIFICATION	2.3056443693104606E-4	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9996134670632562	WITHOUT_CLASSIFICATION	3.865329367438866E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999849432529095	WITHOUT_CLASSIFICATION	1.5056747090415662E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999423910340484	WITHOUT_CLASSIFICATION	5.760896595159579E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999406334596155	WITHOUT_CLASSIFICATION	5.936654038450528E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9994495993208993	WITHOUT_CLASSIFICATION	5.504006791007003E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996774656492114	WITHOUT_CLASSIFICATION	3.225343507885882E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998406286243116	WITHOUT_CLASSIFICATION	1.5937137568838576E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9937571148863454	WITHOUT_CLASSIFICATION	0.006242885113654559	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9990654937087077	WITHOUT_CLASSIFICATION	9.345062912923395E-4	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9968544565299607	WITHOUT_CLASSIFICATION	0.003145543470039303	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9956832904592218	WITHOUT_CLASSIFICATION	0.004316709540778247	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9997247757040606	WITHOUT_CLASSIFICATION	2.752242959393829E-4	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9997247757040606	WITHOUT_CLASSIFICATION	2.752242959393829E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9996134670632562	WITHOUT_CLASSIFICATION	3.865329367438866E-4	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9942830917921932	WITHOUT_CLASSIFICATION	0.005716908207806689	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.7830160005609029	WITHOUT_CLASSIFICATION	0.21698399943909707	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9946631297909669	WITHOUT_CLASSIFICATION	0.005336870209033104	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9992454511948378	WITHOUT_CLASSIFICATION	7.545488051621213E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9986379611672526	WITHOUT_CLASSIFICATION	0.001362038832747434	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996427289126996	WITHOUT_CLASSIFICATION	3.5727108730043586E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999965055610698	WITHOUT_CLASSIFICATION	3.4944389302638973E-6	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999297732600443	WITHOUT_CLASSIFICATION	7.022673995570175E-5	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9983894765247817	WITHOUT_CLASSIFICATION	0.0016105234752182764	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.889536317742098	WITHOUT_CLASSIFICATION	0.1104636822579021	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999826712728793	WITHOUT_CLASSIFICATION	1.7328727120746884E-5	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9986157915997691	WITHOUT_CLASSIFICATION	0.001384208400230964	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9988108467386373	WITHOUT_CLASSIFICATION	0.0011891532613627867	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9751256134772457	WITHOUT_CLASSIFICATION	0.024874386522754224	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997164919217335	WITHOUT_CLASSIFICATION	2.835080782664124E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9987153618888075	WITHOUT_CLASSIFICATION	0.001284638111192537	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999953668378124	WITHOUT_CLASSIFICATION	4.633162187616722E-6	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999813612824588	WITHOUT_CLASSIFICATION	1.863871754106415E-5	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999135120716239	WITHOUT_CLASSIFICATION	8.648792837600525E-5	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9994128040382793	WITHOUT_CLASSIFICATION	5.871959617207679E-4	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999216862802558	WITHOUT_CLASSIFICATION	7.831371974424124E-5	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.998898134872503	WITHOUT_CLASSIFICATION	0.001101865127497016	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9990040455439854	WITHOUT_CLASSIFICATION	9.959544560145652E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999941766081825	WITHOUT_CLASSIFICATION	5.823391817460941E-6	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9984773523542847	WITHOUT_CLASSIFICATION	0.0015226476457152985	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9971980702671907	WITHOUT_CLASSIFICATION	0.0028019297328092368	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9997577343512853	WITHOUT_CLASSIFICATION	2.4226564871464437E-4	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.999867778304752	WITHOUT_CLASSIFICATION	1.3222169524799431E-4	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999383127696382	WITHOUT_CLASSIFICATION	6.168723036180519E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9982067134759657	WITHOUT_CLASSIFICATION	0.0017932865240342741	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997164919217335	WITHOUT_CLASSIFICATION	2.835080782664124E-4	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9992917628154656	WITHOUT_CLASSIFICATION	7.08237184534302E-4	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999948911501583	WITHOUT_CLASSIFICATION	5.108849841768949E-6	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9989232728866019	WITHOUT_CLASSIFICATION	0.0010767271133981867	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9988150097909705	WITHOUT_CLASSIFICATION	0.0011849902090295406	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9946406080695694	WITHOUT_CLASSIFICATION	0.005359391930430517	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9994685820673093	WITHOUT_CLASSIFICATION	5.31417932690726E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9997134271353624	WITHOUT_CLASSIFICATION	2.865728646375894E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9995334938233192	WITHOUT_CLASSIFICATION	4.665061766806512E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9988329908612199	WITHOUT_CLASSIFICATION	0.0011670091387801713	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9996506630967996	WITHOUT_CLASSIFICATION	3.493369032004141E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9970299691162536	WITHOUT_CLASSIFICATION	0.002970030883746462	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.716805578974659	WITHOUT_CLASSIFICATION	0.2831944210253409	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9975918685428118	WITHOUT_CLASSIFICATION	0.0024081314571882473	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9977316198853422	WITHOUT_CLASSIFICATION	0.002268380114657868	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9319019204512655	WITHOUT_CLASSIFICATION	0.06809807954873448	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999731832396457	WITHOUT_CLASSIFICATION	2.6816760354374134E-5	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998513896841558	WITHOUT_CLASSIFICATION	1.4861031584419368E-4	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9994374191667637	WITHOUT_CLASSIFICATION	5.625808332362375E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9992733661650512	WITHOUT_CLASSIFICATION	7.266338349487203E-4	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9977641714621924	WITHOUT_CLASSIFICATION	0.002235828537807588	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997631908150054	WITHOUT_CLASSIFICATION	2.3680918499464305E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8559293238478697	WITHOUT_CLASSIFICATION	0.14407067615213023	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997164919217335	WITHOUT_CLASSIFICATION	2.835080782664124E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9974892546246488	WITHOUT_CLASSIFICATION	0.002510745375351213	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998702587404453	WITHOUT_CLASSIFICATION	1.2974125955464227E-4	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995885218883466	WITHOUT_CLASSIFICATION	4.11478111653452E-4	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9991494043864688	WITHOUT_CLASSIFICATION	8.50595613531203E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.997187948213241	WITHOUT_CLASSIFICATION	0.002812051786759044	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9940861120947422	WITHOUT_CLASSIFICATION	0.005913887905257757	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9865587297357662	WITHOUT_CLASSIFICATION	0.013441270264233793	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.999054582082998	WITHOUT_CLASSIFICATION	9.454179170020745E-4	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9728167532674707	WITHOUT_CLASSIFICATION	0.027183246732529278	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9988177638329324	WITHOUT_CLASSIFICATION	0.0011822361670675635	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.998659541169687	WITHOUT_CLASSIFICATION	0.0013404588303129155	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.9091058913403588	WITHOUT_CLASSIFICATION	0.09089410865964119	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9787537030737836	WITHOUT_CLASSIFICATION	0.02124629692621648	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9787537030737836	WITHOUT_CLASSIFICATION	0.02124629692621648	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9163039509371843	WITHOUT_CLASSIFICATION	0.08369604906281575	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9957148203019917	WITHOUT_CLASSIFICATION	0.004285179698008281	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9913060634965938	WITHOUT_CLASSIFICATION	0.008693936503406224	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999702472461296	WITHOUT_CLASSIFICATION	2.975275387038206E-5	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999197006267049	WITHOUT_CLASSIFICATION	8.029937329512869E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997094877595661	WITHOUT_CLASSIFICATION	2.9051224043390677E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9988059313195615	WITHOUT_CLASSIFICATION	0.0011940686804385603	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9978602137385505	WITHOUT_CLASSIFICATION	0.0021397862614494422	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.999967158620708	WITHOUT_CLASSIFICATION	3.284137929204675E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9979989336130429	WITHOUT_CLASSIFICATION	0.0020010663869571223	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9979989336130429	WITHOUT_CLASSIFICATION	0.0020010663869571223	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9986498600320813	WITHOUT_CLASSIFICATION	0.0013501399679186892	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998662750823	WITHOUT_CLASSIFICATION	1.3372491772155108E-7	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9988922551300068	WITHOUT_CLASSIFICATION	0.0011077448699932028	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9995139423727977	WITHOUT_CLASSIFICATION	4.860576272023338E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9987675025742897	WITHOUT_CLASSIFICATION	0.001232497425710375	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9214132608714861	WITHOUT_CLASSIFICATION	0.07858673912851383	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999844042000545	WITHOUT_CLASSIFICATION	1.559579994557985E-5	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9998289182377741	WITHOUT_CLASSIFICATION	1.7108176222601908E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999091497830316	WITHOUT_CLASSIFICATION	9.085021696838828E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9972704075492702	WITHOUT_CLASSIFICATION	0.0027295924507298804	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998840050567975	WITHOUT_CLASSIFICATION	1.1599494320244897E-4	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999605328071548	WITHOUT_CLASSIFICATION	3.946719284521305E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9992294685216474	WITHOUT_CLASSIFICATION	7.705314783525752E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999761741094833	WITHOUT_CLASSIFICATION	2.38258905168247E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995691771810377	WITHOUT_CLASSIFICATION	4.308228189623089E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999754357662977	WITHOUT_CLASSIFICATION	2.4564233702369977E-5	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9870992468027584	WITHOUT_CLASSIFICATION	0.012900753197241554	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9962325722274883	WITHOUT_CLASSIFICATION	0.003767427772511695	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.999372794296033	WITHOUT_CLASSIFICATION	6.272057039670342E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999780612409288	WITHOUT_CLASSIFICATION	2.193875907117427E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9997552311830116	WITHOUT_CLASSIFICATION	2.4476881698846145E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9989553624545735	WITHOUT_CLASSIFICATION	0.001044637545426508	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.7577181157421078	WITHOUT_CLASSIFICATION	0.24228188425789218	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9994422780354593	WITHOUT_CLASSIFICATION	5.577219645407438E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9938017445324441	WITHOUT_CLASSIFICATION	0.00619825546755584	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9981151767189872	WITHOUT_CLASSIFICATION	0.0018848232810127206	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9993514456459762	WITHOUT_CLASSIFICATION	6.485543540236621E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9994431258862022	WITHOUT_CLASSIFICATION	5.568741137977872E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996508104679455	WITHOUT_CLASSIFICATION	3.491895320546397E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996970588609603	WITHOUT_CLASSIFICATION	3.0294113903971E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999965747037315	WITHOUT_CLASSIFICATION	3.4252962685037462E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9991584336811926	WITHOUT_CLASSIFICATION	8.415663188075073E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9998663280091518	WITHOUT_CLASSIFICATION	1.3367199084833212E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998705350586848	WITHOUT_CLASSIFICATION	0.0012946494131521424	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5093157294442827	DESIGN	0.49068427055571723	WITHOUT_CLASSIFICATION
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998889213570044	WITHOUT_CLASSIFICATION	1.1107864299553035E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.999999593174459	WITHOUT_CLASSIFICATION	4.0682554106812233E-7	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9993329370155016	WITHOUT_CLASSIFICATION	6.670629844983892E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9938569647371481	WITHOUT_CLASSIFICATION	0.0061430352628518165	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999674099969573	WITHOUT_CLASSIFICATION	3.259000304269896E-5	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997224299804662	WITHOUT_CLASSIFICATION	2.775700195337394E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9993360434269802	WITHOUT_CLASSIFICATION	6.639565730198177E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999277006811429	WITHOUT_CLASSIFICATION	7.229931885719108E-5	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9323184423233634	DESIGN	0.06768155767663663	WITHOUT_CLASSIFICATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9962844505448799	WITHOUT_CLASSIFICATION	0.003715549455120139	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9876879663322063	WITHOUT_CLASSIFICATION	0.012312033667793619	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999008412201409	WITHOUT_CLASSIFICATION	9.91587798591025E-5	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.999206915313629	WITHOUT_CLASSIFICATION	7.930846863709263E-4	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9998460628218756	WITHOUT_CLASSIFICATION	1.5393717812444094E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9996563355335448	WITHOUT_CLASSIFICATION	3.4366446645523737E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.979749364267212	WITHOUT_CLASSIFICATION	0.020250635732787958	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9975960438899529	WITHOUT_CLASSIFICATION	0.0024039561100470948	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.999035462324877	WITHOUT_CLASSIFICATION	9.645376751228582E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.999498898234085	WITHOUT_CLASSIFICATION	5.011017659150148E-4	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9994999851500834	WITHOUT_CLASSIFICATION	5.000148499166138E-4	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999031618785665	WITHOUT_CLASSIFICATION	9.683812143346118E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999799001846962	WITHOUT_CLASSIFICATION	2.0099815303756218E-5	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9996728294309617	WITHOUT_CLASSIFICATION	3.271705690382999E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999799001846962	WITHOUT_CLASSIFICATION	2.0099815303756218E-5	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999949373203311	WITHOUT_CLASSIFICATION	5.062679668944559E-6	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9996116802305954	WITHOUT_CLASSIFICATION	3.883197694046035E-4	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9995382903983655	WITHOUT_CLASSIFICATION	4.617096016345368E-4	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999484204183001	WITHOUT_CLASSIFICATION	5.157958169980221E-5	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9995107947491015	WITHOUT_CLASSIFICATION	4.89205250898435E-4	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9995382903983655	WITHOUT_CLASSIFICATION	4.617096016345368E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.999226291610726	WITHOUT_CLASSIFICATION	7.737083892741102E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.998313020838756	WITHOUT_CLASSIFICATION	0.0016869791612440144	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999101727964806	WITHOUT_CLASSIFICATION	8.982720351935623E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9996382400157543	WITHOUT_CLASSIFICATION	3.6175998424574737E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999929961704689	WITHOUT_CLASSIFICATION	7.003829531072597E-6	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9997143616851392	WITHOUT_CLASSIFICATION	2.8563831486081034E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999864394301057	WITHOUT_CLASSIFICATION	1.3560569894301137E-5	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.999969849717823	DESIGN	3.0150282177035797E-5	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999852405861827	WITHOUT_CLASSIFICATION	1.4759413817208214E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998883218674453	WITHOUT_CLASSIFICATION	1.1167813255481166E-4	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9997672151597133	WITHOUT_CLASSIFICATION	2.3278484028660312E-4	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998473048872132	WITHOUT_CLASSIFICATION	1.5269511278684334E-4	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9997900492291429	WITHOUT_CLASSIFICATION	2.0995077085700218E-4	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.6374268497851349	WITHOUT_CLASSIFICATION	0.3625731502148651	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9978097919074101	WITHOUT_CLASSIFICATION	0.002190208092589951	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.998978009837814	WITHOUT_CLASSIFICATION	0.0010219901621859233	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9032320683495458	WITHOUT_CLASSIFICATION	0.09676793165045422	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9938790498200272	WITHOUT_CLASSIFICATION	0.006120950179972807	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9982988656593882	WITHOUT_CLASSIFICATION	0.0017011343406118443	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999593661638523	WITHOUT_CLASSIFICATION	4.063383614773062E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9977911485567386	WITHOUT_CLASSIFICATION	0.0022088514432613737	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9992254325061446	WITHOUT_CLASSIFICATION	7.745674938553379E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999871015855256	WITHOUT_CLASSIFICATION	1.289841447439941E-4	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9990017533453976	WITHOUT_CLASSIFICATION	9.982466546022482E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9994648037540689	WITHOUT_CLASSIFICATION	5.351962459311306E-4	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9974680878193626	WITHOUT_CLASSIFICATION	0.00253191218063742	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9996993464610711	WITHOUT_CLASSIFICATION	3.0065353892888693E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9995493141670465	WITHOUT_CLASSIFICATION	4.506858329533893E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9998409274173221	WITHOUT_CLASSIFICATION	1.5907258267785782E-4	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9996361038785868	WITHOUT_CLASSIFICATION	3.6389612141318777E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999871015855256	WITHOUT_CLASSIFICATION	1.289841447439941E-4	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9997805378388852	WITHOUT_CLASSIFICATION	2.194621611147514E-4	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9996797507268391	WITHOUT_CLASSIFICATION	3.202492731609303E-4	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9971315321112864	WITHOUT_CLASSIFICATION	0.002868467888713505	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9759567530598153	WITHOUT_CLASSIFICATION	0.024043246940184716	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999593661638523	WITHOUT_CLASSIFICATION	4.063383614773062E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9996799691957771	WITHOUT_CLASSIFICATION	3.2003080422287114E-4	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9991160981716866	WITHOUT_CLASSIFICATION	8.83901828313387E-4	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9990391223548065	WITHOUT_CLASSIFICATION	9.608776451935109E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999462305641649	WITHOUT_CLASSIFICATION	5.3769435835097273E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.99996762366897	WITHOUT_CLASSIFICATION	3.237633103000996E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9818581670961248	WITHOUT_CLASSIFICATION	0.018141832903875207	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.9079509994878906	DESIGN	0.09204900051210933	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9975145860487589	WITHOUT_CLASSIFICATION	0.002485413951241182	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9988306121839738	WITHOUT_CLASSIFICATION	0.0011693878160261666	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9959611614901848	WITHOUT_CLASSIFICATION	0.004038838509815318	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9994956182434076	WITHOUT_CLASSIFICATION	5.043817565924065E-4	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9997746551190313	WITHOUT_CLASSIFICATION	2.2534488096862324E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9998156242753242	WITHOUT_CLASSIFICATION	1.843757246758489E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9998878232315414	WITHOUT_CLASSIFICATION	1.1217676845872721E-4	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9996923183330302	WITHOUT_CLASSIFICATION	3.076816669697711E-4	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9990452615483322	WITHOUT_CLASSIFICATION	9.547384516677898E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9924123302441423	WITHOUT_CLASSIFICATION	0.007587669755857677	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9982400775769018	WITHOUT_CLASSIFICATION	0.0017599224230982005	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9972605181026843	WITHOUT_CLASSIFICATION	0.0027394818973155615	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9975110182734654	WITHOUT_CLASSIFICATION	0.002488981726534636	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9971178910678783	WITHOUT_CLASSIFICATION	0.0028821089321217487	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9971178910678783	WITHOUT_CLASSIFICATION	0.0028821089321217487	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999937220628406	WITHOUT_CLASSIFICATION	6.277937159407204E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9971178910678783	WITHOUT_CLASSIFICATION	0.0028821089321217487	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9971178910678783	WITHOUT_CLASSIFICATION	0.0028821089321217487	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9988972123509574	WITHOUT_CLASSIFICATION	0.0011027876490425775	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.999999241302486	WITHOUT_CLASSIFICATION	7.586975139757988E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998064554791651	WITHOUT_CLASSIFICATION	1.935445208348662E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998064554791651	WITHOUT_CLASSIFICATION	1.935445208348662E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9991708905262042	WITHOUT_CLASSIFICATION	8.2910947379563E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9909834923840065	WITHOUT_CLASSIFICATION	0.00901650761599344	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9992702144087805	WITHOUT_CLASSIFICATION	7.297855912194284E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999843671073403	WITHOUT_CLASSIFICATION	1.563289265978195E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9988713848115752	WITHOUT_CLASSIFICATION	0.001128615188424751	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9991191131648973	WITHOUT_CLASSIFICATION	8.808868351027447E-4	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995909530946969	WITHOUT_CLASSIFICATION	4.090469053031927E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.999826494815105	WITHOUT_CLASSIFICATION	1.7350518489490805E-4	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9961249660326261	WITHOUT_CLASSIFICATION	0.0038750339673738706	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999953896352864	WITHOUT_CLASSIFICATION	4.610364713491891E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9996212710224692	WITHOUT_CLASSIFICATION	3.7872897753069007E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9975431603047988	WITHOUT_CLASSIFICATION	0.0024568396952012197	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999682776875194	WITHOUT_CLASSIFICATION	3.1722312480578345E-5	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9996641946276728	WITHOUT_CLASSIFICATION	3.3580537232734306E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.992332633152852	WITHOUT_CLASSIFICATION	0.007667366847147973	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9985782208344449	WITHOUT_CLASSIFICATION	0.0014217791655550293	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9982944117559802	WITHOUT_CLASSIFICATION	0.0017055882440197758	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9996864298339622	WITHOUT_CLASSIFICATION	3.1357016603782205E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999682776875194	WITHOUT_CLASSIFICATION	3.1722312480578345E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9977911485567386	WITHOUT_CLASSIFICATION	0.0022088514432613737	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999210503673627	WITHOUT_CLASSIFICATION	7.894963263733468E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997711255682792	WITHOUT_CLASSIFICATION	2.2887443172095535E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999200755166893	WITHOUT_CLASSIFICATION	7.992448331070683E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999529616870929	WITHOUT_CLASSIFICATION	4.7038312907085936E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998846520540975	WITHOUT_CLASSIFICATION	1.1534794590249733E-4	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.998183275131093	WITHOUT_CLASSIFICATION	0.001816724868907055	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998359548546233	WITHOUT_CLASSIFICATION	1.6404514537663505E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998435978955796	WITHOUT_CLASSIFICATION	1.5640210442046973E-4	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9998807418479104	WITHOUT_CLASSIFICATION	1.1925815208967687E-4	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999349331116164	WITHOUT_CLASSIFICATION	6.506688838366319E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998516023882176	WITHOUT_CLASSIFICATION	1.4839761178251553E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.992707167503732	WITHOUT_CLASSIFICATION	0.007292832496267948	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999660843886488	WITHOUT_CLASSIFICATION	3.3915611351194796E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9995032359750503	WITHOUT_CLASSIFICATION	4.967640249497127E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.999912609102209	WITHOUT_CLASSIFICATION	8.739089779094975E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9993497384291404	WITHOUT_CLASSIFICATION	6.502615708595829E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998815526506547	WITHOUT_CLASSIFICATION	1.1844734934524037E-4	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9984738751082927	WITHOUT_CLASSIFICATION	0.0015261248917073343	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9997310013216157	WITHOUT_CLASSIFICATION	2.6899867838435276E-4	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9987345933896938	WITHOUT_CLASSIFICATION	0.001265406610306165	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9954366723298285	WITHOUT_CLASSIFICATION	0.004563327670171546	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999773856992765	WITHOUT_CLASSIFICATION	2.2614300723518896E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998435978955796	WITHOUT_CLASSIFICATION	1.5640210442046973E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9997159188333773	WITHOUT_CLASSIFICATION	2.840811666227294E-4	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9992626996443225	WITHOUT_CLASSIFICATION	7.373003556775021E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9907033802929714	WITHOUT_CLASSIFICATION	0.009296619707028587	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9943943572290066	WITHOUT_CLASSIFICATION	0.0056056427709934	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9995292579218851	WITHOUT_CLASSIFICATION	4.7074207811496064E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999086279091042	WITHOUT_CLASSIFICATION	9.137209089580468E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9976836112611293	WITHOUT_CLASSIFICATION	0.0023163887388707696	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.999907823327107	WITHOUT_CLASSIFICATION	9.217667289298853E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9996748655955463	WITHOUT_CLASSIFICATION	3.251344044537804E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999946883894169	WITHOUT_CLASSIFICATION	5.31161058309886E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9968602923169614	WITHOUT_CLASSIFICATION	0.0031397076830385956	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9914445992508806	WITHOUT_CLASSIFICATION	0.00855540074911941	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.999939255514885	WITHOUT_CLASSIFICATION	6.074448511504544E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992570669863448	WITHOUT_CLASSIFICATION	7.429330136552112E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9993576903368335	WITHOUT_CLASSIFICATION	6.423096631664542E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999247193630538	WITHOUT_CLASSIFICATION	7.528063694619439E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999946883894169	WITHOUT_CLASSIFICATION	5.31161058309886E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9984748061308373	WITHOUT_CLASSIFICATION	0.0015251938691628348	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9838960905608222	WITHOUT_CLASSIFICATION	0.0161039094391778	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9993795065390547	WITHOUT_CLASSIFICATION	6.20493460945305E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9998511116512191	WITHOUT_CLASSIFICATION	1.4888834878099306E-4	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9997045115861908	WITHOUT_CLASSIFICATION	2.954884138091315E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.999779789890294	WITHOUT_CLASSIFICATION	2.2021010970588116E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992570669863448	WITHOUT_CLASSIFICATION	7.429330136552112E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999358836783189	WITHOUT_CLASSIFICATION	6.41163216811758E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999884660410994	WITHOUT_CLASSIFICATION	1.1533958900607697E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999000989762074	WITHOUT_CLASSIFICATION	9.99010237925825E-5	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999399231019577	WITHOUT_CLASSIFICATION	6.007689804229656E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999399231019577	WITHOUT_CLASSIFICATION	6.007689804229656E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999399231019577	WITHOUT_CLASSIFICATION	6.007689804229656E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9994676925531412	WITHOUT_CLASSIFICATION	5.323074468587912E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9994676925531412	WITHOUT_CLASSIFICATION	5.323074468587912E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.997083862133311	WITHOUT_CLASSIFICATION	0.0029161378666889616	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9988128669202728	WITHOUT_CLASSIFICATION	0.0011871330797271597	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.996178458988244	WITHOUT_CLASSIFICATION	0.0038215410117559555	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9985094747280389	WITHOUT_CLASSIFICATION	0.0014905252719611564	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9989987963429108	WITHOUT_CLASSIFICATION	0.001001203657089142	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993904045008918	WITHOUT_CLASSIFICATION	6.095954991081265E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999538230468959	WITHOUT_CLASSIFICATION	4.617695310410294E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9994529263686608	WITHOUT_CLASSIFICATION	5.47073631339267E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998071772933943	WITHOUT_CLASSIFICATION	1.9282270660579478E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993904045008918	WITHOUT_CLASSIFICATION	6.095954991081265E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999538230468959	WITHOUT_CLASSIFICATION	4.617695310410294E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.999685451381584	WITHOUT_CLASSIFICATION	3.145486184159867E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9998893522785699	WITHOUT_CLASSIFICATION	1.1064772143013728E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9994715065446296	WITHOUT_CLASSIFICATION	5.284934553704127E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9951150069228688	WITHOUT_CLASSIFICATION	0.004884993077131123	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9997772978926008	WITHOUT_CLASSIFICATION	2.2270210739920392E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9984098937795925	WITHOUT_CLASSIFICATION	0.001590106220407436	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9992749734180161	WITHOUT_CLASSIFICATION	7.250265819838461E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999444421979938	WITHOUT_CLASSIFICATION	5.555780200620518E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.703732445547028	WITHOUT_CLASSIFICATION	0.29626755445297204	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9711081215362741	WITHOUT_CLASSIFICATION	0.028891878463725918	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9989877096368741	WITHOUT_CLASSIFICATION	0.0010122903631259558	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9979767639034529	WITHOUT_CLASSIFICATION	0.002023236096547189	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9988158881888434	WITHOUT_CLASSIFICATION	0.0011841118111566035	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.99962229436889	WITHOUT_CLASSIFICATION	3.7770563111002E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995808338017669	WITHOUT_CLASSIFICATION	4.191661982331413E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9989983505437325	WITHOUT_CLASSIFICATION	0.0010016494562674445	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9861570006963712	WITHOUT_CLASSIFICATION	0.01384299930362864	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9992786094027957	WITHOUT_CLASSIFICATION	7.213905972042664E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6668249006025584	WITHOUT_CLASSIFICATION	0.33317509939744155	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9987979304881367	WITHOUT_CLASSIFICATION	0.0012020695118632276	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.990152587613125	WITHOUT_CLASSIFICATION	0.009847412386874985	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9998778221550463	WITHOUT_CLASSIFICATION	1.2217784495360587E-4	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9961675446711852	WITHOUT_CLASSIFICATION	0.003832455328814924	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994115080730047	WITHOUT_CLASSIFICATION	5.884919269952964E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993844498242349	WITHOUT_CLASSIFICATION	6.155501757650705E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.6787021234107001	WITHOUT_CLASSIFICATION	0.3212978765892999	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995903179187353	WITHOUT_CLASSIFICATION	4.0968208126465334E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999876127407176	WITHOUT_CLASSIFICATION	1.2387259282395913E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999854941530899	WITHOUT_CLASSIFICATION	1.4505846910104424E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999854941530899	WITHOUT_CLASSIFICATION	1.4505846910104424E-4	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997831791670257	WITHOUT_CLASSIFICATION	2.168208329741553E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999960848272165	WITHOUT_CLASSIFICATION	3.915172783480532E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9997574258239169	WITHOUT_CLASSIFICATION	2.4257417608313262E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998081087704949	WITHOUT_CLASSIFICATION	1.9189122950506127E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9983105320477352	WITHOUT_CLASSIFICATION	0.001689467952264654	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999193316150577	WITHOUT_CLASSIFICATION	8.066838494223375E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9991982041833809	WITHOUT_CLASSIFICATION	8.017958166189499E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.999774970649587	WITHOUT_CLASSIFICATION	2.2502935041294328E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.998663538497589	WITHOUT_CLASSIFICATION	0.00133646150241091	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997116137349729	WITHOUT_CLASSIFICATION	2.8838626502715746E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997011796785504	WITHOUT_CLASSIFICATION	2.988203214495792E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996453994694283	WITHOUT_CLASSIFICATION	3.5460053057163404E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9900230468450987	WITHOUT_CLASSIFICATION	0.009976953154901299	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9929386613346946	WITHOUT_CLASSIFICATION	0.00706133866530542	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9849024179024395	WITHOUT_CLASSIFICATION	0.015097582097560493	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999983312615921	WITHOUT_CLASSIFICATION	1.6687384079355582E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9954643927088171	WITHOUT_CLASSIFICATION	0.004535607291182838	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9966364630488861	WITHOUT_CLASSIFICATION	0.0033635369511138447	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9971085330980587	WITHOUT_CLASSIFICATION	0.002891466901941281	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9479178257517077	WITHOUT_CLASSIFICATION	0.05208217424829224	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9849024179024395	WITHOUT_CLASSIFICATION	0.015097582097560493	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9849024179024395	WITHOUT_CLASSIFICATION	0.015097582097560493	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9899356581283105	WITHOUT_CLASSIFICATION	0.010064341871689518	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9992287053369048	WITHOUT_CLASSIFICATION	7.71294663095183E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9932127943094837	WITHOUT_CLASSIFICATION	0.006787205690516301	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9985105775210138	WITHOUT_CLASSIFICATION	0.0014894224789861765	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9992770957809012	WITHOUT_CLASSIFICATION	7.229042190987139E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9861570006963712	WITHOUT_CLASSIFICATION	0.01384299930362864	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9987334979409843	WITHOUT_CLASSIFICATION	0.0012665020590157967	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994158375830845	WITHOUT_CLASSIFICATION	5.84162416915534E-4	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9968218842440779	WITHOUT_CLASSIFICATION	0.003178115755922006	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994940722957249	WITHOUT_CLASSIFICATION	0.00505927704275101	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9993855369599268	WITHOUT_CLASSIFICATION	6.144630400731917E-4	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989297398266062	WITHOUT_CLASSIFICATION	0.0010702601733937965	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988669806524665	WITHOUT_CLASSIFICATION	0.0011330193475335508	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988669806524665	WITHOUT_CLASSIFICATION	0.0011330193475335508	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988669806524665	WITHOUT_CLASSIFICATION	0.0011330193475335508	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988669806524665	WITHOUT_CLASSIFICATION	0.0011330193475335508	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986585164999559	WITHOUT_CLASSIFICATION	0.0013414835000441386	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999966330135921	WITHOUT_CLASSIFICATION	3.3669864079349186E-6	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181939048013	WITHOUT_CLASSIFICATION	4.818060951986011E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9301756264160338	WITHOUT_CLASSIFICATION	0.06982437358396618	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9650039418571341	WITHOUT_CLASSIFICATION	0.0349960581428658	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995718355092926	WITHOUT_CLASSIFICATION	4.281644907073253E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996268187401058	WITHOUT_CLASSIFICATION	3.731812598940858E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9936366920909518	WITHOUT_CLASSIFICATION	0.006363307909048238	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9132222290688098	WITHOUT_CLASSIFICATION	0.08677777093119016	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996467266287552	WITHOUT_CLASSIFICATION	3.532733712448437E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.999153123709866	WITHOUT_CLASSIFICATION	8.4687629013391E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9965178176445508	WITHOUT_CLASSIFICATION	0.0034821823554493205	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9981635221993597	WITHOUT_CLASSIFICATION	0.0018364778006403142	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9997909931796746	WITHOUT_CLASSIFICATION	2.0900682032552902E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9997909931796746	WITHOUT_CLASSIFICATION	2.0900682032552902E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9997909931796746	WITHOUT_CLASSIFICATION	2.0900682032552902E-4	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9995952525005969	WITHOUT_CLASSIFICATION	4.04747499403128E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9995587704109251	WITHOUT_CLASSIFICATION	4.4122958907497794E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9994808288934522	WITHOUT_CLASSIFICATION	5.191711065476874E-4	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995702093382456	WITHOUT_CLASSIFICATION	4.2979066175442767E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995702093382456	WITHOUT_CLASSIFICATION	4.2979066175442767E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999201564210665	WITHOUT_CLASSIFICATION	7.98435789335417E-5	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999399231019577	WITHOUT_CLASSIFICATION	6.007689804229656E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999849464995137	WITHOUT_CLASSIFICATION	1.505350048623379E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9997329070554892	WITHOUT_CLASSIFICATION	2.6709294451071657E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9974038667638448	WITHOUT_CLASSIFICATION	0.0025961332361551536	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.992306391445509	WITHOUT_CLASSIFICATION	0.007693608554490996	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994404557405858	WITHOUT_CLASSIFICATION	5.595442594142011E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9997263723109469	WITHOUT_CLASSIFICATION	2.7362768905314953E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9996159464322301	WITHOUT_CLASSIFICATION	3.8405356776990436E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.99988989235743	WITHOUT_CLASSIFICATION	1.1010764257005812E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9889492010135783	WITHOUT_CLASSIFICATION	0.011050798986421705	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9942209549236122	WITHOUT_CLASSIFICATION	0.0057790450763878605	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9937683549258934	WITHOUT_CLASSIFICATION	0.006231645074106596	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9997786369900742	WITHOUT_CLASSIFICATION	2.2136300992586064E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999944829220413	WITHOUT_CLASSIFICATION	5.517077958628764E-6	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999995879129584	WITHOUT_CLASSIFICATION	4.1208704172036784E-7	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999906714079164	WITHOUT_CLASSIFICATION	9.328592083475712E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999444391825885	WITHOUT_CLASSIFICATION	5.556081741144019E-5	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9890033060735445	WITHOUT_CLASSIFICATION	0.01099669392645544	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9995609597854103	WITHOUT_CLASSIFICATION	4.3904021458976173E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.999856720617933	WITHOUT_CLASSIFICATION	1.43279382066931E-4	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9995095776064125	WITHOUT_CLASSIFICATION	4.904223935876099E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999605037167455	WITHOUT_CLASSIFICATION	3.94962832545114E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999577024206593	WITHOUT_CLASSIFICATION	4.229757934068368E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.920164115792695	WITHOUT_CLASSIFICATION	0.07983588420730509	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997563274460837	WITHOUT_CLASSIFICATION	2.436725539163449E-4	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997744601100828	WITHOUT_CLASSIFICATION	2.2553988991710542E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9987999065052411	WITHOUT_CLASSIFICATION	0.0012000934947588922	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999829540651491	WITHOUT_CLASSIFICATION	1.7045934850909976E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9948006648585186	WITHOUT_CLASSIFICATION	0.00519933514148132	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9789351801353423	WITHOUT_CLASSIFICATION	0.02106481986465774	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999261976273046	WITHOUT_CLASSIFICATION	7.38023726953944E-5	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9947113224106435	WITHOUT_CLASSIFICATION	0.005288677589356414	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9919648430486413	WITHOUT_CLASSIFICATION	0.00803515695135871	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997645289350778	WITHOUT_CLASSIFICATION	2.3547106492205627E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.7453628287669036	WITHOUT_CLASSIFICATION	0.25463717123309637	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9922134389907808	WITHOUT_CLASSIFICATION	0.007786561009219057	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999311125932605	WITHOUT_CLASSIFICATION	6.888740673948975E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9955068639810558	WITHOUT_CLASSIFICATION	0.004493136018944186	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9996812930154823	WITHOUT_CLASSIFICATION	3.1870698451777994E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.999547218505322	WITHOUT_CLASSIFICATION	4.5278149467789384E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995100607553283	WITHOUT_CLASSIFICATION	4.899392446716106E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999439668211628	WITHOUT_CLASSIFICATION	5.6033178837195016E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999933995006334	WITHOUT_CLASSIFICATION	6.600499366600846E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9984929059872112	WITHOUT_CLASSIFICATION	0.0015070940127887796	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9983477223816782	WITHOUT_CLASSIFICATION	0.0016522776183218065	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999477796350894	WITHOUT_CLASSIFICATION	5.222036491069292E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999758282197707	WITHOUT_CLASSIFICATION	2.4171780229225882E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9993444736324104	WITHOUT_CLASSIFICATION	6.555263675895713E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9976229593001015	WITHOUT_CLASSIFICATION	0.0023770406998985	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9995548801288492	WITHOUT_CLASSIFICATION	4.4511987115087914E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9940720860474207	WITHOUT_CLASSIFICATION	0.005927913952579263	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9977293003748028	WITHOUT_CLASSIFICATION	0.0022706996251972717	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.997499387118082	WITHOUT_CLASSIFICATION	0.0025006128819180656	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.998304914115091	WITHOUT_CLASSIFICATION	0.0016950858849090434	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999899049638725	WITHOUT_CLASSIFICATION	1.009503612746744E-5	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9867952236842797	WITHOUT_CLASSIFICATION	0.01320477631572035	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9992454396850765	WITHOUT_CLASSIFICATION	7.545603149234386E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9950234659696336	WITHOUT_CLASSIFICATION	0.004976534030366425	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9981781722377236	WITHOUT_CLASSIFICATION	0.0018218277622764015	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9996178380014185	WITHOUT_CLASSIFICATION	3.8216199858151007E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.7525655125676672	WITHOUT_CLASSIFICATION	0.24743448743233282	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9962280294768568	WITHOUT_CLASSIFICATION	0.0037719705231430613	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.999613260963031	WITHOUT_CLASSIFICATION	3.867390369690564E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998903886123783	WITHOUT_CLASSIFICATION	1.0961138762169083E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9905176709464327	WITHOUT_CLASSIFICATION	0.009482329053567363	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999634085744695	WITHOUT_CLASSIFICATION	3.659142553053878E-5	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9996157146628666	WITHOUT_CLASSIFICATION	3.84285337133374E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9986871437820778	WITHOUT_CLASSIFICATION	0.001312856217922277	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9954109888925347	WITHOUT_CLASSIFICATION	0.004589011107465328	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999944840231928	WITHOUT_CLASSIFICATION	5.51597680712123E-6	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999087354364365	WITHOUT_CLASSIFICATION	9.126456356348364E-5	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9995107334647454	WITHOUT_CLASSIFICATION	4.892665352546324E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9974942144569107	WITHOUT_CLASSIFICATION	0.002505785543089254	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9739719781579451	WITHOUT_CLASSIFICATION	0.026028021842054865	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9976407080697167	WITHOUT_CLASSIFICATION	0.002359291930283216	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9990338020085584	WITHOUT_CLASSIFICATION	9.661979914415656E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.585264576554928	WITHOUT_CLASSIFICATION	0.414735423445072	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.9187718573341304	DESIGN	0.0812281426658697	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9862571844666473	WITHOUT_CLASSIFICATION	0.013742815533352567	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9996742472514337	WITHOUT_CLASSIFICATION	3.257527485663312E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9979572043634923	WITHOUT_CLASSIFICATION	0.0020427956365077268	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9904223997887618	WITHOUT_CLASSIFICATION	0.009577600211238232	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9944967504516952	WITHOUT_CLASSIFICATION	0.005503249548304762	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999004159472494	WITHOUT_CLASSIFICATION	9.958405275058107E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9992869062533155	WITHOUT_CLASSIFICATION	7.130937466845361E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.999873443579885	WITHOUT_CLASSIFICATION	1.2655642011506058E-4	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996257940964463	WITHOUT_CLASSIFICATION	3.7420590355381403E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9995965627461642	WITHOUT_CLASSIFICATION	4.0343725383589944E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9995667089149547	WITHOUT_CLASSIFICATION	4.332910850453783E-4	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9997806213645108	WITHOUT_CLASSIFICATION	2.1937863548908618E-4	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9994970328649763	WITHOUT_CLASSIFICATION	5.02967135023749E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9970760625142093	WITHOUT_CLASSIFICATION	0.0029239374857906574	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9992365029162797	WITHOUT_CLASSIFICATION	7.63497083720352E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9991948300132113	WITHOUT_CLASSIFICATION	8.05169986788598E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9991948300132113	WITHOUT_CLASSIFICATION	8.05169986788598E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999920946107288	WITHOUT_CLASSIFICATION	7.90538927119455E-5	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9906319952272123	WITHOUT_CLASSIFICATION	0.00936800477278773	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9990362725256616	WITHOUT_CLASSIFICATION	9.637274743383539E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9937501476395193	WITHOUT_CLASSIFICATION	0.0062498523604807696	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9990659220062372	WITHOUT_CLASSIFICATION	9.340779937628561E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9992797585612027	WITHOUT_CLASSIFICATION	7.202414387972931E-4	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9994871983322892	WITHOUT_CLASSIFICATION	5.128016677108437E-4	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997116730972556	WITHOUT_CLASSIFICATION	2.883269027443176E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9993527678207629	WITHOUT_CLASSIFICATION	6.472321792370673E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.998695435638545	WITHOUT_CLASSIFICATION	0.0013045643614550257	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997965814965244	WITHOUT_CLASSIFICATION	2.0341850347569185E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999802230161189	WITHOUT_CLASSIFICATION	1.9776983881079695E-5	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997249962961141	WITHOUT_CLASSIFICATION	2.750037038859378E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999945464983145	WITHOUT_CLASSIFICATION	5.4535016854700606E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9996354433576583	WITHOUT_CLASSIFICATION	3.6455664234172347E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999791741088354	WITHOUT_CLASSIFICATION	2.0825891164587706E-5	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9903166800481956	WITHOUT_CLASSIFICATION	0.009683319951804376	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9903166800481956	WITHOUT_CLASSIFICATION	0.009683319951804376	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999796280887566	WITHOUT_CLASSIFICATION	2.0371911243346488E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9991023125740062	WITHOUT_CLASSIFICATION	8.976874259939226E-4	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.999496083806163	WITHOUT_CLASSIFICATION	5.039161938370619E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996436672361569	WITHOUT_CLASSIFICATION	3.563327638430904E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9995640526022633	WITHOUT_CLASSIFICATION	4.359473977366407E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996796014293661	WITHOUT_CLASSIFICATION	3.203985706339922E-4	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999078571286061	WITHOUT_CLASSIFICATION	9.214287139391072E-5	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9997304505054915	WITHOUT_CLASSIFICATION	2.695494945084742E-4	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997274485487692	WITHOUT_CLASSIFICATION	2.7255145123085856E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9966401541682742	WITHOUT_CLASSIFICATION	0.00335984583172566	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9966401541682742	WITHOUT_CLASSIFICATION	0.00335984583172566	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.999957655831345	WITHOUT_CLASSIFICATION	4.2344168654919233E-5	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.99762999416387	WITHOUT_CLASSIFICATION	0.0023700058361299575	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9994422780354593	WITHOUT_CLASSIFICATION	5.577219645407438E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999100077100099	WITHOUT_CLASSIFICATION	8.999228999008671E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9994422780354593	WITHOUT_CLASSIFICATION	5.577219645407438E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999996171873071	WITHOUT_CLASSIFICATION	3.8281269293081255E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.5658346915465701	DESIGN	0.43416530845343	WITHOUT_CLASSIFICATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9992307085492363	WITHOUT_CLASSIFICATION	7.692914507635556E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.99566470439848	WITHOUT_CLASSIFICATION	0.0043352956015199895	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9994419789084188	WITHOUT_CLASSIFICATION	5.580210915812014E-4	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9976275388302112	WITHOUT_CLASSIFICATION	0.0023724611697889006	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.8821382936380188	WITHOUT_CLASSIFICATION	0.11786170636198126	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9988681476189267	WITHOUT_CLASSIFICATION	0.001131852381073315	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9996761608512378	WITHOUT_CLASSIFICATION	3.2383914876225797E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9993907201056467	WITHOUT_CLASSIFICATION	6.092798943532746E-4	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9962325722274883	WITHOUT_CLASSIFICATION	0.003767427772511695	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9990425909907106	WITHOUT_CLASSIFICATION	9.574090092893428E-4	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997079615418614	WITHOUT_CLASSIFICATION	2.9203845813872287E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.999749850011164	WITHOUT_CLASSIFICATION	2.501499888359787E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9585731911491507	WITHOUT_CLASSIFICATION	0.04142680885084926	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9992872412642803	WITHOUT_CLASSIFICATION	7.127587357196179E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9992503178762423	WITHOUT_CLASSIFICATION	7.496821237576757E-4	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9995890990224081	WITHOUT_CLASSIFICATION	4.10900977591837E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999636639854396	WITHOUT_CLASSIFICATION	3.6336014560298706E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9987297868105252	WITHOUT_CLASSIFICATION	0.0012702131894748731	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9990952212716783	WITHOUT_CLASSIFICATION	9.047787283217355E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9965732215702943	WITHOUT_CLASSIFICATION	0.003426778429705708	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999834853759251	WITHOUT_CLASSIFICATION	1.6514624074934506E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.997919330654517	WITHOUT_CLASSIFICATION	0.0020806693454830396	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.997542100191873	WITHOUT_CLASSIFICATION	0.002457899808127088	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999933478893425	WITHOUT_CLASSIFICATION	6.652110657509253E-6	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.8579449704471268	WITHOUT_CLASSIFICATION	0.14205502955287316	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9990013196422548	WITHOUT_CLASSIFICATION	9.98680357745192E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9950948108466844	WITHOUT_CLASSIFICATION	0.004905189153315634	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9974752434728522	WITHOUT_CLASSIFICATION	0.002524756527147717	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999507063181529	WITHOUT_CLASSIFICATION	4.929368184718413E-5	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9996422285309265	WITHOUT_CLASSIFICATION	3.577714690733988E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9997253014365388	WITHOUT_CLASSIFICATION	2.746985634611978E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9997253014365388	WITHOUT_CLASSIFICATION	2.746985634611978E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9995076379418519	WITHOUT_CLASSIFICATION	4.923620581481698E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9993243278614022	WITHOUT_CLASSIFICATION	6.75672138597742E-4	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9995855172624967	WITHOUT_CLASSIFICATION	4.144827375032468E-4	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.997450417616136	WITHOUT_CLASSIFICATION	0.002549582383864134	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.993855708347034	WITHOUT_CLASSIFICATION	0.006144291652966061	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9992662831100464	WITHOUT_CLASSIFICATION	7.337168899536654E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9781065188014801	WITHOUT_CLASSIFICATION	0.02189348119851987	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9997016673384337	WITHOUT_CLASSIFICATION	2.983326615662114E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9995076379418519	WITHOUT_CLASSIFICATION	4.923620581481698E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9993243278614022	WITHOUT_CLASSIFICATION	6.75672138597742E-4	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999104132498723	WITHOUT_CLASSIFICATION	8.958675012772364E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9992301198852748	WITHOUT_CLASSIFICATION	7.69880114725131E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9992137651932811	WITHOUT_CLASSIFICATION	7.86234806718784E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9996436678282653	WITHOUT_CLASSIFICATION	3.563321717345834E-4	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9992455511054942	WITHOUT_CLASSIFICATION	7.544488945057666E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.987276063317902	WITHOUT_CLASSIFICATION	0.012723936682098036	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999079270389684	WITHOUT_CLASSIFICATION	9.207296103163397E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989681907568876	WITHOUT_CLASSIFICATION	0.00103180924311249	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9995772021081089	WITHOUT_CLASSIFICATION	4.227978918911757E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9313439729865005	DESIGN	0.06865602701349953	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999324142087421	WITHOUT_CLASSIFICATION	6.758579125791626E-5	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9313439729865005	DESIGN	0.06865602701349953	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998282390405369	WITHOUT_CLASSIFICATION	1.7176095946321037E-4	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996178380014185	WITHOUT_CLASSIFICATION	3.8216199858151007E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998282390405369	WITHOUT_CLASSIFICATION	1.7176095946321037E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996700592046143	WITHOUT_CLASSIFICATION	3.299407953857425E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9995096126139059	WITHOUT_CLASSIFICATION	4.903873860940462E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989681907568876	WITHOUT_CLASSIFICATION	0.00103180924311249	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989681907568876	WITHOUT_CLASSIFICATION	0.00103180924311249	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.99945820711787	WITHOUT_CLASSIFICATION	5.41792882129941E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9994603299359262	WITHOUT_CLASSIFICATION	5.396700640738692E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.99945820711787	WITHOUT_CLASSIFICATION	5.41792882129941E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9992580439250052	WITHOUT_CLASSIFICATION	7.419560749949125E-4	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9991966856727146	WITHOUT_CLASSIFICATION	8.033143272854482E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9966468602246195	WITHOUT_CLASSIFICATION	0.003353139775380519	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5695892716270121	WITHOUT_CLASSIFICATION	0.43041072837298777	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997591472483185	WITHOUT_CLASSIFICATION	2.4085275168156972E-4	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9998369395520597	WITHOUT_CLASSIFICATION	1.6306044794027767E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9992787581612775	WITHOUT_CLASSIFICATION	7.21241838722417E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9995073291295892	WITHOUT_CLASSIFICATION	4.926708704108655E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9998028682678539	WITHOUT_CLASSIFICATION	1.9713173214619078E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9962370368317924	WITHOUT_CLASSIFICATION	0.003762963168207568	DESIGN
types	WITHOUT_CLASSIFICATION	0.9991881199458184	WITHOUT_CLASSIFICATION	8.118800541816855E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999543272431698	WITHOUT_CLASSIFICATION	4.567275683028792E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9986924647793823	WITHOUT_CLASSIFICATION	0.0013075352206176974	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9989012321310674	WITHOUT_CLASSIFICATION	0.0010987678689326561	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9988242481913747	WITHOUT_CLASSIFICATION	0.0011757518086253024	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999499558476046	WITHOUT_CLASSIFICATION	5.004415239549689E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997079615418614	WITHOUT_CLASSIFICATION	2.9203845813872287E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.999643471819558	WITHOUT_CLASSIFICATION	3.5652818044201924E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996881436049067	WITHOUT_CLASSIFICATION	3.1185639509331554E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999474517388024	WITHOUT_CLASSIFICATION	5.2548261197662036E-5	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997079615418614	WITHOUT_CLASSIFICATION	2.9203845813872287E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.998635985568444	WITHOUT_CLASSIFICATION	0.0013640144315559186	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9994499484487214	WITHOUT_CLASSIFICATION	5.500515512786116E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9582682786924619	WITHOUT_CLASSIFICATION	0.04173172130753804	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9828779459551894	WITHOUT_CLASSIFICATION	0.017122054044810642	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9477378683021259	WITHOUT_CLASSIFICATION	0.05226213169787405	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9453056944438402	WITHOUT_CLASSIFICATION	0.054694305556159804	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.7667968712961651	WITHOUT_CLASSIFICATION	0.23320312870383492	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.99352363022023	WITHOUT_CLASSIFICATION	0.0064763697797699405	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997591472483185	WITHOUT_CLASSIFICATION	2.4085275168156972E-4	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9984105365898867	WITHOUT_CLASSIFICATION	0.0015894634101133464	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9996695828224744	WITHOUT_CLASSIFICATION	3.3041717752567293E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6175056312610572	WITHOUT_CLASSIFICATION	0.3824943687389427	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.999617027956484	WITHOUT_CLASSIFICATION	3.8297204351601727E-4	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998500513522374	WITHOUT_CLASSIFICATION	1.4994864776267207E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9998984730448116	WITHOUT_CLASSIFICATION	1.0152695518834548E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9992580439250052	WITHOUT_CLASSIFICATION	7.419560749949125E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9992580439250052	WITHOUT_CLASSIFICATION	7.419560749949125E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999574936501856	WITHOUT_CLASSIFICATION	4.250634981434361E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999372156643275	WITHOUT_CLASSIFICATION	6.27843356725837E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9980890251251533	WITHOUT_CLASSIFICATION	0.0019109748748466896	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999991652536384	WITHOUT_CLASSIFICATION	8.34746361616945E-7	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9989239216403327	WITHOUT_CLASSIFICATION	0.0010760783596672255	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9989912842840738	WITHOUT_CLASSIFICATION	0.0010087157159262342	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.8871739527010323	WITHOUT_CLASSIFICATION	0.11282604729896764	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999896426541385	WITHOUT_CLASSIFICATION	1.0357345861529065E-5	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9972571805799662	WITHOUT_CLASSIFICATION	0.0027428194200338468	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.998837105293243	WITHOUT_CLASSIFICATION	0.0011628947067570232	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9994059265934665	WITHOUT_CLASSIFICATION	5.940734065334124E-4	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9986924647793823	WITHOUT_CLASSIFICATION	0.0013075352206176974	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9995076379418519	WITHOUT_CLASSIFICATION	4.923620581481698E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9994059265934665	WITHOUT_CLASSIFICATION	5.940734065334124E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996974112292258	WITHOUT_CLASSIFICATION	3.0258877077407077E-4	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9874113996353101	WITHOUT_CLASSIFICATION	0.012588600364689818	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9997120837013247	WITHOUT_CLASSIFICATION	2.879162986753099E-4	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.7437215572030395	WITHOUT_CLASSIFICATION	0.2562784427969605	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9973556496401301	WITHOUT_CLASSIFICATION	0.0026443503598698394	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9988447414364617	WITHOUT_CLASSIFICATION	0.0011552585635382598	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9500758316534472	WITHOUT_CLASSIFICATION	0.049924168346552826	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999915014119013	WITHOUT_CLASSIFICATION	8.498588098596559E-6	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.999646899111437	WITHOUT_CLASSIFICATION	3.5310088856307025E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.996692550887087	WITHOUT_CLASSIFICATION	0.003307449112912986	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995808548538433	WITHOUT_CLASSIFICATION	4.1914514615671195E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995808548538433	WITHOUT_CLASSIFICATION	4.1914514615671195E-4	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9810450998360268	WITHOUT_CLASSIFICATION	0.018954900163973235	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9975722625063588	WITHOUT_CLASSIFICATION	0.002427737493641256	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9994059265934665	WITHOUT_CLASSIFICATION	5.940734065334124E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9973556496401301	WITHOUT_CLASSIFICATION	0.0026443503598698394	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9500758316534472	WITHOUT_CLASSIFICATION	0.049924168346552826	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9989243949672463	WITHOUT_CLASSIFICATION	0.0010756050327536551	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9952223864938301	WITHOUT_CLASSIFICATION	0.004777613506169937	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998875255698054	WITHOUT_CLASSIFICATION	1.1247443019464333E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9994299378697781	WITHOUT_CLASSIFICATION	5.70062130221917E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999141158254443	WITHOUT_CLASSIFICATION	8.58841745557588E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9992421345673647	WITHOUT_CLASSIFICATION	7.578654326353904E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996974112292258	WITHOUT_CLASSIFICATION	3.0258877077407077E-4	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997536353023379	WITHOUT_CLASSIFICATION	2.463646976621163E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998824098405995	WITHOUT_CLASSIFICATION	1.1759015940043974E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.997459685902914	WITHOUT_CLASSIFICATION	0.002540314097086052	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9997876302670665	WITHOUT_CLASSIFICATION	2.123697329335085E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9996705329106153	WITHOUT_CLASSIFICATION	3.294670893847317E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9997628275662193	WITHOUT_CLASSIFICATION	2.3717243378077948E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996700592046143	WITHOUT_CLASSIFICATION	3.299407953857425E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9864194754415382	WITHOUT_CLASSIFICATION	0.013580524558461827	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.999997949642649	WITHOUT_CLASSIFICATION	2.050357351018604E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9956885562545009	WITHOUT_CLASSIFICATION	0.004311443745499142	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9995865452895902	WITHOUT_CLASSIFICATION	4.1345471040970535E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9994339561906187	WITHOUT_CLASSIFICATION	5.660438093812327E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9996779760115871	WITHOUT_CLASSIFICATION	3.2202398841285314E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9995783461059584	WITHOUT_CLASSIFICATION	4.2165389404163784E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999156286214562	WITHOUT_CLASSIFICATION	8.437137854370785E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9992421345673647	WITHOUT_CLASSIFICATION	7.578654326353904E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998807491380004	WITHOUT_CLASSIFICATION	1.192508619995823E-4	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9990558339025384	WITHOUT_CLASSIFICATION	9.441660974615207E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.999686616301262	WITHOUT_CLASSIFICATION	3.133836987380705E-4	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9956224571674112	WITHOUT_CLASSIFICATION	0.00437754283258885	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999821737156757	WITHOUT_CLASSIFICATION	1.7826284324284986E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9992692771415486	WITHOUT_CLASSIFICATION	7.307228584513235E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.99926052759387	WITHOUT_CLASSIFICATION	7.394724061301585E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998977087628538	WITHOUT_CLASSIFICATION	1.0229123714617484E-4	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998679695230566	WITHOUT_CLASSIFICATION	1.320304769434964E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999243600663003	WITHOUT_CLASSIFICATION	7.563993369976271E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9975059334111746	WITHOUT_CLASSIFICATION	0.0024940665888255097	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9997533320594142	WITHOUT_CLASSIFICATION	2.4666794058573343E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9998988273231386	WITHOUT_CLASSIFICATION	1.0117267686138085E-4	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9998085147336946	WITHOUT_CLASSIFICATION	1.914852663054619E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.8742318921669214	WITHOUT_CLASSIFICATION	0.12576810783307857	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9968810570706046	WITHOUT_CLASSIFICATION	0.0031189429293953675	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9978286677866129	WITHOUT_CLASSIFICATION	0.002171332213386946	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.999556511476888	WITHOUT_CLASSIFICATION	4.4348852311194294E-4	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9997164907543283	WITHOUT_CLASSIFICATION	2.835092456716477E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9991904323161103	WITHOUT_CLASSIFICATION	8.095676838897707E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9996560703321219	WITHOUT_CLASSIFICATION	3.439296678781521E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9976496852943081	WITHOUT_CLASSIFICATION	0.0023503147056919012	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.653156681625349	WITHOUT_CLASSIFICATION	0.3468433183746511	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9862270625456363	WITHOUT_CLASSIFICATION	0.013772937454363749	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9943456224422432	WITHOUT_CLASSIFICATION	0.005654377557756788	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9997425047609168	WITHOUT_CLASSIFICATION	2.57495239083252E-4	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5829431026184652	DESIGN	0.41705689738153473	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9915244020193642	WITHOUT_CLASSIFICATION	0.008475597980635734	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999406334596155	WITHOUT_CLASSIFICATION	5.936654038450528E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999829082561541	WITHOUT_CLASSIFICATION	1.7091743845902435E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8559293238478697	WITHOUT_CLASSIFICATION	0.14407067615213023	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.970869819394037	WITHOUT_CLASSIFICATION	0.029130180605963035	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9993162253208789	WITHOUT_CLASSIFICATION	6.837746791210904E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9994374642591535	WITHOUT_CLASSIFICATION	5.625357408465203E-4	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9914612199341641	WITHOUT_CLASSIFICATION	0.008538780065835916	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9993162253208789	WITHOUT_CLASSIFICATION	6.837746791210904E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.970869819394037	WITHOUT_CLASSIFICATION	0.029130180605963035	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9994374642591535	WITHOUT_CLASSIFICATION	5.625357408465203E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999414665193761	WITHOUT_CLASSIFICATION	5.853348062392929E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9994925490411418	WITHOUT_CLASSIFICATION	5.074509588582239E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999758288038847	WITHOUT_CLASSIFICATION	2.4171196115202968E-5	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998815348048062	WITHOUT_CLASSIFICATION	1.184651951938231E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9997272007737871	WITHOUT_CLASSIFICATION	2.7279922621283715E-4	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.7662199046051847	WITHOUT_CLASSIFICATION	0.2337800953948153	DESIGN
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9952165315395819	WITHOUT_CLASSIFICATION	0.004783468460418086	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.99906686029684	WITHOUT_CLASSIFICATION	9.331397031599897E-4	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.999325702718713	WITHOUT_CLASSIFICATION	6.742972812870965E-4	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999646851590383	WITHOUT_CLASSIFICATION	3.5314840961692454E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999058710788243	WITHOUT_CLASSIFICATION	9.412892117560565E-5	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9998952543919326	WITHOUT_CLASSIFICATION	1.0474560806745486E-4	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9988361396183612	WITHOUT_CLASSIFICATION	0.0011638603816387944	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998815348048062	WITHOUT_CLASSIFICATION	1.184651951938231E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999221386601423	WITHOUT_CLASSIFICATION	7.786133985766545E-5	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.995406001454812	WITHOUT_CLASSIFICATION	0.0045939985451880225	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9823719939111942	WITHOUT_CLASSIFICATION	0.017628006088805683	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9299728844753762	WITHOUT_CLASSIFICATION	0.07002711552462385	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9999157165315335	WITHOUT_CLASSIFICATION	8.428346846643287E-5	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999632976837263	WITHOUT_CLASSIFICATION	3.670231627360969E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9770449301719399	WITHOUT_CLASSIFICATION	0.022955069828059962	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.999981471056527	WITHOUT_CLASSIFICATION	1.8528943473048334E-5	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9976792973146523	WITHOUT_CLASSIFICATION	0.0023207026853477777	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999955926103923	WITHOUT_CLASSIFICATION	4.407389607745363E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999639169877047	WITHOUT_CLASSIFICATION	3.608301229516733E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999639169877047	WITHOUT_CLASSIFICATION	3.608301229516733E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999951920528809	WITHOUT_CLASSIFICATION	4.8079471190898214E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999951920528809	WITHOUT_CLASSIFICATION	4.8079471190898214E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9988761236335256	WITHOUT_CLASSIFICATION	0.0011238763664743864	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9823719939111942	WITHOUT_CLASSIFICATION	0.017628006088805683	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9990685583028167	WITHOUT_CLASSIFICATION	9.314416971832844E-4	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9997499769895942	WITHOUT_CLASSIFICATION	2.5002301040579584E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9952683946164392	WITHOUT_CLASSIFICATION	0.004731605383560775	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9952683946164392	WITHOUT_CLASSIFICATION	0.004731605383560775	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999681017409723	WITHOUT_CLASSIFICATION	3.18982590277613E-5	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998434572707257	WITHOUT_CLASSIFICATION	1.5654272927430966E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9993039121702912	WITHOUT_CLASSIFICATION	6.960878297087583E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.999824760426055	WITHOUT_CLASSIFICATION	1.752395739450065E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8272617814012014	WITHOUT_CLASSIFICATION	0.1727382185987986	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999898715186384	WITHOUT_CLASSIFICATION	1.0128481361615122E-5	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.999317758338861	WITHOUT_CLASSIFICATION	6.822416611390579E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.7973169254653062	WITHOUT_CLASSIFICATION	0.20268307453469372	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9996930830745218	WITHOUT_CLASSIFICATION	3.069169254782637E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9954721355946121	WITHOUT_CLASSIFICATION	0.004527864405387893	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9997924037696749	WITHOUT_CLASSIFICATION	2.0759623032494618E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9998266328449111	WITHOUT_CLASSIFICATION	1.7336715508877953E-4	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9994520116260015	WITHOUT_CLASSIFICATION	5.479883739984716E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9997139303789425	WITHOUT_CLASSIFICATION	2.86069621057512E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9978329876635016	WITHOUT_CLASSIFICATION	0.0021670123364984305	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9985764650532278	WITHOUT_CLASSIFICATION	0.0014235349467721097	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878095940025245	WITHOUT_CLASSIFICATION	0.012190405997475414	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999689640810667	WITHOUT_CLASSIFICATION	3.103591893333759E-5	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9722807298942006	WITHOUT_CLASSIFICATION	0.027719270105799377	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9982178728686492	WITHOUT_CLASSIFICATION	0.0017821271313508181	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999066916480316	WITHOUT_CLASSIFICATION	9.330835196845276E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9983117218217067	WITHOUT_CLASSIFICATION	0.0016882781782932995	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997501420510253	WITHOUT_CLASSIFICATION	2.498579489746539E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998417446560438	WITHOUT_CLASSIFICATION	1.5825534395612066E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998081087704949	WITHOUT_CLASSIFICATION	1.9189122950506127E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998104914368514	WITHOUT_CLASSIFICATION	1.8950856314856813E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999243600663003	WITHOUT_CLASSIFICATION	7.563993369976271E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9997069337475567	WITHOUT_CLASSIFICATION	2.9306625244338063E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9811839119507987	WITHOUT_CLASSIFICATION	0.018816088049201325	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993296204379023	WITHOUT_CLASSIFICATION	6.703795620977027E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994689929833288	WITHOUT_CLASSIFICATION	5.310070166711707E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998572765551625	WITHOUT_CLASSIFICATION	1.427234448374898E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998572765551625	WITHOUT_CLASSIFICATION	1.427234448374898E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999954518951043	WITHOUT_CLASSIFICATION	4.5481048956278236E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9994161585844468	WITHOUT_CLASSIFICATION	5.838414155532445E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9992621509465139	WITHOUT_CLASSIFICATION	7.378490534861291E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9992621509465139	WITHOUT_CLASSIFICATION	7.378490534861291E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9946406080695694	WITHOUT_CLASSIFICATION	0.005359391930430517	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9971685859231121	WITHOUT_CLASSIFICATION	0.0028314140768877756	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.999184449567186	WITHOUT_CLASSIFICATION	8.155504328139307E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9992770957809012	WITHOUT_CLASSIFICATION	7.229042190987139E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9996569025219192	WITHOUT_CLASSIFICATION	3.430974780808125E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997078219810357	WITHOUT_CLASSIFICATION	2.9217801896429805E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9988104766136957	WITHOUT_CLASSIFICATION	0.0011895233863042688	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995926320793546	WITHOUT_CLASSIFICATION	4.073679206454058E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995926320793546	WITHOUT_CLASSIFICATION	4.073679206454058E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.8631267161022245	WITHOUT_CLASSIFICATION	0.13687328389777542	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.99933622323798	WITHOUT_CLASSIFICATION	6.637767620199988E-4	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.99933622323798	WITHOUT_CLASSIFICATION	6.637767620199988E-4	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9994295488208849	WITHOUT_CLASSIFICATION	5.704511791150768E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9996915275555556	WITHOUT_CLASSIFICATION	3.0847244444442534E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999165286769166	WITHOUT_CLASSIFICATION	8.3471323083378E-5	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9998387666793135	WITHOUT_CLASSIFICATION	1.612333206865397E-4	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9992237652671981	WITHOUT_CLASSIFICATION	7.762347328018626E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9867675968102491	WITHOUT_CLASSIFICATION	0.013232403189750925	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9990364226185988	WITHOUT_CLASSIFICATION	9.635773814012865E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999092743939184	WITHOUT_CLASSIFICATION	9.072560608149697E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9918069324944035	WITHOUT_CLASSIFICATION	0.008193067505596471	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9959450936156099	WITHOUT_CLASSIFICATION	0.004054906384390058	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9994293639395295	WITHOUT_CLASSIFICATION	5.706360604704315E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992598202776681	WITHOUT_CLASSIFICATION	7.40179722331873E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992598202776681	WITHOUT_CLASSIFICATION	7.40179722331873E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992598202776681	WITHOUT_CLASSIFICATION	7.40179722331873E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9992598202776681	WITHOUT_CLASSIFICATION	7.40179722331873E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9996814322431316	WITHOUT_CLASSIFICATION	3.185677568684896E-4	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9989991297290883	WITHOUT_CLASSIFICATION	0.0010008702709117165	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9993798987921826	WITHOUT_CLASSIFICATION	6.201012078174353E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999801255314503	WITHOUT_CLASSIFICATION	1.987446854969106E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9969260070831767	WITHOUT_CLASSIFICATION	0.0030739929168233657	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9985381936225949	WITHOUT_CLASSIFICATION	0.0014618063774051713	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9993044100672256	WITHOUT_CLASSIFICATION	6.955899327744276E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998590596559024	WITHOUT_CLASSIFICATION	1.409403440976069E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9996658657179492	WITHOUT_CLASSIFICATION	3.341342820507519E-4	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9969611177867471	WITHOUT_CLASSIFICATION	0.00303888221325277	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999252616966927	WITHOUT_CLASSIFICATION	7.473830330730627E-5	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9995415388345897	WITHOUT_CLASSIFICATION	4.584611654102137E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9923936253261404	WITHOUT_CLASSIFICATION	0.007606374673859579	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9997717766628479	WITHOUT_CLASSIFICATION	2.282233371521196E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999252616966927	WITHOUT_CLASSIFICATION	7.473830330730627E-5	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9914294483199946	DESIGN	0.00857055168000541	WITHOUT_CLASSIFICATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9905171083731173	WITHOUT_CLASSIFICATION	0.009482891626882666	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998562694174801	WITHOUT_CLASSIFICATION	1.437305825199188E-4	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9988347860773087	WITHOUT_CLASSIFICATION	0.001165213922691305	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9988745313007991	WITHOUT_CLASSIFICATION	0.0011254686992009228	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9947031490235745	WITHOUT_CLASSIFICATION	0.0052968509764255815	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9980949833209215	WITHOUT_CLASSIFICATION	0.0019050166790785456	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997680043791216	WITHOUT_CLASSIFICATION	2.319956208783415E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961288715368	WITHOUT_CLASSIFICATION	3.0387112846322394E-4	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9992013836594562	WITHOUT_CLASSIFICATION	7.986163405438785E-4	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996961288715368	WITHOUT_CLASSIFICATION	3.0387112846322394E-4	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998660226123302	WITHOUT_CLASSIFICATION	1.3397738766994437E-4	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9930717936131923	WITHOUT_CLASSIFICATION	0.0069282063868077	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9989936069810036	WITHOUT_CLASSIFICATION	0.0010063930189964005	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9995258961435147	WITHOUT_CLASSIFICATION	4.741038564851882E-4	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9699693015561851	WITHOUT_CLASSIFICATION	0.0300306984438149	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9996466548644084	WITHOUT_CLASSIFICATION	3.533451355916237E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999770826400715	WITHOUT_CLASSIFICATION	2.291735992849095E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9986628575947899	WITHOUT_CLASSIFICATION	0.001337142405210188	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.999770826400715	WITHOUT_CLASSIFICATION	2.291735992849095E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996503332440724	WITHOUT_CLASSIFICATION	3.496667559276107E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999858529571602	WITHOUT_CLASSIFICATION	1.4147042839804177E-4	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9991388495146196	WITHOUT_CLASSIFICATION	8.611504853804914E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9994541921004338	WITHOUT_CLASSIFICATION	5.458078995662E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9995575031915602	WITHOUT_CLASSIFICATION	4.424968084397597E-4	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997079615418614	WITHOUT_CLASSIFICATION	2.9203845813872287E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.999993573410428	WITHOUT_CLASSIFICATION	6.4265895719344755E-6	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9996466548644084	WITHOUT_CLASSIFICATION	3.533451355916237E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9986628575947899	WITHOUT_CLASSIFICATION	0.001337142405210188	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996503332440724	WITHOUT_CLASSIFICATION	3.496667559276107E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9947572585229123	WITHOUT_CLASSIFICATION	0.005242741477087717	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9995839911754743	WITHOUT_CLASSIFICATION	4.160088245257802E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9998413854488335	WITHOUT_CLASSIFICATION	1.5861455116656132E-4	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.999920639921015	WITHOUT_CLASSIFICATION	7.936007898505356E-5	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999306244741889	WITHOUT_CLASSIFICATION	6.937552581108036E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9867338200695553	WITHOUT_CLASSIFICATION	0.013266179930444572	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9997704726716509	WITHOUT_CLASSIFICATION	2.2952732834905708E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878095940025245	WITHOUT_CLASSIFICATION	0.012190405997475414	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.999858529571602	WITHOUT_CLASSIFICATION	1.4147042839804177E-4	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999422502100709	WITHOUT_CLASSIFICATION	5.774978992921371E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.99945820711787	WITHOUT_CLASSIFICATION	5.41792882129941E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999528729342675	WITHOUT_CLASSIFICATION	4.7127065732528624E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9996163162737064	WITHOUT_CLASSIFICATION	3.8368372629367495E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878095940025245	WITHOUT_CLASSIFICATION	0.012190405997475414	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9996729576007461	WITHOUT_CLASSIFICATION	3.270423992538088E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878095940025245	WITHOUT_CLASSIFICATION	0.012190405997475414	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9977469150590585	WITHOUT_CLASSIFICATION	0.002253084940941474	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9996508104679455	WITHOUT_CLASSIFICATION	3.491895320546397E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9989836080890907	WITHOUT_CLASSIFICATION	0.001016391910909342	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9996399215257662	WITHOUT_CLASSIFICATION	3.6007847423383927E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998889213570044	WITHOUT_CLASSIFICATION	1.1107864299553035E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9995892907814742	WITHOUT_CLASSIFICATION	4.1070921852578E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998018094343832	WITHOUT_CLASSIFICATION	1.9819056561670248E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996998735421793	WITHOUT_CLASSIFICATION	3.0012645782072773E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998083721225789	WITHOUT_CLASSIFICATION	1.9162787742121388E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.999316545776137	WITHOUT_CLASSIFICATION	6.834542238628474E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9935338542505967	WITHOUT_CLASSIFICATION	0.006466145749403303	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9986898288033651	WITHOUT_CLASSIFICATION	0.0013101711966349322	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9994627630352168	WITHOUT_CLASSIFICATION	5.372369647832836E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9996517388574868	WITHOUT_CLASSIFICATION	3.4826114251315665E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9975557325894485	WITHOUT_CLASSIFICATION	0.0024442674105515324	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998022692729405	WITHOUT_CLASSIFICATION	1.977307270594608E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9983567829482777	WITHOUT_CLASSIFICATION	0.0016432170517223026	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.5117431463778154	DESIGN	0.4882568536221847	WITHOUT_CLASSIFICATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9987442136024981	WITHOUT_CLASSIFICATION	0.0012557863975019685	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9733743287546296	WITHOUT_CLASSIFICATION	0.026625671245370484	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992694010973278	WITHOUT_CLASSIFICATION	7.305989026722147E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992694010973278	WITHOUT_CLASSIFICATION	7.305989026722147E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9987561825864358	WITHOUT_CLASSIFICATION	0.0012438174135641204	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9996887276299127	WITHOUT_CLASSIFICATION	3.1127237008725405E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9993598710129005	WITHOUT_CLASSIFICATION	6.401289870996133E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999978045644365	WITHOUT_CLASSIFICATION	2.195435563539979E-6	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998883245935231	WITHOUT_CLASSIFICATION	1.1167540647685232E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999265978275914	WITHOUT_CLASSIFICATION	7.340217240855054E-5	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9995828119933082	WITHOUT_CLASSIFICATION	4.1718800669176274E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9869661417639706	WITHOUT_CLASSIFICATION	0.013033858236029339	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.7638897659946442	WITHOUT_CLASSIFICATION	0.23611023400535577	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9994999851500834	WITHOUT_CLASSIFICATION	5.000148499166138E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9979035619288501	WITHOUT_CLASSIFICATION	0.0020964380711498616	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9906065147621724	WITHOUT_CLASSIFICATION	0.009393485237827561	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9994515068507855	WITHOUT_CLASSIFICATION	5.484931492143905E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9979697254570041	WITHOUT_CLASSIFICATION	0.0020302745429957554	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9999484204183001	WITHOUT_CLASSIFICATION	5.157958169980221E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999258730051769	WITHOUT_CLASSIFICATION	7.412699482312019E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996427289126996	WITHOUT_CLASSIFICATION	3.5727108730043586E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996427289126996	WITHOUT_CLASSIFICATION	3.5727108730043586E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999975058107385	WITHOUT_CLASSIFICATION	2.494189261482622E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996998735421793	WITHOUT_CLASSIFICATION	3.0012645782072773E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9915090880982315	WITHOUT_CLASSIFICATION	0.008490911901768546	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999900905440013	WITHOUT_CLASSIFICATION	9.909455998638402E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9996050706450131	WITHOUT_CLASSIFICATION	3.9492935498688106E-4	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997525178263645	WITHOUT_CLASSIFICATION	2.4748217363539506E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9997778295851514	WITHOUT_CLASSIFICATION	2.2217041484850963E-4	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9995360389645446	WITHOUT_CLASSIFICATION	4.63961035455376E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9984312175502984	WITHOUT_CLASSIFICATION	0.0015687824497016285	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9982130015946589	WITHOUT_CLASSIFICATION	0.001786998405341202	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9995388354872181	WITHOUT_CLASSIFICATION	4.6116451278180304E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9950676609575294	WITHOUT_CLASSIFICATION	0.004932339042470618	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999693825237005	WITHOUT_CLASSIFICATION	3.061747629945498E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9997583776467054	WITHOUT_CLASSIFICATION	2.4162235329458132E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999900853869056	WITHOUT_CLASSIFICATION	9.914613094391423E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9991644492371287	WITHOUT_CLASSIFICATION	8.355507628714376E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9988240281476688	WITHOUT_CLASSIFICATION	0.0011759718523312228	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999513709407176	WITHOUT_CLASSIFICATION	4.8629059282405704E-5	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.999877196176749	WITHOUT_CLASSIFICATION	1.2280382325107557E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9994574787611308	WITHOUT_CLASSIFICATION	5.425212388692343E-4	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9982861419734254	WITHOUT_CLASSIFICATION	0.0017138580265747489	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998326819332369	WITHOUT_CLASSIFICATION	1.6731806676302728E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9885839512547376	WITHOUT_CLASSIFICATION	0.011416048745262438	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.8089809009393116	WITHOUT_CLASSIFICATION	0.1910190990606883	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.999380403736019	WITHOUT_CLASSIFICATION	6.195962639809677E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999430095626072	WITHOUT_CLASSIFICATION	5.6990437392909836E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999620208943886	WITHOUT_CLASSIFICATION	3.7979105611480055E-5	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9972706438403911	WITHOUT_CLASSIFICATION	0.0027293561596089433	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9929165187510101	WITHOUT_CLASSIFICATION	0.007083481248989922	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9996405727537504	WITHOUT_CLASSIFICATION	3.594272462495072E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9993904045008918	WITHOUT_CLASSIFICATION	6.095954991081265E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999954200805212	WITHOUT_CLASSIFICATION	4.579919478795625E-6	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999882332296149	WITHOUT_CLASSIFICATION	1.1766770385067763E-5	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9981256507568077	WITHOUT_CLASSIFICATION	0.0018743492431923215	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9981048320329112	WITHOUT_CLASSIFICATION	0.0018951679670887473	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.99975996203937	WITHOUT_CLASSIFICATION	2.4003796062995052E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997427893177442	WITHOUT_CLASSIFICATION	2.5721068225579614E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9997671620893039	WITHOUT_CLASSIFICATION	2.3283791069617313E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9985171691514071	WITHOUT_CLASSIFICATION	0.0014828308485929287	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9985171691514071	WITHOUT_CLASSIFICATION	0.0014828308485929287	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9993364540331906	WITHOUT_CLASSIFICATION	6.635459668093685E-4	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997554589139479	WITHOUT_CLASSIFICATION	2.4454108605213463E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997142254087176	WITHOUT_CLASSIFICATION	2.8577459128244264E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997142254087176	WITHOUT_CLASSIFICATION	2.8577459128244264E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9978938178200966	WITHOUT_CLASSIFICATION	0.002106182179903463	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.999826494815105	WITHOUT_CLASSIFICATION	1.7350518489490805E-4	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9015517131092254	DESIGN	0.09844828689077467	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998370479726186	WITHOUT_CLASSIFICATION	1.6295202738146136E-4	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995613104860521	WITHOUT_CLASSIFICATION	4.386895139478296E-4	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994158409785912	WITHOUT_CLASSIFICATION	5.841590214087929E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998966183924745	WITHOUT_CLASSIFICATION	1.0338160752549141E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998966183924745	WITHOUT_CLASSIFICATION	1.0338160752549141E-4	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994158409785912	WITHOUT_CLASSIFICATION	5.841590214087929E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9828132347064443	WITHOUT_CLASSIFICATION	0.017186765293555725	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9992580439250052	WITHOUT_CLASSIFICATION	7.419560749949125E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.999508301664933	WITHOUT_CLASSIFICATION	4.916983350669266E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.999508301664933	WITHOUT_CLASSIFICATION	4.916983350669266E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999367972389744	WITHOUT_CLASSIFICATION	6.320276102552066E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9995607259120245	WITHOUT_CLASSIFICATION	4.392740879754431E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998812274302056	WITHOUT_CLASSIFICATION	0.0011877256979439847	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9997591881470026	WITHOUT_CLASSIFICATION	2.4081185299729054E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9994244706607388	WITHOUT_CLASSIFICATION	5.75529339261287E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9966512718124872	WITHOUT_CLASSIFICATION	0.0033487281875128447	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999937357898517	WITHOUT_CLASSIFICATION	6.264210148300902E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.999946967226127	WITHOUT_CLASSIFICATION	5.3032773873138073E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9739426601781561	WITHOUT_CLASSIFICATION	0.026057339821843925	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.999818316302507	WITHOUT_CLASSIFICATION	1.816836974930082E-4	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999256511884325	WITHOUT_CLASSIFICATION	7.434881156756712E-5	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9982971387965507	WITHOUT_CLASSIFICATION	0.0017028612034493014	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9997838414036622	WITHOUT_CLASSIFICATION	2.161585963377553E-4	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9657960061046088	WITHOUT_CLASSIFICATION	0.03420399389539111	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9983013421833384	WITHOUT_CLASSIFICATION	0.0016986578166615952	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999701420312314	WITHOUT_CLASSIFICATION	2.9857968768587373E-5	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9998336607519268	WITHOUT_CLASSIFICATION	1.663392480732469E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9999085725821983	WITHOUT_CLASSIFICATION	9.14274178016573E-5	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9997562719592994	WITHOUT_CLASSIFICATION	2.4372804070065074E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9985941022694397	WITHOUT_CLASSIFICATION	0.0014058977305603233	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9983262605144052	WITHOUT_CLASSIFICATION	0.001673739485594744	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9935015536763678	WITHOUT_CLASSIFICATION	0.0064984463236321555	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9945592615768271	WITHOUT_CLASSIFICATION	0.00544073842317291	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9990867468909507	WITHOUT_CLASSIFICATION	9.132531090492995E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.998957336399671	WITHOUT_CLASSIFICATION	0.0010426636003290745	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9988369149023445	WITHOUT_CLASSIFICATION	0.0011630850976554975	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9971008089856147	WITHOUT_CLASSIFICATION	0.002899191014385262	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9994383329352408	WITHOUT_CLASSIFICATION	5.61667064759261E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9979767639034529	WITHOUT_CLASSIFICATION	0.002023236096547189	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.6668249006025584	WITHOUT_CLASSIFICATION	0.33317509939744155	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9995705752304774	WITHOUT_CLASSIFICATION	4.294247695225418E-4	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9989170654840901	WITHOUT_CLASSIFICATION	0.0010829345159099571	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9992611342678014	WITHOUT_CLASSIFICATION	7.388657321986353E-4	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9877136506158968	WITHOUT_CLASSIFICATION	0.012286349384103203	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9990453037454636	WITHOUT_CLASSIFICATION	9.546962545362706E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.99938933266404	WITHOUT_CLASSIFICATION	6.106673359599771E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9996474791850923	WITHOUT_CLASSIFICATION	3.525208149075845E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999132987266917	WITHOUT_CLASSIFICATION	8.670127330830991E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9998439652633742	WITHOUT_CLASSIFICATION	1.5603473662585953E-4	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9978309980159017	WITHOUT_CLASSIFICATION	0.002169001984098297	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9991234623177968	WITHOUT_CLASSIFICATION	8.765376822032571E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9989185226443728	WITHOUT_CLASSIFICATION	0.0010814773556272175	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9996676658989734	WITHOUT_CLASSIFICATION	3.3233410102658347E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9997002583197169	WITHOUT_CLASSIFICATION	2.997416802831662E-4	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.7419182592772648	WITHOUT_CLASSIFICATION	0.2580817407227352	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9968984902391218	WITHOUT_CLASSIFICATION	0.0031015097608782186	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.999966120115754	WITHOUT_CLASSIFICATION	3.387988424600861E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9927904335554983	WITHOUT_CLASSIFICATION	0.0072095664445015716	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9979978216273749	WITHOUT_CLASSIFICATION	0.0020021783726249485	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9660250997198939	WITHOUT_CLASSIFICATION	0.03397490028010606	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9992484224390852	WITHOUT_CLASSIFICATION	7.515775609148474E-4	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9997009303176636	WITHOUT_CLASSIFICATION	2.990696823363447E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998523994199642	WITHOUT_CLASSIFICATION	1.476005800358332E-4	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9995626345783241	WITHOUT_CLASSIFICATION	4.3736542167596915E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9993734553404507	WITHOUT_CLASSIFICATION	6.265446595493257E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9995367174546798	WITHOUT_CLASSIFICATION	4.632825453202524E-4	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9994093097033152	WITHOUT_CLASSIFICATION	5.906902966848205E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999114477725998	WITHOUT_CLASSIFICATION	8.85522274001996E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999114477725998	WITHOUT_CLASSIFICATION	8.85522274001996E-5	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999994969720868	WITHOUT_CLASSIFICATION	5.030279131365905E-7	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999005089218822	WITHOUT_CLASSIFICATION	9.94910781177704E-5	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9997228924441515	WITHOUT_CLASSIFICATION	2.7710755584849E-4	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9886087996992966	WITHOUT_CLASSIFICATION	0.011391200300703383	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999769940078566	WITHOUT_CLASSIFICATION	2.300599214350374E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9962806259461461	WITHOUT_CLASSIFICATION	0.0037193740538538794	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999985654882224	WITHOUT_CLASSIFICATION	1.4345117775306052E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9998990727639177	WITHOUT_CLASSIFICATION	1.0092723608226065E-4	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9983798868536058	WITHOUT_CLASSIFICATION	0.0016201131463942477	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.99984284330347	WITHOUT_CLASSIFICATION	1.571566965301444E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999494990407716	WITHOUT_CLASSIFICATION	5.050095922835933E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.983335008634233	WITHOUT_CLASSIFICATION	0.01666499136576707	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999985709108	WITHOUT_CLASSIFICATION	1.4290891903805058E-8	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9968635318597789	WITHOUT_CLASSIFICATION	0.003136468140220963	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999247193630538	WITHOUT_CLASSIFICATION	7.528063694619439E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.999247193630538	WITHOUT_CLASSIFICATION	7.528063694619439E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9988814703090969	WITHOUT_CLASSIFICATION	0.0011185296909030596	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9991370108986091	WITHOUT_CLASSIFICATION	8.629891013910146E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9992879777261244	WITHOUT_CLASSIFICATION	7.120222738755954E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999050927277529	WITHOUT_CLASSIFICATION	9.490727224723053E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.999946883894169	WITHOUT_CLASSIFICATION	5.31161058309886E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993598639178727	WITHOUT_CLASSIFICATION	6.401360821271972E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999260581339151	WITHOUT_CLASSIFICATION	7.394186608490248E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999313798831888	WITHOUT_CLASSIFICATION	6.862011681120648E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9727822578028656	WITHOUT_CLASSIFICATION	0.027217742197134395	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998802719890186	WITHOUT_CLASSIFICATION	1.1972801098140803E-4	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999978913775325	WITHOUT_CLASSIFICATION	2.108622467524847E-6	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999572582903677	WITHOUT_CLASSIFICATION	4.274170963217776E-5	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9973145711481586	WITHOUT_CLASSIFICATION	0.002685428851841447	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999544631849182	WITHOUT_CLASSIFICATION	4.5536815081869246E-5	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9995967133383767	WITHOUT_CLASSIFICATION	4.0328666162324164E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9723425270617712	WITHOUT_CLASSIFICATION	0.027657472938228803	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9877446236581767	WITHOUT_CLASSIFICATION	0.012255376341823195	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999913987061869	WITHOUT_CLASSIFICATION	8.601293813142548E-6	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999083513244322	WITHOUT_CLASSIFICATION	9.164867556774962E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999997005309251	WITHOUT_CLASSIFICATION	2.994690748090106E-7	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.999179011205192	WITHOUT_CLASSIFICATION	8.209887948078913E-4	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998949880670541	WITHOUT_CLASSIFICATION	1.0501193294591867E-4	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9997898263428016	WITHOUT_CLASSIFICATION	2.10173657198415E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998651783126	WITHOUT_CLASSIFICATION	1.3482168729567336E-7	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9990832821402115	WITHOUT_CLASSIFICATION	9.167178597885648E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9995055595723774	WITHOUT_CLASSIFICATION	4.944404276226131E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.703732445547028	WITHOUT_CLASSIFICATION	0.29626755445297204	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.978686321817599	WITHOUT_CLASSIFICATION	0.021313678182401024	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999664987441721	WITHOUT_CLASSIFICATION	3.350125582792833E-5	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999090163865406	WITHOUT_CLASSIFICATION	9.098361345943046E-5	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9997793199832382	WITHOUT_CLASSIFICATION	2.206800167618076E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999853842152029	WITHOUT_CLASSIFICATION	1.461578479699992E-5	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9991029384968667	WITHOUT_CLASSIFICATION	8.970615031332908E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.999998743387493	WITHOUT_CLASSIFICATION	1.2566125070447559E-6	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999415635861809	WITHOUT_CLASSIFICATION	5.843641381905728E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9970679433332132	WITHOUT_CLASSIFICATION	0.0029320566667868256	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9861661543972703	WITHOUT_CLASSIFICATION	0.013833845602729732	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9995392130143731	WITHOUT_CLASSIFICATION	4.607869856270017E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999055278075912	WITHOUT_CLASSIFICATION	9.447219240876649E-5	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9995000493978988	WITHOUT_CLASSIFICATION	4.999506021011519E-4	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9939796823796151	WITHOUT_CLASSIFICATION	0.006020317620384883	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9928521991381495	WITHOUT_CLASSIFICATION	0.007147800861850532	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9973498521671778	WITHOUT_CLASSIFICATION	0.0026501478328223574	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9973498521671778	WITHOUT_CLASSIFICATION	0.0026501478328223574	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999495462976207	WITHOUT_CLASSIFICATION	5.045370237928883E-5	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9407539921930339	WITHOUT_CLASSIFICATION	0.05924600780696604	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.8471896847480965	WITHOUT_CLASSIFICATION	0.15281031525190347	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.999849165389928	WITHOUT_CLASSIFICATION	1.5083461007216027E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.6608985962537234	WITHOUT_CLASSIFICATION	0.33910140374627656	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9989156775869785	WITHOUT_CLASSIFICATION	0.0010843224130214668	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9930762551749922	WITHOUT_CLASSIFICATION	0.006923744825007799	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9996027331549605	WITHOUT_CLASSIFICATION	3.9726684503939996E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9982660275634714	WITHOUT_CLASSIFICATION	0.0017339724365286197	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997142345461759	WITHOUT_CLASSIFICATION	2.8576545382415734E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997004477388329	WITHOUT_CLASSIFICATION	2.9955226116708467E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9849024179024395	WITHOUT_CLASSIFICATION	0.015097582097560493	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9975404546697204	WITHOUT_CLASSIFICATION	0.0024595453302797094	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999974637568332	WITHOUT_CLASSIFICATION	2.5362431668662225E-6	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9980609151025138	WITHOUT_CLASSIFICATION	0.0019390848974861364	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9958938914587224	WITHOUT_CLASSIFICATION	0.004106108541277644	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.84884084799712	WITHOUT_CLASSIFICATION	0.15115915200287994	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999841868819732	WITHOUT_CLASSIFICATION	1.581311802685212E-5	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999540543507045	WITHOUT_CLASSIFICATION	4.594564929548889E-5	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9991126781065139	WITHOUT_CLASSIFICATION	8.873218934860758E-4	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9996104912462103	WITHOUT_CLASSIFICATION	3.895087537897827E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999215088205052	WITHOUT_CLASSIFICATION	7.849117949477449E-5	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9973281806540436	WITHOUT_CLASSIFICATION	0.0026718193459564776	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9997943953706298	WITHOUT_CLASSIFICATION	2.0560462937011203E-4	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999432462659467	WITHOUT_CLASSIFICATION	5.675373405341937E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.999758899627006	WITHOUT_CLASSIFICATION	2.4110037299411764E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9990956477088784	WITHOUT_CLASSIFICATION	9.043522911215753E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9982676334773534	WITHOUT_CLASSIFICATION	0.0017323665226466672	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999251127246219	WITHOUT_CLASSIFICATION	7.48872753780538E-5	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9501198886104374	DESIGN	0.04988011138956254	WITHOUT_CLASSIFICATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9099051318699873	WITHOUT_CLASSIFICATION	0.09009486813001268	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9354135978132961	WITHOUT_CLASSIFICATION	0.06458640218670385	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999381474294861	WITHOUT_CLASSIFICATION	6.185257051393346E-5	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9583681463687969	WITHOUT_CLASSIFICATION	0.041631853631203204	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9988177638329324	WITHOUT_CLASSIFICATION	0.0011822361670675635	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9998669544576936	WITHOUT_CLASSIFICATION	1.3304554230648714E-4	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9938790498200272	WITHOUT_CLASSIFICATION	0.006120950179972807	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9992154604276815	WITHOUT_CLASSIFICATION	7.845395723184225E-4	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998393891589139	WITHOUT_CLASSIFICATION	1.6061084108599493E-4	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999900675782495	WITHOUT_CLASSIFICATION	9.932421750397907E-6	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9312552989662422	WITHOUT_CLASSIFICATION	0.06874470103375789	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997248383697579	WITHOUT_CLASSIFICATION	2.751616302421483E-4	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9986826714716712	WITHOUT_CLASSIFICATION	0.0013173285283288028	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9966926674321022	WITHOUT_CLASSIFICATION	0.0033073325678979366	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9980095337599044	WITHOUT_CLASSIFICATION	0.001990466240095584	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999995567525283	WITHOUT_CLASSIFICATION	4.4324747177057725E-7	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9986054666816272	WITHOUT_CLASSIFICATION	0.0013945333183728128	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9953135081439425	WITHOUT_CLASSIFICATION	0.004686491856057566	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9979067648863041	WITHOUT_CLASSIFICATION	0.0020932351136959456	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.999999985709108	WITHOUT_CLASSIFICATION	1.4290891903805058E-8	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9937137458977439	WITHOUT_CLASSIFICATION	0.006286254102256253	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998225616145644	WITHOUT_CLASSIFICATION	1.7743838543551497E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9976923902131676	WITHOUT_CLASSIFICATION	0.002307609786832401	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9992246787484386	WITHOUT_CLASSIFICATION	7.753212515614973E-4	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999930263678011	WITHOUT_CLASSIFICATION	6.97363219884983E-6	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.999792332395086	WITHOUT_CLASSIFICATION	2.0766760491400984E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.999495120386462	WITHOUT_CLASSIFICATION	5.048796135379794E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9997086104209929	WITHOUT_CLASSIFICATION	2.9138957900705777E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996467266287552	WITHOUT_CLASSIFICATION	3.532733712448437E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997129536577815	WITHOUT_CLASSIFICATION	2.870463422185407E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999929431188709	WITHOUT_CLASSIFICATION	7.0568811290747386E-6	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999942298196438	WITHOUT_CLASSIFICATION	5.770180356250766E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9972605181026843	WITHOUT_CLASSIFICATION	0.0027394818973155615	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9993258680074966	WITHOUT_CLASSIFICATION	6.741319925034418E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9889615482229288	WITHOUT_CLASSIFICATION	0.011038451777071264	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995236768261374	WITHOUT_CLASSIFICATION	4.763231738624884E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997079615418614	WITHOUT_CLASSIFICATION	2.9203845813872287E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995218792614221	WITHOUT_CLASSIFICATION	4.7812073857785194E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9993627189654082	WITHOUT_CLASSIFICATION	6.372810345917668E-4	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.999967473643816	WITHOUT_CLASSIFICATION	3.252635618407502E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995236768261374	WITHOUT_CLASSIFICATION	4.763231738624884E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9940513580235248	WITHOUT_CLASSIFICATION	0.00594864197647519	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9901886702091784	DESIGN	0.009811329790821614	WITHOUT_CLASSIFICATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999727317584757	WITHOUT_CLASSIFICATION	2.726824152430288E-5	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9978394235198941	WITHOUT_CLASSIFICATION	0.00216057648010591	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.999637069574083	WITHOUT_CLASSIFICATION	3.629304259168841E-4	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9098583375201107	WITHOUT_CLASSIFICATION	0.09014166247988926	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9994077421548695	WITHOUT_CLASSIFICATION	5.922578451304695E-4	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9823683941814652	WITHOUT_CLASSIFICATION	0.01763160581853482	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9892631808539402	WITHOUT_CLASSIFICATION	0.01073681914605977	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.994454733780528	WITHOUT_CLASSIFICATION	0.0055452662194720595	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9975050358455227	WITHOUT_CLASSIFICATION	0.002494964154477162	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9864172832268585	WITHOUT_CLASSIFICATION	0.013582716773141362	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9998852469985378	WITHOUT_CLASSIFICATION	1.1475300146220243E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9998124614318445	WITHOUT_CLASSIFICATION	1.875385681555081E-4	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999021768339098	WITHOUT_CLASSIFICATION	9.782316609021495E-5	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997470685100589	WITHOUT_CLASSIFICATION	2.5293148994111537E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9885839512547376	WITHOUT_CLASSIFICATION	0.011416048745262438	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999385126466378	WITHOUT_CLASSIFICATION	6.14873533622326E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999739770896403	WITHOUT_CLASSIFICATION	2.6022910359688067E-5	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9985210430320715	WITHOUT_CLASSIFICATION	0.001478956967928596	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9052648460441627	WITHOUT_CLASSIFICATION	0.09473515395583729	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9996210126251539	WITHOUT_CLASSIFICATION	3.789873748462116E-4	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999965537127693	WITHOUT_CLASSIFICATION	3.4462872306623438E-6	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9970373211961614	WITHOUT_CLASSIFICATION	0.002962678803838595	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9122777370547762	WITHOUT_CLASSIFICATION	0.08772226294522377	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9998200211892471	WITHOUT_CLASSIFICATION	1.7997881075298403E-4	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999945248105991	WITHOUT_CLASSIFICATION	5.475189400883381E-6	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9614992736011947	WITHOUT_CLASSIFICATION	0.03850072639880529	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9889492010135783	WITHOUT_CLASSIFICATION	0.011050798986421705	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.5251033688305319	WITHOUT_CLASSIFICATION	0.47489663116946795	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9775060795068582	WITHOUT_CLASSIFICATION	0.022493920493141785	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9992372209788721	WITHOUT_CLASSIFICATION	7.627790211279513E-4	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999499950088118	WITHOUT_CLASSIFICATION	5.000499118826092E-5	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9954675964330522	WITHOUT_CLASSIFICATION	0.00453240356694778	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9975057887483756	WITHOUT_CLASSIFICATION	0.0024942112516243755	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.99997471007317	WITHOUT_CLASSIFICATION	2.5289926830010927E-5	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9658704556598091	WITHOUT_CLASSIFICATION	0.03412954434019084	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9992195503582928	WITHOUT_CLASSIFICATION	7.804496417071942E-4	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9631495618698359	WITHOUT_CLASSIFICATION	0.03685043813016411	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9956857593303294	WITHOUT_CLASSIFICATION	0.004314240669670567	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999004159472494	WITHOUT_CLASSIFICATION	9.958405275058107E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998890875897407	WITHOUT_CLASSIFICATION	1.1091241025921065E-4	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998890875897407	WITHOUT_CLASSIFICATION	1.1091241025921065E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9992797585612027	WITHOUT_CLASSIFICATION	7.202414387972931E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9997965814965244	WITHOUT_CLASSIFICATION	2.0341850347569185E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996436672361569	WITHOUT_CLASSIFICATION	3.563327638430904E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9998904665067643	WITHOUT_CLASSIFICATION	1.0953349323564273E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9992770957809012	WITHOUT_CLASSIFICATION	7.229042190987139E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9992770957809012	WITHOUT_CLASSIFICATION	7.229042190987139E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9989681907568876	WITHOUT_CLASSIFICATION	0.00103180924311249	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9998797064570589	WITHOUT_CLASSIFICATION	1.2029354294110507E-4	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9997077413506815	WITHOUT_CLASSIFICATION	2.922586493184458E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9990425909907106	WITHOUT_CLASSIFICATION	9.574090092893428E-4	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997079615418614	WITHOUT_CLASSIFICATION	2.9203845813872287E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999636639854396	WITHOUT_CLASSIFICATION	3.6336014560298706E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999956711775216	WITHOUT_CLASSIFICATION	4.328822478342446E-6	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.999886040985123	WITHOUT_CLASSIFICATION	1.1395901487700115E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9997659870931073	WITHOUT_CLASSIFICATION	2.3401290689275465E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9989877290353762	WITHOUT_CLASSIFICATION	0.0010122709646238058	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9499035219357993	DESIGN	0.05009647806420069	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997609654088525	WITHOUT_CLASSIFICATION	2.3903459114759973E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997609654088525	WITHOUT_CLASSIFICATION	2.3903459114759973E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997470685100589	WITHOUT_CLASSIFICATION	2.5293148994111537E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.999646899111437	WITHOUT_CLASSIFICATION	3.5310088856307025E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9978254455802212	WITHOUT_CLASSIFICATION	0.0021745544197787608	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9806409174590426	WITHOUT_CLASSIFICATION	0.01935908254095747	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9864194754415382	WITHOUT_CLASSIFICATION	0.013580524558461827	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9995666631237886	WITHOUT_CLASSIFICATION	4.333368762113749E-4	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9997209338261377	WITHOUT_CLASSIFICATION	2.790661738623079E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9985109919610378	WITHOUT_CLASSIFICATION	0.0014890080389623386	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9829630971408342	WITHOUT_CLASSIFICATION	0.017036902859165825	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.994454733780528	WITHOUT_CLASSIFICATION	0.0055452662194720595	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.5394322005947791	WITHOUT_CLASSIFICATION	0.4605677994052209	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9959534248422388	WITHOUT_CLASSIFICATION	0.00404657515776125	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999411414546051	WITHOUT_CLASSIFICATION	5.885854539492169E-5	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999401579014532	WITHOUT_CLASSIFICATION	5.984209854684973E-5	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997797453301414	WITHOUT_CLASSIFICATION	2.2025466985863424E-4	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9993560762818179	WITHOUT_CLASSIFICATION	6.439237181820247E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9856326344819075	WITHOUT_CLASSIFICATION	0.014367365518092512	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9990690603203503	WITHOUT_CLASSIFICATION	9.309396796497509E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9995056881149126	WITHOUT_CLASSIFICATION	4.943118850874609E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9962738782107378	WITHOUT_CLASSIFICATION	0.003726121789262185	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9962738782107378	WITHOUT_CLASSIFICATION	0.003726121789262185	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999252616966927	WITHOUT_CLASSIFICATION	7.473830330730627E-5	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999428178063233	WITHOUT_CLASSIFICATION	5.718219367668354E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9959866626360221	WITHOUT_CLASSIFICATION	0.004013337363977912	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9990519987209804	WITHOUT_CLASSIFICATION	9.480012790195557E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999460796927185	WITHOUT_CLASSIFICATION	5.392030728149407E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.951143146530506	WITHOUT_CLASSIFICATION	0.048856853469493984	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9995258961435147	WITHOUT_CLASSIFICATION	4.741038564851882E-4	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999847324298533	WITHOUT_CLASSIFICATION	1.5267570146686012E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9947572585229123	WITHOUT_CLASSIFICATION	0.005242741477087717	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998739803889535	WITHOUT_CLASSIFICATION	1.2601961104658218E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878095940025245	WITHOUT_CLASSIFICATION	0.012190405997475414	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9641524760868297	DESIGN	0.035847523913170275	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999149047346274	WITHOUT_CLASSIFICATION	8.509526537257665E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999721678067564	WITHOUT_CLASSIFICATION	2.78321932437073E-5	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8805015422289925	WITHOUT_CLASSIFICATION	0.1194984577710075	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9986344767737821	WITHOUT_CLASSIFICATION	0.00136552322621795	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.6279247830525803	DESIGN	0.37207521694741963	WITHOUT_CLASSIFICATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.999039316044595	WITHOUT_CLASSIFICATION	9.606839554051076E-4	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9947057999011046	WITHOUT_CLASSIFICATION	0.0052942000988954315	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9846577165030841	WITHOUT_CLASSIFICATION	0.015342283496915982	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.998990983184031	WITHOUT_CLASSIFICATION	0.0010090168159689215	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999949650192681	WITHOUT_CLASSIFICATION	5.034980731898553E-6	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998812274302056	WITHOUT_CLASSIFICATION	0.0011877256979439847	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9913019789828794	WITHOUT_CLASSIFICATION	0.008698021017120503	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9986465049759599	WITHOUT_CLASSIFICATION	0.0013534950240402404	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9986465049759599	WITHOUT_CLASSIFICATION	0.0013534950240402404	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999768735403342	WITHOUT_CLASSIFICATION	2.312645966578286E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9989395020101617	WITHOUT_CLASSIFICATION	0.001060497989838287	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9963826853328447	WITHOUT_CLASSIFICATION	0.0036173146671552416	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9706560504357523	WITHOUT_CLASSIFICATION	0.029343949564247608	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992570669863448	WITHOUT_CLASSIFICATION	7.429330136552112E-4	DESIGN
todo : what else to do here?	DESIGN	0.9942130333354608	WITHOUT_CLASSIFICATION	0.005786966664539116	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.8934033760257047	WITHOUT_CLASSIFICATION	0.10659662397429526	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9914469207331075	DESIGN	0.008553079266892562	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7116612469006819	DESIGN	0.2883387530993181	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7116612469006819	DESIGN	0.2883387530993181	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9931702635875653	WITHOUT_CLASSIFICATION	0.006829736412434671	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999902360558649	WITHOUT_CLASSIFICATION	9.76394413510902E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9559973651384858	WITHOUT_CLASSIFICATION	0.04400263486151432	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9955902644090606	DESIGN	0.004409735590939373	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9955902644090606	DESIGN	0.004409735590939373	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9952711050215649	DESIGN	0.004728894978435135	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9952711050215649	DESIGN	0.004728894978435135	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9634640831317508	DESIGN	0.03653591686824919	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.970044984264578	DESIGN	0.029955015735422065	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.970044984264578	DESIGN	0.029955015735422065	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9970561022021154	DESIGN	0.0029438977978845002	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999902360558649	WITHOUT_CLASSIFICATION	9.76394413510902E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9559973651384858	WITHOUT_CLASSIFICATION	0.04400263486151432	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9967715324150452	WITHOUT_CLASSIFICATION	0.0032284675849548134	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.964152011895811	WITHOUT_CLASSIFICATION	0.0358479881041891	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9650786229687391	DESIGN	0.034921377031260914	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.8318655165625582	DESIGN	0.1681344834374417	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.8146547670392884	WITHOUT_CLASSIFICATION	0.1853452329607117	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.99869143125463	WITHOUT_CLASSIFICATION	0.0013085687453700762	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.6123179717582043	DESIGN	0.3876820282417957	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9942130333354608	WITHOUT_CLASSIFICATION	0.005786966664539116	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9969101697229674	WITHOUT_CLASSIFICATION	0.0030898302770324885	DESIGN
todo : what else to do here?	DESIGN	0.9942130333354608	WITHOUT_CLASSIFICATION	0.005786966664539116	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9962441263939459	WITHOUT_CLASSIFICATION	0.0037558736060540406	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9970175515179632	WITHOUT_CLASSIFICATION	0.0029824484820366428	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9968961335743821	DESIGN	0.003103866425617914	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.8934033760257047	WITHOUT_CLASSIFICATION	0.10659662397429526	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9343115701398976	DESIGN	0.06568842986010233	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9507851320365747	WITHOUT_CLASSIFICATION	0.0492148679634253	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.76126257968994	WITHOUT_CLASSIFICATION	0.23873742031006	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.7641358281090465	WITHOUT_CLASSIFICATION	0.23586417189095354	DESIGN
todo : what is the implication of this?	DESIGN	0.9987444646440401	WITHOUT_CLASSIFICATION	0.0012555353559599314	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.991263369120461	WITHOUT_CLASSIFICATION	0.00873663087953898	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9980582535974062	DESIGN	0.0019417464025937433	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9554437325720275	DESIGN	0.044556267427972425	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9998009168136254	WITHOUT_CLASSIFICATION	1.9908318637457288E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.7729923131825982	DESIGN	0.2270076868174018	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9263362319580145	WITHOUT_CLASSIFICATION	0.07366376804198552	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9942352100023597	DESIGN	0.005764789997640241	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.6107994593128337	DESIGN	0.38920054068716614	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9472164936500539	DESIGN	0.05278350634994622	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9878844653312087	DESIGN	0.012115534668791304	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9995723419767129	WITHOUT_CLASSIFICATION	4.276580232872182E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.6407255153058784	DESIGN	0.35927448469412177	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.6407255153058784	DESIGN	0.35927448469412177	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.8016903154952603	DESIGN	0.19830968450473982	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.837550963540391	DESIGN	0.162449036459609	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.7170825343514793	WITHOUT_CLASSIFICATION	0.2829174656485207	DESIGN
TODO possibly relax that	DESIGN	0.7170825343514793	WITHOUT_CLASSIFICATION	0.2829174656485207	DESIGN
TODO possibly relax that	DESIGN	0.7170825343514793	WITHOUT_CLASSIFICATION	0.2829174656485207	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9878844653312087	DESIGN	0.012115534668791304	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9963765599548327	WITHOUT_CLASSIFICATION	0.0036234400451673246	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9477701526715498	WITHOUT_CLASSIFICATION	0.05222984732845009	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9805307778182804	WITHOUT_CLASSIFICATION	0.019469222181719568	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9995716914844098	WITHOUT_CLASSIFICATION	4.2830851559018526E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9749367557307751	WITHOUT_CLASSIFICATION	0.025063244269224943	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.8281422618002123	WITHOUT_CLASSIFICATION	0.17185773819978759	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.7116612469006819	DESIGN	0.2883387530993181	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7116612469006819	DESIGN	0.2883387530993181	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.7116612469006819	DESIGN	0.2883387530993181	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9993936886089452	DESIGN	6.063113910547761E-4	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9985350252752517	WITHOUT_CLASSIFICATION	0.0014649747247482295	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9985675522034061	WITHOUT_CLASSIFICATION	0.0014324477965938715	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9905675939849208	WITHOUT_CLASSIFICATION	0.009432406015079343	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9996897295737441	WITHOUT_CLASSIFICATION	3.1027042625587876E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9081267596457205	WITHOUT_CLASSIFICATION	0.0918732403542795	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9969796631314068	WITHOUT_CLASSIFICATION	0.003020336868593192	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.99867253103761	WITHOUT_CLASSIFICATION	0.0013274689623899878	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9396293651366115	WITHOUT_CLASSIFICATION	0.060370634863388575	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9867109990437779	WITHOUT_CLASSIFICATION	0.013289000956222069	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9808698158196688	WITHOUT_CLASSIFICATION	0.019130184180331217	DESIGN
Does this dialect support check constraints?	DESIGN	0.9300724619865242	WITHOUT_CLASSIFICATION	0.06992753801347588	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9724653670044837	WITHOUT_CLASSIFICATION	0.027534632995516256	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9218903173871943	WITHOUT_CLASSIFICATION	0.07810968261280571	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9218903173871943	WITHOUT_CLASSIFICATION	0.07810968261280571	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5834603300700331	DESIGN	0.4165396699299669	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9997775806154131	WITHOUT_CLASSIFICATION	2.2241938458686974E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9033633863888402	WITHOUT_CLASSIFICATION	0.09663661361115984	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9991485594129275	WITHOUT_CLASSIFICATION	8.514405870726251E-4	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9973603206968875	WITHOUT_CLASSIFICATION	0.0026396793031125375	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.9713972334361797	DESIGN	0.02860276656382022	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9525457206268738	WITHOUT_CLASSIFICATION	0.0474542793731262	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9525457206268738	WITHOUT_CLASSIFICATION	0.0474542793731262	DESIGN
I suppose?	DESIGN	0.9961991888556194	WITHOUT_CLASSIFICATION	0.0038008111443804987	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.8842680456706357	DESIGN	0.11573195432936438	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9401299335116526	WITHOUT_CLASSIFICATION	0.05987006648834742	DESIGN
TODO:refactor + make this method private	DESIGN	0.9944533374384503	WITHOUT_CLASSIFICATION	0.005546662561549703	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9966700870891979	WITHOUT_CLASSIFICATION	0.003329912910802163	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9901952205579969	DESIGN	0.00980477944200314	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.9524814382118137	WITHOUT_CLASSIFICATION	0.047518561788186385	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.995110127675003	WITHOUT_CLASSIFICATION	0.004889872324997049	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9996710067710484	DESIGN	3.289932289517074E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9996710067710484	DESIGN	3.289932289517074E-4	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9278441193821992	DESIGN	0.07215588061780077	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9440486275921901	DESIGN	0.05595137240781002	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9440486275921901	DESIGN	0.05595137240781002	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9774786038683849	DESIGN	0.022521396131615138	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.938609401000348	WITHOUT_CLASSIFICATION	0.0613905989996519	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.6039756404380764	DESIGN	0.39602435956192344	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.8359294041052533	DESIGN	0.16407059589474668	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9915102147045849	WITHOUT_CLASSIFICATION	0.008489785295415187	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9940898027604874	WITHOUT_CLASSIFICATION	0.00591019723951258	DESIGN
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9381631934791608	DESIGN	0.06183680652083923	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.5917931745774359	WITHOUT_CLASSIFICATION	0.4082068254225641	DESIGN
TODO : add this info to the translator and aggregate it here...	DESIGN	0.6642896735652172	DESIGN	0.3357103264347829	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9971419204638844	DESIGN	0.0028580795361155416	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9991485594129275	WITHOUT_CLASSIFICATION	8.514405870726251E-4	DESIGN
TODO: suck into event class	DESIGN	0.7557837382815085	DESIGN	0.24421626171849142	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9998320421905142	WITHOUT_CLASSIFICATION	1.6795780948586966E-4	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.865560679692726	WITHOUT_CLASSIFICATION	0.13443932030727396	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9547242154294303	DESIGN	0.04527578457056979	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.6130256611076497	DESIGN	0.3869743388923502	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9869612491332732	WITHOUT_CLASSIFICATION	0.013038750866726708	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.8315507683176657	WITHOUT_CLASSIFICATION	0.16844923168233433	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9024818180812738	DESIGN	0.0975181819187261	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9958620366557075	WITHOUT_CLASSIFICATION	0.004137963344292549	DESIGN
TODO: is this 100% correct?	DESIGN	0.9946643669876283	DESIGN	0.005335633012371676	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.6839110256164918	DESIGN	0.3160889743835083	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9982728717734516	DESIGN	0.001727128226548456	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9975490885066489	DESIGN	0.0024509114933511378	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9777493574122953	DESIGN	0.022250642587704685	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9358212977476557	DESIGN	0.06417870225234439	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.8519238440854242	DESIGN	0.14807615591457576	WITHOUT_CLASSIFICATION
TODO: merge into one method!	DESIGN	0.944354966254962	DESIGN	0.055645033745037986	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9613068997233498	DESIGN	0.03869310027665023	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9946227103831081	DESIGN	0.0053772896168918565	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9752860199448655	DESIGN	0.02471398005513443	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9989735133454829	WITHOUT_CLASSIFICATION	0.001026486654517088	DESIGN
TODO : better way?!?	DESIGN	0.5007186445065624	WITHOUT_CLASSIFICATION	0.4992813554934376	DESIGN
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9850852108248663	WITHOUT_CLASSIFICATION	0.014914789175133662	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9987090040093342	WITHOUT_CLASSIFICATION	0.0012909959906658617	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.997385759779576	DESIGN	0.0026142402204239975	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9994893626933892	DESIGN	5.106373066109356E-4	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.6626032378681613	WITHOUT_CLASSIFICATION	0.33739676213183856	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9997996704506007	DESIGN	2.003295493991673E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.6115315249586757	DESIGN	0.3884684750413244	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9998338584254344	WITHOUT_CLASSIFICATION	1.6614157456570604E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.8102497261877191	WITHOUT_CLASSIFICATION	0.1897502738122809	DESIGN
we do not know either type BLIND GUESS!	DESIGN	0.9893565044170639	WITHOUT_CLASSIFICATION	0.010643495582936093	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999997365422791	DESIGN	2.6345772081262614E-7	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9993046083731938	DESIGN	6.953916268062533E-4	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9395777525761395	DESIGN	0.06042224742386054	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7116612469006819	DESIGN	0.2883387530993181	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9421696156335868	DESIGN	0.05783038436641322	WITHOUT_CLASSIFICATION
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.8829641467618524	DESIGN	0.11703585323814754	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9741240537672777	WITHOUT_CLASSIFICATION	0.025875946232722324	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5901175368532369	DESIGN	0.4098824631467632	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9945617869753498	DESIGN	0.005438213024650205	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.9572699660428263	WITHOUT_CLASSIFICATION	0.04273003395717376	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9681200833709773	DESIGN	0.03187991662902278	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.7010667063374779	DESIGN	0.2989332936625222	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9896512265964335	DESIGN	0.01034877340356659	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.6744614143031485	DESIGN	0.32553858569685146	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9991649191942591	WITHOUT_CLASSIFICATION	8.350808057408363E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.7130214265161768	DESIGN	0.28697857348382316	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9660979702321831	DESIGN	0.03390202976781689	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9976037472568482	WITHOUT_CLASSIFICATION	0.002396252743151727	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9849910839886019	WITHOUT_CLASSIFICATION	0.015008916011398074	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.5773176879177506	DESIGN	0.42268231208224943	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9887502793483983	WITHOUT_CLASSIFICATION	0.011249720651601677	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.912248999436836	WITHOUT_CLASSIFICATION	0.08775100056316393	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9999105509081859	DESIGN	8.944909181405708E-5	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9996162438318829	DESIGN	3.837561681172218E-4	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.6180312640154569	WITHOUT_CLASSIFICATION	0.38196873598454306	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9885684733934568	DESIGN	0.011431526606543266	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.5356986673251908	WITHOUT_CLASSIFICATION	0.46430133267480933	DESIGN
TODO: what type?	DESIGN	0.8084092673650454	DESIGN	0.1915907326349546	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.8562304007932661	WITHOUT_CLASSIFICATION	0.14376959920673388	DESIGN
short-circuit for performance...	DESIGN	0.9993254870198314	WITHOUT_CLASSIFICATION	6.745129801685408E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.997513479942128	WITHOUT_CLASSIFICATION	0.002486520057872026	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.8328142016479163	DESIGN	0.16718579835208372	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9080203963089959	WITHOUT_CLASSIFICATION	0.09197960369100415	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999939631038991	DESIGN	6.036896100886698E-6	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9998459707825608	DESIGN	1.5402921743913798E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9937841241809948	DESIGN	0.006215875819005156	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999998563083912	DESIGN	1.4369160890721937E-7	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9012965091752104	DESIGN	0.09870349082478949	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.998482885205139	DESIGN	0.0015171147948610107	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.6798560613862367	DESIGN	0.32014393861376345	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9918552189075295	WITHOUT_CLASSIFICATION	0.008144781092470505	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9994790291709692	DESIGN	5.209708290308587E-4	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.6526975249530235	DESIGN	0.34730247504697653	WITHOUT_CLASSIFICATION
TODO: inefficient	DESIGN	0.6031278319088631	WITHOUT_CLASSIFICATION	0.39687216809113685	DESIGN
why does this matter?	DESIGN	0.9697471143369529	WITHOUT_CLASSIFICATION	0.03025288566304703	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999514355738188	DESIGN	4.856442618124273E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9993086377062268	DESIGN	6.913622937731036E-4	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9915053585572466	DESIGN	0.008494641442753444	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.5465618281402319	DESIGN	0.4534381718597682	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9980038571039637	WITHOUT_CLASSIFICATION	0.001996142896036349	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.5629193457810447	WITHOUT_CLASSIFICATION	0.43708065421895514	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9979975841651215	DESIGN	0.00200241583487853	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.5221552304004732	WITHOUT_CLASSIFICATION	0.4778447695995269	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.8719659373680471	WITHOUT_CLASSIFICATION	0.1280340626319529	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999151022869	DESIGN	8.489771308557779E-8	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9817482180090467	WITHOUT_CLASSIFICATION	0.018251781990953352	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9968635289543104	DESIGN	0.0031364710456895373	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9143227021025266	WITHOUT_CLASSIFICATION	0.08567729789747337	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9984380512449118	WITHOUT_CLASSIFICATION	0.001561948755088169	DESIGN
create an index on the key columns??	DESIGN	0.9999742090076258	WITHOUT_CLASSIFICATION	2.579099237418976E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.694421370767516	DESIGN	0.305578629232484	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999742090076258	WITHOUT_CLASSIFICATION	2.579099237418976E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9897757369060556	DESIGN	0.010224263093944454	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9987924552942773	WITHOUT_CLASSIFICATION	0.001207544705722615	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9066943616451777	DESIGN	0.09330563835482233	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9994690258473333	WITHOUT_CLASSIFICATION	5.309741526666116E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8448279519835963	WITHOUT_CLASSIFICATION	0.1551720480164037	DESIGN
create an index on the key columns??	DESIGN	0.9999742090076258	WITHOUT_CLASSIFICATION	2.579099237418976E-5	DESIGN
todo : remove	DESIGN	0.9989730705501091	WITHOUT_CLASSIFICATION	0.0010269294498909376	DESIGN
todo : remove	DESIGN	0.9989730705501091	WITHOUT_CLASSIFICATION	0.0010269294498909376	DESIGN
todo : remove	DESIGN	0.9989730705501091	WITHOUT_CLASSIFICATION	0.0010269294498909376	DESIGN
todo : throw exception?	DESIGN	0.999420524094109	WITHOUT_CLASSIFICATION	5.794759058910434E-4	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.997736357559876	WITHOUT_CLASSIFICATION	0.0022636424401238746	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.7757327550920663	DESIGN	0.2242672449079337	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9911329109249216	DESIGN	0.008867089075078298	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.9432688117470885	DESIGN	0.05673118825291143	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9614895073129972	DESIGN	0.03851049268700291	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.650871371970721	DESIGN	0.349128628029279	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.650871371970721	DESIGN	0.349128628029279	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.84833504660727	WITHOUT_CLASSIFICATION	0.1516649533927301	DESIGN
ie. the subquery! yuck!	DESIGN	0.9994158375830845	WITHOUT_CLASSIFICATION	5.84162416915534E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9425131778244603	DESIGN	0.057486822175539756	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8347554116577683	DESIGN	0.1652445883422317	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9905997096090511	DESIGN	0.00940029039094892	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.9435495424232613	DESIGN	0.05645045757673878	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.8347554116577683	DESIGN	0.1652445883422317	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.8286352449937314	WITHOUT_CLASSIFICATION	0.17136475500626858	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9989222234729153	WITHOUT_CLASSIFICATION	0.0010777765270847184	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9989222234729153	WITHOUT_CLASSIFICATION	0.0010777765270847184	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9798568753559996	DESIGN	0.020143124644000275	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.7881235653528958	DESIGN	0.21187643464710415	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9991622874373024	DESIGN	8.377125626975861E-4	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9955728227849951	WITHOUT_CLASSIFICATION	0.004427177215004802	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9905189759439026	DESIGN	0.009481024056097362	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.976921065883853	WITHOUT_CLASSIFICATION	0.023078934116147042	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.5169954492418901	DESIGN	0.48300455075810994	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9967418152054335	DESIGN	0.003258184794566606	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9061331219387682	DESIGN	0.09386687806123176	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9829092258157456	DESIGN	0.017090774184254476	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999889650696648	DESIGN	1.1034930335287923E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9868167328753661	WITHOUT_CLASSIFICATION	0.013183267124633996	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9990726886347112	WITHOUT_CLASSIFICATION	9.273113652886636E-4	DESIGN
is this ok?	DESIGN	0.9960905864687372	WITHOUT_CLASSIFICATION	0.003909413531262765	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999697946202797	DESIGN	3.0205379720218576E-5	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9924927519773077	DESIGN	0.007507248022692338	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9947455161029982	WITHOUT_CLASSIFICATION	0.005254483897001818	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999591163204075	DESIGN	4.088367959252541E-5	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.8901365160380944	DESIGN	0.10986348396190553	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9031556006328427	DESIGN	0.09684439936715736	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.6306670879728983	WITHOUT_CLASSIFICATION	0.3693329120271018	DESIGN
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7904010079540487	DESIGN	0.20959899204595148	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9998287782018508	WITHOUT_CLASSIFICATION	1.712217981493225E-4	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9317045256553846	DESIGN	0.06829547434461533	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.979960827251249	DESIGN	0.020039172748750965	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.564455593892602	WITHOUT_CLASSIFICATION	0.4355444061073979	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.7405548065847903	DESIGN	0.2594451934152096	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.650871371970721	DESIGN	0.349128628029279	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9933899759946027	DESIGN	0.006610024005397302	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9920094785704258	DESIGN	0.007990521429574167	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9106387209230763	DESIGN	0.08936127907692369	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.8829268225366862	DESIGN	0.1170731774633138	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9651086481209431	WITHOUT_CLASSIFICATION	0.03489135187905698	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9943195596172449	DESIGN	0.005680440382755114	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.8671284523280005	DESIGN	0.13287154767199952	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.6135539516506765	WITHOUT_CLASSIFICATION	0.38644604834932345	DESIGN
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8512528527952905	DESIGN	0.14874714720470947	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8480066175843509	DESIGN	0.15199338241564908	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9911020161669503	WITHOUT_CLASSIFICATION	0.008897983833049714	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9956425649991236	DESIGN	0.004357435000876406	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.6616154036513042	DESIGN	0.3383845963486959	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9915475399479848	DESIGN	0.008452460052015111	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9992357962359604	WITHOUT_CLASSIFICATION	7.642037640395965E-4	DESIGN
short cut check...	DESIGN	0.9983699709803201	WITHOUT_CLASSIFICATION	0.0016300290196799736	DESIGN
todo : move to StringHelper?	DESIGN	0.9958354545009822	WITHOUT_CLASSIFICATION	0.0041645454990177876	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.9512940915050979	WITHOUT_CLASSIFICATION	0.048705908494902084	DESIGN
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9995066860971523	DESIGN	4.933139028476811E-4	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999155315323981	DESIGN	8.446846760191138E-5	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9631376540386215	DESIGN	0.03686234596137845	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9727041013129676	DESIGN	0.027295898687032357	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.9981215036477383	DESIGN	0.0018784963522615976	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.8199083675094754	WITHOUT_CLASSIFICATION	0.1800916324905247	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.999868033938834	DESIGN	1.3196606116586305E-4	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9990909282907954	WITHOUT_CLASSIFICATION	9.090717092046132E-4	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.7654304566705178	DESIGN	0.23456954332948227	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.8116924096255328	WITHOUT_CLASSIFICATION	0.18830759037446726	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9995063534429539	DESIGN	4.936465570461779E-4	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9991331511649715	DESIGN	8.66848835028396E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9745994927898005	WITHOUT_CLASSIFICATION	0.025400507210199482	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999965414537899	DESIGN	3.4585462101829495E-6	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9993219781509429	DESIGN	6.780218490570979E-4	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9995303287684009	WITHOUT_CLASSIFICATION	4.6967123159911717E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.5590154083114967	DESIGN	0.44098459168850346	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.5392665439147339	WITHOUT_CLASSIFICATION	0.46073345608526606	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9899823415502459	DESIGN	0.010017658449754004	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.5477714256032042	WITHOUT_CLASSIFICATION	0.45222857439679565	DESIGN
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9963166006026252	DESIGN	0.003683399397374839	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9989730705501091	WITHOUT_CLASSIFICATION	0.0010269294498909376	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.8465845746027733	DESIGN	0.1534154253972267	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9993753288811114	DESIGN	6.24671118888602E-4	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9995995389215603	DESIGN	4.00461078439708E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9964937082795087	WITHOUT_CLASSIFICATION	0.003506291720491232	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9391207804487401	DESIGN	0.06087921955125994	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9966109932489093	DESIGN	0.0033890067510905825	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.715655120948635	WITHOUT_CLASSIFICATION	0.28434487905136485	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9977259334626983	DESIGN	0.0022740665373016185	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9863672596360149	WITHOUT_CLASSIFICATION	0.013632740363985112	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.9862163585742536	WITHOUT_CLASSIFICATION	0.013783641425746408	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9255063353208142	DESIGN	0.07449366467918588	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.7426918363149259	WITHOUT_CLASSIFICATION	0.2573081636850742	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9996607058240036	DESIGN	3.3929417599633813E-4	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9499879095021095	DESIGN	0.050012090497890564	WITHOUT_CLASSIFICATION
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.999999973220955	DESIGN	2.6779044985459543E-8	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.7295364432932712	WITHOUT_CLASSIFICATION	0.2704635567067288	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9989920915662281	DESIGN	0.0010079084337717907	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9997665405431396	WITHOUT_CLASSIFICATION	2.3345945686041524E-4	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.5343568738637131	WITHOUT_CLASSIFICATION	0.4656431261362869	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.8315813994946948	DESIGN	0.16841860050530513	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.7769110755700326	DESIGN	0.22308892442996756	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999209924189	DESIGN	7.90075811016725E-8	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.999999999670267	DESIGN	3.297330357747104E-10	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.831577136216822	DESIGN	0.1684228637831779	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999812684188	DESIGN	1.873158117093385E-8	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9651172412863129	DESIGN	0.03488275871368701	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999348075092597	WITHOUT_CLASSIFICATION	6.519249074033003E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999955492508932	WITHOUT_CLASSIFICATION	4.4507491067870025E-6	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999988675882292	DESIGN	1.1324117707659944E-6	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9915765508909956	DESIGN	0.008423449109004387	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999985507190425	DESIGN	1.4492809574540619E-6	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.854087263829031	DESIGN	0.14591273617096895	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9302579303021776	DESIGN	0.0697420696978223	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9564422286436985	DESIGN	0.043557771356301504	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9061331219387682	DESIGN	0.09386687806123176	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9928330768932702	DESIGN	0.007166923106729882	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9906527947090203	DESIGN	0.009347205290979705	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9868167328753661	WITHOUT_CLASSIFICATION	0.013183267124633996	DESIGN
TODO: make this a bit nicer	DESIGN	0.9924927519773077	DESIGN	0.007507248022692338	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8560835879757989	WITHOUT_CLASSIFICATION	0.1439164120242011	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9955902644090606	DESIGN	0.004409735590939373	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9955902644090606	DESIGN	0.004409735590939373	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9955902644090606	DESIGN	0.004409735590939373	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9963173945955195	DESIGN	0.0036826054044804767	WITHOUT_CLASSIFICATION
