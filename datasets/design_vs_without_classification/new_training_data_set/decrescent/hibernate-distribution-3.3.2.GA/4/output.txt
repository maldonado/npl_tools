test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999379804605911	WITHOUT_CLASSIFICATION	6.201953940885232E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996767980962203	WITHOUT_CLASSIFICATION	3.2320190377969205E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996767980962203	WITHOUT_CLASSIFICATION	3.2320190377969205E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9983715745769931	WITHOUT_CLASSIFICATION	0.0016284254230069318	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9997855891812274	WITHOUT_CLASSIFICATION	2.1441081877255017E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999913023382545	WITHOUT_CLASSIFICATION	8.697661745484525E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999913023382545	WITHOUT_CLASSIFICATION	8.697661745484525E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999917764865991	WITHOUT_CLASSIFICATION	8.223513400892534E-5	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996108491792258	WITHOUT_CLASSIFICATION	3.89150820774157E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998776723684789	WITHOUT_CLASSIFICATION	1.2232763152113943E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9997223211452592	WITHOUT_CLASSIFICATION	2.7767885474079605E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999598605446325	WITHOUT_CLASSIFICATION	4.013945536743905E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999598605446325	WITHOUT_CLASSIFICATION	4.013945536743905E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996028854640291	WITHOUT_CLASSIFICATION	3.971145359709174E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997943435753687	WITHOUT_CLASSIFICATION	2.05656424631459E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9996902032899352	WITHOUT_CLASSIFICATION	3.0979671006478365E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.997801073212244	WITHOUT_CLASSIFICATION	0.0021989267877560227	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9992182858923766	WITHOUT_CLASSIFICATION	7.817141076232834E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996124448159477	WITHOUT_CLASSIFICATION	3.875551840523641E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9995712607128711	WITHOUT_CLASSIFICATION	4.2873928712883105E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998414663385857	WITHOUT_CLASSIFICATION	1.585336614141585E-4	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9998019452669319	WITHOUT_CLASSIFICATION	1.980547330681232E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9992170444441048	WITHOUT_CLASSIFICATION	7.829555558952293E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9995963218313726	WITHOUT_CLASSIFICATION	4.0367816862741583E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9995963218313726	WITHOUT_CLASSIFICATION	4.0367816862741583E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9988743013240379	WITHOUT_CLASSIFICATION	0.0011256986759620275	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9996692361967625	WITHOUT_CLASSIFICATION	3.3076380323744436E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998593480226112	WITHOUT_CLASSIFICATION	1.4065197738884203E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995680995345799	WITHOUT_CLASSIFICATION	4.319004654200318E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.6489539284722833	DESIGN	0.35104607152771655	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.999982962324888	WITHOUT_CLASSIFICATION	1.7037675111896748E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9973365908695648	WITHOUT_CLASSIFICATION	0.002663409130435172	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9993565213089763	WITHOUT_CLASSIFICATION	6.434786910236384E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9918997451985103	WITHOUT_CLASSIFICATION	0.00810025480148974	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999000010806127	WITHOUT_CLASSIFICATION	9.999891938738076E-5	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999704626424865	WITHOUT_CLASSIFICATION	2.953735751351526E-5	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9887222054389749	WITHOUT_CLASSIFICATION	0.01127779456102508	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9891169645515825	WITHOUT_CLASSIFICATION	0.010883035448417476	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998641168384648	WITHOUT_CLASSIFICATION	1.3588316153528913E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9993686635645165	WITHOUT_CLASSIFICATION	6.313364354834199E-4	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996708804317432	WITHOUT_CLASSIFICATION	3.291195682567378E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9994635160254153	WITHOUT_CLASSIFICATION	5.364839745846634E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995928499510152	WITHOUT_CLASSIFICATION	4.071500489848629E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.9495092214904886	WITHOUT_CLASSIFICATION	0.050490778509511496	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996253167749986	WITHOUT_CLASSIFICATION	3.7468322500151986E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996253167749986	WITHOUT_CLASSIFICATION	3.7468322500151986E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9995928499510152	WITHOUT_CLASSIFICATION	4.071500489848629E-4	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9919879408786316	DESIGN	0.008012059121368362	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9923394774672142	WITHOUT_CLASSIFICATION	0.007660522532785738	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998657369151643	WITHOUT_CLASSIFICATION	1.3426308483559867E-4	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9996851729883593	WITHOUT_CLASSIFICATION	3.14827011640695E-4	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999306230179514	WITHOUT_CLASSIFICATION	6.937698204859263E-5	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9997804660698957	WITHOUT_CLASSIFICATION	2.1953393010442493E-4	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9919354955535132	WITHOUT_CLASSIFICATION	0.00806450444648682	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998694148791927	WITHOUT_CLASSIFICATION	1.3058512080723117E-4	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9983858427380881	WITHOUT_CLASSIFICATION	0.0016141572619119225	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9995846889070639	WITHOUT_CLASSIFICATION	4.153110929361506E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996253167749986	WITHOUT_CLASSIFICATION	3.7468322500151986E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9998811313896547	WITHOUT_CLASSIFICATION	1.1886861034524447E-4	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9995285234553678	WITHOUT_CLASSIFICATION	4.7147654463225154E-4	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9985362847321073	WITHOUT_CLASSIFICATION	0.0014637152678925972	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9998340054612607	WITHOUT_CLASSIFICATION	1.659945387394304E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9979800508228783	WITHOUT_CLASSIFICATION	0.0020199491771216724	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999484637662311	WITHOUT_CLASSIFICATION	5.1536233768840286E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999361900299407	WITHOUT_CLASSIFICATION	6.380997005937011E-5	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9999504250830304	WITHOUT_CLASSIFICATION	4.9574916969615815E-5	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.998781721447373	WITHOUT_CLASSIFICATION	0.0012182785526270612	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999920668281658	WITHOUT_CLASSIFICATION	7.93317183429105E-6	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993002722809062	WITHOUT_CLASSIFICATION	6.997277190937353E-4	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997483563646176	WITHOUT_CLASSIFICATION	2.5164363538232874E-4	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.9804357693095758	WITHOUT_CLASSIFICATION	0.019564230690424313	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9971886087251403	WITHOUT_CLASSIFICATION	0.0028113912748597234	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9983826839301099	WITHOUT_CLASSIFICATION	0.0016173160698902396	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9926933462513801	WITHOUT_CLASSIFICATION	0.007306653748619899	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9997842432961012	WITHOUT_CLASSIFICATION	2.1575670389875284E-4	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999988919638012	WITHOUT_CLASSIFICATION	1.1080361988104795E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999989435394178	WITHOUT_CLASSIFICATION	1.0564605822483828E-6	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999844285308187	WITHOUT_CLASSIFICATION	1.5571469181238874E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9999251746697052	WITHOUT_CLASSIFICATION	7.482533029473762E-5	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993774617677396	WITHOUT_CLASSIFICATION	6.225382322604572E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.999579431177766	WITHOUT_CLASSIFICATION	4.2056882223389476E-4	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999982849922562	WITHOUT_CLASSIFICATION	1.7150077437962003E-6	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9993774617677396	WITHOUT_CLASSIFICATION	6.225382322604572E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999711558268047	WITHOUT_CLASSIFICATION	2.8844173195272936E-5	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9998118472141536	WITHOUT_CLASSIFICATION	1.8815278584635362E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9995105381932832	WITHOUT_CLASSIFICATION	4.89461806716772E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.99982299817161	WITHOUT_CLASSIFICATION	1.7700182839003233E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999003061240689	WITHOUT_CLASSIFICATION	9.969387593108902E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999003061240689	WITHOUT_CLASSIFICATION	9.969387593108902E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998084028126616	WITHOUT_CLASSIFICATION	1.91597187338463E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9998159397294166	WITHOUT_CLASSIFICATION	1.8406027058339087E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998338104964513	WITHOUT_CLASSIFICATION	1.6618950354881502E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.943073956943591	WITHOUT_CLASSIFICATION	0.05692604305640916	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9987845048505223	WITHOUT_CLASSIFICATION	0.0012154951494777	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998116391709325	WITHOUT_CLASSIFICATION	1.8836082906754603E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9996314400776132	WITHOUT_CLASSIFICATION	3.6855992238679164E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9997252261692725	WITHOUT_CLASSIFICATION	2.7477383072748856E-4	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999502202662857	WITHOUT_CLASSIFICATION	4.977973371426163E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999902863883546	WITHOUT_CLASSIFICATION	9.713611645396447E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999421003890276	WITHOUT_CLASSIFICATION	5.789961097239991E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999421003890276	WITHOUT_CLASSIFICATION	5.789961097239991E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999012053949183	WITHOUT_CLASSIFICATION	9.879460508163439E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9995572183505896	WITHOUT_CLASSIFICATION	4.42781649410327E-4	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997506625424782	WITHOUT_CLASSIFICATION	2.493374575218126E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999421003890276	WITHOUT_CLASSIFICATION	5.789961097239991E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999012053949183	WITHOUT_CLASSIFICATION	9.879460508163439E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999012053949183	WITHOUT_CLASSIFICATION	9.879460508163439E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9996509975945741	WITHOUT_CLASSIFICATION	3.490024054258825E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9468914262094325	WITHOUT_CLASSIFICATION	0.0531085737905675	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995588955846	WITHOUT_CLASSIFICATION	4.4110441536906155E-7	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999651291475381	WITHOUT_CLASSIFICATION	3.487085246183458E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9949753245654165	WITHOUT_CLASSIFICATION	0.00502467543458348	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9949753245654165	WITHOUT_CLASSIFICATION	0.00502467543458348	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9998148486648364	WITHOUT_CLASSIFICATION	1.8515133516375427E-4	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.999314183404178	WITHOUT_CLASSIFICATION	6.858165958220722E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9998799442817232	WITHOUT_CLASSIFICATION	1.2005571827681266E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9989762605664798	WITHOUT_CLASSIFICATION	0.001023739433520138	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9989762605664798	WITHOUT_CLASSIFICATION	0.001023739433520138	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9950173298654718	WITHOUT_CLASSIFICATION	0.004982670134528249	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998975851897651	WITHOUT_CLASSIFICATION	1.0241481023497709E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9987484702801783	WITHOUT_CLASSIFICATION	0.0012515297198216848	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999997242371769	WITHOUT_CLASSIFICATION	2.757628230504069E-7	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9995788021303236	WITHOUT_CLASSIFICATION	4.211978696765264E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998202997537686	WITHOUT_CLASSIFICATION	1.797002462313383E-4	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9991993540780265	WITHOUT_CLASSIFICATION	8.006459219733661E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9998669048388694	WITHOUT_CLASSIFICATION	1.330951611306172E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9987484702801783	WITHOUT_CLASSIFICATION	0.0012515297198216848	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9997424292980719	WITHOUT_CLASSIFICATION	2.575707019281003E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998467752820058	WITHOUT_CLASSIFICATION	1.53224717994183E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998467752820058	WITHOUT_CLASSIFICATION	1.53224717994183E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.6284440762933026	WITHOUT_CLASSIFICATION	0.3715559237066974	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9829391565094484	WITHOUT_CLASSIFICATION	0.017060843490551654	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999195673211582	WITHOUT_CLASSIFICATION	8.043267884176618E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9970283449653197	WITHOUT_CLASSIFICATION	0.002971655034680275	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9950354419473673	WITHOUT_CLASSIFICATION	0.004964558052632783	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9998726632940753	WITHOUT_CLASSIFICATION	1.273367059246434E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9997832670116057	WITHOUT_CLASSIFICATION	2.16732988394299E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9996154604948633	WITHOUT_CLASSIFICATION	3.8453950513680276E-4	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9987532681674887	WITHOUT_CLASSIFICATION	0.0012467318325112824	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999863181761335	WITHOUT_CLASSIFICATION	1.368182386650605E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.999863181761335	WITHOUT_CLASSIFICATION	1.368182386650605E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996990504198082	WITHOUT_CLASSIFICATION	3.0094958019178324E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999379804605911	WITHOUT_CLASSIFICATION	6.201953940885232E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.999442469764751	WITHOUT_CLASSIFICATION	5.575302352489606E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996767980962203	WITHOUT_CLASSIFICATION	3.2320190377969205E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9997519084746298	WITHOUT_CLASSIFICATION	2.4809152537011713E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.999578675163372	WITHOUT_CLASSIFICATION	4.213248366281134E-4	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998799371111624	WITHOUT_CLASSIFICATION	1.2006288883758095E-4	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9996203051128507	WITHOUT_CLASSIFICATION	3.7969488714930126E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9998808807004675	WITHOUT_CLASSIFICATION	1.1911929953245847E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.999615119830147	WITHOUT_CLASSIFICATION	3.8488016985298957E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996226412513258	WITHOUT_CLASSIFICATION	3.773587486742215E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9997814356987613	WITHOUT_CLASSIFICATION	2.1856430123860243E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9996203051128507	WITHOUT_CLASSIFICATION	3.7969488714930126E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9925082483158576	WITHOUT_CLASSIFICATION	0.0074917516841424255	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9984962901531539	WITHOUT_CLASSIFICATION	0.0015037098468461433	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998750853925357	WITHOUT_CLASSIFICATION	1.2491460746424568E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9995956555587568	WITHOUT_CLASSIFICATION	4.043444412430767E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.996772666955212	WITHOUT_CLASSIFICATION	0.0032273330447878507	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999913023382545	WITHOUT_CLASSIFICATION	8.697661745484525E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9958055415057016	WITHOUT_CLASSIFICATION	0.004194458494298408	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.999714747811735	WITHOUT_CLASSIFICATION	2.852521882650845E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9995569975383244	WITHOUT_CLASSIFICATION	4.430024616756457E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9996310831937238	WITHOUT_CLASSIFICATION	3.6891680627620054E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9995958650243532	WITHOUT_CLASSIFICATION	4.0413497564684695E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9998870649138265	WITHOUT_CLASSIFICATION	1.1293508617354436E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998437432678682	WITHOUT_CLASSIFICATION	1.5625673213177764E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999795518991914	WITHOUT_CLASSIFICATION	2.0448100808600347E-5	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9904423333423347	WITHOUT_CLASSIFICATION	0.009557666657665428	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9989591392608004	WITHOUT_CLASSIFICATION	0.001040860739199637	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996767980962203	WITHOUT_CLASSIFICATION	3.2320190377969205E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996767980962203	WITHOUT_CLASSIFICATION	3.2320190377969205E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996226412513258	WITHOUT_CLASSIFICATION	3.773587486742215E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9995958650243532	WITHOUT_CLASSIFICATION	4.0413497564684695E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.999917764865991	WITHOUT_CLASSIFICATION	8.223513400892534E-5	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998925544714949	WITHOUT_CLASSIFICATION	1.0744552850496093E-4	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9995177615130665	WITHOUT_CLASSIFICATION	4.822384869334911E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9997779773249345	WITHOUT_CLASSIFICATION	2.2202267506551027E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9991534911147365	WITHOUT_CLASSIFICATION	8.465088852636006E-4	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.999805830519295	WITHOUT_CLASSIFICATION	1.941694807050931E-4	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9996005815995136	WITHOUT_CLASSIFICATION	3.9941840048641445E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9987838849492625	WITHOUT_CLASSIFICATION	0.0012161150507375088	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994798269379348	WITHOUT_CLASSIFICATION	5.201730620652005E-4	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9994798269379348	WITHOUT_CLASSIFICATION	5.201730620652005E-4	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9991260297963818	WITHOUT_CLASSIFICATION	8.739702036181578E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998972800824142	WITHOUT_CLASSIFICATION	1.0271991758586867E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9960572014655455	WITHOUT_CLASSIFICATION	0.003942798534454531	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9996067776709041	WITHOUT_CLASSIFICATION	3.9322232909589673E-4	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9996212400393119	WITHOUT_CLASSIFICATION	3.7875996068818693E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.999930547060562	WITHOUT_CLASSIFICATION	6.945293943805045E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9993734721557617	WITHOUT_CLASSIFICATION	6.265278442383697E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9996108491792258	WITHOUT_CLASSIFICATION	3.89150820774157E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9995762020341078	WITHOUT_CLASSIFICATION	4.237979658921639E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9995762020341078	WITHOUT_CLASSIFICATION	4.237979658921639E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9994687247891135	WITHOUT_CLASSIFICATION	5.312752108865733E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9996638658277427	WITHOUT_CLASSIFICATION	3.361341722573049E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9994687247891135	WITHOUT_CLASSIFICATION	5.312752108865733E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9990024449782201	WITHOUT_CLASSIFICATION	9.975550217798106E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9998926315564917	WITHOUT_CLASSIFICATION	1.0736844350827423E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9996767980962203	WITHOUT_CLASSIFICATION	3.2320190377969205E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996226412513258	WITHOUT_CLASSIFICATION	3.773587486742215E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9995958650243532	WITHOUT_CLASSIFICATION	4.0413497564684695E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9995958650243532	WITHOUT_CLASSIFICATION	4.0413497564684695E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9996835036503537	WITHOUT_CLASSIFICATION	3.164963496463547E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9996701792179228	WITHOUT_CLASSIFICATION	3.29820782077222E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999405379883124	WITHOUT_CLASSIFICATION	5.946201168745044E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9997223211452592	WITHOUT_CLASSIFICATION	2.7767885474079605E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9997223211452592	WITHOUT_CLASSIFICATION	2.7767885474079605E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9985475669737327	WITHOUT_CLASSIFICATION	0.0014524330262673212	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9997220386781925	WITHOUT_CLASSIFICATION	2.7796132180746123E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9997572186010083	WITHOUT_CLASSIFICATION	2.4278139899175545E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9996295204346649	WITHOUT_CLASSIFICATION	3.704795653351143E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998187844190759	WITHOUT_CLASSIFICATION	1.812155809240785E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9989366050254548	WITHOUT_CLASSIFICATION	0.0010633949745452132	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999598605446325	WITHOUT_CLASSIFICATION	4.013945536743905E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996000413903815	WITHOUT_CLASSIFICATION	3.9995860961861927E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996000413903815	WITHOUT_CLASSIFICATION	3.9995860961861927E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996028854640291	WITHOUT_CLASSIFICATION	3.971145359709174E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996028854640291	WITHOUT_CLASSIFICATION	3.971145359709174E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.99741852302067	WITHOUT_CLASSIFICATION	0.0025814769793299597	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.99741852302067	WITHOUT_CLASSIFICATION	0.0025814769793299597	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981516203175684	WITHOUT_CLASSIFICATION	0.0018483796824315022	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981516203175684	WITHOUT_CLASSIFICATION	0.0018483796824315022	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9997223211452592	WITHOUT_CLASSIFICATION	2.7767885474079605E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999598605446325	WITHOUT_CLASSIFICATION	4.013945536743905E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996000413903815	WITHOUT_CLASSIFICATION	3.9995860961861927E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996000413903815	WITHOUT_CLASSIFICATION	3.9995860961861927E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996028854640291	WITHOUT_CLASSIFICATION	3.971145359709174E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.99741852302067	WITHOUT_CLASSIFICATION	0.0025814769793299597	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.99741852302067	WITHOUT_CLASSIFICATION	0.0025814769793299597	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9981516203175684	WITHOUT_CLASSIFICATION	0.0018483796824315022	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.998995399235429	WITHOUT_CLASSIFICATION	0.0010046007645709554	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9998040580083903	WITHOUT_CLASSIFICATION	1.9594199160961317E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998723537252713	WITHOUT_CLASSIFICATION	1.2764627472871526E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9996469932807531	WITHOUT_CLASSIFICATION	3.530067192469305E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9997086764407775	WITHOUT_CLASSIFICATION	2.913235592225073E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996296278867179	WITHOUT_CLASSIFICATION	3.703721132819756E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999659604705889	WITHOUT_CLASSIFICATION	3.4039529411064795E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9982166682085615	WITHOUT_CLASSIFICATION	0.0017833317914384894	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999589299884821	WITHOUT_CLASSIFICATION	4.107001151794668E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9929594828053491	WITHOUT_CLASSIFICATION	0.007040517194650926	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999161433341314	WITHOUT_CLASSIFICATION	8.385666586870766E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9999411705017518	WITHOUT_CLASSIFICATION	5.8829498248181607E-5	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9998084028126616	WITHOUT_CLASSIFICATION	1.91597187338463E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996296278867179	WITHOUT_CLASSIFICATION	3.703721132819756E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996296278867179	WITHOUT_CLASSIFICATION	3.703721132819756E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996296278867179	WITHOUT_CLASSIFICATION	3.703721132819756E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9945785772597069	WITHOUT_CLASSIFICATION	0.005421422740293035	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9988958225166541	WITHOUT_CLASSIFICATION	0.0011041774833459013	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9988958225166541	WITHOUT_CLASSIFICATION	0.0011041774833459013	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9975270062046826	WITHOUT_CLASSIFICATION	0.002472993795317491	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9988550328445579	WITHOUT_CLASSIFICATION	0.001144967155442089	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9993001589304898	WITHOUT_CLASSIFICATION	6.998410695100969E-4	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988447654220338	WITHOUT_CLASSIFICATION	0.0011552345779660893	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988447654220338	WITHOUT_CLASSIFICATION	0.0011552345779660893	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9992182858923766	WITHOUT_CLASSIFICATION	7.817141076232834E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998036726471626	WITHOUT_CLASSIFICATION	1.963273528372778E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9998036726471626	WITHOUT_CLASSIFICATION	1.963273528372778E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9978032182071221	WITHOUT_CLASSIFICATION	0.002196781792877917	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9991460153930246	WITHOUT_CLASSIFICATION	8.539846069754305E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9992170444441048	WITHOUT_CLASSIFICATION	7.829555558952293E-4	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9999127854894759	WITHOUT_CLASSIFICATION	8.721451052409874E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996124448159477	WITHOUT_CLASSIFICATION	3.875551840523641E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5293208687124392	WITHOUT_CLASSIFICATION	0.4706791312875609	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9995649286917496	WITHOUT_CLASSIFICATION	4.350713082503291E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.99993694540668	WITHOUT_CLASSIFICATION	6.30545933199767E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999005480093942	WITHOUT_CLASSIFICATION	9.945199060572717E-5	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.99873107099369	WITHOUT_CLASSIFICATION	0.0012689290063100228	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9992796885122681	WITHOUT_CLASSIFICATION	7.203114877319479E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9995680995345799	WITHOUT_CLASSIFICATION	4.319004654200318E-4	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999877394896943	WITHOUT_CLASSIFICATION	1.2260510305665264E-5	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9997997593208044	WITHOUT_CLASSIFICATION	2.002406791956174E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9996417007888719	WITHOUT_CLASSIFICATION	3.582992111281653E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9995976872532912	WITHOUT_CLASSIFICATION	4.023127467087518E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9998116559367891	WITHOUT_CLASSIFICATION	1.8834406321091863E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997720496026458	WITHOUT_CLASSIFICATION	2.2795039735427368E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9992170444441048	WITHOUT_CLASSIFICATION	7.829555558952293E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9997542308068782	WITHOUT_CLASSIFICATION	2.457691931217729E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9998791576457072	WITHOUT_CLASSIFICATION	1.2084235429285138E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996181752208421	WITHOUT_CLASSIFICATION	3.8182477915797984E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996124448159477	WITHOUT_CLASSIFICATION	3.875551840523641E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997720496026458	WITHOUT_CLASSIFICATION	2.2795039735427368E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9997542308068782	WITHOUT_CLASSIFICATION	2.457691931217729E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996181752208421	WITHOUT_CLASSIFICATION	3.8182477915797984E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9993355640095806	WITHOUT_CLASSIFICATION	6.644359904194855E-4	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9995976870834269	WITHOUT_CLASSIFICATION	4.0231291657316637E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9993355640095806	WITHOUT_CLASSIFICATION	6.644359904194855E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9995963218313726	WITHOUT_CLASSIFICATION	4.0367816862741583E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.999969299134134	WITHOUT_CLASSIFICATION	3.0700865866100994E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999450958111903	WITHOUT_CLASSIFICATION	5.490418880965969E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9995512338575033	WITHOUT_CLASSIFICATION	4.4876614249661804E-4	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9997674336695841	WITHOUT_CLASSIFICATION	2.3256633041590074E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999899671322028	WITHOUT_CLASSIFICATION	1.0032867797218885E-5	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999554834674081	WITHOUT_CLASSIFICATION	4.4516532591865994E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998162847667814	WITHOUT_CLASSIFICATION	1.8371523321855939E-4	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999964137808676	WITHOUT_CLASSIFICATION	3.586219132379471E-6	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999554834674081	WITHOUT_CLASSIFICATION	4.4516532591865994E-5	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9996692361967625	WITHOUT_CLASSIFICATION	3.3076380323744436E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.999831751971068	WITHOUT_CLASSIFICATION	1.6824802893204095E-4	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997720496026458	WITHOUT_CLASSIFICATION	2.2795039735427368E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9995496552194576	WITHOUT_CLASSIFICATION	4.5034478054240353E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9997956543103095	WITHOUT_CLASSIFICATION	2.0434568969045656E-4	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9522498058557805	WITHOUT_CLASSIFICATION	0.04775019414421967	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9883622328180787	WITHOUT_CLASSIFICATION	0.01163776718192129	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9990870199242744	WITHOUT_CLASSIFICATION	9.129800757256516E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999663015977581	WITHOUT_CLASSIFICATION	3.369840224184468E-5	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9999229211580873	WITHOUT_CLASSIFICATION	7.707884191261475E-5	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9999068861203685	WITHOUT_CLASSIFICATION	9.311387963154793E-5	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9996053589646443	WITHOUT_CLASSIFICATION	3.9464103535572414E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9997775163280892	WITHOUT_CLASSIFICATION	2.2248367191078967E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.993808126769551	WITHOUT_CLASSIFICATION	0.00619187323044908	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9995680995345799	WITHOUT_CLASSIFICATION	4.319004654200318E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9997414674471414	WITHOUT_CLASSIFICATION	2.585325528586239E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9985774346512243	WITHOUT_CLASSIFICATION	0.0014225653487757938	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9999209348384807	WITHOUT_CLASSIFICATION	7.906516151933667E-5	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.999870099622535	WITHOUT_CLASSIFICATION	1.2990037746485282E-4	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9998722606265832	WITHOUT_CLASSIFICATION	1.2773937341683953E-4	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9986615807701478	WITHOUT_CLASSIFICATION	0.0013384192298522962	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999984058881052	WITHOUT_CLASSIFICATION	1.5941118947352187E-6	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9997814531166099	WITHOUT_CLASSIFICATION	2.1854688339004212E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5730308230836068	DESIGN	0.4269691769163932	WITHOUT_CLASSIFICATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9998702981144042	WITHOUT_CLASSIFICATION	1.29701885595886E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998876140409537	WITHOUT_CLASSIFICATION	1.1238595904616387E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9998876140409537	WITHOUT_CLASSIFICATION	1.1238595904616387E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9998642339543522	WITHOUT_CLASSIFICATION	1.3576604564776815E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.999942106728081	WITHOUT_CLASSIFICATION	5.789327191898248E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9985213815070251	WITHOUT_CLASSIFICATION	0.0014786184929748635	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9995369781640138	WITHOUT_CLASSIFICATION	4.630218359863115E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9997178193129007	WITHOUT_CLASSIFICATION	2.8218068709930013E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9986141073849559	WITHOUT_CLASSIFICATION	0.001385892615044049	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9998643286923441	WITHOUT_CLASSIFICATION	1.3567130765585513E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999961846924292	WITHOUT_CLASSIFICATION	3.815307570735013E-6	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9994368540758893	WITHOUT_CLASSIFICATION	5.631459241105875E-4	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9995991755843522	WITHOUT_CLASSIFICATION	4.0082441564779747E-4	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.999818024662284	WITHOUT_CLASSIFICATION	1.8197533771600606E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999679366557976	WITHOUT_CLASSIFICATION	3.206334420236842E-5	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9961574305753212	WITHOUT_CLASSIFICATION	0.003842569424678773	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.987848672510247	WITHOUT_CLASSIFICATION	0.012151327489753049	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9989749496418564	WITHOUT_CLASSIFICATION	0.0010250503581435938	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9983061886360995	WITHOUT_CLASSIFICATION	0.0016938113639004314	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997013667595118	WITHOUT_CLASSIFICATION	2.986332404882163E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9989263863508685	WITHOUT_CLASSIFICATION	0.001073613649131524	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9452825892865457	WITHOUT_CLASSIFICATION	0.054717410713454234	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9994331692822538	WITHOUT_CLASSIFICATION	5.668307177462397E-4	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9993534563211951	WITHOUT_CLASSIFICATION	6.465436788048633E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9318143283275774	WITHOUT_CLASSIFICATION	0.06818567167242269	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9983061886360995	WITHOUT_CLASSIFICATION	0.0016938113639004314	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9971628056478189	WITHOUT_CLASSIFICATION	0.002837194352181013	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997622801258225	WITHOUT_CLASSIFICATION	2.3771987417753462E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9997525538696771	WITHOUT_CLASSIFICATION	2.474461303228538E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999724171409609	WITHOUT_CLASSIFICATION	2.758285903916659E-5	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9847772949562805	WITHOUT_CLASSIFICATION	0.015222705043719593	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9989263863508685	WITHOUT_CLASSIFICATION	0.001073613649131524	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9967709629342711	WITHOUT_CLASSIFICATION	0.0032290370657288843	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9997955930018831	WITHOUT_CLASSIFICATION	2.044069981168675E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9991473753242405	WITHOUT_CLASSIFICATION	8.526246757594689E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997422076078855	WITHOUT_CLASSIFICATION	2.5779239211453557E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997422076078855	WITHOUT_CLASSIFICATION	2.5779239211453557E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9994635160254153	WITHOUT_CLASSIFICATION	5.364839745846634E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9991230913145905	WITHOUT_CLASSIFICATION	8.76908685409342E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9998117370875725	WITHOUT_CLASSIFICATION	1.8826291242740232E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9998117370875725	WITHOUT_CLASSIFICATION	1.8826291242740232E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5730308230836068	DESIGN	0.4269691769163932	WITHOUT_CLASSIFICATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9435535009687049	WITHOUT_CLASSIFICATION	0.05644649903129508	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993075567273796	WITHOUT_CLASSIFICATION	6.924432726204314E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994910709290709	WITHOUT_CLASSIFICATION	5.089290709290766E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996990504198082	WITHOUT_CLASSIFICATION	3.0094958019178324E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9993075567273796	WITHOUT_CLASSIFICATION	6.924432726204314E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9994910709290709	WITHOUT_CLASSIFICATION	5.089290709290766E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9983342180621952	WITHOUT_CLASSIFICATION	0.0016657819378046682	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9980996067591084	WITHOUT_CLASSIFICATION	0.0019003932408917631	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9956992960412627	WITHOUT_CLASSIFICATION	0.004300703958737265	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9998078093514529	WITHOUT_CLASSIFICATION	1.9219064854708617E-4	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9890643024834104	WITHOUT_CLASSIFICATION	0.010935697516589673	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9449453302988824	WITHOUT_CLASSIFICATION	0.0550546697011177	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996180614566074	WITHOUT_CLASSIFICATION	3.819385433926847E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996180614566074	WITHOUT_CLASSIFICATION	3.819385433926847E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9978255737604583	WITHOUT_CLASSIFICATION	0.002174426239541696	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999918239389581	WITHOUT_CLASSIFICATION	8.17606104183015E-6	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9981995614621267	WITHOUT_CLASSIFICATION	0.0018004385378733226	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9994426529601358	WITHOUT_CLASSIFICATION	5.573470398640977E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9997098471428182	WITHOUT_CLASSIFICATION	2.9015285718183323E-4	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9982084166517811	WITHOUT_CLASSIFICATION	0.0017915833482190318	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996990504198082	WITHOUT_CLASSIFICATION	3.0094958019178324E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9982084166517811	WITHOUT_CLASSIFICATION	0.0017915833482190318	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998627199876706	WITHOUT_CLASSIFICATION	1.3728001232933665E-4	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9998627199876706	WITHOUT_CLASSIFICATION	1.3728001232933665E-4	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9999730167252602	WITHOUT_CLASSIFICATION	2.698327473970798E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9983342180621952	WITHOUT_CLASSIFICATION	0.0016657819378046682	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9944752001148929	WITHOUT_CLASSIFICATION	0.005524799885107124	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.5715239145883184	DESIGN	0.42847608541168153	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.7501465438269286	WITHOUT_CLASSIFICATION	0.24985345617307136	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995652641465445	WITHOUT_CLASSIFICATION	4.3473585345552636E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7540234678463208	WITHOUT_CLASSIFICATION	0.24597653215367923	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9983342180621952	WITHOUT_CLASSIFICATION	0.0016657819378046682	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9995652641465445	WITHOUT_CLASSIFICATION	4.3473585345552636E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.7540234678463208	WITHOUT_CLASSIFICATION	0.24597653215367923	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.999881541135037	WITHOUT_CLASSIFICATION	1.1845886496292969E-4	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.999916689538953	WITHOUT_CLASSIFICATION	8.331046104706358E-5	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999169501249772	WITHOUT_CLASSIFICATION	8.304987502280683E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9983342180621952	WITHOUT_CLASSIFICATION	0.0016657819378046682	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9983342180621952	WITHOUT_CLASSIFICATION	0.0016657819378046682	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9995573895835911	WITHOUT_CLASSIFICATION	4.4261041640891903E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9997313243289827	WITHOUT_CLASSIFICATION	2.686756710172639E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999438284046341	WITHOUT_CLASSIFICATION	5.6171595365881264E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998641168384648	WITHOUT_CLASSIFICATION	1.3588316153528913E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999470109029983	WITHOUT_CLASSIFICATION	5.298909700176467E-5	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999903838135673	WITHOUT_CLASSIFICATION	9.616186432730005E-6	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999412035948677	WITHOUT_CLASSIFICATION	5.879640513230085E-5	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9995611480461849	WITHOUT_CLASSIFICATION	4.388519538150658E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9996564700976573	WITHOUT_CLASSIFICATION	3.435299023426807E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9997961867283719	WITHOUT_CLASSIFICATION	2.0381327162824679E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9744090346135342	WITHOUT_CLASSIFICATION	0.02559096538646578	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9461327612349882	WITHOUT_CLASSIFICATION	0.05386723876501165	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.999719236538699	WITHOUT_CLASSIFICATION	2.807634613010714E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9937113025299393	WITHOUT_CLASSIFICATION	0.006288697470060723	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994513545835834	WITHOUT_CLASSIFICATION	5.486454164165851E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999629943819618	WITHOUT_CLASSIFICATION	3.70056180381803E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998641168384648	WITHOUT_CLASSIFICATION	1.3588316153528913E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9961338909905826	WITHOUT_CLASSIFICATION	0.003866109009417304	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9992540767276702	WITHOUT_CLASSIFICATION	7.45923272329851E-4	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998200835442046	WITHOUT_CLASSIFICATION	1.7991645579551574E-4	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999648734480826	WITHOUT_CLASSIFICATION	3.512655191732938E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999793337780472	WITHOUT_CLASSIFICATION	2.06662219527978E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.999793337780472	WITHOUT_CLASSIFICATION	2.06662219527978E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9998641168384648	WITHOUT_CLASSIFICATION	1.3588316153528913E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998812294995264	WITHOUT_CLASSIFICATION	1.1877050047361661E-4	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9780411664096884	WITHOUT_CLASSIFICATION	0.021958833590311585	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9848377677317941	WITHOUT_CLASSIFICATION	0.015162232268205936	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999515899085634	WITHOUT_CLASSIFICATION	4.841009143665038E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996026758826987	WITHOUT_CLASSIFICATION	3.973241173014059E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998415815900011	WITHOUT_CLASSIFICATION	1.5841840999873615E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9983708420870221	WITHOUT_CLASSIFICATION	0.001629157912977878	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9973981232527708	WITHOUT_CLASSIFICATION	0.0026018767472293426	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9998976119309722	WITHOUT_CLASSIFICATION	1.0238806902785484E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999796197458649	WITHOUT_CLASSIFICATION	2.0380254135118922E-5	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9673152951728953	WITHOUT_CLASSIFICATION	0.03268470482710467	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9996974744144017	WITHOUT_CLASSIFICATION	3.025255855983642E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9997886178404195	WITHOUT_CLASSIFICATION	2.1138215958050268E-4	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997922098912819	WITHOUT_CLASSIFICATION	2.0779010871812162E-4	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9996791732982788	WITHOUT_CLASSIFICATION	3.2082670172108794E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.997062039803312	WITHOUT_CLASSIFICATION	0.002937960196688019	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999699458765307	WITHOUT_CLASSIFICATION	3.0054123469303812E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967667146525847	WITHOUT_CLASSIFICATION	0.0032332853474153606	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9967248833658472	WITHOUT_CLASSIFICATION	0.0032751166341527726	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9997888624494146	WITHOUT_CLASSIFICATION	2.111375505853193E-4	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9960314613614242	WITHOUT_CLASSIFICATION	0.003968538638575796	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9967818639053337	WITHOUT_CLASSIFICATION	0.0032181360946661546	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9951844308666727	WITHOUT_CLASSIFICATION	0.004815569133327259	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991497644277201	WITHOUT_CLASSIFICATION	8.502355722798627E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997198953420765	WITHOUT_CLASSIFICATION	2.80104657923592E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987628306090559	WITHOUT_CLASSIFICATION	0.0012371693909441683	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9925372296838268	WITHOUT_CLASSIFICATION	0.00746277031617316	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.951178517378889	WITHOUT_CLASSIFICATION	0.0488214826211111	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991242674756637	WITHOUT_CLASSIFICATION	8.75732524336388E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9796745231049924	WITHOUT_CLASSIFICATION	0.02032547689500763	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992658810000654	WITHOUT_CLASSIFICATION	7.34118999934635E-4	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995832347462574	WITHOUT_CLASSIFICATION	4.1676525374261073E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986167531637694	WITHOUT_CLASSIFICATION	0.0013832468362306297	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987453883736642	WITHOUT_CLASSIFICATION	0.0012546116263357984	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.99990886820391	WITHOUT_CLASSIFICATION	9.113179608992306E-5	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994661527855802	WITHOUT_CLASSIFICATION	5.338472144198145E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9971341980094547	WITHOUT_CLASSIFICATION	0.0028658019905454185	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993964947251248	WITHOUT_CLASSIFICATION	6.035052748751268E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9372363078418269	WITHOUT_CLASSIFICATION	0.06276369215817318	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994211872545242	WITHOUT_CLASSIFICATION	5.788127454758811E-4	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9999018843869436	WITHOUT_CLASSIFICATION	9.811561305645477E-5	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997411525355312	WITHOUT_CLASSIFICATION	2.5884746446887133E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999967530857208	WITHOUT_CLASSIFICATION	3.246914279299613E-6	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9998018193890982	WITHOUT_CLASSIFICATION	1.9818061090169672E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9998029630880331	WITHOUT_CLASSIFICATION	1.9703691196688448E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9995333228115476	WITHOUT_CLASSIFICATION	4.666771884523441E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9994088288784666	WITHOUT_CLASSIFICATION	5.91171121533387E-4	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9995819439324798	WITHOUT_CLASSIFICATION	4.180560675202336E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9862750562943221	WITHOUT_CLASSIFICATION	0.013724943705677863	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9904823341710779	WITHOUT_CLASSIFICATION	0.009517665828922137	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9986622918677719	WITHOUT_CLASSIFICATION	0.0013377081322281542	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9948624200014671	WITHOUT_CLASSIFICATION	0.005137579998532849	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994725509577007	WITHOUT_CLASSIFICATION	5.274490422992061E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994990489919516	WITHOUT_CLASSIFICATION	5.00951008048399E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996047332151625	WITHOUT_CLASSIFICATION	3.952667848375827E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995075935616133	WITHOUT_CLASSIFICATION	4.924064383866929E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.998296802194029	WITHOUT_CLASSIFICATION	0.0017031978059709038	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999908901587337	WITHOUT_CLASSIFICATION	9.109841266254123E-6	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9996013055383589	WITHOUT_CLASSIFICATION	3.986944616411086E-4	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999987698996119	WITHOUT_CLASSIFICATION	1.2301003881451378E-6	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993526937719893	WITHOUT_CLASSIFICATION	6.473062280107432E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9991603935535344	WITHOUT_CLASSIFICATION	8.396064464656723E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9994408163403886	WITHOUT_CLASSIFICATION	5.591836596113231E-4	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9984906706440289	WITHOUT_CLASSIFICATION	0.0015093293559712384	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.913321229083406	WITHOUT_CLASSIFICATION	0.08667877091659408	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9592429496320886	WITHOUT_CLASSIFICATION	0.04075705036791143	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9982793208026501	WITHOUT_CLASSIFICATION	0.001720679197349781	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9999739427711936	WITHOUT_CLASSIFICATION	2.6057228806439356E-5	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9938478605563804	WITHOUT_CLASSIFICATION	0.006152139443619627	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994211872545242	WITHOUT_CLASSIFICATION	5.788127454758811E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9918635806796811	WITHOUT_CLASSIFICATION	0.00813641932031889	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999132518064895	WITHOUT_CLASSIFICATION	8.674819351058485E-5	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9994691787104869	WITHOUT_CLASSIFICATION	5.308212895130123E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994206673306524	WITHOUT_CLASSIFICATION	5.793326693475741E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9985072214563826	WITHOUT_CLASSIFICATION	0.0014927785436173937	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999678076913621	WITHOUT_CLASSIFICATION	3.219230863799226E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.998296802194029	WITHOUT_CLASSIFICATION	0.0017031978059709038	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9997766062165439	WITHOUT_CLASSIFICATION	2.2339378345618175E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9992869319663039	WITHOUT_CLASSIFICATION	7.130680336961149E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995006490145891	WITHOUT_CLASSIFICATION	4.993509854108196E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992132125585048	WITHOUT_CLASSIFICATION	7.867874414951595E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9988512423281294	WITHOUT_CLASSIFICATION	0.001148757671870631	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998263463753017	WITHOUT_CLASSIFICATION	1.736536246982514E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.995020689814831	WITHOUT_CLASSIFICATION	0.0049793101851688705	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9906593848574603	WITHOUT_CLASSIFICATION	0.009340615142539649	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9998163445608268	WITHOUT_CLASSIFICATION	1.8365543917319476E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.999230866653968	WITHOUT_CLASSIFICATION	7.691333460320519E-4	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9995529838353501	WITHOUT_CLASSIFICATION	4.470161646498176E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994265323675076	WITHOUT_CLASSIFICATION	5.734676324924802E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9927496277835594	WITHOUT_CLASSIFICATION	0.0072503722164406975	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9996408825540836	WITHOUT_CLASSIFICATION	3.5911744591645355E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9994724491928249	WITHOUT_CLASSIFICATION	5.275508071752019E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999940465344205	WITHOUT_CLASSIFICATION	5.953465579504613E-5	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995989177175816	WITHOUT_CLASSIFICATION	4.0108228241843703E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9987992560811446	WITHOUT_CLASSIFICATION	0.0012007439188554002	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997126467765006	WITHOUT_CLASSIFICATION	2.8735322349937885E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9876688747309382	WITHOUT_CLASSIFICATION	0.012331125269061834	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9995785760475338	WITHOUT_CLASSIFICATION	4.214239524662594E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9969956247024483	WITHOUT_CLASSIFICATION	0.003004375297551756	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999594317643997	WITHOUT_CLASSIFICATION	4.056823560027798E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.7029016042438397	WITHOUT_CLASSIFICATION	0.2970983957561602	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9998424140004432	WITHOUT_CLASSIFICATION	1.575859995567922E-4	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9998197938109198	WITHOUT_CLASSIFICATION	1.8020618908029838E-4	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9985259453763569	WITHOUT_CLASSIFICATION	0.001474054623643205	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994211872545242	WITHOUT_CLASSIFICATION	5.788127454758811E-4	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9958313330896649	WITHOUT_CLASSIFICATION	0.004168666910335222	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9997088675071042	WITHOUT_CLASSIFICATION	2.9113249289585596E-4	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.981009404461053	WITHOUT_CLASSIFICATION	0.018990595538947008	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9994635160254153	WITHOUT_CLASSIFICATION	5.364839745846634E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994772698210977	WITHOUT_CLASSIFICATION	5.227301789022518E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9994859740874114	WITHOUT_CLASSIFICATION	5.140259125886123E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994211872545242	WITHOUT_CLASSIFICATION	5.788127454758811E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.999793575651796	WITHOUT_CLASSIFICATION	2.0642434820395861E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9995989177175816	WITHOUT_CLASSIFICATION	4.0108228241843703E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9888706650920456	WITHOUT_CLASSIFICATION	0.011129334907954485	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999940465344205	WITHOUT_CLASSIFICATION	5.953465579504613E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999895802701982	WITHOUT_CLASSIFICATION	1.0419729801756092E-5	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9838202071891237	WITHOUT_CLASSIFICATION	0.016179792810876257	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999118254753747	WITHOUT_CLASSIFICATION	8.817452462529575E-5	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9995006490145891	WITHOUT_CLASSIFICATION	4.993509854108196E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992132125585048	WITHOUT_CLASSIFICATION	7.867874414951595E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9988512423281294	WITHOUT_CLASSIFICATION	0.001148757671870631	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.99998294705982	WITHOUT_CLASSIFICATION	1.705294017989763E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9998484644738198	WITHOUT_CLASSIFICATION	1.5153552618028533E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999054403789323	WITHOUT_CLASSIFICATION	9.455962106777963E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999940465344205	WITHOUT_CLASSIFICATION	5.953465579504613E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999895802701982	WITHOUT_CLASSIFICATION	1.0419729801756092E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9994211872545242	WITHOUT_CLASSIFICATION	5.788127454758811E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9998263463753017	WITHOUT_CLASSIFICATION	1.736536246982514E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.995020689814831	WITHOUT_CLASSIFICATION	0.0049793101851688705	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9906593848574603	WITHOUT_CLASSIFICATION	0.009340615142539649	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993551233939285	WITHOUT_CLASSIFICATION	6.448766060713796E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997415743047097	WITHOUT_CLASSIFICATION	2.5842569529030114E-4	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9998724918565061	WITHOUT_CLASSIFICATION	1.2750814349391152E-4	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9992569688696504	WITHOUT_CLASSIFICATION	7.43031130349474E-4	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.9914042279121192	WITHOUT_CLASSIFICATION	0.008595772087880742	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9980284804817332	WITHOUT_CLASSIFICATION	0.0019715195182668107	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9899528063531781	WITHOUT_CLASSIFICATION	0.010047193646822026	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9988530589383394	WITHOUT_CLASSIFICATION	0.0011469410616605751	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9953111873856136	WITHOUT_CLASSIFICATION	0.0046888126143864155	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987628306090559	WITHOUT_CLASSIFICATION	0.0012371693909441683	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9796745231049924	WITHOUT_CLASSIFICATION	0.02032547689500763	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9950697371928843	WITHOUT_CLASSIFICATION	0.004930262807115742	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.997844435113861	WITHOUT_CLASSIFICATION	0.0021555648861390293	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998527802415476	WITHOUT_CLASSIFICATION	0.0014721975845239854	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.985756391249968	WITHOUT_CLASSIFICATION	0.014243608750032017	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992658810000654	WITHOUT_CLASSIFICATION	7.34118999934635E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998573373004511	WITHOUT_CLASSIFICATION	0.001426626995488986	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.913321229083406	WITHOUT_CLASSIFICATION	0.08667877091659408	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9941663854413502	WITHOUT_CLASSIFICATION	0.005833614558649839	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.997961028500396	WITHOUT_CLASSIFICATION	0.0020389714996039954	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999629288084485	WITHOUT_CLASSIFICATION	3.7071191551499046E-5	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.99863567950845	WITHOUT_CLASSIFICATION	0.001364320491550028	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9987608995626598	WITHOUT_CLASSIFICATION	0.0012391004373402121	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9993355640095806	WITHOUT_CLASSIFICATION	6.644359904194855E-4	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9996243797016487	WITHOUT_CLASSIFICATION	3.756202983512439E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9973981232527708	WITHOUT_CLASSIFICATION	0.0026018767472293426	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995664026003944	WITHOUT_CLASSIFICATION	4.3359739960563545E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9950060173339524	WITHOUT_CLASSIFICATION	0.004993982666047494	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9992476901437221	WITHOUT_CLASSIFICATION	7.523098562779727E-4	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9996376804994517	WITHOUT_CLASSIFICATION	3.6231950054840665E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.999915080861693	WITHOUT_CLASSIFICATION	8.491913830698464E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998388169904266	WITHOUT_CLASSIFICATION	1.6118300957330967E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996281713513939	WITHOUT_CLASSIFICATION	3.7182864860615814E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994735949272057	WITHOUT_CLASSIFICATION	5.264050727942146E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998574171257814	WITHOUT_CLASSIFICATION	1.425828742187451E-4	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9982916101866998	WITHOUT_CLASSIFICATION	0.0017083898133002141	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9999374626276208	WITHOUT_CLASSIFICATION	6.253737237906628E-5	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9993985282474626	WITHOUT_CLASSIFICATION	6.01471752537501E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997134449131789	WITHOUT_CLASSIFICATION	2.865550868210828E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994075610295862	WITHOUT_CLASSIFICATION	5.92438970413818E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998132159241173	WITHOUT_CLASSIFICATION	1.867840758826731E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9962124843800244	WITHOUT_CLASSIFICATION	0.003787515619975514	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9961675208099185	WITHOUT_CLASSIFICATION	0.003832479190081547	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994075610295862	WITHOUT_CLASSIFICATION	5.92438970413818E-4	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9996778904154318	WITHOUT_CLASSIFICATION	3.221095845682526E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9996832879225156	WITHOUT_CLASSIFICATION	3.167120774843959E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998051037889998	WITHOUT_CLASSIFICATION	1.948962110002773E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9996582124668452	WITHOUT_CLASSIFICATION	3.417875331547826E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9235089695445527	WITHOUT_CLASSIFICATION	0.07649103045544729	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9982560124457202	WITHOUT_CLASSIFICATION	0.0017439875542798423	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999353490921116	WITHOUT_CLASSIFICATION	6.465090788848442E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999564379811642	WITHOUT_CLASSIFICATION	4.356201883581089E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999564379811642	WITHOUT_CLASSIFICATION	4.356201883581089E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999234631338807	WITHOUT_CLASSIFICATION	7.6536866119338E-5	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9995842998002595	WITHOUT_CLASSIFICATION	4.1570019974052037E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9995786006958319	WITHOUT_CLASSIFICATION	4.213993041681135E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999925881904423	WITHOUT_CLASSIFICATION	7.411809557643789E-6	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9995790764772056	WITHOUT_CLASSIFICATION	4.2092352279446253E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9997220380968753	WITHOUT_CLASSIFICATION	2.7796190312474753E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9992021806542477	WITHOUT_CLASSIFICATION	7.978193457521913E-4	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9996070819104151	WITHOUT_CLASSIFICATION	3.9291808958490283E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9997904805335115	WITHOUT_CLASSIFICATION	2.0951946648847998E-4	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999848809889728	WITHOUT_CLASSIFICATION	1.5119011027318238E-5	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999928102199735	WITHOUT_CLASSIFICATION	7.18978002646336E-6	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9999625386368696	WITHOUT_CLASSIFICATION	3.746136313051597E-5	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9993729047202949	WITHOUT_CLASSIFICATION	6.270952797050222E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.99045351535221	WITHOUT_CLASSIFICATION	0.009546484647789849	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.999669417384013	WITHOUT_CLASSIFICATION	3.305826159869199E-4	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9837857596178423	WITHOUT_CLASSIFICATION	0.016214240382157626	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9996593634013845	WITHOUT_CLASSIFICATION	3.406365986154632E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.996108768953076	WITHOUT_CLASSIFICATION	0.0038912310469240937	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9981864546691913	WITHOUT_CLASSIFICATION	0.0018135453308086667	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9997298582464179	WITHOUT_CLASSIFICATION	2.701417535821258E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9996978636909021	WITHOUT_CLASSIFICATION	3.0213630909788194E-4	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9997521815109482	WITHOUT_CLASSIFICATION	2.4781848905173E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9997946760971709	WITHOUT_CLASSIFICATION	2.053239028292028E-4	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998961645843699	WITHOUT_CLASSIFICATION	1.0383541563007818E-4	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998587058580515	WITHOUT_CLASSIFICATION	1.4129414194851607E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9992653710595721	WITHOUT_CLASSIFICATION	7.346289404278069E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9991483601643102	WITHOUT_CLASSIFICATION	8.516398356898302E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9993209815397229	WITHOUT_CLASSIFICATION	6.79018460277091E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9881258583986382	WITHOUT_CLASSIFICATION	0.011874141601361878	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9998114074630639	WITHOUT_CLASSIFICATION	1.8859253693611142E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9999551438667574	WITHOUT_CLASSIFICATION	4.485613324255673E-5	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9999148168094038	WITHOUT_CLASSIFICATION	8.51831905961592E-5	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9999489981659676	WITHOUT_CLASSIFICATION	5.1001834032373575E-5	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9997053508915866	WITHOUT_CLASSIFICATION	2.9464910841343043E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999938688132807	WITHOUT_CLASSIFICATION	6.131186719313908E-6	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9998284652325594	WITHOUT_CLASSIFICATION	1.7153476744064344E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9930306113379104	WITHOUT_CLASSIFICATION	0.006969388662089553	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9867978866599483	WITHOUT_CLASSIFICATION	0.013202113340051735	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.9860585215655371	WITHOUT_CLASSIFICATION	0.01394147843446296	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999127890272034	WITHOUT_CLASSIFICATION	8.721097279663791E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9981522350203916	WITHOUT_CLASSIFICATION	0.0018477649796083539	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9995529838353501	WITHOUT_CLASSIFICATION	4.470161646498176E-4	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9995529838353501	WITHOUT_CLASSIFICATION	4.470161646498176E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9979704385999532	WITHOUT_CLASSIFICATION	0.002029561400046866	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9976571905535103	WITHOUT_CLASSIFICATION	0.0023428094464897726	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9998912724777524	WITHOUT_CLASSIFICATION	1.0872752224755167E-4	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999936652846844	WITHOUT_CLASSIFICATION	6.334715315555851E-6	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9996160417717282	WITHOUT_CLASSIFICATION	3.8395822827174835E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9991034055013219	WITHOUT_CLASSIFICATION	8.965944986779398E-4	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995582822432586	WITHOUT_CLASSIFICATION	4.4171775674142625E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9970221714614387	WITHOUT_CLASSIFICATION	0.002977828538561299	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.999887997469974	WITHOUT_CLASSIFICATION	1.1200253002589651E-4	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9958550805206573	WITHOUT_CLASSIFICATION	0.00414491947934279	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999837466669571	WITHOUT_CLASSIFICATION	1.6253333042913186E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.8545890123120555	WITHOUT_CLASSIFICATION	0.14541098768794453	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.999739502260474	WITHOUT_CLASSIFICATION	2.604977395259717E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994486232301865	WITHOUT_CLASSIFICATION	5.513767698135003E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.999550699645568	WITHOUT_CLASSIFICATION	4.493003544320555E-4	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9961133945787527	WITHOUT_CLASSIFICATION	0.0038866054212473447	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9996877751156995	WITHOUT_CLASSIFICATION	3.122248843004647E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995123850878745	WITHOUT_CLASSIFICATION	4.876149121254897E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9998054755990213	WITHOUT_CLASSIFICATION	1.9452440097865217E-4	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999316469754359	WITHOUT_CLASSIFICATION	6.835302456417433E-5	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9969847285545407	WITHOUT_CLASSIFICATION	0.003015271445459284	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999469523379789	WITHOUT_CLASSIFICATION	5.304766202117186E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9999316469754359	WITHOUT_CLASSIFICATION	6.835302456417433E-5	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9998559077232593	WITHOUT_CLASSIFICATION	1.4409227674066553E-4	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999830609541327	WITHOUT_CLASSIFICATION	1.6939045867268264E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9982258584505473	WITHOUT_CLASSIFICATION	0.0017741415494526656	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9889652307697617	WITHOUT_CLASSIFICATION	0.011034769230238255	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9991790457954998	WITHOUT_CLASSIFICATION	8.209542045001764E-4	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999650560883593	WITHOUT_CLASSIFICATION	3.4943911640606105E-5	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9994544034595796	WITHOUT_CLASSIFICATION	5.455965404203744E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9981828709099919	WITHOUT_CLASSIFICATION	0.0018171290900080253	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9950873014180084	WITHOUT_CLASSIFICATION	0.0049126985819915574	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.999971760194888	WITHOUT_CLASSIFICATION	2.823980511209534E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999520541746866	WITHOUT_CLASSIFICATION	4.794582531351355E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9980939940959399	WITHOUT_CLASSIFICATION	0.0019060059040599923	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9982555613626185	WITHOUT_CLASSIFICATION	0.0017444386373814038	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999210641237378	WITHOUT_CLASSIFICATION	7.893587626220556E-4	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.80770408924562	WITHOUT_CLASSIFICATION	0.19229591075437993	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9999513820393618	WITHOUT_CLASSIFICATION	4.8617960638064964E-5	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9999125006103665	WITHOUT_CLASSIFICATION	8.749938963341445E-5	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9997855711682104	WITHOUT_CLASSIFICATION	2.144288317895656E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9988884202373507	WITHOUT_CLASSIFICATION	0.0011115797626492193	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9956434994231265	WITHOUT_CLASSIFICATION	0.004356500576873611	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999469093163743	WITHOUT_CLASSIFICATION	5.309068362573287E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9993557851123746	WITHOUT_CLASSIFICATION	6.442148876253649E-4	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9983291367233033	WITHOUT_CLASSIFICATION	0.0016708632766967687	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9974075076110062	WITHOUT_CLASSIFICATION	0.0025924923889939027	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9993945489995271	WITHOUT_CLASSIFICATION	6.054510004729419E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999679394546883	WITHOUT_CLASSIFICATION	3.206054531180676E-5	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998150702590624	WITHOUT_CLASSIFICATION	1.849297409376915E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9988421074446283	WITHOUT_CLASSIFICATION	0.0011578925553716688	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9995752580624574	WITHOUT_CLASSIFICATION	4.2474193754257793E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9998388169904266	WITHOUT_CLASSIFICATION	1.6118300957330967E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996377133936338	WITHOUT_CLASSIFICATION	3.622866063661314E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9997285732974347	WITHOUT_CLASSIFICATION	2.7142670256523517E-4	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9994821911634644	WITHOUT_CLASSIFICATION	5.178088365356261E-4	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999789322276567	WITHOUT_CLASSIFICATION	2.106777234329597E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9998748492056403	WITHOUT_CLASSIFICATION	1.2515079435970492E-4	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9997997208022055	WITHOUT_CLASSIFICATION	2.0027919779455443E-4	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.994113506737378	WITHOUT_CLASSIFICATION	0.005886493262621987	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998180746712595	WITHOUT_CLASSIFICATION	1.8192532874058422E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.993084389814373	WITHOUT_CLASSIFICATION	0.006915610185626928	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9789645305209133	WITHOUT_CLASSIFICATION	0.021035469479086747	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999211911738963	WITHOUT_CLASSIFICATION	7.880882610365548E-5	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.9935666158392433	WITHOUT_CLASSIFICATION	0.006433384160756644	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9919400856480355	WITHOUT_CLASSIFICATION	0.008059914351964438	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999833164085342	WITHOUT_CLASSIFICATION	1.6683591465714364E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999713375729878	WITHOUT_CLASSIFICATION	2.866242701217661E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9998991826179002	WITHOUT_CLASSIFICATION	1.0081738209985739E-4	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999287292457643	WITHOUT_CLASSIFICATION	7.127075423569416E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9990037591312245	WITHOUT_CLASSIFICATION	9.96240868775435E-4	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9983259515550807	WITHOUT_CLASSIFICATION	0.0016740484449191803	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999127656291289	WITHOUT_CLASSIFICATION	8.723437087113615E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9997945112089569	WITHOUT_CLASSIFICATION	2.0548879104308193E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9995969888982027	WITHOUT_CLASSIFICATION	4.0301110179729785E-4	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9998107346663745	WITHOUT_CLASSIFICATION	1.8926533362546082E-4	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9893041637558271	WITHOUT_CLASSIFICATION	0.010695836244172946	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9996792196663141	WITHOUT_CLASSIFICATION	3.2078033368586843E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9956637615217604	WITHOUT_CLASSIFICATION	0.0043362384782395765	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9998870330762785	WITHOUT_CLASSIFICATION	1.1296692372156591E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9957466644384276	WITHOUT_CLASSIFICATION	0.0042533355615722804	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9903884161877251	WITHOUT_CLASSIFICATION	0.009611583812274959	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991106183485511	WITHOUT_CLASSIFICATION	8.893816514489702E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994790978458125	WITHOUT_CLASSIFICATION	5.209021541875325E-4	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996205143036213	WITHOUT_CLASSIFICATION	3.7948569637872415E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.8242843240569155	WITHOUT_CLASSIFICATION	0.17571567594308438	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9998344239500618	WITHOUT_CLASSIFICATION	1.655760499381486E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999694840869457	WITHOUT_CLASSIFICATION	3.051591305420019E-5	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9412991418853136	WITHOUT_CLASSIFICATION	0.05870085811468634	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9997074202959757	WITHOUT_CLASSIFICATION	2.925797040243077E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979899461672107	WITHOUT_CLASSIFICATION	0.0020100538327893153	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9997074202959757	WITHOUT_CLASSIFICATION	2.925797040243077E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996510924766723	WITHOUT_CLASSIFICATION	3.4890752332775084E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9999389204011723	WITHOUT_CLASSIFICATION	6.107959882778607E-5	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9995698381099439	WITHOUT_CLASSIFICATION	4.301618900560991E-4	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9946039586594131	WITHOUT_CLASSIFICATION	0.0053960413405869075	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9965244571782785	WITHOUT_CLASSIFICATION	0.003475542821721468	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9989384711970364	WITHOUT_CLASSIFICATION	0.001061528802963625	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9996598687119915	WITHOUT_CLASSIFICATION	3.401312880084483E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9997610516026291	WITHOUT_CLASSIFICATION	2.3894839737104297E-4	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999843716905096	WITHOUT_CLASSIFICATION	1.5628309490425035E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9867532905271325	WITHOUT_CLASSIFICATION	0.013246709472867541	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9962452038845976	WITHOUT_CLASSIFICATION	0.0037547961154024484	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.977973524153609	WITHOUT_CLASSIFICATION	0.022026475846390958	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9995740501702545	WITHOUT_CLASSIFICATION	4.259498297455038E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.8281020835156904	WITHOUT_CLASSIFICATION	0.1718979164843096	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.843057215477281	WITHOUT_CLASSIFICATION	0.15694278452271912	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9915064517900315	WITHOUT_CLASSIFICATION	0.008493548209968619	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997816103648413	WITHOUT_CLASSIFICATION	2.1838963515860059E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997816103648413	WITHOUT_CLASSIFICATION	2.1838963515860059E-4	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9990683212843997	WITHOUT_CLASSIFICATION	9.316787156003676E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9984978479092904	WITHOUT_CLASSIFICATION	0.001502152090709657	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9998216844618328	WITHOUT_CLASSIFICATION	1.7831553816729216E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999839556520128	WITHOUT_CLASSIFICATION	1.6044347987139383E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9990772417803127	WITHOUT_CLASSIFICATION	9.22758219687346E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9975150622765234	WITHOUT_CLASSIFICATION	0.0024849377234766653	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.8871927808983903	WITHOUT_CLASSIFICATION	0.11280721910160972	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9986504641846297	WITHOUT_CLASSIFICATION	0.0013495358153704149	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9998722221783187	WITHOUT_CLASSIFICATION	1.2777782168124925E-4	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997209306634977	WITHOUT_CLASSIFICATION	2.790693365023123E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996262551621282	WITHOUT_CLASSIFICATION	3.7374483787182934E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999624876776474	WITHOUT_CLASSIFICATION	3.7512322352493144E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9994272885709758	WITHOUT_CLASSIFICATION	5.727114290241318E-4	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9997116617060289	WITHOUT_CLASSIFICATION	2.8833829397111065E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999487203966935	WITHOUT_CLASSIFICATION	5.1279603306430273E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9955508985854717	WITHOUT_CLASSIFICATION	0.004449101414528148	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9990527182154004	WITHOUT_CLASSIFICATION	9.472817845996187E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9900613344306555	WITHOUT_CLASSIFICATION	0.009938665569344425	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9999045412525442	WITHOUT_CLASSIFICATION	9.545874745568207E-5	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999476747182482	WITHOUT_CLASSIFICATION	5.232528175182225E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9999053902671332	WITHOUT_CLASSIFICATION	9.460973286674659E-5	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999790481171141	WITHOUT_CLASSIFICATION	2.0951882885886375E-5	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999872485761696	WITHOUT_CLASSIFICATION	1.2751423830378205E-5	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9983526229507668	WITHOUT_CLASSIFICATION	0.0016473770492331896	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9998550875671867	WITHOUT_CLASSIFICATION	1.4491243281330998E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9995063210850096	WITHOUT_CLASSIFICATION	4.936789149904324E-4	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9995394700789675	WITHOUT_CLASSIFICATION	4.605299210325363E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9991104954674938	WITHOUT_CLASSIFICATION	8.895045325062593E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9998764390020449	WITHOUT_CLASSIFICATION	1.235609979550929E-4	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9999203534859503	WITHOUT_CLASSIFICATION	7.964651404969924E-5	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999340564518836	WITHOUT_CLASSIFICATION	6.594354811641847E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9992142692767231	WITHOUT_CLASSIFICATION	7.857307232770268E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.999257418279627	WITHOUT_CLASSIFICATION	7.425817203729742E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9966240815740114	WITHOUT_CLASSIFICATION	0.0033759184259886123	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9996199371995576	WITHOUT_CLASSIFICATION	3.8006280044247404E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9999040911113442	WITHOUT_CLASSIFICATION	9.590888865590417E-5	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999040827673683	WITHOUT_CLASSIFICATION	9.591723263175564E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.999147145804526	WITHOUT_CLASSIFICATION	8.528541954739362E-4	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9997809858530111	WITHOUT_CLASSIFICATION	2.1901414698881545E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9995875232134446	WITHOUT_CLASSIFICATION	4.1247678655543314E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999536006199277	WITHOUT_CLASSIFICATION	4.6399380072245426E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993987228760434	WITHOUT_CLASSIFICATION	6.012771239566153E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9996976580592024	WITHOUT_CLASSIFICATION	3.023419407975473E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999583222287144	WITHOUT_CLASSIFICATION	4.167777128570467E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999740964218266	WITHOUT_CLASSIFICATION	2.590357817347873E-5	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9867915944463428	WITHOUT_CLASSIFICATION	0.01320840555365727	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9882426434654222	WITHOUT_CLASSIFICATION	0.011757356534577788	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999985031267773	WITHOUT_CLASSIFICATION	1.4968732227272494E-6	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9996122619826822	WITHOUT_CLASSIFICATION	3.8773801731777855E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9728421605045972	WITHOUT_CLASSIFICATION	0.02715783949540284	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993987228760434	WITHOUT_CLASSIFICATION	6.012771239566153E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9994126313988533	WITHOUT_CLASSIFICATION	5.873686011466199E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9892965599940811	WITHOUT_CLASSIFICATION	0.010703440005919036	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9985213586311974	WITHOUT_CLASSIFICATION	0.0014786413688025945	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9995841197166583	WITHOUT_CLASSIFICATION	4.1588028334170387E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.999793575651796	WITHOUT_CLASSIFICATION	2.0642434820395861E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.999793575651796	WITHOUT_CLASSIFICATION	2.0642434820395861E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999977222839682	WITHOUT_CLASSIFICATION	2.277716031745755E-6	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.999542249592166	WITHOUT_CLASSIFICATION	4.5775040783402267E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997428078362233	WITHOUT_CLASSIFICATION	2.5719216377671636E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999090165346918	WITHOUT_CLASSIFICATION	9.098346530826874E-5	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9989766935984792	WITHOUT_CLASSIFICATION	0.0010233064015208603	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9989712805553908	WITHOUT_CLASSIFICATION	0.0010287194446093083	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9996969785389346	WITHOUT_CLASSIFICATION	3.030214610654179E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9940939728572292	WITHOUT_CLASSIFICATION	0.00590602714277077	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999772164142493	WITHOUT_CLASSIFICATION	2.278358575067155E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9996981708005013	WITHOUT_CLASSIFICATION	3.018291994986617E-4	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.999884281759465	WITHOUT_CLASSIFICATION	1.1571824053502826E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.999814610675871	WITHOUT_CLASSIFICATION	1.853893241289075E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998765455902567	WITHOUT_CLASSIFICATION	1.2345440974318402E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9947112845558785	WITHOUT_CLASSIFICATION	0.005288715444121461	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5970397672281567	WITHOUT_CLASSIFICATION	0.40296023277184345	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9779858804918133	WITHOUT_CLASSIFICATION	0.022014119508186672	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9934303182587554	WITHOUT_CLASSIFICATION	0.0065696817412445796	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9993227036738294	WITHOUT_CLASSIFICATION	6.772963261706968E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9988377528905323	WITHOUT_CLASSIFICATION	0.0011622471094676636	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9938910662506013	WITHOUT_CLASSIFICATION	0.006108933749398693	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994635160254153	WITHOUT_CLASSIFICATION	5.364839745846634E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9974962998609174	WITHOUT_CLASSIFICATION	0.0025037001390825478	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999080886690387	WITHOUT_CLASSIFICATION	9.19113309612151E-5	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.974411494004609	WITHOUT_CLASSIFICATION	0.025588505995390993	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998077528342066	WITHOUT_CLASSIFICATION	1.922471657933347E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998157447032693	WITHOUT_CLASSIFICATION	1.842552967306541E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9925298737566306	WITHOUT_CLASSIFICATION	0.0074701262433694415	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.994012136704354	WITHOUT_CLASSIFICATION	0.005987863295646098	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999794228215402	WITHOUT_CLASSIFICATION	2.0577178459780316E-5	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998861531886745	WITHOUT_CLASSIFICATION	1.1384681132561064E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999372741904529	WITHOUT_CLASSIFICATION	6.272580954710263E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5936072668511864	DESIGN	0.40639273314881363	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.8425950088085055	WITHOUT_CLASSIFICATION	0.1574049911914945	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999372741904529	WITHOUT_CLASSIFICATION	6.272580954710263E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999122410406929	WITHOUT_CLASSIFICATION	8.775895930712542E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9998861531886745	WITHOUT_CLASSIFICATION	1.1384681132561064E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9996358702788607	WITHOUT_CLASSIFICATION	3.641297211393104E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999372741904529	WITHOUT_CLASSIFICATION	6.272580954710263E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9993572992450441	WITHOUT_CLASSIFICATION	6.427007549558931E-4	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9983035835551587	WITHOUT_CLASSIFICATION	0.001696416444841282	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9996262551621282	WITHOUT_CLASSIFICATION	3.7374483787182934E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9981024130174663	WITHOUT_CLASSIFICATION	0.0018975869825337594	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9993355640095806	WITHOUT_CLASSIFICATION	6.644359904194855E-4	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999922005763758	WITHOUT_CLASSIFICATION	7.799423624123755E-6	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9992142826397309	WITHOUT_CLASSIFICATION	7.857173602691578E-4	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999975475757639	WITHOUT_CLASSIFICATION	2.4524242361454206E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9997219839285134	WITHOUT_CLASSIFICATION	2.7801607148655855E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999761058180417	WITHOUT_CLASSIFICATION	2.3894181958186493E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998062504726396	WITHOUT_CLASSIFICATION	1.9374952736037697E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9997115223807591	WITHOUT_CLASSIFICATION	2.8847761924089547E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998154906868815	WITHOUT_CLASSIFICATION	1.8450931311866602E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9994549433233648	WITHOUT_CLASSIFICATION	5.450566766351566E-4	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9995113252052531	WITHOUT_CLASSIFICATION	4.88674794747011E-4	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.999784527769969	WITHOUT_CLASSIFICATION	2.154722300311153E-4	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9999478492642102	WITHOUT_CLASSIFICATION	5.2150735789777096E-5	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.998971319983323	WITHOUT_CLASSIFICATION	0.0010286800166770052	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9983789140688629	WITHOUT_CLASSIFICATION	0.0016210859311371266	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9998561555991685	WITHOUT_CLASSIFICATION	1.438444008314537E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9997037242909551	WITHOUT_CLASSIFICATION	2.962757090448356E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9988407961800722	WITHOUT_CLASSIFICATION	0.0011592038199278365	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996615749615141	WITHOUT_CLASSIFICATION	3.3842503848588315E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9999405926650341	WITHOUT_CLASSIFICATION	5.9407334965835365E-5	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999477473014079	WITHOUT_CLASSIFICATION	5.225269859209637E-4	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9998993051488827	WITHOUT_CLASSIFICATION	1.0069485111730278E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9991741984894743	WITHOUT_CLASSIFICATION	8.258015105256527E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977829849170932	WITHOUT_CLASSIFICATION	0.0022170150829067966	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9979570947804417	WITHOUT_CLASSIFICATION	0.0020429052195582802	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9891658587528691	WITHOUT_CLASSIFICATION	0.010834141247130889	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999675623799227	WITHOUT_CLASSIFICATION	3.2437620077302745E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9904195851808163	WITHOUT_CLASSIFICATION	0.009580414819183687	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998345744532191	WITHOUT_CLASSIFICATION	1.6542554678091462E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998345744532191	WITHOUT_CLASSIFICATION	1.6542554678091462E-4	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9822444229531331	WITHOUT_CLASSIFICATION	0.017755577046867012	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9988484580066245	WITHOUT_CLASSIFICATION	0.0011515419933755154	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9998760090117316	WITHOUT_CLASSIFICATION	1.2399098826842636E-4	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9998440480577351	WITHOUT_CLASSIFICATION	1.5595194226498022E-4	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9992396675697426	WITHOUT_CLASSIFICATION	7.603324302574122E-4	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9982731678671181	WITHOUT_CLASSIFICATION	0.0017268321328819227	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9981874483681283	WITHOUT_CLASSIFICATION	0.0018125516318716062	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9998754444068646	WITHOUT_CLASSIFICATION	1.2455559313540366E-4	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9994940442774775	WITHOUT_CLASSIFICATION	5.059557225225879E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9997232428679175	WITHOUT_CLASSIFICATION	2.7675713208262607E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9996722330428603	WITHOUT_CLASSIFICATION	3.277669571397107E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999392731344494	WITHOUT_CLASSIFICATION	6.072686555056437E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.999947322286118	WITHOUT_CLASSIFICATION	5.26777138818832E-5	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998345744532191	WITHOUT_CLASSIFICATION	1.6542554678091462E-4	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.999908646569054	WITHOUT_CLASSIFICATION	9.135343094602431E-5	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9908852125871342	WITHOUT_CLASSIFICATION	0.009114787412865744	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9922899480232313	WITHOUT_CLASSIFICATION	0.007710051976768569	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9998093408371542	WITHOUT_CLASSIFICATION	1.9065916284574923E-4	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.999929852882571	WITHOUT_CLASSIFICATION	7.014711742896062E-5	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9995433362372248	WITHOUT_CLASSIFICATION	4.566637627752103E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9997196332899535	WITHOUT_CLASSIFICATION	2.8036671004639483E-4	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9994216948999061	WITHOUT_CLASSIFICATION	5.783051000938679E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.998861450203163	WITHOUT_CLASSIFICATION	0.0011385497968370948	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9885586267489231	WITHOUT_CLASSIFICATION	0.011441373251076744	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9988281048946768	WITHOUT_CLASSIFICATION	0.001171895105323252	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977829849170932	WITHOUT_CLASSIFICATION	0.0022170150829067966	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998345744532191	WITHOUT_CLASSIFICATION	1.6542554678091462E-4	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998869835097639	WITHOUT_CLASSIFICATION	1.1301649023609391E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9986745406280533	WITHOUT_CLASSIFICATION	0.0013254593719467277	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9998180690376433	WITHOUT_CLASSIFICATION	1.8193096235676442E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9989902935400193	WITHOUT_CLASSIFICATION	0.001009706459980668	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9984967790375413	WITHOUT_CLASSIFICATION	0.0015032209624587659	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9998781540622687	WITHOUT_CLASSIFICATION	1.2184593773136955E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993398964021805	WITHOUT_CLASSIFICATION	6.601035978195195E-4	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.999966368024266	WITHOUT_CLASSIFICATION	3.363197573402376E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999695823584781	WITHOUT_CLASSIFICATION	3.041764152194853E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9990575626445816	WITHOUT_CLASSIFICATION	9.424373554184482E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9999326725046007	WITHOUT_CLASSIFICATION	6.732749539931406E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998764390020449	WITHOUT_CLASSIFICATION	1.235609979550929E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9997740249085046	WITHOUT_CLASSIFICATION	2.2597509149526203E-4	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9930438982781089	WITHOUT_CLASSIFICATION	0.006956101721891094	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9996510924766723	WITHOUT_CLASSIFICATION	3.4890752332775084E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9994101863298916	WITHOUT_CLASSIFICATION	5.898136701084071E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9995887803785398	WITHOUT_CLASSIFICATION	4.112196214602405E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9982872094526738	WITHOUT_CLASSIFICATION	0.0017127905473263074	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9997233706714483	WITHOUT_CLASSIFICATION	2.7662932855161834E-4	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9992744174286404	WITHOUT_CLASSIFICATION	7.255825713597161E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994711878273581	WITHOUT_CLASSIFICATION	5.288121726419528E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994711878273581	WITHOUT_CLASSIFICATION	5.288121726419528E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9998007984571674	WITHOUT_CLASSIFICATION	1.9920154283255108E-4	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9974991006122919	WITHOUT_CLASSIFICATION	0.002500899387708179	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9998824258082374	WITHOUT_CLASSIFICATION	1.1757419176255338E-4	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9960855735440843	WITHOUT_CLASSIFICATION	0.003914426455915527	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999398621528545	WITHOUT_CLASSIFICATION	6.013784714550812E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999883747432889	WITHOUT_CLASSIFICATION	1.1625256711104003E-5	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9991826751851298	WITHOUT_CLASSIFICATION	8.173248148701191E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9963811930797286	WITHOUT_CLASSIFICATION	0.003618806920271294	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9963811930797286	WITHOUT_CLASSIFICATION	0.003618806920271294	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998971123670383	WITHOUT_CLASSIFICATION	1.0288763296173423E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9998645238302344	WITHOUT_CLASSIFICATION	1.3547616976550226E-4	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998044121595075	WITHOUT_CLASSIFICATION	1.9558784049242611E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995377555351955	WITHOUT_CLASSIFICATION	4.6224446480451503E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995377555351955	WITHOUT_CLASSIFICATION	4.6224446480451503E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9995377555351955	WITHOUT_CLASSIFICATION	4.6224446480451503E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999793081843987	WITHOUT_CLASSIFICATION	2.0691815601295928E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9995587560044469	WITHOUT_CLASSIFICATION	4.4124399555317225E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.999848456271364	WITHOUT_CLASSIFICATION	1.515437286359298E-4	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.999333882340227	WITHOUT_CLASSIFICATION	6.661176597729815E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9985894762073745	WITHOUT_CLASSIFICATION	0.001410523792625483	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998345744532191	WITHOUT_CLASSIFICATION	1.6542554678091462E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998345744532191	WITHOUT_CLASSIFICATION	1.6542554678091462E-4	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9879439310026272	WITHOUT_CLASSIFICATION	0.012056068997372672	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999285068565843	WITHOUT_CLASSIFICATION	7.149314341573267E-5	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9186711547446335	WITHOUT_CLASSIFICATION	0.08132884525536661	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9997602659593585	WITHOUT_CLASSIFICATION	2.397340406415514E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9952076499123461	WITHOUT_CLASSIFICATION	0.004792350087653971	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9992381587728308	WITHOUT_CLASSIFICATION	7.618412271690267E-4	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9906878818440227	WITHOUT_CLASSIFICATION	0.009312118155977317	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9886485493188455	WITHOUT_CLASSIFICATION	0.01135145068115439	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9986904659643251	WITHOUT_CLASSIFICATION	0.0013095340356750068	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9996897750204106	WITHOUT_CLASSIFICATION	3.102249795893443E-4	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999263860691601	WITHOUT_CLASSIFICATION	7.361393083990735E-5	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9997856238294284	WITHOUT_CLASSIFICATION	2.143761705714905E-4	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9995062153546815	WITHOUT_CLASSIFICATION	4.937846453184008E-4	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9995062153546815	WITHOUT_CLASSIFICATION	4.937846453184008E-4	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9995062153546815	WITHOUT_CLASSIFICATION	4.937846453184008E-4	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9995062153546815	WITHOUT_CLASSIFICATION	4.937846453184008E-4	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9995062153546815	WITHOUT_CLASSIFICATION	4.937846453184008E-4	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9994614054983879	WITHOUT_CLASSIFICATION	5.385945016120468E-4	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9994614054983879	WITHOUT_CLASSIFICATION	5.385945016120468E-4	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9994614054983879	WITHOUT_CLASSIFICATION	5.385945016120468E-4	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994614054983879	WITHOUT_CLASSIFICATION	5.385945016120468E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9983665887259006	WITHOUT_CLASSIFICATION	0.001633411274099504	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9994711878273581	WITHOUT_CLASSIFICATION	5.288121726419528E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9995434788679961	WITHOUT_CLASSIFICATION	4.565211320038531E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9994614054983879	WITHOUT_CLASSIFICATION	5.385945016120468E-4	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999672333182351	WITHOUT_CLASSIFICATION	3.276668176494785E-5	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9993229738785497	WITHOUT_CLASSIFICATION	6.770261214503492E-4	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998745981416265	WITHOUT_CLASSIFICATION	1.2540185837358377E-4	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9996041148930849	WITHOUT_CLASSIFICATION	3.958851069151703E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9986409051407388	WITHOUT_CLASSIFICATION	0.0013590948592612884	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9987996095262898	WITHOUT_CLASSIFICATION	0.0012003904737103019	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999964204912856	WITHOUT_CLASSIFICATION	3.579508714392571E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9993779568444255	WITHOUT_CLASSIFICATION	6.220431555745545E-4	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999926496180467	WITHOUT_CLASSIFICATION	7.35038195339489E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999336072298762	WITHOUT_CLASSIFICATION	6.63927701237422E-5	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9997927234099848	WITHOUT_CLASSIFICATION	2.0727659001511218E-4	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9997536193319742	WITHOUT_CLASSIFICATION	2.4638066802590937E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9994565655819816	WITHOUT_CLASSIFICATION	5.434344180183739E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999641481425647	WITHOUT_CLASSIFICATION	3.585185743533766E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9971635871507997	WITHOUT_CLASSIFICATION	0.0028364128492002374	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9980214196486901	WITHOUT_CLASSIFICATION	0.0019785803513099522	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999624374681354	WITHOUT_CLASSIFICATION	3.756253186467635E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996024193189182	WITHOUT_CLASSIFICATION	3.9758068108180947E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9996024193189182	WITHOUT_CLASSIFICATION	3.9758068108180947E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9998449634140589	WITHOUT_CLASSIFICATION	1.5503658594107398E-4	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.999911620490797	WITHOUT_CLASSIFICATION	8.837950920301656E-5	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9996954740397211	WITHOUT_CLASSIFICATION	3.0452596027895275E-4	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9996504858949156	WITHOUT_CLASSIFICATION	3.4951410508439907E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9994364283633004	WITHOUT_CLASSIFICATION	5.635716366995738E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9975186706791478	WITHOUT_CLASSIFICATION	0.0024813293208522354	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9962253071297382	WITHOUT_CLASSIFICATION	0.0037746928702618323	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999674248490328	WITHOUT_CLASSIFICATION	3.2575150967235124E-5	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9999241965773756	WITHOUT_CLASSIFICATION	7.580342262439827E-5	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9997932373177106	WITHOUT_CLASSIFICATION	2.0676268228938456E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9971699031110115	WITHOUT_CLASSIFICATION	0.002830096888988455	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998764390020449	WITHOUT_CLASSIFICATION	1.235609979550929E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998179258668449	WITHOUT_CLASSIFICATION	1.8207413315506448E-4	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9998256245435583	WITHOUT_CLASSIFICATION	1.7437545644175383E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9992164508983448	WITHOUT_CLASSIFICATION	7.835491016551526E-4	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999640899428266	WITHOUT_CLASSIFICATION	3.591005717338064E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999888755365355	WITHOUT_CLASSIFICATION	1.1124463464422336E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999888755365355	WITHOUT_CLASSIFICATION	1.1124463464422336E-5	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998048096850348	WITHOUT_CLASSIFICATION	1.9519031496514658E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9917661317460487	WITHOUT_CLASSIFICATION	0.008233868253951377	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9998099701928805	WITHOUT_CLASSIFICATION	1.900298071195275E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9998257853021548	WITHOUT_CLASSIFICATION	1.7421469784515068E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9997806618770154	WITHOUT_CLASSIFICATION	2.1933812298457548E-4	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9985559400966347	WITHOUT_CLASSIFICATION	0.0014440599033652972	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9962289758661759	WITHOUT_CLASSIFICATION	0.0037710241338241215	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986714552868394	WITHOUT_CLASSIFICATION	0.0013285447131606459	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997206737331675	WITHOUT_CLASSIFICATION	2.7932626683248096E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9993692053593005	WITHOUT_CLASSIFICATION	6.307946406995049E-4	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.999924516420655	WITHOUT_CLASSIFICATION	7.548357934494368E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9986714552868394	WITHOUT_CLASSIFICATION	0.0013285447131606459	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.9860703162522575	WITHOUT_CLASSIFICATION	0.01392968374774244	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9988960968655123	WITHOUT_CLASSIFICATION	0.0011039031344877157	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9857466706831887	WITHOUT_CLASSIFICATION	0.014253329316811305	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9982796881717093	WITHOUT_CLASSIFICATION	0.001720311828290626	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9981863456265955	WITHOUT_CLASSIFICATION	0.001813654373404551	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9996735422912592	WITHOUT_CLASSIFICATION	3.264577087408404E-4	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998672433913662	WITHOUT_CLASSIFICATION	1.3275660863378623E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999773062566062	WITHOUT_CLASSIFICATION	2.2693743393694334E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.999588008962908	WITHOUT_CLASSIFICATION	4.119910370920621E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999430465144609	WITHOUT_CLASSIFICATION	5.695348553910575E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9993699136988432	WITHOUT_CLASSIFICATION	6.30086301156756E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999694979373145	WITHOUT_CLASSIFICATION	3.050206268549777E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9997825331494948	WITHOUT_CLASSIFICATION	2.1746685050514313E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9905107279801811	WITHOUT_CLASSIFICATION	0.009489272019818917	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9995442001514124	WITHOUT_CLASSIFICATION	4.557998485876638E-4	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9987306460314824	WITHOUT_CLASSIFICATION	0.0012693539685176395	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9974951930991273	WITHOUT_CLASSIFICATION	0.0025048069008727285	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9992171188800092	WITHOUT_CLASSIFICATION	7.828811199907439E-4	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9992171188800092	WITHOUT_CLASSIFICATION	7.828811199907439E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9998672433913662	WITHOUT_CLASSIFICATION	1.3275660863378623E-4	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9874947055965513	WITHOUT_CLASSIFICATION	0.012505294403448719	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.6373315632798546	WITHOUT_CLASSIFICATION	0.36266843672014554	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9899083780048463	WITHOUT_CLASSIFICATION	0.010091621995153755	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9996022387094102	WITHOUT_CLASSIFICATION	3.977612905897564E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9998828856545714	WITHOUT_CLASSIFICATION	1.1711434542860334E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998467752820058	WITHOUT_CLASSIFICATION	1.53224717994183E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999953673075562	WITHOUT_CLASSIFICATION	4.632692443733274E-6	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999100100817417	WITHOUT_CLASSIFICATION	8.998991825824278E-5	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.998105264580531	WITHOUT_CLASSIFICATION	0.001894735419469111	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9815094249307847	WITHOUT_CLASSIFICATION	0.018490575069215285	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999799954842563	WITHOUT_CLASSIFICATION	2.0004515743633476E-5	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9981603920285395	WITHOUT_CLASSIFICATION	0.0018396079714605496	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9990923809209111	WITHOUT_CLASSIFICATION	9.076190790888013E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9129242015148034	WITHOUT_CLASSIFICATION	0.08707579848519663	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999360687040441	WITHOUT_CLASSIFICATION	6.393129595591167E-5	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9988356827599794	WITHOUT_CLASSIFICATION	0.0011643172400206314	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999951082072568	WITHOUT_CLASSIFICATION	4.891792743134498E-6	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999588091593518	WITHOUT_CLASSIFICATION	4.1190840648153035E-5	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9998835540951563	WITHOUT_CLASSIFICATION	1.1644590484371291E-4	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.999951097846002	WITHOUT_CLASSIFICATION	4.890215399800801E-5	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.999818084612086	WITHOUT_CLASSIFICATION	1.819153879139222E-4	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9986268362867571	WITHOUT_CLASSIFICATION	0.0013731637132429724	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9998049470627467	WITHOUT_CLASSIFICATION	1.9505293725331522E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999809550014722	WITHOUT_CLASSIFICATION	1.9044998527816366E-5	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.999174182723026	WITHOUT_CLASSIFICATION	8.258172769740158E-4	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9974087203099641	WITHOUT_CLASSIFICATION	0.002591279690035982	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9999268040031147	WITHOUT_CLASSIFICATION	7.319599688530513E-5	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9997891856131571	WITHOUT_CLASSIFICATION	2.108143868428959E-4	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999034266282826	WITHOUT_CLASSIFICATION	9.65733717174611E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9979180824652112	WITHOUT_CLASSIFICATION	0.0020819175347888364	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9999360687040441	WITHOUT_CLASSIFICATION	6.393129595591167E-5	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9987699640639648	WITHOUT_CLASSIFICATION	0.001230035936035176	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999928822760471	WITHOUT_CLASSIFICATION	7.117723952875803E-6	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9984146296578723	WITHOUT_CLASSIFICATION	0.0015853703421277454	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9991305376951397	WITHOUT_CLASSIFICATION	8.694623048603131E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9990042680973553	WITHOUT_CLASSIFICATION	9.957319026446775E-4	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996748989902448	WITHOUT_CLASSIFICATION	3.251010097552773E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9998386174530401	WITHOUT_CLASSIFICATION	1.6138254695994907E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9994085876004729	WITHOUT_CLASSIFICATION	5.914123995270135E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9990557063735825	WITHOUT_CLASSIFICATION	9.442936264175024E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9996660184185273	WITHOUT_CLASSIFICATION	3.339815814727954E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9988837014958174	WITHOUT_CLASSIFICATION	0.001116298504182589	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.5659474723112079	DESIGN	0.4340525276887921	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9974979526613937	WITHOUT_CLASSIFICATION	0.0025020473386062484	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9964691598392582	WITHOUT_CLASSIFICATION	0.003530840160741763	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9148006218238357	WITHOUT_CLASSIFICATION	0.0851993781761643	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999883985535355	WITHOUT_CLASSIFICATION	1.1601446464533634E-5	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996143584828712	WITHOUT_CLASSIFICATION	3.8564151712886343E-4	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9994273626278548	WITHOUT_CLASSIFICATION	5.726373721451231E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9990587708115071	WITHOUT_CLASSIFICATION	9.412291884929317E-4	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.998790891912805	WITHOUT_CLASSIFICATION	0.001209108087194992	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9997206737331675	WITHOUT_CLASSIFICATION	2.7932626683248096E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9692927853778739	WITHOUT_CLASSIFICATION	0.030707214622126073	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9999360687040441	WITHOUT_CLASSIFICATION	6.393129595591167E-5	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9973836086743388	WITHOUT_CLASSIFICATION	0.002616391325661279	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998274944574629	WITHOUT_CLASSIFICATION	1.7250554253708868E-4	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9993840432788138	WITHOUT_CLASSIFICATION	6.159567211862238E-4	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9992776112131398	WITHOUT_CLASSIFICATION	7.22388786860167E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.997239844047544	WITHOUT_CLASSIFICATION	0.002760155952456017	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9996622485387372	WITHOUT_CLASSIFICATION	3.3775146126286114E-4	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9888130175854435	WITHOUT_CLASSIFICATION	0.011186982414556455	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9975021867846294	WITHOUT_CLASSIFICATION	0.0024978132153705814	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9324036439366478	WITHOUT_CLASSIFICATION	0.0675963560633522	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9985905343775107	WITHOUT_CLASSIFICATION	0.0014094656224893298	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9994449256443093	WITHOUT_CLASSIFICATION	5.550743556905649E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.8357766847216098	WITHOUT_CLASSIFICATION	0.16422331527839013	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9762583306185953	WITHOUT_CLASSIFICATION	0.023741669381404585	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9762583306185953	WITHOUT_CLASSIFICATION	0.023741669381404585	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9138080408774858	WITHOUT_CLASSIFICATION	0.0861919591225142	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9978112398711921	WITHOUT_CLASSIFICATION	0.002188760128807862	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9978128647130844	WITHOUT_CLASSIFICATION	0.002187135286915668	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999557588148603	WITHOUT_CLASSIFICATION	4.424118513964473E-5	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999498260696833	WITHOUT_CLASSIFICATION	5.017393031677138E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997273321435322	WITHOUT_CLASSIFICATION	2.726678564679004E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9982915643957275	WITHOUT_CLASSIFICATION	0.0017084356042724813	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9982936303185173	WITHOUT_CLASSIFICATION	0.001706369681482779	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999683482658285	WITHOUT_CLASSIFICATION	3.165173417148711E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9984386030718414	WITHOUT_CLASSIFICATION	0.0015613969281586693	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9984386030718414	WITHOUT_CLASSIFICATION	0.0015613969281586693	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9982970748465199	WITHOUT_CLASSIFICATION	0.0017029251534801915	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999789209104	WITHOUT_CLASSIFICATION	2.1079089588877226E-7	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9966583496933379	WITHOUT_CLASSIFICATION	0.003341650306662122	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9996708991020317	WITHOUT_CLASSIFICATION	3.291008979682587E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9990885285805272	WITHOUT_CLASSIFICATION	9.11471419472898E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9582836882222224	WITHOUT_CLASSIFICATION	0.04171631177777751	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999979493768305	WITHOUT_CLASSIFICATION	2.0506231695079755E-5	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999892768170892	WITHOUT_CLASSIFICATION	1.0723182910804668E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999209810601162	WITHOUT_CLASSIFICATION	7.901893988388357E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9951280845451637	WITHOUT_CLASSIFICATION	0.004871915454836299	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999305626461636	WITHOUT_CLASSIFICATION	6.94373538364128E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999542243374687	WITHOUT_CLASSIFICATION	4.577566253130628E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9995893202832866	WITHOUT_CLASSIFICATION	4.1067971671336054E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9998501488191531	WITHOUT_CLASSIFICATION	1.4985118084691654E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996019147250821	WITHOUT_CLASSIFICATION	3.980852749178908E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999796197458649	WITHOUT_CLASSIFICATION	2.0380254135118922E-5	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9889257899054469	WITHOUT_CLASSIFICATION	0.011074210094553083	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.995930116183099	WITHOUT_CLASSIFICATION	0.004069883816900996	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994755234389274	WITHOUT_CLASSIFICATION	5.244765610725384E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999748767921697	WITHOUT_CLASSIFICATION	2.5123207830209083E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9992540767276702	WITHOUT_CLASSIFICATION	7.45923272329851E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9956852298527952	WITHOUT_CLASSIFICATION	0.0043147701472047275	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.9010168486621088	WITHOUT_CLASSIFICATION	0.09898315133789108	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9994635160254153	WITHOUT_CLASSIFICATION	5.364839745846634E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9974117563432737	WITHOUT_CLASSIFICATION	0.002588243656726182	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9985615072245817	WITHOUT_CLASSIFICATION	0.0014384927754182882	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9991820967652444	WITHOUT_CLASSIFICATION	8.179032347556483E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9997135711704731	WITHOUT_CLASSIFICATION	2.864288295269215E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998077672719794	WITHOUT_CLASSIFICATION	1.9223272802053798E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997627010018703	WITHOUT_CLASSIFICATION	2.3729899812972114E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.999993644091215	WITHOUT_CLASSIFICATION	6.3559087849943626E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995626917221634	WITHOUT_CLASSIFICATION	4.3730827783658444E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9997561986740356	WITHOUT_CLASSIFICATION	2.4380132596427817E-4	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998527802415476	WITHOUT_CLASSIFICATION	0.0014721975845239854	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5293208687124392	WITHOUT_CLASSIFICATION	0.4706791312875609	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9996758644928965	WITHOUT_CLASSIFICATION	3.241355071035872E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.999998350347273	WITHOUT_CLASSIFICATION	1.6496527270399298E-6	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.999179837418822	WITHOUT_CLASSIFICATION	8.201625811781167E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994411027379648	WITHOUT_CLASSIFICATION	0.005588972620351991	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999437095569537	WITHOUT_CLASSIFICATION	5.629044304626822E-5	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.999771203344801	WITHOUT_CLASSIFICATION	2.287966551989874E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.999477509061189	WITHOUT_CLASSIFICATION	5.224909388109528E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999732852687802	WITHOUT_CLASSIFICATION	2.6714731219784167E-5	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.9216098955130912	DESIGN	0.07839010448690875	WITHOUT_CLASSIFICATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9984093073202223	WITHOUT_CLASSIFICATION	0.0015906926797777542	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9924210531529867	WITHOUT_CLASSIFICATION	0.007578946847013273	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999657030255285	WITHOUT_CLASSIFICATION	3.4296974471571996E-5	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9996045901950557	WITHOUT_CLASSIFICATION	3.954098049443432E-4	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9996230428367886	WITHOUT_CLASSIFICATION	3.769571632114226E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.99975062529915	WITHOUT_CLASSIFICATION	2.493747008499785E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9959159254138316	WITHOUT_CLASSIFICATION	0.004084074586168504	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9984625318874842	WITHOUT_CLASSIFICATION	0.0015374681125156539	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9997335979337116	WITHOUT_CLASSIFICATION	2.6640206628836255E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9997659017165831	WITHOUT_CLASSIFICATION	2.3409828341683337E-4	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998392708544248	WITHOUT_CLASSIFICATION	1.6072914557528566E-4	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9998545916689437	WITHOUT_CLASSIFICATION	1.45408331056232E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999736274760156	WITHOUT_CLASSIFICATION	2.6372523984319846E-5	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9998917361619082	WITHOUT_CLASSIFICATION	1.0826383809174594E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999736274760156	WITHOUT_CLASSIFICATION	2.6372523984319846E-5	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999926581865464	WITHOUT_CLASSIFICATION	7.341813453586174E-6	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9997406396707761	WITHOUT_CLASSIFICATION	2.5936032922384197E-4	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9990015562055923	WITHOUT_CLASSIFICATION	9.984437944076852E-4	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998808410539183	WITHOUT_CLASSIFICATION	1.1915894608168213E-4	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9994200365676307	WITHOUT_CLASSIFICATION	5.799634323693881E-4	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9990015562055923	WITHOUT_CLASSIFICATION	9.984437944076852E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9999188542207322	WITHOUT_CLASSIFICATION	8.11457792677893E-5	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9985611610001368	WITHOUT_CLASSIFICATION	0.0014388389998632681	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9999659899016918	WITHOUT_CLASSIFICATION	3.4010098308175905E-5	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.99908967277028	WITHOUT_CLASSIFICATION	9.10327229719863E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999918053831215	WITHOUT_CLASSIFICATION	8.194616878454041E-6	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9993926082341871	WITHOUT_CLASSIFICATION	6.073917658129855E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.99992208881484	WITHOUT_CLASSIFICATION	7.791118515992967E-5	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9993861453428742	DESIGN	6.138546571258618E-4	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999799783246338	WITHOUT_CLASSIFICATION	2.0021675366105377E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998514444079779	WITHOUT_CLASSIFICATION	1.485555920220567E-4	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999279888259526	WITHOUT_CLASSIFICATION	7.201117404736189E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9998709536981656	WITHOUT_CLASSIFICATION	1.2904630183438297E-4	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.999774003485481	WITHOUT_CLASSIFICATION	2.2599651451906202E-4	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.8088286859405508	WITHOUT_CLASSIFICATION	0.1911713140594493	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9993123378338593	WITHOUT_CLASSIFICATION	6.87662166140731E-4	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9992650403370643	WITHOUT_CLASSIFICATION	7.349596629356452E-4	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9784874660889664	WITHOUT_CLASSIFICATION	0.021512533911033627	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9852871112597933	WITHOUT_CLASSIFICATION	0.014712888740206678	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9975667375357676	WITHOUT_CLASSIFICATION	0.002433262464232389	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999743375464875	WITHOUT_CLASSIFICATION	2.5662453512631426E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.999076612265911	WITHOUT_CLASSIFICATION	9.233877340888219E-4	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9996428019006434	WITHOUT_CLASSIFICATION	3.5719809935672123E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998673614151107	WITHOUT_CLASSIFICATION	1.3263858488927045E-4	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9992919705734631	WITHOUT_CLASSIFICATION	7.080294265368837E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9997350812931065	WITHOUT_CLASSIFICATION	2.6491870689348814E-4	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.999023664989616	WITHOUT_CLASSIFICATION	9.763350103839177E-4	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9999856210814604	WITHOUT_CLASSIFICATION	1.4378918539643901E-5	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996196097179625	WITHOUT_CLASSIFICATION	3.803902820374769E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9999114897825937	WITHOUT_CLASSIFICATION	8.851021740628426E-5	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9996984842767074	WITHOUT_CLASSIFICATION	3.0151572329268337E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9998673614151107	WITHOUT_CLASSIFICATION	1.3263858488927045E-4	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.999814295390265	WITHOUT_CLASSIFICATION	1.85704609734994E-4	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9998583441621954	WITHOUT_CLASSIFICATION	1.416558378046016E-4	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9986652667154113	WITHOUT_CLASSIFICATION	0.0013347332845885715	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.981009404461053	WITHOUT_CLASSIFICATION	0.018990595538947008	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999743375464875	WITHOUT_CLASSIFICATION	2.5662453512631426E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.999893244630865	WITHOUT_CLASSIFICATION	1.0675536913498516E-4	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9986941451112913	WITHOUT_CLASSIFICATION	0.0013058548887087112	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9980099621085401	WITHOUT_CLASSIFICATION	0.001990037891459952	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999700067475372	WITHOUT_CLASSIFICATION	2.9993252462732786E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999827893677233	WITHOUT_CLASSIFICATION	1.7210632276627332E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9958123587525642	WITHOUT_CLASSIFICATION	0.004187641247435825	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.7313844288621439	DESIGN	0.26861557113785606	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9963167880532257	WITHOUT_CLASSIFICATION	0.0036832119467741908	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9988220639762359	WITHOUT_CLASSIFICATION	0.0011779360237641374	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9965395898144312	WITHOUT_CLASSIFICATION	0.0034604101855688556	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9992738723089949	WITHOUT_CLASSIFICATION	7.261276910051073E-4	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998428576642586	WITHOUT_CLASSIFICATION	1.5714233574141937E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9996298634634525	WITHOUT_CLASSIFICATION	3.7013653654758416E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999321204828637	WITHOUT_CLASSIFICATION	6.787951713629278E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998221232433222	WITHOUT_CLASSIFICATION	1.778767566777728E-4	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9974553526011771	WITHOUT_CLASSIFICATION	0.0025446473988228516	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9877441202823878	WITHOUT_CLASSIFICATION	0.012255879717612161	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9985361210682702	WITHOUT_CLASSIFICATION	0.0014638789317298249	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9957257996846794	WITHOUT_CLASSIFICATION	0.0042742003153204925	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9982996285552027	WITHOUT_CLASSIFICATION	0.0017003714447972836	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9977783124180453	WITHOUT_CLASSIFICATION	0.002221687581954758	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9977783124180453	WITHOUT_CLASSIFICATION	0.002221687581954758	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998415815900011	WITHOUT_CLASSIFICATION	1.58418409998736E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9977783124180453	WITHOUT_CLASSIFICATION	0.002221687581954758	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9977783124180453	WITHOUT_CLASSIFICATION	0.002221687581954758	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9977513706891064	WITHOUT_CLASSIFICATION	0.0022486293108936206	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999995809739515	WITHOUT_CLASSIFICATION	4.190260486353952E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998223484330478	WITHOUT_CLASSIFICATION	1.7765156695214124E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998223484330478	WITHOUT_CLASSIFICATION	1.7765156695214124E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9983708420870221	WITHOUT_CLASSIFICATION	0.001629157912977878	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9939000681912783	WITHOUT_CLASSIFICATION	0.006099931808721659	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9990823804109566	WITHOUT_CLASSIFICATION	9.176195890433337E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999918565340236	WITHOUT_CLASSIFICATION	8.143465976471865E-6	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9995254695324297	WITHOUT_CLASSIFICATION	4.7453046757028904E-4	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9997313715805716	WITHOUT_CLASSIFICATION	2.686284194284718E-4	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997011659470626	WITHOUT_CLASSIFICATION	2.988340529374411E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9998783255431447	WITHOUT_CLASSIFICATION	1.2167445685527675E-4	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9984935649658423	WITHOUT_CLASSIFICATION	0.001506435034157792	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999966403386628	WITHOUT_CLASSIFICATION	3.3596613373002364E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9992462683082429	WITHOUT_CLASSIFICATION	7.537316917570481E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9973494032682289	WITHOUT_CLASSIFICATION	0.0026505967317711565	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999694840869457	WITHOUT_CLASSIFICATION	3.051591305420019E-5	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9996020521290541	WITHOUT_CLASSIFICATION	3.979478709460066E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9933768203809824	WITHOUT_CLASSIFICATION	0.006623179619017671	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9994574121091222	WITHOUT_CLASSIFICATION	5.425878908776956E-4	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9993660466618967	WITHOUT_CLASSIFICATION	6.339533381034299E-4	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.999872877761991	WITHOUT_CLASSIFICATION	1.2712223800901695E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999694840869457	WITHOUT_CLASSIFICATION	3.051591305420019E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.999076612265911	WITHOUT_CLASSIFICATION	9.233877340888219E-4	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999586055848225	WITHOUT_CLASSIFICATION	4.1394415177495184E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998132159241173	WITHOUT_CLASSIFICATION	1.867840758826731E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9994075610295862	WITHOUT_CLASSIFICATION	5.92438970413818E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999762361298521	WITHOUT_CLASSIFICATION	2.3763870147940297E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9998281861113756	WITHOUT_CLASSIFICATION	1.718138886243816E-4	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9993498636465183	WITHOUT_CLASSIFICATION	6.501363534816652E-4	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998734401280257	WITHOUT_CLASSIFICATION	1.2655987197425037E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998994901838593	WITHOUT_CLASSIFICATION	1.0050981614068224E-4	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.99995413516667	WITHOUT_CLASSIFICATION	4.5864833330078865E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999558942696222	WITHOUT_CLASSIFICATION	4.410573037780128E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998307633832635	WITHOUT_CLASSIFICATION	1.6923661673650742E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9992863750047006	WITHOUT_CLASSIFICATION	7.136249952994334E-4	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998206831535466	WITHOUT_CLASSIFICATION	1.7931684645336058E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9991269355396926	WITHOUT_CLASSIFICATION	8.730644603074826E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9996503745124198	WITHOUT_CLASSIFICATION	3.4962548758025737E-4	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9997174708881136	WITHOUT_CLASSIFICATION	2.8252911188641995E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999377024013909	WITHOUT_CLASSIFICATION	6.229759860915106E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9987594125308833	WITHOUT_CLASSIFICATION	0.001240587469116663	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9996949044404982	WITHOUT_CLASSIFICATION	3.0509555950176156E-4	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9990780396972994	WITHOUT_CLASSIFICATION	9.21960302700677E-4	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9953615438857523	WITHOUT_CLASSIFICATION	0.00463845611424778	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999363337007106	WITHOUT_CLASSIFICATION	6.366629928942317E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998994901838593	WITHOUT_CLASSIFICATION	1.0050981614068224E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9997926848209368	WITHOUT_CLASSIFICATION	2.0731517906320701E-4	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9997304918575688	WITHOUT_CLASSIFICATION	2.695081424312057E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9934386414513915	WITHOUT_CLASSIFICATION	0.006561358548608515	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9971935826197007	WITHOUT_CLASSIFICATION	0.002806417380299347	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9997988237390317	WITHOUT_CLASSIFICATION	2.0117626096832652E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999336174577125	WITHOUT_CLASSIFICATION	6.638254228751839E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9993564401170215	WITHOUT_CLASSIFICATION	6.435598829784825E-4	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999330380970168	WITHOUT_CLASSIFICATION	6.696190298312394E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.999856957589209	WITHOUT_CLASSIFICATION	1.4304241079090326E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996864426169193	WITHOUT_CLASSIFICATION	3.1355738308071955E-4	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9987235690321102	WITHOUT_CLASSIFICATION	0.0012764309678897814	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.996234092425563	WITHOUT_CLASSIFICATION	0.0037659075744368694	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999625352895128	WITHOUT_CLASSIFICATION	3.746471048722863E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996990504198082	WITHOUT_CLASSIFICATION	3.0094958019178324E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9996897021371874	WITHOUT_CLASSIFICATION	3.1029786281249985E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997115157116606	WITHOUT_CLASSIFICATION	2.8848428833939705E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996864426169193	WITHOUT_CLASSIFICATION	3.1355738308071955E-4	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9990246802308341	WITHOUT_CLASSIFICATION	9.753197691658808E-4	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9931108545883998	WITHOUT_CLASSIFICATION	0.006889145411600364	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9997298582464179	WITHOUT_CLASSIFICATION	2.701417535821258E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9997588457635185	WITHOUT_CLASSIFICATION	2.4115423648154107E-4	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9998621898163964	WITHOUT_CLASSIFICATION	1.378101836035161E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.998675307608663	WITHOUT_CLASSIFICATION	0.0013246923913370356	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996990504198082	WITHOUT_CLASSIFICATION	3.0094958019178324E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999388331259901	WITHOUT_CLASSIFICATION	6.116687400991235E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998564592515353	WITHOUT_CLASSIFICATION	1.435407484646955E-4	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999161433341314	WITHOUT_CLASSIFICATION	8.385666586870766E-5	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995270520180867	WITHOUT_CLASSIFICATION	4.7294798191335773E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995270520180867	WITHOUT_CLASSIFICATION	4.7294798191335773E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995270520180867	WITHOUT_CLASSIFICATION	4.7294798191335773E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998330094667706	WITHOUT_CLASSIFICATION	1.6699053322946668E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998330094667706	WITHOUT_CLASSIFICATION	1.6699053322946668E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9943126640553654	WITHOUT_CLASSIFICATION	0.005687335944634639	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.998692337029525	WITHOUT_CLASSIFICATION	0.0013076629704749847	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9998144212166089	WITHOUT_CLASSIFICATION	1.8557878339106582E-4	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9998282455658536	WITHOUT_CLASSIFICATION	1.7175443414649234E-4	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9981213538855167	WITHOUT_CLASSIFICATION	0.0018786461144833211	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994602514762068	WITHOUT_CLASSIFICATION	5.39748523793319E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995708256704332	WITHOUT_CLASSIFICATION	4.291743295668527E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9995793030505967	WITHOUT_CLASSIFICATION	4.2069694940328366E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997882455472056	WITHOUT_CLASSIFICATION	2.1175445279438654E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994602514762068	WITHOUT_CLASSIFICATION	5.39748523793319E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995708256704332	WITHOUT_CLASSIFICATION	4.291743295668527E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9998509448599797	WITHOUT_CLASSIFICATION	1.490551400203463E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9999850088740916	WITHOUT_CLASSIFICATION	1.4991125908502563E-5	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9994668296264937	WITHOUT_CLASSIFICATION	5.33170373506301E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9967490570961873	WITHOUT_CLASSIFICATION	0.0032509429038126273	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998781202760364	WITHOUT_CLASSIFICATION	1.2187972396354633E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9994535189888795	WITHOUT_CLASSIFICATION	5.464810111204281E-4	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9996104112429269	WITHOUT_CLASSIFICATION	3.8958875707313645E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9997414933936507	WITHOUT_CLASSIFICATION	2.5850660634925914E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.893554474872069	WITHOUT_CLASSIFICATION	0.10644552512793103	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9851831670482422	WITHOUT_CLASSIFICATION	0.014816832951757723	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9992820235303013	WITHOUT_CLASSIFICATION	7.179764696987413E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999763507993182	WITHOUT_CLASSIFICATION	2.3649200681797236E-4	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9995425941285794	WITHOUT_CLASSIFICATION	4.574058714206974E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995216737229318	WITHOUT_CLASSIFICATION	4.783262770682741E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9998154906868815	WITHOUT_CLASSIFICATION	1.8450931311866602E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9995106518692791	WITHOUT_CLASSIFICATION	4.893481307208688E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9972946330913687	WITHOUT_CLASSIFICATION	0.0027053669086312434	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9997049097945949	WITHOUT_CLASSIFICATION	2.9509020540510576E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9873141193022781	WITHOUT_CLASSIFICATION	0.01268588069772185	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9980607482648357	WITHOUT_CLASSIFICATION	0.00193925173516427	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9979846356631026	WITHOUT_CLASSIFICATION	0.0020153643368973537	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.99985120351871	WITHOUT_CLASSIFICATION	1.487964812900417E-4	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9963025837884264	WITHOUT_CLASSIFICATION	0.0036974162115736976	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994449940847505	WITHOUT_CLASSIFICATION	5.550059152494814E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.8105181994592003	WITHOUT_CLASSIFICATION	0.1894818005407996	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999717407321044	WITHOUT_CLASSIFICATION	2.8259267895600965E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998950029407783	WITHOUT_CLASSIFICATION	1.049970592216626E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999837466669571	WITHOUT_CLASSIFICATION	1.6253333042913186E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999837466669571	WITHOUT_CLASSIFICATION	1.6253333042913186E-4	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9999727219979192	WITHOUT_CLASSIFICATION	2.7278002080755282E-5	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999876108551357	WITHOUT_CLASSIFICATION	1.2389144864388115E-5	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9996511728808715	WITHOUT_CLASSIFICATION	3.4882711912848037E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998764390020449	WITHOUT_CLASSIFICATION	1.235609979550929E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9963206083917188	WITHOUT_CLASSIFICATION	0.003679391608281275	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999491297310258	WITHOUT_CLASSIFICATION	5.087026897425362E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9996094449795315	WITHOUT_CLASSIFICATION	3.905550204685824E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9997359719607275	WITHOUT_CLASSIFICATION	2.64028039272511E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995123850878745	WITHOUT_CLASSIFICATION	4.876149121254897E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994707744993223	WITHOUT_CLASSIFICATION	5.292255006776415E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9929845803725246	WITHOUT_CLASSIFICATION	0.007015419627475506	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.997029119846987	WITHOUT_CLASSIFICATION	0.002970880153012866	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9964003555348047	WITHOUT_CLASSIFICATION	0.0035996444651952434	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999958328689081	WITHOUT_CLASSIFICATION	4.167131091881565E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9950785964449823	WITHOUT_CLASSIFICATION	0.004921403555017637	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9949096639974766	WITHOUT_CLASSIFICATION	0.005090336002523344	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.997816593550926	WITHOUT_CLASSIFICATION	0.0021834064490741352	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9425082313928673	WITHOUT_CLASSIFICATION	0.05749176860713258	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9964003555348047	WITHOUT_CLASSIFICATION	0.0035996444651952434	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9964003555348047	WITHOUT_CLASSIFICATION	0.0035996444651952434	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9632985415386419	WITHOUT_CLASSIFICATION	0.0367014584613581	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9997783048026323	WITHOUT_CLASSIFICATION	2.2169519736774785E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9953357095482467	WITHOUT_CLASSIFICATION	0.004664290451753401	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9979712149321143	WITHOUT_CLASSIFICATION	0.0020287850678857686	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9994565655819816	WITHOUT_CLASSIFICATION	5.434344180183739E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9972946330913687	WITHOUT_CLASSIFICATION	0.0027053669086312434	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9981063542986749	WITHOUT_CLASSIFICATION	0.001893645701325098	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9996623025588555	WITHOUT_CLASSIFICATION	3.376974411445306E-4	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.99893710364126	WITHOUT_CLASSIFICATION	0.0010628963587399976	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9908918077492568	WITHOUT_CLASSIFICATION	0.009108192250743096	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.999178281385543	WITHOUT_CLASSIFICATION	8.217186144570699E-4	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999229004115273	WITHOUT_CLASSIFICATION	7.70995884726895E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9990082359598396	WITHOUT_CLASSIFICATION	9.917640401605275E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9990082359598396	WITHOUT_CLASSIFICATION	9.917640401605275E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9990082359598396	WITHOUT_CLASSIFICATION	9.917640401605275E-4	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9990082359598396	WITHOUT_CLASSIFICATION	9.917640401605275E-4	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984227007977262	WITHOUT_CLASSIFICATION	0.0015772992022737371	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999928845528827	WITHOUT_CLASSIFICATION	7.11544711720759E-6	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995221465543341	WITHOUT_CLASSIFICATION	4.7785344566577396E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9869305519398172	WITHOUT_CLASSIFICATION	0.013069448060182955	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.992439872875892	WITHOUT_CLASSIFICATION	0.007560127124108124	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995878769089966	WITHOUT_CLASSIFICATION	4.121230910033222E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996075368488103	WITHOUT_CLASSIFICATION	3.924631511896953E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.9971648296381188	WITHOUT_CLASSIFICATION	0.002835170361881163	DESIGN
used from testsuite	WITHOUT_CLASSIFICATION	0.9506377949613523	WITHOUT_CLASSIFICATION	0.049362205038647675	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996633254491399	WITHOUT_CLASSIFICATION	3.366745508600601E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9992633361128997	WITHOUT_CLASSIFICATION	7.366638871003142E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9974707477462368	WITHOUT_CLASSIFICATION	0.002529252253763124	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9996346440720693	WITHOUT_CLASSIFICATION	3.6535592793078065E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998588761717225	WITHOUT_CLASSIFICATION	1.4112382827751181E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998588761717225	WITHOUT_CLASSIFICATION	1.4112382827751181E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998588761717225	WITHOUT_CLASSIFICATION	1.4112382827751181E-4	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.999196215162178	WITHOUT_CLASSIFICATION	8.0378483782196E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9997242872994103	WITHOUT_CLASSIFICATION	2.7571270058965655E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9999005772868491	WITHOUT_CLASSIFICATION	9.942271315084419E-5	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995963294628429	WITHOUT_CLASSIFICATION	4.0367053715701534E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995963294628429	WITHOUT_CLASSIFICATION	4.0367053715701534E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9998729367130349	WITHOUT_CLASSIFICATION	1.2706328696506723E-4	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995270520180867	WITHOUT_CLASSIFICATION	4.7294798191335773E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.9999863063919945	WITHOUT_CLASSIFICATION	1.3693608005536164E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9994046781353649	WITHOUT_CLASSIFICATION	5.953218646351027E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9988831181140697	WITHOUT_CLASSIFICATION	0.0011168818859303245	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9960729173819789	WITHOUT_CLASSIFICATION	0.003927082618021093	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994513545835834	WITHOUT_CLASSIFICATION	5.486454164165851E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9997759026282113	WITHOUT_CLASSIFICATION	2.2409737178869874E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9998260260215687	WITHOUT_CLASSIFICATION	1.739739784313579E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999427420650221	WITHOUT_CLASSIFICATION	5.725793497788059E-5	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9765473566577494	WITHOUT_CLASSIFICATION	0.02345264334225056	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9947752457313604	WITHOUT_CLASSIFICATION	0.005224754268639504	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9951741155162621	WITHOUT_CLASSIFICATION	0.004825884483737932	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9996181993533502	WITHOUT_CLASSIFICATION	3.8180064664982506E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.999998646595481	WITHOUT_CLASSIFICATION	1.3534045190144712E-6	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999986718702577	WITHOUT_CLASSIFICATION	1.3281297422845441E-6	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999928991822753	WITHOUT_CLASSIFICATION	7.10081772469724E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999596615656116	WITHOUT_CLASSIFICATION	4.033843438831901E-5	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9982527559735436	WITHOUT_CLASSIFICATION	0.001747244026456374	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9994782660351126	WITHOUT_CLASSIFICATION	5.217339648873692E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998658286257263	WITHOUT_CLASSIFICATION	1.3417137427373398E-4	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9997638050079732	WITHOUT_CLASSIFICATION	2.3619499202670016E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999490624114618	WITHOUT_CLASSIFICATION	5.093758853826421E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999287292457643	WITHOUT_CLASSIFICATION	7.127075423569416E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.6940803483386581	WITHOUT_CLASSIFICATION	0.30591965166134194	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9996689890524657	WITHOUT_CLASSIFICATION	3.3101094753427274E-4	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.999776459476168	WITHOUT_CLASSIFICATION	2.2354052383198483E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9983760432659735	WITHOUT_CLASSIFICATION	0.0016239567340264947	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9997355631401492	WITHOUT_CLASSIFICATION	2.6443685985080145E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9934303182587554	WITHOUT_CLASSIFICATION	0.0065696817412445796	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9870533914920117	WITHOUT_CLASSIFICATION	0.012946608507988358	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9996847505820362	WITHOUT_CLASSIFICATION	3.1524941796373494E-4	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9977427424388554	WITHOUT_CLASSIFICATION	0.002257257561144515	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9742215351164988	WITHOUT_CLASSIFICATION	0.02577846488350124	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.999754589729877	WITHOUT_CLASSIFICATION	2.4541027012306036E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.9757010375875421	WITHOUT_CLASSIFICATION	0.0242989624124578	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9972833521263396	WITHOUT_CLASSIFICATION	0.0027166478736604786	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999802811667542	WITHOUT_CLASSIFICATION	1.9718833245808865E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.996681951168127	WITHOUT_CLASSIFICATION	0.0033180488318730232	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9998623722034425	WITHOUT_CLASSIFICATION	1.3762779655741156E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997816103648413	WITHOUT_CLASSIFICATION	2.1838963515860059E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.999645524088949	WITHOUT_CLASSIFICATION	3.5447591105099277E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999717069457619	WITHOUT_CLASSIFICATION	2.8293054238100632E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9999770954623591	WITHOUT_CLASSIFICATION	2.2904537640886214E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.998978812842645	WITHOUT_CLASSIFICATION	0.0010211871573550468	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.999382001081282	WITHOUT_CLASSIFICATION	6.179989187180397E-4	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998851855093857	WITHOUT_CLASSIFICATION	1.1481449061428095E-4	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999520653066386	WITHOUT_CLASSIFICATION	4.79346933613185E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9999416826188285	WITHOUT_CLASSIFICATION	5.831738117149733E-5	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9966091499615373	WITHOUT_CLASSIFICATION	0.0033908500384627863	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9998165946840952	WITHOUT_CLASSIFICATION	1.8340531590476628E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9971433125751581	WITHOUT_CLASSIFICATION	0.0028566874248417916	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9990131418756268	WITHOUT_CLASSIFICATION	9.8685812437319E-4	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9995160830747019	WITHOUT_CLASSIFICATION	4.839169252981151E-4	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9992075911774758	WITHOUT_CLASSIFICATION	7.924088225242564E-4	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999990011635799	WITHOUT_CLASSIFICATION	9.988364200490805E-7	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9801137162697529	WITHOUT_CLASSIFICATION	0.01988628373024714	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9995956915306187	WITHOUT_CLASSIFICATION	4.0430846938138465E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9978982271514304	WITHOUT_CLASSIFICATION	0.0021017728485696555	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9939962965774024	WITHOUT_CLASSIFICATION	0.006003703422597622	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9996055649796708	WITHOUT_CLASSIFICATION	3.944350203291707E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.7716307778052801	WITHOUT_CLASSIFICATION	0.22836922219471992	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.996827667301437	WITHOUT_CLASSIFICATION	0.0031723326985628893	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9994841262971299	WITHOUT_CLASSIFICATION	5.158737028700888E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9997468496754317	WITHOUT_CLASSIFICATION	2.5315032456826484E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9889597718462497	WITHOUT_CLASSIFICATION	0.011040228153750307	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999903639657203	WITHOUT_CLASSIFICATION	9.636034279695883E-6	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998472118740896	WITHOUT_CLASSIFICATION	1.527881259104307E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9993554204060416	WITHOUT_CLASSIFICATION	6.445795939583826E-4	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9997836689114299	WITHOUT_CLASSIFICATION	2.1633108857001571E-4	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999702382036675	WITHOUT_CLASSIFICATION	2.9761796332475027E-5	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9992207723155773	WITHOUT_CLASSIFICATION	7.792276844227137E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9997818376463743	WITHOUT_CLASSIFICATION	2.181623536256458E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9994865981678479	WITHOUT_CLASSIFICATION	5.134018321520672E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9700826380304906	WITHOUT_CLASSIFICATION	0.0299173619695094	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9964822796597022	WITHOUT_CLASSIFICATION	0.003517720340297875	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9994362884088691	WITHOUT_CLASSIFICATION	5.637115911309123E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.7097418258487148	DESIGN	0.2902581741512852	WITHOUT_CLASSIFICATION
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.7807225622638369	DESIGN	0.21927743773616304	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9934405252274545	WITHOUT_CLASSIFICATION	0.006559474772545461	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9998028478294994	WITHOUT_CLASSIFICATION	1.971521705007492E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9996790969878031	WITHOUT_CLASSIFICATION	3.2090301219690574E-4	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9913979421330228	WITHOUT_CLASSIFICATION	0.008602057866977146	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9916793151270347	WITHOUT_CLASSIFICATION	0.008320684872965268	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999177381349407	WITHOUT_CLASSIFICATION	8.226186505929985E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9997418821200991	WITHOUT_CLASSIFICATION	2.581178799009266E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9998007617279088	WITHOUT_CLASSIFICATION	1.9923827209123964E-4	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996076832875543	WITHOUT_CLASSIFICATION	3.92316712445572E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9996926796479864	WITHOUT_CLASSIFICATION	3.073203520136635E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9993808502375189	WITHOUT_CLASSIFICATION	6.191497624810791E-4	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9994398893164506	WITHOUT_CLASSIFICATION	5.601106835495611E-4	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.999817267342103	WITHOUT_CLASSIFICATION	1.8273265789702276E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9988416305464837	WITHOUT_CLASSIFICATION	0.0011583694535163493	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9998165087211439	WITHOUT_CLASSIFICATION	1.8349127885598413E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999400556626777	WITHOUT_CLASSIFICATION	5.994433732234305E-5	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9999400556626777	WITHOUT_CLASSIFICATION	5.994433732234305E-5	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9998672841596856	WITHOUT_CLASSIFICATION	1.3271584031444034E-4	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9951926762222876	WITHOUT_CLASSIFICATION	0.004807323777712447	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999511868251004	WITHOUT_CLASSIFICATION	4.881317489959045E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9949865701320696	WITHOUT_CLASSIFICATION	0.005013429867930386	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.99795785306225	WITHOUT_CLASSIFICATION	0.0020421469377499414	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996083382727176	WITHOUT_CLASSIFICATION	3.9166172728245525E-4	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9997331570125039	WITHOUT_CLASSIFICATION	2.668429874961213E-4	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9988965051865663	WITHOUT_CLASSIFICATION	0.0011034948134337912	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9984462626304867	WITHOUT_CLASSIFICATION	0.0015537373695132422	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.999234210623148	WITHOUT_CLASSIFICATION	7.657893768519633E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9996974212804366	WITHOUT_CLASSIFICATION	3.0257871956344964E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999859869101336	WITHOUT_CLASSIFICATION	1.4013089866315196E-5	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997181994997465	WITHOUT_CLASSIFICATION	2.818005002536045E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999927245178274	WITHOUT_CLASSIFICATION	7.275482172520933E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9999126099837149	WITHOUT_CLASSIFICATION	8.739001628520364E-5	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999513537243613	WITHOUT_CLASSIFICATION	4.8646275638838355E-5	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9655808212942631	WITHOUT_CLASSIFICATION	0.03441917870573679	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9655808212942631	WITHOUT_CLASSIFICATION	0.03441917870573679	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999507201531241	WITHOUT_CLASSIFICATION	4.9279846875834996E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9994064967562215	WITHOUT_CLASSIFICATION	5.935032437784339E-4	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9994562082283542	WITHOUT_CLASSIFICATION	5.437917716456478E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996943368104997	WITHOUT_CLASSIFICATION	3.0566318950031417E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.99858039836763	WITHOUT_CLASSIFICATION	0.0014196016323700998	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998157447032693	WITHOUT_CLASSIFICATION	1.842552967306541E-4	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999623472721089	WITHOUT_CLASSIFICATION	3.76527278910931E-4	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9997973548460307	WITHOUT_CLASSIFICATION	2.0264515396926878E-4	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9992314778683135	WITHOUT_CLASSIFICATION	7.685221316864091E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.99816674918993	WITHOUT_CLASSIFICATION	0.0018332508100699831	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.99816674918993	WITHOUT_CLASSIFICATION	0.0018332508100699831	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999619190950406	WITHOUT_CLASSIFICATION	3.8080904959312566E-5	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9974892938979963	WITHOUT_CLASSIFICATION	0.0025107061020036466	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9994635160254153	WITHOUT_CLASSIFICATION	5.364839745846634E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.999931739322149	WITHOUT_CLASSIFICATION	6.826067785097834E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9994635160254153	WITHOUT_CLASSIFICATION	5.364839745846634E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999997935052928	WITHOUT_CLASSIFICATION	2.0649470717779168E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.5874873019425189	DESIGN	0.4125126980574812	WITHOUT_CLASSIFICATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.99859467552211	WITHOUT_CLASSIFICATION	0.0014053244778900289	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9983665887259006	WITHOUT_CLASSIFICATION	0.001633411274099504	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9998345744532191	WITHOUT_CLASSIFICATION	1.6542554678091462E-4	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9988852107547562	WITHOUT_CLASSIFICATION	0.0011147892452437857	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9922899480232313	WITHOUT_CLASSIFICATION	0.007710051976768569	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9989902935400193	WITHOUT_CLASSIFICATION	0.001009706459980668	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9998958561476622	WITHOUT_CLASSIFICATION	1.0414385233785167E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9995062153546815	WITHOUT_CLASSIFICATION	4.937846453184008E-4	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.995930116183099	WITHOUT_CLASSIFICATION	0.004069883816900996	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9989879762682399	WITHOUT_CLASSIFICATION	0.0010120237317601869	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.999739502260474	WITHOUT_CLASSIFICATION	2.604977395259717E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998496604029756	WITHOUT_CLASSIFICATION	1.5033959702426944E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9880114510424837	WITHOUT_CLASSIFICATION	0.011988548957516446	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9997931855952938	WITHOUT_CLASSIFICATION	2.0681440470610076E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9997613545684108	WITHOUT_CLASSIFICATION	2.3864543158931697E-4	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9994614054983879	WITHOUT_CLASSIFICATION	5.385945016120468E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999031865355601	WITHOUT_CLASSIFICATION	9.681346443981484E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9986367344613417	WITHOUT_CLASSIFICATION	0.0013632655386581873	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9993579438615797	WITHOUT_CLASSIFICATION	6.420561384202222E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9963150195953593	WITHOUT_CLASSIFICATION	0.003684980404640673	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.999980578925287	WITHOUT_CLASSIFICATION	1.9421074712969717E-5	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9910593283098256	WITHOUT_CLASSIFICATION	0.008940671690174328	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9972116466571476	WITHOUT_CLASSIFICATION	0.0027883533428525093	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999888755365355	WITHOUT_CLASSIFICATION	1.1124463464422336E-5	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.7833494268290574	WITHOUT_CLASSIFICATION	0.2166505731709425	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9994811489187797	WITHOUT_CLASSIFICATION	5.188510812203257E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9984893019124234	WITHOUT_CLASSIFICATION	0.0015106980875765712	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9984398060850217	WITHOUT_CLASSIFICATION	0.0015601939149782217	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999561024199999	WITHOUT_CLASSIFICATION	4.389758000002306E-5	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9995596848939279	WITHOUT_CLASSIFICATION	4.4031510607215826E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9998352572896423	WITHOUT_CLASSIFICATION	1.647427103576424E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9998352572896423	WITHOUT_CLASSIFICATION	1.647427103576424E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9997293786666321	WITHOUT_CLASSIFICATION	2.7062133336786627E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999005480093942	WITHOUT_CLASSIFICATION	9.945199060572717E-5	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.999637786586289	WITHOUT_CLASSIFICATION	3.62213413711093E-4	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9989783243104944	WITHOUT_CLASSIFICATION	0.001021675689505623	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9976668368665801	WITHOUT_CLASSIFICATION	0.0023331631334199267	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9997416901955489	WITHOUT_CLASSIFICATION	2.583098044510688E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9994000442121873	WITHOUT_CLASSIFICATION	5.999557878127398E-4	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9988946096380148	WITHOUT_CLASSIFICATION	0.001105390361985213	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9997293786666321	WITHOUT_CLASSIFICATION	2.7062133336786627E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9999005480093942	WITHOUT_CLASSIFICATION	9.945199060572717E-5	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.999811237512937	WITHOUT_CLASSIFICATION	1.887624870630476E-4	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9994847251272653	WITHOUT_CLASSIFICATION	5.152748727347738E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9994798116533613	WITHOUT_CLASSIFICATION	5.201883466386854E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9996367677305841	WITHOUT_CLASSIFICATION	3.6323226941596703E-4	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9994624301289371	WITHOUT_CLASSIFICATION	5.375698710628924E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9905282690315695	WITHOUT_CLASSIFICATION	0.009471730968430445	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9998893645919519	WITHOUT_CLASSIFICATION	1.1063540804816919E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995339271836975	WITHOUT_CLASSIFICATION	4.660728163025166E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9996370064293973	WITHOUT_CLASSIFICATION	3.6299357060263495E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9274067669365407	DESIGN	0.07259323306345929	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9998573347480884	WITHOUT_CLASSIFICATION	1.4266525191161387E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9274067669365407	DESIGN	0.07259323306345929	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9996351886468463	WITHOUT_CLASSIFICATION	3.6481135315375097E-4	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996055649796708	WITHOUT_CLASSIFICATION	3.944350203291707E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9996351886468463	WITHOUT_CLASSIFICATION	3.6481135315375097E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997230023991145	WITHOUT_CLASSIFICATION	2.769976008854435E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9994057735690874	WITHOUT_CLASSIFICATION	5.942264309126041E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995339271836975	WITHOUT_CLASSIFICATION	4.660728163025166E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995339271836975	WITHOUT_CLASSIFICATION	4.660728163025166E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9995582822432586	WITHOUT_CLASSIFICATION	4.4171775674142625E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995601967894331	WITHOUT_CLASSIFICATION	4.3980321056683193E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9995582822432586	WITHOUT_CLASSIFICATION	4.4171775674142625E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997890725306045	WITHOUT_CLASSIFICATION	2.1092746939552616E-4	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9995950354370892	WITHOUT_CLASSIFICATION	4.049645629108809E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9979075387733585	WITHOUT_CLASSIFICATION	0.002092461226641565	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.9667819016970994	WITHOUT_CLASSIFICATION	0.033218098302900644	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999179936834723	WITHOUT_CLASSIFICATION	8.200631652768431E-5	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9995529838353501	WITHOUT_CLASSIFICATION	4.470161646498176E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996181752208421	WITHOUT_CLASSIFICATION	3.8182477915797984E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9997602958042268	WITHOUT_CLASSIFICATION	2.3970419577324447E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9998999332620635	WITHOUT_CLASSIFICATION	1.0006673793656064E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.994939489700992	WITHOUT_CLASSIFICATION	0.005060510299007993	DESIGN
types	WITHOUT_CLASSIFICATION	0.9994394927396375	WITHOUT_CLASSIFICATION	5.605072603625701E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.999939736458599	WITHOUT_CLASSIFICATION	6.026354140093857E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9979309527624624	WITHOUT_CLASSIFICATION	0.0020690472375376914	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9980909549070864	WITHOUT_CLASSIFICATION	0.0019090450929135775	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9986267811540797	WITHOUT_CLASSIFICATION	0.0013732188459203505	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.999970829102117	WITHOUT_CLASSIFICATION	2.9170897882966694E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.999739502260474	WITHOUT_CLASSIFICATION	2.604977395259717E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9997871984066713	WITHOUT_CLASSIFICATION	2.128015933287158E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9998281960914553	WITHOUT_CLASSIFICATION	1.7180390854475331E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999409988105861	WITHOUT_CLASSIFICATION	5.900118941391367E-5	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.999739502260474	WITHOUT_CLASSIFICATION	2.604977395259717E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9988216219330347	WITHOUT_CLASSIFICATION	0.0011783780669652583	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9997955838982892	WITHOUT_CLASSIFICATION	2.044161017108679E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9917695839727773	WITHOUT_CLASSIFICATION	0.008230416027222767	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.981075203864739	WITHOUT_CLASSIFICATION	0.018924796135260956	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9654521937433687	WITHOUT_CLASSIFICATION	0.034547806256631286	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9666579186135192	WITHOUT_CLASSIFICATION	0.03334208138648071	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.7518897134334156	WITHOUT_CLASSIFICATION	0.24811028656658451	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9948517622318941	WITHOUT_CLASSIFICATION	0.005148237768105983	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9999179936834723	WITHOUT_CLASSIFICATION	8.200631652768431E-5	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9990015383041582	WITHOUT_CLASSIFICATION	9.984616958418299E-4	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9998275476138245	WITHOUT_CLASSIFICATION	1.7245238617553463E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6464908767269308	WITHOUT_CLASSIFICATION	0.3535091232730691	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9998312199089875	WITHOUT_CLASSIFICATION	1.6878009101259416E-4	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9996723233101541	WITHOUT_CLASSIFICATION	3.276766898458839E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9998457245472998	WITHOUT_CLASSIFICATION	1.5427545270017097E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997890725306045	WITHOUT_CLASSIFICATION	2.1092746939552616E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9997890725306045	WITHOUT_CLASSIFICATION	2.1092746939552616E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9998918405600378	WITHOUT_CLASSIFICATION	1.0815943996218618E-4	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999089976059372	WITHOUT_CLASSIFICATION	9.100239406283321E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9988278497769453	WITHOUT_CLASSIFICATION	0.0011721502230547722	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999969934581544	WITHOUT_CLASSIFICATION	3.0065418455227205E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9987684813488282	WITHOUT_CLASSIFICATION	0.001231518651171841	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9966141089022922	WITHOUT_CLASSIFICATION	0.0033858910977078286	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.5346009641885304	WITHOUT_CLASSIFICATION	0.46539903581146946	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999657586435339	WITHOUT_CLASSIFICATION	3.424135646607945E-5	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9918641018309701	WITHOUT_CLASSIFICATION	0.008135898169030029	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999633049123417	WITHOUT_CLASSIFICATION	3.6695087658307495E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997805731019715	WITHOUT_CLASSIFICATION	2.1942689802838386E-4	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9979309527624624	WITHOUT_CLASSIFICATION	0.0020690472375376914	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9997293786666321	WITHOUT_CLASSIFICATION	2.7062133336786627E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997805731019715	WITHOUT_CLASSIFICATION	2.1942689802838386E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998630711999172	WITHOUT_CLASSIFICATION	1.3692880008274116E-4	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9885205134122753	WITHOUT_CLASSIFICATION	0.011479486587724703	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998015269697154	WITHOUT_CLASSIFICATION	1.984730302846847E-4	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.8449885951139502	WITHOUT_CLASSIFICATION	0.15501140488604986	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9992283026005249	WITHOUT_CLASSIFICATION	7.716973994750472E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.999004522359198	WITHOUT_CLASSIFICATION	9.954776408019701E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9246652812605017	WITHOUT_CLASSIFICATION	0.07533471873949828	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999787226650553	WITHOUT_CLASSIFICATION	2.1277334944701108E-5	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9996713612580739	WITHOUT_CLASSIFICATION	3.2863874192614484E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9986968235119439	WITHOUT_CLASSIFICATION	0.001303176488056173	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995680995345799	WITHOUT_CLASSIFICATION	4.319004654200318E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9995680995345799	WITHOUT_CLASSIFICATION	4.319004654200318E-4	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9877731698049231	WITHOUT_CLASSIFICATION	0.012226830195076742	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9932482792217874	WITHOUT_CLASSIFICATION	0.0067517207782125345	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997805731019715	WITHOUT_CLASSIFICATION	2.1942689802838386E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9992283026005249	WITHOUT_CLASSIFICATION	7.716973994750472E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9246652812605017	WITHOUT_CLASSIFICATION	0.07533471873949828	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9993296714223913	WITHOUT_CLASSIFICATION	6.703285776087129E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9995286070559254	WITHOUT_CLASSIFICATION	4.713929440746874E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999451402956705	WITHOUT_CLASSIFICATION	5.4859704329436006E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9988465757316056	WITHOUT_CLASSIFICATION	0.001153424268394384	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.999960143078629	WITHOUT_CLASSIFICATION	3.985692137098893E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9995963218313726	WITHOUT_CLASSIFICATION	4.0367816862741583E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9998630711999172	WITHOUT_CLASSIFICATION	1.3692880008274116E-4	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997267994786705	WITHOUT_CLASSIFICATION	2.7320052132949815E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9999189763504504	WITHOUT_CLASSIFICATION	8.102364954968437E-5	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9978084690801804	WITHOUT_CLASSIFICATION	0.002191530919819626	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.999811651477972	WITHOUT_CLASSIFICATION	1.8834852202793883E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9996816186203042	WITHOUT_CLASSIFICATION	3.183813796958436E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9998273796100074	WITHOUT_CLASSIFICATION	1.7262038999243262E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997230023991145	WITHOUT_CLASSIFICATION	2.769976008854435E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964206708054678	WITHOUT_CLASSIFICATION	0.003579329194532317	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999977290333482	WITHOUT_CLASSIFICATION	2.270966651869263E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.998550583368183	WITHOUT_CLASSIFICATION	0.001449416631816857	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999711248738992	WITHOUT_CLASSIFICATION	2.8875126100803004E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9995239747227579	WITHOUT_CLASSIFICATION	4.7602527724214963E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997097089938048	WITHOUT_CLASSIFICATION	2.9029100619517E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9996817380650004	WITHOUT_CLASSIFICATION	3.1826193499950915E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9998837116740299	WITHOUT_CLASSIFICATION	1.1628832597009947E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9995963218313726	WITHOUT_CLASSIFICATION	4.0367816862741583E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999554084463987	WITHOUT_CLASSIFICATION	4.459155360121581E-5	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9994962216016171	WITHOUT_CLASSIFICATION	5.037783983828808E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9998933171933241	WITHOUT_CLASSIFICATION	1.0668280667587094E-4	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9975627634158932	WITHOUT_CLASSIFICATION	0.0024372365841068473	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998539781559457	WITHOUT_CLASSIFICATION	1.4602184405431765E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9992435172640144	WITHOUT_CLASSIFICATION	7.56482735985682E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.999637300942964	WITHOUT_CLASSIFICATION	3.6269905703607017E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9999654876012576	WITHOUT_CLASSIFICATION	3.4512398742284204E-5	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999503833391883	WITHOUT_CLASSIFICATION	4.9616660811636754E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998863247948939	WITHOUT_CLASSIFICATION	1.1367520510602225E-4	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9967184406566499	WITHOUT_CLASSIFICATION	0.003281559343350135	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998135776813646	WITHOUT_CLASSIFICATION	1.8642231863539072E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9997874953670473	WITHOUT_CLASSIFICATION	2.1250463295267746E-4	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9996463998073367	WITHOUT_CLASSIFICATION	3.536001926632805E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.987809016166528	WITHOUT_CLASSIFICATION	0.012190983833471983	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9975772517894348	WITHOUT_CLASSIFICATION	0.002422748210565151	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.998579389362258	WITHOUT_CLASSIFICATION	0.0014206106377420756	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996914792283857	WITHOUT_CLASSIFICATION	3.085207716142888E-4	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9996710403565744	WITHOUT_CLASSIFICATION	3.28959643425591E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9996008018556557	WITHOUT_CLASSIFICATION	3.9919814434440684E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9996200248556101	WITHOUT_CLASSIFICATION	3.799751443899553E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9968389106240232	WITHOUT_CLASSIFICATION	0.003161089375976838	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6005356668344367	WITHOUT_CLASSIFICATION	0.3994643331655633	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9992217168380418	WITHOUT_CLASSIFICATION	7.782831619583053E-4	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.998581011156214	WITHOUT_CLASSIFICATION	0.0014189888437860804	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9991835107358565	WITHOUT_CLASSIFICATION	8.164892641434305E-4	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.5270201376865825	DESIGN	0.47297986231341754	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9963046131290104	WITHOUT_CLASSIFICATION	0.0036953868709895038	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.999430465144609	WITHOUT_CLASSIFICATION	5.695348553910575E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9997572101504542	WITHOUT_CLASSIFICATION	2.4278984954594573E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.9692927853778739	WITHOUT_CLASSIFICATION	0.030707214622126073	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9874096858266629	WITHOUT_CLASSIFICATION	0.012590314173337069	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9996532284783952	WITHOUT_CLASSIFICATION	3.4677152160476785E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996838046163719	WITHOUT_CLASSIFICATION	3.1619538362811443E-4	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9741971799725822	WITHOUT_CLASSIFICATION	0.025802820027417805	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9996532284783952	WITHOUT_CLASSIFICATION	3.4677152160476785E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9874096858266629	WITHOUT_CLASSIFICATION	0.012590314173337069	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996838046163719	WITHOUT_CLASSIFICATION	3.1619538362811443E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.999977074655008	WITHOUT_CLASSIFICATION	2.2925344992002913E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9996406402924161	WITHOUT_CLASSIFICATION	3.593597075839931E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.999863367547571	WITHOUT_CLASSIFICATION	1.36632452429017E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999316749991987	WITHOUT_CLASSIFICATION	6.832500080127275E-5	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9999928893032415	WITHOUT_CLASSIFICATION	7.110696758490562E-6	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.6576357851729294	WITHOUT_CLASSIFICATION	0.3423642148270704	DESIGN
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9980212831233782	WITHOUT_CLASSIFICATION	0.0019787168766217528	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.998685322608034	WITHOUT_CLASSIFICATION	0.0013146773919660538	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9998285499283863	WITHOUT_CLASSIFICATION	1.714500716137495E-4	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9997396083556667	WITHOUT_CLASSIFICATION	2.603916443333836E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999198934464796	WITHOUT_CLASSIFICATION	8.010655352042589E-5	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999924780999185	WITHOUT_CLASSIFICATION	7.521900081469032E-6	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9994872124337691	WITHOUT_CLASSIFICATION	5.127875662309144E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9999316749991987	WITHOUT_CLASSIFICATION	6.832500080127275E-5	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9999629159381787	WITHOUT_CLASSIFICATION	3.7084061821431423E-5	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9991456885766954	WITHOUT_CLASSIFICATION	8.543114233044749E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9874893250781177	WITHOUT_CLASSIFICATION	0.01251067492188225	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.883253898758837	WITHOUT_CLASSIFICATION	0.11674610124116304	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9986905452383001	WITHOUT_CLASSIFICATION	0.0013094547616997558	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999268694428524	WITHOUT_CLASSIFICATION	7.313055714764258E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.9891311147429618	WITHOUT_CLASSIFICATION	0.010868885257038342	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999923496340715	WITHOUT_CLASSIFICATION	7.650365928527901E-6	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9996696015765953	WITHOUT_CLASSIFICATION	3.3039842340464536E-4	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999896043353719	WITHOUT_CLASSIFICATION	1.039566462815089E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999276678798171	WITHOUT_CLASSIFICATION	7.233212018283256E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999276678798171	WITHOUT_CLASSIFICATION	7.233212018283256E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999911101187909	WITHOUT_CLASSIFICATION	8.889881208986678E-6	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999911101187909	WITHOUT_CLASSIFICATION	8.889881208986678E-6	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9994029766992885	WITHOUT_CLASSIFICATION	5.970233007114476E-4	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9874893250781177	WITHOUT_CLASSIFICATION	0.01251067492188225	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9982860166421383	WITHOUT_CLASSIFICATION	0.0017139833578616677	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9999557136324174	WITHOUT_CLASSIFICATION	4.428636758260044E-5	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9965047842882481	WITHOUT_CLASSIFICATION	0.003495215711751853	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9965047842882481	WITHOUT_CLASSIFICATION	0.003495215711751853	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999113322879473	WITHOUT_CLASSIFICATION	8.866771205284565E-5	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9995375053434725	WITHOUT_CLASSIFICATION	4.6249465652746963E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9999092557581387	WITHOUT_CLASSIFICATION	9.074424186121656E-5	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9996968537307692	WITHOUT_CLASSIFICATION	3.031462692308135E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8793799755627427	WITHOUT_CLASSIFICATION	0.12062002443725733	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999964302385335	WITHOUT_CLASSIFICATION	3.569761466545421E-6	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9993822419211309	WITHOUT_CLASSIFICATION	6.177580788689934E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9248130342170856	WITHOUT_CLASSIFICATION	0.07518696578291438	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9997249842183336	WITHOUT_CLASSIFICATION	2.750157816664181E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.996213216094385	WITHOUT_CLASSIFICATION	0.0037867839056150705	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9997434524038877	WITHOUT_CLASSIFICATION	2.5654759611222765E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9997331411259176	WITHOUT_CLASSIFICATION	2.6685887408239666E-4	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9997127166516541	WITHOUT_CLASSIFICATION	2.8728334834596925E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9998330602132622	WITHOUT_CLASSIFICATION	1.669397867377562E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9984648263972051	WITHOUT_CLASSIFICATION	0.0015351736027949172	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9996478926851997	WITHOUT_CLASSIFICATION	3.521073148002141E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9870552831586665	WITHOUT_CLASSIFICATION	0.012944716841333474	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999722728409449	WITHOUT_CLASSIFICATION	2.7727159055073265E-5	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.973205959880208	WITHOUT_CLASSIFICATION	0.026794040119791977	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9993028345564888	WITHOUT_CLASSIFICATION	6.971654435112281E-4	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999248156306605	WITHOUT_CLASSIFICATION	7.518436933957869E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9964342008479259	WITHOUT_CLASSIFICATION	0.003565799152074081	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998853175404748	WITHOUT_CLASSIFICATION	1.146824595251975E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9999112149521376	WITHOUT_CLASSIFICATION	8.878504786242764E-5	DESIGN
/	WITHOUT_CLASSIFICATION	0.9998764390020449	WITHOUT_CLASSIFICATION	1.235609979550929E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999374769875927	WITHOUT_CLASSIFICATION	6.252301240723489E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9998863247948939	WITHOUT_CLASSIFICATION	1.1367520510602225E-4	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998132989351113	WITHOUT_CLASSIFICATION	1.867010648886813E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9966220628378026	WITHOUT_CLASSIFICATION	0.0033779371621972696	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995259271852825	WITHOUT_CLASSIFICATION	4.7407281471745986E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998989011239217	WITHOUT_CLASSIFICATION	1.0109887607828102E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998989011239217	WITHOUT_CLASSIFICATION	1.0109887607828102E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999929059448176	WITHOUT_CLASSIFICATION	7.09405518238795E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.99992180353876	WITHOUT_CLASSIFICATION	7.819646123996741E-5	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9997302557273658	WITHOUT_CLASSIFICATION	2.697442726342307E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9997302557273658	WITHOUT_CLASSIFICATION	2.697442726342307E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9990042680973553	WITHOUT_CLASSIFICATION	9.957319026446775E-4	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9975133197396552	WITHOUT_CLASSIFICATION	0.002486680260344809	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.999552902550505	WITHOUT_CLASSIFICATION	4.4709744949488796E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9994565655819816	WITHOUT_CLASSIFICATION	5.434344180183739E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9998517598438006	WITHOUT_CLASSIFICATION	1.482401561993772E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9994906540631917	WITHOUT_CLASSIFICATION	5.093459368082981E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.998995399235429	WITHOUT_CLASSIFICATION	0.0010046007645709554	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999686840600777	WITHOUT_CLASSIFICATION	3.1315939922307005E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999686840600777	WITHOUT_CLASSIFICATION	3.1315939922307005E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9684416738630944	WITHOUT_CLASSIFICATION	0.03155832613690561	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999805133299734	WITHOUT_CLASSIFICATION	1.9486670026561028E-5	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9999805133299734	WITHOUT_CLASSIFICATION	1.9486670026561028E-5	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995441356356202	WITHOUT_CLASSIFICATION	4.5586436437981375E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9998353945250069	WITHOUT_CLASSIFICATION	1.6460547499305367E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999571066008124	WITHOUT_CLASSIFICATION	4.289339918771612E-5	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9998948772470833	WITHOUT_CLASSIFICATION	1.0512275291684705E-4	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9997352427830457	WITHOUT_CLASSIFICATION	2.6475721695420147E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9094835592397447	WITHOUT_CLASSIFICATION	0.09051644076025532	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9992609579940319	WITHOUT_CLASSIFICATION	7.390420059681233E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999139363214131	WITHOUT_CLASSIFICATION	8.60636785868838E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9947546337817943	WITHOUT_CLASSIFICATION	0.005245366218205718	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9890312781167327	WITHOUT_CLASSIFICATION	0.010968721883267281	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9991418583642425	WITHOUT_CLASSIFICATION	8.581416357575468E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996026758826987	WITHOUT_CLASSIFICATION	3.973241173014059E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996026758826987	WITHOUT_CLASSIFICATION	3.973241173014059E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996026758826987	WITHOUT_CLASSIFICATION	3.973241173014059E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996026758826987	WITHOUT_CLASSIFICATION	3.973241173014059E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998484678911047	WITHOUT_CLASSIFICATION	1.515321088952743E-4	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9989633573751825	WITHOUT_CLASSIFICATION	0.0010366426248175822	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.999724211873988	WITHOUT_CLASSIFICATION	2.757881260120715E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.999815639160467	WITHOUT_CLASSIFICATION	1.8436083953310564E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9956942150344694	WITHOUT_CLASSIFICATION	0.004305784965530587	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9974102501994152	WITHOUT_CLASSIFICATION	0.002589749800584852	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9995705098804615	WITHOUT_CLASSIFICATION	4.2949011953857303E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9998518404771447	WITHOUT_CLASSIFICATION	1.481595228553278E-4	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.999403683458909	WITHOUT_CLASSIFICATION	5.96316541091E-4	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9985092931337732	WITHOUT_CLASSIFICATION	0.0014907068662267065	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997653831641015	WITHOUT_CLASSIFICATION	2.3461683589862147E-4	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997512276296592	WITHOUT_CLASSIFICATION	2.487723703408134E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9966006613926124	WITHOUT_CLASSIFICATION	0.0033993386073876354	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999091015641265	WITHOUT_CLASSIFICATION	9.08984358734746E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997653831641015	WITHOUT_CLASSIFICATION	2.3461683589862147E-4	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.7882683159082257	DESIGN	0.21173168409177429	WITHOUT_CLASSIFICATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9984568557253302	WITHOUT_CLASSIFICATION	0.0015431442746698428	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9999384332983929	WITHOUT_CLASSIFICATION	6.1566701606977E-5	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9991361986560068	WITHOUT_CLASSIFICATION	8.63801343993173E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9996959149410363	WITHOUT_CLASSIFICATION	3.0408505896377657E-4	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9946660220434941	WITHOUT_CLASSIFICATION	0.00533397795650591	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9970940224866485	WITHOUT_CLASSIFICATION	0.0029059775133514158	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997508163397204	WITHOUT_CLASSIFICATION	2.4918366027955487E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995586954840149	WITHOUT_CLASSIFICATION	4.4130451598507097E-4	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9992127022741861	WITHOUT_CLASSIFICATION	7.87297725813888E-4	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995586954840149	WITHOUT_CLASSIFICATION	4.4130451598507097E-4	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999059184066569	WITHOUT_CLASSIFICATION	9.40815933431067E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9965914889641937	WITHOUT_CLASSIFICATION	0.0034085110358063222	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9992007086809238	WITHOUT_CLASSIFICATION	7.992913190761834E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999395246582258	WITHOUT_CLASSIFICATION	6.0475341774134424E-5	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9936692194840193	WITHOUT_CLASSIFICATION	0.006330780515980633	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998703147813935	WITHOUT_CLASSIFICATION	1.296852186063532E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997116013531707	WITHOUT_CLASSIFICATION	2.883986468293106E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996688152775394	WITHOUT_CLASSIFICATION	3.3118472246057356E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997116013531707	WITHOUT_CLASSIFICATION	2.883986468293106E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996336874664244	WITHOUT_CLASSIFICATION	3.663125335755427E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999518673273068	WITHOUT_CLASSIFICATION	4.8132672693193594E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.997821690326897	WITHOUT_CLASSIFICATION	0.002178309673102924	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9996127240092906	WITHOUT_CLASSIFICATION	3.8727599070943487E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9988328713620914	WITHOUT_CLASSIFICATION	0.0011671286379086004	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.999739502260474	WITHOUT_CLASSIFICATION	2.604977395259717E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999771452305599	WITHOUT_CLASSIFICATION	2.2854769439973425E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998703147813935	WITHOUT_CLASSIFICATION	1.296852186063532E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996688152775394	WITHOUT_CLASSIFICATION	3.3118472246057356E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996336874664244	WITHOUT_CLASSIFICATION	3.663125335755427E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.998286543497139	WITHOUT_CLASSIFICATION	0.001713456502861057	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9998347323465299	WITHOUT_CLASSIFICATION	1.652676534701936E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9999620064009618	WITHOUT_CLASSIFICATION	3.799359903823905E-5	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9993989229764045	WITHOUT_CLASSIFICATION	6.010770235953562E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999825542854315	WITHOUT_CLASSIFICATION	1.744571456844677E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9976005948801613	WITHOUT_CLASSIFICATION	0.002399405119838791	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9997316136331167	WITHOUT_CLASSIFICATION	2.6838636688328006E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9870552831586665	WITHOUT_CLASSIFICATION	0.012944716841333474	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999518673273068	WITHOUT_CLASSIFICATION	4.8132672693193594E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999393751518066	WITHOUT_CLASSIFICATION	6.062484819343607E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9995582822432586	WITHOUT_CLASSIFICATION	4.4171775674142625E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9996313032274728	WITHOUT_CLASSIFICATION	3.6869677252705156E-4	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9997632735863001	WITHOUT_CLASSIFICATION	2.36726413699878E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9870552831586665	WITHOUT_CLASSIFICATION	0.012944716841333474	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9995958879842953	WITHOUT_CLASSIFICATION	4.041120157046492E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9870552831586665	WITHOUT_CLASSIFICATION	0.012944716841333474	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9976091229896724	WITHOUT_CLASSIFICATION	0.002390877010327564	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998077672719794	WITHOUT_CLASSIFICATION	1.9223272802053798E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9992619850576102	WITHOUT_CLASSIFICATION	7.380149423898867E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9993704463107503	WITHOUT_CLASSIFICATION	6.295536892496427E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9996758644928965	WITHOUT_CLASSIFICATION	3.241355071035872E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9998386325943392	WITHOUT_CLASSIFICATION	1.6136740566079498E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9992597407960708	WITHOUT_CLASSIFICATION	7.4025920392921E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998119714432376	WITHOUT_CLASSIFICATION	1.880285567624268E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9999052067180914	WITHOUT_CLASSIFICATION	9.479328190854992E-5	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9998366953935238	WITHOUT_CLASSIFICATION	1.6330460647607972E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9926997624318172	WITHOUT_CLASSIFICATION	0.007300237568182732	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9996369632864918	WITHOUT_CLASSIFICATION	3.630367135082999E-4	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.999150317936077	WITHOUT_CLASSIFICATION	8.496820639228708E-4	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9998330728590469	WITHOUT_CLASSIFICATION	1.6692714095307772E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9977783948713012	WITHOUT_CLASSIFICATION	0.0022216051286987988	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9994370767626388	WITHOUT_CLASSIFICATION	5.629232373612564E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9998371990846996	WITHOUT_CLASSIFICATION	1.6280091530039263E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.8972456685320135	WITHOUT_CLASSIFICATION	0.10275433146798657	DESIGN
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9981642885441478	WITHOUT_CLASSIFICATION	0.0018357114558521432	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9916306217982743	WITHOUT_CLASSIFICATION	0.008369378201725569	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999543904186163	WITHOUT_CLASSIFICATION	4.5609581383696354E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.999543904186163	WITHOUT_CLASSIFICATION	4.5609581383696354E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9997520686091336	WITHOUT_CLASSIFICATION	2.4793139086644886E-4	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9995293003869237	WITHOUT_CLASSIFICATION	4.706996130762039E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996296278867179	WITHOUT_CLASSIFICATION	3.703721132819756E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999968510102508	WITHOUT_CLASSIFICATION	3.1489897490972434E-6	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9995181634122984	WITHOUT_CLASSIFICATION	4.81836587701706E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999523264971634	WITHOUT_CLASSIFICATION	4.7673502836615644E-5	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996974744144017	WITHOUT_CLASSIFICATION	3.025255855983642E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.965125517643317	WITHOUT_CLASSIFICATION	0.03487448235668306	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.7810545413180165	WITHOUT_CLASSIFICATION	0.21894545868198348	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9998392708544248	WITHOUT_CLASSIFICATION	1.6072914557528566E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9982633704152757	WITHOUT_CLASSIFICATION	0.0017366295847242837	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9977726710177314	WITHOUT_CLASSIFICATION	0.0022273289822686325	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9997646538568159	WITHOUT_CLASSIFICATION	2.3534614318415712E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9979829977050914	WITHOUT_CLASSIFICATION	0.0020170022949086972	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998808410539183	WITHOUT_CLASSIFICATION	1.1915894608168213E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9995943458250846	WITHOUT_CLASSIFICATION	4.0565417491540077E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998467752820058	WITHOUT_CLASSIFICATION	1.53224717994183E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9998467752820058	WITHOUT_CLASSIFICATION	1.53224717994183E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999944749177875	WITHOUT_CLASSIFICATION	5.525082212543344E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9998119714432376	WITHOUT_CLASSIFICATION	1.880285567624268E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.992820265267318	WITHOUT_CLASSIFICATION	0.007179734732681988	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999818800625541	WITHOUT_CLASSIFICATION	1.8119937446022922E-5	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9977388005511926	WITHOUT_CLASSIFICATION	0.0022611994488074293	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9998390309300464	WITHOUT_CLASSIFICATION	1.6096906995363095E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9998621152008484	WITHOUT_CLASSIFICATION	1.3788479915160273E-4	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9996981544590765	WITHOUT_CLASSIFICATION	3.0184554092357115E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9978974759756849	WITHOUT_CLASSIFICATION	0.0021025240243150653	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9996778970097367	WITHOUT_CLASSIFICATION	3.221029902632749E-4	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.999829028164731	WITHOUT_CLASSIFICATION	1.7097183526909937E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9581571565075393	WITHOUT_CLASSIFICATION	0.041842843492460736	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999753619976238	WITHOUT_CLASSIFICATION	2.463800237619387E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9999422296084741	WITHOUT_CLASSIFICATION	5.77703915257798E-5	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999960890379386	WITHOUT_CLASSIFICATION	3.910962061489826E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9993493498008034	WITHOUT_CLASSIFICATION	6.50650199196636E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9998089505470896	WITHOUT_CLASSIFICATION	1.910494529104153E-4	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9996258640008567	WITHOUT_CLASSIFICATION	3.741359991433754E-4	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9997275476096891	WITHOUT_CLASSIFICATION	2.7245239031093837E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9988940871070295	WITHOUT_CLASSIFICATION	0.0011059128929704655	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995322604179344	WITHOUT_CLASSIFICATION	4.6773958206565387E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998833182789124	WITHOUT_CLASSIFICATION	1.1668172108762282E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.998858405682065	WITHOUT_CLASSIFICATION	0.0011415943179350022	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9354308171585222	WITHOUT_CLASSIFICATION	0.06456918284147788	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9992709839615761	WITHOUT_CLASSIFICATION	7.290160384237804E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999909632340908	WITHOUT_CLASSIFICATION	9.036765909117646E-6	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999577786981905	WITHOUT_CLASSIFICATION	4.222130180942586E-5	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9987305979889933	WITHOUT_CLASSIFICATION	0.0012694020110066658	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9991458967514089	WITHOUT_CLASSIFICATION	8.541032485910298E-4	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9996220280897479	WITHOUT_CLASSIFICATION	3.779719102521982E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9994602514762068	WITHOUT_CLASSIFICATION	5.39748523793319E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9996935197467584	WITHOUT_CLASSIFICATION	3.064802532417445E-4	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999958755094785	WITHOUT_CLASSIFICATION	4.124490521459819E-6	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9997152485816341	WITHOUT_CLASSIFICATION	2.8475141836595047E-4	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9995982902971059	WITHOUT_CLASSIFICATION	4.017097028941377E-4	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9991819297754628	WITHOUT_CLASSIFICATION	8.180702245371697E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997802295310713	WITHOUT_CLASSIFICATION	2.197704689288152E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9991634434637816	WITHOUT_CLASSIFICATION	8.365565362183562E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9950012801582679	WITHOUT_CLASSIFICATION	0.004998719841732123	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9950012801582679	WITHOUT_CLASSIFICATION	0.004998719841732123	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9998789071570935	WITHOUT_CLASSIFICATION	1.2109284290654232E-4	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9996405420830318	WITHOUT_CLASSIFICATION	3.594579169683115E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995820612286371	WITHOUT_CLASSIFICATION	4.1793877136280064E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9995820612286371	WITHOUT_CLASSIFICATION	4.1793877136280064E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9990481409131029	WITHOUT_CLASSIFICATION	9.518590868972229E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9998783255431447	WITHOUT_CLASSIFICATION	1.2167445685527675E-4	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8066897287153288	DESIGN	0.1933102712846712	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999494898111821	WITHOUT_CLASSIFICATION	5.051018881789812E-4	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995858737332682	WITHOUT_CLASSIFICATION	4.141262667317464E-4	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994537513521972	WITHOUT_CLASSIFICATION	5.462486478028114E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997855612184476	WITHOUT_CLASSIFICATION	2.1443878155237854E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9997855612184476	WITHOUT_CLASSIFICATION	2.1443878155237854E-4	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994537513521972	WITHOUT_CLASSIFICATION	5.462486478028114E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9996721199936498	WITHOUT_CLASSIFICATION	3.27880006350164E-4	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9997890725306045	WITHOUT_CLASSIFICATION	2.1092746939552616E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9997936192336587	WITHOUT_CLASSIFICATION	2.0638076634136627E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9997936192336587	WITHOUT_CLASSIFICATION	2.0638076634136627E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999051954638042	WITHOUT_CLASSIFICATION	9.480453619589196E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9995045090992133	WITHOUT_CLASSIFICATION	4.954909007867444E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999547134313455	WITHOUT_CLASSIFICATION	4.528656865447016E-5	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9997480232214064	WITHOUT_CLASSIFICATION	2.519767785934874E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9998451554451153	WITHOUT_CLASSIFICATION	1.5484455488472005E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9981275108705512	WITHOUT_CLASSIFICATION	0.0018724891294488856	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999839259692573	WITHOUT_CLASSIFICATION	1.6074030742699717E-4	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999743719659084	WITHOUT_CLASSIFICATION	2.562803409158244E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9761270899432596	WITHOUT_CLASSIFICATION	0.023872910056740346	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999053456866716	WITHOUT_CLASSIFICATION	9.465431332836865E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999855858527046	WITHOUT_CLASSIFICATION	1.4414147295564063E-5	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.995292610317234	WITHOUT_CLASSIFICATION	0.004707389682766005	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9998898582623009	WITHOUT_CLASSIFICATION	1.1014173769910802E-4	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9793090396542721	WITHOUT_CLASSIFICATION	0.020690960345727972	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9996146317248661	WITHOUT_CLASSIFICATION	3.8536827513390185E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998889237587384	WITHOUT_CLASSIFICATION	1.1107624126160025E-4	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9989858642585296	WITHOUT_CLASSIFICATION	0.0010141357414702992	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9989311259057131	WITHOUT_CLASSIFICATION	0.0010688740942868225	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998912110637617	WITHOUT_CLASSIFICATION	1.0878893623835148E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9998503429867137	WITHOUT_CLASSIFICATION	1.4965701328629828E-4	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9998802485224694	WITHOUT_CLASSIFICATION	1.1975147753066535E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9976469716671078	WITHOUT_CLASSIFICATION	0.0023530283328921826	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9950410487414306	WITHOUT_CLASSIFICATION	0.004958951258569402	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9994986671935233	WITHOUT_CLASSIFICATION	5.01332806476715E-4	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9996101672580934	WITHOUT_CLASSIFICATION	3.898327419065816E-4	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9995702335890522	WITHOUT_CLASSIFICATION	4.2976641094782226E-4	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9986514923239881	WITHOUT_CLASSIFICATION	0.0013485076760119644	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9993211702259168	WITHOUT_CLASSIFICATION	6.788297740832018E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.999763507993182	WITHOUT_CLASSIFICATION	2.3649200681797236E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.9873141193022781	WITHOUT_CLASSIFICATION	0.01268588069772185	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9992996888838971	WITHOUT_CLASSIFICATION	7.003111161030192E-4	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9988911383329944	WITHOUT_CLASSIFICATION	0.0011088616670056797	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9996976722643042	WITHOUT_CLASSIFICATION	3.023277356958075E-4	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9920133090929808	WITHOUT_CLASSIFICATION	0.007986690907019265	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9994923320097887	WITHOUT_CLASSIFICATION	5.076679902113598E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9995813733192673	WITHOUT_CLASSIFICATION	4.1862668073270936E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9996277776478383	WITHOUT_CLASSIFICATION	3.7222235216164155E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999187689783126	WITHOUT_CLASSIFICATION	8.123102168741655E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9999545487854554	WITHOUT_CLASSIFICATION	4.5451214544509304E-5	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9988768162784687	WITHOUT_CLASSIFICATION	0.001123183721531331	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9993035263293454	WITHOUT_CLASSIFICATION	6.96473670654668E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9993051945459358	WITHOUT_CLASSIFICATION	6.948054540642036E-4	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9998743214700379	WITHOUT_CLASSIFICATION	1.2567852996208311E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9999412563444059	WITHOUT_CLASSIFICATION	5.8743655594101626E-5	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.6051143582987983	WITHOUT_CLASSIFICATION	0.3948856417012017	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9951752873395541	WITHOUT_CLASSIFICATION	0.0048247126604458995	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9998502639647969	WITHOUT_CLASSIFICATION	1.4973603520312926E-4	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9920015735552338	WITHOUT_CLASSIFICATION	0.007998426444766341	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9957550577144965	WITHOUT_CLASSIFICATION	0.004244942285503565	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9475914132902636	WITHOUT_CLASSIFICATION	0.052408586709736284	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9980802176145694	WITHOUT_CLASSIFICATION	0.0019197823854304379	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9998927456533304	WITHOUT_CLASSIFICATION	1.0725434666954054E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999077654370607	WITHOUT_CLASSIFICATION	9.223456293924705E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.999853856621186	WITHOUT_CLASSIFICATION	1.461433788139366E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.999682537536223	WITHOUT_CLASSIFICATION	3.1746246377701827E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9990706067466613	WITHOUT_CLASSIFICATION	9.29393253338861E-4	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9999375495253512	WITHOUT_CLASSIFICATION	6.245047464882093E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997975605366566	WITHOUT_CLASSIFICATION	2.024394633433494E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9997975605366566	WITHOUT_CLASSIFICATION	2.024394633433494E-4	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999980952895208	WITHOUT_CLASSIFICATION	1.9047104791839012E-6	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999590538354914	WITHOUT_CLASSIFICATION	4.094616450851817E-5	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9992623232107185	WITHOUT_CLASSIFICATION	7.376767892815943E-4	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9854001826262462	WITHOUT_CLASSIFICATION	0.014599817373753895	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999465163723477	WITHOUT_CLASSIFICATION	5.348362765231089E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9980156373061766	WITHOUT_CLASSIFICATION	0.0019843626938233364	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.999997030043748	WITHOUT_CLASSIFICATION	2.969956251971367E-6	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999136305066114	WITHOUT_CLASSIFICATION	8.636949338860706E-5	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9990552782047404	WITHOUT_CLASSIFICATION	9.447217952595451E-4	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9998818934070012	WITHOUT_CLASSIFICATION	1.1810659299877215E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9998809067803024	WITHOUT_CLASSIFICATION	1.1909321969771158E-4	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9823624444731134	WITHOUT_CLASSIFICATION	0.017637555526886613	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998256331737	WITHOUT_CLASSIFICATION	1.7436682637649796E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9994402040470511	WITHOUT_CLASSIFICATION	5.597959529487544E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997115157116606	WITHOUT_CLASSIFICATION	2.8848428833939705E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9997115157116606	WITHOUT_CLASSIFICATION	2.8848428833939705E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9991460153930246	WITHOUT_CLASSIFICATION	8.539846069754305E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995623467503574	WITHOUT_CLASSIFICATION	4.3765324964263673E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9992344460411288	WITHOUT_CLASSIFICATION	7.655539588712109E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999178506262152	WITHOUT_CLASSIFICATION	8.214937378483647E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9996864426169193	WITHOUT_CLASSIFICATION	3.1355738308071955E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994258317907995	WITHOUT_CLASSIFICATION	5.741682092005741E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9993983406781245	WITHOUT_CLASSIFICATION	6.01659321875502E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999215206243528	WITHOUT_CLASSIFICATION	7.847937564722525E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9821532722545784	WITHOUT_CLASSIFICATION	0.017846727745421658	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9998116159042975	WITHOUT_CLASSIFICATION	1.8838409570252738E-4	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999796537757748	WITHOUT_CLASSIFICATION	2.034622422513845E-5	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9997949519757594	WITHOUT_CLASSIFICATION	2.0504802424060087E-4	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.99666222523189	WITHOUT_CLASSIFICATION	0.0033377747681100026	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.999859769082121	WITHOUT_CLASSIFICATION	1.4023091787885187E-4	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9995074011891552	WITHOUT_CLASSIFICATION	4.925988108448131E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.9505127953425173	WITHOUT_CLASSIFICATION	0.04948720465748269	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9918635806796811	WITHOUT_CLASSIFICATION	0.00813641932031889	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999118254753747	WITHOUT_CLASSIFICATION	8.817452462529575E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9997838941764527	WITHOUT_CLASSIFICATION	2.1610582354724786E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999895802701982	WITHOUT_CLASSIFICATION	1.0419729801756092E-5	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998214208160513	WITHOUT_CLASSIFICATION	1.7857918394863651E-4	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998652027979338	WITHOUT_CLASSIFICATION	1.3479720206618508E-4	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998564612041886	WITHOUT_CLASSIFICATION	1.4353879581140724E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999997494738656	WITHOUT_CLASSIFICATION	2.50526134410479E-7	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.999751867801674	WITHOUT_CLASSIFICATION	2.4813219832591464E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9997928060678093	WITHOUT_CLASSIFICATION	2.071939321907638E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.893554474872069	WITHOUT_CLASSIFICATION	0.10644552512793103	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9846442843460387	WITHOUT_CLASSIFICATION	0.01535571565396129	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999185953747707	WITHOUT_CLASSIFICATION	8.140462522926826E-5	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999008323949672	WITHOUT_CLASSIFICATION	9.916760503283057E-5	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.999784681294717	WITHOUT_CLASSIFICATION	2.153187052830033E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9998910479348253	WITHOUT_CLASSIFICATION	1.0895206517461376E-4	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9993429277064961	WITHOUT_CLASSIFICATION	6.570722935038295E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999980473451392	WITHOUT_CLASSIFICATION	1.9526548607503858E-6	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999748715874494	WITHOUT_CLASSIFICATION	2.5128412550604465E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9997106101698333	WITHOUT_CLASSIFICATION	2.8938983016666477E-4	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9958591762291105	WITHOUT_CLASSIFICATION	0.0041408237708894765	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9995970675163809	WITHOUT_CLASSIFICATION	4.0293248361910234E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9996693019842717	WITHOUT_CLASSIFICATION	3.3069801572827414E-4	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9996657993363989	WITHOUT_CLASSIFICATION	3.342006636010538E-4	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9925672379584235	WITHOUT_CLASSIFICATION	0.007432762041576496	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.99406947923322	WITHOUT_CLASSIFICATION	0.005930520766780089	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980210983355314	WITHOUT_CLASSIFICATION	0.001978901664468459	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9980210983355314	WITHOUT_CLASSIFICATION	0.001978901664468459	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999115571480137	WITHOUT_CLASSIFICATION	8.844285198629933E-5	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8983185693790499	WITHOUT_CLASSIFICATION	0.10168143062095014	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9714613442265944	WITHOUT_CLASSIFICATION	0.028538655773405686	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998226049803707	WITHOUT_CLASSIFICATION	1.7739501962945668E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.9554860371752013	WITHOUT_CLASSIFICATION	0.04451396282479874	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9961295421971268	WITHOUT_CLASSIFICATION	0.0038704578028731563	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9939128656535465	WITHOUT_CLASSIFICATION	0.006087134346453494	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9999666580451348	WITHOUT_CLASSIFICATION	3.334195486527098E-5	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9964347648794427	WITHOUT_CLASSIFICATION	0.0035652351205571805	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995388635134904	WITHOUT_CLASSIFICATION	4.611364865096311E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9964003555348047	WITHOUT_CLASSIFICATION	0.0035996444651952434	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9986157192166359	WITHOUT_CLASSIFICATION	0.0013842807833641397	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999947878033316	WITHOUT_CLASSIFICATION	5.212196668426268E-6	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9975950826850128	WITHOUT_CLASSIFICATION	0.0024049173149872055	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.994796041859945	WITHOUT_CLASSIFICATION	0.005203958140055036	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9910348686899841	WITHOUT_CLASSIFICATION	0.008965131310015934	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.999961405577997	WITHOUT_CLASSIFICATION	3.85944220030256E-5	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.999963780779462	WITHOUT_CLASSIFICATION	3.6219220537873127E-5	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9994513729215182	WITHOUT_CLASSIFICATION	5.486270784818279E-4	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9999315818982438	WITHOUT_CLASSIFICATION	6.841810175611915E-5	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999477934338945	WITHOUT_CLASSIFICATION	5.220656610543332E-5	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995584199838795	WITHOUT_CLASSIFICATION	4.4158001612052674E-4	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9999514583460314	WITHOUT_CLASSIFICATION	4.8541653968604436E-5	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9996640073919753	WITHOUT_CLASSIFICATION	3.3599260802479665E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9999472519318847	WITHOUT_CLASSIFICATION	5.274806811533096E-5	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995847244244133	WITHOUT_CLASSIFICATION	4.152755755867369E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9980919698487533	WITHOUT_CLASSIFICATION	0.001908030151246701	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999765893613616	WITHOUT_CLASSIFICATION	2.3410638638402532E-5	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9641123477971011	DESIGN	0.03588765220289884	WITHOUT_CLASSIFICATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.9635540628097738	WITHOUT_CLASSIFICATION	0.03644593719022613	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.8927075975725749	WITHOUT_CLASSIFICATION	0.10729240242742502	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999761771250871	WITHOUT_CLASSIFICATION	2.3822874912883932E-5	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.95577949881623	WITHOUT_CLASSIFICATION	0.044220501183769904	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9985905343775107	WITHOUT_CLASSIFICATION	0.0014094656224893298	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999745078137705	WITHOUT_CLASSIFICATION	2.5492186229506726E-5	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9852871112597933	WITHOUT_CLASSIFICATION	0.014712888740206678	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9997120897447026	WITHOUT_CLASSIFICATION	2.879102552973646E-4	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.999783240132121	WITHOUT_CLASSIFICATION	2.1675986787895465E-4	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999672750616032	WITHOUT_CLASSIFICATION	3.272493839679303E-5	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.6821218617696334	WITHOUT_CLASSIFICATION	0.31787813823036654	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9994363141980418	WITHOUT_CLASSIFICATION	5.636858019581193E-4	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.997677375710822	WITHOUT_CLASSIFICATION	0.0023226242891778255	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9994910045199138	WITHOUT_CLASSIFICATION	5.089954800862476E-4	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9998146775306118	WITHOUT_CLASSIFICATION	1.8532246938812792E-4	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999971919966605	WITHOUT_CLASSIFICATION	2.8080033395277257E-6	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9990270648845545	WITHOUT_CLASSIFICATION	9.729351154454223E-4	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9840345097120801	WITHOUT_CLASSIFICATION	0.015965490287919947	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9983200440821559	WITHOUT_CLASSIFICATION	0.0016799559178442	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998256331737	WITHOUT_CLASSIFICATION	1.7436682637649796E-7	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9980321702316958	WITHOUT_CLASSIFICATION	0.0019678297683042418	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998888358956005	WITHOUT_CLASSIFICATION	1.1116410439948822E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9944005672429399	WITHOUT_CLASSIFICATION	0.005599432757060046	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9995335979002443	WITHOUT_CLASSIFICATION	4.664020997556965E-4	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.999980388877375	WITHOUT_CLASSIFICATION	1.96111226249995E-5	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9996685821039198	WITHOUT_CLASSIFICATION	3.31417896080221E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9988218303213093	WITHOUT_CLASSIFICATION	0.0011781696786907138	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9996696484634615	WITHOUT_CLASSIFICATION	3.303515365383998E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996633254491399	WITHOUT_CLASSIFICATION	3.366745508600601E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9996840166662286	WITHOUT_CLASSIFICATION	3.159833337713688E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999945377569723	WITHOUT_CLASSIFICATION	5.462243027605659E-6	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998345005124872	WITHOUT_CLASSIFICATION	1.6549948751279892E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9957257996846794	WITHOUT_CLASSIFICATION	0.0042742003153204925	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9991281781825132	WITHOUT_CLASSIFICATION	8.718218174868251E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9908208324457978	WITHOUT_CLASSIFICATION	0.009179167554202117	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994549455533092	WITHOUT_CLASSIFICATION	5.45054446690801E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.999739502260474	WITHOUT_CLASSIFICATION	2.604977395259717E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9996721251060084	WITHOUT_CLASSIFICATION	3.278748939915445E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9993104180344686	WITHOUT_CLASSIFICATION	6.895819655314108E-4	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9999699387087483	WITHOUT_CLASSIFICATION	3.0061291251806952E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994549455533092	WITHOUT_CLASSIFICATION	5.45054446690801E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9993892210350684	WITHOUT_CLASSIFICATION	6.107789649316538E-4	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9700616683255295	DESIGN	0.029938331674470485	WITHOUT_CLASSIFICATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.999800605081692	WITHOUT_CLASSIFICATION	1.9939491830805024E-4	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9986541549756361	WITHOUT_CLASSIFICATION	0.0013458450243638866	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9997504120106742	WITHOUT_CLASSIFICATION	2.495879893258699E-4	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9530603792212313	WITHOUT_CLASSIFICATION	0.04693962077876868	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9994962345341056	WITHOUT_CLASSIFICATION	5.037654658943358E-4	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9571089721436592	WITHOUT_CLASSIFICATION	0.042891027856340844	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9836484235507511	WITHOUT_CLASSIFICATION	0.016351576449248915	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9756201514766523	WITHOUT_CLASSIFICATION	0.02437984852334767	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9983580817244864	WITHOUT_CLASSIFICATION	0.0016419182755136928	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.947145372605563	WITHOUT_CLASSIFICATION	0.05285462739443704	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9998074569819088	WITHOUT_CLASSIFICATION	1.925430180911798E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999174882095452	WITHOUT_CLASSIFICATION	8.251179045486917E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999313837036177	WITHOUT_CLASSIFICATION	6.861629638239613E-5	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9997476210236037	WITHOUT_CLASSIFICATION	2.5237897639623246E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.998858405682065	WITHOUT_CLASSIFICATION	0.0011415943179350022	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9999331507180876	WITHOUT_CLASSIFICATION	6.684928191232929E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.999984755112906	WITHOUT_CLASSIFICATION	1.5244887094009759E-5	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9968203206382982	WITHOUT_CLASSIFICATION	0.003179679361701814	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9465727114127288	WITHOUT_CLASSIFICATION	0.053427288587271284	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9998427097310921	WITHOUT_CLASSIFICATION	1.5729026890783123E-4	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999605290929959	WITHOUT_CLASSIFICATION	3.947090700407075E-5	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9949564316218016	WITHOUT_CLASSIFICATION	0.005043568378198425	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9919190841235912	WITHOUT_CLASSIFICATION	0.008080915876408723	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9997004607246361	WITHOUT_CLASSIFICATION	2.995392753639223E-4	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999806840085349	WITHOUT_CLASSIFICATION	1.9315991465147738E-5	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9745553999554023	WITHOUT_CLASSIFICATION	0.02544460004459766	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9765473566577494	WITHOUT_CLASSIFICATION	0.02345264334225056	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.6904466803595726	WITHOUT_CLASSIFICATION	0.30955331964042737	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9975291463353801	WITHOUT_CLASSIFICATION	0.002470853664619887	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9997810072129565	WITHOUT_CLASSIFICATION	2.1899278704347729E-4	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998580850202594	WITHOUT_CLASSIFICATION	1.4191497974064783E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9957297242630234	WITHOUT_CLASSIFICATION	0.004270275736976557	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.996554272655638	WITHOUT_CLASSIFICATION	0.0034457273443619825	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9993788449446264	WITHOUT_CLASSIFICATION	6.211550553736581E-4	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9710436152751968	WITHOUT_CLASSIFICATION	0.02895638472480318	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.999877308389653	WITHOUT_CLASSIFICATION	1.226916103469422E-4	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.8552473097411928	WITHOUT_CLASSIFICATION	0.1447526902588072	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9954258386460132	WITHOUT_CLASSIFICATION	0.0045741613539867	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999177381349407	WITHOUT_CLASSIFICATION	8.226186505929985E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999462906901431	WITHOUT_CLASSIFICATION	5.370930985698458E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999462906901431	WITHOUT_CLASSIFICATION	5.370930985698458E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996083382727176	WITHOUT_CLASSIFICATION	3.9166172728245525E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9996974212804366	WITHOUT_CLASSIFICATION	3.0257871956344964E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996943368104997	WITHOUT_CLASSIFICATION	3.0566318950031417E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9994308180932238	WITHOUT_CLASSIFICATION	5.691819067762439E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9994565655819816	WITHOUT_CLASSIFICATION	5.434344180183739E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9994565655819816	WITHOUT_CLASSIFICATION	5.434344180183739E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9995339271836975	WITHOUT_CLASSIFICATION	4.660728163025166E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9997819771985016	WITHOUT_CLASSIFICATION	2.1802280149832968E-4	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999461674872549	WITHOUT_CLASSIFICATION	5.383251274510996E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9989879762682399	WITHOUT_CLASSIFICATION	0.0010120237317601869	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.999739502260474	WITHOUT_CLASSIFICATION	2.604977395259717E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999031865355601	WITHOUT_CLASSIFICATION	9.681346443981484E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999299390639902	WITHOUT_CLASSIFICATION	7.006093600981857E-5	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998706627922136	WITHOUT_CLASSIFICATION	1.2933720778639528E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999725748910554	WITHOUT_CLASSIFICATION	2.7425108944605434E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9977384870998868	WITHOUT_CLASSIFICATION	0.0022615129001131895	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.926649096913448	DESIGN	0.07335090308655202	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996034832873919	WITHOUT_CLASSIFICATION	3.965167126081568E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996034832873919	WITHOUT_CLASSIFICATION	3.965167126081568E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9997476210236037	WITHOUT_CLASSIFICATION	2.5237897639623246E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9996713612580739	WITHOUT_CLASSIFICATION	3.2863874192614484E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9970329168708765	WITHOUT_CLASSIFICATION	0.002967083129123473	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9965601815481139	WITHOUT_CLASSIFICATION	0.0034398184518862093	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9964206708054678	WITHOUT_CLASSIFICATION	0.003579329194532317	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9996450208649578	WITHOUT_CLASSIFICATION	3.549791350423057E-4	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9997947716710832	WITHOUT_CLASSIFICATION	2.0522832891673573E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9994674209520583	WITHOUT_CLASSIFICATION	5.32579047941668E-4	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.995801055136105	WITHOUT_CLASSIFICATION	0.004198944863895023	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9756201514766523	WITHOUT_CLASSIFICATION	0.02437984852334767	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.970921563948925	WITHOUT_CLASSIFICATION	0.029078436051074942	DESIGN
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9975703023097683	WITHOUT_CLASSIFICATION	0.0024296976902316416	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9998082369826372	WITHOUT_CLASSIFICATION	1.9176301736270306E-4	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.999958973053204	WITHOUT_CLASSIFICATION	4.102694679589228E-5	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999373026324816	WITHOUT_CLASSIFICATION	6.269736751840068E-4	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994462629688697	WITHOUT_CLASSIFICATION	5.537370311303522E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9915254993383729	WITHOUT_CLASSIFICATION	0.008474500661627181	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9990899255547684	WITHOUT_CLASSIFICATION	9.100744452316453E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9996695225695672	WITHOUT_CLASSIFICATION	3.3047743043276146E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9965454928640207	WITHOUT_CLASSIFICATION	0.0034545071359791866	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9965454928640207	WITHOUT_CLASSIFICATION	0.0034545071359791866	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9997653831641015	WITHOUT_CLASSIFICATION	2.3461683589862147E-4	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999899904501361	WITHOUT_CLASSIFICATION	1.0009549863765026E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9982401401127751	WITHOUT_CLASSIFICATION	0.0017598598872249748	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994703964922285	WITHOUT_CLASSIFICATION	5.296035077715315E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9995105381932832	WITHOUT_CLASSIFICATION	4.89461806716772E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.9478942789344355	WITHOUT_CLASSIFICATION	0.0521057210655646	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9999395246582258	WITHOUT_CLASSIFICATION	6.0475341774134424E-5	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999918385012367	WITHOUT_CLASSIFICATION	8.16149876320441E-6	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.998286543497139	WITHOUT_CLASSIFICATION	0.001713456502861057	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998657369151643	WITHOUT_CLASSIFICATION	1.3426308483559867E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9870552831586665	WITHOUT_CLASSIFICATION	0.012944716841333474	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9721741084100743	DESIGN	0.02782589158992576	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999368346893952	WITHOUT_CLASSIFICATION	6.316531060470935E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9998811313896547	WITHOUT_CLASSIFICATION	1.1886861034524447E-4	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.6067438429549977	WITHOUT_CLASSIFICATION	0.3932561570450022	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9993002722809062	WITHOUT_CLASSIFICATION	6.997277190937353E-4	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.5900110602251512	DESIGN	0.40998893977484896	WITHOUT_CLASSIFICATION
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9997483563646176	WITHOUT_CLASSIFICATION	2.5164363538232874E-4	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9960678798903532	WITHOUT_CLASSIFICATION	0.00393212010964677	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9992520015888183	WITHOUT_CLASSIFICATION	7.479984111817293E-4	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9998439759777277	WITHOUT_CLASSIFICATION	1.5602402227229544E-4	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999101915222626	WITHOUT_CLASSIFICATION	8.980847773742201E-5	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9999547134313455	WITHOUT_CLASSIFICATION	4.528656865447016E-5	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9869984336771879	WITHOUT_CLASSIFICATION	0.013001566322812061	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999003061240689	WITHOUT_CLASSIFICATION	9.969387593108902E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.999003061240689	WITHOUT_CLASSIFICATION	9.969387593108902E-4	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9998975851897651	WITHOUT_CLASSIFICATION	1.0241481023497709E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9970283449653197	WITHOUT_CLASSIFICATION	0.002971655034680275	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9991342325464376	WITHOUT_CLASSIFICATION	8.657674535623069E-4	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.8834725829077701	WITHOUT_CLASSIFICATION	0.11652741709222998	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9996990504198082	WITHOUT_CLASSIFICATION	3.0094958019178324E-4	DESIGN
todo : what else to do here?	DESIGN	0.9935003890423126	WITHOUT_CLASSIFICATION	0.006499610957687356	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9695514288848465	WITHOUT_CLASSIFICATION	0.030448571115153526	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9894529083003715	DESIGN	0.01054709169962861	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7704365596817762	DESIGN	0.2295634403182238	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7704365596817762	DESIGN	0.2295634403182238	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9907596357179306	WITHOUT_CLASSIFICATION	0.009240364282069374	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999916559840316	WITHOUT_CLASSIFICATION	8.344015968350786E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9985741569340204	WITHOUT_CLASSIFICATION	0.0014258430659795276	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6268461839463262	DESIGN	0.3731538160536738	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6268461839463262	DESIGN	0.3731538160536738	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9217300784957102	DESIGN	0.07826992150428974	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9217300784957102	DESIGN	0.07826992150428974	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9911981358834544	DESIGN	0.008801864116545597	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9939470185987832	DESIGN	0.006052981401216788	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9939470185987832	DESIGN	0.006052981401216788	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.990129335095576	DESIGN	0.009870664904424103	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999916559840316	WITHOUT_CLASSIFICATION	8.344015968350786E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9985741569340204	WITHOUT_CLASSIFICATION	0.0014258430659795276	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9962723703468619	WITHOUT_CLASSIFICATION	0.0037276296531380784	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9300605654974942	WITHOUT_CLASSIFICATION	0.0699394345025059	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9909374192257152	DESIGN	0.009062580774284831	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9702685642369026	DESIGN	0.029731435763097464	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.586368291579811	WITHOUT_CLASSIFICATION	0.4136317084201889	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9995815636869125	WITHOUT_CLASSIFICATION	4.1843631308740984E-4	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.7317576162447378	DESIGN	0.2682423837552623	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9935003890423126	WITHOUT_CLASSIFICATION	0.006499610957687356	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9970268047668049	WITHOUT_CLASSIFICATION	0.0029731952331950957	DESIGN
todo : what else to do here?	DESIGN	0.9935003890423126	WITHOUT_CLASSIFICATION	0.006499610957687356	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.997589965532085	WITHOUT_CLASSIFICATION	0.0024100344679151018	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9974353782653171	WITHOUT_CLASSIFICATION	0.0025646217346829816	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9978974433789624	DESIGN	0.0021025566210375263	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.9695514288848465	WITHOUT_CLASSIFICATION	0.030448571115153526	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.9877171431609276	DESIGN	0.012282856839072286	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9099985963387351	WITHOUT_CLASSIFICATION	0.09000140366126493	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.7233778283551844	WITHOUT_CLASSIFICATION	0.2766221716448157	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.9443058636969559	WITHOUT_CLASSIFICATION	0.05569413630304398	DESIGN
todo : what is the implication of this?	DESIGN	0.9979343314863525	WITHOUT_CLASSIFICATION	0.002065668513647569	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9825630979842983	WITHOUT_CLASSIFICATION	0.017436902015701798	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9971508712034957	DESIGN	0.0028491287965042517	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9470029552662836	DESIGN	0.052997044733716414	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9994515077354437	WITHOUT_CLASSIFICATION	5.484922645563438E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.82746654310984	DESIGN	0.17253345689016003	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9876925487924373	WITHOUT_CLASSIFICATION	0.012307451207562752	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.988739836037889	DESIGN	0.011260163962111094	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.9362668268421451	WITHOUT_CLASSIFICATION	0.06373317315785491	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9199171279589047	DESIGN	0.08008287204109528	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.7335398276605042	DESIGN	0.2664601723394959	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9996474291244913	WITHOUT_CLASSIFICATION	3.5257087550862374E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.6522969134573727	DESIGN	0.3477030865426272	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.6522969134573727	DESIGN	0.3477030865426272	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.9427933675741306	WITHOUT_CLASSIFICATION	0.05720663242586955	DESIGN
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.9865429838219588	DESIGN	0.013457016178041225	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.7427113145021556	WITHOUT_CLASSIFICATION	0.2572886854978445	DESIGN
TODO possibly relax that	DESIGN	0.7427113145021556	WITHOUT_CLASSIFICATION	0.2572886854978445	DESIGN
TODO possibly relax that	DESIGN	0.7427113145021556	WITHOUT_CLASSIFICATION	0.2572886854978445	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.7335398276605042	DESIGN	0.2664601723394959	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9988247183572261	WITHOUT_CLASSIFICATION	0.0011752816427739654	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9940415782385691	WITHOUT_CLASSIFICATION	0.005958421761430877	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.987431744356782	WITHOUT_CLASSIFICATION	0.01256825564321803	DESIGN
just to help out during the load (ugly, i know)	DESIGN	0.9990572738307937	WITHOUT_CLASSIFICATION	9.427261692063137E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9531402195476643	WITHOUT_CLASSIFICATION	0.04685978045233579	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9074763353335891	WITHOUT_CLASSIFICATION	0.092523664666411	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.7704365596817762	DESIGN	0.2295634403182238	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7704365596817762	DESIGN	0.2295634403182238	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.7704365596817762	DESIGN	0.2295634403182238	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9965279122828932	DESIGN	0.003472087717106727	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9989156255691941	WITHOUT_CLASSIFICATION	0.0010843744308059943	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.999149166465666	WITHOUT_CLASSIFICATION	8.508335343339957E-4	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9925730655739128	WITHOUT_CLASSIFICATION	0.007426934426087234	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9998778688335844	WITHOUT_CLASSIFICATION	1.22131166415614E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9792962097848231	WITHOUT_CLASSIFICATION	0.020703790215176848	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9921504159160885	WITHOUT_CLASSIFICATION	0.007849584083911471	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.999904469350982	WITHOUT_CLASSIFICATION	9.553064901799857E-5	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.95851183081653	WITHOUT_CLASSIFICATION	0.04148816918346992	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9577567665970923	WITHOUT_CLASSIFICATION	0.04224323340290765	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9870496701858632	WITHOUT_CLASSIFICATION	0.012950329814136777	DESIGN
Does this dialect support check constraints?	DESIGN	0.9693738730512523	WITHOUT_CLASSIFICATION	0.030626126948747636	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9814953531553858	WITHOUT_CLASSIFICATION	0.018504646844614184	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9531093279719066	WITHOUT_CLASSIFICATION	0.046890672028093376	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9531093279719066	WITHOUT_CLASSIFICATION	0.046890672028093376	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.6102075803464879	WITHOUT_CLASSIFICATION	0.38979241965351197	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9997538301399308	WITHOUT_CLASSIFICATION	2.4616986006921617E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.6226685204474051	WITHOUT_CLASSIFICATION	0.37733147955259494	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9993965705428225	WITHOUT_CLASSIFICATION	6.034294571775351E-4	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9951565494571631	WITHOUT_CLASSIFICATION	0.004843450542836834	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.8724853217247887	DESIGN	0.12751467827521132	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9795424804891589	WITHOUT_CLASSIFICATION	0.020457519510841158	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9795424804891589	WITHOUT_CLASSIFICATION	0.020457519510841158	DESIGN
I suppose?	DESIGN	0.9977783692827228	WITHOUT_CLASSIFICATION	0.0022216307172773014	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.8343020547455923	DESIGN	0.16569794525440776	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9585307446506977	WITHOUT_CLASSIFICATION	0.041469255349302396	DESIGN
TODO:refactor + make this method private	DESIGN	0.9852367954424454	WITHOUT_CLASSIFICATION	0.014763204557554553	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9895021071203257	WITHOUT_CLASSIFICATION	0.010497892879674297	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9886863892547619	DESIGN	0.011313610745238045	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.8291716309239413	WITHOUT_CLASSIFICATION	0.1708283690760587	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.9997729038867266	WITHOUT_CLASSIFICATION	2.2709611327340613E-4	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.8074573629289531	DESIGN	0.19254263707104685	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.8074573629289531	DESIGN	0.19254263707104685	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9149742192107777	DESIGN	0.08502578078922232	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9392430355249953	DESIGN	0.06075696447500477	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9392430355249953	DESIGN	0.06075696447500477	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9707017172489506	DESIGN	0.029298282751049374	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9395563665689068	WITHOUT_CLASSIFICATION	0.060443633431093234	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.6649298231496343	DESIGN	0.3350701768503658	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.9817427762060764	WITHOUT_CLASSIFICATION	0.01825722379392357	DESIGN
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9782168789417037	WITHOUT_CLASSIFICATION	0.02178312105829635	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.999769912433251	WITHOUT_CLASSIFICATION	2.3008756674892277E-4	DESIGN
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.6462377496319844	WITHOUT_CLASSIFICATION	0.35376225036801545	DESIGN
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.790484081764533	WITHOUT_CLASSIFICATION	0.209515918235467	DESIGN
TODO : add this info to the translator and aggregate it here...	DESIGN	0.5162850964740379	WITHOUT_CLASSIFICATION	0.4837149035259621	DESIGN
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.997737686251505	DESIGN	0.002262313748494999	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9993965705428225	WITHOUT_CLASSIFICATION	6.034294571775351E-4	DESIGN
TODO: suck into event class	DESIGN	0.7701502760692884	DESIGN	0.22984972393071149	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9998159318748835	WITHOUT_CLASSIFICATION	1.8406812511644868E-4	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.9172118762403672	WITHOUT_CLASSIFICATION	0.08278812375963279	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9557825991737453	DESIGN	0.04421740082625472	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.6753663950402956	WITHOUT_CLASSIFICATION	0.3246336049597043	DESIGN
this class has no proxies (so do a shortcut)	DESIGN	0.9949846011041508	WITHOUT_CLASSIFICATION	0.005015398895849228	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.7441592436790057	WITHOUT_CLASSIFICATION	0.2558407563209943	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.90802503740347	DESIGN	0.09197496259653003	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9646980924245765	WITHOUT_CLASSIFICATION	0.03530190757542346	DESIGN
TODO: is this 100% correct?	DESIGN	0.9852506403757524	DESIGN	0.014749359624247662	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.9376028311213082	DESIGN	0.06239716887869185	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9956246009649053	DESIGN	0.0043753990350947	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9742496223824934	DESIGN	0.0257503776175067	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9857298724008146	DESIGN	0.014270127599185318	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9534004688121168	DESIGN	0.04659953118788328	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.8757390308047008	WITHOUT_CLASSIFICATION	0.12426096919529918	DESIGN
TODO: merge into one method!	DESIGN	0.9323508579031591	DESIGN	0.0676491420968409	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.8750446789804888	DESIGN	0.12495532101951118	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.987280820201738	DESIGN	0.012719179798262023	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9685728401355409	DESIGN	0.03142715986445915	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9982970035359395	WITHOUT_CLASSIFICATION	0.001702996464060465	DESIGN
TODO : better way?!?	DESIGN	0.5349765758622615	WITHOUT_CLASSIFICATION	0.4650234241377385	DESIGN
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9757644818987977	WITHOUT_CLASSIFICATION	0.0242355181012023	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9996281119839447	WITHOUT_CLASSIFICATION	3.7188801605530554E-4	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9948830101116376	DESIGN	0.0051169898883623955	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.997953489082352	DESIGN	0.0020465109176479347	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.7241836416106399	WITHOUT_CLASSIFICATION	0.2758163583893602	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9998843216388955	DESIGN	1.1567836110444717E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.8517802901376281	WITHOUT_CLASSIFICATION	0.14821970986237185	DESIGN
yuck!	DESIGN	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9997214277834846	WITHOUT_CLASSIFICATION	2.7857221651542293E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.566915565053294	WITHOUT_CLASSIFICATION	0.433084434946706	DESIGN
we do not know either type BLIND GUESS!	DESIGN	0.9918477457198922	WITHOUT_CLASSIFICATION	0.008152254280107794	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999998681883812	DESIGN	1.3181161876851978E-7	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9989151979360882	DESIGN	0.0010848020639117693	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.7724432320376705	DESIGN	0.22755676796232946	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7704365596817762	DESIGN	0.2295634403182238	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.5424657089768573	DESIGN	0.45753429102314264	WITHOUT_CLASSIFICATION
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.9173693355206318	DESIGN	0.08263066447936815	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9850750061784953	WITHOUT_CLASSIFICATION	0.014924993821504647	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.7265015119389168	WITHOUT_CLASSIFICATION	0.2734984880610833	DESIGN
TODO: is this a bit ugly?	DESIGN	0.9877245060459816	DESIGN	0.012275493954018342	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.9617929575226908	WITHOUT_CLASSIFICATION	0.03820704247730924	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9670488627559904	DESIGN	0.032951137244009505	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8787733112587742	DESIGN	0.12122668874122577	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.7785576863357737	DESIGN	0.22144231366422623	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.6058554504706394	DESIGN	0.39414454952936057	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9996329666138977	WITHOUT_CLASSIFICATION	3.670333861023836E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.7814647702642247	DESIGN	0.21853522973577535	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9202490633223173	DESIGN	0.07975093667768271	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9969868588063907	WITHOUT_CLASSIFICATION	0.0030131411936093425	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9790277072698435	WITHOUT_CLASSIFICATION	0.020972292730156508	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.7108220286319717	DESIGN	0.28917797136802814	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9917087734038602	WITHOUT_CLASSIFICATION	0.008291226596139803	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9505560038803466	WITHOUT_CLASSIFICATION	0.049443996119653444	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9995274581575451	DESIGN	4.7254184245490037E-4	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.997690085591674	DESIGN	0.002309914408326063	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5187424720213563	WITHOUT_CLASSIFICATION	0.4812575279786438	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9752226754829878	DESIGN	0.02477732451701213	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.887825863574465	WITHOUT_CLASSIFICATION	0.11217413642553489	DESIGN
TODO: what type?	DESIGN	0.8127904280245375	DESIGN	0.18720957197546262	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9011090436041828	WITHOUT_CLASSIFICATION	0.09889095639581719	DESIGN
short-circuit for performance...	DESIGN	0.999467815760045	WITHOUT_CLASSIFICATION	5.321842399550817E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9935072875614186	WITHOUT_CLASSIFICATION	0.006492712438581436	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.7464382788845018	DESIGN	0.25356172111549824	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.9878970315916885	WITHOUT_CLASSIFICATION	0.01210296840831139	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999958808014976	DESIGN	4.119198502439015E-6	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9997574470549458	DESIGN	2.4255294505418204E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9949413812974348	DESIGN	0.005058618702565126	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999994888136464	DESIGN	5.111863536511832E-7	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.8640538832680201	WITHOUT_CLASSIFICATION	0.13594611673197993	DESIGN
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9977467238940281	DESIGN	0.002253276105972002	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.7372592882566464	DESIGN	0.26274071174335345	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9979758389920655	WITHOUT_CLASSIFICATION	0.002024161007934357	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9758811312458783	DESIGN	0.02411886875412172	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.7174976224300738	WITHOUT_CLASSIFICATION	0.2825023775699262	DESIGN
TODO: inefficient	DESIGN	0.6902514173548585	WITHOUT_CLASSIFICATION	0.3097485826451416	DESIGN
why does this matter?	DESIGN	0.9899228964488012	WITHOUT_CLASSIFICATION	0.010077103551198795	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9993619878426403	DESIGN	6.380121573597142E-4	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9992150142652295	DESIGN	7.849857347704362E-4	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9908805192028273	DESIGN	0.009119480797172824	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.6404443621442489	DESIGN	0.35955563785575123	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9982328119046415	WITHOUT_CLASSIFICATION	0.0017671880953584495	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.5769397154592046	WITHOUT_CLASSIFICATION	0.4230602845407953	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.956576813111709	DESIGN	0.04342318688829094	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.7814871700355168	DESIGN	0.21851282996448326	WITHOUT_CLASSIFICATION
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9671624717194712	WITHOUT_CLASSIFICATION	0.03283752828052869	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999947825166277	DESIGN	5.217483372375519E-6	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9304111851490595	WITHOUT_CLASSIFICATION	0.06958881485094047	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9715003242251512	DESIGN	0.028499675774848843	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.7696629179646232	WITHOUT_CLASSIFICATION	0.2303370820353769	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9958701438261812	WITHOUT_CLASSIFICATION	0.004129856173818759	DESIGN
create an index on the key columns??	DESIGN	0.9999539234676345	WITHOUT_CLASSIFICATION	4.607653236568955E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.7913888770199057	DESIGN	0.20861112298009424	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999539234676345	WITHOUT_CLASSIFICATION	4.607653236568955E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9864487524749592	DESIGN	0.01355124752504082	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9989774505240474	WITHOUT_CLASSIFICATION	0.0010225494759525983	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9135532380762504	DESIGN	0.08644676192374952	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9997135538584002	WITHOUT_CLASSIFICATION	2.864461415998502E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.6409189718301902	WITHOUT_CLASSIFICATION	0.35908102816980986	DESIGN
create an index on the key columns??	DESIGN	0.9999539234676345	WITHOUT_CLASSIFICATION	4.607653236568955E-5	DESIGN
todo : remove	DESIGN	0.9994127840822657	WITHOUT_CLASSIFICATION	5.872159177342366E-4	DESIGN
todo : remove	DESIGN	0.9994127840822657	WITHOUT_CLASSIFICATION	5.872159177342366E-4	DESIGN
todo : remove	DESIGN	0.9994127840822657	WITHOUT_CLASSIFICATION	5.872159177342366E-4	DESIGN
todo : throw exception?	DESIGN	0.9997313328087175	WITHOUT_CLASSIFICATION	2.686671912824532E-4	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9967933108504764	WITHOUT_CLASSIFICATION	0.0032066891495236244	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.7891193072573944	DESIGN	0.21088069274260565	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9957051880537269	DESIGN	0.004294811946273151	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.976079979976838	DESIGN	0.02392002002316189	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9856507555555344	DESIGN	0.014349244444465585	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.6604287527022487	DESIGN	0.3395712472977513	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.6604287527022487	DESIGN	0.3395712472977513	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.9520334108773638	WITHOUT_CLASSIFICATION	0.04796658912263623	DESIGN
ie. the subquery! yuck!	DESIGN	0.9996623025588555	WITHOUT_CLASSIFICATION	3.376974411445306E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9239935514836308	DESIGN	0.07600644851636922	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8695312650796682	DESIGN	0.1304687349203319	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9863693628762084	DESIGN	0.01363063712379169	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.7579506937371444	DESIGN	0.24204930626285553	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.8695312650796682	DESIGN	0.1304687349203319	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.8355377805957971	WITHOUT_CLASSIFICATION	0.1644622194042028	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.998721370397676	WITHOUT_CLASSIFICATION	0.0012786296023240607	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.998721370397676	WITHOUT_CLASSIFICATION	0.0012786296023240607	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9708171184181045	DESIGN	0.029182881581895526	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.7465848010012175	DESIGN	0.25341519899878245	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9979278700864561	DESIGN	0.0020721299135438615	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9986682115550625	WITHOUT_CLASSIFICATION	0.001331788444937532	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.8929866479456938	DESIGN	0.10701335205430618	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9681503621706045	WITHOUT_CLASSIFICATION	0.03184963782939555	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.6472039068102627	DESIGN	0.35279609318973715	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9987773279434523	DESIGN	0.0012226720565476706	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.7636605743659439	DESIGN	0.236339425634056	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.924395739075239	DESIGN	0.075604260924761	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999243295112744	DESIGN	7.567048872561676E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9843740167506737	WITHOUT_CLASSIFICATION	0.015625983249326306	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9984898344246667	WITHOUT_CLASSIFICATION	0.0015101655753334221	DESIGN
is this ok?	DESIGN	0.9996063647182313	WITHOUT_CLASSIFICATION	3.9363528176870796E-4	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999615942520371	DESIGN	3.840574796280672E-5	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.993821986024724	DESIGN	0.006178013975275932	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9977671110555224	WITHOUT_CLASSIFICATION	0.0022328889444775337	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9999882311170958	DESIGN	1.176888290423334E-5	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.9338900752329289	DESIGN	0.06610992476707107	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.8752988092105736	DESIGN	0.12470119078942642	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.8017690128775224	WITHOUT_CLASSIFICATION	0.1982309871224776	DESIGN
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.8266194820280469	DESIGN	0.17338051797195309	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.999900092061831	WITHOUT_CLASSIFICATION	9.990793816896425E-5	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.985569911968241	DESIGN	0.014430088031758975	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9861914268990458	DESIGN	0.013808573100954262	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5875356277102489	DESIGN	0.41246437228975097	WITHOUT_CLASSIFICATION
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8098336460506708	DESIGN	0.1901663539493292	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6604287527022487	DESIGN	0.3395712472977513	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9807803538546801	DESIGN	0.01921964614531994	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9734001399474518	DESIGN	0.026599860052548285	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.8946104477284772	DESIGN	0.10538955227152275	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.7831201275176481	DESIGN	0.2168798724823519	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9887406189743037	WITHOUT_CLASSIFICATION	0.011259381025696402	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9719699806446201	DESIGN	0.028030019355379836	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9542223739477118	DESIGN	0.0457776260522882	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.6318524100755288	WITHOUT_CLASSIFICATION	0.36814758992447116	DESIGN
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.6562791468761374	DESIGN	0.3437208531238627	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.6327508389058861	DESIGN	0.3672491610941139	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9914121006777252	WITHOUT_CLASSIFICATION	0.00858789932227471	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9951188327341051	DESIGN	0.0048811672658949186	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.9716477467058231	WITHOUT_CLASSIFICATION	0.028352253294176944	DESIGN
TODO: this dependency is kinda Bad	DESIGN	0.9912880038662232	DESIGN	0.008711996133776849	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9995948221653636	WITHOUT_CLASSIFICATION	4.051778346364261E-4	DESIGN
short cut check...	DESIGN	0.9991307790008719	WITHOUT_CLASSIFICATION	8.692209991281132E-4	DESIGN
todo : move to StringHelper?	DESIGN	0.9973352786639575	WITHOUT_CLASSIFICATION	0.002664721336042454	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.8446606396003856	WITHOUT_CLASSIFICATION	0.15533936039961432	DESIGN
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9960715911691278	DESIGN	0.0039284088308721675	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9993474016292458	DESIGN	6.52598370754216E-4	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9902849689320918	DESIGN	0.009715031067908109	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9800231235053495	DESIGN	0.019976876494650495	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.9994172148849494	DESIGN	5.827851150505846E-4	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.6568064337413497	WITHOUT_CLASSIFICATION	0.3431935662586504	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9998325119724367	DESIGN	1.67488027563274E-4	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9996701265750817	WITHOUT_CLASSIFICATION	3.298734249183226E-4	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.8886725980220599	DESIGN	0.11132740197794014	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.8581577828497932	WITHOUT_CLASSIFICATION	0.14184221715020684	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9943667799493145	DESIGN	0.005633220050685396	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.999462630408806	DESIGN	5.373695911940384E-4	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9795941691454718	WITHOUT_CLASSIFICATION	0.020405830854528184	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999992065775875	DESIGN	7.934224124924852E-7	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9965229204712783	DESIGN	0.00347707952872165	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9993576277603956	WITHOUT_CLASSIFICATION	6.423722396043326E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.9050178080606497	DESIGN	0.09498219193935035	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.880493685964273	WITHOUT_CLASSIFICATION	0.11950631403572691	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9655610366565247	DESIGN	0.03443896334347521	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7913086533569106	WITHOUT_CLASSIFICATION	0.20869134664308947	DESIGN
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9145019379245459	DESIGN	0.08549806207545405	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9994127840822657	WITHOUT_CLASSIFICATION	5.872159177342366E-4	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.883243774458748	DESIGN	0.116756225541252	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9976649786389399	DESIGN	0.002335021361060217	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9958382037657094	DESIGN	0.004161796234290561	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9895584219157514	WITHOUT_CLASSIFICATION	0.010441578084248636	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9205657733934456	DESIGN	0.07943422660655439	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9973984219137177	DESIGN	0.0026015780862822056	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.9859772796677022	WITHOUT_CLASSIFICATION	0.014022720332297907	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9959037267947382	DESIGN	0.004096273205261812	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9817800209163852	WITHOUT_CLASSIFICATION	0.018219979083614835	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.904890624418663	WITHOUT_CLASSIFICATION	0.09510937558133706	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.8440152309609572	DESIGN	0.15598476903904274	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.8301047075998294	WITHOUT_CLASSIFICATION	0.1698952924001706	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9977461277410239	DESIGN	0.002253872258976185	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.8376853226883154	DESIGN	0.16231467731168472	WITHOUT_CLASSIFICATION
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999996008491773	DESIGN	3.9915082274258075E-7	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.644397719381943	DESIGN	0.35560228061805704	WITHOUT_CLASSIFICATION
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9996666378040269	DESIGN	3.3336219597320194E-4	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9997954506079165	WITHOUT_CLASSIFICATION	2.0454939208342253E-4	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.7420823771103248	WITHOUT_CLASSIFICATION	0.2579176228896753	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.8806629942225855	DESIGN	0.11933700577741456	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8630415905103682	DESIGN	0.1369584094896317	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999918725606	DESIGN	8.127439455650252E-9	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999985029965	DESIGN	1.4970034789704686E-9	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.8587302760038168	DESIGN	0.1412697239961832	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999997413194549	DESIGN	2.58680545012648E-7	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9792270507885322	DESIGN	0.020772949211467717	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999429121669045	WITHOUT_CLASSIFICATION	5.7087833095614166E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999835484135221	WITHOUT_CLASSIFICATION	1.6451586477820307E-5	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.999998329738773	DESIGN	1.6702612270149484E-6	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9916549223787844	DESIGN	0.008345077621215714	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999486369639964	DESIGN	5.13630360035877E-5	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.5042255226171832	DESIGN	0.4957744773828167	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9860756680313023	DESIGN	0.013924331968697728	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9712108582766451	DESIGN	0.02878914172335498	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.7636605743659439	DESIGN	0.236339425634056	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9101166171066947	DESIGN	0.08988338289330537	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9956686676157034	DESIGN	0.004331332384296561	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9843740167506737	WITHOUT_CLASSIFICATION	0.015625983249326306	DESIGN
TODO: make this a bit nicer	DESIGN	0.993821986024724	DESIGN	0.006178013975275932	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.9194975752789885	WITHOUT_CLASSIFICATION	0.08050242472101145	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6268461839463262	DESIGN	0.3731538160536738	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6268461839463262	DESIGN	0.3731538160536738	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.6268461839463262	DESIGN	0.3731538160536738	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9941639315337222	DESIGN	0.005836068466277822	WITHOUT_CLASSIFICATION
