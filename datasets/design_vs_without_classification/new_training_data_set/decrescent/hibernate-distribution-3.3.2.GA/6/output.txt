test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999493951539191	WITHOUT_CLASSIFICATION	5.060484608080888E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995475657691855	WITHOUT_CLASSIFICATION	4.5243423081454617E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995475657691855	WITHOUT_CLASSIFICATION	4.5243423081454617E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9994177988879722	WITHOUT_CLASSIFICATION	5.822011120277534E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999283026511382	WITHOUT_CLASSIFICATION	7.169734886175321E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999931708298713	WITHOUT_CLASSIFICATION	6.8291701287139105E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999931708298713	WITHOUT_CLASSIFICATION	6.8291701287139105E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999908956106406	WITHOUT_CLASSIFICATION	9.104389359377432E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998331756777118	WITHOUT_CLASSIFICATION	1.6682432228817687E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9998839800032316	WITHOUT_CLASSIFICATION	1.1601999676838962E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9991281133437837	WITHOUT_CLASSIFICATION	8.718866562163167E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999475059654952	WITHOUT_CLASSIFICATION	5.249403450477673E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999475059654952	WITHOUT_CLASSIFICATION	5.249403450477673E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993731429396732	WITHOUT_CLASSIFICATION	6.268570603268104E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997419610549284	WITHOUT_CLASSIFICATION	2.580389450715698E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.999650542467612	WITHOUT_CLASSIFICATION	3.49457532387982E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9991757327089136	WITHOUT_CLASSIFICATION	8.242672910863257E-4	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9996580781138277	WITHOUT_CLASSIFICATION	3.4192188617232223E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9994912873859222	WITHOUT_CLASSIFICATION	5.08712614077919E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9993620945187938	WITHOUT_CLASSIFICATION	6.379054812062473E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.999914136318365	WITHOUT_CLASSIFICATION	8.586368163496637E-5	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9994291372112984	WITHOUT_CLASSIFICATION	5.708627887016043E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9988531654583911	WITHOUT_CLASSIFICATION	0.0011468345416089654	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9994560016021773	WITHOUT_CLASSIFICATION	5.439983978227995E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9994560016021773	WITHOUT_CLASSIFICATION	5.439983978227995E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9981010549155399	WITHOUT_CLASSIFICATION	0.0018989450844600821	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9996054799938524	WITHOUT_CLASSIFICATION	3.9452000614755765E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998626378396563	WITHOUT_CLASSIFICATION	1.3736216034367739E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999561014274044	WITHOUT_CLASSIFICATION	4.389857259560228E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9155037206433522	DESIGN	0.08449627935664777	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999779925999472	WITHOUT_CLASSIFICATION	2.200740005269543E-5	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9990292313473921	WITHOUT_CLASSIFICATION	9.707686526078603E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9997641730779833	WITHOUT_CLASSIFICATION	2.3582692201677775E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.992423025245105	WITHOUT_CLASSIFICATION	0.0075769747548950685	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999044936580865	WITHOUT_CLASSIFICATION	9.550634191350906E-5	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999510124835163	WITHOUT_CLASSIFICATION	4.8987516483696106E-5	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9302420164651927	WITHOUT_CLASSIFICATION	0.06975798353480729	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.8503478852737639	WITHOUT_CLASSIFICATION	0.14965211472623619	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997155254284381	WITHOUT_CLASSIFICATION	2.844745715619615E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9991615884411426	WITHOUT_CLASSIFICATION	8.384115588573786E-4	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996676209930379	WITHOUT_CLASSIFICATION	3.323790069621667E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9994899284844663	WITHOUT_CLASSIFICATION	5.100715155337415E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997804372135816	WITHOUT_CLASSIFICATION	2.1956278641853E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.8940526923179725	WITHOUT_CLASSIFICATION	0.10594730768202759	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9995065321309585	WITHOUT_CLASSIFICATION	4.934678690413986E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9995065321309585	WITHOUT_CLASSIFICATION	4.934678690413986E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.9997804372135816	WITHOUT_CLASSIFICATION	2.1956278641853E-4	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9996893582659914	DESIGN	3.106417340086415E-4	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.996796037640088	WITHOUT_CLASSIFICATION	0.003203962359911976	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999551639531087	WITHOUT_CLASSIFICATION	4.4836046891403435E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999106157641457	WITHOUT_CLASSIFICATION	8.9384235854258E-5	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999943458380579	WITHOUT_CLASSIFICATION	5.6541619421215935E-6	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9999093061949347	WITHOUT_CLASSIFICATION	9.069380506533274E-5	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9928963488993168	WITHOUT_CLASSIFICATION	0.007103651100683274	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9998750629810448	WITHOUT_CLASSIFICATION	1.2493701895522317E-4	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9976874923164568	WITHOUT_CLASSIFICATION	0.002312507683543236	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.999606103102701	WITHOUT_CLASSIFICATION	3.938968972989402E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9995065321309585	WITHOUT_CLASSIFICATION	4.934678690413986E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999917839164493	WITHOUT_CLASSIFICATION	8.216083550768772E-6	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9983647318990079	WITHOUT_CLASSIFICATION	0.0016352681009921348	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9723701820013915	WITHOUT_CLASSIFICATION	0.02762981799860857	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9997604242932452	WITHOUT_CLASSIFICATION	2.3957570675490372E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9975762679174006	WITHOUT_CLASSIFICATION	0.0024237320825992834	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999835097051392	WITHOUT_CLASSIFICATION	1.6490294860845646E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998504054880366	WITHOUT_CLASSIFICATION	1.4959451196345244E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998932736718912	WITHOUT_CLASSIFICATION	1.0672632810873484E-4	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9996731631658894	WITHOUT_CLASSIFICATION	3.2683683411064557E-4	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999919462129062	WITHOUT_CLASSIFICATION	8.053787093716569E-6	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9987833187531011	WITHOUT_CLASSIFICATION	0.0012166812468988697	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.998738092950824	WITHOUT_CLASSIFICATION	0.0012619070491759828	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7015843050395448	WITHOUT_CLASSIFICATION	0.298415694960455	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9950963944043056	WITHOUT_CLASSIFICATION	0.004903605595694384	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9997175708592325	WITHOUT_CLASSIFICATION	2.8242914076744035E-4	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9924889112795255	WITHOUT_CLASSIFICATION	0.007511088720474442	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9994659869857909	WITHOUT_CLASSIFICATION	5.340130142090641E-4	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999995931370971	WITHOUT_CLASSIFICATION	4.0686290293089437E-7	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999748956722	WITHOUT_CLASSIFICATION	2.510432783818722E-8	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999772771765549	WITHOUT_CLASSIFICATION	2.2722823445177073E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9983360859053798	WITHOUT_CLASSIFICATION	0.0016639140946201796	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996705014127145	WITHOUT_CLASSIFICATION	3.294985872854377E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9984302329988327	WITHOUT_CLASSIFICATION	0.001569767001167223	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999997630380025	WITHOUT_CLASSIFICATION	2.3696199741012892E-7	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996705014127145	WITHOUT_CLASSIFICATION	3.294985872854377E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999966373086425	WITHOUT_CLASSIFICATION	3.3626913575165595E-6	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999518474005815	WITHOUT_CLASSIFICATION	4.815259941859403E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9997347373883314	WITHOUT_CLASSIFICATION	2.6526261166855223E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9993866688257241	WITHOUT_CLASSIFICATION	6.133311742759046E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9977686541283367	WITHOUT_CLASSIFICATION	0.002231345871663325	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9977686541283367	WITHOUT_CLASSIFICATION	0.002231345871663325	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9994647739764192	WITHOUT_CLASSIFICATION	5.352260235809126E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9998243697375445	WITHOUT_CLASSIFICATION	1.7563026245558667E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998491940668813	WITHOUT_CLASSIFICATION	1.5080593311873644E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9602522542612438	WITHOUT_CLASSIFICATION	0.03974774573875618	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9991174612156289	WITHOUT_CLASSIFICATION	8.825387843711101E-4	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998257023358995	WITHOUT_CLASSIFICATION	1.742976641004034E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998932931236189	WITHOUT_CLASSIFICATION	1.0670687638113718E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.999575977141397	WITHOUT_CLASSIFICATION	4.240228586029936E-4	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999743728552002	WITHOUT_CLASSIFICATION	2.5627144799826796E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999922072102065	WITHOUT_CLASSIFICATION	7.792789793466314E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999204641583197	WITHOUT_CLASSIFICATION	7.953584168024517E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999204641583197	WITHOUT_CLASSIFICATION	7.953584168024517E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999175691962972	WITHOUT_CLASSIFICATION	8.243080370283553E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9997675255516887	WITHOUT_CLASSIFICATION	2.3247444831125876E-4	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997865175602024	WITHOUT_CLASSIFICATION	2.1348243979754588E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999204641583197	WITHOUT_CLASSIFICATION	7.953584168024517E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999175691962972	WITHOUT_CLASSIFICATION	8.243080370283553E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999175691962972	WITHOUT_CLASSIFICATION	8.243080370283553E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998087974509395	WITHOUT_CLASSIFICATION	1.9120254906046868E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.8981679796793688	WITHOUT_CLASSIFICATION	0.10183202032063121	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999995577771806	WITHOUT_CLASSIFICATION	4.422228193266624E-7	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999905429750477	WITHOUT_CLASSIFICATION	9.457024952246457E-6	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9868534321628049	WITHOUT_CLASSIFICATION	0.013146567837195144	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9868534321628049	WITHOUT_CLASSIFICATION	0.013146567837195144	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.99989133505196	WITHOUT_CLASSIFICATION	1.0866494803996778E-4	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998754185434413	WITHOUT_CLASSIFICATION	1.2458145655866776E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.99964852044829	WITHOUT_CLASSIFICATION	3.5147955170995114E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995127746796075	WITHOUT_CLASSIFICATION	4.872253203924311E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9995127746796075	WITHOUT_CLASSIFICATION	4.872253203924311E-4	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9952233743670632	WITHOUT_CLASSIFICATION	0.004776625632936769	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999936319257033	WITHOUT_CLASSIFICATION	6.368074296681206E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.998049152733498	WITHOUT_CLASSIFICATION	0.0019508472665019847	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999962156545033	WITHOUT_CLASSIFICATION	3.784345496764007E-6	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9994487455890756	WITHOUT_CLASSIFICATION	5.512544109243318E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9998882027870055	WITHOUT_CLASSIFICATION	1.1179721299456445E-4	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9985523800697722	WITHOUT_CLASSIFICATION	0.0014476199302278301	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9997305176480205	WITHOUT_CLASSIFICATION	2.694823519795718E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.998049152733498	WITHOUT_CLASSIFICATION	0.0019508472665019847	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9994327840247973	WITHOUT_CLASSIFICATION	5.672159752027841E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9995578506199922	WITHOUT_CLASSIFICATION	4.421493800078033E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9995578506199922	WITHOUT_CLASSIFICATION	4.421493800078033E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9952441628625407	WITHOUT_CLASSIFICATION	0.004755837137459211	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9915150972645538	WITHOUT_CLASSIFICATION	0.008484902735446278	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999482455143628	WITHOUT_CLASSIFICATION	5.175448563712998E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9975031682371801	WITHOUT_CLASSIFICATION	0.00249683176281989	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9894621651258415	WITHOUT_CLASSIFICATION	0.010537834874158564	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.999477250507613	WITHOUT_CLASSIFICATION	5.227494923868432E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9995578243691348	WITHOUT_CLASSIFICATION	4.4217563086527327E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9983879487759588	WITHOUT_CLASSIFICATION	0.0016120512240412207	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9996107262128764	WITHOUT_CLASSIFICATION	3.8927378712366224E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999058144295611	WITHOUT_CLASSIFICATION	9.418557043895995E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999058144295611	WITHOUT_CLASSIFICATION	9.418557043895995E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9990384645732464	WITHOUT_CLASSIFICATION	9.615354267535438E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999493951539191	WITHOUT_CLASSIFICATION	5.060484608080888E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9990211586843991	WITHOUT_CLASSIFICATION	9.788413156009072E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995475657691855	WITHOUT_CLASSIFICATION	4.5243423081454617E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9990589611256071	WITHOUT_CLASSIFICATION	9.410388743928758E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9970497740201385	WITHOUT_CLASSIFICATION	0.002950225979861482	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998655543787774	WITHOUT_CLASSIFICATION	1.3444562122260303E-4	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9993050949353113	WITHOUT_CLASSIFICATION	6.94905064688639E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999816034631109	WITHOUT_CLASSIFICATION	1.8396536889105805E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.999582019221251	WITHOUT_CLASSIFICATION	4.179807787489411E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9994618806130778	WITHOUT_CLASSIFICATION	5.381193869221542E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9995648228180205	WITHOUT_CLASSIFICATION	4.35177181979533E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9993050949353113	WITHOUT_CLASSIFICATION	6.94905064688639E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9982287152725381	WITHOUT_CLASSIFICATION	0.0017712847274618509	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9993268381379365	WITHOUT_CLASSIFICATION	6.731618620634905E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998743723746191	WITHOUT_CLASSIFICATION	1.256276253809586E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9991503236488191	WITHOUT_CLASSIFICATION	8.496763511809324E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9926562777234621	WITHOUT_CLASSIFICATION	0.007343722276537893	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999931708298713	WITHOUT_CLASSIFICATION	6.8291701287139105E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9980460094271754	WITHOUT_CLASSIFICATION	0.0019539905728245617	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9996079481358984	WITHOUT_CLASSIFICATION	3.9205186410161023E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999497972458621	WITHOUT_CLASSIFICATION	5.020275413789105E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.999426895274182	WITHOUT_CLASSIFICATION	5.731047258179905E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9994510144108316	WITHOUT_CLASSIFICATION	5.489855891683799E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997840197771617	WITHOUT_CLASSIFICATION	2.1598022283838094E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997599643274911	WITHOUT_CLASSIFICATION	2.4003567250881238E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999861769635443	WITHOUT_CLASSIFICATION	1.3823036455573855E-5	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9967895073303057	WITHOUT_CLASSIFICATION	0.003210492669694229	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9990926806446153	WITHOUT_CLASSIFICATION	9.073193553846064E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995475657691855	WITHOUT_CLASSIFICATION	4.5243423081454617E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995475657691855	WITHOUT_CLASSIFICATION	4.5243423081454617E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9994618806130778	WITHOUT_CLASSIFICATION	5.381193869221542E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9994510144108316	WITHOUT_CLASSIFICATION	5.489855891683799E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999908956106406	WITHOUT_CLASSIFICATION	9.104389359377432E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999115345685311	WITHOUT_CLASSIFICATION	8.84654314688266E-5	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9993059391655102	WITHOUT_CLASSIFICATION	6.940608344897396E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.999380624051777	WITHOUT_CLASSIFICATION	6.193759482230308E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9991123952150252	WITHOUT_CLASSIFICATION	8.876047849748418E-4	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996401664472455	WITHOUT_CLASSIFICATION	3.598335527545248E-4	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9994548443272023	WITHOUT_CLASSIFICATION	5.451556727976086E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9985155589287218	WITHOUT_CLASSIFICATION	0.001484441071278246	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9962976774348388	WITHOUT_CLASSIFICATION	0.0037023225651612863	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9962976774348388	WITHOUT_CLASSIFICATION	0.0037023225651612863	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9989949169931888	WITHOUT_CLASSIFICATION	0.0010050830068112722	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998744135430088	WITHOUT_CLASSIFICATION	1.2558645699126304E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9987360376740035	WITHOUT_CLASSIFICATION	0.0012639623259964948	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.998934869600876	WITHOUT_CLASSIFICATION	0.001065130399124015	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9994057863669111	WITHOUT_CLASSIFICATION	5.94213633088898E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9999217678129826	WITHOUT_CLASSIFICATION	7.823218701745874E-5	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9993885909001428	WITHOUT_CLASSIFICATION	6.114090998572156E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9998331756777118	WITHOUT_CLASSIFICATION	1.6682432228817687E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9992063278639486	WITHOUT_CLASSIFICATION	7.936721360514499E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9992063278639486	WITHOUT_CLASSIFICATION	7.936721360514499E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9990361918187199	WITHOUT_CLASSIFICATION	9.63808181280166E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9994196883261771	WITHOUT_CLASSIFICATION	5.803116738228979E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9990361918187199	WITHOUT_CLASSIFICATION	9.63808181280166E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9997301315655839	WITHOUT_CLASSIFICATION	2.6986843441608154E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9997274019872004	WITHOUT_CLASSIFICATION	2.7259801279956857E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9995475657691855	WITHOUT_CLASSIFICATION	4.5243423081454617E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9994618806130778	WITHOUT_CLASSIFICATION	5.381193869221542E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9994510144108316	WITHOUT_CLASSIFICATION	5.489855891683799E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9994510144108316	WITHOUT_CLASSIFICATION	5.489855891683799E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9995531422223007	WITHOUT_CLASSIFICATION	4.4685777769926815E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.999068196828152	WITHOUT_CLASSIFICATION	9.31803171848039E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999569219861479	WITHOUT_CLASSIFICATION	4.307801385202527E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9991281133437837	WITHOUT_CLASSIFICATION	8.718866562163167E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9991281133437837	WITHOUT_CLASSIFICATION	8.718866562163167E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9987096854489522	WITHOUT_CLASSIFICATION	0.0012903145510477305	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9994192723467121	WITHOUT_CLASSIFICATION	5.807276532879038E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9997184776685818	WITHOUT_CLASSIFICATION	2.815223314181532E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9996190470120221	WITHOUT_CLASSIFICATION	3.8095298797801195E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9997741371232614	WITHOUT_CLASSIFICATION	2.2586287673879266E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9986686900537891	WITHOUT_CLASSIFICATION	0.0013313099462108652	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999475059654952	WITHOUT_CLASSIFICATION	5.249403450477673E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9995604423212958	WITHOUT_CLASSIFICATION	4.3955767870428004E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9995604423212958	WITHOUT_CLASSIFICATION	4.3955767870428004E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993731429396732	WITHOUT_CLASSIFICATION	6.268570603268104E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993731429396732	WITHOUT_CLASSIFICATION	6.268570603268104E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974906599838994	WITHOUT_CLASSIFICATION	0.002509340016100627	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974906599838994	WITHOUT_CLASSIFICATION	0.002509340016100627	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998317542461395	WITHOUT_CLASSIFICATION	0.0016824575386050133	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998317542461395	WITHOUT_CLASSIFICATION	0.0016824575386050133	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9991281133437837	WITHOUT_CLASSIFICATION	8.718866562163167E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999475059654952	WITHOUT_CLASSIFICATION	5.249403450477673E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9995604423212958	WITHOUT_CLASSIFICATION	4.3955767870428004E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9995604423212958	WITHOUT_CLASSIFICATION	4.3955767870428004E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9993731429396732	WITHOUT_CLASSIFICATION	6.268570603268104E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974906599838994	WITHOUT_CLASSIFICATION	0.002509340016100627	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974906599838994	WITHOUT_CLASSIFICATION	0.002509340016100627	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.998317542461395	WITHOUT_CLASSIFICATION	0.0016824575386050133	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9989923987793758	WITHOUT_CLASSIFICATION	0.0010076012206240781	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9993893105277908	WITHOUT_CLASSIFICATION	6.106894722091107E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9997048151504518	WITHOUT_CLASSIFICATION	2.951848495481513E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9996916208185374	WITHOUT_CLASSIFICATION	3.0837918146259117E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9998275109429647	WITHOUT_CLASSIFICATION	1.7248905703528116E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995293119603329	WITHOUT_CLASSIFICATION	4.706880396670603E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999867597351808	WITHOUT_CLASSIFICATION	1.3240264819246767E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9894586360726707	WITHOUT_CLASSIFICATION	0.010541363927329189	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999749994072662	WITHOUT_CLASSIFICATION	2.5000592733856207E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9982396018851711	WITHOUT_CLASSIFICATION	0.0017603981148288568	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999139206587079	WITHOUT_CLASSIFICATION	8.607934129221823E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998752268860263	WITHOUT_CLASSIFICATION	1.2477311397376083E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9994647739764192	WITHOUT_CLASSIFICATION	5.352260235809126E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995293119603329	WITHOUT_CLASSIFICATION	4.706880396670603E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995293119603329	WITHOUT_CLASSIFICATION	4.706880396670603E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995293119603329	WITHOUT_CLASSIFICATION	4.706880396670603E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.9894292778264725	WITHOUT_CLASSIFICATION	0.010570722173527548	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991472961948148	WITHOUT_CLASSIFICATION	8.527038051851837E-4	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991472961948148	WITHOUT_CLASSIFICATION	8.527038051851837E-4	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9984985938856822	WITHOUT_CLASSIFICATION	0.001501406114317762	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9992295061211487	WITHOUT_CLASSIFICATION	7.70493878851399E-4	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9987362963758185	WITHOUT_CLASSIFICATION	0.0012637036241814874	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9987666052085485	WITHOUT_CLASSIFICATION	0.0012333947914515472	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9987666052085485	WITHOUT_CLASSIFICATION	0.0012333947914515472	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9996580781138277	WITHOUT_CLASSIFICATION	3.4192188617232223E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999934931373425	WITHOUT_CLASSIFICATION	6.506862657498589E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999934931373425	WITHOUT_CLASSIFICATION	6.506862657498589E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.999006692763421	WITHOUT_CLASSIFICATION	9.933072365789432E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999251800421362	WITHOUT_CLASSIFICATION	7.48199578638021E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9988531654583911	WITHOUT_CLASSIFICATION	0.0011468345416089654	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9998946404763256	WITHOUT_CLASSIFICATION	1.053595236744701E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9994912873859222	WITHOUT_CLASSIFICATION	5.08712614077919E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5017570980104032	WITHOUT_CLASSIFICATION	0.49824290198959675	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9993485766843633	WITHOUT_CLASSIFICATION	6.514233156366515E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997722310462595	WITHOUT_CLASSIFICATION	2.2776895374060577E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9945049675855739	WITHOUT_CLASSIFICATION	0.00549503241442604	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9989752379481912	WITHOUT_CLASSIFICATION	0.0010247620518087496	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9986622456474034	WITHOUT_CLASSIFICATION	0.0013377543525966793	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.999561014274044	WITHOUT_CLASSIFICATION	4.389857259560228E-4	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999822915425562	WITHOUT_CLASSIFICATION	1.7708457443738197E-5	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9994304358814642	WITHOUT_CLASSIFICATION	5.69564118535808E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9995615915906017	WITHOUT_CLASSIFICATION	4.384084093982783E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9994542718122965	WITHOUT_CLASSIFICATION	5.457281877034671E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9994622018411905	WITHOUT_CLASSIFICATION	5.377981588094583E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996261781382574	WITHOUT_CLASSIFICATION	3.738218617426057E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9988531654583911	WITHOUT_CLASSIFICATION	0.0011468345416089654	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9996040980295945	WITHOUT_CLASSIFICATION	3.9590197040546886E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9997929464671558	WITHOUT_CLASSIFICATION	2.0705353284425444E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9994928049731173	WITHOUT_CLASSIFICATION	5.071950268827403E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9994912873859222	WITHOUT_CLASSIFICATION	5.08712614077919E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996261781382574	WITHOUT_CLASSIFICATION	3.738218617426057E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9996040980295945	WITHOUT_CLASSIFICATION	3.9590197040546886E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9994928049731173	WITHOUT_CLASSIFICATION	5.071950268827403E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9996415383836086	WITHOUT_CLASSIFICATION	3.584616163913394E-4	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9994556065621917	WITHOUT_CLASSIFICATION	5.443934378083838E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9996415383836086	WITHOUT_CLASSIFICATION	3.584616163913394E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9994560016021773	WITHOUT_CLASSIFICATION	5.439983978227995E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.999985204951119	WITHOUT_CLASSIFICATION	1.4795048881078694E-5	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9998922056857417	WITHOUT_CLASSIFICATION	1.0779431425829776E-4	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9974914771716801	WITHOUT_CLASSIFICATION	0.0025085228283199703	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9997447682715742	WITHOUT_CLASSIFICATION	2.5523172842574997E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999980729821897	WITHOUT_CLASSIFICATION	1.9270178102149667E-6	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999764635665717	WITHOUT_CLASSIFICATION	2.3536433428240526E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.997930232579915	WITHOUT_CLASSIFICATION	0.0020697674200850736	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999995053564802	WITHOUT_CLASSIFICATION	4.946435198895338E-7	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999764635665717	WITHOUT_CLASSIFICATION	2.3536433428240526E-5	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9996054799938524	WITHOUT_CLASSIFICATION	3.9452000614755765E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9998977443554762	WITHOUT_CLASSIFICATION	1.0225564452376182E-4	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9996261781382574	WITHOUT_CLASSIFICATION	3.738218617426057E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9988270939080083	WITHOUT_CLASSIFICATION	0.0011729060919916554	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9998430978733963	WITHOUT_CLASSIFICATION	1.569021266036217E-4	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9825329060694471	WITHOUT_CLASSIFICATION	0.017467093930552947	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9842523666230897	WITHOUT_CLASSIFICATION	0.01574763337691041	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9993070452687431	WITHOUT_CLASSIFICATION	6.929547312567755E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999717296880527	WITHOUT_CLASSIFICATION	2.8270311947325683E-5	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998252648572894	WITHOUT_CLASSIFICATION	1.7473514271058578E-4	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.999822508360916	WITHOUT_CLASSIFICATION	1.7749163908389304E-4	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.999530873017714	WITHOUT_CLASSIFICATION	4.6912698228591097E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9992934614993364	WITHOUT_CLASSIFICATION	7.065385006637035E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9908707566629732	WITHOUT_CLASSIFICATION	0.009129243337026713	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.999561014274044	WITHOUT_CLASSIFICATION	4.389857259560228E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9992545604225392	WITHOUT_CLASSIFICATION	7.454395774608362E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9990987075556651	WITHOUT_CLASSIFICATION	9.012924443349662E-4	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.999843521495105	WITHOUT_CLASSIFICATION	1.564785048950182E-4	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9996797382850605	WITHOUT_CLASSIFICATION	3.202617149394703E-4	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9996903957325266	WITHOUT_CLASSIFICATION	3.0960426747342584E-4	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9993053774448848	WITHOUT_CLASSIFICATION	6.946225551151996E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999975942603377	WITHOUT_CLASSIFICATION	2.405739662262266E-6	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999250108613411	WITHOUT_CLASSIFICATION	7.498913865883773E-5	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5914628800877987	DESIGN	0.40853711991220143	WITHOUT_CLASSIFICATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996123198321334	WITHOUT_CLASSIFICATION	3.87680167866587E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997686943879428	WITHOUT_CLASSIFICATION	2.3130561205723265E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9997686943879428	WITHOUT_CLASSIFICATION	2.3130561205723265E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997969480615759	WITHOUT_CLASSIFICATION	2.0305193842409122E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999217394714254	WITHOUT_CLASSIFICATION	7.826052857461797E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9957232763347015	WITHOUT_CLASSIFICATION	0.004276723665298515	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9992072312681951	WITHOUT_CLASSIFICATION	7.927687318047684E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9993966749221712	WITHOUT_CLASSIFICATION	6.033250778288019E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9973005616590341	WITHOUT_CLASSIFICATION	0.002699438340965851	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997351006086058	WITHOUT_CLASSIFICATION	2.6489939139411024E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999996147393773	WITHOUT_CLASSIFICATION	3.852606227728935E-7	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9989048346199981	WITHOUT_CLASSIFICATION	0.0010951653800018407	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9989906849372941	WITHOUT_CLASSIFICATION	0.0010093150627058652	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9994911552531902	WITHOUT_CLASSIFICATION	5.088447468098557E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999608061730473	WITHOUT_CLASSIFICATION	3.9193826952783346E-5	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9961273587055078	WITHOUT_CLASSIFICATION	0.003872641294492112	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9880856655418612	WITHOUT_CLASSIFICATION	0.011914334458138958	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9969338751899128	WITHOUT_CLASSIFICATION	0.0030661248100871353	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9989074953059063	WITHOUT_CLASSIFICATION	0.0010925046940937046	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999651826558664	WITHOUT_CLASSIFICATION	3.481734413353777E-5	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9995397051122866	WITHOUT_CLASSIFICATION	4.602948877132625E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9641121965847702	WITHOUT_CLASSIFICATION	0.03588780341522985	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9994808354206175	WITHOUT_CLASSIFICATION	5.191645793825042E-4	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9998352787912573	WITHOUT_CLASSIFICATION	1.6472120874268804E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9635361117026547	WITHOUT_CLASSIFICATION	0.03646388829734529	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9989074953059063	WITHOUT_CLASSIFICATION	0.0010925046940937046	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9985216136201511	WITHOUT_CLASSIFICATION	0.0014783863798488932	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998484758287313	WITHOUT_CLASSIFICATION	1.515241712686888E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998455860194352	WITHOUT_CLASSIFICATION	1.5441398056489022E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999773319152321	WITHOUT_CLASSIFICATION	2.2668084767942215E-5	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9982051858762414	WITHOUT_CLASSIFICATION	0.0017948141237585083	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9995397051122866	WITHOUT_CLASSIFICATION	4.602948877132625E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.987879100834687	WITHOUT_CLASSIFICATION	0.012120899165313094	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998387468626274	WITHOUT_CLASSIFICATION	1.612531373725498E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999513775607653	WITHOUT_CLASSIFICATION	4.862243923469532E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996312430221672	WITHOUT_CLASSIFICATION	3.6875697783281323E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9996312430221672	WITHOUT_CLASSIFICATION	3.6875697783281323E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9994899284844663	WITHOUT_CLASSIFICATION	5.100715155337415E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998016059040392	WITHOUT_CLASSIFICATION	1.9839409596066296E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.999428195992179	WITHOUT_CLASSIFICATION	5.71804007821082E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.999428195992179	WITHOUT_CLASSIFICATION	5.71804007821082E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5914628800877987	DESIGN	0.40853711991220143	WITHOUT_CLASSIFICATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9941035807759592	WITHOUT_CLASSIFICATION	0.005896419224040862	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995776509874952	WITHOUT_CLASSIFICATION	4.223490125047958E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996490235005524	WITHOUT_CLASSIFICATION	3.509764994475733E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9990384645732464	WITHOUT_CLASSIFICATION	9.615354267535438E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9995776509874952	WITHOUT_CLASSIFICATION	4.223490125047958E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9996490235005524	WITHOUT_CLASSIFICATION	3.509764994475733E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9975514598700982	WITHOUT_CLASSIFICATION	0.0024485401299017442	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9978127331752993	WITHOUT_CLASSIFICATION	0.0021872668247007966	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9962387828406898	WITHOUT_CLASSIFICATION	0.0037612171593102103	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9996376860294746	WITHOUT_CLASSIFICATION	3.623139705253432E-4	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9870189428938602	WITHOUT_CLASSIFICATION	0.012981057106139893	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9595827926453964	WITHOUT_CLASSIFICATION	0.04041720735460358	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.999646351295692	WITHOUT_CLASSIFICATION	3.536487043079124E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.999646351295692	WITHOUT_CLASSIFICATION	3.536487043079124E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.984111465457818	WITHOUT_CLASSIFICATION	0.015888534542182003	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999984430888189	WITHOUT_CLASSIFICATION	1.5569111811199675E-6	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.99930844594319	WITHOUT_CLASSIFICATION	6.915540568099489E-4	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9998073444365503	WITHOUT_CLASSIFICATION	1.926555634497136E-4	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9997470047085038	WITHOUT_CLASSIFICATION	2.529952914961939E-4	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9979579166330828	WITHOUT_CLASSIFICATION	0.0020420833669171704	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9990384645732464	WITHOUT_CLASSIFICATION	9.615354267535438E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9979579166330828	WITHOUT_CLASSIFICATION	0.0020420833669171704	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9988816085992825	WITHOUT_CLASSIFICATION	0.0011183914007173621	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9988816085992825	WITHOUT_CLASSIFICATION	0.0011183914007173621	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9998148329310178	WITHOUT_CLASSIFICATION	1.8516706898214638E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9975514598700982	WITHOUT_CLASSIFICATION	0.0024485401299017442	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9985851913470062	WITHOUT_CLASSIFICATION	0.00141480865299371	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.7237712623287514	DESIGN	0.27622873767124867	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5022496705261351	WITHOUT_CLASSIFICATION	0.4977503294738648	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999656452698453	WITHOUT_CLASSIFICATION	3.4354730154692993E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8844586401098212	WITHOUT_CLASSIFICATION	0.1155413598901788	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9975514598700982	WITHOUT_CLASSIFICATION	0.0024485401299017442	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.999656452698453	WITHOUT_CLASSIFICATION	3.4354730154692993E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.8844586401098212	WITHOUT_CLASSIFICATION	0.1155413598901788	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999529947752123	WITHOUT_CLASSIFICATION	4.700522478769378E-5	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998209035805666	WITHOUT_CLASSIFICATION	1.7909641943341902E-4	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999825579451364	WITHOUT_CLASSIFICATION	1.744205486367853E-5	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9975514598700982	WITHOUT_CLASSIFICATION	0.0024485401299017442	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9975514598700982	WITHOUT_CLASSIFICATION	0.0024485401299017442	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9990807725629429	WITHOUT_CLASSIFICATION	9.192274370569943E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9991104088426609	WITHOUT_CLASSIFICATION	8.895911573390527E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9998930325912369	WITHOUT_CLASSIFICATION	1.0696740876308816E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997155254284381	WITHOUT_CLASSIFICATION	2.844745715619615E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9999384979924607	WITHOUT_CLASSIFICATION	6.150200753929485E-5	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999816235086497	WITHOUT_CLASSIFICATION	1.8376491350217276E-5	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999904686081827	WITHOUT_CLASSIFICATION	9.531391817335549E-6	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999720768740221	WITHOUT_CLASSIFICATION	2.792312597790411E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9997205664909594	WITHOUT_CLASSIFICATION	2.794335090406054E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9991044543850084	WITHOUT_CLASSIFICATION	8.955456149915089E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9476325549271482	WITHOUT_CLASSIFICATION	0.05236744507285191	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9907672036579883	WITHOUT_CLASSIFICATION	0.009232796342011658	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9997741244888954	WITHOUT_CLASSIFICATION	2.258755111045799E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9967241981846451	WITHOUT_CLASSIFICATION	0.003275801815354926	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999479160084774	WITHOUT_CLASSIFICATION	5.208399152259421E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999887354534307	WITHOUT_CLASSIFICATION	1.126454656926015E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997155254284381	WITHOUT_CLASSIFICATION	2.844745715619615E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.995037943497275	WITHOUT_CLASSIFICATION	0.004962056502724922	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9998150046483556	WITHOUT_CLASSIFICATION	1.8499535164453123E-4	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998666115854571	WITHOUT_CLASSIFICATION	1.3338841454288306E-4	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999555542555068	WITHOUT_CLASSIFICATION	4.444574449332756E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9994047123511433	WITHOUT_CLASSIFICATION	5.952876488567013E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9994047123511433	WITHOUT_CLASSIFICATION	5.952876488567013E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997155254284381	WITHOUT_CLASSIFICATION	2.844745715619615E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9998129661682084	WITHOUT_CLASSIFICATION	1.8703383179171715E-4	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9901094593094091	WITHOUT_CLASSIFICATION	0.009890540690590878	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9880449092550717	WITHOUT_CLASSIFICATION	0.011955090744928242	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999153026491173	WITHOUT_CLASSIFICATION	8.469735088263673E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994637435093073	WITHOUT_CLASSIFICATION	5.362564906926497E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9999032562205228	WITHOUT_CLASSIFICATION	9.674377947728066E-5	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9992446149266546	WITHOUT_CLASSIFICATION	7.553850733454706E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9958307045565309	WITHOUT_CLASSIFICATION	0.004169295443469071	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999906319621277	WITHOUT_CLASSIFICATION	9.368037872396595E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999745948569142	WITHOUT_CLASSIFICATION	2.540514308582473E-5	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9587638070023526	WITHOUT_CLASSIFICATION	0.04123619299764728	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9996172729332073	WITHOUT_CLASSIFICATION	3.8272706679273304E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9997387656511084	WITHOUT_CLASSIFICATION	2.6123434889154906E-4	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999165822719402	WITHOUT_CLASSIFICATION	8.341772805965273E-5	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997529337771781	WITHOUT_CLASSIFICATION	2.4706622282187705E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9977090906771634	WITHOUT_CLASSIFICATION	0.002290909322836575	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999795881144959	WITHOUT_CLASSIFICATION	2.0411885504028655E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.985778204256846	WITHOUT_CLASSIFICATION	0.014221795743153905	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9986720510262108	WITHOUT_CLASSIFICATION	0.0013279489737892472	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999018703225127	WITHOUT_CLASSIFICATION	9.812967748742012E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9971284596231053	WITHOUT_CLASSIFICATION	0.0028715403768947117	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985550539370034	WITHOUT_CLASSIFICATION	0.001444946062996638	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9965835318174868	WITHOUT_CLASSIFICATION	0.003416468182513145	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994957074789207	WITHOUT_CLASSIFICATION	5.042925210793174E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997715301399968	WITHOUT_CLASSIFICATION	2.2846986000322575E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998927532956086	WITHOUT_CLASSIFICATION	0.0010724670439140281	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9084381960308414	WITHOUT_CLASSIFICATION	0.09156180396915853	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.6003965368280167	WITHOUT_CLASSIFICATION	0.39960346317198336	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994847718775961	WITHOUT_CLASSIFICATION	5.152281224039577E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917960237013765	WITHOUT_CLASSIFICATION	0.008203976298623418	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9932614634513103	WITHOUT_CLASSIFICATION	0.006738536548689755	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999663029427581	WITHOUT_CLASSIFICATION	3.3697057241906703E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987807643488215	WITHOUT_CLASSIFICATION	0.0012192356511786134	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9989581879376789	WITHOUT_CLASSIFICATION	0.001041812062321194	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999004401921442	WITHOUT_CLASSIFICATION	9.955980785577471E-5	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994571848207002	WITHOUT_CLASSIFICATION	5.428151792998519E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9978064168238894	WITHOUT_CLASSIFICATION	0.002193583176110709	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995128016306438	WITHOUT_CLASSIFICATION	4.871983693562807E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9812786927950868	WITHOUT_CLASSIFICATION	0.018721307204913107	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991278159876662	WITHOUT_CLASSIFICATION	8.721840123337449E-4	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9997286753422201	WITHOUT_CLASSIFICATION	2.713246577798585E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996272360720758	WITHOUT_CLASSIFICATION	3.72763927924284E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.9999998668524962	WITHOUT_CLASSIFICATION	1.3314750378528948E-7	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.99944823990529	WITHOUT_CLASSIFICATION	5.517600947100895E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9994257729325478	WITHOUT_CLASSIFICATION	5.742270674522083E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9991754332146451	WITHOUT_CLASSIFICATION	8.245667853550422E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9939838823254522	WITHOUT_CLASSIFICATION	0.006016117674547794	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9993166297215992	WITHOUT_CLASSIFICATION	6.833702784007217E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.99478270182365	WITHOUT_CLASSIFICATION	0.0052172981763499385	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9986709056240604	WITHOUT_CLASSIFICATION	0.0013290943759396352	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9990206293711482	WITHOUT_CLASSIFICATION	9.793706288517415E-4	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9980972406544508	WITHOUT_CLASSIFICATION	0.001902759345549248	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994382644130153	WITHOUT_CLASSIFICATION	5.617355869846738E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999037401135579	WITHOUT_CLASSIFICATION	9.625988644210309E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994608112752683	WITHOUT_CLASSIFICATION	5.391887247317331E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994905882640129	WITHOUT_CLASSIFICATION	5.094117359870626E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9988602556339619	WITHOUT_CLASSIFICATION	0.0011397443660382189	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.999983670698909	WITHOUT_CLASSIFICATION	1.632930109090433E-5	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9993932212999769	WITHOUT_CLASSIFICATION	6.06778700023125E-4	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999993967421752	WITHOUT_CLASSIFICATION	6.032578248948961E-7	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993274894932197	WITHOUT_CLASSIFICATION	6.725105067803991E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9993477011509204	WITHOUT_CLASSIFICATION	6.522988490794806E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9991935818611631	WITHOUT_CLASSIFICATION	8.064181388368433E-4	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9993469539518386	WITHOUT_CLASSIFICATION	6.530460481613166E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9616985228720591	WITHOUT_CLASSIFICATION	0.038301477127940846	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9336013009518519	WITHOUT_CLASSIFICATION	0.066398699048148	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9881291642755091	WITHOUT_CLASSIFICATION	0.011870835724490842	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9994192472760325	WITHOUT_CLASSIFICATION	5.807527239674893E-4	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9933475229854801	WITHOUT_CLASSIFICATION	0.0066524770145198284	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991278159876662	WITHOUT_CLASSIFICATION	8.721840123337449E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9927268389348947	WITHOUT_CLASSIFICATION	0.007273161065105248	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999693162164943	WITHOUT_CLASSIFICATION	3.068378350564752E-5	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.999552400320267	WITHOUT_CLASSIFICATION	4.4759967973290144E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995260677604734	WITHOUT_CLASSIFICATION	4.739322395265747E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9982424450744329	WITHOUT_CLASSIFICATION	0.0017575549255670917	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9998923493010006	WITHOUT_CLASSIFICATION	1.0765069899945456E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9988602556339619	WITHOUT_CLASSIFICATION	0.0011397443660382189	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995143179134888	WITHOUT_CLASSIFICATION	4.856820865112354E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9992380936592606	WITHOUT_CLASSIFICATION	7.619063407394179E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992522116841196	WITHOUT_CLASSIFICATION	7.477883158803161E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992922033027498	WITHOUT_CLASSIFICATION	7.077966972502136E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9981493274727594	WITHOUT_CLASSIFICATION	0.0018506725272405184	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9992726356941612	WITHOUT_CLASSIFICATION	7.273643058388492E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9905808111319669	WITHOUT_CLASSIFICATION	0.009419188868033099	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9994320048809725	WITHOUT_CLASSIFICATION	5.679951190275188E-4	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.999142622676189	WITHOUT_CLASSIFICATION	8.573773238110163E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9986150679655632	WITHOUT_CLASSIFICATION	0.0013849320344367672	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.999905232435589	WITHOUT_CLASSIFICATION	9.476756441100538E-5	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995304920993882	WITHOUT_CLASSIFICATION	4.695079006118218E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9980679798694119	WITHOUT_CLASSIFICATION	0.0019320201305881505	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9996458809224488	WITHOUT_CLASSIFICATION	3.541190775512144E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9995012643531066	WITHOUT_CLASSIFICATION	4.987356468934172E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9997227026102075	WITHOUT_CLASSIFICATION	2.7729738979246455E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997376469423789	WITHOUT_CLASSIFICATION	2.623530576211151E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9985772718158892	WITHOUT_CLASSIFICATION	0.001422728184110817	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9997274663582625	WITHOUT_CLASSIFICATION	2.725336417375579E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9897836173692218	WITHOUT_CLASSIFICATION	0.01021638263077818	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9993097994056797	WITHOUT_CLASSIFICATION	6.902005943203636E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9948315703808606	WITHOUT_CLASSIFICATION	0.005168429619139403	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.999929794964969	WITHOUT_CLASSIFICATION	7.020503503099778E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.6350140181197379	WITHOUT_CLASSIFICATION	0.36498598188026227	DESIGN
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9996940140773545	WITHOUT_CLASSIFICATION	3.0598592264548474E-4	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.999647091616981	WITHOUT_CLASSIFICATION	3.5290838301907395E-4	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9986224398385648	WITHOUT_CLASSIFICATION	0.0013775601614352912	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991278159876662	WITHOUT_CLASSIFICATION	8.721840123337449E-4	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9937588248145304	WITHOUT_CLASSIFICATION	0.006241175185469571	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999907592031149	WITHOUT_CLASSIFICATION	9.240796885099806E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9716621292924541	WITHOUT_CLASSIFICATION	0.028337870707545842	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.999496724163775	WITHOUT_CLASSIFICATION	5.032758362250112E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9995079328636952	WITHOUT_CLASSIFICATION	4.920671363048358E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9995188687942387	WITHOUT_CLASSIFICATION	4.8113120576134084E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991278159876662	WITHOUT_CLASSIFICATION	8.721840123337449E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995369811273656	WITHOUT_CLASSIFICATION	4.6301887263452534E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997376469423789	WITHOUT_CLASSIFICATION	2.623530576211151E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9982700358470522	WITHOUT_CLASSIFICATION	0.0017299641529477513	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9997227026102075	WITHOUT_CLASSIFICATION	2.7729738979246455E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999994654200972	WITHOUT_CLASSIFICATION	5.34579902796155E-6	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9957087255748561	WITHOUT_CLASSIFICATION	0.004291274425143827	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999695692876915	WITHOUT_CLASSIFICATION	3.0430712308541752E-5	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9992522116841196	WITHOUT_CLASSIFICATION	7.477883158803161E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9992922033027498	WITHOUT_CLASSIFICATION	7.077966972502136E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9981493274727594	WITHOUT_CLASSIFICATION	0.0018506725272405184	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999354144353793	WITHOUT_CLASSIFICATION	6.458556462074906E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9998298452846939	WITHOUT_CLASSIFICATION	1.7015471530622498E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999621647229185	WITHOUT_CLASSIFICATION	3.783527708142711E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9997227026102075	WITHOUT_CLASSIFICATION	2.7729738979246455E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999994654200972	WITHOUT_CLASSIFICATION	5.34579902796155E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.9991278159876662	WITHOUT_CLASSIFICATION	8.721840123337449E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9992726356941612	WITHOUT_CLASSIFICATION	7.273643058388492E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9905808111319669	WITHOUT_CLASSIFICATION	0.009419188868033099	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9994320048809725	WITHOUT_CLASSIFICATION	5.679951190275188E-4	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991202289181726	WITHOUT_CLASSIFICATION	8.797710818272723E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998927406099987	WITHOUT_CLASSIFICATION	1.0725939000127472E-4	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.999928692378134	WITHOUT_CLASSIFICATION	7.13076218660105E-5	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9974005668925008	WITHOUT_CLASSIFICATION	0.0025994331074992993	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.8592760162222247	DESIGN	0.14072398377777523	WITHOUT_CLASSIFICATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9987164731565348	WITHOUT_CLASSIFICATION	0.0012835268434651726	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9950472388623978	WITHOUT_CLASSIFICATION	0.004952761137602168	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9974891446697142	WITHOUT_CLASSIFICATION	0.00251085533028581	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9842470916620009	WITHOUT_CLASSIFICATION	0.015752908337999156	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.998927532956086	WITHOUT_CLASSIFICATION	0.0010724670439140281	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917960237013765	WITHOUT_CLASSIFICATION	0.008203976298623418	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9991598433724479	WITHOUT_CLASSIFICATION	8.401566275520789E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9977117512776124	WITHOUT_CLASSIFICATION	0.002288248722387603	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988448966453743	WITHOUT_CLASSIFICATION	0.001155103354625644	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9925492974271413	WITHOUT_CLASSIFICATION	0.007450702572858827	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9932614634513103	WITHOUT_CLASSIFICATION	0.006738536548689755	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987056719094761	WITHOUT_CLASSIFICATION	0.0012943280905239388	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9616985228720591	WITHOUT_CLASSIFICATION	0.038301477127940846	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.992338438381133	WITHOUT_CLASSIFICATION	0.007661561618867007	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9957701182904168	WITHOUT_CLASSIFICATION	0.004229881709583082	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999354754470946	WITHOUT_CLASSIFICATION	6.452455290531262E-5	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9983571392403753	WITHOUT_CLASSIFICATION	0.0016428607596246955	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9997617975786084	WITHOUT_CLASSIFICATION	2.3820242139173725E-4	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9996415383836086	WITHOUT_CLASSIFICATION	3.584616163913394E-4	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998615645928756	WITHOUT_CLASSIFICATION	1.3843540712442698E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9958307045565309	WITHOUT_CLASSIFICATION	0.004169295443469071	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9993351670625492	WITHOUT_CLASSIFICATION	6.648329374507045E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9746825273377004	WITHOUT_CLASSIFICATION	0.025317472662299553	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9995536487728873	WITHOUT_CLASSIFICATION	4.4635122711259506E-4	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9995590115454297	WITHOUT_CLASSIFICATION	4.4098845457028616E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999382992433985	WITHOUT_CLASSIFICATION	6.170075660149724E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9994403152660196	WITHOUT_CLASSIFICATION	5.596847339803674E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996437550898866	WITHOUT_CLASSIFICATION	3.5624491011349805E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999551047990893	WITHOUT_CLASSIFICATION	4.489520091069863E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999655614762646	WITHOUT_CLASSIFICATION	3.443852373533518E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9964251710123248	WITHOUT_CLASSIFICATION	0.003574828987675273	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998269928668283	WITHOUT_CLASSIFICATION	1.7300713317173853E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997208116082562	WITHOUT_CLASSIFICATION	2.7918839174382E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998485527363081	WITHOUT_CLASSIFICATION	1.5144726369189626E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997768028308742	WITHOUT_CLASSIFICATION	2.2319716912575792E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999132600581282	WITHOUT_CLASSIFICATION	8.673994187188079E-5	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9879754731175103	WITHOUT_CLASSIFICATION	0.012024526882489676	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9971603221051147	WITHOUT_CLASSIFICATION	0.002839677894885305	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997768028308742	WITHOUT_CLASSIFICATION	2.2319716912575792E-4	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9989022366251976	WITHOUT_CLASSIFICATION	0.0010977633748023548	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998831792476247	WITHOUT_CLASSIFICATION	1.1682075237526811E-4	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985111601271818	WITHOUT_CLASSIFICATION	0.0014888398728181553	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994505816927212	WITHOUT_CLASSIFICATION	5.494183072788367E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9593568499310037	WITHOUT_CLASSIFICATION	0.04064315006899641	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9983765199334423	WITHOUT_CLASSIFICATION	0.0016234800665575466	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999194741808021	WITHOUT_CLASSIFICATION	8.052581919791903E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999064003796043	WITHOUT_CLASSIFICATION	9.359962039569812E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999064003796043	WITHOUT_CLASSIFICATION	9.359962039569812E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9998751797156645	WITHOUT_CLASSIFICATION	1.2482028433543512E-4	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9993466285662729	WITHOUT_CLASSIFICATION	6.533714337271725E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9996724330358574	WITHOUT_CLASSIFICATION	3.27566964142636E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999730620574165	WITHOUT_CLASSIFICATION	2.6937942583491768E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9997155881040429	WITHOUT_CLASSIFICATION	2.8441189595708954E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9996484621516427	WITHOUT_CLASSIFICATION	3.515378483573873E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9992985670111972	WITHOUT_CLASSIFICATION	7.014329888026986E-4	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9997510741041647	WITHOUT_CLASSIFICATION	2.489258958353148E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.998244482635389	WITHOUT_CLASSIFICATION	0.001755517364611021	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999788612977966	WITHOUT_CLASSIFICATION	2.1138702203377625E-5	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999721902089247	WITHOUT_CLASSIFICATION	2.7809791075265523E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.999879418817945	WITHOUT_CLASSIFICATION	1.2058118205502203E-4	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9996811260435772	WITHOUT_CLASSIFICATION	3.1887395642289873E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9903923048812079	WITHOUT_CLASSIFICATION	0.009607695118792179	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9998910107494784	WITHOUT_CLASSIFICATION	1.089892505215121E-4	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.96558428327141	WITHOUT_CLASSIFICATION	0.034415716728590076	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9997890807435769	WITHOUT_CLASSIFICATION	2.109192564230787E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9991515586200541	WITHOUT_CLASSIFICATION	8.48441379945854E-4	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9978263416708076	WITHOUT_CLASSIFICATION	0.002173658329192311	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9994224401177623	WITHOUT_CLASSIFICATION	5.775598822377291E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9993154559377243	WITHOUT_CLASSIFICATION	6.845440622756879E-4	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9995328038277129	WITHOUT_CLASSIFICATION	4.67196172287157E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.999915293990709	WITHOUT_CLASSIFICATION	8.470600929096754E-5	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998667656378103	WITHOUT_CLASSIFICATION	1.3323436218970263E-4	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998320096101129	WITHOUT_CLASSIFICATION	1.6799038988713174E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9995994417989877	WITHOUT_CLASSIFICATION	4.005582010123144E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9996746551263178	WITHOUT_CLASSIFICATION	3.253448736821226E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9992940933359592	WITHOUT_CLASSIFICATION	7.059066640409036E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.9209516820284489	WITHOUT_CLASSIFICATION	0.07904831797155112	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9994231956981443	WITHOUT_CLASSIFICATION	5.768043018557971E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998624222521725	WITHOUT_CLASSIFICATION	1.375777478275369E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9995923176096452	WITHOUT_CLASSIFICATION	4.0768239035484196E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998767632908712	WITHOUT_CLASSIFICATION	1.232367091288131E-4	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.999148469977231	WITHOUT_CLASSIFICATION	8.515300227690981E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999869554966746	WITHOUT_CLASSIFICATION	1.3044503325271458E-5	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9996156302696858	WITHOUT_CLASSIFICATION	3.843697303141863E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9955566891521276	WITHOUT_CLASSIFICATION	0.004443310847872338	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9974082193025973	WITHOUT_CLASSIFICATION	0.002591780697402705	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.7290421579360408	WITHOUT_CLASSIFICATION	0.2709578420639591	DESIGN
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999885707163173	WITHOUT_CLASSIFICATION	1.1429283682626155E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9960490752816018	WITHOUT_CLASSIFICATION	0.003950924718398127	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999905232435589	WITHOUT_CLASSIFICATION	9.476756441100538E-5	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.999905232435589	WITHOUT_CLASSIFICATION	9.476756441100538E-5	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9980982164148716	WITHOUT_CLASSIFICATION	0.001901783585128473	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9890829257905484	WITHOUT_CLASSIFICATION	0.010917074209451746	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9983104442703811	WITHOUT_CLASSIFICATION	0.0016895557296189485	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999893047512372	WITHOUT_CLASSIFICATION	1.0695248762877141E-5	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998329504972903	WITHOUT_CLASSIFICATION	1.6704950270975182E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9969823021043712	WITHOUT_CLASSIFICATION	0.0030176978956288304	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.9995099462584677	WITHOUT_CLASSIFICATION	4.900537415322331E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9986385242721593	WITHOUT_CLASSIFICATION	0.001361475727840734	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999238154420075	WITHOUT_CLASSIFICATION	7.618455799244065E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9953486314481674	WITHOUT_CLASSIFICATION	0.0046513685518326025	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999893796728127	WITHOUT_CLASSIFICATION	1.0620327187306298E-4	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9375032107265195	WITHOUT_CLASSIFICATION	0.062496789273480374	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997969967193613	WITHOUT_CLASSIFICATION	2.0300328063876222E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994068138365186	WITHOUT_CLASSIFICATION	5.9318616348141E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9992706500256684	WITHOUT_CLASSIFICATION	7.293499743314876E-4	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.996719788138982	WITHOUT_CLASSIFICATION	0.003280211861018003	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.999492904240196	WITHOUT_CLASSIFICATION	5.070957598039686E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9992545678053603	WITHOUT_CLASSIFICATION	7.454321946397985E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.998320449432357	WITHOUT_CLASSIFICATION	0.0016795505676429965	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9993288707214155	WITHOUT_CLASSIFICATION	6.711292785845603E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9887572573610018	WITHOUT_CLASSIFICATION	0.01124274263899821	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999632998246147	WITHOUT_CLASSIFICATION	3.67001753851562E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9993288707214155	WITHOUT_CLASSIFICATION	6.711292785845603E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999346439872466	WITHOUT_CLASSIFICATION	6.5356012753424E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999644869769595	WITHOUT_CLASSIFICATION	3.551302304054819E-5	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9993934811691167	WITHOUT_CLASSIFICATION	6.065188308833244E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9964939723319025	WITHOUT_CLASSIFICATION	0.0035060276680974824	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9984066875642832	WITHOUT_CLASSIFICATION	0.001593312435716768	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.99996716168366	WITHOUT_CLASSIFICATION	3.283831634005208E-5	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9996323107847332	WITHOUT_CLASSIFICATION	3.6768921526676994E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.997566775780337	WITHOUT_CLASSIFICATION	0.0024332242196630134	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9968209951083754	WITHOUT_CLASSIFICATION	0.003179004891624493	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999023047317553	WITHOUT_CLASSIFICATION	9.76952682447261E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999357585809057	WITHOUT_CLASSIFICATION	6.424141909430125E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9920784011722236	WITHOUT_CLASSIFICATION	0.007921598827776474	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998199031019965	WITHOUT_CLASSIFICATION	1.8009689800346023E-4	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9961124174084777	WITHOUT_CLASSIFICATION	0.0038875825915222393	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8442684384636566	WITHOUT_CLASSIFICATION	0.15573156153634338	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9995565222843644	WITHOUT_CLASSIFICATION	4.4347771563563756E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9998014485965921	WITHOUT_CLASSIFICATION	1.9855140340771415E-4	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9996959872091971	WITHOUT_CLASSIFICATION	3.040127908030248E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9993866439542377	WITHOUT_CLASSIFICATION	6.133560457623396E-4	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.997947691824215	WITHOUT_CLASSIFICATION	0.0020523081757849028	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999014935601493	WITHOUT_CLASSIFICATION	9.850643985062907E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9986328678842495	WITHOUT_CLASSIFICATION	0.0013671321157504243	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9943572605242623	WITHOUT_CLASSIFICATION	0.005642739475737729	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9985302375945392	WITHOUT_CLASSIFICATION	0.0014697624054606975	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9998679852923722	WITHOUT_CLASSIFICATION	1.3201470762781646E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999939454071419	WITHOUT_CLASSIFICATION	6.054592858070072E-6	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9997613495681028	WITHOUT_CLASSIFICATION	2.3865043189723025E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9980397225309848	WITHOUT_CLASSIFICATION	0.001960277469015187	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9997742338887824	WITHOUT_CLASSIFICATION	2.2576611121751024E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9994403152660196	WITHOUT_CLASSIFICATION	5.596847339803674E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9996377177356152	WITHOUT_CLASSIFICATION	3.622822643847351E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999235580882949	WITHOUT_CLASSIFICATION	7.644191170512908E-5	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999047865760778	WITHOUT_CLASSIFICATION	9.521342392216052E-5	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999585306397725	WITHOUT_CLASSIFICATION	4.146936022752106E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999784925979213	WITHOUT_CLASSIFICATION	2.1507402078754683E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9997477927850832	WITHOUT_CLASSIFICATION	2.5220721491685065E-4	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9747661454057386	WITHOUT_CLASSIFICATION	0.025233854594261387	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9998985011140789	WITHOUT_CLASSIFICATION	1.0149888592124174E-4	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9927513006769609	WITHOUT_CLASSIFICATION	0.007248699323039116	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9692447971707363	WITHOUT_CLASSIFICATION	0.030755202829263688	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9999453537108403	WITHOUT_CLASSIFICATION	5.464628915963257E-5	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.7152443774674917	WITHOUT_CLASSIFICATION	0.2847556225325083	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9996867020355167	WITHOUT_CLASSIFICATION	3.132979644833666E-4	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999735749606082	WITHOUT_CLASSIFICATION	2.642503939165349E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999322077984083	WITHOUT_CLASSIFICATION	6.779220159173357E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9997447628159453	WITHOUT_CLASSIFICATION	2.5523718405479024E-4	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999683740212146	WITHOUT_CLASSIFICATION	3.1625978785464445E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9979226344039566	WITHOUT_CLASSIFICATION	0.002077365596043352	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9956384051188655	WITHOUT_CLASSIFICATION	0.004361594881134435	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999210235624764	WITHOUT_CLASSIFICATION	7.897643752367653E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9991506952829347	WITHOUT_CLASSIFICATION	8.493047170653046E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9985053555345182	WITHOUT_CLASSIFICATION	0.0014946444654817307	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999579636055629	WITHOUT_CLASSIFICATION	4.203639443709131E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9892800928438567	WITHOUT_CLASSIFICATION	0.010719907156143344	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9994070902976938	WITHOUT_CLASSIFICATION	5.929097023062554E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.9946737063364585	WITHOUT_CLASSIFICATION	0.005326293663541499	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9998502044335832	WITHOUT_CLASSIFICATION	1.4979556641687283E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9721849800518071	WITHOUT_CLASSIFICATION	0.027815019948192816	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9972569274102493	WITHOUT_CLASSIFICATION	0.002743072589750736	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995397318334335	WITHOUT_CLASSIFICATION	4.6026816656654523E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998067310915649	WITHOUT_CLASSIFICATION	1.9326890843513752E-4	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994345043321762	WITHOUT_CLASSIFICATION	5.654956678238041E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9506442409517761	WITHOUT_CLASSIFICATION	0.04935575904822392	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9997219304341618	WITHOUT_CLASSIFICATION	2.780695658382417E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999807585495926	WITHOUT_CLASSIFICATION	1.9241450407454027E-5	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9996752107623882	WITHOUT_CLASSIFICATION	3.2478923761177024E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9990417591815306	WITHOUT_CLASSIFICATION	9.582408184693661E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980060228306264	WITHOUT_CLASSIFICATION	0.001993977169373583	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9990417591815306	WITHOUT_CLASSIFICATION	9.582408184693661E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990813517328284	WITHOUT_CLASSIFICATION	9.186482671716448E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9985497106947764	WITHOUT_CLASSIFICATION	0.001450289305223553	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9979577917356737	WITHOUT_CLASSIFICATION	0.0020422082643262755	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9806695770185264	WITHOUT_CLASSIFICATION	0.019330422981473583	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9859798199823514	WITHOUT_CLASSIFICATION	0.014020180017648542	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9987309058221798	WITHOUT_CLASSIFICATION	0.0012690941778202651	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9993816209449705	WITHOUT_CLASSIFICATION	6.183790550294201E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9989788746264457	WITHOUT_CLASSIFICATION	0.001021125373554233	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999791103569785	WITHOUT_CLASSIFICATION	2.0889643021399408E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9978169597868255	WITHOUT_CLASSIFICATION	0.0021830402131745924	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.996777141199606	WITHOUT_CLASSIFICATION	0.003222858800393841	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.98714606298214	WITHOUT_CLASSIFICATION	0.01285393701786	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9996959268964319	WITHOUT_CLASSIFICATION	3.040731035680735E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9455386495375452	WITHOUT_CLASSIFICATION	0.05446135046245487	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9981441712203806	WITHOUT_CLASSIFICATION	0.0018558287796194433	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9950505269859561	WITHOUT_CLASSIFICATION	0.004949473014043929	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996574143026488	WITHOUT_CLASSIFICATION	3.4258569735114657E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996574143026488	WITHOUT_CLASSIFICATION	3.4258569735114657E-4	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9988723832135181	WITHOUT_CLASSIFICATION	0.0011276167864818813	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.998864535538506	WITHOUT_CLASSIFICATION	0.0011354644614940926	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9998737859432789	WITHOUT_CLASSIFICATION	1.2621405672100466E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9998850265081024	WITHOUT_CLASSIFICATION	1.1497349189768854E-4	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9988769626631951	WITHOUT_CLASSIFICATION	0.001123037336804793	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.979357291857318	WITHOUT_CLASSIFICATION	0.020642708142681966	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9842021351836885	WITHOUT_CLASSIFICATION	0.015797864816311437	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9992765078111341	WITHOUT_CLASSIFICATION	7.234921888659707E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999184307999235	WITHOUT_CLASSIFICATION	8.156920007657214E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997141160809241	WITHOUT_CLASSIFICATION	2.8588391907591093E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995250120611859	WITHOUT_CLASSIFICATION	4.74987938814E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999127325367163	WITHOUT_CLASSIFICATION	8.726746328359667E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9998683107885771	WITHOUT_CLASSIFICATION	1.3168921142279853E-4	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998931966305548	WITHOUT_CLASSIFICATION	1.0680336944518208E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999515157035073	WITHOUT_CLASSIFICATION	4.848429649277484E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.9883846907011344	WITHOUT_CLASSIFICATION	0.011615309298865608	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9991309656287922	WITHOUT_CLASSIFICATION	8.690343712077003E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9885457329856429	WITHOUT_CLASSIFICATION	0.01145426701435722	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9998460463458949	WITHOUT_CLASSIFICATION	1.5395365410501364E-4	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999440852818503	WITHOUT_CLASSIFICATION	5.5914718149814945E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9995332628485294	WITHOUT_CLASSIFICATION	4.667371514706234E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999844454056009	WITHOUT_CLASSIFICATION	1.5554594399086805E-5	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999996901431062	WITHOUT_CLASSIFICATION	3.0985689379666833E-6	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9351615248610298	WITHOUT_CLASSIFICATION	0.06483847513897027	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9998487667048757	WITHOUT_CLASSIFICATION	1.5123329512434222E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.998970067364483	WITHOUT_CLASSIFICATION	0.001029932635516979	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9993249737693322	WITHOUT_CLASSIFICATION	6.750262306678819E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9993120407596642	WITHOUT_CLASSIFICATION	6.879592403359091E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.9997895214166576	WITHOUT_CLASSIFICATION	2.1047858334244472E-4	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998093064631092	WITHOUT_CLASSIFICATION	1.9069353689085477E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998643574081406	WITHOUT_CLASSIFICATION	1.3564259185926545E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9995343661792556	WITHOUT_CLASSIFICATION	4.656338207443596E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998481990406926	WITHOUT_CLASSIFICATION	1.518009593074812E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9985895359727042	WITHOUT_CLASSIFICATION	0.0014104640272957227	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994893525244007	WITHOUT_CLASSIFICATION	5.106474755993145E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9990910896650119	WITHOUT_CLASSIFICATION	9.08910334988071E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999340234514654	WITHOUT_CLASSIFICATION	6.597654853456908E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9905279799352027	WITHOUT_CLASSIFICATION	0.009472020064797321	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9996775130172108	WITHOUT_CLASSIFICATION	3.22486982789301E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9998317787830866	WITHOUT_CLASSIFICATION	1.6822121691342434E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999434543664164	WITHOUT_CLASSIFICATION	5.654563358352643E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993937691056904	WITHOUT_CLASSIFICATION	6.062308943096787E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9991758809235108	WITHOUT_CLASSIFICATION	8.24119076489253E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.999892522791748	WITHOUT_CLASSIFICATION	1.0747720825199795E-4	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999762762490921	WITHOUT_CLASSIFICATION	2.372375090788063E-5	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.983817366146698	WITHOUT_CLASSIFICATION	0.016182633853301934	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9769673026016554	WITHOUT_CLASSIFICATION	0.02303269739834451	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999884926426843	WITHOUT_CLASSIFICATION	1.1507357315562648E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9995891364169699	WITHOUT_CLASSIFICATION	4.108635830300444E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9799178415339406	WITHOUT_CLASSIFICATION	0.02008215846605944	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993937691056904	WITHOUT_CLASSIFICATION	6.062308943096787E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9991889084979275	WITHOUT_CLASSIFICATION	8.110915020725154E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.997643558995543	WITHOUT_CLASSIFICATION	0.00235644100445701	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9995219964186857	WITHOUT_CLASSIFICATION	4.780035813143108E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9993335193290622	WITHOUT_CLASSIFICATION	6.6648067093772E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995369811273656	WITHOUT_CLASSIFICATION	4.6301887263452534E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9995369811273656	WITHOUT_CLASSIFICATION	4.6301887263452534E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999926088658494	WITHOUT_CLASSIFICATION	7.3911341505811195E-6	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9993628927500864	WITHOUT_CLASSIFICATION	6.371072499136527E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9997016744580433	WITHOUT_CLASSIFICATION	2.983255419568225E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.999891153798351	WITHOUT_CLASSIFICATION	1.0884620164890133E-4	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.999216674671514	WITHOUT_CLASSIFICATION	7.833253284860808E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.999706381648829	WITHOUT_CLASSIFICATION	2.936183511709605E-4	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9975139515991838	WITHOUT_CLASSIFICATION	0.0024860484008161574	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9924757592946736	WITHOUT_CLASSIFICATION	0.007524240705326426	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999779074509962	WITHOUT_CLASSIFICATION	2.209254900378446E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999089013597464	WITHOUT_CLASSIFICATION	9.109864025361784E-5	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9998817203151734	WITHOUT_CLASSIFICATION	1.182796848265851E-4	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9996472106647207	WITHOUT_CLASSIFICATION	3.527893352792395E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.999750033307096	WITHOUT_CLASSIFICATION	2.499666929039917E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9939316235747641	WITHOUT_CLASSIFICATION	0.006068376425235911	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.8227754866894695	DESIGN	0.17722451331053055	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9395458110939133	WITHOUT_CLASSIFICATION	0.060454188906086774	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9967413831467805	WITHOUT_CLASSIFICATION	0.003258616853219537	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9990229454892778	WITHOUT_CLASSIFICATION	9.770545107222433E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9980449587186286	WITHOUT_CLASSIFICATION	0.001955041281371297	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9828442567080805	WITHOUT_CLASSIFICATION	0.01715574329191947	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9994899284844663	WITHOUT_CLASSIFICATION	5.100715155337415E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9995839930598404	WITHOUT_CLASSIFICATION	4.160069401596446E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.9999954363538767	WITHOUT_CLASSIFICATION	4.563646123394974E-6	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9994924759364263	WITHOUT_CLASSIFICATION	5.075240635736605E-4	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9999121733209425	WITHOUT_CLASSIFICATION	8.782667905747291E-5	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996288396815399	WITHOUT_CLASSIFICATION	3.711603184600798E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.996404981929825	WITHOUT_CLASSIFICATION	0.003595018070175023	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9720382679798619	WITHOUT_CLASSIFICATION	0.02796173202013808	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.99999141834069	WITHOUT_CLASSIFICATION	8.581659309890682E-6	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999553100225862	WITHOUT_CLASSIFICATION	4.4689977413805537E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999161175723303	WITHOUT_CLASSIFICATION	8.388242766969972E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5199711458000473	DESIGN	0.48002885419995256	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.9425446754327977	WITHOUT_CLASSIFICATION	0.05745532456720226	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999143190428742	WITHOUT_CLASSIFICATION	8.568095712582892E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998741910139445	WITHOUT_CLASSIFICATION	1.2580898605549167E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.999553100225862	WITHOUT_CLASSIFICATION	4.4689977413805537E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9994335865777495	WITHOUT_CLASSIFICATION	5.664134222505672E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999143190428742	WITHOUT_CLASSIFICATION	8.568095712582892E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.997686941980412	WITHOUT_CLASSIFICATION	0.0023130580195880814	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9994436734867778	WITHOUT_CLASSIFICATION	5.563265132222453E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9995250120611859	WITHOUT_CLASSIFICATION	4.74987938814E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.999171688427663	WITHOUT_CLASSIFICATION	8.283115723369014E-4	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9996415383836086	WITHOUT_CLASSIFICATION	3.584616163913394E-4	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999745138201995	WITHOUT_CLASSIFICATION	2.5486179800448286E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.992088228097363	WITHOUT_CLASSIFICATION	0.007911771902637112	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999959159632852	WITHOUT_CLASSIFICATION	4.08403671489767E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9993270394186263	WITHOUT_CLASSIFICATION	6.729605813736035E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999715826693607	WITHOUT_CLASSIFICATION	2.8417330639239894E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998566112602199	WITHOUT_CLASSIFICATION	1.4338873978008573E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.999411131020677	WITHOUT_CLASSIFICATION	5.888689793229721E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994951856952656	WITHOUT_CLASSIFICATION	5.048143047343518E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.997430978896405	WITHOUT_CLASSIFICATION	0.002569021103594945	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9943875710688859	WITHOUT_CLASSIFICATION	0.0056124289311140765	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9943998737000873	WITHOUT_CLASSIFICATION	0.0056001262999126784	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9991125509986953	WITHOUT_CLASSIFICATION	8.87449001304662E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9985833639966405	WITHOUT_CLASSIFICATION	0.0014166360033595453	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9948050016652124	WITHOUT_CLASSIFICATION	0.005194998334787661	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9997875159106151	WITHOUT_CLASSIFICATION	2.1248408938480303E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9996022778317745	WITHOUT_CLASSIFICATION	3.9772216822552887E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9994805892723845	WITHOUT_CLASSIFICATION	5.194107276156221E-4	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9989787945643379	WITHOUT_CLASSIFICATION	0.0010212054356620592	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9994831079780567	WITHOUT_CLASSIFICATION	5.168920219433302E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9991129708136145	WITHOUT_CLASSIFICATION	8.870291863856128E-4	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9998508658471267	WITHOUT_CLASSIFICATION	1.4913415287325023E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9991075450858227	WITHOUT_CLASSIFICATION	8.924549141773217E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987805600325869	WITHOUT_CLASSIFICATION	0.0012194399674131102	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981502868328042	WITHOUT_CLASSIFICATION	0.0018497131671958243	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9952728721330415	WITHOUT_CLASSIFICATION	0.004727127866958503	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999616915852643	WITHOUT_CLASSIFICATION	3.830841473578995E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9960182770187133	WITHOUT_CLASSIFICATION	0.003981722981286749	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9993856112050971	WITHOUT_CLASSIFICATION	6.14388794902868E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9993856112050971	WITHOUT_CLASSIFICATION	6.14388794902868E-4	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9910524376400873	WITHOUT_CLASSIFICATION	0.008947562359912637	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9986091199039233	WITHOUT_CLASSIFICATION	0.001390880096076751	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999590339704176	WITHOUT_CLASSIFICATION	4.0966029582377496E-5	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999349810988082	WITHOUT_CLASSIFICATION	6.501890119177932E-5	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9972560354195934	WITHOUT_CLASSIFICATION	0.0027439645804066093	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9381764596097296	WITHOUT_CLASSIFICATION	0.061823540390270285	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9963445067038773	WITHOUT_CLASSIFICATION	0.003655493296122821	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.999956023356997	WITHOUT_CLASSIFICATION	4.397664300312158E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9994871272229835	WITHOUT_CLASSIFICATION	5.12872777016559E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9998435669009895	WITHOUT_CLASSIFICATION	1.5643309901053164E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9997647962031746	WITHOUT_CLASSIFICATION	2.3520379682545384E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.999976290780884	WITHOUT_CLASSIFICATION	2.3709219115951992E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9996042151211934	WITHOUT_CLASSIFICATION	3.9578487880659866E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9993856112050971	WITHOUT_CLASSIFICATION	6.14388794902868E-4	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9995862260695704	WITHOUT_CLASSIFICATION	4.1377393042957365E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9950810382936778	WITHOUT_CLASSIFICATION	0.004918961706322242	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.8873474258049358	WITHOUT_CLASSIFICATION	0.11265257419506423	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9977553272277382	WITHOUT_CLASSIFICATION	0.0022446727722618656	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998901108799026	WITHOUT_CLASSIFICATION	1.0988912009728016E-4	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.999464217348657	WITHOUT_CLASSIFICATION	5.357826513429525E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999128637754833	WITHOUT_CLASSIFICATION	8.713622451676198E-5	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9983309634483024	WITHOUT_CLASSIFICATION	0.0016690365516975358	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9989948610834406	WITHOUT_CLASSIFICATION	0.0010051389165594208	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9909291590556781	WITHOUT_CLASSIFICATION	0.00907084094432188	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9981964562101473	WITHOUT_CLASSIFICATION	0.0018035437898526407	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987805600325869	WITHOUT_CLASSIFICATION	0.0012194399674131102	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9993856112050971	WITHOUT_CLASSIFICATION	6.14388794902868E-4	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998144669179265	WITHOUT_CLASSIFICATION	1.8553308207348208E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.995475375517225	WITHOUT_CLASSIFICATION	0.004524624482774973	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9995809191093309	WITHOUT_CLASSIFICATION	4.190808906691448E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9981396886741146	WITHOUT_CLASSIFICATION	0.0018603113258853345	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9982892948138672	WITHOUT_CLASSIFICATION	0.0017107051861328037	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9990428780824935	WITHOUT_CLASSIFICATION	9.571219175064562E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988452662295586	WITHOUT_CLASSIFICATION	0.0011547337704414303	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999850652095047	WITHOUT_CLASSIFICATION	1.4934790495217973E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.999957284215333	WITHOUT_CLASSIFICATION	4.271578466687804E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9990001119977446	WITHOUT_CLASSIFICATION	9.998880022553476E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9995515634590125	WITHOUT_CLASSIFICATION	4.484365409874863E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997895214166576	WITHOUT_CLASSIFICATION	2.1047858334244472E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9982606857957952	WITHOUT_CLASSIFICATION	0.0017393142042047723	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9737425273921106	WITHOUT_CLASSIFICATION	0.026257472607889364	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990813517328284	WITHOUT_CLASSIFICATION	9.186482671716448E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9996301712037674	WITHOUT_CLASSIFICATION	3.6982879623256827E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9993995084475032	WITHOUT_CLASSIFICATION	6.004915524968434E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9987976754918505	WITHOUT_CLASSIFICATION	0.0012023245081494345	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9998593024686034	WITHOUT_CLASSIFICATION	1.4069753139652066E-4	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9991815130219147	WITHOUT_CLASSIFICATION	8.184869780853591E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9988946417027955	WITHOUT_CLASSIFICATION	0.0011053582972045365	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9988946417027955	WITHOUT_CLASSIFICATION	0.0011053582972045365	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999395407046934	WITHOUT_CLASSIFICATION	6.045929530668283E-5	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9991532853763591	WITHOUT_CLASSIFICATION	8.467146236409271E-4	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999341730732872	WITHOUT_CLASSIFICATION	6.582692671273638E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9957620666347964	WITHOUT_CLASSIFICATION	0.004237933365203538	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.999524914706312	WITHOUT_CLASSIFICATION	4.750852936879403E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999929694574955	WITHOUT_CLASSIFICATION	7.030542504503529E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9987947631695622	WITHOUT_CLASSIFICATION	0.0012052368304377968	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9990971964917927	WITHOUT_CLASSIFICATION	9.028035082072076E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9990971964917927	WITHOUT_CLASSIFICATION	9.028035082072076E-4	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998706116105	WITHOUT_CLASSIFICATION	1.293883894999453E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9996570077620065	WITHOUT_CLASSIFICATION	3.4299223799354086E-4	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9998462566500206	WITHOUT_CLASSIFICATION	1.5374334997947974E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994053637497614	WITHOUT_CLASSIFICATION	5.946362502385835E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994053637497614	WITHOUT_CLASSIFICATION	5.946362502385835E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9994053637497614	WITHOUT_CLASSIFICATION	5.946362502385835E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999691757362438	WITHOUT_CLASSIFICATION	3.082426375612061E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9995765231026633	WITHOUT_CLASSIFICATION	4.234768973367105E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999772862158187	WITHOUT_CLASSIFICATION	2.2713784181218226E-5	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9994933151145808	WITHOUT_CLASSIFICATION	5.06684885419212E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9984763060074368	WITHOUT_CLASSIFICATION	0.001523693992563345	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9993856112050971	WITHOUT_CLASSIFICATION	6.14388794902868E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9993856112050971	WITHOUT_CLASSIFICATION	6.14388794902868E-4	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9608080520128772	WITHOUT_CLASSIFICATION	0.039191947987122756	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999211472489901	WITHOUT_CLASSIFICATION	7.885275101002118E-5	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9625444089882156	WITHOUT_CLASSIFICATION	0.03745559101178451	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998676667920787	WITHOUT_CLASSIFICATION	1.3233320792120092E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9918583290694157	WITHOUT_CLASSIFICATION	0.008141670930584231	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9951979256557644	WITHOUT_CLASSIFICATION	0.0048020743442356096	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9792983462438467	WITHOUT_CLASSIFICATION	0.020701653756153265	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.992903395287604	WITHOUT_CLASSIFICATION	0.0070966047123961025	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9982905977796198	WITHOUT_CLASSIFICATION	0.001709402220380075	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9998762426535327	WITHOUT_CLASSIFICATION	1.2375734646730146E-4	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.9999682202098683	WITHOUT_CLASSIFICATION	3.177979013168095E-5	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9998388195499526	WITHOUT_CLASSIFICATION	1.6118045004742803E-4	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9995226497855305	WITHOUT_CLASSIFICATION	4.7735021446949184E-4	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9995226497855305	WITHOUT_CLASSIFICATION	4.7735021446949184E-4	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9995226497855305	WITHOUT_CLASSIFICATION	4.7735021446949184E-4	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9995226497855305	WITHOUT_CLASSIFICATION	4.7735021446949184E-4	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9995226497855305	WITHOUT_CLASSIFICATION	4.7735021446949184E-4	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9996886472920004	WITHOUT_CLASSIFICATION	3.1135270799967656E-4	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9996886472920004	WITHOUT_CLASSIFICATION	3.1135270799967656E-4	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9996886472920004	WITHOUT_CLASSIFICATION	3.1135270799967656E-4	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996886472920004	WITHOUT_CLASSIFICATION	3.1135270799967656E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9963995250673118	WITHOUT_CLASSIFICATION	0.0036004749326882745	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9988946417027955	WITHOUT_CLASSIFICATION	0.0011053582972045365	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9994728892136145	WITHOUT_CLASSIFICATION	5.271107863855574E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9996886472920004	WITHOUT_CLASSIFICATION	3.1135270799967656E-4	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999777577482588	WITHOUT_CLASSIFICATION	2.224225174124599E-5	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9989932762825523	WITHOUT_CLASSIFICATION	0.0010067237174477461	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.9998313088081306	WITHOUT_CLASSIFICATION	1.6869119186928278E-4	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9994200387680576	WITHOUT_CLASSIFICATION	5.799612319424116E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.9996594397709396	WITHOUT_CLASSIFICATION	3.405602290604191E-4	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9946503892979593	WITHOUT_CLASSIFICATION	0.005349610702040617	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999981087132935	WITHOUT_CLASSIFICATION	1.8912867064104587E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9979006400870456	WITHOUT_CLASSIFICATION	0.0020993599129542975	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999939237986595	WITHOUT_CLASSIFICATION	6.0762013404956885E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9999564958672137	WITHOUT_CLASSIFICATION	4.3504132786383996E-5	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999368542375332	WITHOUT_CLASSIFICATION	6.314576246688343E-5	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9997432852989248	WITHOUT_CLASSIFICATION	2.567147010752084E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999656827492246	WITHOUT_CLASSIFICATION	3.431725077540556E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9998868606300575	WITHOUT_CLASSIFICATION	1.1313936994254822E-4	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.8325664314547858	WITHOUT_CLASSIFICATION	0.16743356854521418	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9991045519241453	WITHOUT_CLASSIFICATION	8.954480758546701E-4	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999396464998936	WITHOUT_CLASSIFICATION	6.035350010636138E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9992864844286373	WITHOUT_CLASSIFICATION	7.13515571362699E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9992864844286373	WITHOUT_CLASSIFICATION	7.13515571362699E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9997368824396387	WITHOUT_CLASSIFICATION	2.631175603613327E-4	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9995902604161888	WITHOUT_CLASSIFICATION	4.097395838112808E-4	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9996002956869171	WITHOUT_CLASSIFICATION	3.9970431308294837E-4	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.998798389266649	WITHOUT_CLASSIFICATION	0.0012016107333510011	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9986700424203659	WITHOUT_CLASSIFICATION	0.001329957579634065	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9657938518998311	WITHOUT_CLASSIFICATION	0.03420614810016893	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9971822489800578	WITHOUT_CLASSIFICATION	0.0028177510199421055	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999851930454937	WITHOUT_CLASSIFICATION	1.4806954506328435E-5	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9995078304689923	WITHOUT_CLASSIFICATION	4.921695310076464E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9998305604081273	WITHOUT_CLASSIFICATION	1.694395918727369E-4	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9956462851868207	WITHOUT_CLASSIFICATION	0.004353714813179358	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997895214166576	WITHOUT_CLASSIFICATION	2.1047858334244472E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998495099288227	WITHOUT_CLASSIFICATION	1.5049007117718568E-4	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.9997531604034282	WITHOUT_CLASSIFICATION	2.468395965718492E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9994719209040955	WITHOUT_CLASSIFICATION	5.28079095904416E-4	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999606386329812	WITHOUT_CLASSIFICATION	3.936136701876527E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999982912510655	WITHOUT_CLASSIFICATION	1.7087489344707499E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999982912510655	WITHOUT_CLASSIFICATION	1.7087489344707499E-6	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9996775620903162	WITHOUT_CLASSIFICATION	3.2243790968372414E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9700930905078543	WITHOUT_CLASSIFICATION	0.029906909492145625	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9998405243714187	WITHOUT_CLASSIFICATION	1.5947562858130367E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9996527518799283	WITHOUT_CLASSIFICATION	3.472481200716418E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9996838068332446	WITHOUT_CLASSIFICATION	3.161931667554309E-4	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9965566852988479	WITHOUT_CLASSIFICATION	0.003443314701152019	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9982654722130678	WITHOUT_CLASSIFICATION	0.001734527786932091	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987596626012312	WITHOUT_CLASSIFICATION	0.0012403373987687897	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999873979785028	WITHOUT_CLASSIFICATION	1.2602021497210792E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9989686781048823	WITHOUT_CLASSIFICATION	0.0010313218951177139	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999547364175375	WITHOUT_CLASSIFICATION	4.526358246249423E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9987596626012312	WITHOUT_CLASSIFICATION	0.0012403373987687897	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.7619054744975668	WITHOUT_CLASSIFICATION	0.23809452550243304	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9987562540453442	WITHOUT_CLASSIFICATION	0.0012437459546558631	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9830197027289744	WITHOUT_CLASSIFICATION	0.016980297271025523	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9993839710153736	WITHOUT_CLASSIFICATION	6.160289846263771E-4	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9883822359746819	WITHOUT_CLASSIFICATION	0.01161776402531822	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9998199106284502	WITHOUT_CLASSIFICATION	1.800893715497857E-4	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9989052186782545	WITHOUT_CLASSIFICATION	0.001094781321745385	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999882402074359	WITHOUT_CLASSIFICATION	1.1759792564106542E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9990361372029454	WITHOUT_CLASSIFICATION	9.63862797054759E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9986901361078945	WITHOUT_CLASSIFICATION	0.001309863892105502	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996420914637556	WITHOUT_CLASSIFICATION	3.579085362443775E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.999706088618558	WITHOUT_CLASSIFICATION	2.939113814419451E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998559922625749	WITHOUT_CLASSIFICATION	1.44007737425112E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9970218064680628	WITHOUT_CLASSIFICATION	0.0029781935319371537	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9992891812516437	WITHOUT_CLASSIFICATION	7.108187483564177E-4	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.997304743489586	WITHOUT_CLASSIFICATION	0.0026952565104139906	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9942511582283005	WITHOUT_CLASSIFICATION	0.005748841771699479	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9995257376930379	WITHOUT_CLASSIFICATION	4.742623069621452E-4	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9995257376930379	WITHOUT_CLASSIFICATION	4.742623069621452E-4	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9989052186782545	WITHOUT_CLASSIFICATION	0.001094781321745385	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9972119867922105	WITHOUT_CLASSIFICATION	0.002788013207789598	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.5323464932712779	WITHOUT_CLASSIFICATION	0.467653506728722	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9963952448660195	WITHOUT_CLASSIFICATION	0.0036047551339804963	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9994582090452009	WITHOUT_CLASSIFICATION	5.417909547991798E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9993913610345365	WITHOUT_CLASSIFICATION	6.0863896546347E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9995578506199922	WITHOUT_CLASSIFICATION	4.421493800078033E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999974920126371	WITHOUT_CLASSIFICATION	2.507987362887563E-6	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999542760574142	WITHOUT_CLASSIFICATION	4.572394258592489E-5	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9983901126097328	WITHOUT_CLASSIFICATION	0.0016098873902671543	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.889153903772529	WITHOUT_CLASSIFICATION	0.110846096227471	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999680107159022	WITHOUT_CLASSIFICATION	3.198928409778652E-5	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9991935521212318	WITHOUT_CLASSIFICATION	8.064478787681551E-4	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9987772925444676	WITHOUT_CLASSIFICATION	0.0012227074555324136	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9865217014271599	WITHOUT_CLASSIFICATION	0.013478298572840127	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997121474668363	WITHOUT_CLASSIFICATION	2.8785253316362133E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.998928802325755	WITHOUT_CLASSIFICATION	0.0010711976742450845	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9998333996336616	WITHOUT_CLASSIFICATION	1.6660036633840106E-4	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999846516248211	WITHOUT_CLASSIFICATION	1.534837517888197E-5	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999135960547789	WITHOUT_CLASSIFICATION	8.640394522098787E-5	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9975782890181175	WITHOUT_CLASSIFICATION	0.0024217109818824153	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999508235837828	WITHOUT_CLASSIFICATION	4.917641621720403E-5	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9993926823568974	WITHOUT_CLASSIFICATION	6.073176431026313E-4	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9989900051131251	WITHOUT_CLASSIFICATION	0.0010099948868748892	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999969628594343	WITHOUT_CLASSIFICATION	3.0371405657428333E-6	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9983153109619937	WITHOUT_CLASSIFICATION	0.0016846890380064188	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9992230280412069	WITHOUT_CLASSIFICATION	7.769719587931496E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9996785085165845	WITHOUT_CLASSIFICATION	3.2149148341559345E-4	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999063405636024	WITHOUT_CLASSIFICATION	9.365943639755914E-5	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999445423708764	WITHOUT_CLASSIFICATION	5.545762912360644E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.9980074193806662	WITHOUT_CLASSIFICATION	0.001992580619333862	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997121474668363	WITHOUT_CLASSIFICATION	2.8785253316362133E-4	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9994307343126461	WITHOUT_CLASSIFICATION	5.692656873539209E-4	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999955597231172	WITHOUT_CLASSIFICATION	4.440276882881994E-6	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996177540978771	WITHOUT_CLASSIFICATION	3.8224590212294587E-4	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9989283147435137	WITHOUT_CLASSIFICATION	0.0010716852564862558	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9959724519962917	WITHOUT_CLASSIFICATION	0.0040275480037082435	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9997389746213851	WITHOUT_CLASSIFICATION	2.610253786149292E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9996828421003837	WITHOUT_CLASSIFICATION	3.1715789961631274E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9995962642218896	WITHOUT_CLASSIFICATION	4.0373577811030493E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9993053356717452	WITHOUT_CLASSIFICATION	6.946643282547927E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9994933736422542	WITHOUT_CLASSIFICATION	5.066263577458003E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9971223817655003	WITHOUT_CLASSIFICATION	0.002877618234499776	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.713318452829021	WITHOUT_CLASSIFICATION	0.28668154717097905	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.998514819593184	WITHOUT_CLASSIFICATION	0.0014851804068160184	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9983098961713092	WITHOUT_CLASSIFICATION	0.0016901038286908782	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.925453279866932	WITHOUT_CLASSIFICATION	0.07454672013306789	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999799550597815	WITHOUT_CLASSIFICATION	2.004494021837545E-5	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9998791949901363	WITHOUT_CLASSIFICATION	1.2080500986359401E-4	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9997644008384013	WITHOUT_CLASSIFICATION	2.3559916159865963E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.999472040359846	WITHOUT_CLASSIFICATION	5.27959640153988E-4	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9981154077058645	WITHOUT_CLASSIFICATION	0.0018845922941354849	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.999873979785028	WITHOUT_CLASSIFICATION	1.2602021497210792E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8600508731664727	WITHOUT_CLASSIFICATION	0.13994912683352728	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997121474668363	WITHOUT_CLASSIFICATION	2.8785253316362133E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.999052540258766	WITHOUT_CLASSIFICATION	9.474597412340191E-4	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998873480490229	WITHOUT_CLASSIFICATION	1.1265195097710776E-4	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9995763463405257	WITHOUT_CLASSIFICATION	4.236536594742536E-4	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9991595009523073	WITHOUT_CLASSIFICATION	8.404990476927149E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9969903774899762	WITHOUT_CLASSIFICATION	0.003009622510023917	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9963992305002882	WITHOUT_CLASSIFICATION	0.0036007694997116793	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9690601004579065	WITHOUT_CLASSIFICATION	0.030939899542093603	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9994842131623545	WITHOUT_CLASSIFICATION	5.157868376455087E-4	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9781437863291162	WITHOUT_CLASSIFICATION	0.02185621367088372	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9993912411695172	WITHOUT_CLASSIFICATION	6.087588304827495E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9987991168681314	WITHOUT_CLASSIFICATION	0.0012008831318686063	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.60789355340204	WITHOUT_CLASSIFICATION	0.3921064465979601	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9448469361411123	WITHOUT_CLASSIFICATION	0.055153063858887866	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9448469361411123	WITHOUT_CLASSIFICATION	0.055153063858887866	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.8970833499741395	WITHOUT_CLASSIFICATION	0.10291665002586045	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9962541604687378	WITHOUT_CLASSIFICATION	0.003745839531262129	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9925687319497595	WITHOUT_CLASSIFICATION	0.007431268050240561	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999649344785101	WITHOUT_CLASSIFICATION	3.50655214899835E-5	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999190908151514	WITHOUT_CLASSIFICATION	8.090918484863703E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997067186597821	WITHOUT_CLASSIFICATION	2.932813402178333E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.997831083066275	WITHOUT_CLASSIFICATION	0.0021689169337248994	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9983485944867113	WITHOUT_CLASSIFICATION	0.0016514055132885886	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999831895275425	WITHOUT_CLASSIFICATION	1.6810472457555215E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9986577372632106	WITHOUT_CLASSIFICATION	0.0013422627367894616	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9986577372632106	WITHOUT_CLASSIFICATION	0.0013422627367894616	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9991242427033497	WITHOUT_CLASSIFICATION	8.757572966504095E-4	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999484892309	WITHOUT_CLASSIFICATION	5.151076899407932E-8	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9995240220541006	WITHOUT_CLASSIFICATION	4.75977945899437E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994968142656014	WITHOUT_CLASSIFICATION	5.03185734398585E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9988349850179487	WITHOUT_CLASSIFICATION	0.0011650149820513767	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9227989105442618	WITHOUT_CLASSIFICATION	0.0772010894557383	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999900255134947	WITHOUT_CLASSIFICATION	9.974486505263118E-6	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.999886224181146	WITHOUT_CLASSIFICATION	1.137758188539764E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999504844263202	WITHOUT_CLASSIFICATION	4.951557367984934E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.998555439388587	WITHOUT_CLASSIFICATION	0.0014445606114129221	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9998854287103273	WITHOUT_CLASSIFICATION	1.1457128967280917E-4	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999689087873201	WITHOUT_CLASSIFICATION	3.109121267986439E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.99945861382631	WITHOUT_CLASSIFICATION	5.413861736900274E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999863467991085	WITHOUT_CLASSIFICATION	1.365320089156671E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996498969650454	WITHOUT_CLASSIFICATION	3.501030349545696E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999745948569142	WITHOUT_CLASSIFICATION	2.540514308582473E-5	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9919983283845915	WITHOUT_CLASSIFICATION	0.008001671615408594	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9970994996028375	WITHOUT_CLASSIFICATION	0.002900500397162455	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995673683879864	WITHOUT_CLASSIFICATION	4.326316120136509E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999749494302108	WITHOUT_CLASSIFICATION	2.5050569789187267E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9998150046483556	WITHOUT_CLASSIFICATION	1.8499535164453123E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9995440035907288	WITHOUT_CLASSIFICATION	4.5599640927119274E-4	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.8391129654064365	WITHOUT_CLASSIFICATION	0.16088703459356335	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9994899284844663	WITHOUT_CLASSIFICATION	5.100715155337415E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9979270778250207	WITHOUT_CLASSIFICATION	0.002072922174979348	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9981357312217175	WITHOUT_CLASSIFICATION	0.0018642687782824134	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997669726505429	WITHOUT_CLASSIFICATION	2.3302734945708522E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9997322427432027	WITHOUT_CLASSIFICATION	2.6775725679721997E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998400334704729	WITHOUT_CLASSIFICATION	1.5996652952698521E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997387114385634	WITHOUT_CLASSIFICATION	2.612885614365327E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999985673784756	WITHOUT_CLASSIFICATION	1.4326215244133034E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9991719551278143	WITHOUT_CLASSIFICATION	8.280448721855674E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999098363494325	WITHOUT_CLASSIFICATION	9.016365056745953E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9988448966453743	WITHOUT_CLASSIFICATION	0.001155103354625644	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5017570980104032	WITHOUT_CLASSIFICATION	0.49824290198959675	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999789305704248	WITHOUT_CLASSIFICATION	2.1069429575190727E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999997589919634	WITHOUT_CLASSIFICATION	2.4100803665482427E-7	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9993920601933928	WITHOUT_CLASSIFICATION	6.079398066072757E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9917703995505301	WITHOUT_CLASSIFICATION	0.008229600449469871	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999579610891759	WITHOUT_CLASSIFICATION	4.2038910823972945E-5	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9997231532255669	WITHOUT_CLASSIFICATION	2.76846774433064E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9994601939046717	WITHOUT_CLASSIFICATION	5.398060953282792E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999345584793872	WITHOUT_CLASSIFICATION	6.54415206128296E-5	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.8335709050543552	DESIGN	0.16642909494564476	WITHOUT_CLASSIFICATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9964890278680837	WITHOUT_CLASSIFICATION	0.0035109721319162555	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9844444555250075	WITHOUT_CLASSIFICATION	0.015555544474992501	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9998804343243741	WITHOUT_CLASSIFICATION	1.1956567562594882E-4	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9991596316487247	WITHOUT_CLASSIFICATION	8.403683512753624E-4	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999851609900566	WITHOUT_CLASSIFICATION	1.483900994339805E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9996978693681386	WITHOUT_CLASSIFICATION	3.021306318613297E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9847224102851974	WITHOUT_CLASSIFICATION	0.015277589714802668	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9983358866158785	WITHOUT_CLASSIFICATION	0.0016641133841215558	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9992644541764464	WITHOUT_CLASSIFICATION	7.355458235536674E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9995464365844807	WITHOUT_CLASSIFICATION	4.535634155192941E-4	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996527213615342	WITHOUT_CLASSIFICATION	3.472786384658417E-4	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999315878207586	WITHOUT_CLASSIFICATION	6.841217924126594E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999872940107208	WITHOUT_CLASSIFICATION	1.2705989279271679E-5	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9997645877803143	WITHOUT_CLASSIFICATION	2.35412219685676E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999872940107208	WITHOUT_CLASSIFICATION	1.2705989279271679E-5	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999971285225054	WITHOUT_CLASSIFICATION	2.8714774946369555E-6	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9996811501138214	WITHOUT_CLASSIFICATION	3.18849886178633E-4	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.999786776027671	WITHOUT_CLASSIFICATION	2.1322397232907374E-4	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997609860768182	WITHOUT_CLASSIFICATION	2.3901392318190042E-4	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9996648133519893	WITHOUT_CLASSIFICATION	3.3518664801072804E-4	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.999786776027671	WITHOUT_CLASSIFICATION	2.1322397232907374E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9993929981328633	WITHOUT_CLASSIFICATION	6.07001867136731E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9987212163224216	WITHOUT_CLASSIFICATION	0.0012787836775784176	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9998178256687291	WITHOUT_CLASSIFICATION	1.8217433127080664E-4	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9996636517358549	WITHOUT_CLASSIFICATION	3.3634826414506773E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999932186197839	WITHOUT_CLASSIFICATION	6.781380216202903E-6	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9993565194398891	WITHOUT_CLASSIFICATION	6.434805601109586E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999869858781936	WITHOUT_CLASSIFICATION	1.30141218063145E-5	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999706072212117	DESIGN	2.9392778788324803E-5	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999837322878551	WITHOUT_CLASSIFICATION	1.6267712144912128E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9998977791410645	WITHOUT_CLASSIFICATION	1.0222085893554783E-4	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999114834334982	WITHOUT_CLASSIFICATION	8.851656650179043E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999160946300333	WITHOUT_CLASSIFICATION	8.390536996672139E-5	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999283094399508	WITHOUT_CLASSIFICATION	7.169056004919463E-5	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.5997501520381473	WITHOUT_CLASSIFICATION	0.4002498479618527	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9993105430028635	WITHOUT_CLASSIFICATION	6.894569971365336E-4	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9991811122906411	WITHOUT_CLASSIFICATION	8.188877093589416E-4	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9083551870353441	WITHOUT_CLASSIFICATION	0.0916448129646558	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9966116491329757	WITHOUT_CLASSIFICATION	0.0033883508670242	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9985304137427709	WITHOUT_CLASSIFICATION	0.0014695862572291643	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999336499203039	WITHOUT_CLASSIFICATION	6.635007969618346E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9976310384539662	WITHOUT_CLASSIFICATION	0.00236896154603373	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9990373757746145	WITHOUT_CLASSIFICATION	9.626242253854675E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999202611046906	WITHOUT_CLASSIFICATION	7.973889530944007E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999240244132597	WITHOUT_CLASSIFICATION	7.597558674029915E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9994858500669277	WITHOUT_CLASSIFICATION	5.141499330723331E-4	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9980122902976257	WITHOUT_CLASSIFICATION	0.001987709702374236	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9994701259060235	WITHOUT_CLASSIFICATION	5.298740939765236E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9996730242997903	WITHOUT_CLASSIFICATION	3.26975700209642E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9998964503545642	WITHOUT_CLASSIFICATION	1.0354964543579413E-4	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9998208318483952	WITHOUT_CLASSIFICATION	1.791681516047723E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999202611046906	WITHOUT_CLASSIFICATION	7.973889530944007E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998443547712068	WITHOUT_CLASSIFICATION	1.5564522879315217E-4	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9996915083102906	WITHOUT_CLASSIFICATION	3.084916897092686E-4	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9971418496063884	WITHOUT_CLASSIFICATION	0.0028581503936114727	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9716621292924541	WITHOUT_CLASSIFICATION	0.028337870707545842	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999336499203039	WITHOUT_CLASSIFICATION	6.635007969618346E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9997933321679731	WITHOUT_CLASSIFICATION	2.0666783202690956E-4	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9993205238464391	WITHOUT_CLASSIFICATION	6.794761535609098E-4	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992821022983088	WITHOUT_CLASSIFICATION	7.178977016911706E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999334037625888	WITHOUT_CLASSIFICATION	6.65962374112907E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999653900769223	WITHOUT_CLASSIFICATION	3.46099230776334E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9949826131265245	WITHOUT_CLASSIFICATION	0.0050173868734755805	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8253140386294641	DESIGN	0.1746859613705359	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9980255919028255	WITHOUT_CLASSIFICATION	0.001974408097174496	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9988047290404409	WITHOUT_CLASSIFICATION	0.0011952709595590039	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.998287684415809	WITHOUT_CLASSIFICATION	0.001712315584191091	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.999336620061091	WITHOUT_CLASSIFICATION	6.633799389089701E-4	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.99980307809038	WITHOUT_CLASSIFICATION	1.9692190961985326E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997659941746192	WITHOUT_CLASSIFICATION	2.34005825380809E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9998924109481397	WITHOUT_CLASSIFICATION	1.0758905186027872E-4	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9997731291276191	WITHOUT_CLASSIFICATION	2.2687087238087883E-4	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9985699636218424	WITHOUT_CLASSIFICATION	0.0014300363781576488	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9936006516863011	WITHOUT_CLASSIFICATION	0.00639934831369903	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9985469432596337	WITHOUT_CLASSIFICATION	0.001453056740366351	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9984680824509746	WITHOUT_CLASSIFICATION	0.0015319175490254525	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9982970695175303	WITHOUT_CLASSIFICATION	0.0017029304824696812	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9979553248933667	WITHOUT_CLASSIFICATION	0.0020446751066332982	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9979553248933667	WITHOUT_CLASSIFICATION	0.0020446751066332982	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9999032562205228	WITHOUT_CLASSIFICATION	9.674377947728066E-5	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9979553248933667	WITHOUT_CLASSIFICATION	0.0020446751066332982	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9979553248933667	WITHOUT_CLASSIFICATION	0.0020446751066332982	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9993881357609546	WITHOUT_CLASSIFICATION	6.118642390453723E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999997043098654	WITHOUT_CLASSIFICATION	2.9569013463507315E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998509869877852	WITHOUT_CLASSIFICATION	1.4901301221475967E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9998509869877852	WITHOUT_CLASSIFICATION	1.4901301221475967E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9992446149266546	WITHOUT_CLASSIFICATION	7.553850733454706E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.996762631175545	WITHOUT_CLASSIFICATION	0.003237368824454902	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994342624379858	WITHOUT_CLASSIFICATION	5.65737562014191E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999767807024296	WITHOUT_CLASSIFICATION	2.3219297570398158E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.998722426423055	WITHOUT_CLASSIFICATION	0.0012775735769450438	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9989607474813846	WITHOUT_CLASSIFICATION	0.0010392525186154427	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9995999842592209	WITHOUT_CLASSIFICATION	4.00015740779027E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.999802913006003	WITHOUT_CLASSIFICATION	1.9708699399708228E-4	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.99659415468804	WITHOUT_CLASSIFICATION	0.003405845311960129	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999940476612379	WITHOUT_CLASSIFICATION	5.9523387621371E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9994177829521279	WITHOUT_CLASSIFICATION	5.822170478721266E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9983292806304075	WITHOUT_CLASSIFICATION	0.0016707193695925306	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999807585495926	WITHOUT_CLASSIFICATION	1.9241450407454027E-5	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9996114693138608	WITHOUT_CLASSIFICATION	3.8853068613919694E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9919691581951174	WITHOUT_CLASSIFICATION	0.008030841804882475	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9980766188303494	WITHOUT_CLASSIFICATION	0.001923381169650731	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9977001061835965	WITHOUT_CLASSIFICATION	0.0022998938164034196	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9996895861409644	WITHOUT_CLASSIFICATION	3.1041385903565484E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999807585495926	WITHOUT_CLASSIFICATION	1.9241450407454027E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9976310384539662	WITHOUT_CLASSIFICATION	0.00236896154603373	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.999890818159702	WITHOUT_CLASSIFICATION	1.0918184029806027E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999132600581282	WITHOUT_CLASSIFICATION	8.673994187188079E-5	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997768028308742	WITHOUT_CLASSIFICATION	2.2319716912575792E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999492362127097	WITHOUT_CLASSIFICATION	5.076378729031746E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999073210947041	WITHOUT_CLASSIFICATION	9.26789052958611E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9979808100666608	WITHOUT_CLASSIFICATION	0.0020191899333391996	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998047924839079	WITHOUT_CLASSIFICATION	1.952075160921246E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998740578327637	WITHOUT_CLASSIFICATION	1.259421672362602E-4	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999029943366362	WITHOUT_CLASSIFICATION	9.700566336379007E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999352149456483	WITHOUT_CLASSIFICATION	6.478505435160918E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9998704397321049	WITHOUT_CLASSIFICATION	1.2956026789513842E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9936013884437512	WITHOUT_CLASSIFICATION	0.0063986115562487825	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9997676404341997	WITHOUT_CLASSIFICATION	2.3235956580031723E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9995082444008431	WITHOUT_CLASSIFICATION	4.917555991568663E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999516087636504	WITHOUT_CLASSIFICATION	4.839123634961011E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9994065876296991	WITHOUT_CLASSIFICATION	5.934123703008135E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9998705638171227	WITHOUT_CLASSIFICATION	1.2943618287729363E-4	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9993087781895018	WITHOUT_CLASSIFICATION	6.912218104981882E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.999819261322277	WITHOUT_CLASSIFICATION	1.8073867772282835E-4	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9987039184129374	WITHOUT_CLASSIFICATION	0.001296081587062699	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9972583683145103	WITHOUT_CLASSIFICATION	0.0027416316854897314	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999938060105981	WITHOUT_CLASSIFICATION	6.193989401887281E-6	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998740578327637	WITHOUT_CLASSIFICATION	1.259421672362602E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9997780058342908	WITHOUT_CLASSIFICATION	2.2199416570909867E-4	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9990964644373794	WITHOUT_CLASSIFICATION	9.035355626206672E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9963096100391468	WITHOUT_CLASSIFICATION	0.003690389960853149	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9961602105507551	WITHOUT_CLASSIFICATION	0.003839789449244915	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9994370946650777	WITHOUT_CLASSIFICATION	5.629053349222309E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999434042663344	WITHOUT_CLASSIFICATION	5.659573366551845E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9975794142198924	WITHOUT_CLASSIFICATION	0.0024205857801076875	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999430087081113	WITHOUT_CLASSIFICATION	5.699129188865568E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9996241930979873	WITHOUT_CLASSIFICATION	3.758069020125934E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998886628848428	WITHOUT_CLASSIFICATION	1.113371151571777E-4	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9969055420249018	WITHOUT_CLASSIFICATION	0.003094457975098198	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9942067388032789	WITHOUT_CLASSIFICATION	0.005793261196720996	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999377424109985	WITHOUT_CLASSIFICATION	6.22575890014017E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9990384645732464	WITHOUT_CLASSIFICATION	9.615354267535438E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9995266136225132	WITHOUT_CLASSIFICATION	4.7338637748677666E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991819657084035	WITHOUT_CLASSIFICATION	8.180342915964522E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998886628848428	WITHOUT_CLASSIFICATION	1.113371151571777E-4	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9988222903984338	WITHOUT_CLASSIFICATION	0.001177709601566089	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9884883651594244	WITHOUT_CLASSIFICATION	0.01151163484057564	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9994224401177623	WITHOUT_CLASSIFICATION	5.775598822377291E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.999430042151055	WITHOUT_CLASSIFICATION	5.699578489449538E-4	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9996573391153852	WITHOUT_CLASSIFICATION	3.426608846147805E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9997329958012079	WITHOUT_CLASSIFICATION	2.6700419879217445E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9990384645732464	WITHOUT_CLASSIFICATION	9.615354267535438E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999682173361091	WITHOUT_CLASSIFICATION	3.1782663890902446E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999671966984935	WITHOUT_CLASSIFICATION	3.280330150643779E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999134324558223	WITHOUT_CLASSIFICATION	8.656754417765486E-5	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995663329939897	WITHOUT_CLASSIFICATION	4.3366700601025164E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995663329939897	WITHOUT_CLASSIFICATION	4.3366700601025164E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995663329939897	WITHOUT_CLASSIFICATION	4.3366700601025164E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9994826492923421	WITHOUT_CLASSIFICATION	5.173507076579085E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9994826492923421	WITHOUT_CLASSIFICATION	5.173507076579085E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9974548156696186	WITHOUT_CLASSIFICATION	0.002545184330381387	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9985672275361207	WITHOUT_CLASSIFICATION	0.0014327724638792181	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9920354428386626	WITHOUT_CLASSIFICATION	0.007964557161337255	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9976156739073366	WITHOUT_CLASSIFICATION	0.0023843260926633735	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9984123974766314	WITHOUT_CLASSIFICATION	0.0015876025233686642	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994439601614408	WITHOUT_CLASSIFICATION	5.560398385591619E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995528101547657	WITHOUT_CLASSIFICATION	4.471898452342891E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9995082690660743	WITHOUT_CLASSIFICATION	4.917309339257455E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998273881539138	WITHOUT_CLASSIFICATION	1.7261184608618652E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994439601614408	WITHOUT_CLASSIFICATION	5.560398385591619E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995528101547657	WITHOUT_CLASSIFICATION	4.471898452342891E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9996306360208539	WITHOUT_CLASSIFICATION	3.6936397914612333E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9994545664031493	WITHOUT_CLASSIFICATION	5.454335968507226E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9997284987934646	WITHOUT_CLASSIFICATION	2.7150120653547877E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9966507722380931	WITHOUT_CLASSIFICATION	0.0033492277619070494	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998001293837316	WITHOUT_CLASSIFICATION	1.998706162683934E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9331088804728097	WITHOUT_CLASSIFICATION	0.06689111952719021	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9994721790414967	WITHOUT_CLASSIFICATION	5.278209585033303E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9992532419034587	WITHOUT_CLASSIFICATION	7.467580965413832E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8616202300671189	WITHOUT_CLASSIFICATION	0.13837976993288117	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.981942554785035	WITHOUT_CLASSIFICATION	0.018057445214965075	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9991116193378553	WITHOUT_CLASSIFICATION	8.883806621448176E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9988006809468016	WITHOUT_CLASSIFICATION	0.0011993190531984158	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9986608611479438	WITHOUT_CLASSIFICATION	0.0013391388520562113	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9995168682606673	WITHOUT_CLASSIFICATION	4.8313173933259805E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994951856952656	WITHOUT_CLASSIFICATION	5.048143047343518E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9990437145088572	WITHOUT_CLASSIFICATION	9.562854911428228E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9876686805409917	WITHOUT_CLASSIFICATION	0.01233131945900832	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9994646473075671	WITHOUT_CLASSIFICATION	5.353526924328057E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7904794197133056	WITHOUT_CLASSIFICATION	0.20952058028669449	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9996736927521102	WITHOUT_CLASSIFICATION	3.263072478899183E-4	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.994475068332288	WITHOUT_CLASSIFICATION	0.005524931667711876	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999299597885762	WITHOUT_CLASSIFICATION	7.004021142370344E-5	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9957776177242628	WITHOUT_CLASSIFICATION	0.004222382275737266	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994277906274771	WITHOUT_CLASSIFICATION	5.722093725228524E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994754944983415	WITHOUT_CLASSIFICATION	5.245055016585127E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.53909602580597	WITHOUT_CLASSIFICATION	0.46090397419403006	DESIGN
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996547135178497	WITHOUT_CLASSIFICATION	3.452864821502046E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99989982441061	WITHOUT_CLASSIFICATION	1.0017558938993698E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999893796728127	WITHOUT_CLASSIFICATION	1.0620327187306298E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.999893796728127	WITHOUT_CLASSIFICATION	1.0620327187306298E-4	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997886150502929	WITHOUT_CLASSIFICATION	2.113849497071164E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999974467538985	WITHOUT_CLASSIFICATION	2.5532461015872854E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.999765640552045	WITHOUT_CLASSIFICATION	2.3435944795512334E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997895214166576	WITHOUT_CLASSIFICATION	2.1047858334244472E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9981637442519735	WITHOUT_CLASSIFICATION	0.0018362557480265727	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999673512309887	WITHOUT_CLASSIFICATION	3.2648769011236075E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9994240408621982	WITHOUT_CLASSIFICATION	5.759591378018877E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9998192054841039	WITHOUT_CLASSIFICATION	1.8079451589620815E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9992545678053603	WITHOUT_CLASSIFICATION	7.454321946397985E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997318738077406	WITHOUT_CLASSIFICATION	2.6812619225937366E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997178150786329	WITHOUT_CLASSIFICATION	2.821849213670897E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996722465570165	WITHOUT_CLASSIFICATION	3.2775344298355876E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9854464241205213	WITHOUT_CLASSIFICATION	0.01455357587947857	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9939010724340818	WITHOUT_CLASSIFICATION	0.006098927565918289	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9766424897976089	WITHOUT_CLASSIFICATION	0.02335751020239107	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999976163253884	WITHOUT_CLASSIFICATION	2.3836746116494473E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.998085930335828	WITHOUT_CLASSIFICATION	0.0019140696641718915	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9972595575785036	WITHOUT_CLASSIFICATION	0.0027404424214964597	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9972949957556401	WITHOUT_CLASSIFICATION	0.002705004244359861	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9731626648050442	WITHOUT_CLASSIFICATION	0.026837335194955868	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9766424897976089	WITHOUT_CLASSIFICATION	0.02335751020239107	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9766424897976089	WITHOUT_CLASSIFICATION	0.02335751020239107	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9920345003505621	WITHOUT_CLASSIFICATION	0.007965499649437985	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9995700827579083	WITHOUT_CLASSIFICATION	4.2991724209175494E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9925800865181319	WITHOUT_CLASSIFICATION	0.007419913481868117	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9980943436015425	WITHOUT_CLASSIFICATION	0.0019056563984574677	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999656827492246	WITHOUT_CLASSIFICATION	3.431725077540556E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9876686805409917	WITHOUT_CLASSIFICATION	0.01233131945900832	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9977703915622852	WITHOUT_CLASSIFICATION	0.0022296084377148124	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.999461923021801	WITHOUT_CLASSIFICATION	5.380769781989339E-4	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9970332036563431	WITHOUT_CLASSIFICATION	0.0029667963436569474	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994995456959889	WITHOUT_CLASSIFICATION	0.005004543040110942	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9997884613843552	WITHOUT_CLASSIFICATION	2.1153861564490842E-4	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999103249266457	WITHOUT_CLASSIFICATION	8.967507335429949E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988019673197015	WITHOUT_CLASSIFICATION	0.0011980326802984284	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9988019673197015	WITHOUT_CLASSIFICATION	0.0011980326802984284	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988019673197015	WITHOUT_CLASSIFICATION	0.0011980326802984284	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9988019673197015	WITHOUT_CLASSIFICATION	0.0011980326802984284	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980124296651701	WITHOUT_CLASSIFICATION	0.0019875703348298697	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999923983103204	WITHOUT_CLASSIFICATION	7.6016896796830625E-6	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995173271539366	WITHOUT_CLASSIFICATION	4.826728460634287E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9664075451588621	WITHOUT_CLASSIFICATION	0.03359245484113789	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9650912666722901	WITHOUT_CLASSIFICATION	0.03490873332770992	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996288724329694	WITHOUT_CLASSIFICATION	3.7112756703059935E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996684831470767	WITHOUT_CLASSIFICATION	3.315168529233329E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.665715053420483	DESIGN	0.33428494657951713	WITHOUT_CLASSIFICATION
used from testsuite	WITHOUT_CLASSIFICATION	0.8789207873425304	WITHOUT_CLASSIFICATION	0.12107921265746957	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995568020262171	WITHOUT_CLASSIFICATION	4.431979737828185E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9993981163177672	WITHOUT_CLASSIFICATION	6.018836822328075E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9975344187336749	WITHOUT_CLASSIFICATION	0.002465581266325144	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9978349992080012	WITHOUT_CLASSIFICATION	0.0021650007919987676	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998086501175771	WITHOUT_CLASSIFICATION	1.9134988242281716E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998086501175771	WITHOUT_CLASSIFICATION	1.9134988242281716E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998086501175771	WITHOUT_CLASSIFICATION	1.9134988242281716E-4	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9997760354222333	WITHOUT_CLASSIFICATION	2.239645777667784E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9994244617276519	WITHOUT_CLASSIFICATION	5.755382723481623E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9768903811301828	WITHOUT_CLASSIFICATION	0.02310961886981716	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995372736829808	WITHOUT_CLASSIFICATION	4.6272631701911696E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995372736829808	WITHOUT_CLASSIFICATION	4.6272631701911696E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999181777603401	WITHOUT_CLASSIFICATION	8.182223965987797E-5	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995663329939897	WITHOUT_CLASSIFICATION	4.3366700601025164E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.999987495441716	WITHOUT_CLASSIFICATION	1.2504558283977618E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.999578568881628	WITHOUT_CLASSIFICATION	4.214311183719883E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9983035258198701	WITHOUT_CLASSIFICATION	0.0016964741801297637	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9922086361672607	WITHOUT_CLASSIFICATION	0.007791363832739262	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999479160084774	WITHOUT_CLASSIFICATION	5.208399152259421E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998019362707827	WITHOUT_CLASSIFICATION	1.9806372921717886E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997279105132841	WITHOUT_CLASSIFICATION	2.7208948671582204E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9999118069686945	WITHOUT_CLASSIFICATION	8.819303130556361E-5	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9853176238036909	WITHOUT_CLASSIFICATION	0.014682376196309174	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9970198005362934	WITHOUT_CLASSIFICATION	0.0029801994637066245	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9973955372770678	WITHOUT_CLASSIFICATION	0.0026044627229321647	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9998407059472261	WITHOUT_CLASSIFICATION	1.5929405277393093E-4	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999949266678502	WITHOUT_CLASSIFICATION	5.073332149795697E-6	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999993281642199	WITHOUT_CLASSIFICATION	6.718357801003271E-7	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999806722742157	WITHOUT_CLASSIFICATION	1.932772578426463E-5	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999897328585361	WITHOUT_CLASSIFICATION	1.026714146393449E-5	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9939733920293697	WITHOUT_CLASSIFICATION	0.006026607970630315	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.999674589788525	WITHOUT_CLASSIFICATION	3.254102114751095E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998668872249674	WITHOUT_CLASSIFICATION	1.331127750324977E-4	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9994552065563292	WITHOUT_CLASSIFICATION	5.447934436707153E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999809707845972	WITHOUT_CLASSIFICATION	1.902921540281284E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999683740212146	WITHOUT_CLASSIFICATION	3.1625978785464445E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9919282870462027	WITHOUT_CLASSIFICATION	0.008071712953797276	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997826226807469	WITHOUT_CLASSIFICATION	2.1737731925312352E-4	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9997944565710049	WITHOUT_CLASSIFICATION	2.0554342899510345E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9979205880285336	WITHOUT_CLASSIFICATION	0.0020794119714664565	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9983566784861518	WITHOUT_CLASSIFICATION	0.0016433215138481742	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9967413831467805	WITHOUT_CLASSIFICATION	0.003258616853219537	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9908902844979093	WITHOUT_CLASSIFICATION	0.009109715502090833	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999760494896309	WITHOUT_CLASSIFICATION	2.3950510369082306E-5	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9960777414925522	WITHOUT_CLASSIFICATION	0.003922258507447722	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9940923082958615	WITHOUT_CLASSIFICATION	0.005907691704138456	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997812967733275	WITHOUT_CLASSIFICATION	2.187032266725707E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.7824760471749569	WITHOUT_CLASSIFICATION	0.21752395282504314	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9955383497382467	WITHOUT_CLASSIFICATION	0.004461650261753288	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999744300463549	WITHOUT_CLASSIFICATION	2.556995364501072E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9954404362135248	WITHOUT_CLASSIFICATION	0.004559563786475151	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9996510121593197	WITHOUT_CLASSIFICATION	3.489878406802582E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9996574143026488	WITHOUT_CLASSIFICATION	3.4258569735114657E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9995427027147281	WITHOUT_CLASSIFICATION	4.5729728527185134E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999775552945379	WITHOUT_CLASSIFICATION	2.2444705462075662E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998910437134411	WITHOUT_CLASSIFICATION	1.0895628655889676E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9992248540728655	WITHOUT_CLASSIFICATION	7.751459271345537E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9986360264572459	WITHOUT_CLASSIFICATION	0.0013639735427540924	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999652742943448	WITHOUT_CLASSIFICATION	3.472570565532095E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999689612997031	WITHOUT_CLASSIFICATION	3.103870029688065E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9995367530406677	WITHOUT_CLASSIFICATION	4.632469593323901E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9969941474203143	WITHOUT_CLASSIFICATION	0.0030058525796857606	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9996746024619371	WITHOUT_CLASSIFICATION	3.2539753806302973E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9966682178150531	WITHOUT_CLASSIFICATION	0.0033317821849469286	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9975372912627596	WITHOUT_CLASSIFICATION	0.002462708737240428	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9967702320461198	WITHOUT_CLASSIFICATION	0.0032297679538800844	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9986268292603115	WITHOUT_CLASSIFICATION	0.0013731707396884983	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999875039781553	WITHOUT_CLASSIFICATION	1.2496021844820104E-5	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9900481580326873	WITHOUT_CLASSIFICATION	0.009951841967312766	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.999211167185467	WITHOUT_CLASSIFICATION	7.88832814533017E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.99735487864363	WITHOUT_CLASSIFICATION	0.0026451213563700145	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9988824877474611	WITHOUT_CLASSIFICATION	0.001117512252538947	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9996670502223509	WITHOUT_CLASSIFICATION	3.329497776490377E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.8766532022043803	WITHOUT_CLASSIFICATION	0.1233467977956198	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9980356999129597	WITHOUT_CLASSIFICATION	0.001964300087040246	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9994575497400315	WITHOUT_CLASSIFICATION	5.424502599685067E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998489888406531	WITHOUT_CLASSIFICATION	1.5101115934692142E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9851390642371047	WITHOUT_CLASSIFICATION	0.014860935762895305	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999602593495264	WITHOUT_CLASSIFICATION	3.974065047356094E-5	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9997244256263075	WITHOUT_CLASSIFICATION	2.7557437369250115E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.999165113033899	WITHOUT_CLASSIFICATION	8.348869661010366E-4	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9976788472535002	WITHOUT_CLASSIFICATION	0.002321152746499779	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999998106507365	WITHOUT_CLASSIFICATION	1.8934926350911747E-6	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9999183793163273	WITHOUT_CLASSIFICATION	8.162068367262335E-5	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9988941408915599	WITHOUT_CLASSIFICATION	0.0011058591084401655	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9995677964577504	WITHOUT_CLASSIFICATION	4.3220354224952787E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9820430987873195	WITHOUT_CLASSIFICATION	0.01795690121268049	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9983171611001553	WITHOUT_CLASSIFICATION	0.0016828388998446806	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9991136367024692	WITHOUT_CLASSIFICATION	8.863632975306953E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.7496373994896232	WITHOUT_CLASSIFICATION	0.25036260051037684	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.7166583707981216	DESIGN	0.2833416292018785	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9875512091662166	WITHOUT_CLASSIFICATION	0.012448790833783425	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9994318214138725	WITHOUT_CLASSIFICATION	5.681785861274614E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9981170831815136	WITHOUT_CLASSIFICATION	0.001882916818486429	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9944617991553476	WITHOUT_CLASSIFICATION	0.005538200844652414	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.978476164139161	WITHOUT_CLASSIFICATION	0.021523835860839006	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999442379073855	WITHOUT_CLASSIFICATION	5.576209261452887E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9992405362204817	WITHOUT_CLASSIFICATION	7.59463779518252E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999236872519364	WITHOUT_CLASSIFICATION	7.631274806370122E-5	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993727275032794	WITHOUT_CLASSIFICATION	6.272724967204561E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.999657859159816	WITHOUT_CLASSIFICATION	3.42140840183965E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9976180592353014	WITHOUT_CLASSIFICATION	0.0023819407646985084	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9999021694140348	WITHOUT_CLASSIFICATION	9.78305859653255E-5	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.999399907580992	WITHOUT_CLASSIFICATION	6.000924190080629E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9980805405438065	WITHOUT_CLASSIFICATION	0.001919459456193574	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9991257304808063	WITHOUT_CLASSIFICATION	8.742695191937516E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993974740703956	WITHOUT_CLASSIFICATION	6.025259296043405E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9993974740703956	WITHOUT_CLASSIFICATION	6.025259296043405E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999245063165725	WITHOUT_CLASSIFICATION	7.549368342748788E-5	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9919383912306463	WITHOUT_CLASSIFICATION	0.008061608769353574	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.999125234793555	WITHOUT_CLASSIFICATION	8.747652064450516E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9894223401617716	WITHOUT_CLASSIFICATION	0.010577659838228393	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9994349572861903	WITHOUT_CLASSIFICATION	5.650427138096257E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9995088571493982	WITHOUT_CLASSIFICATION	4.911428506017939E-4	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995950617589541	WITHOUT_CLASSIFICATION	4.049382410458853E-4	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997289091386571	WITHOUT_CLASSIFICATION	2.7109086134297647E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9994938089975223	WITHOUT_CLASSIFICATION	5.061910024777677E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9984433524030389	WITHOUT_CLASSIFICATION	0.0015566475969610457	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998702992739575	WITHOUT_CLASSIFICATION	1.2970072604240896E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999904837261252	WITHOUT_CLASSIFICATION	9.516273874732463E-6	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.999784223474187	WITHOUT_CLASSIFICATION	2.1577652581293195E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999952675229697	WITHOUT_CLASSIFICATION	4.73247703022691E-6	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995970105347768	WITHOUT_CLASSIFICATION	4.02989465223183E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999809732347743	WITHOUT_CLASSIFICATION	1.9026765225696774E-5	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9775361434888141	WITHOUT_CLASSIFICATION	0.02246385651118592	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9775361434888141	WITHOUT_CLASSIFICATION	0.02246385651118592	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999836823717088	WITHOUT_CLASSIFICATION	1.631762829116281E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.99902716018978	WITHOUT_CLASSIFICATION	9.728398102200194E-4	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9997430421354082	WITHOUT_CLASSIFICATION	2.569578645917628E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995792532269996	WITHOUT_CLASSIFICATION	4.207467730004987E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.999745277444376	WITHOUT_CLASSIFICATION	2.5472255562399574E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996288396815399	WITHOUT_CLASSIFICATION	3.711603184600798E-4	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999495035679383	WITHOUT_CLASSIFICATION	5.049643206156923E-5	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9996735506844403	WITHOUT_CLASSIFICATION	3.264493155596667E-4	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998549975455469	WITHOUT_CLASSIFICATION	1.4500245445324902E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9964557200881876	WITHOUT_CLASSIFICATION	0.003544279911812455	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9964557200881876	WITHOUT_CLASSIFICATION	0.003544279911812455	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999634355428559	WITHOUT_CLASSIFICATION	3.6564457144033935E-5	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9923993312550696	WITHOUT_CLASSIFICATION	0.007600668744930298	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9994899284844663	WITHOUT_CLASSIFICATION	5.100715155337415E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999101362714873	WITHOUT_CLASSIFICATION	8.986372851268868E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9994899284844663	WITHOUT_CLASSIFICATION	5.100715155337415E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.999999845410887	WITHOUT_CLASSIFICATION	1.5458911287677703E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.7027343031521749	DESIGN	0.2972656968478251	WITHOUT_CLASSIFICATION
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9995726343570868	WITHOUT_CLASSIFICATION	4.273656429132102E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9963995250673118	WITHOUT_CLASSIFICATION	0.0036004749326882745	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9993856112050971	WITHOUT_CLASSIFICATION	6.14388794902868E-4	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9979693484159724	WITHOUT_CLASSIFICATION	0.0020306515840274883	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.8873474258049358	WITHOUT_CLASSIFICATION	0.11265257419506423	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9981396886741146	WITHOUT_CLASSIFICATION	0.0018603113258853345	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997598067028086	WITHOUT_CLASSIFICATION	2.4019329719134072E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9995226497855305	WITHOUT_CLASSIFICATION	4.7735021446949184E-4	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9970994996028375	WITHOUT_CLASSIFICATION	0.002900500397162455	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9993486803681833	WITHOUT_CLASSIFICATION	6.513196318166214E-4	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997969967193613	WITHOUT_CLASSIFICATION	2.0300328063876222E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998180169849733	WITHOUT_CLASSIFICATION	1.8198301502662484E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9557755863170311	WITHOUT_CLASSIFICATION	0.04422441368296905	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9994463535064735	WITHOUT_CLASSIFICATION	5.5364649352649E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9992534095084677	WITHOUT_CLASSIFICATION	7.465904915322347E-4	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9996886472920004	WITHOUT_CLASSIFICATION	3.1135270799967656E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999842477409284	WITHOUT_CLASSIFICATION	1.5752259071491464E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992562154160577	WITHOUT_CLASSIFICATION	7.437845839423746E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9994492604138289	WITHOUT_CLASSIFICATION	5.507395861711013E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9975035185361132	WITHOUT_CLASSIFICATION	0.0024964814638869055	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999901958828927	WITHOUT_CLASSIFICATION	9.80411710720852E-6	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.994589283703906	WITHOUT_CLASSIFICATION	0.005410716296093982	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9986605462260172	WITHOUT_CLASSIFICATION	0.0013394537739827722	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999982912510655	WITHOUT_CLASSIFICATION	1.7087489344707499E-6	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.8694519852253115	WITHOUT_CLASSIFICATION	0.13054801477468844	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9987509329701035	WITHOUT_CLASSIFICATION	0.0012490670298965366	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9935712911833197	WITHOUT_CLASSIFICATION	0.006428708816680272	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.996121076197475	WITHOUT_CLASSIFICATION	0.0038789238025250393	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999597325157557	WITHOUT_CLASSIFICATION	4.026748424424505E-5	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9988075798984677	WITHOUT_CLASSIFICATION	0.0011924201015323399	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.99880595561845	WITHOUT_CLASSIFICATION	0.0011940443815500294	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.99880595561845	WITHOUT_CLASSIFICATION	0.0011940443815500294	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9996236997929929	WITHOUT_CLASSIFICATION	3.763002070071179E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9945049675855739	WITHOUT_CLASSIFICATION	0.00549503241442604	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9995600499884408	WITHOUT_CLASSIFICATION	4.3995001155914713E-4	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9969960066370561	WITHOUT_CLASSIFICATION	0.003003993362943881	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9958677630207344	WITHOUT_CLASSIFICATION	0.004132236979265564	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9993725964616411	WITHOUT_CLASSIFICATION	6.27403538358769E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9816410885240341	WITHOUT_CLASSIFICATION	0.018358911475965994	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998223469323192	WITHOUT_CLASSIFICATION	1.7765306768082042E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9996236997929929	WITHOUT_CLASSIFICATION	3.763002070071179E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9945049675855739	WITHOUT_CLASSIFICATION	0.00549503241442604	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999696635564113	WITHOUT_CLASSIFICATION	3.0336443588714127E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9992998660647291	WITHOUT_CLASSIFICATION	7.00133935270881E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9993535158228581	WITHOUT_CLASSIFICATION	6.464841771418655E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.999895522587094	WITHOUT_CLASSIFICATION	1.0447741290593889E-4	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.999225501377304	WITHOUT_CLASSIFICATION	7.744986226959616E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9896887786032226	WITHOUT_CLASSIFICATION	0.010311221396777337	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999469582061313	WITHOUT_CLASSIFICATION	5.304179386876243E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991521953394211	WITHOUT_CLASSIFICATION	8.478046605789246E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9992867917868925	WITHOUT_CLASSIFICATION	7.132082131075273E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9409273058705196	DESIGN	0.059072694129480484	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9999300827538852	WITHOUT_CLASSIFICATION	6.991724611482468E-5	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9409273058705196	DESIGN	0.059072694129480484	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998812989033636	WITHOUT_CLASSIFICATION	1.1870109663628953E-4	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9996670502223509	WITHOUT_CLASSIFICATION	3.329497776490377E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998812989033636	WITHOUT_CLASSIFICATION	1.1870109663628953E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996911718904407	WITHOUT_CLASSIFICATION	3.0882810955934416E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9995704307010846	WITHOUT_CLASSIFICATION	4.2956929891540093E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991521953394211	WITHOUT_CLASSIFICATION	8.478046605789246E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991521953394211	WITHOUT_CLASSIFICATION	8.478046605789246E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.9995099462584677	WITHOUT_CLASSIFICATION	4.900537415322331E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995114254540736	WITHOUT_CLASSIFICATION	4.885745459264194E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.9995099462584677	WITHOUT_CLASSIFICATION	4.900537415322331E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9991124289536663	WITHOUT_CLASSIFICATION	8.875710463337837E-4	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9992487460024322	WITHOUT_CLASSIFICATION	7.512539975678079E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9955212547842484	WITHOUT_CLASSIFICATION	0.004478745215751653	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5734686329814098	WITHOUT_CLASSIFICATION	0.4265313670185903	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997141319710082	WITHOUT_CLASSIFICATION	2.8586802899182304E-4	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.999905232435589	WITHOUT_CLASSIFICATION	9.476756441100538E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9994928049731173	WITHOUT_CLASSIFICATION	5.071950268827403E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9996419469952784	WITHOUT_CLASSIFICATION	3.580530047216039E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9997701979549152	WITHOUT_CLASSIFICATION	2.2980204508478297E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9969666124535004	WITHOUT_CLASSIFICATION	0.003033387546499571	DESIGN
types	WITHOUT_CLASSIFICATION	0.9994658068190876	WITHOUT_CLASSIFICATION	5.341931809123996E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.999977579294145	WITHOUT_CLASSIFICATION	2.2420705854969603E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.998868855123951	WITHOUT_CLASSIFICATION	0.001131144876049116	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9994962812072561	WITHOUT_CLASSIFICATION	5.037187927440244E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.999456576747046	WITHOUT_CLASSIFICATION	5.434232529540653E-4	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999408356194084	WITHOUT_CLASSIFICATION	5.916438059164933E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997969967193613	WITHOUT_CLASSIFICATION	2.0300328063876222E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998215955003096	WITHOUT_CLASSIFICATION	1.7840449969038662E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996086555330147	WITHOUT_CLASSIFICATION	3.9134446698528417E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999878635534859	WITHOUT_CLASSIFICATION	1.2136446514183396E-5	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997969967193613	WITHOUT_CLASSIFICATION	2.0300328063876222E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9989615740411011	WITHOUT_CLASSIFICATION	0.0010384259588989667	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9994113351135143	WITHOUT_CLASSIFICATION	5.886648864856872E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9600026909213625	WITHOUT_CLASSIFICATION	0.03999730907863758	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9815074777519961	WITHOUT_CLASSIFICATION	0.018492522248003893	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.97836007415165	WITHOUT_CLASSIFICATION	0.02163992584834998	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9773395269279961	WITHOUT_CLASSIFICATION	0.02266047307200398	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.7888117915600509	WITHOUT_CLASSIFICATION	0.21118820843994907	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9959891093887624	WITHOUT_CLASSIFICATION	0.004010890611237593	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997141319710082	WITHOUT_CLASSIFICATION	2.8586802899182304E-4	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9986162774425046	WITHOUT_CLASSIFICATION	0.0013837225574954866	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9996066589759885	WITHOUT_CLASSIFICATION	3.933410240114482E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.6562374364132992	WITHOUT_CLASSIFICATION	0.3437625635867007	DESIGN
an assertion	WITHOUT_CLASSIFICATION	0.9995786457038123	WITHOUT_CLASSIFICATION	4.213542961876343E-4	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.999916952651258	WITHOUT_CLASSIFICATION	8.304734874203752E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.9999459990319187	WITHOUT_CLASSIFICATION	5.400096808131082E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9991124289536663	WITHOUT_CLASSIFICATION	8.875710463337837E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9991124289536663	WITHOUT_CLASSIFICATION	8.875710463337837E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999768459861181	WITHOUT_CLASSIFICATION	2.3154013881851908E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999638260209123	WITHOUT_CLASSIFICATION	3.617397908772879E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9976896360677859	WITHOUT_CLASSIFICATION	0.002310363932214071	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999962099167002	WITHOUT_CLASSIFICATION	3.7900832997920927E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9989682756943166	WITHOUT_CLASSIFICATION	0.001031724305683403	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9946504551128087	WITHOUT_CLASSIFICATION	0.005349544887191331	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9164380967484735	WITHOUT_CLASSIFICATION	0.08356190325152642	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9998810984639979	WITHOUT_CLASSIFICATION	1.1890153600213548E-4	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9993092242677435	WITHOUT_CLASSIFICATION	6.907757322565837E-4	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9990762267079263	WITHOUT_CLASSIFICATION	9.237732920738068E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995247765322773	WITHOUT_CLASSIFICATION	4.752234677226091E-4	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.998868855123951	WITHOUT_CLASSIFICATION	0.001131144876049116	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9996236997929929	WITHOUT_CLASSIFICATION	3.763002070071179E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995247765322773	WITHOUT_CLASSIFICATION	4.752234677226091E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996791879600933	WITHOUT_CLASSIFICATION	3.208120399068088E-4	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9919631015742876	WITHOUT_CLASSIFICATION	0.00803689842571241	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9997964296357205	WITHOUT_CLASSIFICATION	2.0357036427950712E-4	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.6901456345465516	WITHOUT_CLASSIFICATION	0.3098543654534483	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9975700642685514	WITHOUT_CLASSIFICATION	0.002429935731448537	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.99949979010123	WITHOUT_CLASSIFICATION	5.00209898770003E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.973009819360959	WITHOUT_CLASSIFICATION	0.02699018063904092	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999847465393521	WITHOUT_CLASSIFICATION	1.525346064805169E-5	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998454705875426	WITHOUT_CLASSIFICATION	1.5452941245740087E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9954505819086739	WITHOUT_CLASSIFICATION	0.004549418091326133	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999561014274044	WITHOUT_CLASSIFICATION	4.389857259560228E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.999561014274044	WITHOUT_CLASSIFICATION	4.389857259560228E-4	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9893390750582277	WITHOUT_CLASSIFICATION	0.010660924941772208	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9973660200164944	WITHOUT_CLASSIFICATION	0.0026339799835055863	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9995247765322773	WITHOUT_CLASSIFICATION	4.752234677226091E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9975700642685514	WITHOUT_CLASSIFICATION	0.002429935731448537	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.973009819360959	WITHOUT_CLASSIFICATION	0.02699018063904092	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.999222860102525	WITHOUT_CLASSIFICATION	7.771398974750592E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9979244544934027	WITHOUT_CLASSIFICATION	0.0020755455065972735	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9998922690505335	WITHOUT_CLASSIFICATION	1.077309494664606E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9996735021210401	WITHOUT_CLASSIFICATION	3.264978789598251E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999069381247481	WITHOUT_CLASSIFICATION	9.306187525187812E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9994560016021773	WITHOUT_CLASSIFICATION	5.439983978227995E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9996791879600933	WITHOUT_CLASSIFICATION	3.208120399068088E-4	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9997996085308457	WITHOUT_CLASSIFICATION	2.0039146915423224E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998486152664023	WITHOUT_CLASSIFICATION	1.5138473359768993E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9973507555513219	WITHOUT_CLASSIFICATION	0.002649244448678018	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998458821097284	WITHOUT_CLASSIFICATION	1.5411789027168675E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997634680432594	WITHOUT_CLASSIFICATION	2.3653195674058772E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.999649867079341	WITHOUT_CLASSIFICATION	3.501329206589987E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996911718904407	WITHOUT_CLASSIFICATION	3.0882810955934416E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9865120851352224	WITHOUT_CLASSIFICATION	0.013487914864777736	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999966517097963	WITHOUT_CLASSIFICATION	3.3482902036664137E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9965425184882076	WITHOUT_CLASSIFICATION	0.00345748151179242	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9997172677109759	WITHOUT_CLASSIFICATION	2.827322890241024E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.99960758685833	WITHOUT_CLASSIFICATION	3.92413141669997E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997475118156033	WITHOUT_CLASSIFICATION	2.5248818439672753E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9994508245677184	WITHOUT_CLASSIFICATION	5.491754322815892E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999130654555258	WITHOUT_CLASSIFICATION	8.693454447419586E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9994560016021773	WITHOUT_CLASSIFICATION	5.439983978227995E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9998871584982754	WITHOUT_CLASSIFICATION	1.1284150172466771E-4	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9990973855507057	WITHOUT_CLASSIFICATION	9.026144492942419E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9997712579225505	WITHOUT_CLASSIFICATION	2.287420774494509E-4	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9977594222193761	WITHOUT_CLASSIFICATION	0.002240577780623924	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.999800279854497	WITHOUT_CLASSIFICATION	1.997201455029795E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9994082817081523	WITHOUT_CLASSIFICATION	5.917182918476713E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9991965890909998	WITHOUT_CLASSIFICATION	8.034109090001E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9996884505405922	WITHOUT_CLASSIFICATION	3.11549459407811E-4	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998423976485009	WITHOUT_CLASSIFICATION	1.5760235149910173E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999780984653014	WITHOUT_CLASSIFICATION	2.190153469861744E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9984868485410396	WITHOUT_CLASSIFICATION	0.0015131514589603818	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998556792588447	WITHOUT_CLASSIFICATION	1.4432074115539959E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999729285797468	WITHOUT_CLASSIFICATION	2.707142025326447E-5	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.999861832089237	WITHOUT_CLASSIFICATION	1.38167910763025E-4	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.6081904657134912	WITHOUT_CLASSIFICATION	0.3918095342865087	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9975709981596513	WITHOUT_CLASSIFICATION	0.0024290018403486883	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9967344289305026	WITHOUT_CLASSIFICATION	0.003265571069497492	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9995762803253693	WITHOUT_CLASSIFICATION	4.23719674630736E-4	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9997306112281055	WITHOUT_CLASSIFICATION	2.693887718945311E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9992248762587485	WITHOUT_CLASSIFICATION	7.751237412515413E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997190185863488	WITHOUT_CLASSIFICATION	2.809814136511845E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.997834034200088	WITHOUT_CLASSIFICATION	0.0021659657999119246	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.5464661358877769	WITHOUT_CLASSIFICATION	0.453533864112223	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.992116705947905	WITHOUT_CLASSIFICATION	0.007883294052094944	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9968860297705275	WITHOUT_CLASSIFICATION	0.0031139702294724174	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9998422241865448	WITHOUT_CLASSIFICATION	1.5777581345516624E-4	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6366325700314011	DESIGN	0.36336742996859894	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9914945175213129	WITHOUT_CLASSIFICATION	0.008505482478687197	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9986901361078945	WITHOUT_CLASSIFICATION	0.001309863892105502	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998180737549148	WITHOUT_CLASSIFICATION	1.8192624508504238E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8600508731664727	WITHOUT_CLASSIFICATION	0.13994912683352728	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.969507046833754	WITHOUT_CLASSIFICATION	0.03049295316624595	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.999732617378821	WITHOUT_CLASSIFICATION	2.673826211790429E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997247392099022	WITHOUT_CLASSIFICATION	2.75260790097682E-4	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.982745086088338	WITHOUT_CLASSIFICATION	0.017254913911662055	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.999732617378821	WITHOUT_CLASSIFICATION	2.673826211790429E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.969507046833754	WITHOUT_CLASSIFICATION	0.03049295316624595	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997247392099022	WITHOUT_CLASSIFICATION	2.75260790097682E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999202768258837	WITHOUT_CLASSIFICATION	7.972317411630062E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9997437953537802	WITHOUT_CLASSIFICATION	2.5620464621975544E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999866442228543	WITHOUT_CLASSIFICATION	1.3355777145759222E-5	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998177673362397	WITHOUT_CLASSIFICATION	1.8223266376025894E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9995554280139874	WITHOUT_CLASSIFICATION	4.445719860125829E-4	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5217461416205318	WITHOUT_CLASSIFICATION	0.4782538583794681	DESIGN
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9973949760748189	WITHOUT_CLASSIFICATION	0.002605023925181106	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9996981168486166	WITHOUT_CLASSIFICATION	3.018831513833994E-4	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.993627806906311	WITHOUT_CLASSIFICATION	0.006372193093689008	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.999671190482361	WITHOUT_CLASSIFICATION	3.288095176389558E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.9999560410698208	WITHOUT_CLASSIFICATION	4.395893017926265E-5	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999481031229254	WITHOUT_CLASSIFICATION	5.189687707464922E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9993928250727657	WITHOUT_CLASSIFICATION	6.07174927234309E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998177673362397	WITHOUT_CLASSIFICATION	1.8223266376025894E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9998674876766526	WITHOUT_CLASSIFICATION	1.3251232334737288E-4	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9976749693737242	WITHOUT_CLASSIFICATION	0.002325030626275851	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9880121797165399	WITHOUT_CLASSIFICATION	0.011987820283460167	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9690412779978698	WITHOUT_CLASSIFICATION	0.030958722002130228	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9994897216601467	WITHOUT_CLASSIFICATION	5.102783398532292E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999761784443169	WITHOUT_CLASSIFICATION	2.3821555683141477E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.6782263328645246	WITHOUT_CLASSIFICATION	0.32177366713547545	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999823101995761	WITHOUT_CLASSIFICATION	1.7689800424045484E-5	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9985950653204035	WITHOUT_CLASSIFICATION	0.0014049346795963823	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999652522244742	WITHOUT_CLASSIFICATION	3.474777552582216E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999761240987672	WITHOUT_CLASSIFICATION	2.387590123283657E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999761240987672	WITHOUT_CLASSIFICATION	2.387590123283657E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999612343977727	WITHOUT_CLASSIFICATION	3.8765602227217644E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999612343977727	WITHOUT_CLASSIFICATION	3.8765602227217644E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9986325943776063	WITHOUT_CLASSIFICATION	0.0013674056223936973	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9880121797165399	WITHOUT_CLASSIFICATION	0.011987820283460167	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9992779486622357	WITHOUT_CLASSIFICATION	7.22051337764143E-4	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.99983179750459	WITHOUT_CLASSIFICATION	1.6820249541001032E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9963764754437049	WITHOUT_CLASSIFICATION	0.003623524556295033	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9963764754437049	WITHOUT_CLASSIFICATION	0.003623524556295033	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999760716189621	WITHOUT_CLASSIFICATION	2.3928381037860286E-5	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9997214140809066	WITHOUT_CLASSIFICATION	2.7858591909329987E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.999592988089711	WITHOUT_CLASSIFICATION	4.070119102889429E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998350222390677	WITHOUT_CLASSIFICATION	1.6497776093231143E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.829286793187788	WITHOUT_CLASSIFICATION	0.17071320681221197	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999892109993498	WITHOUT_CLASSIFICATION	1.0789000650223097E-5	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9994402685181111	WITHOUT_CLASSIFICATION	5.597314818888764E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.8001697675413604	WITHOUT_CLASSIFICATION	0.1998302324586395	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9995083039950861	WITHOUT_CLASSIFICATION	4.916960049139288E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9985700550588533	WITHOUT_CLASSIFICATION	0.0014299449411466884	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9997672818836207	WITHOUT_CLASSIFICATION	2.3271811637926433E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9998039382313063	WITHOUT_CLASSIFICATION	1.96061768693679E-4	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9993756590665944	WITHOUT_CLASSIFICATION	6.243409334055166E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9997786067424764	WITHOUT_CLASSIFICATION	2.213932575236899E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9521466929081888	WITHOUT_CLASSIFICATION	0.047853307091811174	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.9989202561041276	WITHOUT_CLASSIFICATION	0.0010797438958724825	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9905348298521295	WITHOUT_CLASSIFICATION	0.009465170147870586	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999828277312429	WITHOUT_CLASSIFICATION	1.7172268757006027E-5	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9799858207025567	WITHOUT_CLASSIFICATION	0.020014179297443372	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9971550771148259	WITHOUT_CLASSIFICATION	0.00284492288517401	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999626507934294	WITHOUT_CLASSIFICATION	3.7349206570672864E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9986580271865102	WITHOUT_CLASSIFICATION	0.001341972813489793	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998251091825496	WITHOUT_CLASSIFICATION	1.748908174503437E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998711044856466	WITHOUT_CLASSIFICATION	1.28895514353371E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.9997895214166576	WITHOUT_CLASSIFICATION	2.1047858334244472E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9999115212988621	WITHOUT_CLASSIFICATION	8.847870113792326E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999780984653014	WITHOUT_CLASSIFICATION	2.190153469861744E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998015643410071	WITHOUT_CLASSIFICATION	1.9843565899297025E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9934089103612802	WITHOUT_CLASSIFICATION	0.006591089638719812	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993815405468182	WITHOUT_CLASSIFICATION	6.184594531818802E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995081070511928	WITHOUT_CLASSIFICATION	4.91892948807289E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9997450399680402	WITHOUT_CLASSIFICATION	2.54960031959792E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9997450399680402	WITHOUT_CLASSIFICATION	2.54960031959792E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999934607119214	WITHOUT_CLASSIFICATION	6.539288078574874E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9997104904989957	WITHOUT_CLASSIFICATION	2.8950950100425915E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9990959474382756	WITHOUT_CLASSIFICATION	9.04052561724391E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9990959474382756	WITHOUT_CLASSIFICATION	9.04052561724391E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9959724519962917	WITHOUT_CLASSIFICATION	0.0040275480037082435	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9974404262252741	WITHOUT_CLASSIFICATION	0.0025595737747259686	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9990223875088821	WITHOUT_CLASSIFICATION	9.77612491117853E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999656827492246	WITHOUT_CLASSIFICATION	3.431725077540556E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.999683830572927	WITHOUT_CLASSIFICATION	3.1616942707307985E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997712823035525	WITHOUT_CLASSIFICATION	2.2871769644739089E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9989923987793758	WITHOUT_CLASSIFICATION	0.0010076012206240781	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993616810469351	WITHOUT_CLASSIFICATION	6.383189530648459E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993616810469351	WITHOUT_CLASSIFICATION	6.383189530648459E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9309384341477506	WITHOUT_CLASSIFICATION	0.06906156585224939	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9988969148212009	WITHOUT_CLASSIFICATION	0.001103085178799067	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9988969148212009	WITHOUT_CLASSIFICATION	0.001103085178799067	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9991116872047403	WITHOUT_CLASSIFICATION	8.883127952596377E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.999520380909564	WITHOUT_CLASSIFICATION	4.7961909043601456E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9998947243045935	WITHOUT_CLASSIFICATION	1.052756954065251E-4	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9998387987016728	WITHOUT_CLASSIFICATION	1.6120129832727342E-4	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9995747831296584	WITHOUT_CLASSIFICATION	4.2521687034152066E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9815197455035877	WITHOUT_CLASSIFICATION	0.018480254496412253	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9994347352794724	WITHOUT_CLASSIFICATION	5.65264720527734E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999362579607293	WITHOUT_CLASSIFICATION	6.374203927064862E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.993024639847544	WITHOUT_CLASSIFICATION	0.006975360152456109	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9993268373603386	WITHOUT_CLASSIFICATION	6.731626396614184E-4	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9988315823123075	WITHOUT_CLASSIFICATION	0.0011684176876924658	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994637435093073	WITHOUT_CLASSIFICATION	5.362564906926497E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994637435093073	WITHOUT_CLASSIFICATION	5.362564906926497E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994637435093073	WITHOUT_CLASSIFICATION	5.362564906926497E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9994637435093073	WITHOUT_CLASSIFICATION	5.362564906926497E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9998148106214627	WITHOUT_CLASSIFICATION	1.8518937853737217E-4	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9991476758007045	WITHOUT_CLASSIFICATION	8.523241992955452E-4	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.999548035478764	WITHOUT_CLASSIFICATION	4.5196452123587733E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998490902916047	WITHOUT_CLASSIFICATION	1.5090970839524295E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9990190498782529	WITHOUT_CLASSIFICATION	9.809501217471592E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9995525898809761	WITHOUT_CLASSIFICATION	4.474101190239216E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9981923063580261	WITHOUT_CLASSIFICATION	0.0018076936419737977	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999200658116211	WITHOUT_CLASSIFICATION	7.993418837893838E-5	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9991816380002028	WITHOUT_CLASSIFICATION	8.183619997973744E-4	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9972870007415449	WITHOUT_CLASSIFICATION	0.002712999258455138	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999611857686798	WITHOUT_CLASSIFICATION	3.88142313203222E-5	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9995039217475554	WITHOUT_CLASSIFICATION	4.960782524444932E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9923105674101135	WITHOUT_CLASSIFICATION	0.007689432589886589	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9997426013511288	WITHOUT_CLASSIFICATION	2.5739864887124665E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999611857686798	WITHOUT_CLASSIFICATION	3.88142313203222E-5	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9918920742291422	DESIGN	0.008107925770857755	WITHOUT_CLASSIFICATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9939559986882213	WITHOUT_CLASSIFICATION	0.006044001311778674	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9998522788474073	WITHOUT_CLASSIFICATION	1.477211525926553E-4	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9988019878568986	WITHOUT_CLASSIFICATION	0.0011980121431014732	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9991743784879928	WITHOUT_CLASSIFICATION	8.256215120070619E-4	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9956140665068041	WITHOUT_CLASSIFICATION	0.004385933493195912	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9988259346461174	WITHOUT_CLASSIFICATION	0.0011740653538826191	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9997229007839308	WITHOUT_CLASSIFICATION	2.770992160692324E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999630705939482	WITHOUT_CLASSIFICATION	3.692940605189562E-5	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9993561402388667	WITHOUT_CLASSIFICATION	6.438597611333141E-4	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999630705939482	WITHOUT_CLASSIFICATION	3.692940605189562E-5	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999307659449378	WITHOUT_CLASSIFICATION	6.923405506222736E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9938462657764455	WITHOUT_CLASSIFICATION	0.00615373422355447	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9982289951718494	WITHOUT_CLASSIFICATION	0.0017710048281507238	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996303998822744	WITHOUT_CLASSIFICATION	3.6960011772557244E-4	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9376776299999395	WITHOUT_CLASSIFICATION	0.06232237000006045	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998572049015299	WITHOUT_CLASSIFICATION	1.4279509847011583E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997806529519239	WITHOUT_CLASSIFICATION	2.1934704807621496E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9993276970481855	WITHOUT_CLASSIFICATION	6.723029518145658E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997806529519239	WITHOUT_CLASSIFICATION	2.1934704807621496E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996426797755468	WITHOUT_CLASSIFICATION	3.573202244532292E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999179292831685	WITHOUT_CLASSIFICATION	8.207071683148888E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9993398610792736	WITHOUT_CLASSIFICATION	6.601389207263763E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9995528717273493	WITHOUT_CLASSIFICATION	4.471282726507191E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9996416116601033	WITHOUT_CLASSIFICATION	3.583883398965577E-4	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997969967193613	WITHOUT_CLASSIFICATION	2.0300328063876222E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999638735124313	WITHOUT_CLASSIFICATION	3.612648756861612E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998572049015299	WITHOUT_CLASSIFICATION	1.4279509847011583E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9993276970481855	WITHOUT_CLASSIFICATION	6.723029518145658E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9996426797755468	WITHOUT_CLASSIFICATION	3.573202244532292E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9972324465706441	WITHOUT_CLASSIFICATION	0.0027675534293558194	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9995092782514439	WITHOUT_CLASSIFICATION	4.907217485560341E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9997994163545296	WITHOUT_CLASSIFICATION	2.005836454703454E-4	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9995753202674597	WITHOUT_CLASSIFICATION	4.2467973254032334E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999259702820664	WITHOUT_CLASSIFICATION	7.402971793354834E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9872039075515079	WITHOUT_CLASSIFICATION	0.012796092448492013	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9997170430857921	WITHOUT_CLASSIFICATION	2.82956914207917E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9905348298521295	WITHOUT_CLASSIFICATION	0.009465170147870586	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999179292831685	WITHOUT_CLASSIFICATION	8.207071683148888E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999671465136111	WITHOUT_CLASSIFICATION	3.2853486388984006E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.9995099462584677	WITHOUT_CLASSIFICATION	4.900537415322331E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.999975580793763	WITHOUT_CLASSIFICATION	2.4419206236998614E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9996748136485875	WITHOUT_CLASSIFICATION	3.2518635141245126E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9905348298521295	WITHOUT_CLASSIFICATION	0.009465170147870586	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997657915115996	WITHOUT_CLASSIFICATION	2.342084884005078E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9905348298521295	WITHOUT_CLASSIFICATION	0.009465170147870586	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9987523391509552	WITHOUT_CLASSIFICATION	0.0012476608490448258	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998400334704729	WITHOUT_CLASSIFICATION	1.5996652952698521E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9989160313488991	WITHOUT_CLASSIFICATION	0.0010839686511008829	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997239201531711	WITHOUT_CLASSIFICATION	2.760798468288684E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.999789305704248	WITHOUT_CLASSIFICATION	2.1069429575190727E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9994510514649989	WITHOUT_CLASSIFICATION	5.489485350010883E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9998894753804886	WITHOUT_CLASSIFICATION	1.1052461951150468E-4	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996006322073778	WITHOUT_CLASSIFICATION	3.9936779262214405E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998601823211417	WITHOUT_CLASSIFICATION	1.3981767885829424E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9993348334888243	WITHOUT_CLASSIFICATION	6.651665111756216E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.995703315811501	WITHOUT_CLASSIFICATION	0.004296684188499062	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9986732925937172	WITHOUT_CLASSIFICATION	0.0013267074062828035	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9963680582209131	WITHOUT_CLASSIFICATION	0.0036319417790868875	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9994936245874971	WITHOUT_CLASSIFICATION	5.06375412502972E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9968707603353077	WITHOUT_CLASSIFICATION	0.003129239664692391	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998276200815741	WITHOUT_CLASSIFICATION	1.723799184259048E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9992600820344477	WITHOUT_CLASSIFICATION	7.399179655521954E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.6870360045721006	DESIGN	0.3129639954278995	WITHOUT_CLASSIFICATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9991990188829069	WITHOUT_CLASSIFICATION	8.009811170932749E-4	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9722616664964676	WITHOUT_CLASSIFICATION	0.027738333503532317	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992141955066118	WITHOUT_CLASSIFICATION	7.858044933880344E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9992141955066118	WITHOUT_CLASSIFICATION	7.858044933880344E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9989362874008725	WITHOUT_CLASSIFICATION	0.001063712599127555	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9991138722504499	WITHOUT_CLASSIFICATION	8.861277495500376E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9995293119603329	WITHOUT_CLASSIFICATION	4.706880396670603E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999951178884628	WITHOUT_CLASSIFICATION	4.8821115371210665E-6	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9998558029874292	WITHOUT_CLASSIFICATION	1.4419701257081693E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9999217672835262	WITHOUT_CLASSIFICATION	7.823271647369078E-5	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996172729332073	WITHOUT_CLASSIFICATION	3.8272706679273304E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9987761966914567	WITHOUT_CLASSIFICATION	0.001223803308543396	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.7689920463423479	WITHOUT_CLASSIFICATION	0.23100795365765206	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9996527213615342	WITHOUT_CLASSIFICATION	3.472786384658417E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9982330343662034	WITHOUT_CLASSIFICATION	0.0017669656337966006	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9919301241547763	WITHOUT_CLASSIFICATION	0.00806987584522364	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9990759009635922	WITHOUT_CLASSIFICATION	9.240990364077691E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9995421320129775	WITHOUT_CLASSIFICATION	4.578679870225925E-4	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9997609860768182	WITHOUT_CLASSIFICATION	2.3901392318190042E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999691532685511	WITHOUT_CLASSIFICATION	3.084673144901963E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9995578506199922	WITHOUT_CLASSIFICATION	4.421493800078033E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9995578506199922	WITHOUT_CLASSIFICATION	4.421493800078033E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999966510237446	WITHOUT_CLASSIFICATION	3.3489762553797134E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9996006322073778	WITHOUT_CLASSIFICATION	3.9936779262214405E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9651938905122469	WITHOUT_CLASSIFICATION	0.034806109487753104	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999928012781504	WITHOUT_CLASSIFICATION	7.198721849531943E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9997399191866517	WITHOUT_CLASSIFICATION	2.6008081334825576E-4	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9996699289750062	WITHOUT_CLASSIFICATION	3.300710249938089E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9998309548507496	WITHOUT_CLASSIFICATION	1.6904514925037973E-4	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9996256180206946	WITHOUT_CLASSIFICATION	3.7438197930549067E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9981779483264877	WITHOUT_CLASSIFICATION	0.0018220516735123658	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9933573822311642	WITHOUT_CLASSIFICATION	0.006642617768835726	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9993838981465327	WITHOUT_CLASSIFICATION	6.161018534673101E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9985281104487129	WITHOUT_CLASSIFICATION	0.0014718895512870578	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999273470919301	WITHOUT_CLASSIFICATION	7.265290806995187E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9996563898849626	WITHOUT_CLASSIFICATION	3.4361011503731864E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999959349989913	WITHOUT_CLASSIFICATION	4.065001008706184E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9994713275263198	WITHOUT_CLASSIFICATION	5.286724736801111E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9990017293220544	WITHOUT_CLASSIFICATION	9.98270677945512E-4	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999867483704633	WITHOUT_CLASSIFICATION	1.3251629536719362E-5	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999566131128927	WITHOUT_CLASSIFICATION	4.338688710723939E-5	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9997311938306326	WITHOUT_CLASSIFICATION	2.6880616936733983E-4	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9994592342226117	WITHOUT_CLASSIFICATION	5.407657773881865E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9998880280962673	WITHOUT_CLASSIFICATION	1.1197190373274358E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9858230156179895	WITHOUT_CLASSIFICATION	0.01417698438201057	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.8998746377388361	WITHOUT_CLASSIFICATION	0.10012536226116388	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9997640844919363	WITHOUT_CLASSIFICATION	2.3591550806366393E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999688909788453	WITHOUT_CLASSIFICATION	3.110902115463352E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9999426442352384	WITHOUT_CLASSIFICATION	5.7355764761589073E-5	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9940322127295456	WITHOUT_CLASSIFICATION	0.005967787270454521	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9957058350096848	WITHOUT_CLASSIFICATION	0.004294164990315267	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997167096973772	WITHOUT_CLASSIFICATION	2.8329030262273146E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9994439601614408	WITHOUT_CLASSIFICATION	5.560398385591619E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999975685390133	WITHOUT_CLASSIFICATION	2.4314609866634933E-6	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999914613237338	WITHOUT_CLASSIFICATION	8.538676266133452E-6	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9986856669810165	WITHOUT_CLASSIFICATION	0.0013143330189836556	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9986017141044741	WITHOUT_CLASSIFICATION	0.0013982858955259375	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998472324436692	WITHOUT_CLASSIFICATION	1.5276755633070782E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9997598100405628	WITHOUT_CLASSIFICATION	2.4018995943723192E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999844686739623	WITHOUT_CLASSIFICATION	1.553132603766602E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9987707527474136	WITHOUT_CLASSIFICATION	0.001229247252586418	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9987707527474136	WITHOUT_CLASSIFICATION	0.001229247252586418	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9995577845197815	WITHOUT_CLASSIFICATION	4.422154802185805E-4	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997761417846477	WITHOUT_CLASSIFICATION	2.2385821535222714E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997158568802761	WITHOUT_CLASSIFICATION	2.841431197238819E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9997158568802761	WITHOUT_CLASSIFICATION	2.841431197238819E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9973055916271996	WITHOUT_CLASSIFICATION	0.002694408372800319	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.999802913006003	WITHOUT_CLASSIFICATION	1.9708699399708228E-4	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9406979768228697	DESIGN	0.05930202317713026	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9998686229332624	WITHOUT_CLASSIFICATION	1.3137706673767651E-4	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.99771818830435	WITHOUT_CLASSIFICATION	0.002281811695650052	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994829570667595	WITHOUT_CLASSIFICATION	5.170429332403984E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998765769707988	WITHOUT_CLASSIFICATION	1.2342302920111202E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998765769707988	WITHOUT_CLASSIFICATION	1.2342302920111202E-4	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9994829570667595	WITHOUT_CLASSIFICATION	5.170429332403984E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9853249527766185	WITHOUT_CLASSIFICATION	0.014675047223381631	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9991124289536663	WITHOUT_CLASSIFICATION	8.875710463337837E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9994085526190761	WITHOUT_CLASSIFICATION	5.914473809239768E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9994085526190761	WITHOUT_CLASSIFICATION	5.914473809239768E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.999916405085715	WITHOUT_CLASSIFICATION	8.359491428504379E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9996983953630904	WITHOUT_CLASSIFICATION	3.0160463690963237E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998563987759761	WITHOUT_CLASSIFICATION	0.001436012240239028	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9993524113595333	WITHOUT_CLASSIFICATION	6.475886404666829E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9984374987798615	WITHOUT_CLASSIFICATION	0.0015625012201383771	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.995667481430003	WITHOUT_CLASSIFICATION	0.004332518569997019	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999582826312342	WITHOUT_CLASSIFICATION	4.171736876571207E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999268633917174	WITHOUT_CLASSIFICATION	7.31366082825864E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.97035915022509	WITHOUT_CLASSIFICATION	0.029640849774909966	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998657086728033	WITHOUT_CLASSIFICATION	1.3429132719666267E-4	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999615873637983	WITHOUT_CLASSIFICATION	3.8412636201799376E-5	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9983409303832164	WITHOUT_CLASSIFICATION	0.0016590696167835992	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9997900981732376	WITHOUT_CLASSIFICATION	2.099018267624488E-4	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9827975887533477	WITHOUT_CLASSIFICATION	0.01720241124665225	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9985486210169102	WITHOUT_CLASSIFICATION	0.0014513789830897619	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9999317247021376	WITHOUT_CLASSIFICATION	6.8275297862272E-5	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9995672524826822	WITHOUT_CLASSIFICATION	4.327475173179151E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9998652382596925	WITHOUT_CLASSIFICATION	1.347617403073873E-4	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9998277565788772	WITHOUT_CLASSIFICATION	1.7224342112277598E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.999218621254273	WITHOUT_CLASSIFICATION	7.813787457268947E-4	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9992777144719484	WITHOUT_CLASSIFICATION	7.222855280516423E-4	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9941540716444991	WITHOUT_CLASSIFICATION	0.005845928355500837	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9961711752797313	WITHOUT_CLASSIFICATION	0.003828824720268777	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9984007618690807	WITHOUT_CLASSIFICATION	0.0015992381309193685	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.998912481848038	WITHOUT_CLASSIFICATION	0.001087518151962059	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9990963393620853	WITHOUT_CLASSIFICATION	9.036606379147448E-4	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9971059129938155	WITHOUT_CLASSIFICATION	0.0028940870061845195	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999368135337687	WITHOUT_CLASSIFICATION	6.318646623130132E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9988006809468016	WITHOUT_CLASSIFICATION	0.0011993190531984158	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7904794197133056	WITHOUT_CLASSIFICATION	0.20952058028669449	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9997572563563503	WITHOUT_CLASSIFICATION	2.427436436497081E-4	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9993958425385315	WITHOUT_CLASSIFICATION	6.041574614684672E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9989826233423568	WITHOUT_CLASSIFICATION	0.0010173766576432625	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9831120549451605	WITHOUT_CLASSIFICATION	0.01688794505483943	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9990876946469583	WITHOUT_CLASSIFICATION	9.123053530417104E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9995509377507331	WITHOUT_CLASSIFICATION	4.490622492668961E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9996683777287365	WITHOUT_CLASSIFICATION	3.3162227126344796E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999219844139997	WITHOUT_CLASSIFICATION	7.801558600032086E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.999737486181205	WITHOUT_CLASSIFICATION	2.62513818795025E-4	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9975300730256156	WITHOUT_CLASSIFICATION	0.0024699269743844233	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9988513181863575	WITHOUT_CLASSIFICATION	0.0011486818136425406	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9991789580021313	WITHOUT_CLASSIFICATION	8.210419978687872E-4	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9996007920591726	WITHOUT_CLASSIFICATION	3.9920794082734697E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9995964068016631	WITHOUT_CLASSIFICATION	4.035931983370563E-4	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.580450517256627	WITHOUT_CLASSIFICATION	0.419549482743373	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9967652042249768	WITHOUT_CLASSIFICATION	0.00323479577502318	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999857788134886	WITHOUT_CLASSIFICATION	1.4221186511312662E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9938651806344577	WITHOUT_CLASSIFICATION	0.006134819365542306	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9982905535433294	WITHOUT_CLASSIFICATION	0.001709446456670547	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.981358412939868	WITHOUT_CLASSIFICATION	0.01864158706013198	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9990580119756551	WITHOUT_CLASSIFICATION	9.419880243448803E-4	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9995255798996853	WITHOUT_CLASSIFICATION	4.7442010031464285E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9998670070963774	WITHOUT_CLASSIFICATION	1.3299290362265683E-4	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9995501779304561	WITHOUT_CLASSIFICATION	4.4982206954401286E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9993707237517457	WITHOUT_CLASSIFICATION	6.29276248254322E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9985126809190765	WITHOUT_CLASSIFICATION	0.0014873190809235406	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9997079958492899	WITHOUT_CLASSIFICATION	2.920041507100383E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999929961591957	WITHOUT_CLASSIFICATION	7.003840804299851E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.999929961591957	WITHOUT_CLASSIFICATION	7.003840804299851E-5	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.99999991594234	WITHOUT_CLASSIFICATION	8.405766004468033E-8	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999153102247906	WITHOUT_CLASSIFICATION	8.468977520927411E-5	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9997895890048201	WITHOUT_CLASSIFICATION	2.104109951800115E-4	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9831253624176579	WITHOUT_CLASSIFICATION	0.016874637582342093	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999474392297224	WITHOUT_CLASSIFICATION	5.256077027762753E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9971051837999444	WITHOUT_CLASSIFICATION	0.0028948162000555625	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999991337928078	WITHOUT_CLASSIFICATION	8.662071922140407E-7	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999966557560932	WITHOUT_CLASSIFICATION	3.3442439067039597E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9984459946848318	WITHOUT_CLASSIFICATION	0.001554005315168158	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997875062008156	WITHOUT_CLASSIFICATION	2.1249379918443043E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999619641435724	WITHOUT_CLASSIFICATION	3.803585642768601E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9859983698446922	WITHOUT_CLASSIFICATION	0.014001630155307875	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997691616989	WITHOUT_CLASSIFICATION	2.3083830109090556E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9981440503683546	WITHOUT_CLASSIFICATION	0.001855949631645339	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991819657084035	WITHOUT_CLASSIFICATION	8.180342915964522E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9991819657084035	WITHOUT_CLASSIFICATION	8.180342915964522E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.999251800421362	WITHOUT_CLASSIFICATION	7.48199578638021E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9992337011312624	WITHOUT_CLASSIFICATION	7.662988687376098E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999250456322943	WITHOUT_CLASSIFICATION	7.495436770571226E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999307033741981	WITHOUT_CLASSIFICATION	6.929662580194676E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9998886628848428	WITHOUT_CLASSIFICATION	1.113371151571777E-4	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994686097306835	WITHOUT_CLASSIFICATION	5.313902693164211E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.999356418204117	WITHOUT_CLASSIFICATION	6.435817958829844E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999794657854332	WITHOUT_CLASSIFICATION	2.053421456676139E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9374209407556884	WITHOUT_CLASSIFICATION	0.06257905924431172	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999064173229779	WITHOUT_CLASSIFICATION	9.358267702206307E-5	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999990316400282	WITHOUT_CLASSIFICATION	9.683599717376063E-7	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999244850102983	WITHOUT_CLASSIFICATION	7.55149897016975E-5	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.997527939433193	WITHOUT_CLASSIFICATION	0.0024720605668069775	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999833011479341	WITHOUT_CLASSIFICATION	1.6698852065950157E-5	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.9997446318300218	WITHOUT_CLASSIFICATION	2.5536816997817125E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.8689761611312214	WITHOUT_CLASSIFICATION	0.13102383886877855	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9927268389348947	WITHOUT_CLASSIFICATION	0.007273161065105248	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999695692876915	WITHOUT_CLASSIFICATION	3.0430712308541752E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999538751280062	WITHOUT_CLASSIFICATION	4.612487199371026E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.999994654200972	WITHOUT_CLASSIFICATION	5.34579902796155E-6	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9995621240905997	WITHOUT_CLASSIFICATION	4.3787590940025346E-4	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9998724660092508	WITHOUT_CLASSIFICATION	1.2753399074911847E-4	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998999290732211	WITHOUT_CLASSIFICATION	1.0007092677888342E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.999999895988616	WITHOUT_CLASSIFICATION	1.0401138392419371E-7	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9988529487357439	WITHOUT_CLASSIFICATION	0.001147051264256003	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9994040456303686	WITHOUT_CLASSIFICATION	5.959543696314385E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.8616202300671189	WITHOUT_CLASSIFICATION	0.13837976993288117	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9775982350878684	WITHOUT_CLASSIFICATION	0.02240176491213164	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999922792095949	WITHOUT_CLASSIFICATION	7.720790405017452E-6	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999606320916095	WITHOUT_CLASSIFICATION	3.93679083905344E-5	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998829340034666	WITHOUT_CLASSIFICATION	1.1706599653339095E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999919818445879	WITHOUT_CLASSIFICATION	8.018155412029439E-6	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9994757964111848	WITHOUT_CLASSIFICATION	5.242035888151662E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999989248935767	WITHOUT_CLASSIFICATION	1.0751064233036778E-6	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999511445343208	WITHOUT_CLASSIFICATION	4.885546567916285E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9989583617320076	WITHOUT_CLASSIFICATION	0.0010416382679923977	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9554094231675447	WITHOUT_CLASSIFICATION	0.044590576832455306	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.999569061827399	WITHOUT_CLASSIFICATION	4.309381726010159E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999766329035618	WITHOUT_CLASSIFICATION	2.3367096438297467E-5	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9997691759507968	WITHOUT_CLASSIFICATION	2.3082404920307957E-4	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9897098509088333	WITHOUT_CLASSIFICATION	0.010290149091166698	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9983374097612157	WITHOUT_CLASSIFICATION	0.0016625902387843647	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9986393549539783	WITHOUT_CLASSIFICATION	0.0013606450460217192	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9986393549539783	WITHOUT_CLASSIFICATION	0.0013606450460217192	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999788529317923	WITHOUT_CLASSIFICATION	2.1147068207674493E-5	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9717746580379013	WITHOUT_CLASSIFICATION	0.028225341962098756	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9636987293417895	WITHOUT_CLASSIFICATION	0.03630127065821044	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998787962919939	WITHOUT_CLASSIFICATION	1.2120370800598553E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.7076609431336645	WITHOUT_CLASSIFICATION	0.29233905686633554	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9983682628551169	WITHOUT_CLASSIFICATION	0.0016317371448831917	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9915957427771461	WITHOUT_CLASSIFICATION	0.008404257222853876	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9997178981470911	WITHOUT_CLASSIFICATION	2.821018529088947E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9981491465559391	WITHOUT_CLASSIFICATION	0.0018508534440608447	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997353203848788	WITHOUT_CLASSIFICATION	2.646796151211356E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997168080203174	WITHOUT_CLASSIFICATION	2.8319197968262297E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9766424897976089	WITHOUT_CLASSIFICATION	0.02335751020239107	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9989069454668844	WITHOUT_CLASSIFICATION	0.0010930545331155402	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999986713431056	WITHOUT_CLASSIFICATION	1.3286568944580278E-6	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9985398791525688	WITHOUT_CLASSIFICATION	0.0014601208474311848	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9977951752527234	WITHOUT_CLASSIFICATION	0.002204824747276591	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.906658343749239	WITHOUT_CLASSIFICATION	0.09334165625076096	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999233879630233	WITHOUT_CLASSIFICATION	7.661203697679854E-5	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999668610899485	WITHOUT_CLASSIFICATION	3.313891005162188E-5	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9995336019489122	WITHOUT_CLASSIFICATION	4.6639805108794223E-4	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9993271076690967	WITHOUT_CLASSIFICATION	6.728923309032203E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999448327287325	WITHOUT_CLASSIFICATION	5.5167271267514686E-5	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9995484126317411	WITHOUT_CLASSIFICATION	4.5158736825898265E-4	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9981003978924438	WITHOUT_CLASSIFICATION	0.0018996021075562007	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999566156632239	WITHOUT_CLASSIFICATION	4.338433677606684E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9997833195470197	WITHOUT_CLASSIFICATION	2.166804529802826E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9992455104849705	WITHOUT_CLASSIFICATION	7.544895150294271E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.995565725492593	WITHOUT_CLASSIFICATION	0.004434274507406947	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999826701653367	WITHOUT_CLASSIFICATION	1.7329834663290502E-5	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9768229864934302	DESIGN	0.023177013506569807	WITHOUT_CLASSIFICATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.91857108748262	WITHOUT_CLASSIFICATION	0.08142891251738002	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9641482883164512	WITHOUT_CLASSIFICATION	0.0358517116835488	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999679135958845	WITHOUT_CLASSIFICATION	3.2086404115490716E-5	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9426534975145119	WITHOUT_CLASSIFICATION	0.0573465024854882	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9993912411695172	WITHOUT_CLASSIFICATION	6.087588304827495E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999929997939269	WITHOUT_CLASSIFICATION	7.000206073180311E-6	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9966116491329757	WITHOUT_CLASSIFICATION	0.0033883508670242	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9986948769015584	WITHOUT_CLASSIFICATION	0.0013051230984415187	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998392544916515	WITHOUT_CLASSIFICATION	1.6074550834847373E-4	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999979074484662	WITHOUT_CLASSIFICATION	2.0925515337044946E-6	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9852893242465558	WITHOUT_CLASSIFICATION	0.014710675753444227	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999087598376925	WITHOUT_CLASSIFICATION	9.124016230762467E-5	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9987572980997625	WITHOUT_CLASSIFICATION	0.001242701900237445	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9977746401770832	WITHOUT_CLASSIFICATION	0.002225359822916761	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9899249522937926	WITHOUT_CLASSIFICATION	0.010075047706207355	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999996420436466	WITHOUT_CLASSIFICATION	3.579563534447562E-7	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9985442901947027	WITHOUT_CLASSIFICATION	0.0014557098052973257	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9974118637434671	WITHOUT_CLASSIFICATION	0.002588136256532945	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9991079315703555	WITHOUT_CLASSIFICATION	8.92068429644534E-4	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999997691616989	WITHOUT_CLASSIFICATION	2.3083830109090556E-7	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9970041017724153	WITHOUT_CLASSIFICATION	0.0029958982275847252	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998571692396001	WITHOUT_CLASSIFICATION	1.428307603999245E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9988699768006158	WITHOUT_CLASSIFICATION	0.001130023199384193	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9993766957250758	WITHOUT_CLASSIFICATION	6.233042749242379E-4	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999876639418595	WITHOUT_CLASSIFICATION	1.233605814057757E-5	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9999182766387911	WITHOUT_CLASSIFICATION	8.172336120895205E-5	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9992081054159768	WITHOUT_CLASSIFICATION	7.918945840232062E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.999913667782637	WITHOUT_CLASSIFICATION	8.633221736300035E-5	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9995568020262171	WITHOUT_CLASSIFICATION	4.431979737828185E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997079528751924	WITHOUT_CLASSIFICATION	2.920471248076335E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.999987531513114	WITHOUT_CLASSIFICATION	1.2468486885900002E-5	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999363943426571	WITHOUT_CLASSIFICATION	6.360565734283596E-5	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9984680824509746	WITHOUT_CLASSIFICATION	0.0015319175490254525	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9995810857029622	WITHOUT_CLASSIFICATION	4.1891429703783177E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9911503996738181	WITHOUT_CLASSIFICATION	0.008849600326181891	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995952383006058	WITHOUT_CLASSIFICATION	4.047616993941526E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997969967193613	WITHOUT_CLASSIFICATION	2.0300328063876222E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995273831207321	WITHOUT_CLASSIFICATION	4.726168792678638E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9988923137938129	WITHOUT_CLASSIFICATION	0.0011076862061870658	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9992073258149473	WITHOUT_CLASSIFICATION	7.926741850526946E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995952383006058	WITHOUT_CLASSIFICATION	4.047616993941526E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9938839947769538	WITHOUT_CLASSIFICATION	0.00611600522304631	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.995172370608848	DESIGN	0.0048276293911520335	WITHOUT_CLASSIFICATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999916392969356	WITHOUT_CLASSIFICATION	8.360703064343973E-6	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9992982865118891	WITHOUT_CLASSIFICATION	7.017134881107623E-4	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9996911559402232	WITHOUT_CLASSIFICATION	3.088440597768264E-4	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9343111225517693	WITHOUT_CLASSIFICATION	0.06568887744823086	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9994594154349445	WITHOUT_CLASSIFICATION	5.40584565055486E-4	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9830248119773989	WITHOUT_CLASSIFICATION	0.016975188022601166	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.996236132286659	WITHOUT_CLASSIFICATION	0.0037638677133410236	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9964893024734758	WITHOUT_CLASSIFICATION	0.0035106975265240927	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9971817058696556	WITHOUT_CLASSIFICATION	0.0028182941303444456	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9823866028911534	WITHOUT_CLASSIFICATION	0.017613397108846518	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.99977415177821	WITHOUT_CLASSIFICATION	2.2584822178987456E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999023381108578	WITHOUT_CLASSIFICATION	9.76618891421219E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9998933208907181	WITHOUT_CLASSIFICATION	1.0667910928186077E-4	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998260244186923	WITHOUT_CLASSIFICATION	1.7397558130774485E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9858230156179895	WITHOUT_CLASSIFICATION	0.01417698438201057	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.999938726107386	WITHOUT_CLASSIFICATION	6.1273892614029E-5	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999728622937593	WITHOUT_CLASSIFICATION	2.713770624070375E-5	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9982900636410302	WITHOUT_CLASSIFICATION	0.0017099363589697931	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.9049699881417621	WITHOUT_CLASSIFICATION	0.09503001185823798	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9991468510486767	WITHOUT_CLASSIFICATION	8.531489513232153E-4	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999989856418019	WITHOUT_CLASSIFICATION	1.014358198086025E-6	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9957943949443094	WITHOUT_CLASSIFICATION	0.0042056050556906295	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9589724692497104	WITHOUT_CLASSIFICATION	0.04102753075028976	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9997867622990979	WITHOUT_CLASSIFICATION	2.1323770090214735E-4	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999937257063274	WITHOUT_CLASSIFICATION	6.27429367258195E-6	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9820668833567199	WITHOUT_CLASSIFICATION	0.017933116643280178	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9853176238036909	WITHOUT_CLASSIFICATION	0.014682376196309174	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.6526402100776892	WITHOUT_CLASSIFICATION	0.34735978992231076	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9944571868381402	WITHOUT_CLASSIFICATION	0.005542813161859781	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9989893538983672	WITHOUT_CLASSIFICATION	0.0010106461016327352	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9999157326212572	WITHOUT_CLASSIFICATION	8.426737874278579E-5	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9966164981206552	WITHOUT_CLASSIFICATION	0.003383501879344685	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9982757782951429	WITHOUT_CLASSIFICATION	0.001724221704857031	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999883836551725	WITHOUT_CLASSIFICATION	1.1616344827498063E-5	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9647317251342448	WITHOUT_CLASSIFICATION	0.035268274865755164	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9992846235389451	WITHOUT_CLASSIFICATION	7.153764610549047E-4	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9846739925856742	WITHOUT_CLASSIFICATION	0.015326007414325748	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9975984271480022	WITHOUT_CLASSIFICATION	0.002401572851997775	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999442379073855	WITHOUT_CLASSIFICATION	5.576209261452887E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998472014084098	WITHOUT_CLASSIFICATION	1.5279859159033208E-4	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9998472014084098	WITHOUT_CLASSIFICATION	1.5279859159033208E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9995088571493982	WITHOUT_CLASSIFICATION	4.911428506017939E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998702992739575	WITHOUT_CLASSIFICATION	1.2970072604240896E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9995792532269996	WITHOUT_CLASSIFICATION	4.207467730004987E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999218237276777	WITHOUT_CLASSIFICATION	7.817627232231206E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999656827492246	WITHOUT_CLASSIFICATION	3.431725077540556E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.999656827492246	WITHOUT_CLASSIFICATION	3.431725077540556E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9991521953394211	WITHOUT_CLASSIFICATION	8.478046605789246E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999205861962286	WITHOUT_CLASSIFICATION	7.941380377143908E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.999848424498387	WITHOUT_CLASSIFICATION	1.5157550161310946E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9993486803681833	WITHOUT_CLASSIFICATION	6.513196318166214E-4	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997969967193613	WITHOUT_CLASSIFICATION	2.0300328063876222E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999842477409284	WITHOUT_CLASSIFICATION	1.5752259071491464E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999860415790246	WITHOUT_CLASSIFICATION	1.3958420975389597E-5	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9998812878790385	WITHOUT_CLASSIFICATION	1.1871212096152888E-4	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.9998188255312113	WITHOUT_CLASSIFICATION	1.811744687888099E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9988066334190304	WITHOUT_CLASSIFICATION	0.0011933665809695732	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.9718389143688891	DESIGN	0.028161085631110895	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998250256075106	WITHOUT_CLASSIFICATION	1.7497439248928234E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998250256075106	WITHOUT_CLASSIFICATION	1.7497439248928234E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998260244186923	WITHOUT_CLASSIFICATION	1.7397558130774485E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998454705875426	WITHOUT_CLASSIFICATION	1.5452941245740087E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9982123266081164	WITHOUT_CLASSIFICATION	0.0017876733918835408	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9577233783982346	WITHOUT_CLASSIFICATION	0.04227662160176537	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9865120851352224	WITHOUT_CLASSIFICATION	0.013487914864777736	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9996969221555982	WITHOUT_CLASSIFICATION	3.030778444016597E-4	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9997994866241275	WITHOUT_CLASSIFICATION	2.005133758725162E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9994575422925441	WITHOUT_CLASSIFICATION	5.424577074559057E-4	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9889895757801305	WITHOUT_CLASSIFICATION	0.011010424219869603	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9964893024734758	WITHOUT_CLASSIFICATION	0.0035106975265240927	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.7289971165197108	DESIGN	0.2710028834802892	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9958868632767646	WITHOUT_CLASSIFICATION	0.0041131367232354055	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999603530908183	WITHOUT_CLASSIFICATION	3.964690918162479E-5	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999446702670813	WITHOUT_CLASSIFICATION	5.5329732918560794E-5	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998824853477748	WITHOUT_CLASSIFICATION	1.1751465222527959E-4	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994048568025842	WITHOUT_CLASSIFICATION	5.951431974159287E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9838726971893541	WITHOUT_CLASSIFICATION	0.01612730281064592	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9989903932245664	WITHOUT_CLASSIFICATION	0.0010096067754336005	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9996274838474101	WITHOUT_CLASSIFICATION	3.725161525899388E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9966894805685673	WITHOUT_CLASSIFICATION	0.003310519431432613	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9966894805685673	WITHOUT_CLASSIFICATION	0.003310519431432613	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999611857686798	WITHOUT_CLASSIFICATION	3.88142313203222E-5	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9998694754574038	WITHOUT_CLASSIFICATION	1.3052454259618472E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9968694678954065	WITHOUT_CLASSIFICATION	0.0031305321045935323	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9994539038548733	WITHOUT_CLASSIFICATION	5.46096145126706E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9997347373883314	WITHOUT_CLASSIFICATION	2.6526261166855223E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.863181101117034	WITHOUT_CLASSIFICATION	0.13681889888296592	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9996303998822744	WITHOUT_CLASSIFICATION	3.6960011772557244E-4	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999985869747529	WITHOUT_CLASSIFICATION	1.4130252471101881E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9972324465706441	WITHOUT_CLASSIFICATION	0.0027675534293558194	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999551639531087	WITHOUT_CLASSIFICATION	4.4836046891403435E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9905348298521295	WITHOUT_CLASSIFICATION	0.009465170147870586	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.9222153690485174	DESIGN	0.07778463095148255	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999829090647454	WITHOUT_CLASSIFICATION	1.709093525461982E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999917839164493	WITHOUT_CLASSIFICATION	8.216083550768772E-6	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8816858805647434	WITHOUT_CLASSIFICATION	0.11831411943525666	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9987833187531011	WITHOUT_CLASSIFICATION	0.0012166812468988697	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.7692885194749344	WITHOUT_CLASSIFICATION	0.23071148052506574	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.998738092950824	WITHOUT_CLASSIFICATION	0.0012619070491759828	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9954613710648064	WITHOUT_CLASSIFICATION	0.004538628935193719	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9955582986947584	WITHOUT_CLASSIFICATION	0.004441701305241594	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9990509401120703	WITHOUT_CLASSIFICATION	9.490598879296845E-4	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999997301222467	WITHOUT_CLASSIFICATION	2.6987775323743565E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.998563987759761	WITHOUT_CLASSIFICATION	0.001436012240239028	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9669725102323206	WITHOUT_CLASSIFICATION	0.03302748976767953	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9977686541283367	WITHOUT_CLASSIFICATION	0.002231345871663325	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9977686541283367	WITHOUT_CLASSIFICATION	0.002231345871663325	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999936319257033	WITHOUT_CLASSIFICATION	6.368074296681206E-6	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9975031682371801	WITHOUT_CLASSIFICATION	0.00249683176281989	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.992058869766874	WITHOUT_CLASSIFICATION	0.007941130233126117	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9888459808383394	WITHOUT_CLASSIFICATION	0.011154019161660679	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9990384645732464	WITHOUT_CLASSIFICATION	9.615354267535438E-4	DESIGN
todo : what else to do here?	DESIGN	0.992313127735324	WITHOUT_CLASSIFICATION	0.007686872264676002	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.7728043228198591	WITHOUT_CLASSIFICATION	0.22719567718014078	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9982497674605852	DESIGN	0.0017502325394147787	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7509223108483626	DESIGN	0.2490776891516374	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7509223108483626	DESIGN	0.2490776891516374	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9942317798807269	WITHOUT_CLASSIFICATION	0.005768220119273162	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.999991369944149	WITHOUT_CLASSIFICATION	8.630055851046375E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9696869000537621	WITHOUT_CLASSIFICATION	0.03031309994623787	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9962856529678097	DESIGN	0.0037143470321902854	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9962856529678097	DESIGN	0.0037143470321902854	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9988928925395146	DESIGN	0.0011071074604852701	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9988928925395146	DESIGN	0.0011071074604852701	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9998572250750952	DESIGN	1.4277492490473396E-4	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9612197177076445	DESIGN	0.038780282292355535	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9612197177076445	DESIGN	0.038780282292355535	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9975352199187488	DESIGN	0.0024647800812511306	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.999991369944149	WITHOUT_CLASSIFICATION	8.630055851046375E-6	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9696869000537621	WITHOUT_CLASSIFICATION	0.03031309994623787	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9996072511139165	WITHOUT_CLASSIFICATION	3.927488860834446E-4	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9796414961753706	WITHOUT_CLASSIFICATION	0.02035850382462942	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9882086617638458	DESIGN	0.011791338236154116	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.7773790060279446	DESIGN	0.22262099397205545	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9090479046987725	WITHOUT_CLASSIFICATION	0.09095209530122751	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9912576513738073	WITHOUT_CLASSIFICATION	0.00874234862619269	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.5944913196355375	WITHOUT_CLASSIFICATION	0.40550868036446247	DESIGN
todo : what else to do here?	DESIGN	0.992313127735324	WITHOUT_CLASSIFICATION	0.007686872264676002	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9974166929855156	WITHOUT_CLASSIFICATION	0.002583307014484357	DESIGN
todo : what else to do here?	DESIGN	0.992313127735324	WITHOUT_CLASSIFICATION	0.007686872264676002	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9988470097687029	WITHOUT_CLASSIFICATION	0.0011529902312971568	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9989253734281954	WITHOUT_CLASSIFICATION	0.0010746265718045737	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9949654051560071	DESIGN	0.005034594843992956	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.7728043228198591	WITHOUT_CLASSIFICATION	0.22719567718014078	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.8808799043381174	DESIGN	0.11912009566188261	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9595625250158306	WITHOUT_CLASSIFICATION	0.04043747498416939	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.7120675028063189	WITHOUT_CLASSIFICATION	0.287932497193681	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.7022754782298768	WITHOUT_CLASSIFICATION	0.2977245217701232	DESIGN
todo : what is the implication of this?	DESIGN	0.9842889272762323	WITHOUT_CLASSIFICATION	0.015711072723767656	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9912242116131083	WITHOUT_CLASSIFICATION	0.008775788386891721	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9948038506705537	DESIGN	0.005196149329446306	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9659580379738387	DESIGN	0.03404196202616136	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9997945512163509	WITHOUT_CLASSIFICATION	2.05448783649062E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.8776325395099889	DESIGN	0.12236746049001121	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9166566144926629	WITHOUT_CLASSIFICATION	0.08334338550733711	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9962816807008954	DESIGN	0.003718319299104653	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.5455080716373825	DESIGN	0.45449192836261754	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9775943224295125	DESIGN	0.02240567757048754	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9965052201378434	DESIGN	0.003494779862156679	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9996430024158018	WITHOUT_CLASSIFICATION	3.5699758419819043E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.5120034951076731	DESIGN	0.48799650489232693	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.5120034951076731	DESIGN	0.48799650489232693	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.9351816688318273	DESIGN	0.06481833116817266	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.5931909512494903	DESIGN	0.40680904875050966	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.6499908517540409	WITHOUT_CLASSIFICATION	0.35000914824595913	DESIGN
TODO possibly relax that	DESIGN	0.6499908517540409	WITHOUT_CLASSIFICATION	0.35000914824595913	DESIGN
TODO possibly relax that	DESIGN	0.6499908517540409	WITHOUT_CLASSIFICATION	0.35000914824595913	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9965052201378434	DESIGN	0.003494779862156679	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9979144616747885	WITHOUT_CLASSIFICATION	0.002085538325211472	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.8805250553443339	WITHOUT_CLASSIFICATION	0.11947494465566616	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9344629038094876	DESIGN	0.06553709619051237	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.9995615031255138	WITHOUT_CLASSIFICATION	4.384968744861867E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9517270443125112	WITHOUT_CLASSIFICATION	0.04827295568748886	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.8415893779769578	WITHOUT_CLASSIFICATION	0.15841062202304224	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.7509223108483626	DESIGN	0.2490776891516374	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7509223108483626	DESIGN	0.2490776891516374	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.7509223108483626	DESIGN	0.2490776891516374	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.99985449012446	DESIGN	1.4550987553993736E-4	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9988658287850386	WITHOUT_CLASSIFICATION	0.0011341712149613916	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9976107163261514	WITHOUT_CLASSIFICATION	0.002389283673848539	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9936040426435281	WITHOUT_CLASSIFICATION	0.006395957356471949	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9995572805938657	WITHOUT_CLASSIFICATION	4.4271940613428094E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9078277956694355	WITHOUT_CLASSIFICATION	0.09217220433056451	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9984131227852463	WITHOUT_CLASSIFICATION	0.0015868772147537198	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9987801495882923	WITHOUT_CLASSIFICATION	0.0012198504117076827	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.95590749239323	WITHOUT_CLASSIFICATION	0.04409250760676991	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.995104778957266	WITHOUT_CLASSIFICATION	0.004895221042733922	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9879677490399945	WITHOUT_CLASSIFICATION	0.012032250960005458	DESIGN
Does this dialect support check constraints?	DESIGN	0.952896919712507	WITHOUT_CLASSIFICATION	0.047103080287492945	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9719047841741669	WITHOUT_CLASSIFICATION	0.028095215825833166	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9399500225009124	WITHOUT_CLASSIFICATION	0.06004997749908767	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9399500225009124	WITHOUT_CLASSIFICATION	0.06004997749908767	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.705995133001111	DESIGN	0.2940048669988891	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9998994521047435	WITHOUT_CLASSIFICATION	1.0054789525645301E-4	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9096113481149354	WITHOUT_CLASSIFICATION	0.09038865188506454	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9988061901603545	WITHOUT_CLASSIFICATION	0.0011938098396454635	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.99717141678504	WITHOUT_CLASSIFICATION	0.0028285832149600966	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.9828937691561006	DESIGN	0.017106230843899367	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.956609532501499	WITHOUT_CLASSIFICATION	0.04339046749850092	DESIGN
orphans should not be deleted during copy??	DESIGN	0.956609532501499	WITHOUT_CLASSIFICATION	0.04339046749850092	DESIGN
I suppose?	DESIGN	0.9959807994350054	WITHOUT_CLASSIFICATION	0.00401920056499452	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.8999389457340868	DESIGN	0.10006105426591307	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9736371056018199	WITHOUT_CLASSIFICATION	0.026362894398180153	DESIGN
TODO:refactor + make this method private	DESIGN	0.9940735223735943	WITHOUT_CLASSIFICATION	0.005926477626405808	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9951680705360235	WITHOUT_CLASSIFICATION	0.0048319294639764905	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9913355719140423	DESIGN	0.008664428085957718	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.9146611670381353	WITHOUT_CLASSIFICATION	0.08533883296186476	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.9938047843493217	WITHOUT_CLASSIFICATION	0.006195215650678232	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9998787469145793	DESIGN	1.2125308542067367E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9998787469145793	DESIGN	1.2125308542067367E-4	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9453048106314345	DESIGN	0.05469518936856565	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9527951424679366	DESIGN	0.047204857532063445	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9527951424679366	DESIGN	0.047204857532063445	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9881816822363465	DESIGN	0.011818317763653557	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9622951559818316	WITHOUT_CLASSIFICATION	0.03770484401816837	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.6674711268606693	DESIGN	0.33252887313933055	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.8239632544789569	DESIGN	0.17603674552104304	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9873502346347409	WITHOUT_CLASSIFICATION	0.012649765365259063	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9968357786901425	WITHOUT_CLASSIFICATION	0.0031642213098573785	DESIGN
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9718681055996248	DESIGN	0.0281318944003752	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.579540777159749	DESIGN	0.420459222840251	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.6782282961224825	DESIGN	0.3217717038775176	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.997068530595121	DESIGN	0.0029314694048789202	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9988061901603545	WITHOUT_CLASSIFICATION	0.0011938098396454635	DESIGN
TODO: suck into event class	DESIGN	0.8596066762919056	DESIGN	0.14039332370809435	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9693709872755407	WITHOUT_CLASSIFICATION	0.030629012724459233	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8894102338621154	WITHOUT_CLASSIFICATION	0.11058976613788474	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9841166834797622	DESIGN	0.01588331652023779	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.7532517075019646	DESIGN	0.24674829249803537	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9897806941074928	WITHOUT_CLASSIFICATION	0.010219305892507092	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.8161432238825431	WITHOUT_CLASSIFICATION	0.1838567761174569	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9336686546965389	DESIGN	0.066331345303461	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9992938261788522	WITHOUT_CLASSIFICATION	7.061738211478283E-4	DESIGN
TODO: is this 100% correct?	DESIGN	0.9966408828755906	DESIGN	0.003359117124409412	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.6543705952056287	WITHOUT_CLASSIFICATION	0.3456294047943712	DESIGN
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9984555289830771	DESIGN	0.0015444710169228572	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9984083905042325	DESIGN	0.0015916094957676187	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9863969369875238	DESIGN	0.013603063012476133	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9682935404924011	DESIGN	0.031706459507598914	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.728885224750208	DESIGN	0.2711147752497921	WITHOUT_CLASSIFICATION
TODO: merge into one method!	DESIGN	0.9722561244753385	DESIGN	0.027743875524661427	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.967546329919205	DESIGN	0.032453670080794944	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9951853860353566	DESIGN	0.004814613964643442	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9865522126063139	DESIGN	0.013447787393686158	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9991818657377441	WITHOUT_CLASSIFICATION	8.181342622558792E-4	DESIGN
TODO : better way?!?	DESIGN	0.855883509264649	DESIGN	0.14411649073535096	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9859510382597436	WITHOUT_CLASSIFICATION	0.0140489617402564	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9988083889942201	WITHOUT_CLASSIFICATION	0.0011916110057798948	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.99947816742221	DESIGN	5.218325777900471E-4	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999489824618913	DESIGN	5.101753810859762E-5	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.7864454519668888	WITHOUT_CLASSIFICATION	0.21355454803311133	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9995907914630895	DESIGN	4.0920853691059383E-4	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.8896327182714776	DESIGN	0.11036728172852237	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9998570709906006	WITHOUT_CLASSIFICATION	1.4292900939937424E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.5649986186681887	WITHOUT_CLASSIFICATION	0.4350013813318113	DESIGN
we do not know either type BLIND GUESS!	DESIGN	0.9819796363018306	WITHOUT_CLASSIFICATION	0.018020363698169412	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999084168092	DESIGN	9.158319086337848E-8	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9989644126330851	DESIGN	0.001035587366914899	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9679133597358873	DESIGN	0.03208664026411273	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.7509223108483626	DESIGN	0.2490776891516374	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.851512489845428	DESIGN	0.14848751015457184	WITHOUT_CLASSIFICATION
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.8049541836059836	DESIGN	0.1950458163940165	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9905812590483583	WITHOUT_CLASSIFICATION	0.009418740951641717	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.629531654089365	DESIGN	0.37046834591063516	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9969890125418962	DESIGN	0.003010987458103763	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.9527803284364174	WITHOUT_CLASSIFICATION	0.04721967156358268	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9860388447452201	DESIGN	0.013961155254779834	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.7636183638332856	DESIGN	0.23638163616671426	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9902154554504616	DESIGN	0.00978454454953831	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.6463700880555828	DESIGN	0.3536299119444173	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.9993740171579288	WITHOUT_CLASSIFICATION	6.259828420711462E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.7411887635470431	DESIGN	0.2588112364529569	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9789178348828845	DESIGN	0.021082165117115387	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.998321714975213	WITHOUT_CLASSIFICATION	0.0016782850247869644	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9819150841687581	WITHOUT_CLASSIFICATION	0.01808491583124192	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.5698269963474507	DESIGN	0.43017300365254935	WITHOUT_CLASSIFICATION
this is ugly here, but needed because its a subquery	DESIGN	0.9958744348230293	WITHOUT_CLASSIFICATION	0.004125565176970636	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.9173959689946812	WITHOUT_CLASSIFICATION	0.08260403100531884	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9998807388018887	DESIGN	1.1926119811130592E-4	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.9998237224472184	DESIGN	1.7627755278160583E-4	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5606743223712908	WITHOUT_CLASSIFICATION	0.4393256776287091	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9929691178311475	DESIGN	0.007030882168852434	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.6231754812157669	WITHOUT_CLASSIFICATION	0.376824518784233	DESIGN
TODO: what type?	DESIGN	0.8868394509330517	DESIGN	0.11316054906694827	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9278014600022187	WITHOUT_CLASSIFICATION	0.07219853999778124	DESIGN
short-circuit for performance...	DESIGN	0.9993770380263056	WITHOUT_CLASSIFICATION	6.229619736943884E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9939997800646195	WITHOUT_CLASSIFICATION	0.006000219935380468	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.80123307649719	DESIGN	0.19876692350281003	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.918941469550282	WITHOUT_CLASSIFICATION	0.08105853044971799	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999974537029869	DESIGN	2.546297013134887E-6	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9998686564328348	DESIGN	1.3134356716518146E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.995952372656774	DESIGN	0.004047627343226014	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.999999582214156	DESIGN	4.177858439449834E-7	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.7832382697211009	DESIGN	0.21676173027889922	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9997551221972588	DESIGN	2.4487780274116754E-4	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.7985601445349951	DESIGN	0.2014398554650048	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9907601189143261	WITHOUT_CLASSIFICATION	0.00923988108567384	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.999338995950515	DESIGN	6.61004049485014E-4	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.7810642922026213	DESIGN	0.21893570779737875	WITHOUT_CLASSIFICATION
TODO: inefficient	DESIGN	0.5141708825743008	DESIGN	0.4858291174256992	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.9652227160165862	WITHOUT_CLASSIFICATION	0.03477728398341382	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999606195998854	DESIGN	3.938040011462462E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9987551276485255	DESIGN	0.001244872351474592	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9861745743893746	DESIGN	0.013825425610625433	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.7334961480785204	DESIGN	0.26650385192147963	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9988898210958088	WITHOUT_CLASSIFICATION	0.0011101789041912478	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.9331588906854026	WITHOUT_CLASSIFICATION	0.06684110931459726	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9990049545620343	DESIGN	9.95045437965665E-4	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9349434674994399	WITHOUT_CLASSIFICATION	0.0650565325005602	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9598934649227934	WITHOUT_CLASSIFICATION	0.0401065350772067	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999096457198	DESIGN	9.035428009589673E-8	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.991425819638968	WITHOUT_CLASSIFICATION	0.008574180361031908	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9968014568059864	DESIGN	0.003198543194013511	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.9118697585695275	WITHOUT_CLASSIFICATION	0.08813024143047253	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9986722761180397	WITHOUT_CLASSIFICATION	0.0013277238819602937	DESIGN
create an index on the key columns??	DESIGN	0.999974318853091	WITHOUT_CLASSIFICATION	2.5681146909025252E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.6680818987553897	DESIGN	0.3319181012446104	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.999974318853091	WITHOUT_CLASSIFICATION	2.5681146909025252E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9906367135249471	DESIGN	0.009363286475052968	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.9988311962264469	WITHOUT_CLASSIFICATION	0.00116880377355307	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9207347462049226	DESIGN	0.07926525379507741	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9996141464852459	WITHOUT_CLASSIFICATION	3.858535147540288E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.8675528285925624	WITHOUT_CLASSIFICATION	0.13244717140743759	DESIGN
create an index on the key columns??	DESIGN	0.999974318853091	WITHOUT_CLASSIFICATION	2.5681146909025252E-5	DESIGN
todo : remove	DESIGN	0.9985977889786803	WITHOUT_CLASSIFICATION	0.001402211021319682	DESIGN
todo : remove	DESIGN	0.9985977889786803	WITHOUT_CLASSIFICATION	0.001402211021319682	DESIGN
todo : remove	DESIGN	0.9985977889786803	WITHOUT_CLASSIFICATION	0.001402211021319682	DESIGN
todo : throw exception?	DESIGN	0.9992072453810605	WITHOUT_CLASSIFICATION	7.927546189393809E-4	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.997995945269091	WITHOUT_CLASSIFICATION	0.0020040547309089977	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9590580675413984	DESIGN	0.04094193245860168	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.977581558720752	DESIGN	0.022418441279248007	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.935400331921623	DESIGN	0.06459966807837705	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9418655115804944	DESIGN	0.05813448841950576	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.659338160067183	DESIGN	0.34066183993281707	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.659338160067183	DESIGN	0.34066183993281707	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.8896303307798332	WITHOUT_CLASSIFICATION	0.11036966922016683	DESIGN
ie. the subquery! yuck!	DESIGN	0.999461923021801	WITHOUT_CLASSIFICATION	5.380769781989339E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9546627549937695	DESIGN	0.04533724500623048	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8760010214563049	DESIGN	0.12399897854369511	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9987077201609843	DESIGN	0.0012922798390157288	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.9694066414144589	DESIGN	0.030593358585541176	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.8760010214563049	DESIGN	0.12399897854369511	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.7759880473247017	WITHOUT_CLASSIFICATION	0.22401195267529828	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9979462823280558	WITHOUT_CLASSIFICATION	0.0020537176719441367	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9979462823280558	WITHOUT_CLASSIFICATION	0.0020537176719441367	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9870555522174294	DESIGN	0.012944447782570551	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.8279379341519929	DESIGN	0.17206206584800704	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.999476311885026	DESIGN	5.236881149740467E-4	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9956698799094718	WITHOUT_CLASSIFICATION	0.00433012009052827	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9966387276530396	DESIGN	0.003361272346960423	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9924059322339809	WITHOUT_CLASSIFICATION	0.007594067766019139	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.5619232615545652	DESIGN	0.4380767384454348	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9982642199794494	DESIGN	0.0017357800205506377	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9466620135797796	DESIGN	0.05333798642022032	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9815408441530445	DESIGN	0.01845915584695548	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999959999450634	DESIGN	4.000054936699057E-6	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9739786197975758	WITHOUT_CLASSIFICATION	0.026021380202424154	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9994946040442462	WITHOUT_CLASSIFICATION	5.053959557537968E-4	DESIGN
is this ok?	DESIGN	0.9951610240198038	WITHOUT_CLASSIFICATION	0.0048389759801962485	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999808071780619	DESIGN	1.919282193801469E-5	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9959790544037722	DESIGN	0.004020945596227763	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9979642418964776	WITHOUT_CLASSIFICATION	0.0020357581035224948	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9998898246769987	DESIGN	1.1017532300125866E-4	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.8387700709339415	DESIGN	0.16122992906605854	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.986407693477181	DESIGN	0.013592306522818969	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.6067930610817563	DESIGN	0.39320693891824376	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7668488837402649	DESIGN	0.23315111625973503	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.999689380665393	WITHOUT_CLASSIFICATION	3.106193346069963E-4	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9818482602737908	DESIGN	0.018151739726209284	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9860717314821438	DESIGN	0.013928268517856298	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5765310068990296	WITHOUT_CLASSIFICATION	0.42346899310097047	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.85787217104161	DESIGN	0.14212782895839002	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.659338160067183	DESIGN	0.34066183993281707	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9950205943561756	DESIGN	0.004979405643824402	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9956539570394346	DESIGN	0.004346042960565451	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9442609938238876	DESIGN	0.055739006176112244	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9123770876296036	DESIGN	0.08762291237039649	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9646868000386443	WITHOUT_CLASSIFICATION	0.03531319996135572	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9948698966175663	DESIGN	0.0051301033824336885	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.880229879727677	DESIGN	0.11977012027232295	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.5737877999281042	DESIGN	0.4262122000718958	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8912268414372361	DESIGN	0.10877315856276396	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.8913013240066107	DESIGN	0.10869867599338935	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9807800949221948	WITHOUT_CLASSIFICATION	0.019219905077805206	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.995509492730298	DESIGN	0.004490507269702003	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.8691760441497046	DESIGN	0.1308239558502953	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.99345531519399	DESIGN	0.006544684806010072	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9994505391853218	WITHOUT_CLASSIFICATION	5.49460814678307E-4	DESIGN
short cut check...	DESIGN	0.9984064233382531	WITHOUT_CLASSIFICATION	0.001593576661746968	DESIGN
todo : move to StringHelper?	DESIGN	0.9939621264349037	WITHOUT_CLASSIFICATION	0.006037873565096282	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.9557034038891344	WITHOUT_CLASSIFICATION	0.04429659611086558	DESIGN
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9996473602139245	DESIGN	3.526397860754366E-4	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999286755432885	DESIGN	7.132445671160228E-5	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9998687615787133	DESIGN	1.312384212867213E-4	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.98201090664727	DESIGN	0.017989093352729996	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.9980141861308967	DESIGN	0.0019858138691033725	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.8194141668244456	WITHOUT_CLASSIFICATION	0.18058583317555443	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9999237052911433	DESIGN	7.629470885667384E-5	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9953258512627492	WITHOUT_CLASSIFICATION	0.004674148737250733	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.7120001641607449	DESIGN	0.28799983583925515	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.6728631267644375	WITHOUT_CLASSIFICATION	0.3271368732355625	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.999901408680585	DESIGN	9.85913194150142E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9976205828870196	DESIGN	0.0023794171129802957	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9852669361760844	WITHOUT_CLASSIFICATION	0.01473306382391567	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999957472548086	DESIGN	4.252745191521842E-6	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9979973643716661	DESIGN	0.0020026356283338763	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9990712313223421	WITHOUT_CLASSIFICATION	9.287686776579701E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.558754012871623	WITHOUT_CLASSIFICATION	0.441245987128377	DESIGN
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.652335469206899	WITHOUT_CLASSIFICATION	0.34766453079310095	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9933698394031564	DESIGN	0.006630160596843573	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.6375903203860444	DESIGN	0.3624096796139557	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9923858318824702	DESIGN	0.007614168117529826	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9985977889786803	WITHOUT_CLASSIFICATION	0.001402211021319682	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.8395283174902408	DESIGN	0.16047168250975924	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9992196444398574	DESIGN	7.803555601425952E-4	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9987418776345395	DESIGN	0.0012581223654605691	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9937091216143887	WITHOUT_CLASSIFICATION	0.0062908783856113195	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9850865737258051	DESIGN	0.01491342627419501	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9954452495861484	DESIGN	0.004554750413851561	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.7532170729266376	WITHOUT_CLASSIFICATION	0.2467829270733623	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9990119169584335	DESIGN	9.880830415665775E-4	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9843338442733089	WITHOUT_CLASSIFICATION	0.015666155726691118	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.7409430917446964	WITHOUT_CLASSIFICATION	0.25905690825530364	DESIGN
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9872871158935305	DESIGN	0.012712884106469662	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.6959895311282687	WITHOUT_CLASSIFICATION	0.3040104688717312	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9995026397931026	DESIGN	4.973602068974562E-4	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.6330742628108186	WITHOUT_CLASSIFICATION	0.3669257371891815	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999998640096806	DESIGN	1.3599031942771409E-7	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.7352268015325714	WITHOUT_CLASSIFICATION	0.2647731984674285	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9989702748292062	DESIGN	0.0010297251707938407	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9998977462306101	WITHOUT_CLASSIFICATION	1.0225376938990966E-4	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.5825964733397357	WITHOUT_CLASSIFICATION	0.4174035266602642	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.6983302893511549	DESIGN	0.301669710648845	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.9296745962941632	DESIGN	0.0703254037058369	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999875835877	DESIGN	1.2416412370143535E-8	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999991205956	DESIGN	8.794044924133149E-10	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9536106581012569	DESIGN	0.04638934189874323	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999942012752	DESIGN	5.798724879041717E-9	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9733162239956448	DESIGN	0.02668377600435525	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999402923570698	WITHOUT_CLASSIFICATION	5.970764293013698E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999975121880863	WITHOUT_CLASSIFICATION	2.4878119137899574E-6	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999993289216562	DESIGN	6.710783438339616E-7	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9960273598699183	DESIGN	0.003972640130081633	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999989469691515	DESIGN	1.0530308485106391E-6	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.5189616287070439	DESIGN	0.48103837129295607	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9767416314134615	DESIGN	0.023258368586538576	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9887218742349146	DESIGN	0.011278125765085389	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9466620135797796	DESIGN	0.05333798642022032	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9509680543020194	DESIGN	0.049031945697980625	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9969980852747364	DESIGN	0.0030019147252634527	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9739786197975758	WITHOUT_CLASSIFICATION	0.026021380202424154	DESIGN
TODO: make this a bit nicer	DESIGN	0.9959790544037722	DESIGN	0.004020945596227763	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.8433844825999697	WITHOUT_CLASSIFICATION	0.15661551740003024	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9962856529678097	DESIGN	0.0037143470321902854	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9962856529678097	DESIGN	0.0037143470321902854	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9962856529678097	DESIGN	0.0037143470321902854	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9971511127090271	DESIGN	0.0028488872909730196	WITHOUT_CLASSIFICATION
