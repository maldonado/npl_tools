test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999495394805328	WITHOUT_CLASSIFICATION	5.046051946719898E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997058666960079	WITHOUT_CLASSIFICATION	2.941333039921244E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997058666960079	WITHOUT_CLASSIFICATION	2.941333039921244E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9996198858874652	WITHOUT_CLASSIFICATION	3.801141125347626E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9998553941023153	WITHOUT_CLASSIFICATION	1.4460589768472561E-4	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999992317294866	WITHOUT_CLASSIFICATION	7.682705133920018E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999992317294866	WITHOUT_CLASSIFICATION	7.682705133920018E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999965061633554	WITHOUT_CLASSIFICATION	3.493836644514356E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997957680695749	WITHOUT_CLASSIFICATION	2.0423193042503325E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.9999125965011153	WITHOUT_CLASSIFICATION	8.740349888464658E-5	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994355930138521	WITHOUT_CLASSIFICATION	5.644069861479472E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999658223861192	WITHOUT_CLASSIFICATION	3.4177613880868795E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999658223861192	WITHOUT_CLASSIFICATION	3.4177613880868795E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996735151603365	WITHOUT_CLASSIFICATION	3.2648483966351085E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9998672252075198	WITHOUT_CLASSIFICATION	1.3277479248015339E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9997141869381925	WITHOUT_CLASSIFICATION	2.8581306180751326E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9966148501968798	WITHOUT_CLASSIFICATION	0.0033851498031201477	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999199685030206	WITHOUT_CLASSIFICATION	8.003149697948699E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996514985957932	WITHOUT_CLASSIFICATION	3.485014042068608E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9996136431626892	WITHOUT_CLASSIFICATION	3.8635683731075E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9999493297668046	WITHOUT_CLASSIFICATION	5.067023319540541E-5	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9995884359738738	WITHOUT_CLASSIFICATION	4.115640261262037E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9987494131027622	WITHOUT_CLASSIFICATION	0.0012505868972378144	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996263927433259	WITHOUT_CLASSIFICATION	3.736072566740819E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996263927433259	WITHOUT_CLASSIFICATION	3.736072566740819E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9997523205910157	WITHOUT_CLASSIFICATION	2.476794089843374E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999728070278885	WITHOUT_CLASSIFICATION	2.719297211150497E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9999225587013862	WITHOUT_CLASSIFICATION	7.744129861370204E-5	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.997296348037321	WITHOUT_CLASSIFICATION	0.002703651962678878	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.9189810098686539	DESIGN	0.08101899013134607	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999919728175553	WITHOUT_CLASSIFICATION	8.027182444763362E-6	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9991820970915587	WITHOUT_CLASSIFICATION	8.179029084412911E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9993581727266619	WITHOUT_CLASSIFICATION	6.418272733381025E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9972031061927812	WITHOUT_CLASSIFICATION	0.0027968938072187428	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.9999153873823019	WITHOUT_CLASSIFICATION	8.461261769808675E-5	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999565464039623	WITHOUT_CLASSIFICATION	4.345359603785009E-5	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.9532895596115827	WITHOUT_CLASSIFICATION	0.0467104403884173	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.9276657707820701	WITHOUT_CLASSIFICATION	0.07233422921792987	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996826662497876	WITHOUT_CLASSIFICATION	3.173337502122529E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9995680827811353	WITHOUT_CLASSIFICATION	4.319172188646295E-4	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998008109676371	WITHOUT_CLASSIFICATION	1.9918903236290872E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9997084633138223	WITHOUT_CLASSIFICATION	2.9153668617765225E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999455256476647	WITHOUT_CLASSIFICATION	5.447435233530316E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.7935428060128477	WITHOUT_CLASSIFICATION	0.20645719398715232	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996695931618073	WITHOUT_CLASSIFICATION	3.3040683819267417E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996695931618073	WITHOUT_CLASSIFICATION	3.3040683819267417E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999455256476647	WITHOUT_CLASSIFICATION	5.447435233530316E-4	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9980054857971626	DESIGN	0.0019945142028373244	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9984820395676015	WITHOUT_CLASSIFICATION	0.00151796043239844	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998946025291187	WITHOUT_CLASSIFICATION	1.0539747088134388E-4	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9999924423707651	WITHOUT_CLASSIFICATION	7.5576292348830744E-6	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999361551237816	WITHOUT_CLASSIFICATION	6.38448762182844E-5	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.9998625972469085	WITHOUT_CLASSIFICATION	1.3740275309157986E-4	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9971589277074419	WITHOUT_CLASSIFICATION	0.00284107229255811	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.9999259231482029	WITHOUT_CLASSIFICATION	7.407685179706879E-5	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9981933566926174	WITHOUT_CLASSIFICATION	0.001806643307382661	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9971606699335009	WITHOUT_CLASSIFICATION	0.0028393300664990447	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996695931618073	WITHOUT_CLASSIFICATION	3.3040683819267417E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999911639949197	WITHOUT_CLASSIFICATION	8.836005080237678E-6	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9787420186204766	WITHOUT_CLASSIFICATION	0.021257981379523484	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9797344115180925	WITHOUT_CLASSIFICATION	0.02026558848190749	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9995914237683577	WITHOUT_CLASSIFICATION	4.085762316422614E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9970243588396003	WITHOUT_CLASSIFICATION	0.002975641160399641	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999820677729833	WITHOUT_CLASSIFICATION	1.7932227016697565E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998402931199958	WITHOUT_CLASSIFICATION	1.5970688000410194E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9998664390747161	WITHOUT_CLASSIFICATION	1.335609252840447E-4	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9993660496767015	WITHOUT_CLASSIFICATION	6.33950323298621E-4	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999924306474395	WITHOUT_CLASSIFICATION	7.56935256053679E-6	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9984948217765299	WITHOUT_CLASSIFICATION	0.0015051782234701638	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9994209402349644	WITHOUT_CLASSIFICATION	5.790597650355304E-4	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.7939176376456704	WITHOUT_CLASSIFICATION	0.20608236235432967	DESIGN
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9917605791351672	WITHOUT_CLASSIFICATION	0.00823942086483281	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.999751530721199	WITHOUT_CLASSIFICATION	2.4846927880094714E-4	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.987982948952512	WITHOUT_CLASSIFICATION	0.012017051047487971	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9966072188294663	WITHOUT_CLASSIFICATION	0.0033927811705336338	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999983512728043	WITHOUT_CLASSIFICATION	1.6487271957003754E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999998999451082	WITHOUT_CLASSIFICATION	1.0005489188799995E-7	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999743306715946	WITHOUT_CLASSIFICATION	2.5669328405464607E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9994384313798528	WITHOUT_CLASSIFICATION	5.615686201471592E-4	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994568869972944	WITHOUT_CLASSIFICATION	5.431130027056017E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9979523515098004	WITHOUT_CLASSIFICATION	0.0020476484901995376	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998423816141	WITHOUT_CLASSIFICATION	1.5761838590941861E-7	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9994568869972944	WITHOUT_CLASSIFICATION	5.431130027056017E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999964327332872	WITHOUT_CLASSIFICATION	3.567266712902266E-6	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999483766801824	WITHOUT_CLASSIFICATION	5.162331981762255E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999871971962717	WITHOUT_CLASSIFICATION	1.2802803728294287E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9994727754699932	WITHOUT_CLASSIFICATION	5.272245300067466E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981768012422261	WITHOUT_CLASSIFICATION	0.001823198757773921	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981768012422261	WITHOUT_CLASSIFICATION	0.001823198757773921	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996251494056312	WITHOUT_CLASSIFICATION	3.7485059436881873E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.9996977129221587	WITHOUT_CLASSIFICATION	3.02287077841276E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998203876536778	WITHOUT_CLASSIFICATION	1.7961234632222489E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.5977030321602779	DESIGN	0.40229696783972224	WITHOUT_CLASSIFICATION
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9984535528082602	WITHOUT_CLASSIFICATION	0.0015464471917398248	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998705261480998	WITHOUT_CLASSIFICATION	1.294738519002391E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9998042071831594	WITHOUT_CLASSIFICATION	1.9579281684054396E-4	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9990997630689341	WITHOUT_CLASSIFICATION	9.002369310658126E-4	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999822716502416	WITHOUT_CLASSIFICATION	1.7728349758521875E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999974680717576	WITHOUT_CLASSIFICATION	2.531928242416222E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999756184448445	WITHOUT_CLASSIFICATION	2.4381555155477103E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999756184448445	WITHOUT_CLASSIFICATION	2.4381555155477103E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999766976192778	WITHOUT_CLASSIFICATION	2.3302380722265788E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.9997162193417851	WITHOUT_CLASSIFICATION	2.8378065821489554E-4	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9998183099315419	WITHOUT_CLASSIFICATION	1.8169006845819035E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999756184448445	WITHOUT_CLASSIFICATION	2.4381555155477103E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999766976192778	WITHOUT_CLASSIFICATION	2.3302380722265788E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999766976192778	WITHOUT_CLASSIFICATION	2.3302380722265788E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9999081844262905	WITHOUT_CLASSIFICATION	9.181557370952596E-5	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.9050131264893896	WITHOUT_CLASSIFICATION	0.0949868735106104	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.9999997885254192	WITHOUT_CLASSIFICATION	2.1147458084351585E-7	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999757120653842	WITHOUT_CLASSIFICATION	2.428793461577456E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9888405780917022	WITHOUT_CLASSIFICATION	0.011159421908297858	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9888405780917022	WITHOUT_CLASSIFICATION	0.011159421908297858	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999098218004034	WITHOUT_CLASSIFICATION	9.017819959647517E-5	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9991426448569198	WITHOUT_CLASSIFICATION	8.57355143080094E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9997954516591349	WITHOUT_CLASSIFICATION	2.0454834086513872E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9994799732452186	WITHOUT_CLASSIFICATION	5.200267547813314E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9994799732452186	WITHOUT_CLASSIFICATION	5.200267547813314E-4	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.993515201718363	WITHOUT_CLASSIFICATION	0.0064847982816370045	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999969326661778	WITHOUT_CLASSIFICATION	3.0673338222134975E-6	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.998618523220038	WITHOUT_CLASSIFICATION	0.0013814767799619385	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.9999976551542901	WITHOUT_CLASSIFICATION	2.344845710018664E-6	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9994925203116609	WITHOUT_CLASSIFICATION	5.07479688339059E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999305568975054	WITHOUT_CLASSIFICATION	6.944310249464947E-5	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.9991090551920143	WITHOUT_CLASSIFICATION	8.909448079856369E-4	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9998040377653881	WITHOUT_CLASSIFICATION	1.9596223461188403E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.998618523220038	WITHOUT_CLASSIFICATION	0.0013814767799619385	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9997057388680415	WITHOUT_CLASSIFICATION	2.9426113195852124E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999619792132174	WITHOUT_CLASSIFICATION	3.802078678259193E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999619792132174	WITHOUT_CLASSIFICATION	3.802078678259193E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9991438699618438	WITHOUT_CLASSIFICATION	8.561300381561191E-4	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.9931478448885872	WITHOUT_CLASSIFICATION	0.006852155111412813	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9998629728458613	WITHOUT_CLASSIFICATION	1.3702715413866796E-4	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9954375370991619	WITHOUT_CLASSIFICATION	0.0045624629008380975	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9950468344393334	WITHOUT_CLASSIFICATION	0.0049531655606666085	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9996018225563256	WITHOUT_CLASSIFICATION	3.98177443674398E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.9995821282246163	WITHOUT_CLASSIFICATION	4.178717753836699E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.998962188271007	WITHOUT_CLASSIFICATION	0.001037811728992949	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.9996646724947095	WITHOUT_CLASSIFICATION	3.353275052905023E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999442049806547	WITHOUT_CLASSIFICATION	5.579501934521557E-5	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9999442049806547	WITHOUT_CLASSIFICATION	5.579501934521557E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999347779547243	WITHOUT_CLASSIFICATION	6.522204527570881E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.9999495394805328	WITHOUT_CLASSIFICATION	5.046051946719898E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9991899059557088	WITHOUT_CLASSIFICATION	8.100940442912503E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997058666960079	WITHOUT_CLASSIFICATION	2.941333039921244E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9993621293765745	WITHOUT_CLASSIFICATION	6.378706234254445E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9983457290822577	WITHOUT_CLASSIFICATION	0.0016542709177422964	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9998789604362146	WITHOUT_CLASSIFICATION	1.2103956378548812E-4	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9995093866427017	WITHOUT_CLASSIFICATION	4.90613357298338E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.999832822889758	WITHOUT_CLASSIFICATION	1.671771102419496E-4	DESIGN
new	WITHOUT_CLASSIFICATION	0.999782207640576	WITHOUT_CLASSIFICATION	2.1779235942395852E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997080984351194	WITHOUT_CLASSIFICATION	2.919015648805335E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9995559250689494	WITHOUT_CLASSIFICATION	4.4407493105065213E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9995093866427017	WITHOUT_CLASSIFICATION	4.90613357298338E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9990784451987054	WITHOUT_CLASSIFICATION	9.215548012945667E-4	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9997044502669946	WITHOUT_CLASSIFICATION	2.9554973300540397E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9998913995656817	WITHOUT_CLASSIFICATION	1.0860043431827822E-4	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9992062322205066	WITHOUT_CLASSIFICATION	7.93767779493294E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9975799174888444	WITHOUT_CLASSIFICATION	0.002420082511155622	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.999992317294866	WITHOUT_CLASSIFICATION	7.682705133920018E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9973007876578861	WITHOUT_CLASSIFICATION	0.002699212342113831	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997678319718123	WITHOUT_CLASSIFICATION	2.321680281877868E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.9992380130162407	WITHOUT_CLASSIFICATION	7.619869837593347E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9994487916938541	WITHOUT_CLASSIFICATION	5.512083061457513E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996240684985633	WITHOUT_CLASSIFICATION	3.7593150143659E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9996329324847759	WITHOUT_CLASSIFICATION	3.6706751522416574E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9997616363490217	WITHOUT_CLASSIFICATION	2.383636509782795E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999857184883496	WITHOUT_CLASSIFICATION	1.4281511650288358E-5	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9951945320847365	WITHOUT_CLASSIFICATION	0.0048054679152634856	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9996431313041527	WITHOUT_CLASSIFICATION	3.5686869584721295E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997058666960079	WITHOUT_CLASSIFICATION	2.941333039921244E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997058666960079	WITHOUT_CLASSIFICATION	2.941333039921244E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997080984351194	WITHOUT_CLASSIFICATION	2.919015648805335E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996240684985633	WITHOUT_CLASSIFICATION	3.7593150143659E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999965061633554	WITHOUT_CLASSIFICATION	3.493836644514356E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9998682120152436	WITHOUT_CLASSIFICATION	1.3178798475642795E-4	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9994571996036673	WITHOUT_CLASSIFICATION	5.42800396332713E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.999305517774767	WITHOUT_CLASSIFICATION	6.944822252329874E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9994411912657128	WITHOUT_CLASSIFICATION	5.58808734287245E-4	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9996676670394021	WITHOUT_CLASSIFICATION	3.3233296059789215E-4	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9996775790786021	WITHOUT_CLASSIFICATION	3.224209213978846E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9983687734837843	WITHOUT_CLASSIFICATION	0.00163122651621569	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9977972091936999	WITHOUT_CLASSIFICATION	0.002202790806300204	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9977972091936999	WITHOUT_CLASSIFICATION	0.002202790806300204	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9992649436499167	WITHOUT_CLASSIFICATION	7.350563500832795E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998819542831554	WITHOUT_CLASSIFICATION	1.1804571684461978E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9993889462553116	WITHOUT_CLASSIFICATION	6.110537446883855E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.998886187979129	WITHOUT_CLASSIFICATION	0.001113812020871054	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9986080627989298	WITHOUT_CLASSIFICATION	0.0013919372010701635	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9998683296617035	WITHOUT_CLASSIFICATION	1.3167033829650926E-4	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9993842870830038	WITHOUT_CLASSIFICATION	6.15712916996123E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9997957680695749	WITHOUT_CLASSIFICATION	2.0423193042503325E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9995219294906642	WITHOUT_CLASSIFICATION	4.7807050933588074E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9995219294906642	WITHOUT_CLASSIFICATION	4.7807050933588074E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9993884084417111	WITHOUT_CLASSIFICATION	6.115915582888984E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.999337532413866	WITHOUT_CLASSIFICATION	6.624675861339506E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9993884084417111	WITHOUT_CLASSIFICATION	6.115915582888984E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9997073931873064	WITHOUT_CLASSIFICATION	2.926068126936225E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9998192439058682	WITHOUT_CLASSIFICATION	1.80756094131808E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997058666960079	WITHOUT_CLASSIFICATION	2.941333039921244E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9997080984351194	WITHOUT_CLASSIFICATION	2.919015648805335E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996240684985633	WITHOUT_CLASSIFICATION	3.7593150143659E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996240684985633	WITHOUT_CLASSIFICATION	3.7593150143659E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9997183635042367	WITHOUT_CLASSIFICATION	2.816364957631846E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9993336347592937	WITHOUT_CLASSIFICATION	6.66365240706343E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.999927796616953	WITHOUT_CLASSIFICATION	7.220338304704852E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994355930138521	WITHOUT_CLASSIFICATION	5.644069861479472E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994355930138521	WITHOUT_CLASSIFICATION	5.644069861479472E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9987907111953884	WITHOUT_CLASSIFICATION	0.0012092888046115878	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9991790511666001	WITHOUT_CLASSIFICATION	8.209488333998116E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998551206810861	WITHOUT_CLASSIFICATION	1.4487931891392702E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.9997661098599476	WITHOUT_CLASSIFICATION	2.3389014005242316E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998502490926903	WITHOUT_CLASSIFICATION	1.4975090730967534E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9992948659373319	WITHOUT_CLASSIFICATION	7.05134062668229E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999658223861192	WITHOUT_CLASSIFICATION	3.4177613880868795E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996416267220958	WITHOUT_CLASSIFICATION	3.5837327790426155E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996416267220958	WITHOUT_CLASSIFICATION	3.5837327790426155E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996735151603365	WITHOUT_CLASSIFICATION	3.2648483966351085E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996735151603365	WITHOUT_CLASSIFICATION	3.2648483966351085E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9980869209127661	WITHOUT_CLASSIFICATION	0.0019130790872339649	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9980869209127661	WITHOUT_CLASSIFICATION	0.0019130790872339649	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9989856524534053	WITHOUT_CLASSIFICATION	0.0010143475465946665	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9989856524534053	WITHOUT_CLASSIFICATION	0.0010143475465946665	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994355930138521	WITHOUT_CLASSIFICATION	5.644069861479472E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999658223861192	WITHOUT_CLASSIFICATION	3.4177613880868795E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996416267220958	WITHOUT_CLASSIFICATION	3.5837327790426155E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996416267220958	WITHOUT_CLASSIFICATION	3.5837327790426155E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9996735151603365	WITHOUT_CLASSIFICATION	3.2648483966351085E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9980869209127661	WITHOUT_CLASSIFICATION	0.0019130790872339649	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9980869209127661	WITHOUT_CLASSIFICATION	0.0019130790872339649	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9989856524534053	WITHOUT_CLASSIFICATION	0.0010143475465946665	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9994149176595926	WITHOUT_CLASSIFICATION	5.850823404073973E-4	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.9995474303387057	WITHOUT_CLASSIFICATION	4.52569661294276E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9998067901271804	WITHOUT_CLASSIFICATION	1.9320987281961846E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9997177426800863	WITHOUT_CLASSIFICATION	2.822573199137601E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9998763799185221	WITHOUT_CLASSIFICATION	1.236200814779876E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997986431780471	WITHOUT_CLASSIFICATION	2.0135682195283834E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.9999823231636777	WITHOUT_CLASSIFICATION	1.7676836322260195E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9841358678971501	WITHOUT_CLASSIFICATION	0.015864132102849753	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.9999640430104185	WITHOUT_CLASSIFICATION	3.595698958152784E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9992658926844774	WITHOUT_CLASSIFICATION	7.341073155227104E-4	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.999918268400087	WITHOUT_CLASSIFICATION	8.173159991293093E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998813851949886	WITHOUT_CLASSIFICATION	1.1861480501148484E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9996251494056312	WITHOUT_CLASSIFICATION	3.7485059436881873E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997986431780471	WITHOUT_CLASSIFICATION	2.0135682195283834E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997986431780471	WITHOUT_CLASSIFICATION	2.0135682195283834E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997986431780471	WITHOUT_CLASSIFICATION	2.0135682195283834E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.989508260101677	WITHOUT_CLASSIFICATION	0.01049173989832288	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9988277959928956	WITHOUT_CLASSIFICATION	0.0011722040071043592	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9988277959928956	WITHOUT_CLASSIFICATION	0.0011722040071043592	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9984675709098987	WITHOUT_CLASSIFICATION	0.0015324290901013403	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9966057907473922	WITHOUT_CLASSIFICATION	0.0033942092526079094	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.9988448735142178	WITHOUT_CLASSIFICATION	0.0011551264857822	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9985605976762175	WITHOUT_CLASSIFICATION	0.0014394023237824193	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9985605976762175	WITHOUT_CLASSIFICATION	0.0014394023237824193	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9999199685030206	WITHOUT_CLASSIFICATION	8.003149697948699E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999243418627964	WITHOUT_CLASSIFICATION	7.565813720360502E-5	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.9999243418627964	WITHOUT_CLASSIFICATION	7.565813720360502E-5	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9956227735498457	WITHOUT_CLASSIFICATION	0.004377226450154276	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.9992665372399501	WITHOUT_CLASSIFICATION	7.334627600498949E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.9987494131027622	WITHOUT_CLASSIFICATION	0.0012505868972378144	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.9999200425008549	WITHOUT_CLASSIFICATION	7.995749914518255E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996514985957932	WITHOUT_CLASSIFICATION	3.485014042068608E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5282400527421738	WITHOUT_CLASSIFICATION	0.47175994725782633	DESIGN
ID	WITHOUT_CLASSIFICATION	0.999606900625078	WITHOUT_CLASSIFICATION	3.9309937492203103E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997542038023519	WITHOUT_CLASSIFICATION	2.4579619764813983E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9951250981140854	WITHOUT_CLASSIFICATION	0.004874901885914554	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9996897757560179	WITHOUT_CLASSIFICATION	3.1022424398208085E-4	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9994430355845422	WITHOUT_CLASSIFICATION	5.569644154577643E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.997296348037321	WITHOUT_CLASSIFICATION	0.002703651962678878	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999913241403002	WITHOUT_CLASSIFICATION	8.675859699769236E-6	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.999581580405073	WITHOUT_CLASSIFICATION	4.1841959492702063E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.999669762417873	WITHOUT_CLASSIFICATION	3.3023758212699753E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.999626178844076	WITHOUT_CLASSIFICATION	3.7382115592388024E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9996044208471302	WITHOUT_CLASSIFICATION	3.955791528698803E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995750124621301	WITHOUT_CLASSIFICATION	4.249875378698405E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997002801867586	WITHOUT_CLASSIFICATION	2.997198132414049E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.9987494131027622	WITHOUT_CLASSIFICATION	0.0012505868972378144	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999194796260985	WITHOUT_CLASSIFICATION	8.052037390145274E-5	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9998675870778111	WITHOUT_CLASSIFICATION	1.32412922188919E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996610090518494	WITHOUT_CLASSIFICATION	3.3899094815048803E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996514985957932	WITHOUT_CLASSIFICATION	3.485014042068608E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997002801867586	WITHOUT_CLASSIFICATION	2.997198132414049E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9999194796260985	WITHOUT_CLASSIFICATION	8.052037390145274E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996610090518494	WITHOUT_CLASSIFICATION	3.3899094815048803E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9987286332477708	WITHOUT_CLASSIFICATION	0.001271366752229133	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9996260347772312	WITHOUT_CLASSIFICATION	3.7396522276889163E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9987286332477708	WITHOUT_CLASSIFICATION	0.001271366752229133	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996263927433259	WITHOUT_CLASSIFICATION	3.736072566740819E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999902995418819	WITHOUT_CLASSIFICATION	9.700458118087955E-6	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999017684699393	WITHOUT_CLASSIFICATION	9.823153006072478E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9976299547479456	WITHOUT_CLASSIFICATION	0.002370045252054517	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.999848962712355	WITHOUT_CLASSIFICATION	1.5103728764484864E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999928188815521	WITHOUT_CLASSIFICATION	7.181118447968229E-6	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999688466413551	WITHOUT_CLASSIFICATION	3.115335864491183E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9998497976989359	WITHOUT_CLASSIFICATION	1.5020230106414307E-4	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999985485277582	WITHOUT_CLASSIFICATION	1.4514722418057568E-6	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999688466413551	WITHOUT_CLASSIFICATION	3.115335864491183E-5	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.999728070278885	WITHOUT_CLASSIFICATION	2.719297211150497E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.9999697013547362	WITHOUT_CLASSIFICATION	3.0298645263783215E-5	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997002801867586	WITHOUT_CLASSIFICATION	2.997198132414049E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.9990647463749722	WITHOUT_CLASSIFICATION	9.352536250278272E-4	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9999579117098254	WITHOUT_CLASSIFICATION	4.2088290174643016E-5	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9956444198460459	WITHOUT_CLASSIFICATION	0.004355580153954093	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9872081564241496	WITHOUT_CLASSIFICATION	0.012791843575850347	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9982789846088164	WITHOUT_CLASSIFICATION	0.0017210153911836295	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999713144338473	WITHOUT_CLASSIFICATION	2.8685566152675096E-5	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998515820740763	WITHOUT_CLASSIFICATION	1.484179259237048E-4	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998518698445946	WITHOUT_CLASSIFICATION	1.4813015540527522E-4	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9996681721563695	WITHOUT_CLASSIFICATION	3.318278436304513E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995540277189118	WITHOUT_CLASSIFICATION	4.4597228108816424E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9849489884403289	WITHOUT_CLASSIFICATION	0.015051011559671097	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.997296348037321	WITHOUT_CLASSIFICATION	0.002703651962678878	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9993843389563113	WITHOUT_CLASSIFICATION	6.156610436887041E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.998858054160819	WITHOUT_CLASSIFICATION	0.0011419458391810596	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9998724697532673	WITHOUT_CLASSIFICATION	1.2753024673272891E-4	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9997778680551432	WITHOUT_CLASSIFICATION	2.2213194485682218E-4	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.9997669627679528	WITHOUT_CLASSIFICATION	2.330372320470648E-4	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9992467840089703	WITHOUT_CLASSIFICATION	7.532159910298679E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999997409983167	WITHOUT_CLASSIFICATION	2.590016833100754E-7	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999722918896948	WITHOUT_CLASSIFICATION	2.7708110305245254E-5	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7181747939561172	WITHOUT_CLASSIFICATION	0.2818252060438829	DESIGN
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996986738096363	WITHOUT_CLASSIFICATION	3.013261903637836E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9993407037087335	WITHOUT_CLASSIFICATION	6.592962912665147E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9993407037087335	WITHOUT_CLASSIFICATION	6.592962912665147E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997363876060174	WITHOUT_CLASSIFICATION	2.636123939826983E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9998936886877816	WITHOUT_CLASSIFICATION	1.0631131221832776E-4	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9991198464657997	WITHOUT_CLASSIFICATION	8.801535342004348E-4	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9991827259093456	WITHOUT_CLASSIFICATION	8.172740906543509E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9992812504373421	WITHOUT_CLASSIFICATION	7.187495626579005E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.997782681722882	WITHOUT_CLASSIFICATION	0.0022173182771180098	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9996840562825032	WITHOUT_CLASSIFICATION	3.15943717496805E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999996881394376	WITHOUT_CLASSIFICATION	3.1186056237664253E-7	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9985097653268691	WITHOUT_CLASSIFICATION	0.0014902346731309178	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.9990250580699098	WITHOUT_CLASSIFICATION	9.74941930090262E-4	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9996503019529852	WITHOUT_CLASSIFICATION	3.496980470147976E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999909236943442	WITHOUT_CLASSIFICATION	9.07630565585959E-6	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9983998587502232	WITHOUT_CLASSIFICATION	0.001600141249776865	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.9837639443882655	WITHOUT_CLASSIFICATION	0.01623605561173437	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9873363007083205	WITHOUT_CLASSIFICATION	0.012663699291679499	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9987967073445249	WITHOUT_CLASSIFICATION	0.001203292655475126	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997395500078025	WITHOUT_CLASSIFICATION	2.604499921974856E-4	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9983342755197919	WITHOUT_CLASSIFICATION	0.0016657244802081132	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9827346360852013	WITHOUT_CLASSIFICATION	0.017265363914798777	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9996064142370648	WITHOUT_CLASSIFICATION	3.935857629352275E-4	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.999125821007419	WITHOUT_CLASSIFICATION	8.741789925811243E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9922730001515144	WITHOUT_CLASSIFICATION	0.007726999848485491	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9987967073445249	WITHOUT_CLASSIFICATION	0.001203292655475126	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9992237568717817	WITHOUT_CLASSIFICATION	7.762431282184274E-4	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998799714218137	WITHOUT_CLASSIFICATION	1.2002857818627967E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.9998782517749667	WITHOUT_CLASSIFICATION	1.2174822503328557E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.9999813363537581	WITHOUT_CLASSIFICATION	1.8663646241909233E-5	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.99821065780214	WITHOUT_CLASSIFICATION	0.0017893421978598886	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9983342755197919	WITHOUT_CLASSIFICATION	0.0016657244802081132	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9831627915520516	WITHOUT_CLASSIFICATION	0.01683720844794842	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9998417028756059	WITHOUT_CLASSIFICATION	1.5829712439403035E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.999393337858525	WITHOUT_CLASSIFICATION	6.066621414749034E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.999788581887855	WITHOUT_CLASSIFICATION	2.1141811214501571E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.999788581887855	WITHOUT_CLASSIFICATION	2.1141811214501571E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9997084633138223	WITHOUT_CLASSIFICATION	2.9153668617765225E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998082931270331	WITHOUT_CLASSIFICATION	1.9170687296697167E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9995952803986426	WITHOUT_CLASSIFICATION	4.0471960135739156E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.9995952803986426	WITHOUT_CLASSIFICATION	4.0471960135739156E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.7181747939561172	WITHOUT_CLASSIFICATION	0.2818252060438829	DESIGN
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9906254559005977	WITHOUT_CLASSIFICATION	0.009374544099402379	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984427494847318	WITHOUT_CLASSIFICATION	0.0015572505152682838	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999841334570549	WITHOUT_CLASSIFICATION	1.5866542945094936E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999347779547243	WITHOUT_CLASSIFICATION	6.522204527570881E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.9984427494847318	WITHOUT_CLASSIFICATION	0.0015572505152682838	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.999841334570549	WITHOUT_CLASSIFICATION	1.5866542945094936E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9982515786227637	WITHOUT_CLASSIFICATION	0.001748421377236378	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9957179377624101	WITHOUT_CLASSIFICATION	0.004282062237589847	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9954387082072914	WITHOUT_CLASSIFICATION	0.00456129179270861	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999574475689162	WITHOUT_CLASSIFICATION	4.2552431083738606E-5	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9915056494331731	WITHOUT_CLASSIFICATION	0.008494350566826866	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9300114586205577	WITHOUT_CLASSIFICATION	0.06998854137944231	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998521117643295	WITHOUT_CLASSIFICATION	1.4788823567036798E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9998521117643295	WITHOUT_CLASSIFICATION	1.4788823567036798E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9813168541213505	WITHOUT_CLASSIFICATION	0.018683145878649523	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999979416389433	WITHOUT_CLASSIFICATION	2.0583610566766246E-6	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.999386544056536	WITHOUT_CLASSIFICATION	6.134559434639615E-4	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999277489664896	WITHOUT_CLASSIFICATION	7.225103351035917E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9997278766446822	WITHOUT_CLASSIFICATION	2.7212335531780424E-4	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9986521450659708	WITHOUT_CLASSIFICATION	0.0013478549340292594	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999347779547243	WITHOUT_CLASSIFICATION	6.522204527570881E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9986521450659708	WITHOUT_CLASSIFICATION	0.0013478549340292594	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9995044830243729	WITHOUT_CLASSIFICATION	4.955169756271655E-4	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9995044830243729	WITHOUT_CLASSIFICATION	4.955169756271655E-4	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9976664693582934	WITHOUT_CLASSIFICATION	0.0023335306417066872	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9982515786227637	WITHOUT_CLASSIFICATION	0.001748421377236378	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9968259261194464	WITHOUT_CLASSIFICATION	0.0031740738805535653	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.7942878162109143	DESIGN	0.20571218378908576	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.6334861448155373	WITHOUT_CLASSIFICATION	0.36651385518446256	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997272939095413	WITHOUT_CLASSIFICATION	2.727060904586805E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9738819095690728	WITHOUT_CLASSIFICATION	0.02611809043092716	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9982515786227637	WITHOUT_CLASSIFICATION	0.001748421377236378	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997272939095413	WITHOUT_CLASSIFICATION	2.727060904586805E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9738819095690728	WITHOUT_CLASSIFICATION	0.02611809043092716	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9997711233921867	WITHOUT_CLASSIFICATION	2.288766078133224E-4	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998720834767912	WITHOUT_CLASSIFICATION	1.2791652320887686E-4	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999965842511659	WITHOUT_CLASSIFICATION	3.4157488341595E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9982515786227637	WITHOUT_CLASSIFICATION	0.001748421377236378	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9982515786227637	WITHOUT_CLASSIFICATION	0.001748421377236378	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.9995260928589469	WITHOUT_CLASSIFICATION	4.739071410531279E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.99936227110864	WITHOUT_CLASSIFICATION	6.3772889136001E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.999897612786599	WITHOUT_CLASSIFICATION	1.0238721340098843E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996826662497876	WITHOUT_CLASSIFICATION	3.173337502122529E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.999887403297305	WITHOUT_CLASSIFICATION	1.1259670269510857E-4	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999963920798247	WITHOUT_CLASSIFICATION	3.6079201751674692E-6	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.9999936409656942	WITHOUT_CLASSIFICATION	6.359034305685077E-6	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.999866666474193	WITHOUT_CLASSIFICATION	1.3333352580699158E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.9995892258614166	WITHOUT_CLASSIFICATION	4.1077413858330903E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9996337007704696	WITHOUT_CLASSIFICATION	3.6629922953029294E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9423789439729375	WITHOUT_CLASSIFICATION	0.05762105602706251	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.97974276817341	WITHOUT_CLASSIFICATION	0.020257231826589922	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9997245879137977	WITHOUT_CLASSIFICATION	2.754120862023272E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9972107283377403	WITHOUT_CLASSIFICATION	0.002789271662259758	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866444123318	WITHOUT_CLASSIFICATION	4.133555876681184E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999934960830701	WITHOUT_CLASSIFICATION	6.5039169298826215E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996826662497876	WITHOUT_CLASSIFICATION	3.173337502122529E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.9963754957452431	WITHOUT_CLASSIFICATION	0.0036245042547568755	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.998787881435864	WITHOUT_CLASSIFICATION	0.0012121185641359939	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9999102846874797	WITHOUT_CLASSIFICATION	8.971531252031048E-5	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999651637500329	WITHOUT_CLASSIFICATION	3.483624996727474E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995737461399348	WITHOUT_CLASSIFICATION	4.262538600652271E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995737461399348	WITHOUT_CLASSIFICATION	4.262538600652271E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9996826662497876	WITHOUT_CLASSIFICATION	3.173337502122529E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.999822207555392	WITHOUT_CLASSIFICATION	1.7779244460800533E-4	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9974087197058126	WITHOUT_CLASSIFICATION	0.0025912802941873083	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9900575963555474	WITHOUT_CLASSIFICATION	0.009942403644452652	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999473999416001	WITHOUT_CLASSIFICATION	5.260005839992067E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996313633494904	WITHOUT_CLASSIFICATION	3.6863665050953153E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998403561154616	WITHOUT_CLASSIFICATION	1.5964388453851123E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.9986329450331555	WITHOUT_CLASSIFICATION	0.0013670549668445794	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997922679858156	WITHOUT_CLASSIFICATION	2.0773201418436985E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999931174105875	WITHOUT_CLASSIFICATION	6.882589412519257E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999828975335903	WITHOUT_CLASSIFICATION	1.710246640974066E-5	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9652240018339575	WITHOUT_CLASSIFICATION	0.03477599816604248	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9996459925699115	WITHOUT_CLASSIFICATION	3.5400743008856756E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.999426467192522	WITHOUT_CLASSIFICATION	5.735328074779531E-4	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999732393192939	WITHOUT_CLASSIFICATION	2.6760680706098725E-5	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997958634513986	WITHOUT_CLASSIFICATION	2.0413654860130273E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9963026915817499	WITHOUT_CLASSIFICATION	0.0036973084182501024	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999588146759234	WITHOUT_CLASSIFICATION	4.118532407664734E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9892332076325081	WITHOUT_CLASSIFICATION	0.010766792367491888	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9995432899216116	WITHOUT_CLASSIFICATION	4.5671007838841716E-4	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999573337451101	WITHOUT_CLASSIFICATION	4.2666254889986824E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9989198314698696	WITHOUT_CLASSIFICATION	0.0010801685301302692	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9973210438546605	WITHOUT_CLASSIFICATION	0.0026789561453395747	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9984771857760169	WITHOUT_CLASSIFICATION	0.0015228142239832431	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996501530087541	WITHOUT_CLASSIFICATION	3.498469912458804E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997153055518501	WITHOUT_CLASSIFICATION	2.8469444814996185E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993315065794769	WITHOUT_CLASSIFICATION	6.684934205231656E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9462528986105447	WITHOUT_CLASSIFICATION	0.05374710138945524	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.6741766849553325	WITHOUT_CLASSIFICATION	0.32582331504466744	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997534392754944	WITHOUT_CLASSIFICATION	2.465607245056014E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975832886921084	WITHOUT_CLASSIFICATION	0.0024167113078915332	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935444030585446	WITHOUT_CLASSIFICATION	0.006455596941455341	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999259063139563	WITHOUT_CLASSIFICATION	7.409368604375235E-5	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996436193649244	WITHOUT_CLASSIFICATION	3.563806350756162E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993286196949286	WITHOUT_CLASSIFICATION	6.713803050713848E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9998630345814286	WITHOUT_CLASSIFICATION	1.3696541857137942E-4	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999512398262375	WITHOUT_CLASSIFICATION	4.8760173762504345E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9984245215007961	WITHOUT_CLASSIFICATION	0.001575478499204036	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993754274180721	WITHOUT_CLASSIFICATION	6.245725819280094E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9844804054601177	WITHOUT_CLASSIFICATION	0.015519594539882215	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999128449347628	WITHOUT_CLASSIFICATION	8.715506523720188E-4	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9998423524860623	WITHOUT_CLASSIFICATION	1.5764751393768022E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9997151078455102	WITHOUT_CLASSIFICATION	2.848921544897816E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.99999809623501	WITHOUT_CLASSIFICATION	1.90376498994795E-6	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9996046218620793	WITHOUT_CLASSIFICATION	3.953781379206964E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9995879063358658	WITHOUT_CLASSIFICATION	4.1209366413419587E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.9991928703191104	WITHOUT_CLASSIFICATION	8.071296808894477E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9950381028281882	WITHOUT_CLASSIFICATION	0.00496189717181176	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9996105519162208	WITHOUT_CLASSIFICATION	3.8944808377921585E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9952088685035918	WITHOUT_CLASSIFICATION	0.004791131496408174	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.9964625175398927	WITHOUT_CLASSIFICATION	0.003537482460107243	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9989471694827559	WITHOUT_CLASSIFICATION	0.0010528305172440768	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9988963572369586	WITHOUT_CLASSIFICATION	0.0011036427630414306	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994860909188055	WITHOUT_CLASSIFICATION	5.139090811945101E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994846961906038	WITHOUT_CLASSIFICATION	5.153038093962388E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996642246358963	WITHOUT_CLASSIFICATION	3.3577536410373264E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995774339590817	WITHOUT_CLASSIFICATION	4.2256604091830177E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9990357719029301	WITHOUT_CLASSIFICATION	9.642280970698579E-4	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999840070867504	WITHOUT_CLASSIFICATION	1.599291324966616E-5	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.999498864166921	WITHOUT_CLASSIFICATION	5.011358330788538E-4	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.9999991085832141	WITHOUT_CLASSIFICATION	8.914167859532432E-7	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999290282735688	WITHOUT_CLASSIFICATION	7.097172643120416E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9996279439530708	WITHOUT_CLASSIFICATION	3.720560469292618E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.999310248241681	WITHOUT_CLASSIFICATION	6.897517583188936E-4	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9995859000139713	WITHOUT_CLASSIFICATION	4.1409998602872565E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9526137667362367	WITHOUT_CLASSIFICATION	0.047386233263763435	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9574710327855714	WITHOUT_CLASSIFICATION	0.04252896721442845	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.993408800451234	WITHOUT_CLASSIFICATION	0.006591199548765951	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9984927119851292	WITHOUT_CLASSIFICATION	0.0015072880148707859	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9928636202605552	WITHOUT_CLASSIFICATION	0.00713637973944478	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999128449347628	WITHOUT_CLASSIFICATION	8.715506523720188E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9929483204321186	WITHOUT_CLASSIFICATION	0.007051679567881481	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999324209648864	WITHOUT_CLASSIFICATION	6.757903511357692E-5	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9996342805798012	WITHOUT_CLASSIFICATION	3.657194201988264E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9993911823361977	WITHOUT_CLASSIFICATION	6.088176638021677E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.9985139875657966	WITHOUT_CLASSIFICATION	0.0014860124342033756	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999210506901299	WITHOUT_CLASSIFICATION	7.894930987010979E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.9990357719029301	WITHOUT_CLASSIFICATION	9.642280970698579E-4	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9998783006195237	WITHOUT_CLASSIFICATION	1.2169938047642288E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9992453019206524	WITHOUT_CLASSIFICATION	7.546980793475246E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9991102321365917	WITHOUT_CLASSIFICATION	8.897678634083407E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993618657088771	WITHOUT_CLASSIFICATION	6.381342911228399E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9989925999299706	WITHOUT_CLASSIFICATION	0.0010074000700293908	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999229117224731	WITHOUT_CLASSIFICATION	7.708827752691534E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9886161692363901	WITHOUT_CLASSIFICATION	0.011383830763609925	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9997593385486097	WITHOUT_CLASSIFICATION	2.406614513902482E-4	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9981966171975802	WITHOUT_CLASSIFICATION	0.001803382802419736	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.999131408263928	WITHOUT_CLASSIFICATION	8.685917360719051E-4	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9995330839264402	WITHOUT_CLASSIFICATION	4.669160735598287E-4	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994155454369504	WITHOUT_CLASSIFICATION	5.844545630496868E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9988417798009039	WITHOUT_CLASSIFICATION	0.0011582201990960733	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9997588088776245	WITHOUT_CLASSIFICATION	2.411911223755674E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9997139938448947	WITHOUT_CLASSIFICATION	2.860061551053278E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999885965347569	WITHOUT_CLASSIFICATION	1.1403465243097833E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998408136849293	WITHOUT_CLASSIFICATION	1.5918631507077797E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9986179945724117	WITHOUT_CLASSIFICATION	0.0013820054275883425	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.9996114373173768	WITHOUT_CLASSIFICATION	3.885626826231769E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.9959561784139517	WITHOUT_CLASSIFICATION	0.004043821586048288	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.999379616958891	WITHOUT_CLASSIFICATION	6.203830411089361E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9965381955162408	WITHOUT_CLASSIFICATION	0.0034618044837590885	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999533756553795	WITHOUT_CLASSIFICATION	4.662434462048497E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.8413999445447115	DESIGN	0.15860005545528846	WITHOUT_CLASSIFICATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997238742766095	WITHOUT_CLASSIFICATION	2.7612572339050223E-4	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9997431048435816	WITHOUT_CLASSIFICATION	2.5689515641827415E-4	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9984366210923694	WITHOUT_CLASSIFICATION	0.0015633789076306326	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999128449347628	WITHOUT_CLASSIFICATION	8.715506523720188E-4	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9803154005597209	WITHOUT_CLASSIFICATION	0.019684599440279126	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999954640059113	WITHOUT_CLASSIFICATION	4.535994088663156E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9877138630055471	WITHOUT_CLASSIFICATION	0.01228613699445294	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9997116172798003	WITHOUT_CLASSIFICATION	2.8838272019967464E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9997229125427061	WITHOUT_CLASSIFICATION	2.770874572939616E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.999728169042467	WITHOUT_CLASSIFICATION	2.718309575330794E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999128449347628	WITHOUT_CLASSIFICATION	8.715506523720188E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996709119620589	WITHOUT_CLASSIFICATION	3.2908803794109574E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9998408136849293	WITHOUT_CLASSIFICATION	1.5918631507077797E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9989706413932563	WITHOUT_CLASSIFICATION	0.0010293586067436937	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999885965347569	WITHOUT_CLASSIFICATION	1.1403465243097833E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999990379154107	WITHOUT_CLASSIFICATION	9.62084589361893E-7	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9929415566674389	WITHOUT_CLASSIFICATION	0.00705844333256106	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999773477919338	WITHOUT_CLASSIFICATION	2.2652208066091384E-5	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9991102321365917	WITHOUT_CLASSIFICATION	8.897678634083407E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993618657088771	WITHOUT_CLASSIFICATION	6.381342911228399E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9989925999299706	WITHOUT_CLASSIFICATION	0.0010074000700293908	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999817697459047	WITHOUT_CLASSIFICATION	1.8230254095363358E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9998737726265298	WITHOUT_CLASSIFICATION	1.2622737347015416E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999507629344807	WITHOUT_CLASSIFICATION	4.923706551931698E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.999885965347569	WITHOUT_CLASSIFICATION	1.1403465243097833E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999990379154107	WITHOUT_CLASSIFICATION	9.62084589361893E-7	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999128449347628	WITHOUT_CLASSIFICATION	8.715506523720188E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.999229117224731	WITHOUT_CLASSIFICATION	7.708827752691534E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9886161692363901	WITHOUT_CLASSIFICATION	0.011383830763609925	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9997593385486097	WITHOUT_CLASSIFICATION	2.406614513902482E-4	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998014298172795	WITHOUT_CLASSIFICATION	1.9857018272040856E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997857554275932	WITHOUT_CLASSIFICATION	2.1424457240677136E-4	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999426239802701	WITHOUT_CLASSIFICATION	5.737601972988826E-5	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9981802566778256	WITHOUT_CLASSIFICATION	0.00181974332217437	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.812811391921559	DESIGN	0.1871886080784409	WITHOUT_CLASSIFICATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9986687362045731	WITHOUT_CLASSIFICATION	0.0013312637954269195	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9783291599962023	WITHOUT_CLASSIFICATION	0.021670840003797688	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9897494492338104	WITHOUT_CLASSIFICATION	0.010250550766189592	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9803173314167724	WITHOUT_CLASSIFICATION	0.01968266858322768	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993315065794769	WITHOUT_CLASSIFICATION	6.684934205231656E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9975832886921084	WITHOUT_CLASSIFICATION	0.0024167113078915332	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9985885608796025	WITHOUT_CLASSIFICATION	0.0014114391203975758	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9977932437211828	WITHOUT_CLASSIFICATION	0.0022067562788171792	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993068559660352	WITHOUT_CLASSIFICATION	6.931440339648451E-4	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9964414777736366	WITHOUT_CLASSIFICATION	0.0035585222263634793	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.9996260347772312	WITHOUT_CLASSIFICATION	3.7396522276889163E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9935444030585446	WITHOUT_CLASSIFICATION	0.006455596941455341	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9991903757482251	WITHOUT_CLASSIFICATION	8.096242517749955E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9526137667362367	WITHOUT_CLASSIFICATION	0.047386233263763435	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9888634309120646	WITHOUT_CLASSIFICATION	0.011136569087935264	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9977970161417781	WITHOUT_CLASSIFICATION	0.002202983858221963	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9998356312463493	WITHOUT_CLASSIFICATION	1.6436875365065447E-4	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.9990326008634175	WITHOUT_CLASSIFICATION	9.673991365825653E-4	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.9999423685667704	WITHOUT_CLASSIFICATION	5.763143322948431E-5	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9987286332477708	WITHOUT_CLASSIFICATION	0.001271366752229133	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998933425989829	WITHOUT_CLASSIFICATION	1.0665740101713781E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9997922679858156	WITHOUT_CLASSIFICATION	2.0773201418436985E-4	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9995046767651793	WITHOUT_CLASSIFICATION	4.953232348208285E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9668576694792103	WITHOUT_CLASSIFICATION	0.033142330520789645	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9999284933634351	WITHOUT_CLASSIFICATION	7.150663656487975E-5	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998198885700258	WITHOUT_CLASSIFICATION	1.801114299742835E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9999544406044278	WITHOUT_CLASSIFICATION	4.555939557226753E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9993575992308875	WITHOUT_CLASSIFICATION	6.424007691123862E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996762360159286	WITHOUT_CLASSIFICATION	3.237639840714451E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997197265523726	WITHOUT_CLASSIFICATION	2.8027344762739266E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999941745034085	WITHOUT_CLASSIFICATION	5.825496591499143E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9965899527936956	WITHOUT_CLASSIFICATION	0.0034100472063044586	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998635606416016	WITHOUT_CLASSIFICATION	1.3643935839835616E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997858519611128	WITHOUT_CLASSIFICATION	2.1414803888722666E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998696417738389	WITHOUT_CLASSIFICATION	1.3035822616121688E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999757435445607	WITHOUT_CLASSIFICATION	2.4256455439303025E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998550353971444	WITHOUT_CLASSIFICATION	1.449646028555662E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9957292373430688	WITHOUT_CLASSIFICATION	0.0042707626569311674	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.985953686299722	WITHOUT_CLASSIFICATION	0.014046313700278123	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999757435445607	WITHOUT_CLASSIFICATION	2.4256455439303025E-4	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9991062131165395	WITHOUT_CLASSIFICATION	8.937868834605103E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999926979159095	WITHOUT_CLASSIFICATION	7.302084090501793E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994630217416346	WITHOUT_CLASSIFICATION	5.369782583653705E-4	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9997525508243054	WITHOUT_CLASSIFICATION	2.474491756946407E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9191990398082295	WITHOUT_CLASSIFICATION	0.08080096019177047	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.9982693647189206	WITHOUT_CLASSIFICATION	0.0017306352810793708	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999610983494012	WITHOUT_CLASSIFICATION	3.890165059877209E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9998982878289785	WITHOUT_CLASSIFICATION	1.0171217102142797E-4	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9998982878289785	WITHOUT_CLASSIFICATION	1.0171217102142797E-4	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999196547002761	WITHOUT_CLASSIFICATION	8.034529972389977E-5	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.999537948843043	WITHOUT_CLASSIFICATION	4.620511569569305E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9992036348800214	WITHOUT_CLASSIFICATION	7.963651199785692E-4	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.9999426786795512	WITHOUT_CLASSIFICATION	5.7321320448827706E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9996505037784279	WITHOUT_CLASSIFICATION	3.494962215720259E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9995391958999851	WITHOUT_CLASSIFICATION	4.6080410001498863E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9985979263590001	WITHOUT_CLASSIFICATION	0.0014020736409997947	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9994772137837966	WITHOUT_CLASSIFICATION	5.227862162033586E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9978999154798059	WITHOUT_CLASSIFICATION	0.002100084520194111	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999754959066233	WITHOUT_CLASSIFICATION	2.4504093376722114E-5	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.99994750888055	WITHOUT_CLASSIFICATION	5.2491119450129485E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998778822869961	WITHOUT_CLASSIFICATION	1.2211771300386584E-4	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9997790785318906	WITHOUT_CLASSIFICATION	2.2092146810929157E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.9888610071728561	WITHOUT_CLASSIFICATION	0.011138992827143956	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999072917881022	WITHOUT_CLASSIFICATION	9.270821189776272E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9462093736513183	WITHOUT_CLASSIFICATION	0.053790626348681626	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9996325237976965	WITHOUT_CLASSIFICATION	3.674762023034687E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.9986653473390987	WITHOUT_CLASSIFICATION	0.0013346526609012363	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9981501050366675	WITHOUT_CLASSIFICATION	0.0018498949633324983	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.999328431106852	WITHOUT_CLASSIFICATION	6.715688931481018E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9994486180332016	WITHOUT_CLASSIFICATION	5.51381966798307E-4	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.999447668173249	WITHOUT_CLASSIFICATION	5.523318267509859E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.9996152451535812	WITHOUT_CLASSIFICATION	3.847548464187952E-4	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998663398225752	WITHOUT_CLASSIFICATION	1.3366017742482415E-4	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998566074097612	WITHOUT_CLASSIFICATION	1.4339259023878422E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9997997426629454	WITHOUT_CLASSIFICATION	2.002573370547301E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9995590662323668	WITHOUT_CLASSIFICATION	4.4093376763312353E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9992947029414003	WITHOUT_CLASSIFICATION	7.052970585995812E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.8405435016349457	WITHOUT_CLASSIFICATION	0.15945649836505427	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9996508802779908	WITHOUT_CLASSIFICATION	3.491197220091965E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.9998950376993552	WITHOUT_CLASSIFICATION	1.0496230064480333E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.999634111116898	WITHOUT_CLASSIFICATION	3.658888831019311E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.9998954780906332	WITHOUT_CLASSIFICATION	1.0452190936688984E-4	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9991253897019357	WITHOUT_CLASSIFICATION	8.746102980643561E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999871927422583	WITHOUT_CLASSIFICATION	1.280725774157636E-5	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9997995406711827	WITHOUT_CLASSIFICATION	2.0045932881731563E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9956861031982648	WITHOUT_CLASSIFICATION	0.004313896801735239	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9974408783353717	WITHOUT_CLASSIFICATION	0.0025591216646283317	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.5845656849003531	DESIGN	0.4154343150996469	WITHOUT_CLASSIFICATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999936710572419	WITHOUT_CLASSIFICATION	6.328942758078017E-6	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9968461762996972	WITHOUT_CLASSIFICATION	0.0031538237003027603	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9995330839264402	WITHOUT_CLASSIFICATION	4.669160735598287E-4	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9995330839264402	WITHOUT_CLASSIFICATION	4.669160735598287E-4	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9913794807617432	WITHOUT_CLASSIFICATION	0.00862051923825677	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9963236580654666	WITHOUT_CLASSIFICATION	0.003676341934533373	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9988656720851852	WITHOUT_CLASSIFICATION	0.0011343279148147455	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999952600358045	WITHOUT_CLASSIFICATION	4.7399641955557885E-6	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.9998454000469094	WITHOUT_CLASSIFICATION	1.54599953090674E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9981222395053271	WITHOUT_CLASSIFICATION	0.0018777604946728893	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999570203011318	WITHOUT_CLASSIFICATION	4.297969886819061E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9986596803097565	WITHOUT_CLASSIFICATION	0.0013403196902434826	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999367108197139	WITHOUT_CLASSIFICATION	6.328918028605808E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9962857001792541	WITHOUT_CLASSIFICATION	0.0037142998207457555	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999362618892124	WITHOUT_CLASSIFICATION	6.373811078771352E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9539480274244772	WITHOUT_CLASSIFICATION	0.046051972575522876	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997896287366326	WITHOUT_CLASSIFICATION	2.1037126336733808E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994552747874149	WITHOUT_CLASSIFICATION	5.447252125851488E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.9988580042385575	WITHOUT_CLASSIFICATION	0.001141995761442406	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9987033506436979	WITHOUT_CLASSIFICATION	0.0012966493563020634	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9994830214199452	WITHOUT_CLASSIFICATION	5.169785800548684E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9996239342069886	WITHOUT_CLASSIFICATION	3.7606579301135767E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9978004195991959	WITHOUT_CLASSIFICATION	0.0021995804008041156	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9994154717347399	WITHOUT_CLASSIFICATION	5.845282652601096E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9947694108136628	WITHOUT_CLASSIFICATION	0.0052305891863372676	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.999964064469211	WITHOUT_CLASSIFICATION	3.593553078897346E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9994154717347399	WITHOUT_CLASSIFICATION	5.845282652601096E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999107721187397	WITHOUT_CLASSIFICATION	8.922788126028677E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.9999944780221871	WITHOUT_CLASSIFICATION	5.521977812928255E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.9995276815840112	WITHOUT_CLASSIFICATION	4.7231841598880823E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9953666279957623	WITHOUT_CLASSIFICATION	0.004633372004237759	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9988154656067275	WITHOUT_CLASSIFICATION	0.001184534393272496	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.999996807251363	WITHOUT_CLASSIFICATION	3.1927486370073705E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994696268810651	WITHOUT_CLASSIFICATION	5.30373118934915E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9997639259185215	WITHOUT_CLASSIFICATION	2.3607408147838788E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9976591471958778	WITHOUT_CLASSIFICATION	0.002340852804122249	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9972255219860915	WITHOUT_CLASSIFICATION	0.0027744780139085535	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999687639308275	WITHOUT_CLASSIFICATION	3.123606917260162E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999207285098632	WITHOUT_CLASSIFICATION	7.927149013679302E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9817665372764951	WITHOUT_CLASSIFICATION	0.01823346272350489	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9999029259848179	WITHOUT_CLASSIFICATION	9.707401518208123E-5	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9979910168935235	WITHOUT_CLASSIFICATION	0.002008983106476372	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.7194326442687943	WITHOUT_CLASSIFICATION	0.28056735573120567	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.999716796517148	WITHOUT_CLASSIFICATION	2.832034828520398E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9998533843770304	WITHOUT_CLASSIFICATION	1.466156229696712E-4	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9996778825542927	WITHOUT_CLASSIFICATION	3.221174457072593E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.999456183181669	WITHOUT_CLASSIFICATION	5.438168183310454E-4	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.9995989346190054	WITHOUT_CLASSIFICATION	4.0106538099458813E-4	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999393894264034	WITHOUT_CLASSIFICATION	6.0610573596709854E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9990721197208938	WITHOUT_CLASSIFICATION	9.27880279106137E-4	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9933576653128167	WITHOUT_CLASSIFICATION	0.006642334687183295	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9992510406440399	WITHOUT_CLASSIFICATION	7.48959355960148E-4	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9998107048562072	WITHOUT_CLASSIFICATION	1.8929514379277277E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999995035611492	WITHOUT_CLASSIFICATION	4.964388507360089E-7	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9999017061966236	WITHOUT_CLASSIFICATION	9.829380337655558E-5	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9973932751303507	WITHOUT_CLASSIFICATION	0.0026067248696492497	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9999482605035391	WITHOUT_CLASSIFICATION	5.173949646087969E-5	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9993575992308875	WITHOUT_CLASSIFICATION	6.424007691123862E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997810913702235	WITHOUT_CLASSIFICATION	2.1890862977641447E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999499603126297	WITHOUT_CLASSIFICATION	5.003968737013442E-5	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.999933961795162	WITHOUT_CLASSIFICATION	6.603820483792269E-5	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999716166463036	WITHOUT_CLASSIFICATION	2.8383353696319184E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999427812225885	WITHOUT_CLASSIFICATION	5.7218777411568205E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9997625875257492	WITHOUT_CLASSIFICATION	2.3741247425081765E-4	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9116361487313496	WITHOUT_CLASSIFICATION	0.08836385126865044	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.9999569716241067	WITHOUT_CLASSIFICATION	4.302837589325873E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9942878683158209	WITHOUT_CLASSIFICATION	0.005712131684178979	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9819055997371483	WITHOUT_CLASSIFICATION	0.018094400262851633	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9997808713768785	WITHOUT_CLASSIFICATION	2.1912862312154765E-4	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.6493671275111079	WITHOUT_CLASSIFICATION	0.35063287248889213	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9997568229389331	WITHOUT_CLASSIFICATION	2.431770610669046E-4	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999801484330115	WITHOUT_CLASSIFICATION	1.9851566988459164E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999778815549781	WITHOUT_CLASSIFICATION	2.2118445021883047E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.9997903298197505	WITHOUT_CLASSIFICATION	2.096701802493992E-4	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999347109168711	WITHOUT_CLASSIFICATION	6.528908312887751E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9987068672693572	WITHOUT_CLASSIFICATION	0.0012931327306428214	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9973130929019998	WITHOUT_CLASSIFICATION	0.002686907098000247	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999411245722459	WITHOUT_CLASSIFICATION	5.8875427754021705E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9992081374832991	WITHOUT_CLASSIFICATION	7.918625167008816E-4	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9984852053399128	WITHOUT_CLASSIFICATION	0.0015147946600871363	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999909114546307	WITHOUT_CLASSIFICATION	9.088545369221863E-6	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9908402674864351	WITHOUT_CLASSIFICATION	0.009159732513564922	DESIGN
create one	WITHOUT_CLASSIFICATION	0.9997229802803507	WITHOUT_CLASSIFICATION	2.770197196493814E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.996360483798895	WITHOUT_CLASSIFICATION	0.003639516201105059	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9999022605525458	WITHOUT_CLASSIFICATION	9.773944745408333E-5	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.976627484259377	WITHOUT_CLASSIFICATION	0.02337251574062309	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9946364796314606	WITHOUT_CLASSIFICATION	0.00536352036853937	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998208884756788	WITHOUT_CLASSIFICATION	1.79111524321078E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996197736414434	WITHOUT_CLASSIFICATION	3.802263585566425E-4	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995843845376825	WITHOUT_CLASSIFICATION	4.156154623175221E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9691617949441099	WITHOUT_CLASSIFICATION	0.03083820505589005	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9995149932964996	WITHOUT_CLASSIFICATION	4.850067035003237E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999932477275345	WITHOUT_CLASSIFICATION	6.7522724655637175E-6	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9999640582581839	WITHOUT_CLASSIFICATION	3.594174181614455E-5	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9992320612149729	WITHOUT_CLASSIFICATION	7.679387850271581E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990850459018575	WITHOUT_CLASSIFICATION	9.149540981423652E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9992320612149729	WITHOUT_CLASSIFICATION	7.679387850271581E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990363857092545	WITHOUT_CLASSIFICATION	9.636142907455084E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9987216341945075	WITHOUT_CLASSIFICATION	0.001278365805492485	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9988588379263498	WITHOUT_CLASSIFICATION	0.0011411620736501659	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9932711472892473	WITHOUT_CLASSIFICATION	0.006728852710752633	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9940362249486627	WITHOUT_CLASSIFICATION	0.005963775051337195	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9988769929626321	WITHOUT_CLASSIFICATION	0.001123007037367809	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9991397491085598	WITHOUT_CLASSIFICATION	8.602508914402443E-4	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.9988173065359698	WITHOUT_CLASSIFICATION	0.0011826934640301792	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999795226720751	WITHOUT_CLASSIFICATION	2.0477327924909565E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9990030752789727	WITHOUT_CLASSIFICATION	9.969247210272355E-4	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9980936817884575	WITHOUT_CLASSIFICATION	0.0019063182115424833	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9797580100038885	WITHOUT_CLASSIFICATION	0.02024198999611153	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997103421606788	WITHOUT_CLASSIFICATION	2.8965783932122756E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.8406772990496112	WITHOUT_CLASSIFICATION	0.15932270095038892	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9869086951260383	WITHOUT_CLASSIFICATION	0.01309130487396175	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9948273246864053	WITHOUT_CLASSIFICATION	0.005172675313594563	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997526343917879	WITHOUT_CLASSIFICATION	2.4736560821210485E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997526343917879	WITHOUT_CLASSIFICATION	2.4736560821210485E-4	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9989933870486004	WITHOUT_CLASSIFICATION	0.001006612951399598	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9986427966014478	WITHOUT_CLASSIFICATION	0.0013572033985521474	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9995713747186212	WITHOUT_CLASSIFICATION	4.2862528137871674E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999807360911063	WITHOUT_CLASSIFICATION	1.926390889382943E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9994932765487958	WITHOUT_CLASSIFICATION	5.067234512041033E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9721923949604171	WITHOUT_CLASSIFICATION	0.027807605039582937	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.950044050190055	WITHOUT_CLASSIFICATION	0.04995594980994505	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.998960000662431	WITHOUT_CLASSIFICATION	0.001039999337568999	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999249391990618	WITHOUT_CLASSIFICATION	7.506080093819708E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997725225966682	WITHOUT_CLASSIFICATION	2.2747740333179165E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997579293188172	WITHOUT_CLASSIFICATION	2.4207068118269702E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999618129215591	WITHOUT_CLASSIFICATION	3.818707844085072E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999520462071861	WITHOUT_CLASSIFICATION	4.795379281387519E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998676711151843	WITHOUT_CLASSIFICATION	1.323288848156756E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999091332994193	WITHOUT_CLASSIFICATION	9.086670058069233E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.995305241792546	WITHOUT_CLASSIFICATION	0.004694758207453961	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.9988081602350394	WITHOUT_CLASSIFICATION	0.0011918397649606548	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9945062333876171	WITHOUT_CLASSIFICATION	0.00549376661238289	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9997709989072994	WITHOUT_CLASSIFICATION	2.2900109270052526E-4	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999654726207037	WITHOUT_CLASSIFICATION	3.452737929633163E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9989518449725725	WITHOUT_CLASSIFICATION	0.0010481550274275303	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999927018158319	WITHOUT_CLASSIFICATION	7.298184168203684E-6	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.999995303617696	WITHOUT_CLASSIFICATION	4.696382304041294E-6	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9620203080598697	WITHOUT_CLASSIFICATION	0.03797969194013026	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9998922305647264	WITHOUT_CLASSIFICATION	1.077694352735722E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9978388729395228	WITHOUT_CLASSIFICATION	0.002161127060477231	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9987838182611314	WITHOUT_CLASSIFICATION	0.0012161817388686355	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9981726635500621	WITHOUT_CLASSIFICATION	0.0018273364499379638	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.99978242789467	WITHOUT_CLASSIFICATION	2.175721053300859E-4	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9996054561606115	WITHOUT_CLASSIFICATION	3.9454383938852865E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9998851335759048	WITHOUT_CLASSIFICATION	1.1486642409527057E-4	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9997530999892144	WITHOUT_CLASSIFICATION	2.469000107856857E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998974309095157	WITHOUT_CLASSIFICATION	1.025690904843247E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9663727320549474	WITHOUT_CLASSIFICATION	0.03362726794505262	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994296919110046	WITHOUT_CLASSIFICATION	5.703080889954027E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9993490211754108	WITHOUT_CLASSIFICATION	6.509788245891398E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999442403710623	WITHOUT_CLASSIFICATION	5.575962893763571E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.989042336141074	WITHOUT_CLASSIFICATION	0.010957663858926155	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9997874313829284	WITHOUT_CLASSIFICATION	2.1256861707161478E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.999943190499999	WITHOUT_CLASSIFICATION	5.680950000095269E-5	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999327633285378	WITHOUT_CLASSIFICATION	6.723667146225142E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994740457656823	WITHOUT_CLASSIFICATION	5.259542343176581E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.99950756539509	WITHOUT_CLASSIFICATION	4.924346049100231E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9999364833187366	WITHOUT_CLASSIFICATION	6.351668126341407E-5	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999872876533935	WITHOUT_CLASSIFICATION	1.2712346606533774E-5	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9669634968073868	WITHOUT_CLASSIFICATION	0.033036503192613184	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9890336410735713	WITHOUT_CLASSIFICATION	0.01096635892642878	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999851733272485	WITHOUT_CLASSIFICATION	1.4826672751536088E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9995521727870976	WITHOUT_CLASSIFICATION	4.4782721290237496E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9834585908562096	WITHOUT_CLASSIFICATION	0.016541409143790424	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994740457656823	WITHOUT_CLASSIFICATION	5.259542343176581E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.999530043687743	WITHOUT_CLASSIFICATION	4.6995631225707214E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9932525692115497	WITHOUT_CLASSIFICATION	0.006747430788450271	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9995432112029566	WITHOUT_CLASSIFICATION	4.567887970433231E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.9994634075458868	WITHOUT_CLASSIFICATION	5.365924541132779E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996709119620589	WITHOUT_CLASSIFICATION	3.2908803794109574E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996709119620589	WITHOUT_CLASSIFICATION	3.2908803794109574E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999983135327083	WITHOUT_CLASSIFICATION	1.686467291628937E-6	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9994493894613353	WITHOUT_CLASSIFICATION	5.506105386646884E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998964139642176	WITHOUT_CLASSIFICATION	1.0358603578235678E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999099376839983	WITHOUT_CLASSIFICATION	9.006231600173001E-5	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9994434361661244	WITHOUT_CLASSIFICATION	5.565638338756025E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9998264682170821	WITHOUT_CLASSIFICATION	1.7353178291798298E-4	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9992280134165191	WITHOUT_CLASSIFICATION	7.719865834808515E-4	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9917992249639425	WITHOUT_CLASSIFICATION	0.008200775036057593	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.999931440419965	WITHOUT_CLASSIFICATION	6.85595800350824E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999107832876906	WITHOUT_CLASSIFICATION	8.92167123094534E-5	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999689931235435	WITHOUT_CLASSIFICATION	3.100687645650302E-5	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9988367667738577	WITHOUT_CLASSIFICATION	0.0011632332261422283	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998388664671697	WITHOUT_CLASSIFICATION	1.6113353283027992E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9926617888740114	WITHOUT_CLASSIFICATION	0.0073382111259886335	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.5201159769425685	WITHOUT_CLASSIFICATION	0.4798840230574315	DESIGN
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.9426814686747279	WITHOUT_CLASSIFICATION	0.057318531325272044	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9967408981229416	WITHOUT_CLASSIFICATION	0.003259101877058275	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9996990617302737	WITHOUT_CLASSIFICATION	3.0093826972630065E-4	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.9981156527394122	WITHOUT_CLASSIFICATION	0.0018843472605878397	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9928184638396534	WITHOUT_CLASSIFICATION	0.007181536160346618	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9997084633138223	WITHOUT_CLASSIFICATION	2.9153668617765225E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9993620441256227	WITHOUT_CLASSIFICATION	6.379558743772514E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999852238155094	WITHOUT_CLASSIFICATION	1.4776184490584006E-4	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.5715687565259834	WITHOUT_CLASSIFICATION	0.4284312434740167	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.9998352222353903	WITHOUT_CLASSIFICATION	1.6477776460964105E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998289988587137	WITHOUT_CLASSIFICATION	1.7100114128635794E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9989767597789365	WITHOUT_CLASSIFICATION	0.001023240221063462	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.975658397878752	WITHOUT_CLASSIFICATION	0.02434160212124804	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999941467617304	WITHOUT_CLASSIFICATION	5.853238269640205E-6	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9996264499930932	WITHOUT_CLASSIFICATION	3.735500069067857E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9999304996109549	WITHOUT_CLASSIFICATION	6.950038904511918E-5	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.545821602023124	DESIGN	0.45417839797687604	WITHOUT_CLASSIFICATION
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.8991600888588694	WITHOUT_CLASSIFICATION	0.10083991114113061	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999288180497906	WITHOUT_CLASSIFICATION	7.118195020941124E-5	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9998019748103699	WITHOUT_CLASSIFICATION	1.980251896300068E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9996264499930932	WITHOUT_CLASSIFICATION	3.735500069067857E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9992939678123753	WITHOUT_CLASSIFICATION	7.06032187624525E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.9999288180497906	WITHOUT_CLASSIFICATION	7.118195020941124E-5	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9975985088246294	WITHOUT_CLASSIFICATION	0.0024014911753705405	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9996106936471703	WITHOUT_CLASSIFICATION	3.8930635282978065E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997579293188172	WITHOUT_CLASSIFICATION	2.4207068118269702E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9997847560786217	WITHOUT_CLASSIFICATION	2.152439213782143E-4	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9987286332477708	WITHOUT_CLASSIFICATION	0.001271366752229133	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999125241572498	WITHOUT_CLASSIFICATION	8.747584275007201E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9915078528009968	WITHOUT_CLASSIFICATION	0.008492147199003243	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.9999960343535403	WITHOUT_CLASSIFICATION	3.965646459669902E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9992836001178872	WITHOUT_CLASSIFICATION	7.163998821128697E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.99992828085875	WITHOUT_CLASSIFICATION	7.171914125000953E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.999856909645256	WITHOUT_CLASSIFICATION	1.4309035474407216E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9995992020878671	WITHOUT_CLASSIFICATION	4.007979121329429E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996800710601389	WITHOUT_CLASSIFICATION	3.199289398611646E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9980785131743537	WITHOUT_CLASSIFICATION	0.001921486825646332	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9974933295963657	WITHOUT_CLASSIFICATION	0.0025066704036343177	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9970676779618032	WITHOUT_CLASSIFICATION	0.0029323220381967576	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9993002542455287	WITHOUT_CLASSIFICATION	6.997457544713333E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9992823147572307	WITHOUT_CLASSIFICATION	7.176852427692774E-4	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.998208307871908	WITHOUT_CLASSIFICATION	0.0017916921280921	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9998561513057229	WITHOUT_CLASSIFICATION	1.438486942770908E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9996399393313526	WITHOUT_CLASSIFICATION	3.6006066864733134E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994816755636218	WITHOUT_CLASSIFICATION	5.183244363782536E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9994463843902339	WITHOUT_CLASSIFICATION	5.536156097660452E-4	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9996668470663883	WITHOUT_CLASSIFICATION	3.331529336117123E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9992636344015048	WITHOUT_CLASSIFICATION	7.363655984952581E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.999859863201062	WITHOUT_CLASSIFICATION	1.40136798938001E-4	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9998835634686434	WITHOUT_CLASSIFICATION	1.1643653135662462E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9994146759632285	WITHOUT_CLASSIFICATION	5.853240367714304E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981199465853082	WITHOUT_CLASSIFICATION	0.0018800534146917347	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9980701203444171	WITHOUT_CLASSIFICATION	0.0019298796555830009	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9904126529054395	WITHOUT_CLASSIFICATION	0.009587347094560566	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999299447633061	WITHOUT_CLASSIFICATION	7.005523669382477E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9978160019153508	WITHOUT_CLASSIFICATION	0.002183998084649165	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996269845476776	WITHOUT_CLASSIFICATION	3.7301545232236254E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996269845476776	WITHOUT_CLASSIFICATION	3.7301545232236254E-4	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9970870501725437	WITHOUT_CLASSIFICATION	0.0029129498274562257	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9996225437006205	WITHOUT_CLASSIFICATION	3.774562993794188E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.9999830262317826	WITHOUT_CLASSIFICATION	1.6973768217414488E-5	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.999883802033603	WITHOUT_CLASSIFICATION	1.1619796639698968E-4	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.998194814956005	WITHOUT_CLASSIFICATION	0.0018051850439949801	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9645519657294126	WITHOUT_CLASSIFICATION	0.03544803427058749	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.995598332860011	WITHOUT_CLASSIFICATION	0.0044016671399890505	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999711438598483	WITHOUT_CLASSIFICATION	2.8856140151668624E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.999638188857365	WITHOUT_CLASSIFICATION	3.6181114263495373E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9997839490017535	WITHOUT_CLASSIFICATION	2.160509982464688E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.999805746470237	WITHOUT_CLASSIFICATION	1.9425352976312676E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999855092739965	WITHOUT_CLASSIFICATION	1.4490726003439785E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9994205941354416	WITHOUT_CLASSIFICATION	5.794058645583046E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996269845476776	WITHOUT_CLASSIFICATION	3.7301545232236254E-4	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9995678086055209	WITHOUT_CLASSIFICATION	4.321913944791373E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9960377786139555	WITHOUT_CLASSIFICATION	0.003962221386044518	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9681212534773804	WITHOUT_CLASSIFICATION	0.03187874652261957	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9975052451153942	WITHOUT_CLASSIFICATION	0.002494754884605856	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9999329865408024	WITHOUT_CLASSIFICATION	6.701345919757697E-5	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9996167704547959	WITHOUT_CLASSIFICATION	3.832295452040615E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.999966282532596	WITHOUT_CLASSIFICATION	3.3717467404009244E-5	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.999181979677854	WITHOUT_CLASSIFICATION	8.180203221460594E-4	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996699394250401	WITHOUT_CLASSIFICATION	3.300605749598655E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9900818747702548	WITHOUT_CLASSIFICATION	0.009918125229745339	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9986364641024992	WITHOUT_CLASSIFICATION	0.001363535897500856	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981199465853082	WITHOUT_CLASSIFICATION	0.0018800534146917347	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996269845476776	WITHOUT_CLASSIFICATION	3.7301545232236254E-4	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9998065646931215	WITHOUT_CLASSIFICATION	1.9343530687845206E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9977941204038987	WITHOUT_CLASSIFICATION	0.0022058795961013167	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9997755958865909	WITHOUT_CLASSIFICATION	2.2440411340917765E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9994084059353591	WITHOUT_CLASSIFICATION	5.915940646409362E-4	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9941988451733605	WITHOUT_CLASSIFICATION	0.005801154826639373	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9992664338098528	WITHOUT_CLASSIFICATION	7.335661901472096E-4	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9985910787001321	WITHOUT_CLASSIFICATION	0.0014089212998678207	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999773920418924	WITHOUT_CLASSIFICATION	2.260795810761536E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999533997935491	WITHOUT_CLASSIFICATION	4.6600206450973105E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.99951567157648	WITHOUT_CLASSIFICATION	4.843284235199434E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.999772282592336	WITHOUT_CLASSIFICATION	2.2771740766414178E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.99978242789467	WITHOUT_CLASSIFICATION	2.175721053300859E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9983585860458766	WITHOUT_CLASSIFICATION	0.0016414139541234064	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9982955619654929	WITHOUT_CLASSIFICATION	0.001704438034507109	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990363857092545	WITHOUT_CLASSIFICATION	9.636142907455084E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9998400186878151	WITHOUT_CLASSIFICATION	1.5998131218494205E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9998320176079042	WITHOUT_CLASSIFICATION	1.6798239209578854E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9991545898755295	WITHOUT_CLASSIFICATION	8.454101244704298E-4	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9998941023506468	WITHOUT_CLASSIFICATION	1.0589764935325142E-4	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9998082485756397	WITHOUT_CLASSIFICATION	1.9175142436032825E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987372620053807	WITHOUT_CLASSIFICATION	0.0012627379946193052	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987372620053807	WITHOUT_CLASSIFICATION	0.0012627379946193052	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.999957883462236	WITHOUT_CLASSIFICATION	4.21165377639753E-5	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.999404470638439	WITHOUT_CLASSIFICATION	5.955293615609898E-4	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999561115809289	WITHOUT_CLASSIFICATION	4.388841907113129E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9953740869367311	WITHOUT_CLASSIFICATION	0.004625913063268783	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997754913567019	WITHOUT_CLASSIFICATION	2.2450864329822616E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999934094997579	WITHOUT_CLASSIFICATION	6.590500242134197E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9986997565332614	WITHOUT_CLASSIFICATION	0.001300243466738687	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995148796187675	WITHOUT_CLASSIFICATION	4.851203812325157E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995148796187675	WITHOUT_CLASSIFICATION	4.851203812325157E-4	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998954149927374	WITHOUT_CLASSIFICATION	1.0458500726264562E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9997756046431509	WITHOUT_CLASSIFICATION	2.243953568491424E-4	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999150190034044	WITHOUT_CLASSIFICATION	8.498099659560133E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9993510735849224	WITHOUT_CLASSIFICATION	6.489264150776607E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9993510735849224	WITHOUT_CLASSIFICATION	6.489264150776607E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.9993510735849224	WITHOUT_CLASSIFICATION	6.489264150776607E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9973034972199023	WITHOUT_CLASSIFICATION	0.0026965027800975655	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.999884310672617	WITHOUT_CLASSIFICATION	1.1568932738313142E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.99997061678481	WITHOUT_CLASSIFICATION	2.9383215189923792E-5	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9998211627979506	WITHOUT_CLASSIFICATION	1.7883720204943157E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9984155626376643	WITHOUT_CLASSIFICATION	0.0015844373623357033	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996269845476776	WITHOUT_CLASSIFICATION	3.7301545232236254E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996269845476776	WITHOUT_CLASSIFICATION	3.7301545232236254E-4	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9566328455332946	WITHOUT_CLASSIFICATION	0.0433671544667055	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9998405863508256	WITHOUT_CLASSIFICATION	1.594136491744534E-4	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.964146231740934	WITHOUT_CLASSIFICATION	0.03585376825906603	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9999354598878055	WITHOUT_CLASSIFICATION	6.454011219452457E-5	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9916327189632353	WITHOUT_CLASSIFICATION	0.008367281036764674	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9987613082361303	WITHOUT_CLASSIFICATION	0.0012386917638696172	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9931300359035692	WITHOUT_CLASSIFICATION	0.006869964096430827	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9895856256963121	WITHOUT_CLASSIFICATION	0.01041437430368787	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9991608581572281	WITHOUT_CLASSIFICATION	8.391418427718657E-4	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9999419966759284	WITHOUT_CLASSIFICATION	5.800332407165988E-5	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.999988441792044	WITHOUT_CLASSIFICATION	1.1558207955992895E-5	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.9999025513974286	WITHOUT_CLASSIFICATION	9.744860257145949E-5	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9972256870503389	WITHOUT_CLASSIFICATION	0.0027743129496611385	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9972256870503389	WITHOUT_CLASSIFICATION	0.0027743129496611385	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9972256870503389	WITHOUT_CLASSIFICATION	0.0027743129496611385	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9972256870503389	WITHOUT_CLASSIFICATION	0.0027743129496611385	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9972256870503389	WITHOUT_CLASSIFICATION	0.0027743129496611385	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.998371852646234	WITHOUT_CLASSIFICATION	0.0016281473537659889	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.998371852646234	WITHOUT_CLASSIFICATION	0.0016281473537659889	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.998371852646234	WITHOUT_CLASSIFICATION	0.0016281473537659889	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.998371852646234	WITHOUT_CLASSIFICATION	0.0016281473537659889	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978570120992794	WITHOUT_CLASSIFICATION	0.0021429879007207487	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9987372620053807	WITHOUT_CLASSIFICATION	0.0012627379946193052	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9996122613808376	WITHOUT_CLASSIFICATION	3.877386191623595E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.998371852646234	WITHOUT_CLASSIFICATION	0.0016281473537659889	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9997893766380558	WITHOUT_CLASSIFICATION	2.106233619442125E-4	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9986596621651445	WITHOUT_CLASSIFICATION	0.0013403378348555675	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999878178998335	WITHOUT_CLASSIFICATION	1.2182100166510981E-4	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9996094076391343	WITHOUT_CLASSIFICATION	3.905923608657561E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.993795650512945	WITHOUT_CLASSIFICATION	0.006204349487054972	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9938840166298695	WITHOUT_CLASSIFICATION	0.0061159833701305176	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999988192796451	WITHOUT_CLASSIFICATION	1.1807203549344172E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.9796468659283349	WITHOUT_CLASSIFICATION	0.02035313407166501	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.9999970860913064	WITHOUT_CLASSIFICATION	2.913908693615834E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9994236923978075	WITHOUT_CLASSIFICATION	5.763076021924118E-4	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999879574191081	WITHOUT_CLASSIFICATION	1.2042580891948574E-5	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999072524700041	WITHOUT_CLASSIFICATION	9.274752999577914E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571852817573	WITHOUT_CLASSIFICATION	1.4281471824264245E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.999927421852028	WITHOUT_CLASSIFICATION	7.257814797210275E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.9464980040746908	WITHOUT_CLASSIFICATION	0.053501995925309215	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9956501719385471	WITHOUT_CLASSIFICATION	0.0043498280614528645	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.9999669894849782	WITHOUT_CLASSIFICATION	3.301051502180288E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9991438484124998	WITHOUT_CLASSIFICATION	8.561515875001965E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9991438484124998	WITHOUT_CLASSIFICATION	8.561515875001965E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9997294533790229	WITHOUT_CLASSIFICATION	2.7054662097717293E-4	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9997051462926094	WITHOUT_CLASSIFICATION	2.948537073905571E-4	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.999560098507174	WITHOUT_CLASSIFICATION	4.3990149282607783E-4	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9990872355507134	WITHOUT_CLASSIFICATION	9.127644492866273E-4	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9991382291583321	WITHOUT_CLASSIFICATION	8.617708416678539E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9600701839494604	WITHOUT_CLASSIFICATION	0.03992981605053957	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9979943116041193	WITHOUT_CLASSIFICATION	0.002005688395880709	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999839120910778	WITHOUT_CLASSIFICATION	1.6087908922150374E-5	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9997599752999233	WITHOUT_CLASSIFICATION	2.4002470007664626E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999095780970195	WITHOUT_CLASSIFICATION	9.042190298040847E-5	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9982338710607314	WITHOUT_CLASSIFICATION	0.0017661289392687535	DESIGN
/	WITHOUT_CLASSIFICATION	0.99978242789467	WITHOUT_CLASSIFICATION	2.175721053300859E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.9998533999366109	WITHOUT_CLASSIFICATION	1.4660006338915497E-4	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999705011398922	WITHOUT_CLASSIFICATION	2.9498860107801667E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9994661628781821	WITHOUT_CLASSIFICATION	5.338371218178996E-4	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999370366920234	WITHOUT_CLASSIFICATION	6.29633079765662E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988797110303	WITHOUT_CLASSIFICATION	1.1202889697199505E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988797110303	WITHOUT_CLASSIFICATION	1.1202889697199505E-6	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.9998484990135903	WITHOUT_CLASSIFICATION	1.5150098640966488E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9863617829627039	WITHOUT_CLASSIFICATION	0.013638217037296119	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9995892983872663	WITHOUT_CLASSIFICATION	4.107016127337869E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.9991234812721408	WITHOUT_CLASSIFICATION	8.765187278592955E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.9994543584766001	WITHOUT_CLASSIFICATION	5.456415233999263E-4	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.99549541092378	WITHOUT_CLASSIFICATION	0.004504589076220028	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9886924420033154	WITHOUT_CLASSIFICATION	0.011307557996684602	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999240971876336	WITHOUT_CLASSIFICATION	7.590281236639854E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998836580226863	WITHOUT_CLASSIFICATION	1.1634197731373518E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9989906553171353	WITHOUT_CLASSIFICATION	0.0010093446828646326	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999575849702896	WITHOUT_CLASSIFICATION	4.241502971037715E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.999240971876336	WITHOUT_CLASSIFICATION	7.590281236639854E-4	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.8871840213219654	WITHOUT_CLASSIFICATION	0.11281597867803463	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9989736053426891	WITHOUT_CLASSIFICATION	0.0010263946573108862	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.7990553552780101	WITHOUT_CLASSIFICATION	0.2009446447219899	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.999897010825813	WITHOUT_CLASSIFICATION	1.0298917418699657E-4	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9919138891211362	WITHOUT_CLASSIFICATION	0.008086110878863831	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9967976384153426	WITHOUT_CLASSIFICATION	0.0032023615846573654	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997269349769786	WITHOUT_CLASSIFICATION	2.7306502302141845E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999940353403909	WITHOUT_CLASSIFICATION	5.9646596091148595E-6	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9987374267722332	WITHOUT_CLASSIFICATION	0.0012625732277668183	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997040737256938	WITHOUT_CLASSIFICATION	2.959262743062293E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9998184048994201	WITHOUT_CLASSIFICATION	1.815951005798251E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9995697411616662	WITHOUT_CLASSIFICATION	4.3025883833377966E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998038916168017	WITHOUT_CLASSIFICATION	1.961083831982479E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9990328783813287	WITHOUT_CLASSIFICATION	9.671216186713816E-4	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9994301660498603	WITHOUT_CLASSIFICATION	5.698339501396543E-4	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9988156414790494	WITHOUT_CLASSIFICATION	0.0011843585209505604	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9976662262545418	WITHOUT_CLASSIFICATION	0.002333773745458171	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9969705677018781	WITHOUT_CLASSIFICATION	0.0030294322981219896	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9969705677018781	WITHOUT_CLASSIFICATION	0.0030294322981219896	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9997269349769786	WITHOUT_CLASSIFICATION	2.7306502302141845E-4	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9990407258099883	WITHOUT_CLASSIFICATION	9.592741900118411E-4	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.879566179021179	WITHOUT_CLASSIFICATION	0.12043382097882106	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9939161863635438	WITHOUT_CLASSIFICATION	0.006083813636456224	DESIGN
#2	WITHOUT_CLASSIFICATION	0.9996323085854862	WITHOUT_CLASSIFICATION	3.676914145136922E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.999835552621857	WITHOUT_CLASSIFICATION	1.6444737814306758E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999619792132174	WITHOUT_CLASSIFICATION	3.802078678259193E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999972994509169	WITHOUT_CLASSIFICATION	2.700549083136284E-6	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.999949405899867	WITHOUT_CLASSIFICATION	5.0594100133008795E-5	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9995030751063431	WITHOUT_CLASSIFICATION	4.969248936568511E-4	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9774560198389457	WITHOUT_CLASSIFICATION	0.022543980161054213	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999955764425741	WITHOUT_CLASSIFICATION	4.4235574260085735E-6	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9967909947779048	WITHOUT_CLASSIFICATION	0.003209005222095215	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.999413034025512	WITHOUT_CLASSIFICATION	5.869659744880582E-4	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9971389353573463	WITHOUT_CLASSIFICATION	0.002861064642653713	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999738921993182	WITHOUT_CLASSIFICATION	2.610780068179802E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.9990756867343121	WITHOUT_CLASSIFICATION	9.243132656879896E-4	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.9999621701335427	WITHOUT_CLASSIFICATION	3.7829866457312995E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999803642672586	WITHOUT_CLASSIFICATION	1.9635732741493337E-5	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999655400002819	WITHOUT_CLASSIFICATION	3.4459999718128074E-5	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.998638296619671	WITHOUT_CLASSIFICATION	0.0013617033803291325	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999566164659494	WITHOUT_CLASSIFICATION	4.338353405074762E-5	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9997122369150641	WITHOUT_CLASSIFICATION	2.8776308493593135E-4	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9994265265146322	WITHOUT_CLASSIFICATION	5.734734853678489E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999943098794829	WITHOUT_CLASSIFICATION	5.690120517115725E-6	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9978383433262237	WITHOUT_CLASSIFICATION	0.002161656673776405	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9995042144180672	WITHOUT_CLASSIFICATION	4.957855819328282E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9995241407563914	WITHOUT_CLASSIFICATION	4.758592436086332E-4	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9999376059642424	WITHOUT_CLASSIFICATION	6.239403575749806E-5	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999444408669654	WITHOUT_CLASSIFICATION	5.555913303456955E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.99968132305991	WITHOUT_CLASSIFICATION	3.186769400899465E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.999716721970514	WITHOUT_CLASSIFICATION	2.832780294860494E-4	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9997373399323171	WITHOUT_CLASSIFICATION	2.6266006768297246E-4	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.9999948231204386	WITHOUT_CLASSIFICATION	5.176879561379248E-6	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996445021897155	WITHOUT_CLASSIFICATION	3.554978102844951E-4	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9982197284073772	WITHOUT_CLASSIFICATION	0.0017802715926228006	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997810278424855	WITHOUT_CLASSIFICATION	2.1897215751444808E-4	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9995385872262658	WITHOUT_CLASSIFICATION	4.614127737341352E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9996532903754409	WITHOUT_CLASSIFICATION	3.4670962455906647E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.999629610481872	WITHOUT_CLASSIFICATION	3.703895181280356E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9972171736778285	WITHOUT_CLASSIFICATION	0.002782826322171599	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9997700379891575	WITHOUT_CLASSIFICATION	2.299620108423398E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9975633057715075	WITHOUT_CLASSIFICATION	0.0024366942284923423	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.8544160545788992	DESIGN	0.1455839454211007	WITHOUT_CLASSIFICATION
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9976181629288343	WITHOUT_CLASSIFICATION	0.0023818370711656297	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.9982899644160284	WITHOUT_CLASSIFICATION	0.0017100355839716253	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.9240101255644124	WITHOUT_CLASSIFICATION	0.0759898744355876	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999946044834956	WITHOUT_CLASSIFICATION	5.395516504455879E-6	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996763470560235	WITHOUT_CLASSIFICATION	3.2365294397644715E-4	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9991084471271455	WITHOUT_CLASSIFICATION	8.915528728544685E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9970905428176191	WITHOUT_CLASSIFICATION	0.0029094571823807935	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9964782722179311	WITHOUT_CLASSIFICATION	0.003521727782069024	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998836580226863	WITHOUT_CLASSIFICATION	1.1634197731373518E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8523384606166061	WITHOUT_CLASSIFICATION	0.14766153938339377	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.999738921993182	WITHOUT_CLASSIFICATION	2.610780068179802E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9984493068850552	WITHOUT_CLASSIFICATION	0.0015506931149447674	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9998844695206235	WITHOUT_CLASSIFICATION	1.1553047937659404E-4	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9996165473795904	WITHOUT_CLASSIFICATION	3.8345262040964814E-4	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.9990993171960181	WITHOUT_CLASSIFICATION	9.006828039818357E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9965284287620558	WITHOUT_CLASSIFICATION	0.0034715712379441697	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9913082565322258	WITHOUT_CLASSIFICATION	0.00869174346777422	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9912705919365233	WITHOUT_CLASSIFICATION	0.008729408063476773	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9995221922011913	WITHOUT_CLASSIFICATION	4.778077988086969E-4	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9756592708989754	WITHOUT_CLASSIFICATION	0.024340729101024562	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997441144089332	WITHOUT_CLASSIFICATION	2.5588559106680034E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9990540508311347	WITHOUT_CLASSIFICATION	9.459491688652763E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.747115130250228	WITHOUT_CLASSIFICATION	0.252884869749772	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9620275596503777	WITHOUT_CLASSIFICATION	0.037972440349622306	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9620275596503777	WITHOUT_CLASSIFICATION	0.037972440349622306	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9249176520544685	WITHOUT_CLASSIFICATION	0.07508234794553147	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9963640921506722	WITHOUT_CLASSIFICATION	0.0036359078493277274	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9970542579572829	WITHOUT_CLASSIFICATION	0.002945742042717158	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9999384513181312	WITHOUT_CLASSIFICATION	6.15486818687889E-5	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999476876065692	WITHOUT_CLASSIFICATION	5.231239343088449E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997281228447404	WITHOUT_CLASSIFICATION	2.7187715525958927E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.9991145315158274	WITHOUT_CLASSIFICATION	8.854684841724594E-4	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9985164389586043	WITHOUT_CLASSIFICATION	0.0014835610413957406	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999442100977087	WITHOUT_CLASSIFICATION	5.5789902291328544E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9983533917678088	WITHOUT_CLASSIFICATION	0.0016466082321912442	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9983533917678088	WITHOUT_CLASSIFICATION	0.0016466082321912442	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9990341144026994	WITHOUT_CLASSIFICATION	9.658855973006087E-4	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999193847666	WITHOUT_CLASSIFICATION	8.061523330860136E-8	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997630241211417	WITHOUT_CLASSIFICATION	2.369758788582996E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9994480965674847	WITHOUT_CLASSIFICATION	5.519034325153286E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9260196921494763	WITHOUT_CLASSIFICATION	0.07398030785052367	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9330726544128378	WITHOUT_CLASSIFICATION	0.06692734558716211	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.999996513638436	WITHOUT_CLASSIFICATION	3.486361564014567E-6	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999606906887801	WITHOUT_CLASSIFICATION	3.930931121990744E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999253231457244	WITHOUT_CLASSIFICATION	7.467685427568878E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9993859690761786	WITHOUT_CLASSIFICATION	6.140309238214015E-4	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.9999011278223942	WITHOUT_CLASSIFICATION	9.887217760577075E-5	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999705505213644	WITHOUT_CLASSIFICATION	2.9449478635630017E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9996149158179738	WITHOUT_CLASSIFICATION	3.850841820261614E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999585421395158	WITHOUT_CLASSIFICATION	4.1457860484128436E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997601285540315	WITHOUT_CLASSIFICATION	2.3987144596846168E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999828975335903	WITHOUT_CLASSIFICATION	1.710246640974066E-5	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9928319720704029	WITHOUT_CLASSIFICATION	0.007168027929597166	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9963852754420212	WITHOUT_CLASSIFICATION	0.003614724557978814	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994252634293889	WITHOUT_CLASSIFICATION	5.747365706111598E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999266048352405	WITHOUT_CLASSIFICATION	7.339516475943405E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.998787881435864	WITHOUT_CLASSIFICATION	0.0012121185641359939	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9991026930908966	WITHOUT_CLASSIFICATION	8.973069091034616E-4	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.842115674858328	WITHOUT_CLASSIFICATION	0.15788432514167206	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9997084633138223	WITHOUT_CLASSIFICATION	2.9153668617765225E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.9988674754855226	WITHOUT_CLASSIFICATION	0.0011325245144774944	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9988123458257062	WITHOUT_CLASSIFICATION	0.0011876541742938495	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9986043649693002	WITHOUT_CLASSIFICATION	0.0013956350306998482	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9995020829466849	WITHOUT_CLASSIFICATION	4.979170533151576E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998347841296784	WITHOUT_CLASSIFICATION	1.6521587032154896E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998071093617984	WITHOUT_CLASSIFICATION	1.928906382015699E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999974614306657	WITHOUT_CLASSIFICATION	2.5385693342743257E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9992001777932298	WITHOUT_CLASSIFICATION	7.998222067701225E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9976065093306082	WITHOUT_CLASSIFICATION	0.002393490669391744	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993068559660352	WITHOUT_CLASSIFICATION	6.931440339648451E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.5282400527421738	WITHOUT_CLASSIFICATION	0.47175994725782633	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998366392951665	WITHOUT_CLASSIFICATION	1.633607048334399E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999997653270389	WITHOUT_CLASSIFICATION	2.346729610837465E-7	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9996627067392511	WITHOUT_CLASSIFICATION	3.3729326074891254E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9944161585603737	WITHOUT_CLASSIFICATION	0.005583841439626336	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999688754001486	WITHOUT_CLASSIFICATION	3.112459985144027E-5	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998700427305155	WITHOUT_CLASSIFICATION	1.299572694845744E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9990760583126338	WITHOUT_CLASSIFICATION	9.239416873663033E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999486476502215	WITHOUT_CLASSIFICATION	5.1352349778454484E-5	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.6374636597759412	DESIGN	0.36253634022405884	WITHOUT_CLASSIFICATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9985794532601237	WITHOUT_CLASSIFICATION	0.0014205467398763882	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9852279190037138	WITHOUT_CLASSIFICATION	0.01477208099628611	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9998987210797974	WITHOUT_CLASSIFICATION	1.012789202025873E-4	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9992778601042963	WITHOUT_CLASSIFICATION	7.221398957036545E-4	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.9990185307589527	WITHOUT_CLASSIFICATION	9.814692410472072E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9998192859266443	WITHOUT_CLASSIFICATION	1.8071407335565077E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9773269761537146	WITHOUT_CLASSIFICATION	0.022673023846285396	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9987898102101899	WITHOUT_CLASSIFICATION	0.0012101897898101305	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9991217930273449	WITHOUT_CLASSIFICATION	8.782069726551373E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9996213656156522	WITHOUT_CLASSIFICATION	3.7863438434785864E-4	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997191387146216	WITHOUT_CLASSIFICATION	2.8086128537833314E-4	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.99996699915053	WITHOUT_CLASSIFICATION	3.300084946998737E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999993174339841	WITHOUT_CLASSIFICATION	6.825660158946152E-6	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9994891512657478	WITHOUT_CLASSIFICATION	5.108487342521229E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.999993174339841	WITHOUT_CLASSIFICATION	6.825660158946152E-6	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999970348792081	WITHOUT_CLASSIFICATION	2.965120791983609E-6	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999687566893437	WITHOUT_CLASSIFICATION	3.124331065635033E-5	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9998401513309086	WITHOUT_CLASSIFICATION	1.598486690914628E-4	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998919660617952	WITHOUT_CLASSIFICATION	1.0803393820484528E-4	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999774829533917	WITHOUT_CLASSIFICATION	2.251704660824371E-5	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9998401513309086	WITHOUT_CLASSIFICATION	1.598486690914628E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9996676422829682	WITHOUT_CLASSIFICATION	3.323577170316725E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9984777703731551	WITHOUT_CLASSIFICATION	0.0015222296268448854	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9996778515747017	WITHOUT_CLASSIFICATION	3.2214842529824776E-4	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9997512375730953	WITHOUT_CLASSIFICATION	2.487624269047269E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999895255560765	WITHOUT_CLASSIFICATION	1.0474443923485132E-5	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996549941342368	WITHOUT_CLASSIFICATION	3.450058657633167E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999881042498545	WITHOUT_CLASSIFICATION	1.1895750145572872E-5	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9983888561917795	DESIGN	0.0016111438082203854	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999947146619834	WITHOUT_CLASSIFICATION	5.285338016640091E-6	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999725231341284	WITHOUT_CLASSIFICATION	2.74768658715775E-5	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999655150228929	WITHOUT_CLASSIFICATION	3.448497710713811E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999685148791873	WITHOUT_CLASSIFICATION	3.1485120812715525E-5	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9998511568555819	WITHOUT_CLASSIFICATION	1.4884314441813214E-4	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.6618673025195504	WITHOUT_CLASSIFICATION	0.3381326974804496	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9995838651161792	WITHOUT_CLASSIFICATION	4.1613488382074345E-4	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9888713520210152	WITHOUT_CLASSIFICATION	0.011128647978984909	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9151709957747746	WITHOUT_CLASSIFICATION	0.08482900422522545	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9899613762905656	WITHOUT_CLASSIFICATION	0.010038623709434414	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9990145267004871	WITHOUT_CLASSIFICATION	9.854732995128903E-4	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9997898293471635	WITHOUT_CLASSIFICATION	2.1017065283636524E-4	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9985397429021515	WITHOUT_CLASSIFICATION	0.0014602570978483555	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9996027071548464	WITHOUT_CLASSIFICATION	3.9729284515353195E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999922126585415	WITHOUT_CLASSIFICATION	7.787341458500256E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.9995476676579704	WITHOUT_CLASSIFICATION	4.523323420294591E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9997393142780069	WITHOUT_CLASSIFICATION	2.606857219930988E-4	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.9997733252080816	WITHOUT_CLASSIFICATION	2.2667479191837577E-4	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9989023517004448	WITHOUT_CLASSIFICATION	0.0010976482995551972	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9995286981414033	WITHOUT_CLASSIFICATION	4.713018585967436E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.999872181392257	WITHOUT_CLASSIFICATION	1.2781860774307283E-4	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9992928772753337	WITHOUT_CLASSIFICATION	7.071227246662771E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.999922126585415	WITHOUT_CLASSIFICATION	7.787341458500256E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998307651484611	WITHOUT_CLASSIFICATION	1.6923485153883046E-4	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9998081679580332	WITHOUT_CLASSIFICATION	1.918320419667398E-4	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9962976336668705	WITHOUT_CLASSIFICATION	0.0037023663331294883	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9877138630055471	WITHOUT_CLASSIFICATION	0.01228613699445294	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9997898293471635	WITHOUT_CLASSIFICATION	2.1017065283636524E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9997904534098375	WITHOUT_CLASSIFICATION	2.0954659016259367E-4	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9621420753311399	WITHOUT_CLASSIFICATION	0.03785792466886011	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9986625978324927	WITHOUT_CLASSIFICATION	0.0013374021675073774	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999586368145695	WITHOUT_CLASSIFICATION	4.136318543034223E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999430816169289	WITHOUT_CLASSIFICATION	5.6918383071063524E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9986327738396279	WITHOUT_CLASSIFICATION	0.0013672261603720425	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8770972061248132	DESIGN	0.12290279387518671	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9983697305912869	WITHOUT_CLASSIFICATION	0.0016302694087132134	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9983848859226157	WITHOUT_CLASSIFICATION	0.001615114077384317	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9988003295131	WITHOUT_CLASSIFICATION	0.0011996704868999042	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9980967383194574	WITHOUT_CLASSIFICATION	0.001903261680542492	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998612815306474	WITHOUT_CLASSIFICATION	1.3871846935272015E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9997741251537312	WITHOUT_CLASSIFICATION	2.2587484626870487E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999418173987168	WITHOUT_CLASSIFICATION	5.818260128311077E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998183695234872	WITHOUT_CLASSIFICATION	1.816304765126294E-4	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9997860643601152	WITHOUT_CLASSIFICATION	2.1393563988482604E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9979313332715439	WITHOUT_CLASSIFICATION	0.0020686667284561026	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.9964798424296231	WITHOUT_CLASSIFICATION	0.0035201575703769326	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9924825293874787	WITHOUT_CLASSIFICATION	0.007517470612521192	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.997259597700395	WITHOUT_CLASSIFICATION	0.0027404022996049995	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985414589463237	WITHOUT_CLASSIFICATION	0.001458541053676266	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985414589463237	WITHOUT_CLASSIFICATION	0.001458541053676266	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998403561154616	WITHOUT_CLASSIFICATION	1.5964388453851096E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985414589463237	WITHOUT_CLASSIFICATION	0.001458541053676266	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9985414589463237	WITHOUT_CLASSIFICATION	0.001458541053676266	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.9966163695959426	WITHOUT_CLASSIFICATION	0.003383630404057355	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999999362823098	WITHOUT_CLASSIFICATION	6.371769024652574E-8	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997439642201386	WITHOUT_CLASSIFICATION	2.5603577986153245E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997439642201386	WITHOUT_CLASSIFICATION	2.5603577986153245E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9986329450331555	WITHOUT_CLASSIFICATION	0.0013670549668445794	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.9974716351205967	WITHOUT_CLASSIFICATION	0.0025283648794032967	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9991886709559122	WITHOUT_CLASSIFICATION	8.113290440878063E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.999983455954249	WITHOUT_CLASSIFICATION	1.654404575110081E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9991415858345347	WITHOUT_CLASSIFICATION	8.584141654653151E-4	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.999293423704649	WITHOUT_CLASSIFICATION	7.065762953509028E-4	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9998578216302324	WITHOUT_CLASSIFICATION	1.4217836976758213E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999372514308812	WITHOUT_CLASSIFICATION	6.274856911888889E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9968842482397884	WITHOUT_CLASSIFICATION	0.0031157517602115998	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999974785950121	WITHOUT_CLASSIFICATION	2.5214049878834114E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9997291609214243	WITHOUT_CLASSIFICATION	2.708390785757372E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9987855032617693	WITHOUT_CLASSIFICATION	0.0012144967382307318	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999932477275345	WITHOUT_CLASSIFICATION	6.7522724655637175E-6	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9998869762604035	WITHOUT_CLASSIFICATION	1.1302373959647906E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9964483938093788	WITHOUT_CLASSIFICATION	0.0035516061906211553	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.987862046631528	WITHOUT_CLASSIFICATION	0.012137953368472126	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.998041384439054	WITHOUT_CLASSIFICATION	0.0019586155609460877	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9998178945058017	WITHOUT_CLASSIFICATION	1.82105494198349E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999932477275345	WITHOUT_CLASSIFICATION	6.7522724655637175E-6	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9985397429021515	WITHOUT_CLASSIFICATION	0.0014602570978483555	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999652406066649	WITHOUT_CLASSIFICATION	3.475939333509811E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998550353971444	WITHOUT_CLASSIFICATION	1.449646028555662E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.999757435445607	WITHOUT_CLASSIFICATION	2.4256455439303025E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999705534388516	WITHOUT_CLASSIFICATION	2.9446561148423632E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999761104564056	WITHOUT_CLASSIFICATION	2.3889543594390256E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9988268152127593	WITHOUT_CLASSIFICATION	0.0011731847872406807	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9999083169536148	WITHOUT_CLASSIFICATION	9.168304638518726E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.999880719853944	WITHOUT_CLASSIFICATION	1.1928014605606133E-4	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999811676503333	WITHOUT_CLASSIFICATION	1.88323496666026E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999272911200549	WITHOUT_CLASSIFICATION	7.27088799451159E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9997585668761436	WITHOUT_CLASSIFICATION	2.4143312385646202E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9961475326488851	WITHOUT_CLASSIFICATION	0.003852467351114864	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.9998182953947048	WITHOUT_CLASSIFICATION	1.817046052950937E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9997144290352639	WITHOUT_CLASSIFICATION	2.855709647360693E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999742196397132	WITHOUT_CLASSIFICATION	2.5780360286766144E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9990565973570441	WITHOUT_CLASSIFICATION	9.434026429559818E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999145939263167	WITHOUT_CLASSIFICATION	8.540607368332679E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9981678500150283	WITHOUT_CLASSIFICATION	0.0018321499849717207	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9999379821210638	WITHOUT_CLASSIFICATION	6.201787893623515E-5	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9989277475195862	WITHOUT_CLASSIFICATION	0.0010722524804137885	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9979365643169911	WITHOUT_CLASSIFICATION	0.0020634356830089326	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.999982432671816	WITHOUT_CLASSIFICATION	1.7567328184094392E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.999880719853944	WITHOUT_CLASSIFICATION	1.1928014605606133E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999075110674374	WITHOUT_CLASSIFICATION	9.248893256269215E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9993542189391611	WITHOUT_CLASSIFICATION	6.457810608389565E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.9955573082287847	WITHOUT_CLASSIFICATION	0.004442691771215228	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9777484984094319	WITHOUT_CLASSIFICATION	0.022251501590568084	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9995980164768377	WITHOUT_CLASSIFICATION	4.019835231622645E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999564367223615	WITHOUT_CLASSIFICATION	4.356327763851227E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9988871644213745	WITHOUT_CLASSIFICATION	0.0011128355786255422	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999561588242252	WITHOUT_CLASSIFICATION	4.384117577478781E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9994777794240028	WITHOUT_CLASSIFICATION	5.222205759972024E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999229742123458	WITHOUT_CLASSIFICATION	7.702578765421385E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9987641467526955	WITHOUT_CLASSIFICATION	0.0012358532473044565	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9914919726095758	WITHOUT_CLASSIFICATION	0.008508027390424175	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999129982372389	WITHOUT_CLASSIFICATION	8.700176276107043E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999347779547243	WITHOUT_CLASSIFICATION	6.522204527570881E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9991668934153916	WITHOUT_CLASSIFICATION	8.331065846085285E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994842427948025	WITHOUT_CLASSIFICATION	5.157572051975161E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999229742123458	WITHOUT_CLASSIFICATION	7.702578765421385E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9976899359921263	WITHOUT_CLASSIFICATION	0.0023100640078736116	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.9596171305056816	WITHOUT_CLASSIFICATION	0.04038286949431826	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.999328431106852	WITHOUT_CLASSIFICATION	6.715688931481018E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9986398619546876	WITHOUT_CLASSIFICATION	0.0013601380453124143	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.9997650185940727	WITHOUT_CLASSIFICATION	2.3498140592724694E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9999449593190839	WITHOUT_CLASSIFICATION	5.5040680916153744E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999347779547243	WITHOUT_CLASSIFICATION	6.522204527570881E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999629631907307	WITHOUT_CLASSIFICATION	3.703680926924376E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999808608216084	WITHOUT_CLASSIFICATION	1.9139178391530993E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999177052202578	WITHOUT_CLASSIFICATION	8.229477974217679E-5	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997095862908415	WITHOUT_CLASSIFICATION	2.9041370915857474E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997095862908415	WITHOUT_CLASSIFICATION	2.9041370915857474E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997095862908415	WITHOUT_CLASSIFICATION	2.9041370915857474E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998246547656966	WITHOUT_CLASSIFICATION	1.7534523430348724E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9998246547656966	WITHOUT_CLASSIFICATION	1.7534523430348724E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9959811516856726	WITHOUT_CLASSIFICATION	0.00401884831432739	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9993336833354763	WITHOUT_CLASSIFICATION	6.663166645237375E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.995761587772666	WITHOUT_CLASSIFICATION	0.004238412227334097	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.998680968730524	WITHOUT_CLASSIFICATION	0.0013190312694760424	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.997854472145974	WITHOUT_CLASSIFICATION	0.0021455278540259376	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994900346986227	WITHOUT_CLASSIFICATION	5.099653013772316E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996374200682168	WITHOUT_CLASSIFICATION	3.6257993178314963E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9996053003239725	WITHOUT_CLASSIFICATION	3.9469967602744695E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998933780779352	WITHOUT_CLASSIFICATION	1.0662192206472582E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994900346986227	WITHOUT_CLASSIFICATION	5.099653013772316E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996374200682168	WITHOUT_CLASSIFICATION	3.6257993178314963E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9994153592862167	WITHOUT_CLASSIFICATION	5.846407137833606E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9997407718530976	WITHOUT_CLASSIFICATION	2.592281469024585E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9998413500864282	WITHOUT_CLASSIFICATION	1.5864991357178137E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9986280485622199	WITHOUT_CLASSIFICATION	0.0013719514377802105	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998356436644554	WITHOUT_CLASSIFICATION	1.643563355444906E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9448459002847227	WITHOUT_CLASSIFICATION	0.055154099715277204	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9996344852115071	WITHOUT_CLASSIFICATION	3.655147884928895E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.999059867060307	WITHOUT_CLASSIFICATION	9.401329396929425E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.7761804129274409	DESIGN	0.2238195870725591	WITHOUT_CLASSIFICATION
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9797462802792416	WITHOUT_CLASSIFICATION	0.020253719720758505	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9991786922366127	WITHOUT_CLASSIFICATION	8.213077633873536E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9990948562072041	WITHOUT_CLASSIFICATION	9.051437927959986E-4	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9990685644489752	WITHOUT_CLASSIFICATION	9.314355510247928E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.9994340013628981	WITHOUT_CLASSIFICATION	5.659986371018937E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996800710601389	WITHOUT_CLASSIFICATION	3.199289398611646E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9989826185042066	WITHOUT_CLASSIFICATION	0.0010173814957933657	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9973682605453619	WITHOUT_CLASSIFICATION	0.0026317394546381866	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9994542087880977	WITHOUT_CLASSIFICATION	5.457912119023192E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8595733049285011	WITHOUT_CLASSIFICATION	0.1404266950714988	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.9984281963403121	WITHOUT_CLASSIFICATION	0.001571803659687872	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9978731773051113	WITHOUT_CLASSIFICATION	0.0021268226948886813	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999759881599968	WITHOUT_CLASSIFICATION	2.40118400032221E-5	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9983533517444756	WITHOUT_CLASSIFICATION	0.0016466482555244069	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994543409173346	WITHOUT_CLASSIFICATION	5.456590826653492E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994625384196926	WITHOUT_CLASSIFICATION	5.374615803074299E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.5547522894175725	DESIGN	0.4452477105824275	WITHOUT_CLASSIFICATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996694399068032	WITHOUT_CLASSIFICATION	3.3056009319676425E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998359641241549	WITHOUT_CLASSIFICATION	1.640358758451009E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999362618892124	WITHOUT_CLASSIFICATION	6.373811078771352E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999362618892124	WITHOUT_CLASSIFICATION	6.373811078771352E-5	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9997518529947786	WITHOUT_CLASSIFICATION	2.481470052213305E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999976216533064	WITHOUT_CLASSIFICATION	2.3783466936251247E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9993399309705171	WITHOUT_CLASSIFICATION	6.600690294828914E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.99978242789467	WITHOUT_CLASSIFICATION	2.175721053300859E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9982448189697684	WITHOUT_CLASSIFICATION	0.0017551810302315794	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999755501504854	WITHOUT_CLASSIFICATION	2.4449849514674774E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.9995916713882275	WITHOUT_CLASSIFICATION	4.0832861177249113E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999184204595329	WITHOUT_CLASSIFICATION	8.157954046702607E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9996239342069886	WITHOUT_CLASSIFICATION	3.7606579301135767E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997633266427741	WITHOUT_CLASSIFICATION	2.3667335722591152E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997523312177298	WITHOUT_CLASSIFICATION	2.4766878227018763E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999705537666377	WITHOUT_CLASSIFICATION	2.944623336229409E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9883102091910189	WITHOUT_CLASSIFICATION	0.01168979080898114	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9937722364003145	WITHOUT_CLASSIFICATION	0.006227763599685446	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9850918573242446	WITHOUT_CLASSIFICATION	0.014908142675755397	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.9999966385010566	WITHOUT_CLASSIFICATION	3.361498943534005E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9987872078532072	WITHOUT_CLASSIFICATION	0.0012127921467928258	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9961936573657079	WITHOUT_CLASSIFICATION	0.0038063426342922076	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9970786286816501	WITHOUT_CLASSIFICATION	0.002921371318349894	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9769903322302544	WITHOUT_CLASSIFICATION	0.023009667769745574	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9850918573242446	WITHOUT_CLASSIFICATION	0.014908142675755397	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9850918573242446	WITHOUT_CLASSIFICATION	0.014908142675755397	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9982697869168543	WITHOUT_CLASSIFICATION	0.0017302130831457865	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9993427422931993	WITHOUT_CLASSIFICATION	6.572577068007347E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9932802605517852	WITHOUT_CLASSIFICATION	0.00671973944821486	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9973833904253233	WITHOUT_CLASSIFICATION	0.0026166095746766953	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571852817573	WITHOUT_CLASSIFICATION	1.4281471824264245E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9973682605453619	WITHOUT_CLASSIFICATION	0.0026317394546381866	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.9990254680259593	WITHOUT_CLASSIFICATION	9.745319740408395E-4	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994687171257318	WITHOUT_CLASSIFICATION	5.312828742680992E-4	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.998137352782122	WITHOUT_CLASSIFICATION	0.0018626472178780078	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977600447301934	WITHOUT_CLASSIFICATION	0.0022399552698066315	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.9999066689146661	WITHOUT_CLASSIFICATION	9.333108533387377E-5	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993745668984074	WITHOUT_CLASSIFICATION	6.254331015925097E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9985831403574162	WITHOUT_CLASSIFICATION	0.0014168596425837233	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9985831403574162	WITHOUT_CLASSIFICATION	0.0014168596425837233	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9985831403574162	WITHOUT_CLASSIFICATION	0.0014168596425837233	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9985831403574162	WITHOUT_CLASSIFICATION	0.0014168596425837233	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9974967653918295	WITHOUT_CLASSIFICATION	0.0025032346081703717	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999923976834686	WITHOUT_CLASSIFICATION	7.602316531419065E-6	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996301068491896	WITHOUT_CLASSIFICATION	3.698931508104139E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.9165803014318122	WITHOUT_CLASSIFICATION	0.0834196985681877	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9551886020662798	WITHOUT_CLASSIFICATION	0.04481139793372015	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996523922478311	WITHOUT_CLASSIFICATION	3.476077521688413E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996554875398628	WITHOUT_CLASSIFICATION	3.4451246013720096E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.5339709240713202	DESIGN	0.4660290759286799	WITHOUT_CLASSIFICATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9269006701218808	WITHOUT_CLASSIFICATION	0.07309932987811907	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996287071646718	WITHOUT_CLASSIFICATION	3.7129283532826376E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9996980897897906	WITHOUT_CLASSIFICATION	3.019102102094214E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9981736671791053	WITHOUT_CLASSIFICATION	0.0018263328208947592	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9989554575479414	WITHOUT_CLASSIFICATION	0.001044542452058651	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999303909098415	WITHOUT_CLASSIFICATION	6.960909015854287E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999303909098415	WITHOUT_CLASSIFICATION	6.960909015854287E-5	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9999303909098415	WITHOUT_CLASSIFICATION	6.960909015854287E-5	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9989314266047075	WITHOUT_CLASSIFICATION	0.001068573395292521	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9995348144894947	WITHOUT_CLASSIFICATION	4.651855105053898E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9745761026586446	WITHOUT_CLASSIFICATION	0.02542389734135544	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996196061690917	WITHOUT_CLASSIFICATION	3.803938309082772E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996196061690917	WITHOUT_CLASSIFICATION	3.803938309082772E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999686527613745	WITHOUT_CLASSIFICATION	3.134723862551369E-5	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997095862908415	WITHOUT_CLASSIFICATION	2.9041370915857474E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.99996488531991	WITHOUT_CLASSIFICATION	3.511468008991279E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9998321024739186	WITHOUT_CLASSIFICATION	1.6789752608133021E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.999221011729778	WITHOUT_CLASSIFICATION	7.789882702219708E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9918680894526613	WITHOUT_CLASSIFICATION	0.0081319105473388	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995866444123318	WITHOUT_CLASSIFICATION	4.133555876681184E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998625867229817	WITHOUT_CLASSIFICATION	1.3741327701835616E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9994301430627321	WITHOUT_CLASSIFICATION	5.698569372678964E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.999879031451668	WITHOUT_CLASSIFICATION	1.2096854833197374E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9969427089540734	WITHOUT_CLASSIFICATION	0.003057291045926574	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9969425616658726	WITHOUT_CLASSIFICATION	0.0030574383341273464	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9979509957071946	WITHOUT_CLASSIFICATION	0.002049004292805395	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999428797487513	WITHOUT_CLASSIFICATION	5.712025124873004E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999972997865749	WITHOUT_CLASSIFICATION	2.7002134250995695E-6	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999993609789009	WITHOUT_CLASSIFICATION	6.39021099213911E-7	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999935991017374	WITHOUT_CLASSIFICATION	6.400898262770232E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999968155370796	WITHOUT_CLASSIFICATION	3.1844629202975025E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9958309748580157	WITHOUT_CLASSIFICATION	0.0041690251419842055	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9994516751273581	WITHOUT_CLASSIFICATION	5.483248726418198E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9998092518163001	WITHOUT_CLASSIFICATION	1.9074818369995723E-4	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9997168136394122	WITHOUT_CLASSIFICATION	2.8318636058788024E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999529522633778	WITHOUT_CLASSIFICATION	4.7047736622318513E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.9999347109168711	WITHOUT_CLASSIFICATION	6.528908312887751E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.996521801702007	WITHOUT_CLASSIFICATION	0.0034781982979930604	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997944409133142	WITHOUT_CLASSIFICATION	2.0555908668596658E-4	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9993810306293112	WITHOUT_CLASSIFICATION	6.189693706888108E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9948042473445018	WITHOUT_CLASSIFICATION	0.005195752655498252	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.9990775656800062	WITHOUT_CLASSIFICATION	9.224343199937459E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9967408981229416	WITHOUT_CLASSIFICATION	0.003259101877058275	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9926261185160012	WITHOUT_CLASSIFICATION	0.007373881483998654	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999538898594906	WITHOUT_CLASSIFICATION	4.611014050930526E-5	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.997834562513865	WITHOUT_CLASSIFICATION	0.0021654374861349553	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9955106124114529	WITHOUT_CLASSIFICATION	0.004489387588547116	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997404205044113	WITHOUT_CLASSIFICATION	2.5957949558874497E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.8609533090432129	WITHOUT_CLASSIFICATION	0.13904669095678718	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.9925219737777133	WITHOUT_CLASSIFICATION	0.007478026222286595	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999890130785478	WITHOUT_CLASSIFICATION	1.0986921452167321E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9949834689461217	WITHOUT_CLASSIFICATION	0.005016531053878344	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9995941559443055	WITHOUT_CLASSIFICATION	4.0584405569449696E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997526343917879	WITHOUT_CLASSIFICATION	2.4736560821210485E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.99961322207658	WITHOUT_CLASSIFICATION	3.8677792341992997E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999770691212466	WITHOUT_CLASSIFICATION	2.2930878753339073E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.9998185604086011	WITHOUT_CLASSIFICATION	1.814395913988598E-4	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9977611452051048	WITHOUT_CLASSIFICATION	0.002238854794895124	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9987385204160695	WITHOUT_CLASSIFICATION	0.001261479583930636	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.9999790190305408	WITHOUT_CLASSIFICATION	2.0980969459280488E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999656683576031	WITHOUT_CLASSIFICATION	3.4331642396863786E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9996811657001958	WITHOUT_CLASSIFICATION	3.188342998041007E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9983994186030352	WITHOUT_CLASSIFICATION	0.0016005813969648228	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9994955916597477	WITHOUT_CLASSIFICATION	5.044083402522832E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.998345880055312	WITHOUT_CLASSIFICATION	0.0016541199446879927	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9981376188513886	WITHOUT_CLASSIFICATION	0.0018623811486113597	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9958792211956359	WITHOUT_CLASSIFICATION	0.004120778804364097	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9989717042911792	WITHOUT_CLASSIFICATION	0.0010282957088207786	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999977722510695	WITHOUT_CLASSIFICATION	2.227748930581143E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9905779619329084	WITHOUT_CLASSIFICATION	0.009422038067091527	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9996183263385763	WITHOUT_CLASSIFICATION	3.816736614236544E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.9975540665511032	WITHOUT_CLASSIFICATION	0.0024459334488968177	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9981914431387573	WITHOUT_CLASSIFICATION	0.0018085568612427774	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9997208159390214	WITHOUT_CLASSIFICATION	2.791840609785109E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.9212522689844151	WITHOUT_CLASSIFICATION	0.07874773101558494	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9984444042657459	WITHOUT_CLASSIFICATION	0.0015555957342540691	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9998198280909504	WITHOUT_CLASSIFICATION	1.8017190904962347E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9999429243151535	WITHOUT_CLASSIFICATION	5.707568484656548E-5	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.9934795815569737	WITHOUT_CLASSIFICATION	0.0065204184430262295	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.99987440359524	WITHOUT_CLASSIFICATION	1.2559640475990176E-4	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9998981313306854	WITHOUT_CLASSIFICATION	1.0186866931451418E-4	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9988335407758314	WITHOUT_CLASSIFICATION	0.0011664592241685933	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.997739659717939	WITHOUT_CLASSIFICATION	0.0022603402820609475	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.999997099601549	WITHOUT_CLASSIFICATION	2.90039845101415E-6	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9994015408712555	WITHOUT_CLASSIFICATION	5.984591287443678E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9993890138344588	WITHOUT_CLASSIFICATION	6.109861655413433E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9995852487742523	WITHOUT_CLASSIFICATION	4.147512257477789E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9574624866660103	WITHOUT_CLASSIFICATION	0.04253751333398974	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9980816857630911	WITHOUT_CLASSIFICATION	0.0019183142369089668	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9985103323155987	WITHOUT_CLASSIFICATION	0.001489667684401246	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.9377466995363657	WITHOUT_CLASSIFICATION	0.06225330046363434	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8498467104882188	DESIGN	0.15015328951178122	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9928770158557397	WITHOUT_CLASSIFICATION	0.00712298414426022	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9995914530216264	WITHOUT_CLASSIFICATION	4.085469783736074E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9986751714786384	WITHOUT_CLASSIFICATION	0.0013248285213617098	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9978602733623158	WITHOUT_CLASSIFICATION	0.0021397266376842524	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.9884647287861321	WITHOUT_CLASSIFICATION	0.01153527121386788	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999328109831943	WITHOUT_CLASSIFICATION	6.71890168056428E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9989547670883395	WITHOUT_CLASSIFICATION	0.0010452329116605126	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999361703546719	WITHOUT_CLASSIFICATION	6.38296453280644E-5	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9995186990664474	WITHOUT_CLASSIFICATION	4.813009335525503E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9997193001723639	WITHOUT_CLASSIFICATION	2.8069982763612416E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9978602549220734	WITHOUT_CLASSIFICATION	0.002139745077926682	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.999802459729638	WITHOUT_CLASSIFICATION	1.9754027036209703E-4	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9995475719035581	WITHOUT_CLASSIFICATION	4.524280964418218E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9988233373198774	WITHOUT_CLASSIFICATION	0.0011766626801225602	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.999370992962065	WITHOUT_CLASSIFICATION	6.290070379349549E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997344634854818	WITHOUT_CLASSIFICATION	2.655365145183136E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9997344634854818	WITHOUT_CLASSIFICATION	2.655365145183136E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.9999228747975746	WITHOUT_CLASSIFICATION	7.71252024255332E-5	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9928176468832896	WITHOUT_CLASSIFICATION	0.007182353116710543	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9991198741763974	WITHOUT_CLASSIFICATION	8.801258236026646E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.9969282455034609	WITHOUT_CLASSIFICATION	0.003071754496539019	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9997785424384824	WITHOUT_CLASSIFICATION	2.2145756151753632E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996325009267536	WITHOUT_CLASSIFICATION	3.6749907324631025E-4	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995824175016123	WITHOUT_CLASSIFICATION	4.175824983877326E-4	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9997386744267421	WITHOUT_CLASSIFICATION	2.6132557325780773E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.999485330202789	WITHOUT_CLASSIFICATION	5.146697972110663E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.998817760859653	WITHOUT_CLASSIFICATION	0.0011822391403469488	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998919684285039	WITHOUT_CLASSIFICATION	1.0803157149601808E-4	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.999994597873439	WITHOUT_CLASSIFICATION	5.402126560996383E-6	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9997599031924714	WITHOUT_CLASSIFICATION	2.4009680752847242E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999861160060177	WITHOUT_CLASSIFICATION	1.3883993982240968E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.999767478207029	WITHOUT_CLASSIFICATION	2.3252179297097325E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.999991012317189	WITHOUT_CLASSIFICATION	8.987682810936065E-6	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9892642696444094	WITHOUT_CLASSIFICATION	0.0107357303555906	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9892642696444094	WITHOUT_CLASSIFICATION	0.0107357303555906	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999888101922242	WITHOUT_CLASSIFICATION	1.118980777586425E-5	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.998279502946533	WITHOUT_CLASSIFICATION	0.0017204970534670436	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998962443072877	WITHOUT_CLASSIFICATION	1.0375569271234933E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996702440600097	WITHOUT_CLASSIFICATION	3.297559399903283E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998283852099598	WITHOUT_CLASSIFICATION	1.7161479004024473E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9998289988587137	WITHOUT_CLASSIFICATION	1.7100114128635794E-4	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999958162863026	WITHOUT_CLASSIFICATION	4.1837136974013396E-5	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9998588010215665	WITHOUT_CLASSIFICATION	1.4119897843350987E-4	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998610238346959	WITHOUT_CLASSIFICATION	1.389761653041208E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9981924045659029	WITHOUT_CLASSIFICATION	0.0018075954340970785	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9981924045659029	WITHOUT_CLASSIFICATION	0.0018075954340970785	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999747443911327	WITHOUT_CLASSIFICATION	2.5255608867360767E-5	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.9992740796021254	WITHOUT_CLASSIFICATION	7.259203978745221E-4	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9997084633138223	WITHOUT_CLASSIFICATION	2.9153668617765225E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999690222037585	WITHOUT_CLASSIFICATION	3.097779624144246E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9997084633138223	WITHOUT_CLASSIFICATION	2.9153668617765225E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999998097470402	WITHOUT_CLASSIFICATION	1.902529597395509E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.9263740103643247	WITHOUT_CLASSIFICATION	0.07362598963567539	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9995476485221689	WITHOUT_CLASSIFICATION	4.523514778310184E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9978570120992794	WITHOUT_CLASSIFICATION	0.0021429879007207487	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996269845476776	WITHOUT_CLASSIFICATION	3.7301545232236254E-4	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9977106825979013	WITHOUT_CLASSIFICATION	0.0022893174020986113	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.9681212534773804	WITHOUT_CLASSIFICATION	0.03187874652261957	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9994084059353591	WITHOUT_CLASSIFICATION	5.915940646409362E-4	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9991285474206297	WITHOUT_CLASSIFICATION	8.714525793703083E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9972256870503389	WITHOUT_CLASSIFICATION	0.0027743129496611385	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9963852754420212	WITHOUT_CLASSIFICATION	0.003614724557978814	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9994926111196357	WITHOUT_CLASSIFICATION	5.073888803642533E-4	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997896287366326	WITHOUT_CLASSIFICATION	2.1037126336733808E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998939396590344	WITHOUT_CLASSIFICATION	1.0606034096558915E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9887900245503439	WITHOUT_CLASSIFICATION	0.011209975449656009	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9996901169981828	WITHOUT_CLASSIFICATION	3.0988300181727273E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.9994420276579966	WITHOUT_CLASSIFICATION	5.579723420034693E-4	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.998371852646234	WITHOUT_CLASSIFICATION	0.0016281473537659889	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999532978411734	WITHOUT_CLASSIFICATION	4.670215882665731E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992310863404383	WITHOUT_CLASSIFICATION	7.689136595615944E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9996658091505415	WITHOUT_CLASSIFICATION	3.341908494584526E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.998363396769617	WITHOUT_CLASSIFICATION	0.0016366032303829405	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999907468437104	WITHOUT_CLASSIFICATION	9.25315628969084E-6	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9962068823486218	WITHOUT_CLASSIFICATION	0.0037931176513783934	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9991822064504869	WITHOUT_CLASSIFICATION	8.177935495131296E-4	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999988797110303	WITHOUT_CLASSIFICATION	1.1202889697199505E-6	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.7516211547479634	WITHOUT_CLASSIFICATION	0.2483788452520366	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9992143999065662	WITHOUT_CLASSIFICATION	7.85600093433664E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9953724652164353	WITHOUT_CLASSIFICATION	0.004627534783564735	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9966840374098921	WITHOUT_CLASSIFICATION	0.003315962590107967	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999884654196851	WITHOUT_CLASSIFICATION	1.1534580314874396E-5	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9990211377580809	WITHOUT_CLASSIFICATION	9.788622419191018E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9992399064480686	WITHOUT_CLASSIFICATION	7.600935519314587E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9992399064480686	WITHOUT_CLASSIFICATION	7.600935519314587E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.999697348328867	WITHOUT_CLASSIFICATION	3.0265167113298466E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9951250981140854	WITHOUT_CLASSIFICATION	0.004874901885914554	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998865597304332	WITHOUT_CLASSIFICATION	1.134402695668554E-4	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.999529637484562	WITHOUT_CLASSIFICATION	4.703625154379212E-4	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9963596578870885	WITHOUT_CLASSIFICATION	0.0036403421129116396	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9996497124362742	WITHOUT_CLASSIFICATION	3.502875637258431E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9991836116684576	WITHOUT_CLASSIFICATION	8.163883315423373E-4	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998148143463471	WITHOUT_CLASSIFICATION	1.8518565365276336E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.999697348328867	WITHOUT_CLASSIFICATION	3.0265167113298466E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9951250981140854	WITHOUT_CLASSIFICATION	0.004874901885914554	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999664616900907	WITHOUT_CLASSIFICATION	3.3538309909284314E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.999171792024858	WITHOUT_CLASSIFICATION	8.282079751421171E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.9996807732368123	WITHOUT_CLASSIFICATION	3.192267631877095E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999599164885413	WITHOUT_CLASSIFICATION	4.008351145865612E-5	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9993664794775443	WITHOUT_CLASSIFICATION	6.335205224555952E-4	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9968629916414856	WITHOUT_CLASSIFICATION	0.0031370083585144206	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.999966515369748	WITHOUT_CLASSIFICATION	3.348463025203009E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.999539240693277	WITHOUT_CLASSIFICATION	4.607593067229295E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.999571381550254	WITHOUT_CLASSIFICATION	4.2861844974600755E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9537430184141656	DESIGN	0.04625698158583423	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9996887822083477	WITHOUT_CLASSIFICATION	3.112177916522947E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.9537430184141656	DESIGN	0.04625698158583423	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.999775226922876	WITHOUT_CLASSIFICATION	2.247730771239207E-4	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997208159390214	WITHOUT_CLASSIFICATION	2.791840609785109E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.999775226922876	WITHOUT_CLASSIFICATION	2.247730771239207E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995281707909802	WITHOUT_CLASSIFICATION	4.7182920901976493E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.999606161696163	WITHOUT_CLASSIFICATION	3.938383038369691E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999539240693277	WITHOUT_CLASSIFICATION	4.607593067229295E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999539240693277	WITHOUT_CLASSIFICATION	4.607593067229295E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999570203011318	WITHOUT_CLASSIFICATION	4.297969886819061E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9995712481833859	WITHOUT_CLASSIFICATION	4.287518166141376E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999570203011318	WITHOUT_CLASSIFICATION	4.297969886819061E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9988431301588984	WITHOUT_CLASSIFICATION	0.001156869841101604	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.9992670198157432	WITHOUT_CLASSIFICATION	7.329801842567638E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9947557108746828	WITHOUT_CLASSIFICATION	0.005244289125317182	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.5991741245455378	WITHOUT_CLASSIFICATION	0.40082587545446235	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997821881489503	WITHOUT_CLASSIFICATION	2.1781185104974686E-4	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9995235449886235	WITHOUT_CLASSIFICATION	4.7645501137647786E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996610090518494	WITHOUT_CLASSIFICATION	3.3899094815048803E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9998166312991467	WITHOUT_CLASSIFICATION	1.8336870085338436E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9998361705947877	WITHOUT_CLASSIFICATION	1.638294052122681E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9992705046895856	WITHOUT_CLASSIFICATION	7.29495310414568E-4	DESIGN
types	WITHOUT_CLASSIFICATION	0.9996342572753548	WITHOUT_CLASSIFICATION	3.65742724645195E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999847106551064	WITHOUT_CLASSIFICATION	1.5289344893554463E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9993585456786335	WITHOUT_CLASSIFICATION	6.414543213665859E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9994973598180327	WITHOUT_CLASSIFICATION	5.026401819674142E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9993886028027503	WITHOUT_CLASSIFICATION	6.113971972495816E-4	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999502357595296	WITHOUT_CLASSIFICATION	4.97642404703851E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997896287366326	WITHOUT_CLASSIFICATION	2.1037126336733808E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998673081721968	WITHOUT_CLASSIFICATION	1.3269182780314048E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996988067089156	WITHOUT_CLASSIFICATION	3.0119329108433486E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999907897909733	WITHOUT_CLASSIFICATION	9.210209026782292E-6	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997896287366326	WITHOUT_CLASSIFICATION	2.1037126336733808E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9990894984126039	WITHOUT_CLASSIFICATION	9.105015873961022E-4	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9995963868987091	WITHOUT_CLASSIFICATION	4.0361310129090723E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9859132006424901	WITHOUT_CLASSIFICATION	0.014086799357509823	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9854362896659629	WITHOUT_CLASSIFICATION	0.014563710334037023	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9743134985919201	WITHOUT_CLASSIFICATION	0.025686501408080025	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.972187256168119	WITHOUT_CLASSIFICATION	0.02781274383188109	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.7073596235068663	WITHOUT_CLASSIFICATION	0.29264037649313357	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9972728445111534	WITHOUT_CLASSIFICATION	0.002727155488846619	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997821881489503	WITHOUT_CLASSIFICATION	2.1781185104974686E-4	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9988657157666269	WITHOUT_CLASSIFICATION	0.001134284233373153	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9997400379872543	WITHOUT_CLASSIFICATION	2.599620127456769E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.809588777506231	DESIGN	0.1904112224937689	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.999702536049348	WITHOUT_CLASSIFICATION	2.974639506520172E-4	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9998776190403933	WITHOUT_CLASSIFICATION	1.2238095960673352E-4	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.999961475976177	WITHOUT_CLASSIFICATION	3.852402382292226E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9988431301588984	WITHOUT_CLASSIFICATION	0.001156869841101604	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9988431301588984	WITHOUT_CLASSIFICATION	0.001156869841101604	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999609206510065	WITHOUT_CLASSIFICATION	3.907934899360797E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999786252367775	WITHOUT_CLASSIFICATION	2.1374763222427457E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9980754073854369	WITHOUT_CLASSIFICATION	0.0019245926145630729	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999943548196388	WITHOUT_CLASSIFICATION	5.645180361197208E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9987939239993403	WITHOUT_CLASSIFICATION	0.0012060760006597456	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9843969979164096	WITHOUT_CLASSIFICATION	0.015603002083590495	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9341006028638061	WITHOUT_CLASSIFICATION	0.06589939713619385	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999866079322257	WITHOUT_CLASSIFICATION	1.3392067774248202E-5	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9901131973779349	WITHOUT_CLASSIFICATION	0.009886802622065186	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.999399840512154	WITHOUT_CLASSIFICATION	6.001594878459474E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997102124815648	WITHOUT_CLASSIFICATION	2.8978751843515267E-4	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9993585456786335	WITHOUT_CLASSIFICATION	6.414543213665859E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.999697348328867	WITHOUT_CLASSIFICATION	3.0265167113298466E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997102124815648	WITHOUT_CLASSIFICATION	2.8978751843515267E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997535084932812	WITHOUT_CLASSIFICATION	2.4649150671889075E-4	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.9803880340071329	WITHOUT_CLASSIFICATION	0.019611965992867058	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998310513876516	WITHOUT_CLASSIFICATION	1.6894861234841536E-4	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.7505010745859465	WITHOUT_CLASSIFICATION	0.24949892541405352	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9992051617431219	WITHOUT_CLASSIFICATION	7.948382568780222E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9999208424773046	WITHOUT_CLASSIFICATION	7.915752269539923E-5	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9905362752469817	WITHOUT_CLASSIFICATION	0.009463724753018193	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999234546840068	WITHOUT_CLASSIFICATION	7.654531599316285E-5	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998983099890757	WITHOUT_CLASSIFICATION	1.0169001092430024E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.9984553376347377	WITHOUT_CLASSIFICATION	0.0015446623652623612	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.997296348037321	WITHOUT_CLASSIFICATION	0.002703651962678878	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.997296348037321	WITHOUT_CLASSIFICATION	0.002703651962678878	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9575435172868602	WITHOUT_CLASSIFICATION	0.04245648271313978	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9969932440287509	WITHOUT_CLASSIFICATION	0.0030067559712490797	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9997102124815648	WITHOUT_CLASSIFICATION	2.8978751843515267E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9992051617431219	WITHOUT_CLASSIFICATION	7.948382568780222E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9905362752469817	WITHOUT_CLASSIFICATION	0.009463724753018193	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9996520579322979	WITHOUT_CLASSIFICATION	3.479420677020918E-4	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9996997187973413	WITHOUT_CLASSIFICATION	3.0028120265859315E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999018100956479	WITHOUT_CLASSIFICATION	9.818990435199629E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9998194639095106	WITHOUT_CLASSIFICATION	1.8053609048938605E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999459777841274	WITHOUT_CLASSIFICATION	5.402221587255246E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996263927433259	WITHOUT_CLASSIFICATION	3.736072566740819E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997535084932812	WITHOUT_CLASSIFICATION	2.4649150671889075E-4	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998920759529997	WITHOUT_CLASSIFICATION	1.0792404700041444E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998782070101058	WITHOUT_CLASSIFICATION	1.2179298989424359E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9972102790822165	WITHOUT_CLASSIFICATION	0.002789720917783633	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998028613351748	WITHOUT_CLASSIFICATION	1.9713866482526387E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9995954461292762	WITHOUT_CLASSIFICATION	4.045538707237063E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9996004804867085	WITHOUT_CLASSIFICATION	3.995195132915566E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995281707909802	WITHOUT_CLASSIFICATION	4.7182920901976493E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9900976115188779	WITHOUT_CLASSIFICATION	0.009902388481122145	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999973795805093	WITHOUT_CLASSIFICATION	2.620419490810082E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.9988745203785937	WITHOUT_CLASSIFICATION	0.0011254796214062686	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.999879584164406	WITHOUT_CLASSIFICATION	1.2041583559404665E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9994373345799284	WITHOUT_CLASSIFICATION	5.626654200715118E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997397771268324	WITHOUT_CLASSIFICATION	2.602228731676481E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9995833523186577	WITHOUT_CLASSIFICATION	4.1664768134230237E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.999967397121561	WITHOUT_CLASSIFICATION	3.2602878438951E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996263927433259	WITHOUT_CLASSIFICATION	3.736072566740819E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999103639997904	WITHOUT_CLASSIFICATION	8.963600020961197E-5	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9990714599084813	WITHOUT_CLASSIFICATION	9.285400915187404E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9910930571483461	WITHOUT_CLASSIFICATION	0.008906942851653898	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9981302122489404	WITHOUT_CLASSIFICATION	0.0018697877510596586	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998156485023391	WITHOUT_CLASSIFICATION	1.8435149766085336E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9998142844338805	WITHOUT_CLASSIFICATION	1.857155661194488E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9991043746640612	WITHOUT_CLASSIFICATION	8.956253359387222E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9998496948806944	WITHOUT_CLASSIFICATION	1.5030511930552612E-4	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9999092239788423	WITHOUT_CLASSIFICATION	9.077602115767762E-5	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999697914268871	WITHOUT_CLASSIFICATION	3.0208573112798592E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9981221692289675	WITHOUT_CLASSIFICATION	0.0018778307710325605	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998912569859272	WITHOUT_CLASSIFICATION	1.0874301407291621E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999952221971591	WITHOUT_CLASSIFICATION	4.777802840946983E-6	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999464302943476	WITHOUT_CLASSIFICATION	5.356970565230444E-5	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.5683613959655309	DESIGN	0.43163860403446913	WITHOUT_CLASSIFICATION
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9986285788112724	WITHOUT_CLASSIFICATION	0.0013714211887275592	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.997280277245035	WITHOUT_CLASSIFICATION	0.0027197227549650726	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996032739559456	WITHOUT_CLASSIFICATION	3.9672604405438446E-4	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.989624900626453	WITHOUT_CLASSIFICATION	0.01037509937354697	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9993228731353406	WITHOUT_CLASSIFICATION	6.771268646594565E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9997295326538271	WITHOUT_CLASSIFICATION	2.704673461728248E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9112430658380819	WITHOUT_CLASSIFICATION	0.08875693416191807	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.6332248569369088	WITHOUT_CLASSIFICATION	0.36677514306309134	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9932753644787216	WITHOUT_CLASSIFICATION	0.0067246355212784124	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9948767932773398	WITHOUT_CLASSIFICATION	0.005123206722660249	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.999933852663518	WITHOUT_CLASSIFICATION	6.614733648199865E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.7002315652122177	DESIGN	0.29976843478778226	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9846848991909051	WITHOUT_CLASSIFICATION	0.015315100809094864	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9997040737256938	WITHOUT_CLASSIFICATION	2.959262743062293E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.9998333054004834	WITHOUT_CLASSIFICATION	1.6669459951652274E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.8523384606166061	WITHOUT_CLASSIFICATION	0.14766153938339377	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9801298681829913	WITHOUT_CLASSIFICATION	0.01987013181700871	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998854807682849	WITHOUT_CLASSIFICATION	1.145192317151121E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996234652927232	WITHOUT_CLASSIFICATION	3.765347072767852E-4	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9782631753222982	WITHOUT_CLASSIFICATION	0.0217368246777017	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998854807682849	WITHOUT_CLASSIFICATION	1.145192317151121E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9801298681829913	WITHOUT_CLASSIFICATION	0.01987013181700871	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9996234652927232	WITHOUT_CLASSIFICATION	3.765347072767852E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999276636914689	WITHOUT_CLASSIFICATION	7.233630853099198E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998246892823845	WITHOUT_CLASSIFICATION	1.7531071761543778E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999069865525507	WITHOUT_CLASSIFICATION	9.301344744932878E-5	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998871876644353	WITHOUT_CLASSIFICATION	1.1281233556471045E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.9995871575104918	WITHOUT_CLASSIFICATION	4.1284248950815836E-4	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5017520105142922	DESIGN	0.498247989485708	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9979922543583872	WITHOUT_CLASSIFICATION	0.0020077456416127877	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9990199682512653	WITHOUT_CLASSIFICATION	9.800317487347332E-4	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9963155420392844	WITHOUT_CLASSIFICATION	0.003684457960715651	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9994284283511913	WITHOUT_CLASSIFICATION	5.715716488086691E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999939544210684	WITHOUT_CLASSIFICATION	6.045578931598023E-5	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999120423862743	WITHOUT_CLASSIFICATION	8.795761372572691E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9996311297403014	WITHOUT_CLASSIFICATION	3.688702596985229E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998871876644353	WITHOUT_CLASSIFICATION	1.1281233556471045E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9995234751299888	WITHOUT_CLASSIFICATION	4.7652487001113196E-4	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.9982852495443117	WITHOUT_CLASSIFICATION	0.0017147504556881724	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9846255857806964	WITHOUT_CLASSIFICATION	0.015374414219303526	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.989292882450168	WITHOUT_CLASSIFICATION	0.010707117549831955	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9998757829214993	WITHOUT_CLASSIFICATION	1.2421707850067754E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999466677651038	WITHOUT_CLASSIFICATION	5.333223489628965E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.7515287605597634	WITHOUT_CLASSIFICATION	0.24847123944023655	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999628580294335	WITHOUT_CLASSIFICATION	3.7141970566527533E-5	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9990323136920997	WITHOUT_CLASSIFICATION	9.676863079003136E-4	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999919950546726	WITHOUT_CLASSIFICATION	8.004945327366843E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999475418975808	WITHOUT_CLASSIFICATION	5.245810241912522E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999475418975808	WITHOUT_CLASSIFICATION	5.245810241912522E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999139115301934	WITHOUT_CLASSIFICATION	8.608846980659065E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.9999139115301934	WITHOUT_CLASSIFICATION	8.608846980659065E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9986032737502596	WITHOUT_CLASSIFICATION	0.0013967262497404586	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9846255857806964	WITHOUT_CLASSIFICATION	0.015374414219303526	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9986950125055758	WITHOUT_CLASSIFICATION	0.0013049874944241866	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9996718129513866	WITHOUT_CLASSIFICATION	3.281870486134424E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9977220572398383	WITHOUT_CLASSIFICATION	0.0022779427601617207	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9977220572398383	WITHOUT_CLASSIFICATION	0.0022779427601617207	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999758976676725	WITHOUT_CLASSIFICATION	2.410233232748239E-5	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9998445105567818	WITHOUT_CLASSIFICATION	1.5548944321817367E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9996084784932563	WITHOUT_CLASSIFICATION	3.915215067437319E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9999075225410292	WITHOUT_CLASSIFICATION	9.247745897079529E-5	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8844663063090048	WITHOUT_CLASSIFICATION	0.11553369369099521	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9995099960323823	WITHOUT_CLASSIFICATION	4.900039676175925E-4	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9992494722193583	WITHOUT_CLASSIFICATION	7.505277806417746E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.9007533973027256	WITHOUT_CLASSIFICATION	0.09924660269727438	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9997632376560968	WITHOUT_CLASSIFICATION	2.3676234390336193E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9978180970481461	WITHOUT_CLASSIFICATION	0.00218190295185398	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9998801027751055	WITHOUT_CLASSIFICATION	1.1989722489450724E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9998660552858283	WITHOUT_CLASSIFICATION	1.3394471417176165E-4	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9992491370172242	WITHOUT_CLASSIFICATION	7.50862982775745E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.999847512260762	WITHOUT_CLASSIFICATION	1.5248773923798547E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.966372433524337	WITHOUT_CLASSIFICATION	0.03362756647566303	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.999657476844251	WITHOUT_CLASSIFICATION	3.425231557490344E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946249614129181	WITHOUT_CLASSIFICATION	0.005375038587081873	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999856483306377	WITHOUT_CLASSIFICATION	1.4351669362190564E-5	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9888324656934739	WITHOUT_CLASSIFICATION	0.01116753430652617	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9532548955145916	WITHOUT_CLASSIFICATION	0.04674510448540842	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.9999492092030493	WITHOUT_CLASSIFICATION	5.079079695063703E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.997631113752453	WITHOUT_CLASSIFICATION	0.0023688862475470464	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9997523649990671	WITHOUT_CLASSIFICATION	2.476350009329666E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9998153130946912	WITHOUT_CLASSIFICATION	1.8468690530872584E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.99978242789467	WITHOUT_CLASSIFICATION	2.175721053300859E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998377908192615	WITHOUT_CLASSIFICATION	1.6220918073853128E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999697914268871	WITHOUT_CLASSIFICATION	3.0208573112798592E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998021749482543	WITHOUT_CLASSIFICATION	1.9782505174557974E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9969587218980835	WITHOUT_CLASSIFICATION	0.0030412781019164958	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999177908393116	WITHOUT_CLASSIFICATION	8.220916068838769E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996275313110455	WITHOUT_CLASSIFICATION	3.7246868895445174E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998412147466973	WITHOUT_CLASSIFICATION	1.587852533026913E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998412147466973	WITHOUT_CLASSIFICATION	1.587852533026913E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999971754820864	WITHOUT_CLASSIFICATION	2.824517913519573E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9998403524611905	WITHOUT_CLASSIFICATION	1.5964753880950364E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9993537003639023	WITHOUT_CLASSIFICATION	6.462996360977833E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9993537003639023	WITHOUT_CLASSIFICATION	6.462996360977833E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9997810278424855	WITHOUT_CLASSIFICATION	2.1897215751444808E-4	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9980834884154076	WITHOUT_CLASSIFICATION	0.001916511584592341	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9991988928391413	WITHOUT_CLASSIFICATION	8.011071608585864E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571852817573	WITHOUT_CLASSIFICATION	1.4281471824264245E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9997870747369617	WITHOUT_CLASSIFICATION	2.1292526303832922E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9994359615382467	WITHOUT_CLASSIFICATION	5.640384617533578E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9994149176595926	WITHOUT_CLASSIFICATION	5.850823404073973E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999510533784773	WITHOUT_CLASSIFICATION	4.894662152270478E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.999510533784773	WITHOUT_CLASSIFICATION	4.894662152270478E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9121734212296505	WITHOUT_CLASSIFICATION	0.08782657877034944	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9988361285493306	WITHOUT_CLASSIFICATION	0.0011638714506694405	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9988361285493306	WITHOUT_CLASSIFICATION	0.0011638714506694405	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995516000696247	WITHOUT_CLASSIFICATION	4.483999303751963E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9995982671491176	WITHOUT_CLASSIFICATION	4.017328508823365E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999389634053744	WITHOUT_CLASSIFICATION	6.103659462549659E-5	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9998658876446933	WITHOUT_CLASSIFICATION	1.341123553066096E-4	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996460243005322	WITHOUT_CLASSIFICATION	3.539756994678093E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9318920489826585	WITHOUT_CLASSIFICATION	0.06810795101734149	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9993732415805663	WITHOUT_CLASSIFICATION	6.267584194337989E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999755442722144	WITHOUT_CLASSIFICATION	2.4455727785566945E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9928351865648092	WITHOUT_CLASSIFICATION	0.007164813435190882	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.99949442433213	WITHOUT_CLASSIFICATION	5.055756678700916E-4	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9989184544373191	WITHOUT_CLASSIFICATION	0.0010815455626809038	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996313633494904	WITHOUT_CLASSIFICATION	3.6863665050953153E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996313633494904	WITHOUT_CLASSIFICATION	3.6863665050953153E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996313633494904	WITHOUT_CLASSIFICATION	3.6863665050953153E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996313633494904	WITHOUT_CLASSIFICATION	3.6863665050953153E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.9999425810117145	WITHOUT_CLASSIFICATION	5.7418988285399086E-5	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9989927368154621	WITHOUT_CLASSIFICATION	0.0010072631845379557	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9996457481596549	WITHOUT_CLASSIFICATION	3.542518403450926E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998897860505535	WITHOUT_CLASSIFICATION	1.1021394944655577E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9990947478246833	WITHOUT_CLASSIFICATION	9.052521753165751E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.9997530188754021	WITHOUT_CLASSIFICATION	2.4698112459781743E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9983688744458215	WITHOUT_CLASSIFICATION	0.001631125554178547	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999405290417585	WITHOUT_CLASSIFICATION	5.947095824157549E-5	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9966654735087982	WITHOUT_CLASSIFICATION	0.00333452649120175	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9899106187137106	WITHOUT_CLASSIFICATION	0.010089381286289523	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998669328538562	WITHOUT_CLASSIFICATION	1.3306714614375712E-4	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997916725469073	WITHOUT_CLASSIFICATION	2.0832745309280225E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9954542396108903	WITHOUT_CLASSIFICATION	0.004545760389109773	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9999219286871236	WITHOUT_CLASSIFICATION	7.807131287642004E-5	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998669328538562	WITHOUT_CLASSIFICATION	1.3306714614375712E-4	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9797768716042791	DESIGN	0.020223128395720925	WITHOUT_CLASSIFICATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9946016326872883	WITHOUT_CLASSIFICATION	0.005398367312711669	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9996830417314931	WITHOUT_CLASSIFICATION	3.169582685068728E-4	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.9990550789469139	WITHOUT_CLASSIFICATION	9.449210530860512E-4	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9994740505978875	WITHOUT_CLASSIFICATION	5.259494021124842E-4	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9982984756706453	WITHOUT_CLASSIFICATION	0.0017015243293546341	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.999425251899236	WITHOUT_CLASSIFICATION	5.747481007638977E-4	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9998180738917499	WITHOUT_CLASSIFICATION	1.8192610825007384E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670994777142	WITHOUT_CLASSIFICATION	3.290052228576438E-5	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9998610475901365	WITHOUT_CLASSIFICATION	1.3895240986357184E-4	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999670994777142	WITHOUT_CLASSIFICATION	3.290052228576438E-5	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9998691315015172	WITHOUT_CLASSIFICATION	1.308684984828284E-4	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9955056382460139	WITHOUT_CLASSIFICATION	0.004494361753986078	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9990010912134306	WITHOUT_CLASSIFICATION	9.989087865694744E-4	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997116452903095	WITHOUT_CLASSIFICATION	2.8835470969051176E-4	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9030536328284146	WITHOUT_CLASSIFICATION	0.0969463671715854	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999149717020652	WITHOUT_CLASSIFICATION	8.502829793483617E-5	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997869965440163	WITHOUT_CLASSIFICATION	2.1300345598384066E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996096828025649	WITHOUT_CLASSIFICATION	3.9031719743506726E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9997869965440163	WITHOUT_CLASSIFICATION	2.1300345598384066E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997122874965275	WITHOUT_CLASSIFICATION	2.877125034724492E-4	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999540820645845	WITHOUT_CLASSIFICATION	4.591793541563968E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9993602816289643	WITHOUT_CLASSIFICATION	6.397183710357177E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9995794530599458	WITHOUT_CLASSIFICATION	4.2054694005423557E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.99828302383783	WITHOUT_CLASSIFICATION	0.001716976162169971	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997896287366326	WITHOUT_CLASSIFICATION	2.1037126336733808E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999024527321316	WITHOUT_CLASSIFICATION	9.754726786833643E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9999149717020652	WITHOUT_CLASSIFICATION	8.502829793483617E-5	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9996096828025649	WITHOUT_CLASSIFICATION	3.9031719743506726E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9997122874965275	WITHOUT_CLASSIFICATION	2.877125034724492E-4	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9987370280050909	WITHOUT_CLASSIFICATION	0.001262971994909134	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9996663005445843	WITHOUT_CLASSIFICATION	3.336994554157225E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.99977551571013	WITHOUT_CLASSIFICATION	2.244842898698701E-4	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9995556123007597	WITHOUT_CLASSIFICATION	4.4438769924028294E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999200854143155	WITHOUT_CLASSIFICATION	7.991458568442795E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9949711779692257	WITHOUT_CLASSIFICATION	0.005028822030774347	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9998195708044112	WITHOUT_CLASSIFICATION	1.804291955889185E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946249614129181	WITHOUT_CLASSIFICATION	0.005375038587081873	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999540820645845	WITHOUT_CLASSIFICATION	4.591793541563968E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999345468235123	WITHOUT_CLASSIFICATION	6.545317648766462E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999570203011318	WITHOUT_CLASSIFICATION	4.297969886819061E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999260749339243	WITHOUT_CLASSIFICATION	7.392506607570457E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9995353820773987	WITHOUT_CLASSIFICATION	4.6461792260124504E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946249614129181	WITHOUT_CLASSIFICATION	0.005375038587081873	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9998498012129661	WITHOUT_CLASSIFICATION	1.5019878703390738E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946249614129181	WITHOUT_CLASSIFICATION	0.005375038587081873	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9997340165137227	WITHOUT_CLASSIFICATION	2.6598348627726576E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9998347841296784	WITHOUT_CLASSIFICATION	1.6521587032154896E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9993435235742285	WITHOUT_CLASSIFICATION	6.564764257715313E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9996921794732515	WITHOUT_CLASSIFICATION	3.078205267485537E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998366392951665	WITHOUT_CLASSIFICATION	1.633607048334399E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9996712376799888	WITHOUT_CLASSIFICATION	3.287623200112384E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999249629017259	WITHOUT_CLASSIFICATION	7.503709827408128E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995824643833072	WITHOUT_CLASSIFICATION	4.175356166927935E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998132364591886	WITHOUT_CLASSIFICATION	1.867635408114727E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9993049733236169	WITHOUT_CLASSIFICATION	6.950266763831024E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.9970108755640981	WITHOUT_CLASSIFICATION	0.0029891244359020112	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9971881595043607	WITHOUT_CLASSIFICATION	0.002811840495639342	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9910698238485266	WITHOUT_CLASSIFICATION	0.008930176151473325	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.9996436947718825	WITHOUT_CLASSIFICATION	3.563052281175567E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9975320332844643	WITHOUT_CLASSIFICATION	0.0024679667155356817	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998390608323702	WITHOUT_CLASSIFICATION	1.6093916762988556E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9993248670194245	WITHOUT_CLASSIFICATION	6.751329805755176E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.7233477340978004	DESIGN	0.2766522659021995	WITHOUT_CLASSIFICATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9986226445074363	WITHOUT_CLASSIFICATION	0.0013773554925636852	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9848678370907458	WITHOUT_CLASSIFICATION	0.015132162909254135	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998449963172454	WITHOUT_CLASSIFICATION	1.5500368275454847E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9998449963172454	WITHOUT_CLASSIFICATION	1.5500368275454847E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.999163688933463	WITHOUT_CLASSIFICATION	8.363110665369408E-4	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9992958896417136	WITHOUT_CLASSIFICATION	7.041103582864447E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9997986431780471	WITHOUT_CLASSIFICATION	2.0135682195283834E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999932148285003	WITHOUT_CLASSIFICATION	6.785171499714312E-6	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9988924458963944	WITHOUT_CLASSIFICATION	0.0011075541036056336	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998950619584093	WITHOUT_CLASSIFICATION	1.0493804159073027E-4	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996459925699115	WITHOUT_CLASSIFICATION	3.5400743008856756E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9981045948419768	WITHOUT_CLASSIFICATION	0.0018954051580231364	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.7776316741381641	WITHOUT_CLASSIFICATION	0.22236832586183586	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997191387146216	WITHOUT_CLASSIFICATION	2.8086128537833314E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.999153811650456	WITHOUT_CLASSIFICATION	8.461883495439639E-4	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9926952296537092	WITHOUT_CLASSIFICATION	0.00730477034629087	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9992686021982251	WITHOUT_CLASSIFICATION	7.31397801774833E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.999742737649323	WITHOUT_CLASSIFICATION	2.5726235067698763E-4	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998919660617952	WITHOUT_CLASSIFICATION	1.0803393820484528E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9997675742894231	WITHOUT_CLASSIFICATION	2.3242571057685948E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999619792132174	WITHOUT_CLASSIFICATION	3.802078678259193E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.999619792132174	WITHOUT_CLASSIFICATION	3.802078678259193E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999944921898707	WITHOUT_CLASSIFICATION	5.507810129365653E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9995824643833072	WITHOUT_CLASSIFICATION	4.175356166927935E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9715075721788964	WITHOUT_CLASSIFICATION	0.02849242782110361	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999941225087474	WITHOUT_CLASSIFICATION	5.877491252558611E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999648228213748	WITHOUT_CLASSIFICATION	3.51771786252527E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997171696588202	WITHOUT_CLASSIFICATION	2.82830341179869E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.999871375475254	WITHOUT_CLASSIFICATION	1.2862452474597812E-4	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9998148224711174	WITHOUT_CLASSIFICATION	1.8517752888258773E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9975616601781867	WITHOUT_CLASSIFICATION	0.0024383398218132345	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.995122788144865	WITHOUT_CLASSIFICATION	0.004877211855134993	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.999571635039136	WITHOUT_CLASSIFICATION	4.283649608640081E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9951828080928132	WITHOUT_CLASSIFICATION	0.004817191907186729	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999611966319328	WITHOUT_CLASSIFICATION	3.880336806722345E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9996393915952393	WITHOUT_CLASSIFICATION	3.606084047607273E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999640417130412	WITHOUT_CLASSIFICATION	3.5958286958896624E-5	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997178521671753	WITHOUT_CLASSIFICATION	2.821478328246639E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9998497631367645	WITHOUT_CLASSIFICATION	1.5023686323544728E-4	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999817813271769	WITHOUT_CLASSIFICATION	1.8218672823087894E-5	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9998107178445169	WITHOUT_CLASSIFICATION	1.8928215548308494E-4	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.999953624995888	WITHOUT_CLASSIFICATION	4.6375004112040084E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9992452991120481	WITHOUT_CLASSIFICATION	7.547008879518445E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.999856609563571	WITHOUT_CLASSIFICATION	1.4339043642905709E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9744967911702089	WITHOUT_CLASSIFICATION	0.02550320882979107	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9444292111465793	WITHOUT_CLASSIFICATION	0.05557078885342075	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998403482266311	WITHOUT_CLASSIFICATION	1.5965177336895597E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999630998292148	WITHOUT_CLASSIFICATION	3.690017078510228E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.9998365796443104	WITHOUT_CLASSIFICATION	1.6342035568955306E-4	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9971529618590802	WITHOUT_CLASSIFICATION	0.0028470381409196853	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9960687256952125	WITHOUT_CLASSIFICATION	0.003931274304787463	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.999529799606517	WITHOUT_CLASSIFICATION	4.702003934830086E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9994912472933241	WITHOUT_CLASSIFICATION	5.087527066759606E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999987274343656	WITHOUT_CLASSIFICATION	1.2725656344034051E-6	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999963033607051	WITHOUT_CLASSIFICATION	3.6966392949371538E-6	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9989267000452968	WITHOUT_CLASSIFICATION	0.001073299954703252	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9984390964896539	WITHOUT_CLASSIFICATION	0.0015609035103461043	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.999506917452685	WITHOUT_CLASSIFICATION	4.930825473149075E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9995826508135695	WITHOUT_CLASSIFICATION	4.1734918643053574E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9997178523329682	WITHOUT_CLASSIFICATION	2.8214766703182865E-4	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9985543800954397	WITHOUT_CLASSIFICATION	0.0014456199045602169	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9985543800954397	WITHOUT_CLASSIFICATION	0.0014456199045602169	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9995113473202121	WITHOUT_CLASSIFICATION	4.886526797880122E-4	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9997309417660714	WITHOUT_CLASSIFICATION	2.6905823392866563E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9989886104087968	WITHOUT_CLASSIFICATION	0.0010113895912031196	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.9989886104087968	WITHOUT_CLASSIFICATION	0.0010113895912031196	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.9991896150518874	WITHOUT_CLASSIFICATION	8.103849481125463E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.9999372514308812	WITHOUT_CLASSIFICATION	6.274856911888889E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.8571683349515063	DESIGN	0.1428316650484937	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.999780989320676	WITHOUT_CLASSIFICATION	2.190106793239696E-4	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9984224506824388	WITHOUT_CLASSIFICATION	0.0015775493175611245	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995026355325822	WITHOUT_CLASSIFICATION	4.973644674177727E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999151925336757	WITHOUT_CLASSIFICATION	8.480746632438384E-5	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9999151925336757	WITHOUT_CLASSIFICATION	8.480746632438384E-5	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995026355325822	WITHOUT_CLASSIFICATION	4.973644674177727E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9942571873602406	WITHOUT_CLASSIFICATION	0.005742812639759334	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9988431301588984	WITHOUT_CLASSIFICATION	0.001156869841101604	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995772445965456	WITHOUT_CLASSIFICATION	4.227554034544466E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995772445965456	WITHOUT_CLASSIFICATION	4.227554034544466E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999514745438614	WITHOUT_CLASSIFICATION	4.852545613874033E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998411785063614	WITHOUT_CLASSIFICATION	1.5882149363855984E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9981640493574092	WITHOUT_CLASSIFICATION	0.0018359506425908265	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9994906567356754	WITHOUT_CLASSIFICATION	5.093432643246196E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9996474768819856	WITHOUT_CLASSIFICATION	3.5252311801437316E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.996738279829742	WITHOUT_CLASSIFICATION	0.0032617201702580113	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.9999640364077307	WITHOUT_CLASSIFICATION	3.5963592269263006E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999600161949395	WITHOUT_CLASSIFICATION	3.99838050604827E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9811639512115052	WITHOUT_CLASSIFICATION	0.018836048788494795	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9999155506186554	WITHOUT_CLASSIFICATION	8.444938134453149E-5	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9997603900082823	WITHOUT_CLASSIFICATION	2.3960999171763453E-4	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9973053954387263	WITHOUT_CLASSIFICATION	0.002694604561273632	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9998323156443385	WITHOUT_CLASSIFICATION	1.6768435566148104E-4	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9902240168746859	WITHOUT_CLASSIFICATION	0.009775983125314084	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9993647520898437	WITHOUT_CLASSIFICATION	6.352479101562946E-4	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998324821365272	WITHOUT_CLASSIFICATION	1.6751786347288337E-4	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9994670748222236	WITHOUT_CLASSIFICATION	5.329251777764631E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9993250970753366	WITHOUT_CLASSIFICATION	6.749029246634194E-4	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9994816799728343	WITHOUT_CLASSIFICATION	5.183200271656252E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9941422931340541	WITHOUT_CLASSIFICATION	0.005857706865945789	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9946615434378397	WITHOUT_CLASSIFICATION	0.005338456562160209	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.996104072073881	WITHOUT_CLASSIFICATION	0.0038959279261190655	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.998677851764781	WITHOUT_CLASSIFICATION	0.0013221482352190831	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9983828627219917	WITHOUT_CLASSIFICATION	0.0016171372780082742	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9992876793836567	WITHOUT_CLASSIFICATION	7.123206163432968E-4	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9987335853682046	WITHOUT_CLASSIFICATION	0.0012664146317954675	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9962514195439843	WITHOUT_CLASSIFICATION	0.0037485804560155665	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.999802275597046	WITHOUT_CLASSIFICATION	1.9772440295395013E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9990948562072041	WITHOUT_CLASSIFICATION	9.051437927959986E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.8595733049285011	WITHOUT_CLASSIFICATION	0.1404266950714988	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998818178637766	WITHOUT_CLASSIFICATION	1.181821362233032E-4	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.999707216700288	WITHOUT_CLASSIFICATION	2.927832997120489E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9992310626844442	WITHOUT_CLASSIFICATION	7.689373155557893E-4	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9734880432732195	WITHOUT_CLASSIFICATION	0.026511956726780556	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9990623714365936	WITHOUT_CLASSIFICATION	9.37628563406361E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9996140335823345	WITHOUT_CLASSIFICATION	3.8596641766563055E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9997801635310787	WITHOUT_CLASSIFICATION	2.1983646892125214E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999233112888619	WITHOUT_CLASSIFICATION	7.668871113805997E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9997290365508914	WITHOUT_CLASSIFICATION	2.7096344910865824E-4	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9993368036512408	WITHOUT_CLASSIFICATION	6.631963487592309E-4	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9993650019990908	WITHOUT_CLASSIFICATION	6.349980009091088E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9994306076656341	WITHOUT_CLASSIFICATION	5.693923343658987E-4	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.99973359719028	WITHOUT_CLASSIFICATION	2.6640280971991764E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9995138049263685	WITHOUT_CLASSIFICATION	4.861950736314508E-4	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.7313790354196361	WITHOUT_CLASSIFICATION	0.2686209645803638	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9972600533779598	WITHOUT_CLASSIFICATION	0.00273994662204015	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999843627739768	WITHOUT_CLASSIFICATION	1.5637226023121937E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9923857122886666	WITHOUT_CLASSIFICATION	0.007614287711333348	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9967726559933212	WITHOUT_CLASSIFICATION	0.0032273440066787175	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9423501419957213	WITHOUT_CLASSIFICATION	0.0576498580042787	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9843164173782494	WITHOUT_CLASSIFICATION	0.01568358262175054	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9994526323687017	WITHOUT_CLASSIFICATION	5.473676312982375E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.999927821968547	WITHOUT_CLASSIFICATION	7.217803145289821E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9996210941016497	WITHOUT_CLASSIFICATION	3.7890589835040613E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9992509086795136	WITHOUT_CLASSIFICATION	7.490913204862945E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.997721122608666	WITHOUT_CLASSIFICATION	0.0022788773913339578	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9993597080131874	WITHOUT_CLASSIFICATION	6.402919868126364E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999741709519477	WITHOUT_CLASSIFICATION	2.5829048052335134E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999741709519477	WITHOUT_CLASSIFICATION	2.5829048052335134E-5	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999813880101913	WITHOUT_CLASSIFICATION	1.861198980876344E-5	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999874041852468	WITHOUT_CLASSIFICATION	1.25958147531058E-5	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.9999425040160382	WITHOUT_CLASSIFICATION	5.7495983961860616E-5	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9958242540958723	WITHOUT_CLASSIFICATION	0.004175745904127738	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999777577013348	WITHOUT_CLASSIFICATION	2.2242298665178833E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9973678968193274	WITHOUT_CLASSIFICATION	0.0026321031806726507	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999999037307147	WITHOUT_CLASSIFICATION	9.62692854106384E-8	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999940306324203	WITHOUT_CLASSIFICATION	5.9693675796722445E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.997715186082682	WITHOUT_CLASSIFICATION	0.002284813917318101	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9995126852502884	WITHOUT_CLASSIFICATION	4.873147497116529E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999953088401202	WITHOUT_CLASSIFICATION	4.691159879718294E-6	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9898110763953268	WITHOUT_CLASSIFICATION	0.010188923604673262	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998971822099	WITHOUT_CLASSIFICATION	1.0281779002955432E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9995904016829342	WITHOUT_CLASSIFICATION	4.095983170656725E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994842427948025	WITHOUT_CLASSIFICATION	5.157572051975161E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9994842427948025	WITHOUT_CLASSIFICATION	5.157572051975161E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.9992665372399501	WITHOUT_CLASSIFICATION	7.334627600498949E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9995100026574791	WITHOUT_CLASSIFICATION	4.899973425209931E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.9994475455207659	WITHOUT_CLASSIFICATION	5.524544792341184E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.9999511113336119	WITHOUT_CLASSIFICATION	4.888866638807468E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999229742123458	WITHOUT_CLASSIFICATION	7.702578765421385E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996176084281468	WITHOUT_CLASSIFICATION	3.823915718530599E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9995029382304689	WITHOUT_CLASSIFICATION	4.970617695311294E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999750885661657	WITHOUT_CLASSIFICATION	2.4911433834309967E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.9380298929644505	WITHOUT_CLASSIFICATION	0.06197010703554944	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999728006976112	WITHOUT_CLASSIFICATION	2.7199302388705972E-5	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999973980371665	WITHOUT_CLASSIFICATION	2.6019628335412786E-6	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999725087416707	WITHOUT_CLASSIFICATION	2.7491258329450674E-5	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.99921350799718	WITHOUT_CLASSIFICATION	7.86492002819931E-4	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999745215621331	WITHOUT_CLASSIFICATION	2.5478437866967374E-5	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999801506877205	WITHOUT_CLASSIFICATION	1.9849312279498696E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.8822111912882846	WITHOUT_CLASSIFICATION	0.11778880871171535	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9929483204321186	WITHOUT_CLASSIFICATION	0.007051679567881481	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999773477919338	WITHOUT_CLASSIFICATION	2.2652208066091384E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999911626084748	WITHOUT_CLASSIFICATION	8.837391525142077E-6	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999990379154107	WITHOUT_CLASSIFICATION	9.62084589361893E-7	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998931935049274	WITHOUT_CLASSIFICATION	1.0680649507245885E-4	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999854409783447	WITHOUT_CLASSIFICATION	1.4559021655353535E-5	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9997717607270173	WITHOUT_CLASSIFICATION	2.2823927298256736E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999999378734818	WITHOUT_CLASSIFICATION	6.212651813674513E-8	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.999553280765328	WITHOUT_CLASSIFICATION	4.467192346720233E-4	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9995730838874839	WITHOUT_CLASSIFICATION	4.2691611251614007E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.7761804129274409	DESIGN	0.2238195870725591	WITHOUT_CLASSIFICATION
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9940284094325057	WITHOUT_CLASSIFICATION	0.005971590567494345	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999788985250787	WITHOUT_CLASSIFICATION	2.1101474921301582E-5	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999947392751265	WITHOUT_CLASSIFICATION	5.260724873477726E-6	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998608598955482	WITHOUT_CLASSIFICATION	1.3914010445190521E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999890850614152	WITHOUT_CLASSIFICATION	1.0914938584791401E-5	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9993376554713344	WITHOUT_CLASSIFICATION	6.623445286656411E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999972149783083	WITHOUT_CLASSIFICATION	2.785021691691715E-6	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.999982521672025	WITHOUT_CLASSIFICATION	1.7478327974995274E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9990804714135666	WITHOUT_CLASSIFICATION	9.195285864333351E-4	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9434319181661467	WITHOUT_CLASSIFICATION	0.056568081833853354	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994236233329948	WITHOUT_CLASSIFICATION	5.763766670051742E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999713012856455	WITHOUT_CLASSIFICATION	2.8698714354478903E-5	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999600099023849	WITHOUT_CLASSIFICATION	3.999009761514727E-5	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9874601764145033	WITHOUT_CLASSIFICATION	0.012539823585496667	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.9996700348421168	WITHOUT_CLASSIFICATION	3.2996515788312654E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9838899154827931	WITHOUT_CLASSIFICATION	0.016110084517206948	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9838899154827931	WITHOUT_CLASSIFICATION	0.016110084517206948	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999924725873267	WITHOUT_CLASSIFICATION	7.5274126733468674E-6	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9125703233559758	WITHOUT_CLASSIFICATION	0.08742967664402429	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9677697497623466	WITHOUT_CLASSIFICATION	0.03223025023765338	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998768173352134	WITHOUT_CLASSIFICATION	1.231826647867143E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8798461108026226	WITHOUT_CLASSIFICATION	0.1201538891973773	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9987206527824308	WITHOUT_CLASSIFICATION	0.0012793472175691711	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9980812932559993	WITHOUT_CLASSIFICATION	0.001918706744000701	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9995811062342591	WITHOUT_CLASSIFICATION	4.1889376574085976E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9992348235226777	WITHOUT_CLASSIFICATION	7.651764773224369E-4	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997660482239796	WITHOUT_CLASSIFICATION	2.3395177602037484E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999751550091039	WITHOUT_CLASSIFICATION	2.484499089610504E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9850918573242446	WITHOUT_CLASSIFICATION	0.014908142675755397	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9987914234405546	WITHOUT_CLASSIFICATION	0.0012085765594453991	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999991894453725	WITHOUT_CLASSIFICATION	8.105546274962626E-7	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9978439051566178	WITHOUT_CLASSIFICATION	0.0021560948433821873	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9970058541363092	WITHOUT_CLASSIFICATION	0.0029941458636908425	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.9574394620718895	WITHOUT_CLASSIFICATION	0.04256053792811057	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999662656476106	WITHOUT_CLASSIFICATION	3.373435238933668E-5	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999658673505869	WITHOUT_CLASSIFICATION	3.413264941302666E-5	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9998940583106871	WITHOUT_CLASSIFICATION	1.0594168931290216E-4	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9997599058881425	WITHOUT_CLASSIFICATION	2.4009411185747122E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.9999302548053578	WITHOUT_CLASSIFICATION	6.974519464209357E-5	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.9978783182380832	WITHOUT_CLASSIFICATION	0.0021216817619167587	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.999978633025782	WITHOUT_CLASSIFICATION	2.1366974217915288E-5	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9997469446228174	WITHOUT_CLASSIFICATION	2.530553771826457E-4	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.99941517907213	WITHOUT_CLASSIFICATION	5.848209278701441E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9997422754344334	WITHOUT_CLASSIFICATION	2.5772456556659743E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9995647667984681	WITHOUT_CLASSIFICATION	4.352332015319343E-4	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9982048513476741	WITHOUT_CLASSIFICATION	0.001795148652325835	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.5793382236885911	DESIGN	0.42066177631140894	WITHOUT_CLASSIFICATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.7803150795110044	WITHOUT_CLASSIFICATION	0.2196849204889955	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9652195557755515	WITHOUT_CLASSIFICATION	0.034780444224448495	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999129441926665	WITHOUT_CLASSIFICATION	8.705580733339229E-5	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9970509042899913	WITHOUT_CLASSIFICATION	0.002949095710008739	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9997441144089332	WITHOUT_CLASSIFICATION	2.5588559106680034E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.9999653451787728	WITHOUT_CLASSIFICATION	3.4654821227321935E-5	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.9899613762905656	WITHOUT_CLASSIFICATION	0.010038623709434414	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9995516053750084	WITHOUT_CLASSIFICATION	4.48394624991587E-4	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998823564575405	WITHOUT_CLASSIFICATION	1.1764354245941566E-4	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.999998620936091	WITHOUT_CLASSIFICATION	1.379063908838141E-6	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9649861315735767	WITHOUT_CLASSIFICATION	0.03501386842642334	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999208989070237	WITHOUT_CLASSIFICATION	7.910109297638199E-5	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.9995726965209563	WITHOUT_CLASSIFICATION	4.273034790437201E-4	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.99927455555827	WITHOUT_CLASSIFICATION	7.254444417299949E-4	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9704847363265492	WITHOUT_CLASSIFICATION	0.02951526367345077	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999998514807086	WITHOUT_CLASSIFICATION	1.4851929149188093E-7	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9973221716315781	WITHOUT_CLASSIFICATION	0.002677828368421889	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9981383401086202	WITHOUT_CLASSIFICATION	0.00186165989137978	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9974711837583894	WITHOUT_CLASSIFICATION	0.0025288162416107125	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998971822099	WITHOUT_CLASSIFICATION	1.0281779002955432E-7	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.9997029483285251	WITHOUT_CLASSIFICATION	2.9705167147487673E-4	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998370757490004	WITHOUT_CLASSIFICATION	1.6292425099956721E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.998993810116881	WITHOUT_CLASSIFICATION	0.001006189883118925	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9996197655137694	WITHOUT_CLASSIFICATION	3.80234486230549E-4	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999986417231213	WITHOUT_CLASSIFICATION	1.3582768787405956E-6	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9994304219871679	WITHOUT_CLASSIFICATION	5.69578012832089E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9992117658125074	WITHOUT_CLASSIFICATION	7.882341874926622E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9999415604691935	WITHOUT_CLASSIFICATION	5.8439530806564726E-5	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996287071646718	WITHOUT_CLASSIFICATION	3.7129283532826376E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9998618715933825	WITHOUT_CLASSIFICATION	1.3812840661756915E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999972424628013	WITHOUT_CLASSIFICATION	2.757537198683795E-6	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9999948012816089	WITHOUT_CLASSIFICATION	5.198718391201846E-6	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9924825293874787	WITHOUT_CLASSIFICATION	0.007517470612521192	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9988213481801602	WITHOUT_CLASSIFICATION	0.0011786518198398208	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9983346765819421	WITHOUT_CLASSIFICATION	0.0016653234180579145	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993479595203049	WITHOUT_CLASSIFICATION	6.52040479695086E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997896287366326	WITHOUT_CLASSIFICATION	2.1037126336733808E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995939140843721	WITHOUT_CLASSIFICATION	4.0608591562785336E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9982254688069594	WITHOUT_CLASSIFICATION	0.0017745311930405967	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9998457998181516	WITHOUT_CLASSIFICATION	1.5420018184838385E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993479595203049	WITHOUT_CLASSIFICATION	6.52040479695086E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9967415792288192	WITHOUT_CLASSIFICATION	0.0032584207711807978	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9893543094156589	DESIGN	0.010645690584341143	WITHOUT_CLASSIFICATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999994540314068	WITHOUT_CLASSIFICATION	5.459685931924178E-7	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.9972433485597904	WITHOUT_CLASSIFICATION	0.0027566514402095196	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9999331229883875	WITHOUT_CLASSIFICATION	6.687701161243054E-5	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.8735510860090542	WITHOUT_CLASSIFICATION	0.1264489139909458	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9993325313792624	WITHOUT_CLASSIFICATION	6.674686207376457E-4	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9959564060471091	WITHOUT_CLASSIFICATION	0.004043593952890842	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.996285074856256	WITHOUT_CLASSIFICATION	0.003714925143743996	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9981293855173653	WITHOUT_CLASSIFICATION	0.0018706144826347113	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.9974270376454467	WITHOUT_CLASSIFICATION	0.002572962354553193	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.9956396139222469	WITHOUT_CLASSIFICATION	0.004360386077753116	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9994688237654746	WITHOUT_CLASSIFICATION	5.31176234525423E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999315914977164	WITHOUT_CLASSIFICATION	6.840850228369805E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9998082502902278	WITHOUT_CLASSIFICATION	1.9174970977229192E-4	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998884751672441	WITHOUT_CLASSIFICATION	1.1152483275587253E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9744967911702089	WITHOUT_CLASSIFICATION	0.02550320882979107	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9998480273621935	WITHOUT_CLASSIFICATION	1.5197263780648758E-4	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999822165861268	WITHOUT_CLASSIFICATION	1.7783413873143214E-5	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.9986541960721002	WITHOUT_CLASSIFICATION	0.0013458039278998058	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.7954740770904831	WITHOUT_CLASSIFICATION	0.20452592290951682	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9969387551655209	WITHOUT_CLASSIFICATION	0.0030612448344791714	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999968511562428	WITHOUT_CLASSIFICATION	3.1488437573096804E-6	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9954337228565507	WITHOUT_CLASSIFICATION	0.004566277143449217	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9917424135893905	WITHOUT_CLASSIFICATION	0.008257586410609481	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999566978833233	WITHOUT_CLASSIFICATION	4.3302116676680084E-5	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999959156153837	WITHOUT_CLASSIFICATION	4.084384616312647E-6	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9997278578355182	WITHOUT_CLASSIFICATION	2.7214216448173667E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.9969427089540734	WITHOUT_CLASSIFICATION	0.003057291045926574	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.9265779789917704	WITHOUT_CLASSIFICATION	0.0734220210082296	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9975215047259344	WITHOUT_CLASSIFICATION	0.0024784952740655986	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9994455419424432	WITHOUT_CLASSIFICATION	5.544580575568605E-4	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998212850756552	WITHOUT_CLASSIFICATION	1.7871492434476358E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9923484568578049	WITHOUT_CLASSIFICATION	0.007651543142195104	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.9989164871180352	WITHOUT_CLASSIFICATION	0.0010835128819648683	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999664598889818	WITHOUT_CLASSIFICATION	3.3540111018228635E-5	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9302931787980674	WITHOUT_CLASSIFICATION	0.06970682120193261	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9989419351292037	WITHOUT_CLASSIFICATION	0.0010580648707962817	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9973600171931623	WITHOUT_CLASSIFICATION	0.002639982806837804	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9969531690102053	WITHOUT_CLASSIFICATION	0.003046830989794777	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999328109831943	WITHOUT_CLASSIFICATION	6.71890168056428E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999433381739621	WITHOUT_CLASSIFICATION	5.666182603784628E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999433381739621	WITHOUT_CLASSIFICATION	5.666182603784628E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.9996325009267536	WITHOUT_CLASSIFICATION	3.6749907324631025E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9998919684285039	WITHOUT_CLASSIFICATION	1.0803157149601808E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9996702440600097	WITHOUT_CLASSIFICATION	3.297559399903283E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999736813443952	WITHOUT_CLASSIFICATION	2.6318655604669685E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571852817573	WITHOUT_CLASSIFICATION	1.4281471824264245E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998571852817573	WITHOUT_CLASSIFICATION	1.4281471824264245E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.999539240693277	WITHOUT_CLASSIFICATION	4.607593067229295E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9998378581043575	WITHOUT_CLASSIFICATION	1.6214189564247333E-4	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9999341956169806	WITHOUT_CLASSIFICATION	6.58043830194303E-5	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9994926111196357	WITHOUT_CLASSIFICATION	5.073888803642533E-4	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997896287366326	WITHOUT_CLASSIFICATION	2.1037126336733808E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.9999532978411734	WITHOUT_CLASSIFICATION	4.670215882665731E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999975671565905	WITHOUT_CLASSIFICATION	2.4328434094609715E-6	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999354512593597	WITHOUT_CLASSIFICATION	6.45487406403328E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999194492088653	WITHOUT_CLASSIFICATION	8.055079113470166E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9985956582900379	WITHOUT_CLASSIFICATION	0.0014043417099620819	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.6565237329273649	WITHOUT_CLASSIFICATION	0.3434762670726352	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999629615271304	WITHOUT_CLASSIFICATION	3.7038472869602574E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999629615271304	WITHOUT_CLASSIFICATION	3.7038472869602574E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998884751672441	WITHOUT_CLASSIFICATION	1.1152483275587253E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998983099890757	WITHOUT_CLASSIFICATION	1.0169001092430024E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9997242695616161	WITHOUT_CLASSIFICATION	2.757304383839458E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.969584791218686	WITHOUT_CLASSIFICATION	0.030415208781313995	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9900976115188779	WITHOUT_CLASSIFICATION	0.009902388481122145	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.9979469106443785	WITHOUT_CLASSIFICATION	0.0020530893556214794	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9997766925314562	WITHOUT_CLASSIFICATION	2.233074685437364E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9996750292097738	WITHOUT_CLASSIFICATION	3.249707902261914E-4	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9952765678210844	WITHOUT_CLASSIFICATION	0.004723432178915482	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9981293855173653	WITHOUT_CLASSIFICATION	0.0018706144826347113	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.6022709246481109	DESIGN	0.39772907535188895	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9948681689855763	WITHOUT_CLASSIFICATION	0.0051318310144237485	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9998357238528053	WITHOUT_CLASSIFICATION	1.642761471946395E-4	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999155630067879	WITHOUT_CLASSIFICATION	8.443699321222526E-5	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9999075304299565	WITHOUT_CLASSIFICATION	9.246957004348267E-5	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.999450156931565	WITHOUT_CLASSIFICATION	5.498430684350663E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.983610185667635	WITHOUT_CLASSIFICATION	0.016389814332364975	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9997844672910385	WITHOUT_CLASSIFICATION	2.15532708961421E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997555641152305	WITHOUT_CLASSIFICATION	2.444358847695019E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9946976407060276	WITHOUT_CLASSIFICATION	0.005302359293972432	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9946976407060276	WITHOUT_CLASSIFICATION	0.005302359293972432	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9998669328538562	WITHOUT_CLASSIFICATION	1.3306714614375712E-4	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.999987036722511	WITHOUT_CLASSIFICATION	1.2963277488949325E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9978222152613613	WITHOUT_CLASSIFICATION	0.002177784738638744	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.99914394826396	WITHOUT_CLASSIFICATION	8.560517360399287E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.999871971962717	WITHOUT_CLASSIFICATION	1.2802803728294287E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.8962662583923907	WITHOUT_CLASSIFICATION	0.10373374160760922	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9997116452903095	WITHOUT_CLASSIFICATION	2.8835470969051176E-4	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.9999880742343975	WITHOUT_CLASSIFICATION	1.192576560253335E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.9987370280050909	WITHOUT_CLASSIFICATION	0.001262971994909134	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9998946025291187	WITHOUT_CLASSIFICATION	1.0539747088134388E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9946249614129181	WITHOUT_CLASSIFICATION	0.005375038587081873	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.5838003591448295	WITHOUT_CLASSIFICATION	0.4161996408551704	DESIGN
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999618266952438	WITHOUT_CLASSIFICATION	3.817330475633026E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999911639949197	WITHOUT_CLASSIFICATION	8.836005080237678E-6	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.7623538727111883	WITHOUT_CLASSIFICATION	0.23764612728881176	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9984948217765299	WITHOUT_CLASSIFICATION	0.0015051782234701638	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.7177114929212206	WITHOUT_CLASSIFICATION	0.28228850707877934	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9994209402349644	WITHOUT_CLASSIFICATION	5.790597650355304E-4	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9960133622514201	WITHOUT_CLASSIFICATION	0.0039866377485798955	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9908118704283164	WITHOUT_CLASSIFICATION	0.009188129571683613	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9992710244895753	WITHOUT_CLASSIFICATION	7.289755104246845E-4	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.9999996993576517	WITHOUT_CLASSIFICATION	3.006423483644716E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.9981640493574092	WITHOUT_CLASSIFICATION	0.0018359506425908265	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9999878521501143	WITHOUT_CLASSIFICATION	1.2147849885597613E-5	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981768012422261	WITHOUT_CLASSIFICATION	0.001823198757773921	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9981768012422261	WITHOUT_CLASSIFICATION	0.001823198757773921	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999969326661778	WITHOUT_CLASSIFICATION	3.0673338222134975E-6	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.9954375370991619	WITHOUT_CLASSIFICATION	0.0045624629008380975	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9592309521108927	WITHOUT_CLASSIFICATION	0.040769047889107304	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.9811021319029232	WITHOUT_CLASSIFICATION	0.018897868097076817	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.999347779547243	WITHOUT_CLASSIFICATION	6.522204527570881E-4	DESIGN
todo : what else to do here?	DESIGN	0.978285356498926	WITHOUT_CLASSIFICATION	0.021714643501074004	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.917048418114796	WITHOUT_CLASSIFICATION	0.08295158188520395	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9981470146611775	DESIGN	0.0018529853388225053	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.844088036290446	DESIGN	0.1559119637095539	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.844088036290446	DESIGN	0.1559119637095539	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.998384216073108	WITHOUT_CLASSIFICATION	0.0016157839268920266	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999740084581796	WITHOUT_CLASSIFICATION	2.5991541820451375E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9466401958213183	WITHOUT_CLASSIFICATION	0.053359804178681636	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9967936824353857	DESIGN	0.0032063175646143455	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9967936824353857	DESIGN	0.0032063175646143455	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9996176229937922	DESIGN	3.823770062078224E-4	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9996176229937922	DESIGN	3.823770062078224E-4	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9999603470488914	DESIGN	3.965295110871195E-5	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.8479941209615411	DESIGN	0.15200587903845889	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.8479941209615411	DESIGN	0.15200587903845889	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9951557046539408	DESIGN	0.004844295346059176	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999740084581796	WITHOUT_CLASSIFICATION	2.5991541820451375E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9466401958213183	WITHOUT_CLASSIFICATION	0.053359804178681636	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9997460539048706	WITHOUT_CLASSIFICATION	2.539460951293723E-4	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9826672056662236	WITHOUT_CLASSIFICATION	0.017332794333776373	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9468988327099908	DESIGN	0.05310116729000925	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.9011600087848869	DESIGN	0.09883999121511304	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.925013908739363	WITHOUT_CLASSIFICATION	0.07498609126063706	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9989490181134171	WITHOUT_CLASSIFICATION	0.0010509818865828866	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.8337687385172733	DESIGN	0.1662312614827267	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.978285356498926	WITHOUT_CLASSIFICATION	0.021714643501074004	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9983186891298347	WITHOUT_CLASSIFICATION	0.0016813108701652802	DESIGN
todo : what else to do here?	DESIGN	0.978285356498926	WITHOUT_CLASSIFICATION	0.021714643501074004	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9941206909987564	WITHOUT_CLASSIFICATION	0.0058793090012436156	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9934384534274127	WITHOUT_CLASSIFICATION	0.006561546572587316	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9924001232078936	DESIGN	0.007599876792106474	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.917048418114796	WITHOUT_CLASSIFICATION	0.08295158188520395	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.8672677818749316	DESIGN	0.13273221812506844	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9815414324086645	WITHOUT_CLASSIFICATION	0.018458567591335528	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.6185449156543233	WITHOUT_CLASSIFICATION	0.38145508434567665	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.583744334553566	WITHOUT_CLASSIFICATION	0.416255665446434	DESIGN
todo : what is the implication of this?	DESIGN	0.9552567381064297	WITHOUT_CLASSIFICATION	0.04474326189357026	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9792417569818785	WITHOUT_CLASSIFICATION	0.020758243018121462	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.9725676268255157	DESIGN	0.027432373174484333	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9302167331113926	DESIGN	0.06978326688860739	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9998699161142572	WITHOUT_CLASSIFICATION	1.3008388574278795E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9552514875646028	DESIGN	0.044748512435397354	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9942418697542926	WITHOUT_CLASSIFICATION	0.0057581302457073505	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.9968835617421038	DESIGN	0.003116438257896315	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.6218163670429566	WITHOUT_CLASSIFICATION	0.3781836329570435	DESIGN
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9800673845119594	DESIGN	0.019932615488040626	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9914637952110349	DESIGN	0.008536204788965105	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.999618218715184	WITHOUT_CLASSIFICATION	3.8178128481598946E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.5636475883925863	DESIGN	0.4363524116074137	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.5636475883925863	DESIGN	0.4363524116074137	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.9356999678083636	DESIGN	0.06430003219163646	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.7877763123556923	DESIGN	0.21222368764430766	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.569608557829773	WITHOUT_CLASSIFICATION	0.43039144217022707	DESIGN
TODO possibly relax that	DESIGN	0.569608557829773	WITHOUT_CLASSIFICATION	0.43039144217022707	DESIGN
TODO possibly relax that	DESIGN	0.569608557829773	WITHOUT_CLASSIFICATION	0.43039144217022707	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9914637952110349	DESIGN	0.008536204788965105	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9991741854083432	WITHOUT_CLASSIFICATION	8.258145916566735E-4	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9551124642136462	WITHOUT_CLASSIFICATION	0.04488753578635382	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.8469173093473631	DESIGN	0.15308269065263694	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.9995725753692708	WITHOUT_CLASSIFICATION	4.2742463072919585E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.9347218385406291	WITHOUT_CLASSIFICATION	0.06527816145937107	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.9312415626621997	WITHOUT_CLASSIFICATION	0.06875843733780028	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.844088036290446	DESIGN	0.1559119637095539	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.844088036290446	DESIGN	0.1559119637095539	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.844088036290446	DESIGN	0.1559119637095539	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9997733626967441	DESIGN	2.2663730325600542E-4	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9980823659708206	WITHOUT_CLASSIFICATION	0.0019176340291794252	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9994522705478766	WITHOUT_CLASSIFICATION	5.477294521234715E-4	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9993303699764836	WITHOUT_CLASSIFICATION	6.696300235164653E-4	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9994133997231983	WITHOUT_CLASSIFICATION	5.866002768016663E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9491122790846214	WITHOUT_CLASSIFICATION	0.050887720915378555	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9995457135210277	WITHOUT_CLASSIFICATION	4.5428647897229545E-4	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9993502653949111	WITHOUT_CLASSIFICATION	6.497346050888278E-4	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9780907387945187	WITHOUT_CLASSIFICATION	0.02190926120548129	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9994776057719588	WITHOUT_CLASSIFICATION	5.223942280412411E-4	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9929358345540302	WITHOUT_CLASSIFICATION	0.007064165445969805	DESIGN
Does this dialect support check constraints?	DESIGN	0.9817769638112512	WITHOUT_CLASSIFICATION	0.018223036188748726	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9626503535165601	WITHOUT_CLASSIFICATION	0.03734964648343974	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.969697054486565	WITHOUT_CLASSIFICATION	0.030302945513435087	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.969697054486565	WITHOUT_CLASSIFICATION	0.030302945513435087	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5788350411407724	WITHOUT_CLASSIFICATION	0.42116495885922767	DESIGN
note there is a wierd implementation in the client side	DESIGN	0.9999466681645018	WITHOUT_CLASSIFICATION	5.333183549827101E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.9379551996498386	WITHOUT_CLASSIFICATION	0.06204480035016127	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9994825167874568	WITHOUT_CLASSIFICATION	5.174832125431223E-4	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9974171025525406	WITHOUT_CLASSIFICATION	0.002582897447459478	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.9690265828464983	DESIGN	0.030973417153501662	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9836299884127009	WITHOUT_CLASSIFICATION	0.0163700115872992	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9836299884127009	WITHOUT_CLASSIFICATION	0.0163700115872992	DESIGN
I suppose?	DESIGN	0.9979269471999207	WITHOUT_CLASSIFICATION	0.002073052800079238	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.8101710328601681	DESIGN	0.18982896713983177	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.977695366368104	WITHOUT_CLASSIFICATION	0.022304633631896113	DESIGN
TODO:refactor + make this method private	DESIGN	0.9959846828120131	WITHOUT_CLASSIFICATION	0.004015317187986893	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9981618481325946	WITHOUT_CLASSIFICATION	0.0018381518674053514	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9915475589446517	DESIGN	0.00845244105534829	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.7316812821726704	WITHOUT_CLASSIFICATION	0.2683187178273296	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.9922317528181422	WITHOUT_CLASSIFICATION	0.007768247181857726	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9998824007331542	DESIGN	1.1759926684583357E-4	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9998824007331542	DESIGN	1.1759926684583357E-4	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9087025008685728	DESIGN	0.09129749913142722	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9384456431529823	DESIGN	0.06155435684701782	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.9384456431529823	DESIGN	0.06155435684701782	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9855184790838385	DESIGN	0.014481520916161556	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9813355940474034	WITHOUT_CLASSIFICATION	0.018664405952596625	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.69430936558623	DESIGN	0.30569063441377	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.7542495350639525	DESIGN	0.24575046493604744	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9892796207121266	WITHOUT_CLASSIFICATION	0.010720379287873436	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9777610751155498	WITHOUT_CLASSIFICATION	0.02223892488445016	DESIGN
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9811132208753919	DESIGN	0.01888677912460804	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.7770685333997948	DESIGN	0.22293146660020519	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.8038030700119904	DESIGN	0.1961969299880097	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9924986509206508	DESIGN	0.007501349079349221	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9994825167874568	WITHOUT_CLASSIFICATION	5.174832125431223E-4	DESIGN
TODO: suck into event class	DESIGN	0.865343991726674	DESIGN	0.13465600827332605	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.9501004984546627	WITHOUT_CLASSIFICATION	0.04989950154533726	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8350696871849221	WITHOUT_CLASSIFICATION	0.1649303128150779	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.9850968878691815	DESIGN	0.014903112130818573	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.8958123614330187	DESIGN	0.10418763856698128	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.994641653713853	WITHOUT_CLASSIFICATION	0.0053583462861469975	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.7542875640304104	WITHOUT_CLASSIFICATION	0.24571243596958958	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.9723527480618194	DESIGN	0.02764725193818061	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9956500666748241	WITHOUT_CLASSIFICATION	0.0043499333251758076	DESIGN
TODO: is this 100% correct?	DESIGN	0.9970653977312962	DESIGN	0.00293460226870383	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.909615883253747	DESIGN	0.09038411674625306	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.999283702470962	DESIGN	7.162975290379821E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.99651637166126	DESIGN	0.003483628338740039	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9872759104664284	DESIGN	0.012724089533571584	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.8846939535413726	DESIGN	0.11530604645862748	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.7850123780476799	WITHOUT_CLASSIFICATION	0.2149876219523202	DESIGN
TODO: merge into one method!	DESIGN	0.8964963052734417	DESIGN	0.10350369472655833	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9804228694258211	DESIGN	0.01957713057417894	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.996492845595823	DESIGN	0.0035071544041770345	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9554745463388925	DESIGN	0.044525453661107384	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9990599135515343	WITHOUT_CLASSIFICATION	9.400864484657147E-4	DESIGN
TODO : better way?!?	DESIGN	0.9176985332167747	DESIGN	0.08230146678322525	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.981858847469118	WITHOUT_CLASSIFICATION	0.01814115253088204	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.999251109353627	WITHOUT_CLASSIFICATION	7.488906463729894E-4	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9996070252210799	DESIGN	3.9297477891999364E-4	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999915949346727	DESIGN	8.405065327377478E-6	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.722067212268367	WITHOUT_CLASSIFICATION	0.2779327877316329	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9934891275906772	DESIGN	0.006510872409322883	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.7314385202781063	DESIGN	0.26856147972189387	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.999787269960771	WITHOUT_CLASSIFICATION	2.127300392290232E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.8373713443409819	DESIGN	0.1626286556590181	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9935788005196875	WITHOUT_CLASSIFICATION	0.006421199480312493	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999998901966423	DESIGN	1.0980335765216409E-7	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9993410300108968	DESIGN	6.58969989103256E-4	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.9993442021279352	DESIGN	6.55797872064918E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.844088036290446	DESIGN	0.1559119637095539	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.9806730177020699	DESIGN	0.019326982297930118	WITHOUT_CLASSIFICATION
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.7027099492262475	DESIGN	0.2972900507737524	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9950537715874086	WITHOUT_CLASSIFICATION	0.004946228412591387	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5075899269296431	DESIGN	0.49241007307035706	WITHOUT_CLASSIFICATION
TODO: is this a bit ugly?	DESIGN	0.9974038835455026	DESIGN	0.00259611645449738	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.8758597326100995	WITHOUT_CLASSIFICATION	0.12414026738990039	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9956072672420514	DESIGN	0.004392732757948568	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.853841947919384	DESIGN	0.14615805208061597	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.9963228418962274	DESIGN	0.003677158103772539	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.8389418457900953	DESIGN	0.16105815420990469	WITHOUT_CLASSIFICATION
The class is now way to complex!	DESIGN	0.999474804515608	WITHOUT_CLASSIFICATION	5.251954843920689E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.820649908582828	DESIGN	0.17935009141717204	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9936615970087326	DESIGN	0.006338402991267304	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.996857765308294	WITHOUT_CLASSIFICATION	0.003142234691706083	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9837412893875622	WITHOUT_CLASSIFICATION	0.016258710612437798	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.816219313139585	WITHOUT_CLASSIFICATION	0.1837806868604151	DESIGN
this is ugly here, but needed because its a subquery	DESIGN	0.9710844176339144	WITHOUT_CLASSIFICATION	0.02891558236608562	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.5654071818119095	WITHOUT_CLASSIFICATION	0.4345928181880906	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9998817176146918	DESIGN	1.1828238530819867E-4	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.999726802741032	DESIGN	2.7319725896798706E-4	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5073707171888281	WITHOUT_CLASSIFICATION	0.49262928281117185	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9945404422122238	DESIGN	0.005459557787776114	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.6384435247777034	WITHOUT_CLASSIFICATION	0.36155647522229656	DESIGN
TODO: what type?	DESIGN	0.9440807992550468	DESIGN	0.055919200744953074	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9655493236994457	WITHOUT_CLASSIFICATION	0.03445067630055429	DESIGN
short-circuit for performance...	DESIGN	0.9994043244883838	WITHOUT_CLASSIFICATION	5.956755116163151E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9914285932785172	WITHOUT_CLASSIFICATION	0.008571406721482749	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.9002883290000535	DESIGN	0.09971167099994653	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.8019833032154376	WITHOUT_CLASSIFICATION	0.19801669678456243	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999866115376317	DESIGN	1.338846236836482E-5	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9998707405127689	DESIGN	1.2925948723105789E-4	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9952284623277484	DESIGN	0.004771537672251676	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999990535703992	DESIGN	9.464296007408611E-7	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.9103057211678915	DESIGN	0.08969427883210845	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9998170194391364	DESIGN	1.8298056086353597E-4	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9799342041534111	DESIGN	0.02006579584658888	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9917995776332338	WITHOUT_CLASSIFICATION	0.00820042236676616	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9994481828990461	DESIGN	5.518171009537781E-4	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8192087414084017	DESIGN	0.18079125859159823	WITHOUT_CLASSIFICATION
TODO: inefficient	DESIGN	0.5014802203473175	WITHOUT_CLASSIFICATION	0.49851977965268246	DESIGN
why does this matter?	DESIGN	0.9683862875138277	WITHOUT_CLASSIFICATION	0.03161371248617234	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999876945935539	DESIGN	1.2305406446131395E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.998738793677509	DESIGN	0.0012612063224910824	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9768382615352172	DESIGN	0.023161738464782783	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.8443914077355316	DESIGN	0.15560859226446835	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9988515879154223	WITHOUT_CLASSIFICATION	0.0011484120845777343	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.900192299544709	WITHOUT_CLASSIFICATION	0.09980770045529093	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.9965748426295877	DESIGN	0.0034251573704122637	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.994818297195803	WITHOUT_CLASSIFICATION	0.005181702804197095	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.9314267460499923	WITHOUT_CLASSIFICATION	0.06857325395000768	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999998589761319	DESIGN	1.4102386819207785E-7	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9889352020671771	WITHOUT_CLASSIFICATION	0.01106479793282286	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9955823351136216	DESIGN	0.004417664886378306	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.6182375716111291	WITHOUT_CLASSIFICATION	0.381762428388871	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9974053988697124	WITHOUT_CLASSIFICATION	0.0025946011302875613	DESIGN
create an index on the key columns??	DESIGN	0.9999910416626131	WITHOUT_CLASSIFICATION	8.958337386963663E-6	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.5705221468194973	DESIGN	0.4294778531805028	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999910416626131	WITHOUT_CLASSIFICATION	8.958337386963663E-6	DESIGN
TODO: improve this hack!	DESIGN	0.9917514069803302	DESIGN	0.008248593019669914	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.998795862817916	WITHOUT_CLASSIFICATION	0.0012041371820840257	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9460480677905563	DESIGN	0.053951932209443755	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9997542466112773	WITHOUT_CLASSIFICATION	2.4575338872268173E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.524270700128924	WITHOUT_CLASSIFICATION	0.475729299871076	DESIGN
create an index on the key columns??	DESIGN	0.9999910416626131	WITHOUT_CLASSIFICATION	8.958337386963663E-6	DESIGN
todo : remove	DESIGN	0.9988638749756747	WITHOUT_CLASSIFICATION	0.001136125024325327	DESIGN
todo : remove	DESIGN	0.9988638749756747	WITHOUT_CLASSIFICATION	0.001136125024325327	DESIGN
todo : remove	DESIGN	0.9988638749756747	WITHOUT_CLASSIFICATION	0.001136125024325327	DESIGN
todo : throw exception?	DESIGN	0.9987516603653094	WITHOUT_CLASSIFICATION	0.001248339634690629	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9966910287740216	WITHOUT_CLASSIFICATION	0.003308971225978511	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9508216182919674	DESIGN	0.04917838170803261	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9892702810880618	DESIGN	0.010729718911938144	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.8552923671830994	DESIGN	0.14470763281690052	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9738488081199523	DESIGN	0.02615119188004765	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.6988715118590545	DESIGN	0.30112848814094556	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.6988715118590545	DESIGN	0.30112848814094556	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.9421308979570663	WITHOUT_CLASSIFICATION	0.05786910204293382	DESIGN
ie. the subquery! yuck!	DESIGN	0.9994687171257318	WITHOUT_CLASSIFICATION	5.312828742680992E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9765743755428362	DESIGN	0.02342562445716387	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8241207787483996	DESIGN	0.17587922125160035	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9990721271061243	DESIGN	9.278728938757136E-4	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.9706573554959006	DESIGN	0.029342644504099395	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.8241207787483996	DESIGN	0.17587922125160035	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.7926524435118009	WITHOUT_CLASSIFICATION	0.2073475564881991	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9977789606934747	WITHOUT_CLASSIFICATION	0.0022210393065252598	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9977789606934747	WITHOUT_CLASSIFICATION	0.0022210393065252598	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9875569977268931	DESIGN	0.012443002273106876	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.7721997087689667	DESIGN	0.2278002912310332	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9992318548506641	DESIGN	7.681451493359045E-4	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.9908422230595213	WITHOUT_CLASSIFICATION	0.00915777694047878	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9931529371672713	DESIGN	0.006847062832728732	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.9835153936832824	WITHOUT_CLASSIFICATION	0.0164846063167175	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.7301306794611986	DESIGN	0.2698693205388015	WITHOUT_CLASSIFICATION
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.996879345035099	DESIGN	0.003120654964900957	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.958928192108663	DESIGN	0.04107180789133695	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9831017354557884	DESIGN	0.01689826454421164	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999465771108853	DESIGN	5.342288911467445E-5	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9223487846994498	WITHOUT_CLASSIFICATION	0.07765121530055023	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9996546113718041	WITHOUT_CLASSIFICATION	3.453886281958748E-4	DESIGN
is this ok?	DESIGN	0.998011702705252	WITHOUT_CLASSIFICATION	0.001988297294748034	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999566513595898	DESIGN	4.334864041032207E-5	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9955935676517162	DESIGN	0.004406432348283812	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.9985997968134175	WITHOUT_CLASSIFICATION	0.0014002031865824659	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.999992894203087	DESIGN	7.105796913037795E-6	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.9374014182689857	DESIGN	0.0625985817310143	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9917296552893065	DESIGN	0.008270344710693486	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9440258696875539	DESIGN	0.05597413031244617	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7528090839645128	DESIGN	0.24719091603548715	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.99976736788016	WITHOUT_CLASSIFICATION	2.3263211984012145E-4	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9837069169734822	DESIGN	0.016293083026517774	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.8994076702390743	DESIGN	0.10059232976092577	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5908691081526296	WITHOUT_CLASSIFICATION	0.40913089184737034	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.827587394687715	DESIGN	0.1724126053122849	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6988715118590545	DESIGN	0.30112848814094556	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9927334572148175	DESIGN	0.00726654278518249	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9944818518744805	DESIGN	0.00551814812551952	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9333144845354677	DESIGN	0.06668551546453218	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9283370066526836	DESIGN	0.07166299334731631	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.8806973960418707	WITHOUT_CLASSIFICATION	0.11930260395812929	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.9974221263186429	DESIGN	0.0025778736813570134	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9698835767676374	DESIGN	0.03011642323236261	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.7356555015065374	DESIGN	0.26434449849346264	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9938421284031614	DESIGN	0.006157871596838609	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9947538978344075	DESIGN	0.005246102165592526	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.9941932543750731	WITHOUT_CLASSIFICATION	0.005806745624926881	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9992853800991728	DESIGN	7.146199008272291E-4	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.8892675422550572	DESIGN	0.11073245774494282	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9931785401092825	DESIGN	0.006821459890717421	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.9996236984118138	WITHOUT_CLASSIFICATION	3.763015881862552E-4	DESIGN
short cut check...	DESIGN	0.9990935381477073	WITHOUT_CLASSIFICATION	9.06461852292705E-4	DESIGN
todo : move to StringHelper?	DESIGN	0.9905173713977174	WITHOUT_CLASSIFICATION	0.009482628602282491	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.6746369198016428	WITHOUT_CLASSIFICATION	0.32536308019835725	DESIGN
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9993164570014149	DESIGN	6.835429985850969E-4	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999725044079775	DESIGN	2.7495592022519028E-5	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9999370133635532	DESIGN	6.298663644684685E-5	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.9493066963601665	DESIGN	0.05069330363983348	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.998151954976466	DESIGN	0.001848045023533928	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.8652753442276663	WITHOUT_CLASSIFICATION	0.13472465577233367	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9997991211306004	DESIGN	2.0087886939950298E-4	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9965393001684936	WITHOUT_CLASSIFICATION	0.003460699831506466	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.7782199344721706	DESIGN	0.22178006552782942	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.7126928705410799	WITHOUT_CLASSIFICATION	0.2873071294589202	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999252344471081	DESIGN	7.47655528918592E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.9929529959244016	DESIGN	0.007047004075598378	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.987368625742439	WITHOUT_CLASSIFICATION	0.012631374257561051	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.9999948613796494	DESIGN	5.138620350578861E-6	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9994778858438746	DESIGN	5.22114156125307E-4	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.9995408834980042	WITHOUT_CLASSIFICATION	4.591165019958912E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.5496771990004927	DESIGN	0.45032280099950733	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.5858850784077624	DESIGN	0.4141149215922376	WITHOUT_CLASSIFICATION
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9917035172794407	DESIGN	0.00829648272055931	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.687465671557957	DESIGN	0.312534328442043	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9879821112873196	DESIGN	0.012017888712680336	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9988638749756747	WITHOUT_CLASSIFICATION	0.001136125024325327	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.9035911499830224	DESIGN	0.0964088500169776	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9948281349303025	DESIGN	0.005171865069697433	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9989325447242573	DESIGN	0.0010674552757426448	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9969016927017237	WITHOUT_CLASSIFICATION	0.0030983072982763405	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.9679675585092773	DESIGN	0.03203244149072274	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9990667009256488	DESIGN	9.332990743512665E-4	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.7277938554190868	WITHOUT_CLASSIFICATION	0.2722061445809132	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.9865476573917751	DESIGN	0.013452342608224935	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9787856402445443	WITHOUT_CLASSIFICATION	0.021214359755455627	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.7955261270722445	DESIGN	0.20447387292775548	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9975156249457511	DESIGN	0.0024843750542489934	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.7952825474307469	WITHOUT_CLASSIFICATION	0.20471745256925314	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9988920357757076	DESIGN	0.0011079642242923585	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.9763904771234708	WITHOUT_CLASSIFICATION	0.023609522876529093	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.999999981867879	DESIGN	1.8132121093961062E-8	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.8691601419136765	WITHOUT_CLASSIFICATION	0.1308398580863235	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9987830432178683	DESIGN	0.001216956782131643	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9999598471074598	WITHOUT_CLASSIFICATION	4.0152892540167674E-5	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.7490917769902142	WITHOUT_CLASSIFICATION	0.25090822300978577	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.5139530178923434	DESIGN	0.4860469821076566	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.7750725221138843	DESIGN	0.22492747788611558	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999998999484945	DESIGN	1.0005150544254288E-7	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.999999999903213	DESIGN	9.678699780501931E-11	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9278010098208811	DESIGN	0.07219899017911886	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999272897319	DESIGN	7.271026811670039E-8	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9683620364045431	DESIGN	0.03163796359545691	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999695662342023	WITHOUT_CLASSIFICATION	3.0433765797721055E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999985942891629	WITHOUT_CLASSIFICATION	1.4057108370787838E-6	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999996520912452	DESIGN	3.47908754821236E-7	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9878594367465559	DESIGN	0.012140563253444104	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999968381850574	DESIGN	3.161814942546877E-6	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.6809969805080937	DESIGN	0.31900301949190624	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9338601099188006	DESIGN	0.06613989008119948	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9915434667741011	DESIGN	0.008456533225898873	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.958928192108663	DESIGN	0.04107180789133695	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.892290621075307	DESIGN	0.10770937892469304	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9976863258945406	DESIGN	0.0023136741054592667	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9223487846994498	WITHOUT_CLASSIFICATION	0.07765121530055023	DESIGN
TODO: make this a bit nicer	DESIGN	0.9955935676517162	DESIGN	0.004406432348283812	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7972343602836277	WITHOUT_CLASSIFICATION	0.20276563971637238	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9967936824353857	DESIGN	0.0032063175646143455	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9967936824353857	DESIGN	0.0032063175646143455	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9967936824353857	DESIGN	0.0032063175646143455	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.9989859341747797	DESIGN	0.0010140658252202348	WITHOUT_CLASSIFICATION
