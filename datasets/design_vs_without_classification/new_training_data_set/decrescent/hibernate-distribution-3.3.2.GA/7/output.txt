test out the optimizer:	WITHOUT_CLASSIFICATION	0.999946273220222	WITHOUT_CLASSIFICATION	5.372677977787071E-5	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997185101164345	WITHOUT_CLASSIFICATION	2.814898835655024E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997185101164345	WITHOUT_CLASSIFICATION	2.814898835655024E-4	DESIGN
| this | bean | args | raw bean |	WITHOUT_CLASSIFICATION	0.9995260855299513	WITHOUT_CLASSIFICATION	4.7391447004869016E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
astore 4 store the raw bean	WITHOUT_CLASSIFICATION	0.9999297252984231	WITHOUT_CLASSIFICATION	7.02747015768551E-5	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999945709387646	WITHOUT_CLASSIFICATION	5.429061235449613E-6	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999945709387646	WITHOUT_CLASSIFICATION	5.429061235449613E-6	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999939249058173	WITHOUT_CLASSIFICATION	6.07509418275677E-6	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999865732961072	WITHOUT_CLASSIFICATION	1.34267038928106E-4	DESIGN
putfield new value of the field	WITHOUT_CLASSIFICATION	0.999881785583111	WITHOUT_CLASSIFICATION	1.1821441688893584E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994126516280842	WITHOUT_CLASSIFICATION	5.873483719156949E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999614777517404	WITHOUT_CLASSIFICATION	3.85222482596228E-5	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999614777517404	WITHOUT_CLASSIFICATION	3.85222482596228E-5	DESIGN
long	WITHOUT_CLASSIFICATION	0.9995908692944421	WITHOUT_CLASSIFICATION	4.0913070555785894E-4	DESIGN
just decrement the lock, don't recache (we don't know which transaction won)	WITHOUT_CLASSIFICATION	0.9997766755521706	WITHOUT_CLASSIFICATION	2.233244478292442E-4	DESIGN
decode row selection...	WITHOUT_CLASSIFICATION	0.9997218776700169	WITHOUT_CLASSIFICATION	2.781223299831979E-4	DESIGN
disassembled state gets put in a new array (we write to cache by value!)	WITHOUT_CLASSIFICATION	0.9988686242994828	WITHOUT_CLASSIFICATION	0.0011313757005173347	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9993959622683732	WITHOUT_CLASSIFICATION	6.04037731626845E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996315140894967	WITHOUT_CLASSIFICATION	3.6848591050321486E-4	DESIGN
ROW ID	WITHOUT_CLASSIFICATION	0.9996030639311873	WITHOUT_CLASSIFICATION	3.9693606881275104E-4	DESIGN
COMPOSITE-ID	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
Property prop = new Property(); prop.setName("id"); prop.setPropertyAccessorName("embedded"); prop.setValue(id); entity.setIdentifierProperty(prop);	WITHOUT_CLASSIFICATION	0.9998923251573627	WITHOUT_CLASSIFICATION	1.0767484263732775E-4	DESIGN
DYNAMIC INSERT	WITHOUT_CLASSIFICATION	0.9995665804805319	WITHOUT_CLASSIFICATION	4.334195194680973E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999101394894389	WITHOUT_CLASSIFICATION	8.986051056109639E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996061188470382	WITHOUT_CLASSIFICATION	3.938811529617722E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996061188470382	WITHOUT_CLASSIFICATION	3.938811529617722E-4	DESIGN
generated properties can never be insertable...	WITHOUT_CLASSIFICATION	0.9993896346003551	WITHOUT_CLASSIFICATION	6.103653996449462E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9997072101720824	WITHOUT_CLASSIFICATION	2.927898279175272E-4	DESIGN
by default, natural-ids are "immutable" (constant)	WITHOUT_CLASSIFICATION	0.9998594824498206	WITHOUT_CLASSIFICATION	1.40517550179301E-4	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9997376844892346	WITHOUT_CLASSIFICATION	2.6231551076536804E-4	DESIGN
we found some extends attributes referencing entities which were not already processed. here we need to locate all entity-names and class-names contained in this document itself, making sure that these get removed from the extendz list such that only extends names which require us to delay processing (i.e. external to this document and not yet processed) are contained in the returned result	WITHOUT_CLASSIFICATION	0.7928309290683396	DESIGN	0.20716907093166034	WITHOUT_CLASSIFICATION
Build a ResultSetMappingDefinition given a containing element for the "return-XXX" elements @param resultSetElem The element containing the return definitions. @param path No clue... @param mappings The current processing state. @return The description of the mappings...	WITHOUT_CLASSIFICATION	0.9999912322925737	WITHOUT_CLASSIFICATION	8.767707426409569E-6	DESIGN
private boolean showSql; private boolean formatSql;	WITHOUT_CLASSIFICATION	0.9992801676736487	WITHOUT_CLASSIFICATION	7.198323263513249E-4	DESIGN
public boolean isShowSqlEnabled() { return showSql; } public boolean isFormatSqlEnabled() { return formatSql; }	WITHOUT_CLASSIFICATION	0.9998131751277333	WITHOUT_CLASSIFICATION	1.868248722666876E-4	DESIGN
Set a custom entity resolver. This entity resolver must be set before addXXX(misc) call. Default value is {@link org.hibernate.util.DTDEntityResolver} @param entityResolver entity resolver to use	WITHOUT_CLASSIFICATION	0.9916475675107411	WITHOUT_CLASSIFICATION	0.00835243248925896	DESIGN
final List extendsQueue,	WITHOUT_CLASSIFICATION	0.999913040153167	WITHOUT_CLASSIFICATION	8.695984683312818E-5	DESIGN
If close() is called, guarantee unbind()	WITHOUT_CLASSIFICATION	0.9999582135455082	WITHOUT_CLASSIFICATION	4.1786454491729885E-5	DESIGN
if a ThreadLocalSessionContext-bound session happens to get serialized, to be completely correct, we need to make sure that unbinding of that session occurs.	WITHOUT_CLASSIFICATION	0.949056335552206	WITHOUT_CLASSIFICATION	0.05094366444779389	DESIGN
on the inverse, it makes sense that if a ThreadLocalSessionContext- bound session then gets deserialized to go ahead and re-bind it to the ThreadLocalSessionContext session map.	WITHOUT_CLASSIFICATION	0.837287728292301	WITHOUT_CLASSIFICATION	0.162712271707699	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997895867006693	WITHOUT_CLASSIFICATION	2.1041329933062458E-4	DESIGN
60 second lock timeout	WITHOUT_CLASSIFICATION	0.9989897482470316	WITHOUT_CLASSIFICATION	0.0010102517529683983	DESIGN
OptimisticCache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
Cache impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997397262022933	WITHOUT_CLASSIFICATION	2.6027379770663116E-4	DESIGN
option.setDataVersion( NonLockingDataVersion.INSTANCE );	WITHOUT_CLASSIFICATION	0.9996679636599816	WITHOUT_CLASSIFICATION	3.320363400184368E-4	DESIGN
do the put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999841599868084	WITHOUT_CLASSIFICATION	1.5840013191604623E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
tree cache in optimistic mode seems to have as very difficult time with remove calls on non-existent nodes (NPEs)...	WITHOUT_CLASSIFICATION	0.6973826111422589	DESIGN	0.3026173888577412	WITHOUT_CLASSIFICATION
60 seconds	WITHOUT_CLASSIFICATION	0.9996463056130876	WITHOUT_CLASSIFICATION	3.5369438691242516E-4	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996463056130876	WITHOUT_CLASSIFICATION	3.5369438691242516E-4	DESIGN
do the failfast put outside the scope of the JTA txn	WITHOUT_CLASSIFICATION	0.999841599868084	WITHOUT_CLASSIFICATION	1.5840013191604623E-4	DESIGN
NOTE : evict() operates locally only (i.e., does not propogate to any other nodes in the potential cluster). This is exactly what is needed when we destroy() here; destroy() is used as part of the process of shutting down a SessionFactory; thus these removals should not be propogated	WITHOUT_CLASSIFICATION	0.9995980891843725	DESIGN	4.019108156274669E-4	WITHOUT_CLASSIFICATION
protected RegionRootListener listener;	WITHOUT_CLASSIFICATION	0.9973263563254745	WITHOUT_CLASSIFICATION	0.002673643674525383	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999621261139655	WITHOUT_CLASSIFICATION	3.7873886034520664E-5	DESIGN
If we've been blocking for the mutex, perhaps another thread has already reestablished the root. In case the node was reestablised via replication, confirm it's marked "resident" (a status which doesn't replicate)	WITHOUT_CLASSIFICATION	0.9998839204826295	WITHOUT_CLASSIFICATION	1.16079517370498E-4	DESIGN
For pessimistic locking, we just want to toss out our ref to any old invalid root node and get the latest (may be null)	WITHOUT_CLASSIFICATION	0.9999887846440567	WITHOUT_CLASSIFICATION	1.121535594328768E-5	DESIGN
The rest only matters for optimistic locking, where we need to establish the proper data version on the region root	WITHOUT_CLASSIFICATION	0.999940596370547	WITHOUT_CLASSIFICATION	5.940362945295336E-5	DESIGN
Don't hold a transactional lock for this	WITHOUT_CLASSIFICATION	0.9960784439775194	WITHOUT_CLASSIFICATION	0.003921556022480556	DESIGN
Make sure the root node for the region exists and has a DataVersion that never complains	WITHOUT_CLASSIFICATION	0.99991499149652	WITHOUT_CLASSIFICATION	8.500850348006699E-5	DESIGN
Never evict this node	WITHOUT_CLASSIFICATION	0.9982058515001244	WITHOUT_CLASSIFICATION	0.001794148499875654	DESIGN
Fix up the resident flag	WITHOUT_CLASSIFICATION	0.9988126040259736	WITHOUT_CLASSIFICATION	0.001187395974026378	DESIGN
60 seconds	WITHOUT_CLASSIFICATION	0.9996463056130876	WITHOUT_CLASSIFICATION	3.5369438691242516E-4	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999963063951937	WITHOUT_CLASSIFICATION	3.69360480641024E-6	DESIGN
no-op. We don't own the cache so we shouldn't stop it.	WITHOUT_CLASSIFICATION	0.9868872530924314	WITHOUT_CLASSIFICATION	0.013112746907568595	DESIGN
This should only be possible if the caches are constructor injected	WITHOUT_CLASSIFICATION	0.9794394671739807	WITHOUT_CLASSIFICATION	0.020560532826019298	DESIGN
We only build caches if none were passed in. Passing in caches counts as a clear statement of exactly what is wanted	WITHOUT_CLASSIFICATION	0.9996619245765085	WITHOUT_CLASSIFICATION	3.3807542349158194E-4	DESIGN
Set up the cache factory	WITHOUT_CLASSIFICATION	0.9950534511288559	WITHOUT_CLASSIFICATION	0.004946548871144133	DESIGN
See if the user configured a multiplexer stack	WITHOUT_CLASSIFICATION	0.9999869434647451	WITHOUT_CLASSIFICATION	1.3056535254826844E-5	DESIGN
Default to collections sharing entity cache if there is one	WITHOUT_CLASSIFICATION	0.9996391957396297	WITHOUT_CLASSIFICATION	3.608042603703007E-4	DESIGN
Default to sharing the entity cache if there is one	WITHOUT_CLASSIFICATION	0.9997507765757601	WITHOUT_CLASSIFICATION	2.492234242399536E-4	DESIGN
For Timestamps, we default to a separate config	WITHOUT_CLASSIFICATION	0.9992091163472366	WITHOUT_CLASSIFICATION	7.908836527633817E-4	DESIGN
We can't change the TM on a running cache; just check if the cache has no TM and we're OK with that	WITHOUT_CLASSIFICATION	0.9999841393249109	WITHOUT_CLASSIFICATION	1.586067508912821E-5	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9976944537812052	WITHOUT_CLASSIFICATION	0.0023055462187947496	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9988267555276408	WITHOUT_CLASSIFICATION	0.0011732444723591602	DESIGN
This method should be implemented assuming it's valid to do start/stop/start -- leave state appropriate for another start	WITHOUT_CLASSIFICATION	0.5911850980623645	DESIGN	0.40881490193763537	WITHOUT_CLASSIFICATION
Make sure we don't re-release the same cache	WITHOUT_CLASSIFICATION	0.9882800583258544	WITHOUT_CLASSIFICATION	0.011719941674145641	DESIGN
We use a different delegate than the non-optimistic superclass default	WITHOUT_CLASSIFICATION	0.9998033020871496	WITHOUT_CLASSIFICATION	1.966979128503082E-4	DESIGN
Following methods we don't delegate since they have so little logic it's clearer to just implement them here	WITHOUT_CLASSIFICATION	0.9925009984098524	WITHOUT_CLASSIFICATION	0.00749900159014753	DESIGN
If JBC is using INVALIDATION, we don't want to propagate changes. We use the Timestamps cache to manage invalidation	WITHOUT_CLASSIFICATION	0.9980414955632806	WITHOUT_CLASSIFICATION	0.0019585044367194412	DESIGN
We don't want to waste effort setting an option if JBC is already in LOCAL mode. If JBC is REPL_(A)SYNC then check if they passed an config option to disable query replication	WITHOUT_CLASSIFICATION	0.9999979789502359	WITHOUT_CLASSIFICATION	2.0210497640712337E-6	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents updates Add a zero (or low) timeout option so we don't block waiting for tx's that did a put to commit	WITHOUT_CLASSIFICATION	0.9999999739790426	WITHOUT_CLASSIFICATION	2.602095740766224E-8	DESIGN
Double check the distributed cache	WITHOUT_CLASSIFICATION	0.9999592626173398	WITHOUT_CLASSIFICATION	4.073738266024226E-5	DESIGN
Get an exclusive right to update JBC for this key from this node.	WITHOUT_CLASSIFICATION	0.9993665323381065	WITHOUT_CLASSIFICATION	6.334676618934412E-4	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996617908589803	WITHOUT_CLASSIFICATION	3.38209141019658E-4	DESIGN
Initial load from JBC	WITHOUT_CLASSIFICATION	0.9989202765409935	WITHOUT_CLASSIFICATION	0.0010797234590065085	DESIGN
See if we had a 2nd invalidation from the same initial preinvalidation timestamp. If so, only increment if the new current value is an increase	WITHOUT_CLASSIFICATION	0.9999998258928633	WITHOUT_CLASSIFICATION	1.7410713660420925E-7	DESIGN
We ensure ASYNC semantics (JBCACHE-1175)	WITHOUT_CLASSIFICATION	0.9996617908589803	WITHOUT_CLASSIFICATION	3.38209141019658E-4	DESIGN
If the workspace node has null as well, OK; if not we've been modified in a non-comparable manner, which we have to treat as us being newer	WITHOUT_CLASSIFICATION	0.9999935070504724	WITHOUT_CLASSIFICATION	6.492949527534272E-6	DESIGN
The standard comparator types are not Serializable but are singletons	WITHOUT_CLASSIFICATION	0.9999676627885364	WITHOUT_CLASSIFICATION	3.2337211463583574E-5	DESIGN
ignore!	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998819531865354	WITHOUT_CLASSIFICATION	1.1804681346460182E-4	DESIGN
construct the cache	WITHOUT_CLASSIFICATION	0.9991394913370777	WITHOUT_CLASSIFICATION	8.605086629222763E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9984424966523668	WITHOUT_CLASSIFICATION	0.0015575033476331497	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9984424966523668	WITHOUT_CLASSIFICATION	0.0015575033476331497	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995989518257041	WITHOUT_CLASSIFICATION	4.0104817429596046E-4	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for initialPoolSize, which hibernate sensibly lets default to minPoolSize, but we'll let users override it with the c3p0-style property if they want.	WITHOUT_CLASSIFICATION	0.999696140588582	WITHOUT_CLASSIFICATION	3.0385941141798976E-4	DESIGN
DataSource unpooled = DataSources.unpooledDataSource(jdbcUrl, props.getProperty(Environment.USER), props.getProperty(Environment.PASS));	WITHOUT_CLASSIFICATION	0.9998231713012369	WITHOUT_CLASSIFICATION	1.768286987630499E-4	DESIGN
TRUE if the pool is borrowed from the outside, FALSE if we used to create it	WITHOUT_CLASSIFICATION	0.9606493849143475	WITHOUT_CLASSIFICATION	0.039350615085652595	DESIGN
get a connection from the pool (thru DriverManager, cfr. Proxool doc)	WITHOUT_CLASSIFICATION	0.9979062280676053	WITHOUT_CLASSIFICATION	0.002093771932394712	DESIGN
set the Transaction Isolation if defined	WITHOUT_CLASSIFICATION	0.9998747111349958	WITHOUT_CLASSIFICATION	1.2528886500421998E-4	DESIGN
toggle autoCommit to false if set	WITHOUT_CLASSIFICATION	0.9999075405196826	WITHOUT_CLASSIFICATION	9.245948031748512E-5	DESIGN
return the connection	WITHOUT_CLASSIFICATION	0.9988663166211972	WITHOUT_CLASSIFICATION	0.001133683378802922	DESIGN
Get the configurator files (if available)	WITHOUT_CLASSIFICATION	0.9999725759041189	WITHOUT_CLASSIFICATION	2.742409588111526E-5	DESIGN
Default the Proxool alias setting	WITHOUT_CLASSIFICATION	0.9999940004078487	WITHOUT_CLASSIFICATION	5.999592151305968E-6	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999530491475336	WITHOUT_CLASSIFICATION	4.6950852466410995E-5	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999530491475336	WITHOUT_CLASSIFICATION	4.6950852466410995E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999362141961895	WITHOUT_CLASSIFICATION	6.378580381044887E-5	DESIGN
Set the existing pool flag to true	WITHOUT_CLASSIFICATION	0.999659393001413	WITHOUT_CLASSIFICATION	3.406069985869487E-4	DESIGN
Configured using the JAXP Configurator	WITHOUT_CLASSIFICATION	0.9997949674924808	WITHOUT_CLASSIFICATION	2.05032507519258E-4	DESIGN
Validate that an alias name was provided to determine which pool to use	WITHOUT_CLASSIFICATION	0.9999530491475336	WITHOUT_CLASSIFICATION	4.6950852466410995E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999362141961895	WITHOUT_CLASSIFICATION	6.378580381044887E-5	DESIGN
Append the stem to the proxool pool alias	WITHOUT_CLASSIFICATION	0.9999362141961895	WITHOUT_CLASSIFICATION	6.378580381044887E-5	DESIGN
Configured using the Properties File Configurator	WITHOUT_CLASSIFICATION	0.9998322793204675	WITHOUT_CLASSIFICATION	1.677206795324183E-4	DESIGN
Remember Isolation level	WITHOUT_CLASSIFICATION	0.8991309642143099	WITHOUT_CLASSIFICATION	0.10086903578569006	DESIGN
If the provider was leeching off an existing pool don't close it	WITHOUT_CLASSIFICATION	0.999999612619507	WITHOUT_CLASSIFICATION	3.873804930180722E-7	DESIGN
We have created the pool ourselves, so shut it down	WITHOUT_CLASSIFICATION	0.9999857671110823	WITHOUT_CLASSIFICATION	1.4232888917707079E-5	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9899468916980297	WITHOUT_CLASSIFICATION	0.010053108301970358	DESIGN
not really a many-to-one association necessarily	WITHOUT_CLASSIFICATION	0.9899468916980297	WITHOUT_CLASSIFICATION	0.010053108301970358	DESIGN
always overwrite nonversioned data	WITHOUT_CLASSIFICATION	0.9999201885845481	WITHOUT_CLASSIFICATION	7.981141545193625E-5	DESIGN
public Currency getCurrency(int col) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9998682214216363	WITHOUT_CLASSIFICATION	1.3177857836362399E-4	DESIGN
default is POJO	WITHOUT_CLASSIFICATION	0.9997463570322038	WITHOUT_CLASSIFICATION	2.536429677961917E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9993646916239219	WITHOUT_CLASSIFICATION	6.35308376078034E-4	DESIGN
use setParameter for null values	WITHOUT_CLASSIFICATION	0.9993646916239219	WITHOUT_CLASSIFICATION	6.35308376078034E-4	DESIGN
private CacheEntry cacheEntry;	WITHOUT_CLASSIFICATION	0.9955875361308039	WITHOUT_CLASSIFICATION	0.004412463869196203	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999820903303664	WITHOUT_CLASSIFICATION	1.7909669633549854E-5	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9981699767454881	WITHOUT_CLASSIFICATION	0.0018300232545118077	DESIGN
get the updated snapshot of the entity state by cloning current state; it is safe to copy in place, since by this time no-one else (should have) has a reference to the array	WITHOUT_CLASSIFICATION	0.999994221939733	WITHOUT_CLASSIFICATION	5.778060267034713E-6	DESIGN
this entity defines proeprty generation, so process those generated values...	WITHOUT_CLASSIFICATION	0.9996475042359181	WITHOUT_CLASSIFICATION	3.5249576408190444E-4	DESIGN
have the entity entry perform post-update processing, passing it the update state and the new version (if one).	WITHOUT_CLASSIFICATION	0.9999255274303988	WITHOUT_CLASSIFICATION	7.447256960129994E-5	DESIGN
!persister.isCacheInvalidationRequired()	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
need to look it up from the persistence-context	WITHOUT_CLASSIFICATION	0.998819658771626	WITHOUT_CLASSIFICATION	0.001180341228373962	DESIGN
sort first by role name	WITHOUT_CLASSIFICATION	0.9998370642913733	WITHOUT_CLASSIFICATION	1.6293570862679495E-4	DESIGN
Make 100% certain that this is called before any subsequent ScheduledUpdate.afterTransactionCompletion()!!	WITHOUT_CLASSIFICATION	0.9981699767454881	WITHOUT_CLASSIFICATION	0.0018300232545118077	DESIGN
then by fk	WITHOUT_CLASSIFICATION	0.9996380729976476	WITHOUT_CLASSIFICATION	3.619270023523812E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996920778052174	WITHOUT_CLASSIFICATION	3.079221947825162E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996920778052174	WITHOUT_CLASSIFICATION	3.079221947825162E-4	DESIGN
an existing collection that was either non-empty or uninitialized is replaced by null or a different collection (if the collection is uninitialized, hibernate has no way of knowing if the collection is actually empty without querying the db)	WITHOUT_CLASSIFICATION	0.9976837437047749	WITHOUT_CLASSIFICATION	0.0023162562952251456	DESIGN
this method is called when a new non-null collection is persisted or when an existing (non-null) collection is moved to a new owner	WITHOUT_CLASSIFICATION	0.989257554709804	WITHOUT_CLASSIFICATION	0.010742445290195968	DESIGN
boolean put = persister.getCache().insert(ck, cacheEntry);	WITHOUT_CLASSIFICATION	0.9999513470390672	WITHOUT_CLASSIFICATION	4.865296093287117E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999159276869018	WITHOUT_CLASSIFICATION	8.407231309820473E-4	DESIGN
do nothing - we only need to notify the cache...	WITHOUT_CLASSIFICATION	0.9958933274195146	WITHOUT_CLASSIFICATION	0.004106672580485426	DESIGN
sort first by entity name	WITHOUT_CLASSIFICATION	0.9996855991188378	WITHOUT_CLASSIFICATION	3.144008811621809E-4	DESIGN
then by id	WITHOUT_CLASSIFICATION	0.99977841008062	WITHOUT_CLASSIFICATION	2.2158991937997665E-4	DESIGN
to be safe...	WITHOUT_CLASSIFICATION	0.9988622842464785	WITHOUT_CLASSIFICATION	0.0011377157535215246	DESIGN
no transformations took place, so handle it as we would a non-instrumented class	WITHOUT_CLASSIFICATION	0.999366130495548	WITHOUT_CLASSIFICATION	6.338695044521064E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998473568970385	WITHOUT_CLASSIFICATION	1.5264310296148924E-4	DESIGN
see if the entry represents a class file	WITHOUT_CLASSIFICATION	0.9998473568970385	WITHOUT_CLASSIFICATION	1.5264310296148924E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992614147846036	WITHOUT_CLASSIFICATION	7.385852153964194E-4	DESIGN
test out the optimizer:	WITHOUT_CLASSIFICATION	0.999946273220222	WITHOUT_CLASSIFICATION	5.372677977787071E-5	DESIGN
set the name of bulk accessor.	WITHOUT_CLASSIFICATION	0.9992569702826983	WITHOUT_CLASSIFICATION	7.430297173017178E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
invokespecial	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997185101164345	WITHOUT_CLASSIFICATION	2.814898835655024E-4	DESIGN
aload_1 load bean	WITHOUT_CLASSIFICATION	0.9993814043126907	WITHOUT_CLASSIFICATION	6.18595687309282E-4	DESIGN
checkcast cast bean	WITHOUT_CLASSIFICATION	0.9985596795572119	WITHOUT_CLASSIFICATION	0.0014403204427880676	DESIGN
astore_3 store bean	WITHOUT_CLASSIFICATION	0.9999114352696169	WITHOUT_CLASSIFICATION	8.856473038306202E-5	DESIGN
aload_2 args	WITHOUT_CLASSIFICATION	0.9994479903363558	WITHOUT_CLASSIFICATION	5.520096636442058E-4	DESIGN
iconst_i continue to aastore growing stack is 1	WITHOUT_CLASSIFICATION	0.9999105654079402	WITHOUT_CLASSIFICATION	8.943459205970146E-5	DESIGN
new	WITHOUT_CLASSIFICATION	0.9996818189588975	WITHOUT_CLASSIFICATION	3.181810411025039E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996104523561563	WITHOUT_CLASSIFICATION	3.895476438436612E-4	DESIGN
aload_3 load the raw bean	WITHOUT_CLASSIFICATION	0.9996022784469383	WITHOUT_CLASSIFICATION	3.977215530616899E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
aastore args	WITHOUT_CLASSIFICATION	0.9994479903363558	WITHOUT_CLASSIFICATION	5.520096636442058E-4	DESIGN
| this | bean | args | i | raw bean | exception |	WITHOUT_CLASSIFICATION	0.9984533522332243	WITHOUT_CLASSIFICATION	0.001546647766775683	DESIGN
required to exception table iconst_0 i	WITHOUT_CLASSIFICATION	0.9995607771228581	WITHOUT_CLASSIFICATION	4.3922287714193414E-4	DESIGN
istore_3 store i	WITHOUT_CLASSIFICATION	0.9999022099380035	WITHOUT_CLASSIFICATION	9.779006199658115E-5	DESIGN
aload_1 load the bean	WITHOUT_CLASSIFICATION	0.9992851061310419	WITHOUT_CLASSIFICATION	7.148938689579674E-4	DESIGN
checkcast cast the bean into a raw bean	WITHOUT_CLASSIFICATION	0.9978127507890295	WITHOUT_CLASSIFICATION	0.002187249210970559	DESIGN
current stack len = 0	WITHOUT_CLASSIFICATION	0.9999945709387646	WITHOUT_CLASSIFICATION	5.429061235449613E-6	DESIGN
start region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9970621225104063	WITHOUT_CLASSIFICATION	0.002937877489593731	DESIGN
iinc 3, 1	WITHOUT_CLASSIFICATION	0.9997773670634894	WITHOUT_CLASSIFICATION	2.226329365106513E-4	DESIGN
aload 4 load the raw bean	WITHOUT_CLASSIFICATION	0.999509100445806	WITHOUT_CLASSIFICATION	4.908995541939329E-4	DESIGN
aload_2 load the args	WITHOUT_CLASSIFICATION	0.9994706329340157	WITHOUT_CLASSIFICATION	5.293670659842325E-4	DESIGN
iconst_i	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aaload	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996033495953022	WITHOUT_CLASSIFICATION	3.966504046978022E-4	DESIGN
checkcast (case of primitive type) invokevirtual (case of primitive type)	WITHOUT_CLASSIFICATION	0.9997413303943942	WITHOUT_CLASSIFICATION	2.5866960560577636E-4	DESIGN
checkcast (case of reference type)	WITHOUT_CLASSIFICATION	0.9998003074095128	WITHOUT_CLASSIFICATION	1.9969259048723592E-4	DESIGN
current stack len = 2	WITHOUT_CLASSIFICATION	0.9999905991173241	WITHOUT_CLASSIFICATION	9.400882675853385E-6	DESIGN
end region to handling exception (BulkAccessorException)	WITHOUT_CLASSIFICATION	0.9968866044337032	WITHOUT_CLASSIFICATION	0.0031133955662967544	DESIGN
register in exception table	WITHOUT_CLASSIFICATION	0.9996883676621084	WITHOUT_CLASSIFICATION	3.1163233789156363E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aload_0	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997185101164345	WITHOUT_CLASSIFICATION	2.814898835655024E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997185101164345	WITHOUT_CLASSIFICATION	2.814898835655024E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996104523561563	WITHOUT_CLASSIFICATION	3.895476438436612E-4	DESIGN
invokevirtual	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996033495953022	WITHOUT_CLASSIFICATION	3.966504046978022E-4	DESIGN
local variables | target obj | each oldvalue |	WITHOUT_CLASSIFICATION	0.9999939249058173	WITHOUT_CLASSIFICATION	6.07509418275677E-6	DESIGN
astore 5 store exception	WITHOUT_CLASSIFICATION	0.9999290176531279	WITHOUT_CLASSIFICATION	7.098234687206649E-5	DESIGN
new BulkAccessorException	WITHOUT_CLASSIFICATION	0.9993384405333947	WITHOUT_CLASSIFICATION	6.615594666053805E-4	DESIGN
aload 5 load exception	WITHOUT_CLASSIFICATION	0.9995041593339519	WITHOUT_CLASSIFICATION	4.95840666048169E-4	DESIGN
iload_3 i	WITHOUT_CLASSIFICATION	0.9992740856893613	WITHOUT_CLASSIFICATION	7.259143106387109E-4	DESIGN
invokespecial BulkAccessorException.<init>	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
athrow	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
WARNING: classfile only	WITHOUT_CLASSIFICATION	0.9997040547723429	WITHOUT_CLASSIFICATION	2.959452276570087E-4	DESIGN
swallow	WITHOUT_CLASSIFICATION	0.9996055338524801	WITHOUT_CLASSIFICATION	3.944661475198994E-4	DESIGN
local variable | this |	WITHOUT_CLASSIFICATION	0.9979028550402247	WITHOUT_CLASSIFICATION	0.002097144959775424	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9976867058827352	WITHOUT_CLASSIFICATION	0.002313294117264816	DESIGN
aload_0 load this	WITHOUT_CLASSIFICATION	0.9976867058827352	WITHOUT_CLASSIFICATION	0.002313294117264816	DESIGN
getfield get field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9991872593323415	WITHOUT_CLASSIFICATION	8.127406676584917E-4	DESIGN
areturn return the value of the field	WITHOUT_CLASSIFICATION	0.9998954199320561	WITHOUT_CLASSIFICATION	1.0458006794380193E-4	DESIGN
local variables | this | callback |	WITHOUT_CLASSIFICATION	0.9990644087663539	WITHOUT_CLASSIFICATION	9.355912336459596E-4	DESIGN
aload_1 load callback	WITHOUT_CLASSIFICATION	0.9990802015585523	WITHOUT_CLASSIFICATION	9.19798441447871E-4	DESIGN
putfield put field "$JAVASSIST_CALLBACK" defined already	WITHOUT_CLASSIFICATION	0.9995982953915679	WITHOUT_CLASSIFICATION	4.0170460843212886E-4	DESIGN
case of non-static field	WITHOUT_CLASSIFICATION	0.9998809968185506	WITHOUT_CLASSIFICATION	1.1900318144954167E-4	DESIGN
getfield get each field	WITHOUT_CLASSIFICATION	0.9993346351018649	WITHOUT_CLASSIFICATION	6.653648981349944E-4	DESIGN
invokeinterface invoke Enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.999865732961072	WITHOUT_CLASSIFICATION	1.34267038928106E-4	DESIGN
ifnonnull	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9994616777065833	WITHOUT_CLASSIFICATION	5.383222934166429E-4	DESIGN
return each type	WITHOUT_CLASSIFICATION	0.9994616777065833	WITHOUT_CLASSIFICATION	5.383222934166429E-4	DESIGN
store_1 each type	WITHOUT_CLASSIFICATION	0.9992409415498706	WITHOUT_CLASSIFICATION	7.590584501292925E-4	DESIGN
ldc name of the field	WITHOUT_CLASSIFICATION	0.9993787957910377	WITHOUT_CLASSIFICATION	6.212042089621733E-4	DESIGN
load_1 each type	WITHOUT_CLASSIFICATION	0.9992409415498706	WITHOUT_CLASSIFICATION	7.590584501292925E-4	DESIGN
invokeinterface invoke Callback.read() each type	WITHOUT_CLASSIFICATION	0.9997735191075937	WITHOUT_CLASSIFICATION	2.2648089240635307E-4	DESIGN
int	WITHOUT_CLASSIFICATION	0.9998212467578929	WITHOUT_CLASSIFICATION	1.7875324210721565E-4	DESIGN
return	WITHOUT_CLASSIFICATION	0.9997185101164345	WITHOUT_CLASSIFICATION	2.814898835655024E-4	DESIGN
dup	WITHOUT_CLASSIFICATION	0.9996104523561563	WITHOUT_CLASSIFICATION	3.895476438436612E-4	DESIGN
invokeinterface	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996033495953022	WITHOUT_CLASSIFICATION	3.966504046978022E-4	DESIGN
checkcast	WITHOUT_CLASSIFICATION	0.9996033495953022	WITHOUT_CLASSIFICATION	3.966504046978022E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
invokeinterface enabled.getInterceptFieldCallback()	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
ifnonnull (label1)	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
load_1	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
putfield	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
return ;	WITHOUT_CLASSIFICATION	0.9997267877442494	WITHOUT_CLASSIFICATION	2.732122557505529E-4	DESIGN
ldc field name	WITHOUT_CLASSIFICATION	0.9992763208419077	WITHOUT_CLASSIFICATION	7.236791580923869E-4	DESIGN
getfield old value of the field	WITHOUT_CLASSIFICATION	0.9999528693234178	WITHOUT_CLASSIFICATION	4.7130676582282026E-5	DESIGN
invokeinterface callback.write(..)	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994126516280842	WITHOUT_CLASSIFICATION	5.873483719156949E-4	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994126516280842	WITHOUT_CLASSIFICATION	5.873483719156949E-4	DESIGN
not array	WITHOUT_CLASSIFICATION	0.9989023622650615	WITHOUT_CLASSIFICATION	0.0010976377349385378	DESIGN
array of reference type	WITHOUT_CLASSIFICATION	0.9994571842982768	WITHOUT_CLASSIFICATION	5.42815701723254E-4	DESIGN
boolean	WITHOUT_CLASSIFICATION	0.9998053708403515	WITHOUT_CLASSIFICATION	1.9462915964859058E-4	DESIGN
byte	WITHOUT_CLASSIFICATION	0.999728739365591	WITHOUT_CLASSIFICATION	2.7126063440897045E-4	DESIGN
char	WITHOUT_CLASSIFICATION	0.9998322897707733	WITHOUT_CLASSIFICATION	1.6771022922660862E-4	DESIGN
short	WITHOUT_CLASSIFICATION	0.9992207673129179	WITHOUT_CLASSIFICATION	7.792326870822039E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999614777517404	WITHOUT_CLASSIFICATION	3.85222482596228E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996207593488998	WITHOUT_CLASSIFICATION	3.792406511002211E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996207593488998	WITHOUT_CLASSIFICATION	3.792406511002211E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9995908692944421	WITHOUT_CLASSIFICATION	4.0913070555785894E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9995908692944421	WITHOUT_CLASSIFICATION	4.0913070555785894E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974180128020657	WITHOUT_CLASSIFICATION	0.0025819871979343018	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974180128020657	WITHOUT_CLASSIFICATION	0.0025819871979343018	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988781978411332	WITHOUT_CLASSIFICATION	0.0011218021588668453	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988781978411332	WITHOUT_CLASSIFICATION	0.0011218021588668453	DESIGN
reference type	WITHOUT_CLASSIFICATION	0.9994126516280842	WITHOUT_CLASSIFICATION	5.873483719156949E-4	DESIGN
double	WITHOUT_CLASSIFICATION	0.9999614777517404	WITHOUT_CLASSIFICATION	3.85222482596228E-5	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996207593488998	WITHOUT_CLASSIFICATION	3.792406511002211E-4	DESIGN
float	WITHOUT_CLASSIFICATION	0.9996207593488998	WITHOUT_CLASSIFICATION	3.792406511002211E-4	DESIGN
long	WITHOUT_CLASSIFICATION	0.9995908692944421	WITHOUT_CLASSIFICATION	4.0913070555785894E-4	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974180128020657	WITHOUT_CLASSIFICATION	0.0025819871979343018	DESIGN
bad type	WITHOUT_CLASSIFICATION	0.9974180128020657	WITHOUT_CLASSIFICATION	0.0025819871979343018	DESIGN
boolean, byte, char, int, short	WITHOUT_CLASSIFICATION	0.9988781978411332	WITHOUT_CLASSIFICATION	0.0011218021588668453	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9991959498595733	WITHOUT_CLASSIFICATION	8.040501404266302E-4	DESIGN
Mainly for OSCache	WITHOUT_CLASSIFICATION	0.999549965669221	WITHOUT_CLASSIFICATION	4.50034330779051E-4	DESIGN
decrement the lock	WITHOUT_CLASSIFICATION	0.9997765192420928	WITHOUT_CLASSIFICATION	2.2348075790720005E-4	DESIGN
create new lock that times out immediately	WITHOUT_CLASSIFICATION	0.9991542292239428	WITHOUT_CLASSIFICATION	8.457707760571907E-4	DESIGN
recache the updated state	WITHOUT_CLASSIFICATION	0.9998850436936739	WITHOUT_CLASSIFICATION	1.149563063260274E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996482590098085	WITHOUT_CLASSIFICATION	3.517409901915115E-4	DESIGN
null clientLock is remotely possible but will never happen in practice	WITHOUT_CLASSIFICATION	0.999987735870925	WITHOUT_CLASSIFICATION	1.2264129074925239E-5	DESIGN
we really could refresh the item if it is not a lock, but it might be slower return freshTimestamp < txTimestamp	WITHOUT_CLASSIFICATION	0.9849442007399659	WITHOUT_CLASSIFICATION	0.015055799260034083	DESIGN
by requiring <, we rely on lock timeout in the case of an unsuccessful update!	WITHOUT_CLASSIFICATION	0.999960228384883	WITHOUT_CLASSIFICATION	3.977161511704499E-5	DESIGN
the user provided resulttransformer, not the one used with "select new". Here to avoid mangling transformed/non-transformed results.	WITHOUT_CLASSIFICATION	0.9978225779784726	WITHOUT_CLASSIFICATION	0.0021774220215274066	DESIGN
disassemble positional parameters	WITHOUT_CLASSIFICATION	0.9999171943163132	WITHOUT_CLASSIFICATION	8.280568368677183E-5	DESIGN
disassemble named parameters	WITHOUT_CLASSIFICATION	0.9998936193045744	WITHOUT_CLASSIFICATION	1.0638069542561324E-4	DESIGN
ie. 60 seconds	WITHOUT_CLASSIFICATION	0.9995989518257041	WITHOUT_CLASSIFICATION	4.0104817429596046E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996482590098085	WITHOUT_CLASSIFICATION	3.517409901915115E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996482590098085	WITHOUT_CLASSIFICATION	3.517409901915115E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996482590098085	WITHOUT_CLASSIFICATION	3.517409901915115E-4	DESIGN
this is called from SettingsFactory irregardless; trivial to simply disregard	WITHOUT_CLASSIFICATION	0.992730563277689	WITHOUT_CLASSIFICATION	0.0072694367223109235	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991408420368653	WITHOUT_CLASSIFICATION	8.591579631346909E-4	DESIGN
Do nothing; subclasses may override.	WITHOUT_CLASSIFICATION	0.9991408420368653	WITHOUT_CLASSIFICATION	8.591579631346909E-4	DESIGN
throw new UnsupportedOperationException("Can't write to a readonly object");	WITHOUT_CLASSIFICATION	0.9986781930738792	WITHOUT_CLASSIFICATION	0.0013218069261209068	DESIGN
assembled state gets put in a new array (we read from cache by value!)	WITHOUT_CLASSIFICATION	0.9991703918350637	WITHOUT_CLASSIFICATION	8.296081649362848E-4	DESIGN
persister.setIdentifier(result, id); before calling interceptor, for consistency with normal load	WITHOUT_CLASSIFICATION	0.998884920008557	WITHOUT_CLASSIFICATION	0.001115079991442939	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988217697528429	WITHOUT_CLASSIFICATION	0.0011782302471570762	DESIGN
no-op; CCS did not have such a concept	WITHOUT_CLASSIFICATION	0.9988217697528429	WITHOUT_CLASSIFICATION	0.0011782302471570762	DESIGN
again, CCS did not have such a concept; but a reasonable proximity is to clear the cache after transaction as long as the underlying cache is not JTA aware.	WITHOUT_CLASSIFICATION	0.9993959622683732	WITHOUT_CLASSIFICATION	6.04037731626845E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999878482574401	WITHOUT_CLASSIFICATION	1.2151742559899773E-4	DESIGN
again, CCS did not have such a concept; however a reasonable proximity is to clear the cache. For non-transaction aware caches, we will also do a clear at the end of the transaction	WITHOUT_CLASSIFICATION	0.999878482574401	WITHOUT_CLASSIFICATION	1.2151742559899773E-4	DESIGN
classes mentioned in extends not available - so put it in queue	WITHOUT_CLASSIFICATION	0.9991016873965453	WITHOUT_CLASSIFICATION	8.983126034546459E-4	DESIGN
get meta's from <hibernate-mapping>	WITHOUT_CLASSIFICATION	0.999437907327787	WITHOUT_CLASSIFICATION	5.620926722130547E-4	DESIGN
get meta's from <class>	WITHOUT_CLASSIFICATION	0.999101394894389	WITHOUT_CLASSIFICATION	8.986051056109639E-4	DESIGN
DB-OBJECTNAME	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
MUTABLE	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
WHERE	WITHOUT_CLASSIFICATION	0.999915069317876	WITHOUT_CLASSIFICATION	8.493068212392557E-5	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996315140894967	WITHOUT_CLASSIFICATION	3.6848591050321486E-4	DESIGN
POLYMORPHISM	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.518307330146827	WITHOUT_CLASSIFICATION	0.4816926698531731	DESIGN
ID	WITHOUT_CLASSIFICATION	0.9995956164529979	WITHOUT_CLASSIFICATION	4.043835470021441E-4	DESIGN
VERSION / TIMESTAMP	WITHOUT_CLASSIFICATION	0.9997611385495817	WITHOUT_CLASSIFICATION	2.3886145041819546E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9957226449412311	WITHOUT_CLASSIFICATION	0.004277355058768892	DESIGN
this is either a <version/> tag with no type attribute, or a <timestamp/> tag	WITHOUT_CLASSIFICATION	0.9993396586021372	WITHOUT_CLASSIFICATION	6.603413978628015E-4	DESIGN
for version properties marked as being generated, make sure they are "always" generated; aka, "insert" is invalid; this is dis-allowed by the DTD, but just to make sure...	WITHOUT_CLASSIFICATION	0.9997750682974501	WITHOUT_CLASSIFICATION	2.2493170254992432E-4	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
( (Column) discrim.getColumnIterator().next() ).setType(type);	WITHOUT_CLASSIFICATION	0.9997376844892346	WITHOUT_CLASSIFICATION	2.6231551076536804E-4	DESIGN
go ahead and set the lazy here, since pojo.proxy can override it.	WITHOUT_CLASSIFICATION	0.9999749286977543	WITHOUT_CLASSIFICATION	2.5071302245689767E-5	DESIGN
DYNAMIC UPDATE	WITHOUT_CLASSIFICATION	0.9995664802332418	WITHOUT_CLASSIFICATION	4.335197667581503E-4	DESIGN
IMPORT	WITHOUT_CLASSIFICATION	0.9996695370578316	WITHOUT_CLASSIFICATION	3.3046294216839913E-4	DESIGN
BATCH SIZE	WITHOUT_CLASSIFICATION	0.9996055428017161	WITHOUT_CLASSIFICATION	3.9445719828389925E-4	DESIGN
SELECT BEFORE UPDATE	WITHOUT_CLASSIFICATION	0.9995870280320603	WITHOUT_CLASSIFICATION	4.129719679396225E-4	DESIGN
OPTIMISTIC LOCK MODE	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
PERSISTER	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997046426185365	WITHOUT_CLASSIFICATION	2.953573814633964E-4	DESIGN
get meta's from <subclass>	WITHOUT_CLASSIFICATION	0.999101394894389	WITHOUT_CLASSIFICATION	8.986051056109639E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998912002791822	WITHOUT_CLASSIFICATION	1.0879972081773734E-4	DESIGN
joined subclasses	WITHOUT_CLASSIFICATION	0.9998383933721259	WITHOUT_CLASSIFICATION	1.616066278741461E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996333800739543	WITHOUT_CLASSIFICATION	3.666199260456871E-4	DESIGN
CHECK	WITHOUT_CLASSIFICATION	0.9996315140894967	WITHOUT_CLASSIFICATION	3.6848591050321486E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997046426185365	WITHOUT_CLASSIFICATION	2.953573814633964E-4	DESIGN
properties	WITHOUT_CLASSIFICATION	0.9998912002791822	WITHOUT_CLASSIFICATION	1.0879972081773734E-4	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996333800739543	WITHOUT_CLASSIFICATION	3.666199260456871E-4	DESIGN
model.getKey().setType( new Type( model.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997592487159271	WITHOUT_CLASSIFICATION	2.407512840728171E-4	DESIGN
TABLENAME	WITHOUT_CLASSIFICATION	0.9996056970128713	WITHOUT_CLASSIFICATION	3.9430298712875685E-4	DESIGN
join.getKey().setType( new Type( lazz.getIdentifier() ) );	WITHOUT_CLASSIFICATION	0.9997592487159271	WITHOUT_CLASSIFICATION	2.407512840728171E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996061188470382	WITHOUT_CLASSIFICATION	3.938811529617722E-4	DESIGN
COLUMN(S)	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
column index	WITHOUT_CLASSIFICATION	0.9999916991264988	WITHOUT_CLASSIFICATION	8.30087350129366E-6	DESIGN
column unique-key	WITHOUT_CLASSIFICATION	0.9999087302651578	WITHOUT_CLASSIFICATION	9.126973484222453E-5	DESIGN
automatically makes a column with the default name if none is specifed by XML	WITHOUT_CLASSIFICATION	0.9967242163705826	WITHOUT_CLASSIFICATION	0.003275783629417423	DESIGN
for an any	WITHOUT_CLASSIFICATION	0.9998371927525077	WITHOUT_CLASSIFICATION	1.6280724749228397E-4	DESIGN
insertable simply because that is the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.9999942389053826	WITHOUT_CLASSIFICATION	5.761094617275925E-6	DESIGN
the user specifically supplied insert="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999822182099644	WITHOUT_CLASSIFICATION	1.7781790035644535E-5	DESIGN
properties generated on update can never be updateable...	WITHOUT_CLASSIFICATION	0.9994216350837614	WITHOUT_CLASSIFICATION	5.78364916238549E-4	DESIGN
updateable only because the user did not specify anything; just override it	WITHOUT_CLASSIFICATION	0.999998822336954	WITHOUT_CLASSIFICATION	1.177663045988951E-6	DESIGN
the user specifically supplied update="true", which constitutes an illegal combo	WITHOUT_CLASSIFICATION	0.9999822182099644	WITHOUT_CLASSIFICATION	1.7781790035644535E-5	DESIGN
ROLENAME	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
FETCH STRATEGY	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
TABLE	WITHOUT_CLASSIFICATION	0.9997072101720824	WITHOUT_CLASSIFICATION	2.927898279175272E-4	DESIGN
tableName = mappings.getNamingStrategy().propertyToTableName( className, path );	WITHOUT_CLASSIFICATION	0.99993847617436	WITHOUT_CLASSIFICATION	6.152382563991582E-5	DESIGN
SORT	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
CUSTOM SQL	WITHOUT_CLASSIFICATION	0.9997046426185365	WITHOUT_CLASSIFICATION	2.953573814633964E-4	DESIGN
unsorted, natural, comparator.class.name	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
ORPHAN DELETE (used for programmer error detection)	WITHOUT_CLASSIFICATION	0.99895082309342	WITHOUT_CLASSIFICATION	0.0010491769065799968	DESIGN
set up second pass	WITHOUT_CLASSIFICATION	0.9998655713805975	WITHOUT_CLASSIFICATION	1.3442861940249533E-4	DESIGN
an "embedded" component (composite ids and unique) note that this does not handle nested components	WITHOUT_CLASSIFICATION	0.9889692344632274	WITHOUT_CLASSIFICATION	0.011030765536772583	DESIGN
a nested composite element	WITHOUT_CLASSIFICATION	0.9829024650495728	WITHOUT_CLASSIFICATION	0.017097534950427234	DESIGN
for an any we will have to use reflection	WITHOUT_CLASSIFICATION	0.9994380199989252	WITHOUT_CLASSIFICATION	5.619800010747341E-4	DESIGN
NOTE SPECIAL CASE: one-to-one constrained=false cannot be proxied, so default to join and non-lazy	WITHOUT_CLASSIFICATION	0.9999813331945886	WITHOUT_CLASSIFICATION	1.8666805411354814E-5	DESIGN
use old (HB 2.1) defaults if outer-join is specified	WITHOUT_CLASSIFICATION	0.9998833079424534	WITHOUT_CLASSIFICATION	1.1669205754660865E-4	DESIGN
lazy = !join;	WITHOUT_CLASSIFICATION	0.9998217003383023	WITHOUT_CLASSIFICATION	1.782996616978144E-4	DESIGN
GENERATOR	WITHOUT_CLASSIFICATION	0.9996510759822482	WITHOUT_CLASSIFICATION	3.489240177518206E-4	DESIGN
ID UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9995414793441626	WITHOUT_CLASSIFICATION	4.5852065583747826E-4	DESIGN
VERSION UNSAVED-VALUE	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
not necessarily a unique property reference	WITHOUT_CLASSIFICATION	0.9924671630392773	WITHOUT_CLASSIFICATION	0.007532836960722619	DESIGN
( (Column) ( (SimpleValue) ic.getIndex() ).getColumnIterator().next() ).setNullable(false);	WITHOUT_CLASSIFICATION	0.9997376844892346	WITHOUT_CLASSIFICATION	2.6231551076536804E-4	DESIGN
contained elements:	WITHOUT_CLASSIFICATION	0.9994189116380044	WITHOUT_CLASSIFICATION	5.810883619954781E-4	DESIGN
for non-inverse one-to-many, with a not-null fk, add a backref!	WITHOUT_CLASSIFICATION	0.9992200386126406	WITHOUT_CLASSIFICATION	7.799613873593102E-4	DESIGN
Bind the where	WITHOUT_CLASSIFICATION	0.9998709078096167	WITHOUT_CLASSIFICATION	1.290921903832154E-4	DESIGN
Bind the order-by	WITHOUT_CLASSIFICATION	0.9997507793448265	WITHOUT_CLASSIFICATION	2.4922065517354533E-4	DESIGN
Bind the filters	WITHOUT_CLASSIFICATION	0.999714355788105	WITHOUT_CLASSIFICATION	2.856442118949784E-4	DESIGN
overriding inherited meta attribute. HBX-621 & HBX-793	WITHOUT_CLASSIFICATION	0.9993395640447837	WITHOUT_CLASSIFICATION	6.604359552161579E-4	DESIGN
first, iterate over all elements capable of defining an extends attribute collecting all found extends references if they cannot be resolved against the already processed mappings.	WITHOUT_CLASSIFICATION	0.9999989736849625	WITHOUT_CLASSIFICATION	1.026315037458904E-6	DESIGN
mappings might contain either the "raw" extends name (in the case of an entity-name mapping) or a FQN (in the case of a POJO mapping).	WITHOUT_CLASSIFICATION	0.9999333674234658	WITHOUT_CLASSIFICATION	6.663257653418709E-5	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5366375769731139	DESIGN	0.4633624230268861	WITHOUT_CLASSIFICATION
SessionFactory name:	WITHOUT_CLASSIFICATION	0.9996857244574976	WITHOUT_CLASSIFICATION	3.142755425024006E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9991414689997399	WITHOUT_CLASSIFICATION	8.585310002601936E-4	DESIGN
JDBC and connection settings:	WITHOUT_CLASSIFICATION	0.9991414689997399	WITHOUT_CLASSIFICATION	8.585310002601936E-4	DESIGN
Interrogate JDBC metadata	WITHOUT_CLASSIFICATION	0.9997874316385594	WITHOUT_CLASSIFICATION	2.1256836144065285E-4	DESIGN
user supplied JDBC connections	WITHOUT_CLASSIFICATION	0.9999211156423502	WITHOUT_CLASSIFICATION	7.888435764980743E-5	DESIGN
use dialect default properties	WITHOUT_CLASSIFICATION	0.9984733920913745	WITHOUT_CLASSIFICATION	0.0015266079086255428	DESIGN
Transaction settings:	WITHOUT_CLASSIFICATION	0.9992776941261321	WITHOUT_CLASSIFICATION	7.223058738678894E-4	DESIGN
SQL Generation settings:	WITHOUT_CLASSIFICATION	0.9994082938946903	WITHOUT_CLASSIFICATION	5.917061053096058E-4	DESIGN
Query parser settings:	WITHOUT_CLASSIFICATION	0.9981096565550932	WITHOUT_CLASSIFICATION	0.001890343444906825	DESIGN
Second-level / query cache:	WITHOUT_CLASSIFICATION	0.9997074876190161	WITHOUT_CLASSIFICATION	2.9251238098399775E-4	DESIGN
The cache provider is needed when we either have second-level cache enabled or query cache enabled. Note that useSecondLevelCache is enabled by default	WITHOUT_CLASSIFICATION	0.9999994980530029	WITHOUT_CLASSIFICATION	5.019469970650251E-7	DESIGN
SQL Exception converter:	WITHOUT_CLASSIFICATION	0.9989295266792495	WITHOUT_CLASSIFICATION	0.0010704733207505133	DESIGN
Statistics and logging:	WITHOUT_CLASSIFICATION	0.999013208380554	WITHOUT_CLASSIFICATION	9.867916194460714E-4	DESIGN
settings.setShowSqlEnabled(showSql);	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
settings.setFormatSqlEnabled(formatSql);	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
Schema export:	WITHOUT_CLASSIFICATION	0.9996324321162435	WITHOUT_CLASSIFICATION	3.675678837563722E-4	DESIGN
String provider = properties.getProperty( Environment.BYTECODE_PROVIDER ); log.info( "Bytecode provider name : " + provider ); BytecodeProvider bytecodeProvider = buildBytecodeProvider( provider ); settings.setBytecodeProvider( bytecodeProvider );	WITHOUT_CLASSIFICATION	0.9999805822115609	WITHOUT_CLASSIFICATION	1.941778843904856E-5	DESIGN
legacy behavior, apply the bridge...	WITHOUT_CLASSIFICATION	0.9974203391839694	WITHOUT_CLASSIFICATION	0.0025796608160305497	DESIGN
maybe a concrete SQLpropertyresult type, but Map is exactly what is required at the moment	WITHOUT_CLASSIFICATION	0.986380539038401	WITHOUT_CLASSIFICATION	0.01361946096159904	DESIGN
if dotted and not load-collection nor return-join regular property	WITHOUT_CLASSIFICATION	0.9952035632451683	WITHOUT_CLASSIFICATION	0.004796436754831615	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907 private BytecodeProvider bytecodeProvider;	WITHOUT_CLASSIFICATION	0.9990548567668495	WITHOUT_CLASSIFICATION	9.45143233150601E-4	DESIGN
public getters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999689871398401	WITHOUT_CLASSIFICATION	3.101286015990821E-5	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9996189589900246	WITHOUT_CLASSIFICATION	3.810410099753647E-4	DESIGN
package protected setters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.965902674423703	WITHOUT_CLASSIFICATION	0.034097325576296966	DESIGN
void setShowSqlEnabled(boolean b) { showSql = b; } void setFormatSqlEnabled(boolean b) { formatSql = b; }	WITHOUT_CLASSIFICATION	0.9993584772794898	WITHOUT_CLASSIFICATION	6.41522720510271E-4	DESIGN
public BytecodeProvider getBytecodeProvider() { return bytecodeProvider; } void setBytecodeProvider(BytecodeProvider bytecodeProvider) { this.bytecodeProvider = bytecodeProvider; }	WITHOUT_CLASSIFICATION	0.9997978010277389	WITHOUT_CLASSIFICATION	2.0219897226104325E-4	DESIGN
using local since the inheritedMetas at this point is not the correct map since it is always the empty map	WITHOUT_CLASSIFICATION	0.9827636265080354	WITHOUT_CLASSIFICATION	0.017236373491964534	DESIGN
private ComponentTuplizerFactory componentTuplizerFactory; todo : HHH-3517 and HHH-1907	WITHOUT_CLASSIFICATION	0.9990548567668495	WITHOUT_CLASSIFICATION	9.45143233150601E-4	DESIGN
protected List extendsQueue;	WITHOUT_CLASSIFICATION	0.9986094756736424	WITHOUT_CLASSIFICATION	0.001390524326357446	DESIGN
extendsQueue = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998201685886554	WITHOUT_CLASSIFICATION	1.7983141134464366E-4	DESIGN
componentTuplizerFactory = new ComponentTuplizerFactory();	WITHOUT_CLASSIFICATION	0.999816471205898	WITHOUT_CLASSIFICATION	1.835287941019779E-4	DESIGN
if doc is null, then for whatever reason, the cached file cannot be used...	WITHOUT_CLASSIFICATION	0.999976849928236	WITHOUT_CLASSIFICATION	2.3150071763951583E-5	DESIGN
drop them in reverse order in case db needs it done that way...	WITHOUT_CLASSIFICATION	0.9977249280513838	WITHOUT_CLASSIFICATION	0.002275071948616241	DESIGN
public ComponentTuplizerFactory getComponentTuplizerFactory() { return componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9996189589900246	WITHOUT_CLASSIFICATION	3.810410099753647E-4	DESIGN
This method may be called many times!!	WITHOUT_CLASSIFICATION	0.9865345505519846	WITHOUT_CLASSIFICATION	0.013465449448015358	DESIGN
Iterator iterator = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.99981443408648	WITHOUT_CLASSIFICATION	1.8556591352011806E-4	DESIGN
Iterator iter = extendsQueue.iterator();	WITHOUT_CLASSIFICATION	0.9993678765208464	WITHOUT_CLASSIFICATION	6.321234791536333E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997991306834478	WITHOUT_CLASSIFICATION	2.0086931655220467E-4	DESIGN
found	WITHOUT_CLASSIFICATION	0.9997991306834478	WITHOUT_CLASSIFICATION	2.0086931655220467E-4	DESIGN
settings.setComponentTuplizerFactory( this.getComponentTuplizerFactory() );	WITHOUT_CLASSIFICATION	0.9996679636599816	WITHOUT_CLASSIFICATION	3.320363400184368E-4	DESIGN
private final List extendsQueue;	WITHOUT_CLASSIFICATION	0.9998452975513319	WITHOUT_CLASSIFICATION	1.5470244866822965E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.999573353362298	WITHOUT_CLASSIFICATION	4.266466377020019E-4	DESIGN
<String, String>	WITHOUT_CLASSIFICATION	0.999573353362298	WITHOUT_CLASSIFICATION	4.266466377020019E-4	DESIGN
+ "_" + referencedColumnName not used for backward compatibility	WITHOUT_CLASSIFICATION	0.5366375769731139	DESIGN	0.4633624230268861	WITHOUT_CLASSIFICATION
Set USE_REFLECTION_OPTIMIZER to false to fix HHH-227	WITHOUT_CLASSIFICATION	0.9949696031082726	WITHOUT_CLASSIFICATION	0.005030396891727353	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999507432481269	WITHOUT_CLASSIFICATION	4.925675187308676E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997018329200328	WITHOUT_CLASSIFICATION	2.981670799672806E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992614147846036	WITHOUT_CLASSIFICATION	7.385852153964194E-4	DESIGN
orphan delete not supported for EntityMode.DOM4J	WITHOUT_CLASSIFICATION	0.999507432481269	WITHOUT_CLASSIFICATION	4.925675187308676E-4	DESIGN
element = XMLHelper.generateDom4jElement( persister.getNodeName() );	WITHOUT_CLASSIFICATION	0.9997018329200328	WITHOUT_CLASSIFICATION	2.981670799672806E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9970903932275594	WITHOUT_CLASSIFICATION	0.002909606772440566	DESIGN
maintain correct duplication if loaded in a cartesian product	WITHOUT_CLASSIFICATION	0.9982241009815259	WITHOUT_CLASSIFICATION	0.0017758990184740932	DESIGN
the element has been removed from the set	WITHOUT_CLASSIFICATION	0.9969899031567682	WITHOUT_CLASSIFICATION	0.0030100968432319594	DESIGN
the element has changed	WITHOUT_CLASSIFICATION	0.9999087650503843	WITHOUT_CLASSIFICATION	9.123494961571416E-5	DESIGN
Careful: these methods do not initialize the collection.	WITHOUT_CLASSIFICATION	0.9899313209168097	WITHOUT_CLASSIFICATION	0.010068679083190328	DESIGN
needed so that we remove this collection from the second-level cache	WITHOUT_CLASSIFICATION	0.9125924942785697	WITHOUT_CLASSIFICATION	0.08740750572143022	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996731389897308	WITHOUT_CLASSIFICATION	3.2686101026927E-4	DESIGN
override on some subclasses	WITHOUT_CLASSIFICATION	0.9996731389897308	WITHOUT_CLASSIFICATION	3.2686101026927E-4	DESIGN
do this bit after setting initialized to true or it will recurse	WITHOUT_CLASSIFICATION	0.9863084491315774	WITHOUT_CLASSIFICATION	0.013691550868422515	DESIGN
short-circuit(s) no new elements, the old list contains only Orphans no old elements, so no Orphans neither	WITHOUT_CLASSIFICATION	0.9999981240741078	WITHOUT_CLASSIFICATION	1.8759258921257802E-6	DESIGN
create the collection holding the Orphans	WITHOUT_CLASSIFICATION	0.9993542329324044	WITHOUT_CLASSIFICATION	6.457670675956234E-4	DESIGN
collect EntityIdentifier(s) of the current elements - add them into a HashSet for fast access	WITHOUT_CLASSIFICATION	0.9999396040851325	WITHOUT_CLASSIFICATION	6.0395914867426106E-5	DESIGN
iterate over the old list	WITHOUT_CLASSIFICATION	0.9997489224019042	WITHOUT_CLASSIFICATION	2.510775980958462E-4	DESIGN
(array==null) ? tempList.size() :	WITHOUT_CLASSIFICATION	0.9986369544635157	WITHOUT_CLASSIFICATION	0.0013630455364842795	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992614147846036	WITHOUT_CLASSIFICATION	7.385852153964194E-4	DESIGN
(array==null) ? tempList.get(i) :	WITHOUT_CLASSIFICATION	0.9986369544635157	WITHOUT_CLASSIFICATION	0.0013630455364842795	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9991540663713121	WITHOUT_CLASSIFICATION	8.45933628687922E-4	DESIGN
write(); -- doesn't	WITHOUT_CLASSIFICATION	0.9991540663713121	WITHOUT_CLASSIFICATION	8.45933628687922E-4	DESIGN
amazingly, these two will work because AbstractCollection uses iterator() to fill the array	WITHOUT_CLASSIFICATION	0.9992850361995257	WITHOUT_CLASSIFICATION	7.149638004743785E-4	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9970903932275594	WITHOUT_CLASSIFICATION	0.002909606772440566	DESIGN
finally, what it's all about...	WITHOUT_CLASSIFICATION	0.9981778863429479	WITHOUT_CLASSIFICATION	0.0018221136570521633	DESIGN
note that if we load this collection from a cartesian product the multiplicity would be broken ... so use an idbag instead	WITHOUT_CLASSIFICATION	0.8555194779565245	DESIGN	0.14448052204347547	WITHOUT_CLASSIFICATION
Anyway, here we implement <set> semantics for a <one-to-many> <bag>!	WITHOUT_CLASSIFICATION	0.5783682259580408	WITHOUT_CLASSIFICATION	0.42163177404195923	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997588199034505	WITHOUT_CLASSIFICATION	2.4118009654962863E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9398681816975178	WITHOUT_CLASSIFICATION	0.06013181830248224	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9970903932275594	WITHOUT_CLASSIFICATION	0.002909606772440566	DESIGN
a shortcut if its location didn't change!	WITHOUT_CLASSIFICATION	0.9997588199034505	WITHOUT_CLASSIFICATION	2.4118009654962863E-4	DESIGN
search for it note that this code is incorrect for other than one-to-many	WITHOUT_CLASSIFICATION	0.9398681816975178	WITHOUT_CLASSIFICATION	0.06013181830248224	DESIGN
public boolean equals(Object other) {read();return bag.equals(other);}public int hashCode(Object other) {read();return bag.hashCode();}	WITHOUT_CLASSIFICATION	0.9999617260439388	WITHOUT_CLASSIFICATION	3.827395606119044E-5	DESIGN
List OPERATIONS:	WITHOUT_CLASSIFICATION	0.9998537658713311	WITHOUT_CLASSIFICATION	1.462341286688711E-4	DESIGN
pad with nulls from the current last element up to the new index	WITHOUT_CLASSIFICATION	0.9999919847329662	WITHOUT_CLASSIFICATION	8.015267033732988E-6	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9970903932275594	WITHOUT_CLASSIFICATION	0.002909606772440566	DESIGN
needed for SOAP libraries, etc	WITHOUT_CLASSIFICATION	0.9970903932275594	WITHOUT_CLASSIFICATION	0.002909606772440566	DESIGN
from Map	WITHOUT_CLASSIFICATION	0.999448899151324	WITHOUT_CLASSIFICATION	5.51100848676078E-4	DESIGN
from SortedMap	WITHOUT_CLASSIFICATION	0.9994413093155743	WITHOUT_CLASSIFICATION	5.586906844257088E-4	DESIGN
inject the data	WITHOUT_CLASSIFICATION	0.9999151550065405	WITHOUT_CLASSIFICATION	8.484499345950283E-5	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997895867006693	WITHOUT_CLASSIFICATION	2.1041329933062458E-4	DESIGN
default pool size 20	WITHOUT_CLASSIFICATION	0.9998164704778901	WITHOUT_CLASSIFICATION	1.8352952210993353E-4	DESIGN
trying via forName() first to be as close to DriverManager's semantics	WITHOUT_CLASSIFICATION	0.9999895532274533	WITHOUT_CLASSIFICATION	1.0446772546720441E-5	DESIGN
if debug level is enabled, then log the password, otherwise mask it	WITHOUT_CLASSIFICATION	0.999992684171113	WITHOUT_CLASSIFICATION	7.315828886936148E-6	DESIGN
register a cleanup synch	WITHOUT_CLASSIFICATION	0.9998984527131494	WITHOUT_CLASSIFICATION	1.015472868506663E-4	DESIGN
wrap the session in the transaction-protection proxy	WITHOUT_CLASSIFICATION	0.999678350680117	WITHOUT_CLASSIFICATION	3.2164931988298227E-4	DESIGN
then bind it	WITHOUT_CLASSIFICATION	0.9994101705450666	WITHOUT_CLASSIFICATION	5.898294549333107E-4	DESIGN
try to make sure we don't wrap and already wrapped session	WITHOUT_CLASSIFICATION	0.9476461558810214	WITHOUT_CLASSIFICATION	0.052353844118978664	DESIGN
allow these to go through the the real session no matter what	WITHOUT_CLASSIFICATION	0.9775863293844179	WITHOUT_CLASSIFICATION	0.02241367061558213	DESIGN
limit the methods available if no transaction is active	WITHOUT_CLASSIFICATION	0.9993304078838838	WITHOUT_CLASSIFICATION	6.695921161162538E-4	DESIGN
allow these (deprecated) methods to pass through	WITHOUT_CLASSIFICATION	0.9968668835156023	WITHOUT_CLASSIFICATION	0.003133116484397642	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996267359749185	WITHOUT_CLASSIFICATION	3.7326402508152637E-4	DESIGN
We could register the session against the transaction even though it is not started, but we'd have no guarentee of ever getting the map entries cleaned up (aside from spawning threads).	WITHOUT_CLASSIFICATION	0.9999939113087836	WITHOUT_CLASSIFICATION	6.088691216535499E-6	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997895867006693	WITHOUT_CLASSIFICATION	2.1041329933062458E-4	DESIGN
private String propertyName;	WITHOUT_CLASSIFICATION	0.996681897265418	WITHOUT_CLASSIFICATION	0.0033181027345820114	DESIGN
public PropertyProjection project() {return Projections.property(getPropertyName());}	WITHOUT_CLASSIFICATION	0.9998273079820058	WITHOUT_CLASSIFICATION	1.7269201799424399E-4	DESIGN
String[] fk = StringHelper.qualify( "collection_", cp.getKeyColumnNames() );	WITHOUT_CLASSIFICATION	0.9998887871035859	WITHOUT_CLASSIFICATION	1.1121289641410089E-4	DESIGN
" collection_ where " +	WITHOUT_CLASSIFICATION	0.9999645353446998	WITHOUT_CLASSIFICATION	3.546465530032004E-5	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995503916359354	WITHOUT_CLASSIFICATION	4.4960836406468345E-4	DESIGN
unsupported	WITHOUT_CLASSIFICATION	0.9995503916359354	WITHOUT_CLASSIFICATION	4.4960836406468345E-4	DESIGN
cannot be instantiated	WITHOUT_CLASSIFICATION	0.9997895867006693	WITHOUT_CLASSIFICATION	2.1041329933062458E-4	DESIGN
the following two lines were added to ensure that this.params is not null, which can happen with two-deep nested subqueries	WITHOUT_CLASSIFICATION	0.9997645031963254	WITHOUT_CLASSIFICATION	2.3549680367455922E-4	DESIGN
with two-deep subqueries, the same alias would get generated for both using the old method (criteriaQuery.generateSQLAlias()), so that is now used as a fallback if the main criteria alias isn't set	WITHOUT_CLASSIFICATION	0.9920226554594245	WITHOUT_CLASSIFICATION	0.007977344540575547	DESIGN
implicit polymorphism not supported (would need a union)	WITHOUT_CLASSIFICATION	0.9881104729278178	WITHOUT_CLASSIFICATION	0.011889527072182184	DESIGN
pull off the last ", "	WITHOUT_CLASSIFICATION	0.9999406717639719	WITHOUT_CLASSIFICATION	5.932823602804258E-5	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996109576218093	WITHOUT_CLASSIFICATION	3.890423781908169E-4	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces	WITHOUT_CLASSIFICATION	0.9998817260376195	WITHOUT_CLASSIFICATION	1.1827396238049718E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource)	WITHOUT_CLASSIFICATION	0.999244129688674	WITHOUT_CLASSIFICATION	7.558703113258799E-4	DESIGN
NOT_SUPPORTED_SHOULD_USE_JDBC3_PreparedStatement.getGeneratedKeys_method	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9982157829568156	WITHOUT_CLASSIFICATION	0.001784217043184454	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
Oracle did add support for ANSI CASE statements in 9i	WITHOUT_CLASSIFICATION	0.9999940846950072	WITHOUT_CLASSIFICATION	5.915304992899521E-6	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999822632481181	WITHOUT_CLASSIFICATION	1.7736751881965418E-5	DESIGN
Informix doesn't have a bit type	WITHOUT_CLASSIFICATION	0.9635059388021223	WITHOUT_CLASSIFICATION	0.0364940611978777	DESIGN
or BYTE or TEXT? or MONEY	WITHOUT_CLASSIFICATION	0.9996747140074326	WITHOUT_CLASSIFICATION	3.2528599256751687E-4	DESIGN
strip table-owner because Informix always returns constraint names as "<table-owner>.<constraint-name>"	WITHOUT_CLASSIFICATION	0.9995850019039214	WITHOUT_CLASSIFICATION	4.1499809607862636E-4	DESIGN
build the map of standard ANSI SQL aggregation functions ~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999367864423743	WITHOUT_CLASSIFICATION	6.321355762576274E-5	DESIGN
pre H3.2 behavior: super.getReturnType(ct, m);	WITHOUT_CLASSIFICATION	0.9997399164645538	WITHOUT_CLASSIFICATION	2.600835354462368E-4	DESIGN
finally use the sqltype if == on Hibernate types did not find a match.	WITHOUT_CLASSIFICATION	0.9929066826678733	WITHOUT_CLASSIFICATION	0.007093317332126663	DESIGN
because numeric can be anything	WITHOUT_CLASSIFICATION	0.9999487030233836	WITHOUT_CLASSIFICATION	5.129697661651365E-5	DESIGN
constructors and factory methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9878332069161517	WITHOUT_CLASSIFICATION	0.01216679308384822	DESIGN
standard sql92 functions (can be overridden by subclasses)	WITHOUT_CLASSIFICATION	0.9993503376942849	WITHOUT_CLASSIFICATION	6.496623057150347E-4	DESIGN
map second/minute/hour/day/month/year to ANSI extract(), override on subclasses	WITHOUT_CLASSIFICATION	0.9999261579466264	WITHOUT_CLASSIFICATION	7.384205337349699E-5	DESIGN
register hibernate types for default use in scalar sqlquery type auto detection	WITHOUT_CLASSIFICATION	0.9984363383871131	WITHOUT_CLASSIFICATION	0.0015636616128868312	DESIGN
database type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9954300996304528	WITHOUT_CLASSIFICATION	0.004569900369547221	DESIGN
hibernate type mapping support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9972970630465582	WITHOUT_CLASSIFICATION	0.002702936953441826	DESIGN
keyword support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995947657032807	WITHOUT_CLASSIFICATION	4.0523429671938157E-4	DESIGN
native identifier generatiion ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998258008196026	WITHOUT_CLASSIFICATION	1.7419918039752688E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999179331642056	WITHOUT_CLASSIFICATION	8.206683579440929E-4	DESIGN
GUID support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
limit/offset support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
by default we report no support	WITHOUT_CLASSIFICATION	0.9068296649469106	WITHOUT_CLASSIFICATION	0.09317033505308932	DESIGN
by default we report no support for NOWAIT lock semantics	WITHOUT_CLASSIFICATION	0.5771895277931591	WITHOUT_CLASSIFICATION	0.4228104722068407	DESIGN
table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996999642840694	WITHOUT_CLASSIFICATION	3.0003571593062065E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99667626587324	WITHOUT_CLASSIFICATION	0.003323734126759925	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993413874340626	WITHOUT_CLASSIFICATION	0.006586125659374001	DESIGN
current timestamp support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997746407761372	WITHOUT_CLASSIFICATION	2.2535922386282022E-4	DESIGN
SQLException support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999050183532849	WITHOUT_CLASSIFICATION	9.498164671510482E-4	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
identifier quoting support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999260162131946	WITHOUT_CLASSIFICATION	7.398378680540717E-4	DESIGN
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
grrr... for differentiation of mysql storage engines	WITHOUT_CLASSIFICATION	0.9999000634855209	WITHOUT_CLASSIFICATION	9.993651447910813E-5	DESIGN
Informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999538563414563	WITHOUT_CLASSIFICATION	4.614365854369559E-4	DESIGN
return false here, as most databases do not properly support this construct...	WITHOUT_CLASSIFICATION	0.9978479021034533	WITHOUT_CLASSIFICATION	0.00215209789654666	DESIGN
Mckoi has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9994771179730075	WITHOUT_CLASSIFICATION	5.228820269923887E-4	DESIGN
Oracle8 and previous define only a "DATE" type which is used to represent all aspects of date/time	WITHOUT_CLASSIFICATION	0.9830778430805276	WITHOUT_CLASSIFICATION	0.016922156919472478	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999096114847426	WITHOUT_CLASSIFICATION	9.03885152574117E-4	DESIGN
" cascade";	WITHOUT_CLASSIFICATION	0.9998156114675517	WITHOUT_CLASSIFICATION	1.8438853244830865E-4	DESIGN
trim off the length/precision/scale	WITHOUT_CLASSIFICATION	0.9996912416854139	WITHOUT_CLASSIFICATION	3.087583145861068E-4	DESIGN
public boolean dropTemporaryTableAfterUse() {we have to, because postgres sets current txto rollback only after a failed create tablereturn true;}	WITHOUT_CLASSIFICATION	0.999999745941198	WITHOUT_CLASSIFICATION	2.540588019630601E-7	DESIGN
CHECK VIOLATION	WITHOUT_CLASSIFICATION	0.9995821807911838	WITHOUT_CLASSIFICATION	4.1781920881624174E-4	DESIGN
UNIQUE VIOLATION	WITHOUT_CLASSIFICATION	0.9995633645921593	WITHOUT_CLASSIFICATION	4.36635407840676E-4	DESIGN
FOREIGN KEY VIOLATION	WITHOUT_CLASSIFICATION	0.999251430610699	WITHOUT_CLASSIFICATION	7.485693893009935E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
NOT NULL VIOLATION	WITHOUT_CLASSIFICATION	0.9946165206733442	WITHOUT_CLASSIFICATION	0.005383479326655926	DESIGN
ALL OTHER	WITHOUT_CLASSIFICATION	0.9995092843043906	WITHOUT_CLASSIFICATION	4.907156956094858E-4	DESIGN
Register the type of the out param - PostgreSQL uses Types.OTHER	WITHOUT_CLASSIFICATION	0.9932257692120765	WITHOUT_CLASSIFICATION	0.006774230787923483	DESIGN
seems to not really... public boolean supportsRowValueConstructorSyntax() { return true; }	WITHOUT_CLASSIFICATION	0.998567427850389	WITHOUT_CLASSIFICATION	0.0014325721496110282	DESIGN
seems to have spotty LOB suppport	WITHOUT_CLASSIFICATION	0.9988490881959475	WITHOUT_CLASSIFICATION	0.0011509118040524862	DESIGN
HHH-2300	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
ignore (probably H2 not in the classpath)	WITHOUT_CLASSIFICATION	0.9989569239978793	WITHOUT_CLASSIFICATION	0.0010430760021206903	DESIGN
Numeric Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995217829329456	WITHOUT_CLASSIFICATION	4.7821706705439423E-4	DESIGN
String Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993226718554149	WITHOUT_CLASSIFICATION	6.773281445851023E-4	DESIGN
Time and Date Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996569908940883	WITHOUT_CLASSIFICATION	3.430091059117168E-4	DESIGN
System Functions ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995771733461789	WITHOUT_CLASSIFICATION	4.228266538211243E-4	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.998821449825968	WITHOUT_CLASSIFICATION	0.001178550174032005	DESIGN
23000: Check constraint violation: {0} 23001: Unique index or primary key violation: {0}	WITHOUT_CLASSIFICATION	0.9999876140685858	WITHOUT_CLASSIFICATION	1.2385931414201118E-5	DESIGN
Display the dialect version.	WITHOUT_CLASSIFICATION	0.9994569952209057	WITHOUT_CLASSIFICATION	5.430047790942065E-4	DESIGN
The RDMS concat() function only supports 2 parameters	WITHOUT_CLASSIFICATION	0.999999387421168	WITHOUT_CLASSIFICATION	6.125788319901599E-7	DESIGN
Dialect method overrides ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992634774747607	WITHOUT_CLASSIFICATION	7.365225252391993E-4	DESIGN
Original Dialect.java returns " for update";	WITHOUT_CLASSIFICATION	0.9996216684833477	WITHOUT_CLASSIFICATION	3.783315166524524E-4	DESIGN
Verify the state of this new method in Hibernate 3.0 Dialect.java	WITHOUT_CLASSIFICATION	0.9991353863524517	WITHOUT_CLASSIFICATION	8.64613647548318E-4	DESIGN
Origial Dialect.java returns true;	WITHOUT_CLASSIFICATION	0.9996066253860748	WITHOUT_CLASSIFICATION	3.933746139251248E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9722649275192325	WITHOUT_CLASSIFICATION	0.0277350724807675	DESIGN
Sequence methods - start. The RDMS dialect needs these	WITHOUT_CLASSIFICATION	0.9577801724540025	WITHOUT_CLASSIFICATION	0.04221982754599756	DESIGN
methods to make it possible to use the Native Id generator	WITHOUT_CLASSIFICATION	0.9892148810433044	WITHOUT_CLASSIFICATION	0.010785118956695592	DESIGN
The where clause was added to eliminate this statement from Brute Force Searches.	WITHOUT_CLASSIFICATION	0.9989918167791157	WITHOUT_CLASSIFICATION	0.0010081832208841664	DESIGN
Sequence methods - end	WITHOUT_CLASSIFICATION	0.9933941394720239	WITHOUT_CLASSIFICATION	0.0066058605279760785	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999096114847426	WITHOUT_CLASSIFICATION	9.03885152574117E-4	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9950109319190349	WITHOUT_CLASSIFICATION	0.004989068080965099	DESIGN
Used with DROP TABLE to delete all records in the table.	WITHOUT_CLASSIFICATION	0.9999747493313715	WITHOUT_CLASSIFICATION	2.525066862846832E-5	DESIGN
RDMS supports the UNION ALL clause.	WITHOUT_CLASSIFICATION	0.9995409049988643	WITHOUT_CLASSIFICATION	4.590950011357983E-4	DESIGN
RDMS has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99949002910531	WITHOUT_CLASSIFICATION	5.099708946899215E-4	DESIGN
Multi-param dialect functions...	WITHOUT_CLASSIFICATION	0.998503228933174	WITHOUT_CLASSIFICATION	0.001496771066826015	DESIGN
function templates	WITHOUT_CLASSIFICATION	0.9999379620663865	WITHOUT_CLASSIFICATION	6.203793361350042E-5	DESIGN
not null is implicit	WITHOUT_CLASSIFICATION	0.998821449825968	WITHOUT_CLASSIFICATION	0.001178550174032005	DESIGN
this assumes schema support, which is present in 1.8.0 and later...	WITHOUT_CLASSIFICATION	0.9995582097305958	WITHOUT_CLASSIFICATION	4.4179026940419764E-4	DESIGN
HSQLDB only supports READ_UNCOMMITTED transaction isolation	WITHOUT_CLASSIFICATION	0.9990539596386299	WITHOUT_CLASSIFICATION	9.460403613701609E-4	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9991142572757561	WITHOUT_CLASSIFICATION	8.857427242440301E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993190244058445	WITHOUT_CLASSIFICATION	6.809755941553952E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9990109333656723	WITHOUT_CLASSIFICATION	9.890666343277646E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9994454208924676	WITHOUT_CLASSIFICATION	5.545791075324968E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9887816358697424	WITHOUT_CLASSIFICATION	0.011218364130257605	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9997108186357068	WITHOUT_CLASSIFICATION	2.891813642932305E-4	DESIGN
TimesTen has no BLOB/CLOB support, but these types may be suitable for some applications. The length is limited to 4 million bytes.	WITHOUT_CLASSIFICATION	0.9993615668436239	WITHOUT_CLASSIFICATION	6.384331563760717E-4	DESIGN
new methods in dialect3	WITHOUT_CLASSIFICATION	0.9986462721256939	WITHOUT_CLASSIFICATION	0.0013537278743061018	DESIGN
public boolean supportsForUpdateNowait() {return false;}	WITHOUT_CLASSIFICATION	0.9999153378869394	WITHOUT_CLASSIFICATION	8.466211306063725E-5	DESIGN
TimesTen has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995121901566495	WITHOUT_CLASSIFICATION	4.8780984335040575E-4	DESIGN
iterate entries ordered by capacity to find first fit	WITHOUT_CLASSIFICATION	0.9989825764029779	WITHOUT_CLASSIFICATION	0.0010174235970220502	DESIGN
add new ordered map	WITHOUT_CLASSIFICATION	0.9997122008683945	WITHOUT_CLASSIFICATION	2.87799131605462E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" );	WITHOUT_CLASSIFICATION	0.9996741635332154	WITHOUT_CLASSIFICATION	3.2583646678465284E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998898569795046	WITHOUT_CLASSIFICATION	1.1014302049543713E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997852464055892	WITHOUT_CLASSIFICATION	2.147535944108036E-4	DESIGN
return "select CURRENT_TIMESTAMP from RDB$DATABASE";	WITHOUT_CLASSIFICATION	0.9990721968867322	WITHOUT_CLASSIFICATION	9.278031132677734E-4	DESIGN
registerColumnType data types	WITHOUT_CLASSIFICATION	0.999740161697745	WITHOUT_CLASSIFICATION	2.598383022550368E-4	DESIGN
hibernate seems to ignore this type...	WITHOUT_CLASSIFICATION	0.993715869845225	WITHOUT_CLASSIFICATION	0.006284130154775056	DESIGN
IBID for current_time and current_date	WITHOUT_CLASSIFICATION	0.9993712041883718	WITHOUT_CLASSIFICATION	6.287958116281178E-4	DESIGN
Tell hibernate to use getBytes instead of getBinaryStream	WITHOUT_CLASSIFICATION	0.9958864144822849	WITHOUT_CLASSIFICATION	0.004113585517715115	DESIGN
No batch statements	WITHOUT_CLASSIFICATION	0.9999478228822646	WITHOUT_CLASSIFICATION	5.2177117735463386E-5	DESIGN
We might want a special case for 19,2. This is very common for money types and here it is converted to 18,1	WITHOUT_CLASSIFICATION	0.820739695171532	DESIGN	0.1792603048284681	WITHOUT_CLASSIFICATION
no pointbase BIT	WITHOUT_CLASSIFICATION	0.9997040091287573	WITHOUT_CLASSIFICATION	2.959908712427152E-4	DESIGN
no pointbase TINYINT	WITHOUT_CLASSIFICATION	0.9996864948033838	WITHOUT_CLASSIFICATION	3.1350519661624683E-4	DESIGN
Pointbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.99875079841016	WITHOUT_CLASSIFICATION	0.0012492015898399197	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999096114847426	WITHOUT_CLASSIFICATION	9.03885152574117E-4	DESIGN
The current_timestamp is more accurate, but only known to be supported in SQL Server 7.0 and later (i.e., Sybase not known to support it at all)	WITHOUT_CLASSIFICATION	0.9924786472512633	WITHOUT_CLASSIFICATION	0.007521352748736739	DESIGN
SQL Server (at least up through 2005) does not support defining cascade delete constraints which can circel back to the mutating table	WITHOUT_CLASSIFICATION	0.9999928057439021	WITHOUT_CLASSIFICATION	7.19425609783825E-6	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9798580290418253	WITHOUT_CLASSIFICATION	0.020141970958174733	DESIGN
registerColumnType( Types.BLOB, 16777215, "mediumblob" ); registerColumnType( Types.BLOB, 65535, "blob" );	WITHOUT_CLASSIFICATION	0.9996736783815824	WITHOUT_CLASSIFICATION	3.2632161841767267E-4	DESIGN
registerColumnType( Types.CLOB, 16777215, "mediumtext" ); registerColumnType( Types.CLOB, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9996839398967791	WITHOUT_CLASSIFICATION	3.160601032209693E-4	DESIGN
registerColumnType( Types.VARCHAR, 16777215, "mediumtext" ); registerColumnType( Types.VARCHAR, 65535, "text" );	WITHOUT_CLASSIFICATION	0.9996898415499105	WITHOUT_CLASSIFICATION	3.101584500895206E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999096114847426	WITHOUT_CLASSIFICATION	9.03885152574117E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996804660676586	WITHOUT_CLASSIFICATION	3.1953393234133233E-4	DESIGN
sql server just returns automatically	WITHOUT_CLASSIFICATION	0.9997852464055892	WITHOUT_CLASSIFICATION	2.147535944108036E-4	DESIGN
Sybase BIT type does not support null values	WITHOUT_CLASSIFICATION	0.9979872755802754	WITHOUT_CLASSIFICATION	0.002012724419724481	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998898569795046	WITHOUT_CLASSIFICATION	1.1014302049543713E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999975368727884	WITHOUT_CLASSIFICATION	2.4631272115245958E-6	DESIGN
not null ... (start with 1) is implicit	WITHOUT_CLASSIFICATION	0.9941370880794566	WITHOUT_CLASSIFICATION	0.005862911920543564	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999770640872089	WITHOUT_CLASSIFICATION	2.293591279118914E-5	DESIGN
Multi-param string dialect functions...	WITHOUT_CLASSIFICATION	0.9991142572757561	WITHOUT_CLASSIFICATION	8.857427242440301E-4	DESIGN
Multi-param numeric dialect functions...	WITHOUT_CLASSIFICATION	0.9993190244058445	WITHOUT_CLASSIFICATION	6.809755941553952E-4	DESIGN
Multi-param date dialect functions...	WITHOUT_CLASSIFICATION	0.9990109333656723	WITHOUT_CLASSIFICATION	9.890666343277646E-4	DESIGN
add another (inner) nested select add the main query close off the inner nested select	WITHOUT_CLASSIFICATION	0.9999655214169333	WITHOUT_CLASSIFICATION	3.447858306661691E-5	DESIGN
add the main query	WITHOUT_CLASSIFICATION	0.9998514098376675	WITHOUT_CLASSIFICATION	1.4859016233248758E-4	DESIGN
add the restriction to the outer select	WITHOUT_CLASSIFICATION	0.9999750394299618	WITHOUT_CLASSIFICATION	2.4960570038169054E-5	DESIGN
This assumes you will want to ignore any update counts	WITHOUT_CLASSIFICATION	0.9998898569795046	WITHOUT_CLASSIFICATION	1.1014302049543713E-4	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999975368727884	WITHOUT_CLASSIFICATION	2.4631272115245958E-6	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
starts with 1, implicitly	WITHOUT_CLASSIFICATION	0.999096114847426	WITHOUT_CLASSIFICATION	9.03885152574117E-4	DESIGN
simple nullability constraint	WITHOUT_CLASSIFICATION	0.9994454208924676	WITHOUT_CLASSIFICATION	5.545791075324968E-4	DESIGN
not final-static to avoid possible classcast exceptions if using different oracle drivers.	WITHOUT_CLASSIFICATION	0.9887816358697424	WITHOUT_CLASSIFICATION	0.011218364130257605	DESIGN
register the type of the out param - an Oracle specific type	WITHOUT_CLASSIFICATION	0.9997108186357068	WITHOUT_CLASSIFICATION	2.891813642932305E-4	DESIGN
features which change between 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995762348086525	WITHOUT_CLASSIFICATION	4.237651913474906E-4	DESIGN
features which remain constant across 8i, 9i, and 10g ~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999507825985418	WITHOUT_CLASSIFICATION	4.921740145810833E-5	DESIGN
binary %Stream character %Stream	WITHOUT_CLASSIFICATION	0.9999359448361796	WITHOUT_CLASSIFICATION	6.405516382029458E-5	DESIGN
getDefaultProperties().setProperty(Environment.STATEMENT_BATCH_SIZE, NO_BATCH);	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
hibernate impelemnts cast in Dialect.java	WITHOUT_CLASSIFICATION	0.9983915340133779	WITHOUT_CLASSIFICATION	0.0016084659866220637	DESIGN
aggregate functions shouldn't be registered, right? registerFunction( "list", new StandardSQLFunction("list",Hibernate.STRING) ); stopped on $list	WITHOUT_CLASSIFICATION	0.875331800796093	DESIGN	0.12466819920390705	WITHOUT_CLASSIFICATION
DDL support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
below is for Cache' that don't have str in 2007.1 there is str and we register str directly	WITHOUT_CLASSIFICATION	0.9991925397512454	WITHOUT_CLASSIFICATION	8.074602487546346E-4	DESIGN
note that %string is deprecated	WITHOUT_CLASSIFICATION	0.9913758701772127	WITHOUT_CLASSIFICATION	0.008624129822787374	DESIGN
%upper is deprecated	WITHOUT_CLASSIFICATION	0.9960651436026154	WITHOUT_CLASSIFICATION	0.003934856397384522	DESIGN
The syntax used to add a foreign key constraint to a table.	WITHOUT_CLASSIFICATION	0.9913940663140651	WITHOUT_CLASSIFICATION	0.0086059336859349	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
IDENTITY support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
SEQUENCE support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999179331642056	WITHOUT_CLASSIFICATION	8.206683579440929E-4	DESIGN
temporary table support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.99667626587324	WITHOUT_CLASSIFICATION	0.003323734126759925	DESIGN
identifier-commalist	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
The syntax used to add a column to a table	WITHOUT_CLASSIFICATION	0.9993942583349215	WITHOUT_CLASSIFICATION	6.057416650784487E-4	DESIGN
Completely optional cascading drop clause.	WITHOUT_CLASSIFICATION	0.9978304018939863	WITHOUT_CLASSIFICATION	0.002169598106013611	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999180226630481	WITHOUT_CLASSIFICATION	8.197733695189882E-4	DESIGN
LIMIT support (ala TOP) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
InterSystems Cache' does not current support "SELECT ... FOR UPDATE" syntax... Set your transaction mode to READ_COMMITTED before using	WITHOUT_CLASSIFICATION	0.9952068809616976	WITHOUT_CLASSIFICATION	0.0047931190383024265	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
<String>	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
callable statement support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.993413874340626	WITHOUT_CLASSIFICATION	0.006586125659374001	DESIGN
miscellaneous support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9990125614015274	WITHOUT_CLASSIFICATION	9.874385984726284E-4	DESIGN
The keyword used to specify a nullable column.	WITHOUT_CLASSIFICATION	0.9722649275192325	WITHOUT_CLASSIFICATION	0.0277350724807675	DESIGN
Does the LIMIT clause come at the start of the SELECT statement, rather than at the end?	WITHOUT_CLASSIFICATION	0.9824712936478367	WITHOUT_CLASSIFICATION	0.01752870635216332	DESIGN
Does the LIMIT clause take a "maximum" row number instead of a total number of returned rows?	WITHOUT_CLASSIFICATION	0.9959490084482903	WITHOUT_CLASSIFICATION	0.004050991551709695	DESIGN
The name of the SQL function that transforms a string to lowercase	WITHOUT_CLASSIFICATION	0.9999101594623455	WITHOUT_CLASSIFICATION	8.984053765448697E-5	DESIGN
Create an OuterJoinGenerator for this dialect.	WITHOUT_CLASSIFICATION	0.999147124047411	WITHOUT_CLASSIFICATION	8.528759525890376E-4	DESIGN
The keyword used to insert a row without specifying any column values	WITHOUT_CLASSIFICATION	0.999910967618581	WITHOUT_CLASSIFICATION	8.903238141908414E-5	DESIGN
registerFunction( "trim", new StandardSQLFunction( "trim", Hibernate.STRING ) );	WITHOUT_CLASSIFICATION	0.9997592487159271	WITHOUT_CLASSIFICATION	2.407512840728171E-4	DESIGN
skip the FROM keyword in params	WITHOUT_CLASSIFICATION	0.9998762104562333	WITHOUT_CLASSIFICATION	1.237895437667443E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
potentialTrimCharacterArgIndex = 1 assumes that a trim-specification has been specified. we handle the exception to that explicitly	WITHOUT_CLASSIFICATION	0.9982157829568156	WITHOUT_CLASSIFICATION	0.001784217043184454	DESIGN
SQLFunction implementation	WITHOUT_CLASSIFICATION	0.9994509595232854	WITHOUT_CLASSIFICATION	5.490404767145473E-4	DESIGN
conceivable that the dialect ctor could throw HibernateExceptions, so don't re-wrap	WITHOUT_CLASSIFICATION	0.9685245493142384	WITHOUT_CLASSIFICATION	0.03147545068576164	DESIGN
register the standard dialect resolver	WITHOUT_CLASSIFICATION	0.9998572502545434	WITHOUT_CLASSIFICATION	1.4274974545660377E-4	DESIGN
register resolvers set via Environment property	WITHOUT_CLASSIFICATION	0.9998307956522337	WITHOUT_CLASSIFICATION	1.6920434776644775E-4	DESIGN
kept for backward compatibility until after the 3.1beta5 release of HA	WITHOUT_CLASSIFICATION	0.9998945538619731	WITHOUT_CLASSIFICATION	1.0544613802689687E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9990674104742939	WITHOUT_CLASSIFICATION	9.325895257059689E-4	DESIGN
the CascadingAction contract ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999665492060345	WITHOUT_CLASSIFICATION	3.3450793965493703E-4	DESIGN
the CascadingAction implementations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996577100751544	WITHOUT_CLASSIFICATION	3.4228992484562767E-4	DESIGN
delete does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999724306514458	WITHOUT_CLASSIFICATION	2.756934855423995E-5	DESIGN
orphans should be deleted during delete	WITHOUT_CLASSIFICATION	0.9975990090139396	WITHOUT_CLASSIFICATION	0.0024009909860603046	DESIGN
(LockMode) anything	WITHOUT_CLASSIFICATION	0.9998449556614293	WITHOUT_CLASSIFICATION	1.5504433857078235E-4	DESIGN
lock doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997600527979241	WITHOUT_CLASSIFICATION	2.399472020758685E-4	DESIGN
refresh doesn't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998680912803947	WITHOUT_CLASSIFICATION	1.3190871960524963E-4	DESIGN
evicts don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997796230558392	WITHOUT_CLASSIFICATION	2.2037694416075586E-4	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998888954447733	WITHOUT_CLASSIFICATION	1.1110455522667506E-4	DESIGN
orphans should be deleted during save/update	WITHOUT_CLASSIFICATION	0.9914448447210298	WITHOUT_CLASSIFICATION	0.008555155278970227	DESIGN
for deprecated saveOrUpdateCopy()	WITHOUT_CLASSIFICATION	0.9952725166600589	WITHOUT_CLASSIFICATION	0.004727483339941116	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997796230558392	WITHOUT_CLASSIFICATION	2.2037694416075586E-4	DESIGN
a proxy cannot be transient and it breaks ForeignKeys.isTransient	WITHOUT_CLASSIFICATION	0.9991416121503641	WITHOUT_CLASSIFICATION	8.583878496358823E-4	DESIGN
replicate does cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9999011628149167	WITHOUT_CLASSIFICATION	9.883718508328601E-5	DESIGN
static helper methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9987944423283981	WITHOUT_CLASSIFICATION	0.0012055576716020087	DESIGN
handles arrays and newly instantiated collections	WITHOUT_CLASSIFICATION	0.9994517373193117	WITHOUT_CLASSIFICATION	5.482626806883025E-4	DESIGN
Actually the semantics of the next three are really "Bag" Note that, unlike objects, collection insertions, updates, deletions are not really remembered between flushes. We just re-use the same Lists for convenience.	WITHOUT_CLASSIFICATION	0.9636486253909787	WITHOUT_CLASSIFICATION	0.03635137460902129	DESIGN
Add these directly to the executions queue	WITHOUT_CLASSIFICATION	0.998489361960296	WITHOUT_CLASSIFICATION	0.00151063803970399	DESIGN
continue loop	WITHOUT_CLASSIFICATION	0.9999492489086489	WITHOUT_CLASSIFICATION	5.0751091351147366E-5	DESIGN
sort the updates by fk	WITHOUT_CLASSIFICATION	0.9999121349110254	WITHOUT_CLASSIFICATION	8.786508897461088E-5	DESIGN
sort the updates by pk	WITHOUT_CLASSIFICATION	0.9999121349110254	WITHOUT_CLASSIFICATION	8.786508897461088E-5	DESIGN
the mapping of entity names to their latest batch numbers.	WITHOUT_CLASSIFICATION	0.9999046639907595	WITHOUT_CLASSIFICATION	9.533600924054759E-5	DESIGN
the map of batch numbers to EntityInsertAction lists	WITHOUT_CLASSIFICATION	0.9993756732743487	WITHOUT_CLASSIFICATION	6.243267256512704E-4	DESIGN
optimize the hash size to eliminate a rehash.	WITHOUT_CLASSIFICATION	0.9988476581171162	WITHOUT_CLASSIFICATION	0.001152341882883818	DESIGN
the list of entity names that indicate the batch number	WITHOUT_CLASSIFICATION	0.999960513489133	WITHOUT_CLASSIFICATION	3.948651086701631E-5	DESIGN
remove the current element from insertions. It will be added back later.	WITHOUT_CLASSIFICATION	0.9994222399218301	WITHOUT_CLASSIFICATION	5.777600781699867E-4	DESIGN
the entity associated with the current action.	WITHOUT_CLASSIFICATION	0.9995621181477612	WITHOUT_CLASSIFICATION	4.378818522388338E-4	DESIGN
There is already an existing batch for this type of entity. Check to see if the latest batch is acceptable.	WITHOUT_CLASSIFICATION	0.9989487875102339	WITHOUT_CLASSIFICATION	0.0010512124897662024	DESIGN
now rebuild the insertions list. There is a batch for each entry in the name list.	WITHOUT_CLASSIFICATION	0.9998067530918163	WITHOUT_CLASSIFICATION	1.9324690818376677E-4	DESIGN
the current batch number is the latest batch for this entity type.	WITHOUT_CLASSIFICATION	0.9979705716954228	WITHOUT_CLASSIFICATION	0.002029428304577071	DESIGN
loop through all the associations of the current entity and make sure that they are processed before the current batch number	WITHOUT_CLASSIFICATION	0.9999637719890068	WITHOUT_CLASSIFICATION	3.6228010993274954E-5	DESIGN
find the batch number associated with the current association, if any.	WITHOUT_CLASSIFICATION	0.9999485176224744	WITHOUT_CLASSIFICATION	5.148237752570115E-5	DESIGN
create a new batch for this type. The batch number is the number of current batches.	WITHOUT_CLASSIFICATION	0.9998437622425903	WITHOUT_CLASSIFICATION	1.5623775740970046E-4	DESIGN
loop through all the associated entities and make sure they have been processed before the latest batch associated with this entity type.	WITHOUT_CLASSIFICATION	0.9995989888214627	WITHOUT_CLASSIFICATION	4.0101117853724646E-4	DESIGN
since this entity will now be processed in the latest possible batch, we can be assured that it will come after all other associations, there's not need to continue checking.	WITHOUT_CLASSIFICATION	0.987159111466194	WITHOUT_CLASSIFICATION	0.012840888533806041	DESIGN
cascade to current collection elements	WITHOUT_CLASSIFICATION	0.9999220324005247	WITHOUT_CLASSIFICATION	7.796759947526973E-5	DESIGN
not really necessary, but good for consistency...	WITHOUT_CLASSIFICATION	0.9748915551386271	WITHOUT_CLASSIFICATION	0.025108444861372967	DESIGN
we can't cascade to non-embedded elements	WITHOUT_CLASSIFICATION	0.9996655000530003	WITHOUT_CLASSIFICATION	3.3449994699978706E-4	DESIGN
a newly instantiated collection can't have orphans	WITHOUT_CLASSIFICATION	0.998917295659332	WITHOUT_CLASSIFICATION	0.0010827043406681106	DESIGN
handle orphaned entities!!	WITHOUT_CLASSIFICATION	0.9980790683183474	WITHOUT_CLASSIFICATION	0.001920931681652614	DESIGN
Loaded entity instances, by EntityUniqueKey	WITHOUT_CLASSIFICATION	0.9994714104131844	WITHOUT_CLASSIFICATION	5.285895868155662E-4	DESIGN
Identity map of EntityEntry instances, by the entity instance	WITHOUT_CLASSIFICATION	0.9994127546894364	WITHOUT_CLASSIFICATION	5.872453105636467E-4	DESIGN
Entity proxies, by EntityKey	WITHOUT_CLASSIFICATION	0.9995587260297127	WITHOUT_CLASSIFICATION	4.41273970287353E-4	DESIGN
Snapshots of current database state for entities that have not been loaded	WITHOUT_CLASSIFICATION	0.99975131656229	WITHOUT_CLASSIFICATION	2.486834377100129E-4	DESIGN
Identity map of array holder ArrayHolder instances, by the array instance	WITHOUT_CLASSIFICATION	0.9998878927335239	WITHOUT_CLASSIFICATION	1.1210726647618933E-4	DESIGN
Collection wrappers, by the CollectionKey key=CollectionKey, value=PersistentCollection	WITHOUT_CLASSIFICATION	0.9998371962391185	WITHOUT_CLASSIFICATION	1.6280376088163365E-4	DESIGN
Set of EntityKeys of deleted objects	WITHOUT_CLASSIFICATION	0.9996455164456363	WITHOUT_CLASSIFICATION	3.5448355436369574E-4	DESIGN
properties that we have tried to load, and not found in the database	WITHOUT_CLASSIFICATION	0.9995410017782002	WITHOUT_CLASSIFICATION	4.5899822179986804E-4	DESIGN
A list of collection wrappers that were instantiating during result set processing, that we will need to initialize at the end of the query	WITHOUT_CLASSIFICATION	0.9994989690533356	WITHOUT_CLASSIFICATION	5.010309466643292E-4	DESIGN
A container for collections we load up when the owning entity is not yet loaded ... for now, this is purely transient!	WITHOUT_CLASSIFICATION	0.8923814009684615	WITHOUT_CLASSIFICATION	0.10761859903153843	DESIGN
Downgrade locks	WITHOUT_CLASSIFICATION	0.9995696891538884	WITHOUT_CLASSIFICATION	4.303108461114952E-4	DESIGN
any earlier proxy takes precedence	WITHOUT_CLASSIFICATION	0.999892524868271	WITHOUT_CLASSIFICATION	1.074751317290128E-4	DESIGN
unwrap the object	WITHOUT_CLASSIFICATION	0.9996127805907697	WITHOUT_CLASSIFICATION	3.872194092301634E-4	DESIGN
initialize + unwrap the object	WITHOUT_CLASSIFICATION	0.999889648122674	WITHOUT_CLASSIFICATION	1.1035187732606394E-4	DESIGN
return the proxied object	WITHOUT_CLASSIFICATION	0.9992481281195139	WITHOUT_CLASSIFICATION	7.518718804860566E-4	DESIGN
overwrite old proxy	WITHOUT_CLASSIFICATION	0.9999900544487886	WITHOUT_CLASSIFICATION	9.945551211329756E-6	DESIGN
early exit...	WITHOUT_CLASSIFICATION	0.9997412669088181	WITHOUT_CLASSIFICATION	2.5873309118192505E-4	DESIGN
or should it actually throw an exception?	WITHOUT_CLASSIFICATION	0.9962698666672634	WITHOUT_CLASSIFICATION	0.0037301333327366243	DESIGN
treat it just like a new collection	WITHOUT_CLASSIFICATION	0.9972412091848208	WITHOUT_CLASSIFICATION	0.0027587908151792294	DESIGN
do this work only at the very highest level of the load don't let this method be called recursively	WITHOUT_CLASSIFICATION	0.5162061103602191	DESIGN	0.4837938896397808	WITHOUT_CLASSIFICATION
note that each iteration of the loop may add new elements	WITHOUT_CLASSIFICATION	0.9999895222286962	WITHOUT_CLASSIFICATION	1.0477771303835693E-5	DESIGN
it might be an unwrapped collection reference! try to find a wrapper (slowish)	WITHOUT_CLASSIFICATION	0.9966548672172917	WITHOUT_CLASSIFICATION	0.0033451327827083532	DESIGN
public boolean isNonExistant(EntityKey key) {return nonExistantEntityKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999153378869394	WITHOUT_CLASSIFICATION	8.466211306063725E-5	DESIGN
public boolean isNonExistant(EntityUniqueKey key) {return nonExistentEntityUniqueKeys.contains(key);}	WITHOUT_CLASSIFICATION	0.9999153378869394	WITHOUT_CLASSIFICATION	8.466211306063725E-5	DESIGN
iterate all the entities currently associated with the persistence context.	WITHOUT_CLASSIFICATION	0.9967853828053681	WITHOUT_CLASSIFICATION	0.0032146171946318444	DESIGN
does this entity entry pertain to the entity persister in which we are interested (owner)?	WITHOUT_CLASSIFICATION	0.9950071805912942	WITHOUT_CLASSIFICATION	0.004992819408705701	DESIGN
check if the managed object is the parent	WITHOUT_CLASSIFICATION	0.9986252271809977	WITHOUT_CLASSIFICATION	0.0013747728190023805	DESIGN
otherwise, the proxy was pruned during the serialization process	WITHOUT_CLASSIFICATION	0.9999913455304671	WITHOUT_CLASSIFICATION	8.654469532903474E-6	DESIGN
adds remove as a sort-of alias for delete...	WITHOUT_CLASSIFICATION	0.999858076944219	WITHOUT_CLASSIFICATION	1.419230557809901E-4	DESIGN
bad cast	WITHOUT_CLASSIFICATION	0.9979325291614652	WITHOUT_CLASSIFICATION	0.002067470838534721	DESIGN
return lhsPersister.getSubclassPropertyColumnNames(property);	WITHOUT_CLASSIFICATION	0.999633931274544	WITHOUT_CLASSIFICATION	3.660687254558717E-4	DESIGN
property-refs for associations defined on a component are not supported, so no need to slice	WITHOUT_CLASSIFICATION	0.9990592582640606	WITHOUT_CLASSIFICATION	9.40741735939497E-4	DESIGN
if there is no property-ref, assume the join is to the subclass table (ie. the table of the subclass that the association belongs to)	WITHOUT_CLASSIFICATION	0.9999387322814581	WITHOUT_CLASSIFICATION	6.126771854191926E-5	DESIGN
handle a property-ref	WITHOUT_CLASSIFICATION	0.9960711320964558	WITHOUT_CLASSIFICATION	0.003928867903544229	DESIGN
NativeSQLQueryReturn	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999179303056812	WITHOUT_CLASSIFICATION	8.206969431880485E-5	DESIGN
why is all others non final ?	WITHOUT_CLASSIFICATION	0.9519232227188914	WITHOUT_CLASSIFICATION	0.048076777281108644	DESIGN
this.forceCacheRefresh = forceCacheRefresh;	WITHOUT_CLASSIFICATION	0.9997710261933208	WITHOUT_CLASSIFICATION	2.289738066792782E-4	DESIGN
HELLA IMPORTANT OPTIMIZATION!!!	WITHOUT_CLASSIFICATION	0.9994852410598511	WITHOUT_CLASSIFICATION	5.147589401488588E-4	DESIGN
return that.type.equals(type) && EqualsHelper.equals(that.value, value);	WITHOUT_CLASSIFICATION	0.999505564122129	WITHOUT_CLASSIFICATION	4.944358778711078E-4	DESIGN
Must occur after resolving identifiers!	WITHOUT_CLASSIFICATION	0.9984812075102267	WITHOUT_CLASSIFICATION	0.0015187924897731959	DESIGN
take a snapshot	WITHOUT_CLASSIFICATION	0.9993757788430677	WITHOUT_CLASSIFICATION	6.242211569322944E-4	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995867827265834	WITHOUT_CLASSIFICATION	4.132172734165552E-4	DESIGN
the owning entity may have been deleted and its identifier unset due to identifier-rollback; in which case, try to look up its identifier from the persistence context	WITHOUT_CLASSIFICATION	0.9981327235702977	WITHOUT_CLASSIFICATION	0.001867276429702371	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9993764893007475	WITHOUT_CLASSIFICATION	6.235106992524213E-4	DESIGN
We've been here before	WITHOUT_CLASSIFICATION	0.9899759884174687	WITHOUT_CLASSIFICATION	0.010024011582531286	DESIGN
it is or was referenced _somewhere_	WITHOUT_CLASSIFICATION	0.9999674332330768	WITHOUT_CLASSIFICATION	3.256676692318364E-5	DESIGN
do the work	WITHOUT_CLASSIFICATION	0.9993764893007475	WITHOUT_CLASSIFICATION	6.235106992524213E-4	DESIGN
if either its role changed,	WITHOUT_CLASSIFICATION	0.9999344870551695	WITHOUT_CLASSIFICATION	6.551294483053551E-5	DESIGN
or its key changed	WITHOUT_CLASSIFICATION	0.999992184815343	WITHOUT_CLASSIFICATION	7.81518465693306E-6	DESIGN
we will need to create new entries	WITHOUT_CLASSIFICATION	0.999566000585121	WITHOUT_CLASSIFICATION	4.3399941487891927E-4	DESIGN
we will need to remove ye olde entries	WITHOUT_CLASSIFICATION	0.9970929453055973	WITHOUT_CLASSIFICATION	0.002907054694402703	DESIGN
force initialize!	WITHOUT_CLASSIFICATION	0.9985845259204081	WITHOUT_CLASSIFICATION	0.001415474079591823	DESIGN
else if it's elements changed	WITHOUT_CLASSIFICATION	0.9999940824527823	WITHOUT_CLASSIFICATION	5.917547217682587E-6	DESIGN
ATTRIBUTES MAINTAINED BETWEEN FLUSH CYCLES	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
session-start/post-flush persistent state	WITHOUT_CLASSIFICATION	0.9997496842462631	WITHOUT_CLASSIFICATION	2.503157537369542E-4	DESIGN
allow the CollectionSnapshot to be serialized	WITHOUT_CLASSIFICATION	0.9972172772346798	WITHOUT_CLASSIFICATION	0.00278272276532019	DESIGN
ATTRIBUTES USED ONLY DURING FLUSH CYCLE	WITHOUT_CLASSIFICATION	0.9971957067353557	WITHOUT_CLASSIFICATION	0.0028042932646441757	DESIGN
"current" means the reference that was found during flush()	WITHOUT_CLASSIFICATION	0.9999703152246878	WITHOUT_CLASSIFICATION	2.9684775312099517E-5	DESIGN
"loaded" means the reference that is consistent with the current database state	WITHOUT_CLASSIFICATION	0.9999185554859857	WITHOUT_CLASSIFICATION	8.144451401417186E-5	DESIGN
during flush, we navigate the object graph to collections and decide what to do with them	WITHOUT_CLASSIFICATION	0.9852645431665646	WITHOUT_CLASSIFICATION	0.014735456833435417	DESIGN
if we instantiate a collection during the flush() process, we must ignore it for the rest of the flush()	WITHOUT_CLASSIFICATION	0.9998536103414692	WITHOUT_CLASSIFICATION	1.463896585307351E-4	DESIGN
new collections that get found + wrapped during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9965416196180198	WITHOUT_CLASSIFICATION	0.0034583803819801156	DESIGN
a newly wrapped collection is NOT dirty (or we get unnecessary version updates)	WITHOUT_CLASSIFICATION	0.8577017162002337	WITHOUT_CLASSIFICATION	0.14229828379976633	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
collection.clearDirty()	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
detached collections that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9996642723390028	WITHOUT_CLASSIFICATION	3.357276609971985E-4	DESIGN
optimization	WITHOUT_CLASSIFICATION	0.9998505743193623	WITHOUT_CLASSIFICATION	1.4942568063777781E-4	DESIGN
optimization optimization	WITHOUT_CLASSIFICATION	0.9997259524336374	WITHOUT_CLASSIFICATION	2.7404756636263564E-4	DESIGN
re-snapshot	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
for convenience to save some lookups	WITHOUT_CLASSIFICATION	0.9996062023130082	WITHOUT_CLASSIFICATION	3.93797686991791E-4	DESIGN
NOTE: this is not updated when properties are fetched lazily!	WITHOUT_CLASSIFICATION	0.999521003860656	WITHOUT_CLASSIFICATION	4.7899613934394283E-4	DESIGN
memory optimization	WITHOUT_CLASSIFICATION	0.9999300368501701	WITHOUT_CLASSIFICATION	6.996314982986905E-5	DESIGN
use the id value of a newly instantiated instance as the unsaved-value	WITHOUT_CLASSIFICATION	0.9992841835531743	WITHOUT_CLASSIFICATION	7.158164468258168E-4	DESIGN
copied from Session:	WITHOUT_CLASSIFICATION	0.9985253517459938	WITHOUT_CLASSIFICATION	0.0014746482540062879	DESIGN
this should not happen since the DTD prevents it	WITHOUT_CLASSIFICATION	0.9987114038432358	WITHOUT_CLASSIFICATION	0.0012885961567642484	DESIGN
JoinProcessor needs to know if the where clause fragment came from a dynamic filter or not so it can put the where clause fragment in the right place in the SQL AST. 'hasFilterCondition' keeps track of that fact.	WITHOUT_CLASSIFICATION	0.9998950027280094	WITHOUT_CLASSIFICATION	1.0499727199065512E-4	DESIGN
the current join represents the join between a many-to-many association table and its "target" table. Here we need to apply any additional filters defined specifically on the many-to-many	WITHOUT_CLASSIFICATION	0.9999976145262489	WITHOUT_CLASSIFICATION	2.3854737510491415E-6	DESIGN
check basic level one nullablilty	WITHOUT_CLASSIFICATION	0.9998600288458518	WITHOUT_CLASSIFICATION	1.3997115414822055E-4	DESIGN
values is not null and is checkable, we'll look deeper	WITHOUT_CLASSIFICATION	0.9960019854454977	WITHOUT_CLASSIFICATION	0.0039980145545024	DESIGN
for non null args, check for components and elements containing components	WITHOUT_CLASSIFICATION	0.9998892564086822	WITHOUT_CLASSIFICATION	1.1074359131773172E-4	DESIGN
cache the hashcode	WITHOUT_CLASSIFICATION	0.9990674104742939	WITHOUT_CLASSIFICATION	9.325895257059689E-4	DESIGN
persistent collections may have components	WITHOUT_CLASSIFICATION	0.9997212865183657	WITHOUT_CLASSIFICATION	2.787134816343232E-4	DESIGN
check for all components values in the collection	WITHOUT_CLASSIFICATION	0.9999349322571716	WITHOUT_CLASSIFICATION	6.506774282841421E-5	DESIGN
will check current level if some of them are not null or sublevels if they exist	WITHOUT_CLASSIFICATION	0.9999115682207806	WITHOUT_CLASSIFICATION	8.843177921932552E-5	DESIGN
do the test	WITHOUT_CLASSIFICATION	0.9999748600220681	WITHOUT_CLASSIFICATION	2.5139977931812187E-5	DESIGN
if its an uninitialized proxy it can't be transient	WITHOUT_CLASSIFICATION	0.9999374518923432	WITHOUT_CLASSIFICATION	6.254810765680702E-5	DESIGN
unwrap it	WITHOUT_CLASSIFICATION	0.9997802957089964	WITHOUT_CLASSIFICATION	2.1970429100355262E-4	DESIGN
See if the entity is already bound to this session, if not look at the entity identifier and assume that the entity is persistent if the id is not "unsaved" (that is, we rely on foreign keys to keep database integrity)	WITHOUT_CLASSIFICATION	0.9138913818248892	WITHOUT_CLASSIFICATION	0.08610861817511083	DESIGN
an unfetched association can only point to an entity that already exists in the db	WITHOUT_CLASSIFICATION	0.999955920467895	WITHOUT_CLASSIFICATION	4.407953210489677E-5	DESIGN
let the interceptor inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9941735960143799	WITHOUT_CLASSIFICATION	0.0058264039856201644	DESIGN
let the persister inspect the instance to decide	WITHOUT_CLASSIFICATION	0.9819996706254513	WITHOUT_CLASSIFICATION	0.01800032937454867	DESIGN
we use the assumed value, if there is one, to avoid hitting the database	WITHOUT_CLASSIFICATION	0.9997008856654007	WITHOUT_CLASSIFICATION	2.99114334599332E-4	DESIGN
hit the database, after checking the session cache for a snapshot	WITHOUT_CLASSIFICATION	0.5299748358005608	WITHOUT_CLASSIFICATION	0.4700251641994391	DESIGN
context-entity-identifier returns null explicitly if the entity is not associated with the persistence context; so make some deeper checks...	WITHOUT_CLASSIFICATION	0.9995805132297628	WITHOUT_CLASSIFICATION	4.1948677023718865E-4	DESIGN
int count = 0;	WITHOUT_CLASSIFICATION	0.9999749542723894	WITHOUT_CLASSIFICATION	2.5045727610706998E-5	DESIGN
the first key found after the given key	WITHOUT_CLASSIFICATION	0.9999665199238427	WITHOUT_CLASSIFICATION	3.348007615734269E-5	DESIGN
checkForEnd = false;	WITHOUT_CLASSIFICATION	0.999707157544782	WITHOUT_CLASSIFICATION	2.928424552180777E-4	DESIGN
count++;	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999946685339999	WITHOUT_CLASSIFICATION	5.3314660000934254E-5	DESIGN
we ran out of keys to try	WITHOUT_CLASSIFICATION	0.9972699926884779	WITHOUT_CLASSIFICATION	0.0027300073115221497	DESIGN
first element of array is reserved for the actual instance we are loading!	WITHOUT_CLASSIFICATION	0.9967934890030493	WITHOUT_CLASSIFICATION	0.003206510996950601	DESIGN
the first id found after the given id	WITHOUT_CLASSIFICATION	0.9999627517400785	WITHOUT_CLASSIFICATION	3.7248259921376116E-5	DESIGN
we ran out of ids to try	WITHOUT_CLASSIFICATION	0.9989467159918954	WITHOUT_CLASSIFICATION	0.0010532840081045331	DESIGN
look for existing collection as part of the persistence context	WITHOUT_CLASSIFICATION	0.9981425456308605	WITHOUT_CLASSIFICATION	0.0018574543691394392	DESIGN
ignore this row of results! Note the early exit	WITHOUT_CLASSIFICATION	0.9999832592878064	WITHOUT_CLASSIFICATION	1.674071219369463E-5	DESIGN
initialize this collection	WITHOUT_CLASSIFICATION	0.9921653938822049	WITHOUT_CLASSIFICATION	0.007834606117795096	DESIGN
create one	WITHOUT_CLASSIFICATION	0.999596403266601	WITHOUT_CLASSIFICATION	4.035967333989736E-4	DESIGN
warning: can cause a recursive calls! (proxy initialization)	WITHOUT_CLASSIFICATION	0.99641105714563	WITHOUT_CLASSIFICATION	0.0035889428543698265	DESIGN
there were no queued additions and the role has a cache	WITHOUT_CLASSIFICATION	0.9997772343622289	WITHOUT_CLASSIFICATION	2.2276563777113241E-4	DESIGN
and this is not a forced initialization during flush	WITHOUT_CLASSIFICATION	0.9751796988718766	WITHOUT_CLASSIFICATION	0.02482030112812336	DESIGN
some filters affecting the collection are enabled on the session, so do not do the put into the cache.	WITHOUT_CLASSIFICATION	0.9989539402088511	WITHOUT_CLASSIFICATION	0.0010460597911488886	DESIGN
cleanup code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996711700045388	WITHOUT_CLASSIFICATION	3.288299954611855E-4	DESIGN
loading collection xrefs ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997964795293879	WITHOUT_CLASSIFICATION	2.0352047061213634E-4	DESIGN
Collection load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995581348253457	WITHOUT_CLASSIFICATION	4.4186517465429667E-4	DESIGN
simple cache of param metadata based on query string. Ideally, the original "user-supplied query" string should be used to retreive this metadata (i.e., not the para-list-expanded query string) to avoid unnecessary cache entries. Used solely for caching param metadata for native-sql queries, see getSQLParameterMetadata() for a discussion as to why...	WITHOUT_CLASSIFICATION	0.9582884565574145	WITHOUT_CLASSIFICATION	0.04171154344258563	DESIGN
the cache of the actual plans...	WITHOUT_CLASSIFICATION	0.9994772214996335	WITHOUT_CLASSIFICATION	5.227785003665143E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999810759265809	WITHOUT_CLASSIFICATION	1.8924073419153827E-5	DESIGN
for native-sql queries, the param metadata is determined outside any relation to a query plan, because query plan creation and/or retreival for a native-sql query depends on all of the return types having been set, which might not be the case up-front when param metadata would be most useful	WITHOUT_CLASSIFICATION	0.9995972336491774	WITHOUT_CLASSIFICATION	4.0276635082252434E-4	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9992103485241494	WITHOUT_CLASSIFICATION	7.896514758506882E-4	DESIGN
Recognition code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9982682364797107	WITHOUT_CLASSIFICATION	0.0017317635202892848	DESIGN
don't care...	WITHOUT_CLASSIFICATION	0.9992103485241494	WITHOUT_CLASSIFICATION	7.896514758506882E-4	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990890799008233	WITHOUT_CLASSIFICATION	9.109200991768074E-4	DESIGN
break the outer loop !!!	WITHOUT_CLASSIFICATION	0.9985779270298697	WITHOUT_CLASSIFICATION	0.0014220729701303542	DESIGN
named parameter	WITHOUT_CLASSIFICATION	0.9987504840950268	WITHOUT_CLASSIFICATION	0.0012495159049732564	DESIGN
could be either an ordinal or JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9852562283037299	WITHOUT_CLASSIFICATION	0.014743771696269944	DESIGN
a peek ahead showed this as an JPA-positional parameter	WITHOUT_CLASSIFICATION	0.9892920819701218	WITHOUT_CLASSIFICATION	0.01070791802987819	DESIGN
make sure this "name" is an integral	WITHOUT_CLASSIFICATION	0.9991699811154254	WITHOUT_CLASSIFICATION	8.300188845745247E-4	DESIGN
pre-determine and cache the hashcode	WITHOUT_CLASSIFICATION	0.9987212540918443	WITHOUT_CLASSIFICATION	0.0012787459081557788	DESIGN
perform the actual work	WITHOUT_CLASSIFICATION	0.998851426349851	WITHOUT_CLASSIFICATION	0.0011485736501489002	DESIGN
if everything went ok, commit the transaction and close the obtained connection handle...	WITHOUT_CLASSIFICATION	0.9999437935104084	WITHOUT_CLASSIFICATION	5.620648959156742E-5	DESIGN
at some point the processing went bad, so we need to: 1) make sure the connection handle gets released 2) try to cleanup the JTA context as much as possible	WITHOUT_CLASSIFICATION	0.9972236028347715	WITHOUT_CLASSIFICATION	0.0027763971652285074	DESIGN
finally handle the exception	WITHOUT_CLASSIFICATION	0.9972076614317346	WITHOUT_CLASSIFICATION	0.002792338568265414	DESIGN
a "detached" collection that belonged to a different entity	WITHOUT_CLASSIFICATION	0.9874289615215504	WITHOUT_CLASSIFICATION	0.012571038478449544	DESIGN
saveOrUpdateCopy() is deprecated!	WITHOUT_CLASSIFICATION	0.9997192135693034	WITHOUT_CLASSIFICATION	2.807864306966952E-4	DESIGN
collectionPersister should not be null, but we don't want to throw an exception if it is null	WITHOUT_CLASSIFICATION	0.9101724902068999	WITHOUT_CLASSIFICATION	0.08982750979310006	DESIGN
otherwise a null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better processArrayOrNewCollection(collection, type);	WITHOUT_CLASSIFICATION	0.9948000724706949	WITHOUT_CLASSIFICATION	0.005199927529305087	DESIGN
a "detached" collection that originally belonged to the same entity	WITHOUT_CLASSIFICATION	0.9950136881829649	WITHOUT_CLASSIFICATION	0.004986311817035025	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997695754039121	WITHOUT_CLASSIFICATION	2.3042459608788442E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997695754039121	WITHOUT_CLASSIFICATION	2.3042459608788442E-4	DESIGN
Force a substitution!	WITHOUT_CLASSIFICATION	0.9990009428131795	WITHOUT_CLASSIFICATION	9.99057186820496E-4	DESIGN
The user requested a "greater" (i.e. more restrictive) form of pessimistic lock	WITHOUT_CLASSIFICATION	0.9992928646239239	WITHOUT_CLASSIFICATION	7.071353760761801E-4	DESIGN
the database now holds a lock + the object is flushed from the cache, so release the soft lock	WITHOUT_CLASSIFICATION	0.9994423337034383	WITHOUT_CLASSIFICATION	5.576662965616813E-4	DESIGN
now update the object .. has to be outside the main if block above (because of collections)	WITHOUT_CLASSIFICATION	0.9999010443083033	WITHOUT_CLASSIFICATION	9.895569169668856E-5	DESIGN
Search for collections by reachability, updating their role. We don't want to touch collections reachable from a deleted object	WITHOUT_CLASSIFICATION	0.9993269562846571	WITHOUT_CLASSIFICATION	6.730437153430078E-4	DESIGN
this is a situation where the entity id is assigned by a post-insert generator and was saved outside the transaction forcing it to be delayed	WITHOUT_CLASSIFICATION	0.9757547759210611	WITHOUT_CLASSIFICATION	0.02424522407893894	DESIGN
NOTE: we need to do the wrap here even if its not "dirty", because collections need wrapping but changes to _them_ don't dirty the container. Also, for versioned data, we need to wrap before calling searchForDirtyCollections	WITHOUT_CLASSIFICATION	0.9680676127968441	WITHOUT_CLASSIFICATION	0.03193238720315584	DESIGN
grab its state saved at deletion	WITHOUT_CLASSIFICATION	0.9991976894071778	WITHOUT_CLASSIFICATION	8.023105928223321E-4	DESIGN
grab its current state	WITHOUT_CLASSIFICATION	0.9999376749834494	WITHOUT_CLASSIFICATION	6.232501655058543E-5	DESIGN
schedule the update note that we intentionally do _not_ pass in currentPersistentState!	WITHOUT_CLASSIFICATION	0.9997543269601202	WITHOUT_CLASSIFICATION	2.4567303987983063E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997780121523023	WITHOUT_CLASSIFICATION	2.219878476976939E-4	DESIGN
give the Interceptor a chance to process property values, if the properties were modified by the Interceptor, we need to set them back to the object	WITHOUT_CLASSIFICATION	0.9999294811811938	WITHOUT_CLASSIFICATION	7.051881880610783E-5	DESIGN
compare to cached state (ignoring collections unless versioned)	WITHOUT_CLASSIFICATION	0.9999199012969152	WITHOUT_CLASSIFICATION	8.009870308479529E-5	DESIGN
if it was dirtied by a collection only	WITHOUT_CLASSIFICATION	0.9998905313933995	WITHOUT_CLASSIFICATION	1.0946860660055702E-4	DESIGN
increment the version number (if necessary)	WITHOUT_CLASSIFICATION	0.9999414862057159	WITHOUT_CLASSIFICATION	5.8513794284076716E-5	DESIGN
check nullability but do not perform command execute we'll use scheduled updates for that.	WITHOUT_CLASSIFICATION	0.994003868029525	WITHOUT_CLASSIFICATION	0.005996131970474934	DESIGN
give the Interceptor a chance to modify property values	WITHOUT_CLASSIFICATION	0.999142294533231	WITHOUT_CLASSIFICATION	8.577054667689589E-4	DESIGN
now we might need to recalculate the dirtyProperties array	WITHOUT_CLASSIFICATION	0.9901489110167514	WITHOUT_CLASSIFICATION	0.009851088983248631	DESIGN
use the current version	WITHOUT_CLASSIFICATION	0.9998408095775071	WITHOUT_CLASSIFICATION	1.5919042249290448E-4	DESIGN
Interceptor returned null, so do the dirtycheck ourself, if possible	WITHOUT_CLASSIFICATION	0.9999687621305628	WITHOUT_CLASSIFICATION	3.1237869437174314E-5	DESIGN
object loaded by update()	WITHOUT_CLASSIFICATION	0.9995785682391651	WITHOUT_CLASSIFICATION	4.214317608349154E-4	DESIGN
dirty check against the usual snapshot of the entity	WITHOUT_CLASSIFICATION	0.9999890141321066	WITHOUT_CLASSIFICATION	1.0985867893385528E-5	DESIGN
dirty check against the database snapshot, if possible/necessary	WITHOUT_CLASSIFICATION	0.9999921949086613	WITHOUT_CLASSIFICATION	7.805091338711492E-6	DESIGN
the Interceptor handled the dirty checking	WITHOUT_CLASSIFICATION	0.9354418430401196	WITHOUT_CLASSIFICATION	0.0645581569598803	DESIGN
even process null collections	WITHOUT_CLASSIFICATION	0.9998274940288414	WITHOUT_CLASSIFICATION	1.7250597115863137E-4	DESIGN
get the id from the object	WITHOUT_CLASSIFICATION	0.9992794342676085	WITHOUT_CLASSIFICATION	7.205657323916147E-4	DESIGN
always do an INSERT, and let it fail by constraint violation	WITHOUT_CLASSIFICATION	0.9991761660320163	WITHOUT_CLASSIFICATION	8.238339679836684E-4	DESIGN
what is the version on the database?	WITHOUT_CLASSIFICATION	0.9992683371978481	WITHOUT_CLASSIFICATION	7.316628021517825E-4	DESIGN
/ HHH-2378	WITHOUT_CLASSIFICATION	0.999789068234426	WITHOUT_CLASSIFICATION	2.1093176557391267E-4	DESIGN
will result in a SQL UPDATE:	WITHOUT_CLASSIFICATION	0.9998050481810367	WITHOUT_CLASSIFICATION	1.9495181896324096E-4	DESIGN
else do nothing (don't even reassociate object!)	WITHOUT_CLASSIFICATION	0.9999176480481949	WITHOUT_CLASSIFICATION	8.235195180513018E-5	DESIGN
no existing row - do an insert	WITHOUT_CLASSIFICATION	0.9996607404655119	WITHOUT_CLASSIFICATION	3.3925953448819346E-4	DESIGN
refresh() does not pass an entityName	WITHOUT_CLASSIFICATION	0.9998668394717288	WITHOUT_CLASSIFICATION	1.3316052827114642E-4	DESIGN
do not return a proxy! (this option indicates we are initializing a proxy)	WITHOUT_CLASSIFICATION	0.9976890772011563	WITHOUT_CLASSIFICATION	0.0023109227988436587	DESIGN
return a proxy if appropriate	WITHOUT_CLASSIFICATION	0.9994826021404372	WITHOUT_CLASSIFICATION	5.173978595628351E-4	DESIGN
return existing object or initialized proxy (unless deleted)	WITHOUT_CLASSIFICATION	0.9992730287560667	WITHOUT_CLASSIFICATION	7.269712439332188E-4	DESIGN
return new uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999505696121356	WITHOUT_CLASSIFICATION	4.943038786440155E-5	DESIGN
this object was already loaded	WITHOUT_CLASSIFICATION	0.9928685089941748	WITHOUT_CLASSIFICATION	0.007131491005825226	DESIGN
Entity was found in second-level cache...	WITHOUT_CLASSIFICATION	0.9997776162466508	WITHOUT_CLASSIFICATION	2.223837533490829E-4	DESIGN
make it circular-reference safe	WITHOUT_CLASSIFICATION	0.9998910684641782	WITHOUT_CLASSIFICATION	1.0893153582180056E-4	DESIGN
intializes result by side-effect	WITHOUT_CLASSIFICATION	0.9999434324488022	WITHOUT_CLASSIFICATION	5.6567551197728366E-5	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Pre-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994754514663374	WITHOUT_CLASSIFICATION	5.245485336625351E-4	DESIGN
some statistics	WITHOUT_CLASSIFICATION	0.9993787948347512	WITHOUT_CLASSIFICATION	6.212051652487635E-4	DESIGN
safe from concurrent modification because of how entryList() is implemented on IdentityMap	WITHOUT_CLASSIFICATION	0.9998529207836937	WITHOUT_CLASSIFICATION	1.4707921630635387E-4	DESIGN
Initialize dirty flags for arrays + collections with composite elements and reset reached, doupdate, etc.	WITHOUT_CLASSIFICATION	0.9999838787051953	WITHOUT_CLASSIFICATION	1.6121294804638096E-5	DESIGN
Among other things, updateReachables() will recursively load all collections that are moving roles. This might cause entities to be loaded.	WITHOUT_CLASSIFICATION	0.9855969271172592	WITHOUT_CLASSIFICATION	0.014403072882740798	DESIGN
So this needs to be safe from concurrent modification problems. It is safe because of how IdentityMap implements entrySet()	WITHOUT_CLASSIFICATION	0.9707118223757326	WITHOUT_CLASSIFICATION	0.029288177624267348	DESIGN
Update the status of the object and if necessary, schedule an update	WITHOUT_CLASSIFICATION	0.9999842597007386	WITHOUT_CLASSIFICATION	1.5740299261396563E-5	DESIGN
Schedule updates to collections:	WITHOUT_CLASSIFICATION	0.9996501582153244	WITHOUT_CLASSIFICATION	3.4984178467546766E-4	DESIGN
we need to lock the collection caches before executing entity inserts/updates in order to account for bidi associations	WITHOUT_CLASSIFICATION	0.9836344736862819	WITHOUT_CLASSIFICATION	0.016365526313718126	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Post-flushing section ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994754514663374	WITHOUT_CLASSIFICATION	5.245485336625351E-4	DESIGN
the database has changed now, so the subselect results need to be invalidated	WITHOUT_CLASSIFICATION	0.9995179498077976	WITHOUT_CLASSIFICATION	4.8205019220236875E-4	DESIGN
if the collection is dereferenced, remove from the session cache iter.remove(); does not work, since the entrySet is not backed by the set	WITHOUT_CLASSIFICATION	0.9881446296431696	WITHOUT_CLASSIFICATION	0.011855370356830326	DESIGN
otherwise recreate the mapping between the collection and its key	WITHOUT_CLASSIFICATION	0.9995270457691078	WITHOUT_CLASSIFICATION	4.729542308922435E-4	DESIGN
get a snapshot	WITHOUT_CLASSIFICATION	0.999426964878837	WITHOUT_CLASSIFICATION	5.73035121162992E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996804660676586	WITHOUT_CLASSIFICATION	3.1953393234133233E-4	DESIGN
package-private	WITHOUT_CLASSIFICATION	0.9996804660676586	WITHOUT_CLASSIFICATION	3.1953393234133233E-4	DESIGN
key is an entity involved with the operation performed by the listener; value is a flag indicating if the listener explicitly operates on the entity	WITHOUT_CLASSIFICATION	0.9999963948721277	WITHOUT_CLASSIFICATION	3.6051278724154077E-6	DESIGN
EARLY EXIT!!!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
ie. the entity came in from update()	WITHOUT_CLASSIFICATION	0.9995521075177988	WITHOUT_CLASSIFICATION	4.47892482201209E-4	DESIGN
before any callbacks, etc, so subdeletions see that this deletion happened first	WITHOUT_CLASSIFICATION	0.9998381631729817	WITHOUT_CLASSIFICATION	1.6183682701832622E-4	DESIGN
Ensures that containing deletions happen before sub-deletions	WITHOUT_CLASSIFICATION	0.9999098268565443	WITHOUT_CLASSIFICATION	9.017314345562065E-5	DESIGN
TypeFactory.deepCopy( currentState, propTypes, persister.getPropertyUpdateability(), deletedState, session );	WITHOUT_CLASSIFICATION	0.9994157070150947	WITHOUT_CLASSIFICATION	5.842929849052793E-4	DESIGN
cascade-delete to collections BEFORE the collection owner is deleted	WITHOUT_CLASSIFICATION	0.9996731349177995	WITHOUT_CLASSIFICATION	3.2686508220048754E-4	DESIGN
cascade-delete to many-to-one AFTER the parent was deleted	WITHOUT_CLASSIFICATION	0.9982707836021038	WITHOUT_CLASSIFICATION	0.0017292163978962292	DESIGN
if it is an initialized proxy, let cascade handle it later on	WITHOUT_CLASSIFICATION	0.9914061940685679	WITHOUT_CLASSIFICATION	0.008593805931432196	DESIGN
assign the requested id to the proxy, before reassociating the proxy	WITHOUT_CLASSIFICATION	0.9999775378448749	WITHOUT_CLASSIFICATION	2.2462155125175447E-5	DESIGN
an uninitialized proxy, noop, don't even need to return an id, since it is never a save()	WITHOUT_CLASSIFICATION	0.9999315947745371	WITHOUT_CLASSIFICATION	6.840522546283169E-5	DESIGN
initialize properties of the event:	WITHOUT_CLASSIFICATION	0.9999609007487925	WITHOUT_CLASSIFICATION	3.9099251207437555E-5	DESIGN
return the id in the event object	WITHOUT_CLASSIFICATION	0.9995557634888217	WITHOUT_CLASSIFICATION	4.442365111782783E-4	DESIGN
TRANSIENT or DELETED	WITHOUT_CLASSIFICATION	0.9998226322008019	WITHOUT_CLASSIFICATION	1.7736779919811619E-4	DESIGN
use the id assigned to the instance	WITHOUT_CLASSIFICATION	0.9955851050828751	WITHOUT_CLASSIFICATION	0.004414894917124867	DESIGN
assume this is a newly instantiated transient object which should be saved rather than updated	WITHOUT_CLASSIFICATION	0.6887873378156933	DESIGN	0.3112126621843067	WITHOUT_CLASSIFICATION
this is a transient object with existing persistent state not loaded by the session	WITHOUT_CLASSIFICATION	0.940765501487074	WITHOUT_CLASSIFICATION	0.05923449851292586	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9976246831928048	WITHOUT_CLASSIFICATION	0.0023753168071952	DESIGN
cachedState,	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
assume true, since we don't really know, and it doesn't matter	WITHOUT_CLASSIFICATION	0.9989722265205654	WITHOUT_CLASSIFICATION	0.0010277734794346361	DESIGN
a "detached" collection!	WITHOUT_CLASSIFICATION	0.998310130338967	WITHOUT_CLASSIFICATION	0.0016898696610329667	DESIGN
if the collection belonged to a different entity, clean up the existing state of the collection	WITHOUT_CLASSIFICATION	0.9794318249547771	WITHOUT_CLASSIFICATION	0.02056817504522298	DESIGN
log.debug( "calling onLoad()" );	WITHOUT_CLASSIFICATION	0.9996679636599816	WITHOUT_CLASSIFICATION	3.320363400184368E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
note: performExecutions() clears all collectionXxxxtion collections (the collection actions) in the session	WITHOUT_CLASSIFICATION	0.9993388420124188	WITHOUT_CLASSIFICATION	6.611579875811923E-4	DESIGN
if no array holder we found an unwrappered array (this can't occur, because we now always call wrap() before getting to here) return (ah==null) ? true : searchForDirtyCollections(ah, type);	WITHOUT_CLASSIFICATION	0.999991573252354	WITHOUT_CLASSIFICATION	8.426747645956355E-6	DESIGN
if not wrappered yet, its dirty (this can't occur, because we now always call wrap() before getting to here) return ( ! (obj instanceof PersistentCollection) ) ? true : searchForDirtyCollections( (PersistentCollection) obj, type );	WITHOUT_CLASSIFICATION	0.9990910283079153	WITHOUT_CLASSIFICATION	9.0897169208484E-4	DESIGN
we need to check even if it was not initialized, because of delayed adds!	WITHOUT_CLASSIFICATION	0.999800340346093	WITHOUT_CLASSIFICATION	1.9965965390700047E-4	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997904867599114	WITHOUT_CLASSIFICATION	2.0951324008847334E-4	DESIGN
find any entities that are still transient after retry	WITHOUT_CLASSIFICATION	0.9976154741754195	WITHOUT_CLASSIFICATION	0.0023845258245805503	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
Check the persistence context for an entry relating to this entity to be merged...	WITHOUT_CLASSIFICATION	0.9761465175269034	WITHOUT_CLASSIFICATION	0.023853482473096627	DESIGN
we have specialized case of a detached entity from the perspective of the merge operation. Specifically, we have an incoming entity instance which has a corresponding entry in the current persistence context, but registered under a different entity instance	WITHOUT_CLASSIFICATION	0.9999937896431051	WITHOUT_CLASSIFICATION	6.210356894940935E-6	DESIGN
DELETED	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9996061989754228	WITHOUT_CLASSIFICATION	3.938010245771452E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy cascadeOnMerge(event, persister, entity, copyCache, Cascades.CASCADE_BEFORE_MERGE);	WITHOUT_CLASSIFICATION	0.9998614597222389	WITHOUT_CLASSIFICATION	1.3854027776109555E-4	DESIGN
this bit is only really absolutely necessary for handling requestedId, but is also good if we merge multiple object graphs, since it helps ensure uniqueness	WITHOUT_CLASSIFICATION	0.5574867065201343	WITHOUT_CLASSIFICATION	0.4425132934798658	DESIGN
continue...; we'll find out if it ends up not getting saved later	WITHOUT_CLASSIFICATION	0.8769657358387937	WITHOUT_CLASSIFICATION	0.12303426416120627	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999858975922324	WITHOUT_CLASSIFICATION	1.410240776759676E-4	DESIGN
check that entity id = requestedId	WITHOUT_CLASSIFICATION	0.9999014930283312	WITHOUT_CLASSIFICATION	9.850697166874393E-5	DESIGN
before cascade!	WITHOUT_CLASSIFICATION	0.9996061989754228	WITHOUT_CLASSIFICATION	3.938010245771452E-4	DESIGN
we got here because we assumed that an instance with an assigned id was detached, when it was really persistent	WITHOUT_CLASSIFICATION	0.9994197199537868	WITHOUT_CLASSIFICATION	5.802800462131887E-4	DESIGN
cascade first, so that all unsaved objects get their copy created before we actually copy	WITHOUT_CLASSIFICATION	0.999858975922324	WITHOUT_CLASSIFICATION	1.410240776759676E-4	DESIGN
copyValues works by reflection, so explicitly mark the entity instance dirty	WITHOUT_CLASSIFICATION	0.9973514463907633	WITHOUT_CLASSIFICATION	0.0026485536092366365	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
source.getBatcher().executeBatch(); found another way to ensure that all batched joined inserts have been executed	WITHOUT_CLASSIFICATION	0.9994892411168828	WITHOUT_CLASSIFICATION	5.107588831172865E-4	DESIGN
substitutes into values by side-effect	WITHOUT_CLASSIFICATION	0.9997780121523023	WITHOUT_CLASSIFICATION	2.219878476976939E-4	DESIGN
now done in EntityIdentityInsertAction persister.setIdentifier( entity, id, source.getEntityMode() );	WITHOUT_CLASSIFICATION	0.9995377939461536	WITHOUT_CLASSIFICATION	4.62206053846452E-4	DESIGN
source.getPersistenceContext().removeNonExist( new EntityKey( id, persister, source.getEntityMode() ) );	WITHOUT_CLASSIFICATION	0.9997592487159271	WITHOUT_CLASSIFICATION	2.407512840728171E-4	DESIGN
keep the existing version number in the case of replicate!	WITHOUT_CLASSIFICATION	0.9999439800855051	WITHOUT_CLASSIFICATION	5.6019914494791044E-5	DESIGN
cascade-save to many-to-one BEFORE the parent is saved	WITHOUT_CLASSIFICATION	0.9921445805413363	WITHOUT_CLASSIFICATION	0.007855419458663804	DESIGN
pass this as an argument only to avoid double looking	WITHOUT_CLASSIFICATION	0.999996578664975	WITHOUT_CLASSIFICATION	3.421335024898069E-6	DESIGN
the object is persistent	WITHOUT_CLASSIFICATION	0.9992817031878088	WITHOUT_CLASSIFICATION	7.182968121911074E-4	DESIGN
the entity is associated with the session, so check its status	WITHOUT_CLASSIFICATION	0.9999531459758888	WITHOUT_CLASSIFICATION	4.6854024111141566E-5	DESIGN
do nothing for persistent instances	WITHOUT_CLASSIFICATION	0.9998771566060134	WITHOUT_CLASSIFICATION	1.2284339398658682E-4	DESIGN
ie. e.status==DELETED	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
the object is transient or detached	WITHOUT_CLASSIFICATION	0.9993906644017301	WITHOUT_CLASSIFICATION	6.093355982698596E-4	DESIGN
NOTE EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9996071770313483	WITHOUT_CLASSIFICATION	3.928229686516897E-4	DESIGN
Private constructor - stops checkstyle from complaining.	WITHOUT_CLASSIFICATION	0.9982690043131941	WITHOUT_CLASSIFICATION	0.0017309956868058732	DESIGN
First, try to find a matching constructor accepting a ViolatedConstraintNameExtracter param...	WITHOUT_CLASSIFICATION	0.9971792632764964	WITHOUT_CLASSIFICATION	0.0028207367235035773	DESIGN
eat it and try next	WITHOUT_CLASSIFICATION	0.9951962941104069	WITHOUT_CLASSIFICATION	0.004803705889593079	DESIGN
Otherwise, try to use the no-arg constructor	WITHOUT_CLASSIFICATION	0.9991162592295317	WITHOUT_CLASSIFICATION	8.837407704682041E-4	DESIGN
oracle sql-state code for deadlock	WITHOUT_CLASSIFICATION	0.9987921145348803	WITHOUT_CLASSIFICATION	0.0012078854651197159	DESIGN
CollectionPropertyMapping processes everything except 'index'.	WITHOUT_CLASSIFICATION	0.9962966121908128	WITHOUT_CLASSIFICATION	0.003703387809187204	DESIGN
remove initial ", "	WITHOUT_CLASSIFICATION	0.9997911280690083	WITHOUT_CLASSIFICATION	2.0887193099170207E-4	DESIGN
remove initial " and "	WITHOUT_CLASSIFICATION	0.9994984628730971	WITHOUT_CLASSIFICATION	5.015371269028583E-4	DESIGN
beforeClassTokens.add("new"); DEFINITELY DON'T HAVE THIS!!	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
notAfterClassTokens.add(",");	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
just especially for the trivial collection filter	WITHOUT_CLASSIFICATION	0.9995964153667427	WITHOUT_CLASSIFICATION	4.035846332573325E-4	DESIGN
update last non-whitespace token, if necessary	WITHOUT_CLASSIFICATION	0.9994627744298437	WITHOUT_CLASSIFICATION	5.372255701563249E-4	DESIGN
select-range is terminated by declaration of "from"	WITHOUT_CLASSIFICATION	0.9993701973580672	WITHOUT_CLASSIFICATION	6.298026419328222E-4	DESIGN
scan for next non-whitespace token	WITHOUT_CLASSIFICATION	0.9994494173371329	WITHOUT_CLASSIFICATION	5.505826628670934E-4	DESIGN
Note this!!	WITHOUT_CLASSIFICATION	0.9998785320667073	WITHOUT_CLASSIFICATION	1.2146793329271615E-4	DESIGN
Error message constants.	WITHOUT_CLASSIFICATION	0.9994921010014187	WITHOUT_CLASSIFICATION	5.078989985812021E-4	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977930487134141	WITHOUT_CLASSIFICATION	0.0022069512865858874	DESIGN
semantic action handling ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9983912683493746	WITHOUT_CLASSIFICATION	0.0016087316506253942	DESIGN
Handle collection-fiter compilation. IMPORTANT NOTE: This is modifying the INPUT (HQL) tree, not the output tree!	WITHOUT_CLASSIFICATION	0.9938182570186612	WITHOUT_CLASSIFICATION	0.0061817429813387816	DESIGN
Show the modified AST.	WITHOUT_CLASSIFICATION	0.9999326035759529	WITHOUT_CLASSIFICATION	6.739642404711103E-5	DESIGN
Create a parameter specification for the collection filter...	WITHOUT_CLASSIFICATION	0.9980737996030653	WITHOUT_CLASSIFICATION	0.0019262003969346495	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996144284072058	WITHOUT_CLASSIFICATION	3.855715927941085E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996144284072058	WITHOUT_CLASSIFICATION	3.855715927941085E-4	DESIGN
Get the names of the columns used to link between the collection owner and the collection elements.	WITHOUT_CLASSIFICATION	0.9947738951065003	WITHOUT_CLASSIFICATION	0.005226104893499818	DESIGN
The path AST should be a DotNode, and it should have been evaluated already.	WITHOUT_CLASSIFICATION	0.9992839097875786	WITHOUT_CLASSIFICATION	7.160902124214128E-4	DESIGN
Tell the dot node about the join type.	WITHOUT_CLASSIFICATION	0.999967931567113	WITHOUT_CLASSIFICATION	3.206843288696402E-5	DESIGN
Re-arrange the tree so that the collection function is the root and the lhs is the path.	WITHOUT_CLASSIFICATION	0.9999368231437666	WITHOUT_CLASSIFICATION	6.317685623330834E-5	DESIGN
Don't forget to resolve the argument! Resolve the collection function now.	WITHOUT_CLASSIFICATION	0.9979412358037417	WITHOUT_CLASSIFICATION	0.002058764196258377	DESIGN
Resolve everything up to this dot, but don't resolve the placeholders yet.	WITHOUT_CLASSIFICATION	0.9398560668677394	WITHOUT_CLASSIFICATION	0.06014393313226075	DESIGN
Should mean that no such property was found	WITHOUT_CLASSIFICATION	0.9973863366003425	WITHOUT_CLASSIFICATION	0.0026136633996574035	DESIGN
Was there an explicit select expression?	WITHOUT_CLASSIFICATION	0.9999724016355761	WITHOUT_CLASSIFICATION	2.7598364423877582E-5	DESIGN
Attach any mapping-defined "ORDER BY" fragments	WITHOUT_CLASSIFICATION	0.9996256362758216	WITHOUT_CLASSIFICATION	3.7436372417832853E-4	DESIGN
Use the explicitly declared select expression; determine the return types indicated by each select token	WITHOUT_CLASSIFICATION	0.9998959738834603	WITHOUT_CLASSIFICATION	1.0402611653976426E-4	DESIGN
After that, process the JOINs. Invoke a delegate to do the work, as this is farily complex.	WITHOUT_CLASSIFICATION	0.9995994518995935	WITHOUT_CLASSIFICATION	4.0054810040646014E-4	DESIGN
Make #@%$^#^&# sure no alias is applied to the table name	WITHOUT_CLASSIFICATION	0.9999822132434395	WITHOUT_CLASSIFICATION	1.7786756560561285E-5	DESIGN
We need to generate ids as part of this bulk insert. Note that this is only supported for sequence-style generators and post-insert-style generators; basically, only in-db generators	WITHOUT_CLASSIFICATION	0.9996793859787658	WITHOUT_CLASSIFICATION	3.2061402123417267E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996144284072058	WITHOUT_CLASSIFICATION	3.855715927941085E-4	DESIGN
We need to seed the version value as part of this bulk insert	WITHOUT_CLASSIFICATION	0.9997917745575282	WITHOUT_CLASSIFICATION	2.082254424717569E-4	DESIGN
we need to wrtap the param in a cast()	WITHOUT_CLASSIFICATION	0.9958622536696927	WITHOUT_CLASSIFICATION	0.004137746330307287	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.8695436361088805	WITHOUT_CLASSIFICATION	0.1304563638911195	DESIGN
Generate implicit joins, only if necessary.	WITHOUT_CLASSIFICATION	0.9978610142542427	WITHOUT_CLASSIFICATION	0.002138985745757348	DESIGN
Notify the FROM element that it is being referenced by the select.	WITHOUT_CLASSIFICATION	0.9998933772277654	WITHOUT_CLASSIFICATION	1.0662277223458902E-4	DESIGN
Turn off includeSubclasses on all FromElements.	WITHOUT_CLASSIFICATION	0.9994968243425675	WITHOUT_CLASSIFICATION	5.031756574324475E-4	DESIGN
create the node initially with the param name so that it shows appropriately in the "original text" attribute	WITHOUT_CLASSIFICATION	0.9999409319420346	WITHOUT_CLASSIFICATION	5.9068057965384314E-5	DESIGN
Use the delegate, resolve identifiers as FROM element aliases.	WITHOUT_CLASSIFICATION	0.9984951568265639	WITHOUT_CLASSIFICATION	0.0015048431734361763	DESIGN
select clauses for insert statements should alwasy be treated as shallow	WITHOUT_CLASSIFICATION	0.9996479043476089	WITHOUT_CLASSIFICATION	3.520956523911599E-4	DESIGN
no need to even collect this information if the persister is considered multi-table	WITHOUT_CLASSIFICATION	0.9950445840249615	WITHOUT_CLASSIFICATION	0.004955415975038473	DESIGN
Make sure that the persister is versioned	WITHOUT_CLASSIFICATION	0.9988152091360377	WITHOUT_CLASSIFICATION	0.0011847908639622813	DESIGN
handle trace logging ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9977930487134141	WITHOUT_CLASSIFICATION	0.0022069512865858874	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996144284072058	WITHOUT_CLASSIFICATION	3.855715927941085E-4	DESIGN
--Commented out by Inspection (12/11/04 10:56 AM): int getWarningCount();	WITHOUT_CLASSIFICATION	0.9997974812107008	WITHOUT_CLASSIFICATION	2.0251878929926297E-4	DESIGN
Alias references and identifiers use the same node class.	WITHOUT_CLASSIFICATION	0.9957606680345006	WITHOUT_CLASSIFICATION	0.004239331965499499	DESIGN
switch	WITHOUT_CLASSIFICATION	0.9997482796416395	WITHOUT_CLASSIFICATION	2.517203583604874E-4	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9987986493950118	WITHOUT_CLASSIFICATION	0.0012013506049881595	DESIGN
just do the regular thing if you can't find the ctor Your AST must have default ctor to use this.	WITHOUT_CLASSIFICATION	0.9966160626107269	WITHOUT_CLASSIFICATION	0.0033839373892730245	DESIGN
Initialize SQL nodes here.	WITHOUT_CLASSIFICATION	0.9989984549882927	WITHOUT_CLASSIFICATION	0.0010015450117072968	DESIGN
semantic action processing ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9986381853095286	WITHOUT_CLASSIFICATION	0.0013618146904713906	DESIGN
if template is null we just write the function out as it appears in the hql statement	WITHOUT_CLASSIFICATION	0.9999718209754964	WITHOUT_CLASSIFICATION	2.817902450366166E-5	DESIGN
this function has a template -> redirect output and catch the arguments	WITHOUT_CLASSIFICATION	0.9999652529856671	WITHOUT_CLASSIFICATION	3.474701433296864E-5	DESIGN
--- Inner classes (moved here from sql-gen.g) ---	WITHOUT_CLASSIFICATION	0.9993367069380061	WITHOUT_CLASSIFICATION	6.632930619937645E-4	DESIGN
check two "adjecent" nodes at the top of the from-clause tree	WITHOUT_CLASSIFICATION	0.9997407709157373	WITHOUT_CLASSIFICATION	2.592290842626514E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.999789068234426	WITHOUT_CLASSIFICATION	2.1093176557391267E-4	DESIGN
these are just two unrelated table references	WITHOUT_CLASSIFICATION	0.9988102696981772	WITHOUT_CLASSIFICATION	0.0011897303018227902	DESIGN
again, both should be FromElements	WITHOUT_CLASSIFICATION	0.9862589494769415	WITHOUT_CLASSIFICATION	0.01374105052305859	DESIGN
NOTE : firstRow is zero-based	WITHOUT_CLASSIFICATION	0.9990890799008233	WITHOUT_CLASSIFICATION	9.109200991768074E-4	DESIGN
right represents a joins originating from left; or both right and left reprersent joins originating from the same FromElement	WITHOUT_CLASSIFICATION	0.9997900026645126	WITHOUT_CLASSIFICATION	2.099973354873418E-4	DESIGN
check a set of parent/child nodes in the from-clause tree to determine if a comma is required between them	WITHOUT_CLASSIFICATION	0.9996602364252226	WITHOUT_CLASSIFICATION	3.397635747773477E-4	DESIGN
right represents a joins originating from left...	WITHOUT_CLASSIFICATION	0.9993420391168826	WITHOUT_CLASSIFICATION	6.579608831173441E-4	DESIGN
all clear	WITHOUT_CLASSIFICATION	0.9998664844426645	WITHOUT_CLASSIFICATION	1.335155573355881E-4	DESIGN
Ignore the token class name parameter, and use a specific token class.	WITHOUT_CLASSIFICATION	0.9994870129769665	WITHOUT_CLASSIFICATION	5.129870230335528E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9990100559250032	WITHOUT_CLASSIFICATION	9.899440749966905E-4	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9990100559250032	WITHOUT_CLASSIFICATION	9.899440749966905E-4	DESIGN
remember that ordinal parameters numbers are 1-based!!!	WITHOUT_CLASSIFICATION	0.9999430758504466	WITHOUT_CLASSIFICATION	5.692414955340577E-5	DESIGN
don't care about other param types here, just those explicitly user-defined...	WITHOUT_CLASSIFICATION	0.9989319943618901	WITHOUT_CLASSIFICATION	0.0010680056381099717	DESIGN
If the query is already compiled, skip the compilation.	WITHOUT_CLASSIFICATION	0.9999503414018789	WITHOUT_CLASSIFICATION	4.965859812117871E-5	DESIGN
Remember the parameters for the compilation.	WITHOUT_CLASSIFICATION	0.9949402924634602	WITHOUT_CLASSIFICATION	0.005059707536539799	DESIGN
PHASE 1 : Parse the HQL into an AST.	WITHOUT_CLASSIFICATION	0.9997944451931973	WITHOUT_CLASSIFICATION	2.0555480680263936E-4	DESIGN
PHASE 2 : Analyze the HQL AST, and produce an SQL AST.	WITHOUT_CLASSIFICATION	0.9999916698843685	WITHOUT_CLASSIFICATION	8.330115631426495E-6	DESIGN
PHASE 3 : Generate the SQL.	WITHOUT_CLASSIFICATION	0.9988024957828128	WITHOUT_CLASSIFICATION	0.0011975042171872335	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995233320054607	WITHOUT_CLASSIFICATION	4.766679945393074E-4	DESIGN
we do not actually propogate ANTLRExceptions as a cause, so log it here for diagnostic purposes	WITHOUT_CLASSIFICATION	0.9995233320054607	WITHOUT_CLASSIFICATION	4.766679945393074E-4	DESIGN
only needed during compilation phase...	WITHOUT_CLASSIFICATION	0.9998675790424945	WITHOUT_CLASSIFICATION	1.3242095750553418E-4	DESIGN
Transform the tree.	WITHOUT_CLASSIFICATION	0.9997229454969706	WITHOUT_CLASSIFICATION	2.7705450302935574E-4	DESIGN
Parse the query string into an HQL AST.	WITHOUT_CLASSIFICATION	0.9999018589369048	WITHOUT_CLASSIFICATION	9.814106309524506E-5	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999435583984553	WITHOUT_CLASSIFICATION	5.644160154469969E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999435583984553	WITHOUT_CLASSIFICATION	5.644160154469969E-4	DESIGN
Delegate to the QueryLoader...	WITHOUT_CLASSIFICATION	0.999435583984553	WITHOUT_CLASSIFICATION	5.644160154469969E-4	DESIGN
NOTE : ( max - 1 ) because first is zero-based while max is not...	WITHOUT_CLASSIFICATION	0.9999765464417627	WITHOUT_CLASSIFICATION	2.3453558237338256E-5	DESIGN
-- Package local methods for the QueryLoader delegate --	WITHOUT_CLASSIFICATION	0.9997292509351533	WITHOUT_CLASSIFICATION	2.7074906484668513E-4	DESIGN
If there are no collection fetches, then no further checks are needed	WITHOUT_CLASSIFICATION	0.9999618666021864	WITHOUT_CLASSIFICATION	3.8133397813600416E-5	DESIGN
A shallow query is ok (although technically there should be no fetching here...)	WITHOUT_CLASSIFICATION	0.9996908534117823	WITHOUT_CLASSIFICATION	3.091465882177203E-4	DESIGN
should be the first, but just to be safe...	WITHOUT_CLASSIFICATION	0.9990206235101409	WITHOUT_CLASSIFICATION	9.79376489859172E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996144284072058	WITHOUT_CLASSIFICATION	3.855715927941085E-4	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996144284072058	WITHOUT_CLASSIFICATION	3.855715927941085E-4	DESIGN
Impl Note: allows multiple collection fetches as long as the entire fecthed graph still "points back" to a single root entity for return	WITHOUT_CLASSIFICATION	0.9774880588052199	WITHOUT_CLASSIFICATION	0.022511941194780057	DESIGN
Otherwise, we have a non-scalar select with defined collection fetch(es). Make sure that there is only a single root entity in the return (no tuples)	WITHOUT_CLASSIFICATION	0.9999658708500359	WITHOUT_CLASSIFICATION	3.412914996421272E-5	DESIGN
This is not strictly true. We actually just need to make sure that it is ordered by root-entity PK and that that order-by comes before any non-root-entity ordering...	WITHOUT_CLASSIFICATION	0.9592809511273434	WITHOUT_CLASSIFICATION	0.040719048872656545	DESIGN
paramTranslations = new ParameterTranslationsImpl( collectedParameterSpecifications );	WITHOUT_CLASSIFICATION	0.9998819646522482	WITHOUT_CLASSIFICATION	1.1803534775173377E-4	DESIGN
we are already processing a dot-structure	WITHOUT_CLASSIFICATION	0.9921495951830396	WITHOUT_CLASSIFICATION	0.007850404816960452	DESIGN
igndore it...	WITHOUT_CLASSIFICATION	0.9961274165672609	WITHOUT_CLASSIFICATION	0.003872583432738985	DESIGN
we are now at a new tree level	WITHOUT_CLASSIFICATION	0.9840457687574028	WITHOUT_CLASSIFICATION	0.01595423124259719	DESIGN
[jsd] The fix for HHH-558...	WITHOUT_CLASSIFICATION	0.9938202493037126	WITHOUT_CLASSIFICATION	0.00617975069628733	DESIGN
If the token can tell us if it could be an identifier...	WITHOUT_CLASSIFICATION	0.9980394062203229	WITHOUT_CLASSIFICATION	0.001960593779677016	DESIGN
... and the expected token type was an identifier, then:	WITHOUT_CLASSIFICATION	0.9998322322070807	WITHOUT_CLASSIFICATION	1.6776779291932333E-4	DESIGN
Use the token as an identifier.	WITHOUT_CLASSIFICATION	0.99997734514393	WITHOUT_CLASSIFICATION	2.265485606998777E-5	DESIGN
Add the token to the AST.	WITHOUT_CLASSIFICATION	0.99983975186107	WITHOUT_CLASSIFICATION	1.602481389300739E-4	DESIGN
(NOT (EQ a b) ) => (NE a b)	WITHOUT_CLASSIFICATION	0.9997138614228555	WITHOUT_CLASSIFICATION	2.8613857714456913E-4	DESIGN
(NOT (NE a b) ) => (EQ a b)	WITHOUT_CLASSIFICATION	0.9997138614228555	WITHOUT_CLASSIFICATION	2.8613857714456913E-4	DESIGN
(NOT (LT a b) ) => (GE a b)	WITHOUT_CLASSIFICATION	0.9997138614228555	WITHOUT_CLASSIFICATION	2.8613857714456913E-4	DESIGN
(NOT (GE a b) ) => (LT a b)	WITHOUT_CLASSIFICATION	0.9997138614228555	WITHOUT_CLASSIFICATION	2.8613857714456913E-4	DESIGN
(NOT (LE a b) ) => (GT a b)	WITHOUT_CLASSIFICATION	0.9997138614228555	WITHOUT_CLASSIFICATION	2.8613857714456913E-4	DESIGN
(NOT (LIKE a b) ) => (NOT_LIKE a b)	WITHOUT_CLASSIFICATION	0.9998210565658173	WITHOUT_CLASSIFICATION	1.7894343418261815E-4	DESIGN
(NOT (NOT_LIKE a b) ) => (LIKE a b)	WITHOUT_CLASSIFICATION	0.9998210565658173	WITHOUT_CLASSIFICATION	1.7894343418261815E-4	DESIGN
(NOT (IS_NOT_NULL a b) ) => (IS_NULL a b)	WITHOUT_CLASSIFICATION	0.9998210565658173	WITHOUT_CLASSIFICATION	1.7894343418261815E-4	DESIGN
(NOT (BETWEEN a b) ) => (NOT_BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998210565658173	WITHOUT_CLASSIFICATION	1.7894343418261815E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9975071777543333	WITHOUT_CLASSIFICATION	0.002492822245666658	DESIGN
overriden to avoid System.exit	WITHOUT_CLASSIFICATION	0.9990100559250032	WITHOUT_CLASSIFICATION	9.899440749966905E-4	DESIGN
if if Otherwise, handle the error normally.	WITHOUT_CLASSIFICATION	0.9993818963924909	WITHOUT_CLASSIFICATION	6.181036075091257E-4	DESIGN
(NOT (NOT_BETWEEN a b) ) => (BETWEEN a b)	WITHOUT_CLASSIFICATION	0.9998210565658173	WITHOUT_CLASSIFICATION	1.7894343418261815E-4	DESIGN
This can never happen because this rule will always eliminate the child NOT.case NOT:return x.getFirstChild(); (NOT (NOT x) ) => (x)	WITHOUT_CLASSIFICATION	0.9999779756704973	WITHOUT_CLASSIFICATION	2.2024329502720784E-5	DESIGN
Just add a 'not' parent.	WITHOUT_CLASSIFICATION	0.9990231164706236	WITHOUT_CLASSIFICATION	9.76883529376383E-4	DESIGN
(EQ NULL b) => (IS_NULL b)	WITHOUT_CLASSIFICATION	0.999890833448666	WITHOUT_CLASSIFICATION	1.091665513339743E-4	DESIGN
(EQ a NULL) => (IS_NULL a)	WITHOUT_CLASSIFICATION	0.9996505910598603	WITHOUT_CLASSIFICATION	3.4940894013970545E-4	DESIGN
NOTE: Because we're using ASTUtil.createParent(), the tree must be created from the bottom up. IS EMPTY x => (EXISTS (QUERY (SELECT_FROM (FROM x) ) ) )	WITHOUT_CLASSIFICATION	0.999754844610396	WITHOUT_CLASSIFICATION	2.451553896040066E-4	DESIGN
Add NOT if it's negated.	WITHOUT_CLASSIFICATION	0.9932458449521299	WITHOUT_CLASSIFICATION	0.0067541550478700954	DESIGN
Create nodes that track line and column number.	WITHOUT_CLASSIFICATION	0.9999984399991756	WITHOUT_CLASSIFICATION	1.5600008243881098E-6	DESIGN
Case 1: Multi token keywords GROUP BY and ORDER BY The next token ( LT(2) ) should be 'by'... otherwise, this is just an ident.	WITHOUT_CLASSIFICATION	0.999250280220409	WITHOUT_CLASSIFICATION	7.497197795911617E-4	DESIGN
Case 2: The current token is after FROM and before '.'.	WITHOUT_CLASSIFICATION	0.999993607139005	WITHOUT_CLASSIFICATION	6.392860995029237E-6	DESIGN
This handles HHH-354, where there is a strange property name in a where clause. If the lookahead contains a DOT then something that isn't an IDENT...	WITHOUT_CLASSIFICATION	0.9997641750030046	WITHOUT_CLASSIFICATION	2.3582499699533038E-4	DESIGN
See if the second lookahed token can be an identifier.	WITHOUT_CLASSIFICATION	0.9999228898388549	WITHOUT_CLASSIFICATION	7.711016114498918E-5	DESIGN
Set it!	WITHOUT_CLASSIFICATION	0.9999027643789851	WITHOUT_CLASSIFICATION	9.723562101498566E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998598839793477	WITHOUT_CLASSIFICATION	1.4011602065243603E-4	DESIGN
strip the " where "	WITHOUT_CLASSIFICATION	0.9999109074191872	WITHOUT_CLASSIFICATION	8.909258081274212E-5	DESIGN
Don't really know all the codes required to adequately decipher returned jdbc exceptions here. simply allow the failure to be eaten and the subsequent insert-selects/deletes should fail	WITHOUT_CLASSIFICATION	0.7860421153044136	WITHOUT_CLASSIFICATION	0.21395788469558644	DESIGN
at the very least cleanup the data :)	WITHOUT_CLASSIFICATION	0.9977410359150254	WITHOUT_CLASSIFICATION	0.002258964084974662	DESIGN
First, save off the pertinent ids, as the return value	WITHOUT_CLASSIFICATION	0.999971932697424	WITHOUT_CLASSIFICATION	2.8067302576041263E-5	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9993584229773039	WITHOUT_CLASSIFICATION	6.415770226959964E-4	DESIGN
jdbc params are 1-based	WITHOUT_CLASSIFICATION	0.9993584229773039	WITHOUT_CLASSIFICATION	6.415770226959964E-4	DESIGN
Start performing the updates	WITHOUT_CLASSIFICATION	0.9997412064314034	WITHOUT_CLASSIFICATION	2.5879356859661093E-4	DESIGN
First, save off the pertinent ids, saving the number of pertinent ids for return	WITHOUT_CLASSIFICATION	0.9996968252743802	WITHOUT_CLASSIFICATION	3.031747256198186E-4	DESIGN
Start performing the deletes	WITHOUT_CLASSIFICATION	0.9995799443675197	WITHOUT_CLASSIFICATION	4.200556324802298E-4	DESIGN
otherwise, everything ok.	WITHOUT_CLASSIFICATION	0.9989741090459519	WITHOUT_CLASSIFICATION	0.0010258909540481565	DESIGN
visit width-first, then depth	WITHOUT_CLASSIFICATION	0.9990593442922165	WITHOUT_CLASSIFICATION	9.406557077835866E-4	DESIGN
if the types report logical equivalence, return true...	WITHOUT_CLASSIFICATION	0.9606224180207426	WITHOUT_CLASSIFICATION	0.03937758197925735	DESIGN
otherwise, perform a "deep equivalence" check...	WITHOUT_CLASSIFICATION	0.9977269890711409	WITHOUT_CLASSIFICATION	0.002273010928859183	DESIGN
If there is no WHERE node, make one.	WITHOUT_CLASSIFICATION	0.9999826265423765	WITHOUT_CLASSIFICATION	1.7373457623523614E-5	DESIGN
inject the WHERE after the parent	WITHOUT_CLASSIFICATION	0.9996091565367525	WITHOUT_CLASSIFICATION	3.9084346324748967E-4	DESIGN
Never include subclasses for implied from elements.	WITHOUT_CLASSIFICATION	0.9999178645144646	WITHOUT_CLASSIFICATION	8.213548553533205E-5	DESIGN
Moved here from SelectClause [jsd]	WITHOUT_CLASSIFICATION	0.9973982621945423	WITHOUT_CLASSIFICATION	0.0026017378054577138	DESIGN
/	WITHOUT_CLASSIFICATION	0.999789068234426	WITHOUT_CLASSIFICATION	2.1093176557391267E-4	DESIGN
Use the table fromElement and the property name to get the array of column names.	WITHOUT_CLASSIFICATION	0.999878860808418	WITHOUT_CLASSIFICATION	1.2113919158205342E-4	DESIGN
Set the attributes of the property reference expression.	WITHOUT_CLASSIFICATION	0.999783847231962	WITHOUT_CLASSIFICATION	2.1615276803792083E-4	DESIGN
If the uresolved property path isn't set yet, just use the property name.	WITHOUT_CLASSIFICATION	0.9995517930040887	WITHOUT_CLASSIFICATION	4.4820699591130117E-4	DESIGN
The 'from element' that the property is in.	WITHOUT_CLASSIFICATION	0.9999537387177592	WITHOUT_CLASSIFICATION	4.626128224076705E-5	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987556540063	WITHOUT_CLASSIFICATION	1.2443459937541812E-6	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987556540063	WITHOUT_CLASSIFICATION	1.2443459937541812E-6	DESIGN
If this dot has already been resolved, stop now.	WITHOUT_CLASSIFICATION	0.999732922361302	WITHOUT_CLASSIFICATION	2.670776386980113E-4	DESIGN
If there is no data type for this node, and we're at the end of the path (top most dot node), then this might be a Java constant.	WITHOUT_CLASSIFICATION	0.9762922259273218	WITHOUT_CLASSIFICATION	0.023707774072678135	DESIGN
The property is a collection...	WITHOUT_CLASSIFICATION	0.9998148442109707	WITHOUT_CLASSIFICATION	1.8515578902931747E-4	DESIGN
The property is a component...	WITHOUT_CLASSIFICATION	0.999610669357427	WITHOUT_CLASSIFICATION	3.89330642573002E-4	DESIGN
The property is another class..	WITHOUT_CLASSIFICATION	0.99963115982732	WITHOUT_CLASSIFICATION	3.688401726799921E-4	DESIGN
Otherwise, this is a primitive type.	WITHOUT_CLASSIFICATION	0.9965617305373397	WITHOUT_CLASSIFICATION	0.003438269462660456	DESIGN
foo.bars.size (also handles deprecated stuff like foo.bars.maxelement for backwardness)	WITHOUT_CLASSIFICATION	0.9979220623649503	WITHOUT_CLASSIFICATION	0.0020779376350497257	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9992203480344473	WITHOUT_CLASSIFICATION	7.796519655526571E-4	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998985413736582	WITHOUT_CLASSIFICATION	1.0145862634169974E-4	DESIGN
in non-select queries, the only time we should need to join is if we are in a subquery from clause	WITHOUT_CLASSIFICATION	0.9987275528641998	WITHOUT_CLASSIFICATION	0.0012724471358002392	DESIGN
this is the regression style determination which matches the logic of the classic translator	WITHOUT_CLASSIFICATION	0.9999645368806009	WITHOUT_CLASSIFICATION	3.546311939899814E-5	DESIGN
This 'dot' expression now refers to the resulting from element.	WITHOUT_CLASSIFICATION	0.9992203480344473	WITHOUT_CLASSIFICATION	7.796519655526571E-4	DESIGN
even though we might find a pre-existing element by join path, we may not be able to reuse it...	WITHOUT_CLASSIFICATION	0.6831475326825063	WITHOUT_CLASSIFICATION	0.31685246731749384	DESIGN
NOTE : addDuplicateAlias() already performs nullness checks on the alias.	WITHOUT_CLASSIFICATION	0.9983033380067841	WITHOUT_CLASSIFICATION	0.0016966619932159389	DESIGN
if the from-clauses are the same, we can be a little more aggressive in terms of what we reuse	WITHOUT_CLASSIFICATION	0.9678361813376756	WITHOUT_CLASSIFICATION	0.03216381866232441	DESIGN
again, null != null here	WITHOUT_CLASSIFICATION	0.9994193071324259	WITHOUT_CLASSIFICATION	5.806928675741553E-4	DESIGN
If this is an implied join in a from element, then use the impled join type which is part of the tree parser's state (set by the gramamar actions).	WITHOUT_CLASSIFICATION	0.9936606302140786	WITHOUT_CLASSIFICATION	0.0063393697859214625	DESIGN
otherwise (subquery case) dont reuse the fromElement if we are processing the from-clause of the subquery	WITHOUT_CLASSIFICATION	0.9969601674735453	WITHOUT_CLASSIFICATION	0.003039832526454748	DESIGN
we know only the lhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9991052803773806	WITHOUT_CLASSIFICATION	8.94719622619399E-4	DESIGN
the referenced node text is the special 'id'	WITHOUT_CLASSIFICATION	0.9999893316183095	WITHOUT_CLASSIFICATION	1.0668381690450453E-5	DESIGN
only the identifier property field name can be a reference to the associated entity's PK...	WITHOUT_CLASSIFICATION	0.9991162359670669	WITHOUT_CLASSIFICATION	8.837640329332064E-4	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996351825938679	WITHOUT_CLASSIFICATION	3.6481740613210736E-4	DESIGN
Append the new property name onto the unresolved path.	WITHOUT_CLASSIFICATION	0.9996543902355279	WITHOUT_CLASSIFICATION	3.4560976447212854E-4	DESIGN
If the lhs is a collection, use CollectionPropertyMapping	WITHOUT_CLASSIFICATION	0.9996245173970959	WITHOUT_CLASSIFICATION	3.75482602904138E-4	DESIGN
Tell the destination fromElement to 'includeSubclasses'.	WITHOUT_CLASSIFICATION	0.9998653552939152	WITHOUT_CLASSIFICATION	1.3464470608488504E-4	DESIGN
Use theta style (for regression) Move the node up, after the origin node.	WITHOUT_CLASSIFICATION	0.9974505984965143	WITHOUT_CLASSIFICATION	0.00254940150348572	DESIGN
Don't resolve the node again.	WITHOUT_CLASSIFICATION	0.9986936920150886	WITHOUT_CLASSIFICATION	0.0013063079849113882	DESIGN
for expected parameter type injection, we expect that the lhs represents some form of property ref and that the children of the in-list represent one-or-more params.	WITHOUT_CLASSIFICATION	0.9955132008586356	WITHOUT_CLASSIFICATION	0.0044867991413644085	DESIGN
we need to strip off the embedded parens so that sql-gen does not double these up	WITHOUT_CLASSIFICATION	0.9953380037114787	WITHOUT_CLASSIFICATION	0.004661996288521324	DESIGN
we have something like : "? [op] rhs"	WITHOUT_CLASSIFICATION	0.9979821853257492	WITHOUT_CLASSIFICATION	0.0020178146742507656	DESIGN
we have something like : "lhs [op] ?"	WITHOUT_CLASSIFICATION	0.9979821853257492	WITHOUT_CLASSIFICATION	0.0020178146742507656	DESIGN
we know only the rhs-hand type, so use that	WITHOUT_CLASSIFICATION	0.9991052803773806	WITHOUT_CLASSIFICATION	8.94719622619399E-4	DESIGN
handle the (assumed) valid cases: #1 - the only valid datetime addition synatx is one or the other is a datetime (but not both)	WITHOUT_CLASSIFICATION	0.9978639417208911	WITHOUT_CLASSIFICATION	0.0021360582791088967	DESIGN
one or the other needs to be a datetime for us to get into this method in the first place...	WITHOUT_CLASSIFICATION	0.8073476548736239	WITHOUT_CLASSIFICATION	0.19265234512637602	DESIGN
#3 - note that this is also true of "datetime - :param"...	WITHOUT_CLASSIFICATION	0.9963732922863278	WITHOUT_CLASSIFICATION	0.0036267077136722206	DESIGN
#2	WITHOUT_CLASSIFICATION	0.999610005300854	WITHOUT_CLASSIFICATION	3.8999469914600574E-4	DESIGN
Generate the inner join -- The elements need to be joined to the collection they are in.	WITHOUT_CLASSIFICATION	0.9996510850154365	WITHOUT_CLASSIFICATION	3.4891498456343997E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996920778052174	WITHOUT_CLASSIFICATION	3.079221947825162E-4	DESIGN
The 'from element' that represents the elements of the collection.	WITHOUT_CLASSIFICATION	0.9999977688980095	WITHOUT_CLASSIFICATION	2.2311019904415294E-6	DESIGN
Add the condition to the join sequence that qualifies the indexed element.	WITHOUT_CLASSIFICATION	0.9999567568825329	WITHOUT_CLASSIFICATION	4.32431174670485E-5	DESIGN
Sometimes use the element table alias, sometimes use the... umm... collection table alias (many to many)	WITHOUT_CLASSIFICATION	0.9988908179383539	WITHOUT_CLASSIFICATION	0.0011091820616461463	DESIGN
Now, set the text for this node. It should be the element columns.	WITHOUT_CLASSIFICATION	0.9530955341774372	WITHOUT_CLASSIFICATION	0.04690446582256283	DESIGN
Get the function return value type, based on the type of the first argument.	WITHOUT_CLASSIFICATION	0.9999853603171001	WITHOUT_CLASSIFICATION	1.4639682899954179E-5	DESIGN
This will call initialize(tok)!	WITHOUT_CLASSIFICATION	0.9992250138238108	WITHOUT_CLASSIFICATION	7.749861761891477E-4	DESIGN
mutation depends on the types of nodes invloved...	WITHOUT_CLASSIFICATION	0.9987908316336236	WITHOUT_CLASSIFICATION	0.0012091683663764633	DESIGN
"pass along" our initial embedded parameter node(s) to the first generated sql fragment so that it can be handled later for parameter binding...	WITHOUT_CLASSIFICATION	0.9893264054592945	WITHOUT_CLASSIFICATION	0.010673594540705461	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997106557390133	WITHOUT_CLASSIFICATION	2.893442609867459E-4	DESIGN
Generated select expressions are already resolved, nothing to do.	WITHOUT_CLASSIFICATION	0.999454975083276	WITHOUT_CLASSIFICATION	5.45024916724011E-4	DESIGN
The path may be a reference to an alias defined in the parent query.	WITHOUT_CLASSIFICATION	0.999931810354946	WITHOUT_CLASSIFICATION	6.818964505394648E-5	DESIGN
The HQL class alias refers to the class name.	WITHOUT_CLASSIFICATION	0.9999834652856271	WITHOUT_CLASSIFICATION	1.6534714372884037E-5	DESIGN
Associate the table alias with the element.	WITHOUT_CLASSIFICATION	0.9999555553984679	WITHOUT_CLASSIFICATION	4.44446015321491E-5	DESIGN
try the parent FromClause...	WITHOUT_CLASSIFICATION	0.9983008162442812	WITHOUT_CLASSIFICATION	0.0016991837557187328	DESIGN
Add the new node to the map so that we don't create it twice.	WITHOUT_CLASSIFICATION	0.9999479984427933	WITHOUT_CLASSIFICATION	5.2001557206776785E-5	DESIGN
Make sure that all from elements registered with this FROM clause are actually in the AST.	WITHOUT_CLASSIFICATION	0.9996562731024964	WITHOUT_CLASSIFICATION	3.437268975036231E-4	DESIGN
Invoke setScalarColumnText on each constructor argument.	WITHOUT_CLASSIFICATION	0.9991277585451437	WITHOUT_CLASSIFICATION	8.722414548562801E-4	DESIGN
Collect the select expressions, skip the first child because it is the class name.	WITHOUT_CLASSIFICATION	0.9999959609493431	WITHOUT_CLASSIFICATION	4.039050656864029E-6	DESIGN
return an empty Type array	WITHOUT_CLASSIFICATION	0.9985544319011553	WITHOUT_CLASSIFICATION	0.0014455680988446518	DESIGN
Constructors are always considered scalar results.	WITHOUT_CLASSIFICATION	0.9994405814663961	WITHOUT_CLASSIFICATION	5.594185336038082E-4	DESIGN
this is the exception returned by ReflectHelper.getConstructor() if it cannot locate an appropriate constructor	WITHOUT_CLASSIFICATION	0.9996972372375201	WITHOUT_CLASSIFICATION	3.0276276247988146E-4	DESIGN
if there is no order by, make one	WITHOUT_CLASSIFICATION	0.9998976937901054	WITHOUT_CLASSIFICATION	1.0230620989457055E-4	DESIGN
Find the WHERE; if there is no WHERE, find the FROM...	WITHOUT_CLASSIFICATION	0.9999519809129523	WITHOUT_CLASSIFICATION	4.8019087047743344E-5	DESIGN
Now, inject the newly built ORDER BY into the tree	WITHOUT_CLASSIFICATION	0.999523011827861	WITHOUT_CLASSIFICATION	4.7698817213914584E-4	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
logic operators by definition resolve to boolean.	WITHOUT_CLASSIFICATION	0.9997106557390133	WITHOUT_CLASSIFICATION	2.893442609867459E-4	DESIGN
Render the identifier select fragment using the table alias.	WITHOUT_CLASSIFICATION	0.9996587944399105	WITHOUT_CLASSIFICATION	3.412055600895353E-4	DESIGN
Class names in the FROM clause result in a JoinSequence (the old FromParser does this).	WITHOUT_CLASSIFICATION	0.999995085621963	WITHOUT_CLASSIFICATION	4.914378036913581E-6	DESIGN
For many-to-many joins, use the tablename from the queryable collection for the default text.	WITHOUT_CLASSIFICATION	0.9996022784276993	WITHOUT_CLASSIFICATION	3.9772157230066E-4	DESIGN
Otherwise, use the property mapping.	WITHOUT_CLASSIFICATION	0.9985953514597892	WITHOUT_CLASSIFICATION	0.0014046485402107532	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9982722858089114	WITHOUT_CLASSIFICATION	0.0017277141910886885	DESIGN
If the property is a special collection property name, return a CollectionPropertyMapping.	WITHOUT_CLASSIFICATION	0.9996790578948749	WITHOUT_CLASSIFICATION	3.2094210512515506E-4	DESIGN
Collection of components.	WITHOUT_CLASSIFICATION	0.9996958774395787	WITHOUT_CLASSIFICATION	3.041225604212741E-4	DESIGN
make sure the lhs is "assignable"...	WITHOUT_CLASSIFICATION	0.9996717698777704	WITHOUT_CLASSIFICATION	3.2823012222955926E-4	DESIGN
false indicates to not generate parens around the assignment	WITHOUT_CLASSIFICATION	0.9990502734174401	WITHOUT_CLASSIFICATION	9.497265825599875E-4	DESIGN
Register the FromElement with the FROM clause, now that we have the names and aliases.	WITHOUT_CLASSIFICATION	0.9995781035682006	WITHOUT_CLASSIFICATION	4.218964317993967E-4	DESIGN
currently allowed...	WITHOUT_CLASSIFICATION	0.9978952501677056	WITHOUT_CLASSIFICATION	0.002104749832294438	DESIGN
HHH-276 : implied joins in a subselect where clause - The destination needs to be added to the destination's from clause. Not sure if this is will fix everything, but it works.	WITHOUT_CLASSIFICATION	0.6497040862305599	WITHOUT_CLASSIFICATION	0.35029591376944014	DESIGN
return classAlias == null ? className : classAlias;	WITHOUT_CLASSIFICATION	0.9971189932861575	WITHOUT_CLASSIFICATION	0.0028810067138425426	DESIGN
This is an explicit FROM element.	WITHOUT_CLASSIFICATION	0.998500953501607	WITHOUT_CLASSIFICATION	0.0014990464983930735	DESIGN
ParameterContainer impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
Fetch can't be used with scroll() or iterate().	WITHOUT_CLASSIFICATION	0.8997846271624551	WITHOUT_CLASSIFICATION	0.10021537283754486	DESIGN
If it's not implied or it is implied and it's a many to many join where the target wasn't found.	WITHOUT_CLASSIFICATION	0.9999856213303973	WITHOUT_CLASSIFICATION	1.4378669602812666E-5	DESIGN
Since this is an explicit FROM element, it can't be implied in the FROM clause.	WITHOUT_CLASSIFICATION	0.9996679762941314	WITHOUT_CLASSIFICATION	3.320237058686333E-4	DESIGN
Do nothing, eplicit from elements are always in the projection list.	WITHOUT_CLASSIFICATION	0.9998303784977697	WITHOUT_CLASSIFICATION	1.6962150223038289E-4	DESIGN
propertyName refers to something like collection.size...	WITHOUT_CLASSIFICATION	0.9979676187834884	WITHOUT_CLASSIFICATION	0.0020323812165115723	DESIGN
property name is a sub-path of a component...	WITHOUT_CLASSIFICATION	0.9981298303542416	WITHOUT_CLASSIFICATION	0.0018701696457583154	DESIGN
Always add the collection's query spaces.	WITHOUT_CLASSIFICATION	0.9998985413736582	WITHOUT_CLASSIFICATION	1.0145862634169974E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7509946498918061	WITHOUT_CLASSIFICATION	0.24900535010819397	DESIGN
logic operators by definition resolve to booleans	WITHOUT_CLASSIFICATION	0.9997106557390133	WITHOUT_CLASSIFICATION	2.893442609867459E-4	DESIGN
DotNode uses null here...	WITHOUT_CLASSIFICATION	0.9985815360410143	WITHOUT_CLASSIFICATION	0.001418463958985671	DESIGN
We represent a from-clause alias	WITHOUT_CLASSIFICATION	0.9999164750263082	WITHOUT_CLASSIFICATION	8.352497369176198E-5	DESIGN
we are the LHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999604949751888	WITHOUT_CLASSIFICATION	3.950502481119776E-4	DESIGN
we are the RHS of the DOT representing a naked comp-prop-ref	WITHOUT_CLASSIFICATION	0.999101144436008	WITHOUT_CLASSIFICATION	8.988555639921939E-4	DESIGN
we represent a naked (simple) prop-ref	WITHOUT_CLASSIFICATION	0.9969712350995753	WITHOUT_CLASSIFICATION	0.003028764900424667	DESIGN
EARLY EXIT!!! return so the resolve call explicitly coming from DotNode can resolve this...	WITHOUT_CLASSIFICATION	0.9973463052888373	WITHOUT_CLASSIFICATION	0.002653694711162683	DESIGN
assume this ident's text does not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9751462205212926	WITHOUT_CLASSIFICATION	0.024853779478707486	DESIGN
just ignore it for now, it'll get resolved later...	WITHOUT_CLASSIFICATION	0.9997688002816595	WITHOUT_CLASSIFICATION	2.3119971834050637E-4	DESIGN
This is not actually a constant, but a reference to FROM element.	WITHOUT_CLASSIFICATION	0.9867958295998156	WITHOUT_CLASSIFICATION	0.013204170400184364	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996861440675284	WITHOUT_CLASSIFICATION	3.1385593247160463E-4	DESIGN
these pieces are needed for usage in select clause	WITHOUT_CLASSIFICATION	0.9992329059955337	WITHOUT_CLASSIFICATION	7.670940044663556E-4	DESIGN
used to set the type of the parent dot node	WITHOUT_CLASSIFICATION	0.7341860840113567	WITHOUT_CLASSIFICATION	0.2658139159886433	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9444471509621715	WITHOUT_CLASSIFICATION	0.05555284903782844	DESIGN
assume we do not refer to a property on the given persister	WITHOUT_CLASSIFICATION	0.9444471509621715	WITHOUT_CLASSIFICATION	0.05555284903782844	DESIGN
naked property-refs cannot be used with an aliased from element	WITHOUT_CLASSIFICATION	0.9350015524824062	WITHOUT_CLASSIFICATION	0.06499844751759364	DESIGN
this piece is needed for usage in select clause	WITHOUT_CLASSIFICATION	0.99764696253409	WITHOUT_CLASSIFICATION	0.002353037465909956	DESIGN
do not over-write the column text, as that has already been "rendered" during resolve	WITHOUT_CLASSIFICATION	0.9928556427073798	WITHOUT_CLASSIFICATION	0.007144357292620227	DESIGN
for some reason the antlr.CommonAST initialization routines force this method to get called twice. The first time with an empty string	WITHOUT_CLASSIFICATION	0.9998934556139353	WITHOUT_CLASSIFICATION	1.0654438606483924E-4	DESIGN
Look up class name using the first identifier in the path.	WITHOUT_CLASSIFICATION	0.9999404640184539	WITHOUT_CLASSIFICATION	5.953598154607244E-5	DESIGN
Add to the query spaces.	WITHOUT_CLASSIFICATION	0.9997163053334721	WITHOUT_CLASSIFICATION	2.83694666527893E-4	DESIGN
If the from element isn't in the same clause, create a new from element.	WITHOUT_CLASSIFICATION	0.998290738188089	WITHOUT_CLASSIFICATION	0.0017092618119110663	DESIGN
This is the root level node. Generate an explicit from clause at the root.	WITHOUT_CLASSIFICATION	0.9986757653960623	WITHOUT_CLASSIFICATION	0.0013242346039376665	DESIGN
Correlated subqueries create 'special' implied from nodes because correlated subselects can't use an ANSI-style join	WITHOUT_CLASSIFICATION	0.9999445890215841	WITHOUT_CLASSIFICATION	5.541097841587947E-5	DESIGN
super-duper-classic-parser-regression-testing-mojo-magic...	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
A collection of entities...	WITHOUT_CLASSIFICATION	0.9987082479263211	WITHOUT_CLASSIFICATION	0.0012917520736789312	DESIGN
A collection of components...	WITHOUT_CLASSIFICATION	0.9987082479263211	WITHOUT_CLASSIFICATION	0.0012917520736789312	DESIGN
A collection of scalar elements...	WITHOUT_CLASSIFICATION	0.9991918681727235	WITHOUT_CLASSIFICATION	8.081318272764121E-4	DESIGN
according to both the ANSI-SQL and EJB3 specs, trim can either take exactly one parameter or a variable number of parameters between 1 and 4. from the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If only <trim specification> is omitted, BOTH is assumed; if <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998244289392	WITHOUT_CLASSIFICATION	1.7557106086472652E-7	DESIGN
Don't include sub-classes for implied collection joins or subquery joins.	WITHOUT_CLASSIFICATION	0.9997350633256837	WITHOUT_CLASSIFICATION	2.649366743163366E-4	DESIGN
Treat explict from elements in sub-queries properly.	WITHOUT_CLASSIFICATION	0.9997003425838654	WITHOUT_CLASSIFICATION	2.996574161345695E-4	DESIGN
( implied && DotNode.useThetaStyleImplicitJoins ) ) {	WITHOUT_CLASSIFICATION	0.9993532326506949	WITHOUT_CLASSIFICATION	6.467673493052471E-4	DESIGN
the "root from-element" in correlated subqueries do need this piece	WITHOUT_CLASSIFICATION	0.9520124882149125	WITHOUT_CLASSIFICATION	0.04798751178508749	DESIGN
Create the FROM element for the target (the elements of the collection).	WITHOUT_CLASSIFICATION	0.9999948743015081	WITHOUT_CLASSIFICATION	5.1256984918674325E-6	DESIGN
If the join is implied, then don't include sub-classes on the element.	WITHOUT_CLASSIFICATION	0.9999470219755148	WITHOUT_CLASSIFICATION	5.297802448521944E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
The associated entity is implied, but it must be included in the FROM. The collection alias is the role.	WITHOUT_CLASSIFICATION	0.9999383241319345	WITHOUT_CLASSIFICATION	6.16758680655259E-5	DESIGN
Tag this node as a JOIN. Don't include subclasses in the join. This is a clollection join.	WITHOUT_CLASSIFICATION	0.9991161513271585	WITHOUT_CLASSIFICATION	8.838486728414598E-4	DESIGN
Get the class name of the associated entity.	WITHOUT_CLASSIFICATION	0.999882482817834	WITHOUT_CLASSIFICATION	1.1751718216598344E-4	DESIGN
origin, path, implied, columns, classAlias,	WITHOUT_CLASSIFICATION	0.9999753079989154	WITHOUT_CLASSIFICATION	2.469200108460654E-5	DESIGN
implied	WITHOUT_CLASSIFICATION	0.9996009619412446	WITHOUT_CLASSIFICATION	3.9903805875542647E-4	DESIGN
For implied many-to-many, just add the end join.	WITHOUT_CLASSIFICATION	0.9999753729657581	WITHOUT_CLASSIFICATION	2.462703424193555E-5	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
Overridden informational metadata ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996594874043193	WITHOUT_CLASSIFICATION	3.405125956806849E-4	DESIGN
the standard SQL function name is current_timestamp...	WITHOUT_CLASSIFICATION	0.9999822632481181	WITHOUT_CLASSIFICATION	1.7736751881965418E-5	DESIGN
This causes the factory to instantiate the desired class.	WITHOUT_CLASSIFICATION	0.9943113936135046	WITHOUT_CLASSIFICATION	0.005688606386495384	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9976554835784961	WITHOUT_CLASSIFICATION	0.0023445164215038262	DESIGN
Frontbase has no known variation of a "SELECT ... FOR UPDATE" syntax...	WITHOUT_CLASSIFICATION	0.9995322314425827	WITHOUT_CLASSIFICATION	4.6776855741716773E-4	DESIGN
The types represented in the SQL result set. @return The types represented in the SQL result set.	WITHOUT_CLASSIFICATION	0.9999621646093512	WITHOUT_CLASSIFICATION	3.783539064887516E-5	DESIGN
public Type[] getSqlResultTypes() {return sqlResultTypes;}	WITHOUT_CLASSIFICATION	0.9998273079820058	WITHOUT_CLASSIFICATION	1.7269201799424399E-4	DESIGN
First, collect all of the select expressions. NOTE: This must be done before invoking setScalarColumnText() because setScalarColumnText() changes the AST!!!	WITHOUT_CLASSIFICATION	0.9992660112139748	WITHOUT_CLASSIFICATION	7.339887860252427E-4	DESIGN
First allow the actual type to control the return value. (the actual underlying sqltype could actually be different)	WITHOUT_CLASSIFICATION	0.845967524415867	WITHOUT_CLASSIFICATION	0.1540324755841331	DESIGN
sqlResultTypeList.addAll( constructorArgumentTypeList );	WITHOUT_CLASSIFICATION	0.9996679636599816	WITHOUT_CLASSIFICATION	3.320363400184368E-4	DESIGN
If the data type is not an association type, it could not have been in the FROM clause.	WITHOUT_CLASSIFICATION	0.997734811121502	WITHOUT_CLASSIFICATION	0.002265188878498021	DESIGN
sqlResultTypeList.add( type );	WITHOUT_CLASSIFICATION	0.9987174174643981	WITHOUT_CLASSIFICATION	0.0012825825356019235	DESIGN
Always add the type to the return type list.	WITHOUT_CLASSIFICATION	0.9997989103985945	WITHOUT_CLASSIFICATION	2.0108960140559833E-4	DESIGN
add the fetched entities	WITHOUT_CLASSIFICATION	0.9996684327171149	WITHOUT_CLASSIFICATION	3.3156728288506434E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997992242894044	WITHOUT_CLASSIFICATION	2.007757105955466E-4	DESIGN
function support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997956226729596	WITHOUT_CLASSIFICATION	2.043773270403243E-4	DESIGN
If there are any scalars (non-entities) selected, render the select column aliases.	WITHOUT_CLASSIFICATION	0.9999986213734632	WITHOUT_CLASSIFICATION	1.3786265367664244E-6	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
ArrayList sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9992984487879737	WITHOUT_CLASSIFICATION	7.015512120264273E-4	DESIGN
sqlResultTypes = ( Type[] ) sqlResultTypeList.toArray( new Type[sqlResultTypeList.size()] );	WITHOUT_CLASSIFICATION	0.9999457534714286	WITHOUT_CLASSIFICATION	5.4246528571396086E-5	DESIGN
lock acquisition support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999180226630481	WITHOUT_CLASSIFICATION	8.197733695189882E-4	DESIGN
TODO:	WITHOUT_CLASSIFICATION	0.518307330146827	WITHOUT_CLASSIFICATION	0.4816926698531731	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998306989084228	WITHOUT_CLASSIFICATION	1.6930109157725715E-4	DESIGN
Generate an 2d array of column names, the first dimension is parallel with the return types array. The second dimension is the list of column names for each type.	WITHOUT_CLASSIFICATION	0.9999996739218268	WITHOUT_CLASSIFICATION	3.260781732594975E-7	DESIGN
Generate the select expression.	WITHOUT_CLASSIFICATION	0.9996860523870071	WITHOUT_CLASSIFICATION	3.1394761299287035E-4	DESIGN
union subclass support ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9939290167739913	WITHOUT_CLASSIFICATION	0.00607098322600869	DESIGN
Skip 'DISTINCT' and 'ALL', so we return the first expression node.	WITHOUT_CLASSIFICATION	0.9999718355547426	WITHOUT_CLASSIFICATION	2.816444525741808E-5	DESIGN
Create SQL_TOKEN nodes for the columns.	WITHOUT_CLASSIFICATION	0.9998504558275235	WITHOUT_CLASSIFICATION	1.4954417247652733E-4	DESIGN
Generate the property select tokens.	WITHOUT_CLASSIFICATION	0.9995637396748964	WITHOUT_CLASSIFICATION	4.362603251036997E-4	DESIGN
Get the function name node.	WITHOUT_CLASSIFICATION	0.9999487660437494	WITHOUT_CLASSIFICATION	5.1233956250660614E-5	DESIGN
Method expressions in a SELECT should always be considered scalar.	WITHOUT_CLASSIFICATION	0.7065389132055864	DESIGN	0.29346108679441363	WITHOUT_CLASSIFICATION
If this is 'elements' then create a new FROM element.	WITHOUT_CLASSIFICATION	0.9978292058431423	WITHOUT_CLASSIFICATION	0.0021707941568577106	DESIGN
Not elements(x)	WITHOUT_CLASSIFICATION	0.9839143993161409	WITHOUT_CLASSIFICATION	0.016085600683859134	DESIGN
Dialect function	WITHOUT_CLASSIFICATION	0.9999072878126173	WITHOUT_CLASSIFICATION	9.271218738275588E-5	DESIGN
Collection 'property function'	WITHOUT_CLASSIFICATION	0.9992396388595186	WITHOUT_CLASSIFICATION	7.603611404813977E-4	DESIGN
If the constant is an IDENT, figure out what it means...	WITHOUT_CLASSIFICATION	0.999799828093049	WITHOUT_CLASSIFICATION	2.001719069509049E-4	DESIGN
IDENT is a class alias in the FROM.	WITHOUT_CLASSIFICATION	0.9997393996350743	WITHOUT_CLASSIFICATION	2.606003649256833E-4	DESIGN
Resolve to an identity column.	WITHOUT_CLASSIFICATION	0.9858476232432023	WITHOUT_CLASSIFICATION	0.014152376756797778	DESIGN
Otherwise, it's a literal.	WITHOUT_CLASSIFICATION	0.9986318173698125	WITHOUT_CLASSIFICATION	0.001368182630187431	DESIGN
the name of an entity class	WITHOUT_CLASSIFICATION	0.9992174168230737	WITHOUT_CLASSIFICATION	7.825831769262329E-4	DESIGN
the class discriminator value	WITHOUT_CLASSIFICATION	0.9996109400550952	WITHOUT_CLASSIFICATION	3.890599449047178E-4	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997102436296675	WITHOUT_CLASSIFICATION	2.897563703323851E-4	DESIGN
Add a space before the display text.	WITHOUT_CLASSIFICATION	0.9999488640978832	WITHOUT_CLASSIFICATION	5.113590211674232E-5	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999911736819445	WITHOUT_CLASSIFICATION	8.826318055525476E-6	DESIGN
child == parent.getFirstChild()	WITHOUT_CLASSIFICATION	0.9994373049023683	WITHOUT_CLASSIFICATION	5.626950976318578E-4	DESIGN
Find or create the WHERE clause	WITHOUT_CLASSIFICATION	0.9999911736819445	WITHOUT_CLASSIFICATION	8.826318055525476E-6	DESIGN
Filter conditions need to be inserted before the HQL where condition and the theta join node. This is because org.hibernate.loader.Loader binds the filter parameters first, then it binds all the HQL query parameters, see org.hibernate.loader.Loader.processFilterParameters().	WITHOUT_CLASSIFICATION	0.9999933429200107	WITHOUT_CLASSIFICATION	6.6570799893289795E-6	DESIGN
Put the FILTERS node before the HQL condition and theta joins	WITHOUT_CLASSIFICATION	0.9999348409831369	WITHOUT_CLASSIFICATION	6.51590168630648E-5	DESIGN
add the current fragment to the FILTERS node	WITHOUT_CLASSIFICATION	0.9997986761939228	WITHOUT_CLASSIFICATION	2.0132380607719555E-4	DESIGN
Create a new THETA_JOINS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998217280547614	WITHOUT_CLASSIFICATION	1.7827194523851103E-4	DESIGN
Put the THETA_JOINS node before the HQL condition, after the filters.	WITHOUT_CLASSIFICATION	0.9999409713998976	WITHOUT_CLASSIFICATION	5.90286001025122E-5	DESIGN
add the current fragment to the THETA_JOINS node	WITHOUT_CLASSIFICATION	0.9997986761939228	WITHOUT_CLASSIFICATION	2.0132380607719555E-4	DESIGN
First, try to get the persister using the given name directly.	WITHOUT_CLASSIFICATION	0.9995268659797019	WITHOUT_CLASSIFICATION	4.731340202981677E-4	DESIGN
unable to locate it using this name	WITHOUT_CLASSIFICATION	0.9988031776966263	WITHOUT_CLASSIFICATION	0.0011968223033736634	DESIGN
If that didn't work, try using the 'import' name.	WITHOUT_CLASSIFICATION	0.9996792547534793	WITHOUT_CLASSIFICATION	3.207452465207267E-4	DESIGN
Implicit joins use theta style (WHERE pk = fk), explicit joins use JOIN (after from)	WITHOUT_CLASSIFICATION	0.9995386563463842	WITHOUT_CLASSIFICATION	4.61343653615816E-4	DESIGN
locate the registered function by the given name	WITHOUT_CLASSIFICATION	0.9999920338839144	WITHOUT_CLASSIFICATION	7.966116085447881E-6	DESIGN
determine the type of the first argument...	WITHOUT_CLASSIFICATION	0.9996399010417711	WITHOUT_CLASSIFICATION	3.600989582289732E-4	DESIGN
Use the DOT node to emit the first column name. Create the column names, folled by the column aliases.	WITHOUT_CLASSIFICATION	0.9999932009392354	WITHOUT_CLASSIFICATION	6.799060764668059E-6	DESIGN
Note: this simply constructs a "raw" SQL_TOKEN representing the where fragment and injects this into the tree. This "works"; however it is probably not the best long-term solution. At some point we probably want to apply an additional grammar to properly tokenize this where fragment into constituent parts focused on the operators embedded within the fragment.	WITHOUT_CLASSIFICATION	0.9999625701038298	DESIGN	3.7429896170142134E-5	WITHOUT_CLASSIFICATION
Append the text of the current node.	WITHOUT_CLASSIFICATION	0.9999865084215582	WITHOUT_CLASSIFICATION	1.3491578441810406E-5	DESIGN
If the node has a first child, recurse into the first child.	WITHOUT_CLASSIFICATION	0.9999678112217477	WITHOUT_CLASSIFICATION	3.218877825224049E-5	DESIGN
If there is a second child (RHS), recurse into that child.	WITHOUT_CLASSIFICATION	0.9999366474551613	WITHOUT_CLASSIFICATION	6.335254483869193E-5	DESIGN
Iterate through the alias,JoinSequence pairs and generate SQL token nodes.	WITHOUT_CLASSIFICATION	0.9999370917230551	WITHOUT_CLASSIFICATION	6.29082769448584E-5	DESIGN
If the from element represents a JOIN_FRAGMENT and it is a theta-style join, convert its type from JOIN_FRAGMENT to FROM_FRAGMENT	WITHOUT_CLASSIFICATION	0.9999228779733902	WITHOUT_CLASSIFICATION	7.712202660976974E-5	DESIGN
this is used during SqlGenerator processing	WITHOUT_CLASSIFICATION	0.6122661497553809	WITHOUT_CLASSIFICATION	0.38773385024461926	DESIGN
If there is a FROM fragment and the FROM element is an explicit, then add the from part.	WITHOUT_CLASSIFICATION	0.9993107521400635	WITHOUT_CLASSIFICATION	6.892478599365071E-4	DESIGN
&& StringHelper.isNotEmpty( frag )	WITHOUT_CLASSIFICATION	0.9993558315985903	WITHOUT_CLASSIFICATION	6.441684014096021E-4	DESIGN
The FROM fragment will probably begin with ', '. Remove this if it is present.	WITHOUT_CLASSIFICATION	0.9253268777178345	WITHOUT_CLASSIFICATION	0.07467312228216541	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.997828081414107	WITHOUT_CLASSIFICATION	0.0021719185858930464	DESIGN
SELECT p FROM p IN CLASS eg.Person ORDER BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9989601630013734	WITHOUT_CLASSIFICATION	0.0010398369986267056	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999126867877673	WITHOUT_CLASSIFICATION	8.731321223266075E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9984721894190351	WITHOUT_CLASSIFICATION	0.0015278105809648417	DESIGN
default mode	WITHOUT_CLASSIFICATION	0.9994068358382118	WITHOUT_CLASSIFICATION	5.931641617883172E-4	DESIGN
QueryJoinFragment join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999178014392947	WITHOUT_CLASSIFICATION	8.219856070535335E-5	DESIGN
reset the dotcount (but not the path) after reset!	WITHOUT_CLASSIFICATION	0.999300085445921	WITHOUT_CLASSIFICATION	6.999145540790027E-4	DESIGN
after reset!	WITHOUT_CLASSIFICATION	0.9996218536512382	WITHOUT_CLASSIFICATION	3.7814634876176653E-4	DESIGN
we don't need to worry about any condition in the ON clause here (toFromFragmentString), since anything in the ON condition is already applied to the whole query	WITHOUT_CLASSIFICATION	0.997093227348597	WITHOUT_CLASSIFICATION	0.0029067726514031386	DESIGN
bit_length feels a bit broken to me. We have to cast to char in order to pass when a numeric value is supplied. But of course the answers given will be wildly different for these two datatypes. 1234.5678 will be 9 bytes as a char string but will be 8 or 16 bytes as a true numeric. Jay Nance 2006-09-22	WITHOUT_CLASSIFICATION	0.9996895592345456	WITHOUT_CLASSIFICATION	3.104407654543956E-4	DESIGN
dotcount>=2	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
Do the corresponding RHS	WITHOUT_CLASSIFICATION	0.9997189229203006	WITHOUT_CLASSIFICATION	2.8107707969931076E-4	DESIGN
if its "id"	WITHOUT_CLASSIFICATION	0.9998780150780162	WITHOUT_CLASSIFICATION	1.2198492198382665E-4	DESIGN
or its the id property name	WITHOUT_CLASSIFICATION	0.9998166495438148	WITHOUT_CLASSIFICATION	1.8335045618523925E-4	DESIGN
join = q.createJoinFragment(useThetaStyleJoin);	WITHOUT_CLASSIFICATION	0.9999178014392947	WITHOUT_CLASSIFICATION	8.219856070535335E-5	DESIGN
important!!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
String[] keyCols = collPersister.getKeyColumnNames();	WITHOUT_CLASSIFICATION	0.9998270785283294	WITHOUT_CLASSIFICATION	1.7292147167053304E-4	DESIGN
an association	WITHOUT_CLASSIFICATION	0.9997897850997504	WITHOUT_CLASSIFICATION	2.1021490024972645E-4	DESIGN
allow index() function:	WITHOUT_CLASSIFICATION	0.9966051076480528	WITHOUT_CLASSIFICATION	0.0033948923519473073	DESIGN
here assume SQLServer2005 using snapshot isolation, which does not have this problem	WITHOUT_CLASSIFICATION	0.9798580290418253	WITHOUT_CLASSIFICATION	0.020141970958174733	DESIGN
The reason for this is SQL doesn't let you sort by an expression you are not returning in the result set.	WITHOUT_CLASSIFICATION	0.9999126867877673	WITHOUT_CLASSIFICATION	8.731321223266075E-5	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
collections of values	WITHOUT_CLASSIFICATION	0.9997599435283631	WITHOUT_CLASSIFICATION	2.400564716369973E-4	DESIGN
opening paren in new Foo ( ... )	WITHOUT_CLASSIFICATION	0.9995821882747253	WITHOUT_CLASSIFICATION	4.178117252746821E-4	DESIGN
if we are inside a new Result(), but not inside a nested function	WITHOUT_CLASSIFICATION	0.9992580589392399	WITHOUT_CLASSIFICATION	7.419410607600706E-4	DESIGN
special case	WITHOUT_CLASSIFICATION	0.9999190623470989	WITHOUT_CLASSIFICATION	8.093765290109619E-5	DESIGN
the name of an SQL function	WITHOUT_CLASSIFICATION	0.9999602268479318	WITHOUT_CLASSIFICATION	3.977315206814744E-5	DESIGN
null child could occur for no from clause in a filter	WITHOUT_CLASSIFICATION	0.9973947090779905	WITHOUT_CLASSIFICATION	0.0026052909220094125	DESIGN
this is basically a copy/paste of OrderByParser ... might be worth refactoring	WITHOUT_CLASSIFICATION	0.8318113603947314	DESIGN	0.16818863960526867	WITHOUT_CLASSIFICATION
SELECT p FROM p IN CLASS eg.Person GROUP BY p.Name, p.Address, p	WITHOUT_CLASSIFICATION	0.9983929608100824	WITHOUT_CLASSIFICATION	0.001607039189917545	DESIGN
return aliases not supported in classic translator!	WITHOUT_CLASSIFICATION	0.9986697196040406	WITHOUT_CLASSIFICATION	0.001330280395959421	DESIGN
register collection role	WITHOUT_CLASSIFICATION	0.9991765759431371	WITHOUT_CLASSIFICATION	8.234240568630028E-4	DESIGN
The keyword used to specify an identity column, if identity column key generation is supported.	WITHOUT_CLASSIFICATION	0.9992271876934181	WITHOUT_CLASSIFICATION	7.7281230658188E-4	DESIGN
.getElementPropertyMapping();	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
crossJoins.add(name);	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
ie no select clause in HQL	WITHOUT_CLASSIFICATION	0.9998598921681024	WITHOUT_CLASSIFICATION	1.4010783189760296E-4	DESIGN
initialize the Set of queried identifier spaces (ie. tables)	WITHOUT_CLASSIFICATION	0.9998237536896702	WITHOUT_CLASSIFICATION	1.7624631032979717E-4	DESIGN
ie. no select clause	WITHOUT_CLASSIFICATION	0.9999381074577809	WITHOUT_CLASSIFICATION	6.189254221911245E-5	DESIGN
there _was_ a select clause	WITHOUT_CLASSIFICATION	0.9998650969204635	WITHOUT_CLASSIFICATION	1.3490307953653547E-4	DESIGN
return the concrete type, or the underlying type if a concrete type was not specified	WITHOUT_CLASSIFICATION	0.9992229616749961	WITHOUT_CLASSIFICATION	7.770383250038962E-4	DESIGN
many-to-many	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
q.addCollection(collectionName, collectionRole);	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
classic parser does not support bulk manipulation statements	WITHOUT_CLASSIFICATION	0.9953360955435933	WITHOUT_CLASSIFICATION	0.004663904456406712	DESIGN
can't cache this stuff either (per-invocation)	WITHOUT_CLASSIFICATION	0.997239524621935	WITHOUT_CLASSIFICATION	0.002760475378065133	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9959898299934546	WITHOUT_CLASSIFICATION	0.004010170006545362	DESIGN
This is the legacy behaviour for HQL queries...	WITHOUT_CLASSIFICATION	0.9982312298853762	WITHOUT_CLASSIFICATION	0.0017687701146237766	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9983829704028773	WITHOUT_CLASSIFICATION	0.0016170295971227474	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9983829704028773	WITHOUT_CLASSIFICATION	0.0016170295971227474	DESIGN
we have the form: trim(trimSource) so we trim leading and trailing spaces EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9998817260376195	WITHOUT_CLASSIFICATION	1.1827396238049729E-4	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9983829704028773	WITHOUT_CLASSIFICATION	0.0016170295971227474	DESIGN
not known!	WITHOUT_CLASSIFICATION	0.9983829704028773	WITHOUT_CLASSIFICATION	0.0016170295971227474	DESIGN
Need this, since join condition can appear inside parens!	WITHOUT_CLASSIFICATION	0.999369080242712	WITHOUT_CLASSIFICATION	6.309197572879884E-4	DESIGN
tokens that close a sub expression tokens that open a sub expression tokens that would indicate a sub expression is a boolean expression	WITHOUT_CLASSIFICATION	0.9999998622977937	WITHOUT_CLASSIFICATION	1.3770220641940546E-7	DESIGN
expressionTerminators.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997878519163034	WITHOUT_CLASSIFICATION	2.1214808369668123E-4	DESIGN
expressionOpeners.add(","); deliberately excluded	WITHOUT_CLASSIFICATION	0.9997878519163034	WITHOUT_CLASSIFICATION	2.1214808369668123E-4	DESIGN
we have the form: trim(from trimSource). This is functionally equivalent to trim(trimSource) EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.999244129688674	WITHOUT_CLASSIFICATION	7.558703113258799E-4	DESIGN
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character (what is to be trimmed off?) the trim-source (from where should it be trimmed?)	WITHOUT_CLASSIFICATION	0.998114926367089	WITHOUT_CLASSIFICATION	0.0018850736329109924	DESIGN
Inside a BETWEEN ... AND ... expression	WITHOUT_CLASSIFICATION	0.9994288296052392	WITHOUT_CLASSIFICATION	5.711703947608851E-4	DESIGN
were an odd or even number of NOTs encountered the join string built up by compound paths inside this expression a flag indicating if the subexpression is known to be boolean	WITHOUT_CLASSIFICATION	0.9999704996199471	WITHOUT_CLASSIFICATION	2.950038005285995E-5	DESIGN
ie. a many-to-many	WITHOUT_CLASSIFICATION	0.9990779971059102	WITHOUT_CLASSIFICATION	9.220028940897417E-4	DESIGN
Cope with [,]	WITHOUT_CLASSIFICATION	0.9992313929263734	WITHOUT_CLASSIFICATION	7.686070736265532E-4	DESIGN
Cope with a continued path expression (ie. ].baz)	WITHOUT_CLASSIFICATION	0.9997829399733945	WITHOUT_CLASSIFICATION	2.1706002660558716E-4	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.999914611737286	WITHOUT_CLASSIFICATION	8.538826271387748E-5	DESIGN
Cope with a subselect	WITHOUT_CLASSIFICATION	0.9971168363127764	WITHOUT_CLASSIFICATION	0.0028831636872236775	DESIGN
Cope with special cases of AND, NOT, ()	WITHOUT_CLASSIFICATION	0.9999952122922648	WITHOUT_CLASSIFICATION	4.787707735160203E-6	DESIGN
Close extra brackets we opened	WITHOUT_CLASSIFICATION	0.9996866448481815	WITHOUT_CLASSIFICATION	3.133551518185264E-4	DESIGN
take note when this is a boolean expression	WITHOUT_CLASSIFICATION	0.9980766154706139	WITHOUT_CLASSIFICATION	0.001923384529386124	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999810759265809	WITHOUT_CLASSIFICATION	1.8924073419153827E-5	DESIGN
process a token, mapping OO path expressions to SQL expressions	WITHOUT_CLASSIFICATION	0.9997673079725368	WITHOUT_CLASSIFICATION	2.3269202746318266E-4	DESIGN
Open any extra brackets we might need.	WITHOUT_CLASSIFICATION	0.9940205554743761	WITHOUT_CLASSIFICATION	0.005979444525624034	DESIGN
Cope with special cases of AND, NOT, )	WITHOUT_CLASSIFICATION	0.9979718630774079	WITHOUT_CLASSIFICATION	0.0020281369225921275	DESIGN
the next one up must also be	WITHOUT_CLASSIFICATION	0.9972661569710913	WITHOUT_CLASSIFICATION	0.0027338430289086885	DESIGN
Add any joins	WITHOUT_CLASSIFICATION	0.9997735070691771	WITHOUT_CLASSIFICATION	2.2649293082291735E-4	DESIGN
assumes that types are all of span 1	WITHOUT_CLASSIFICATION	0.9999810759265809	WITHOUT_CLASSIFICATION	1.8924073419153827E-5	DESIGN
named query parameter	WITHOUT_CLASSIFICATION	0.9984721894190351	WITHOUT_CLASSIFICATION	0.0015278105809648417	DESIGN
path expression	WITHOUT_CLASSIFICATION	0.9999436553084626	WITHOUT_CLASSIFICATION	5.6344691537407234E-5	DESIGN
saves / updates don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9998888954447733	WITHOUT_CLASSIFICATION	1.1110455522667506E-4	DESIGN
persists don't cascade to uninitialized collections	WITHOUT_CLASSIFICATION	0.9997796230558392	WITHOUT_CLASSIFICATION	2.2037694416075586E-4	DESIGN
anything else	WITHOUT_CLASSIFICATION	0.9999623485910039	WITHOUT_CLASSIFICATION	3.765140899618997E-5	DESIGN
the path expression continues after a ]	WITHOUT_CLASSIFICATION	0.9999457431659433	WITHOUT_CLASSIFICATION	5.4256834056661474E-5	DESIGN
careful with this!	WITHOUT_CLASSIFICATION	0.9987100338443392	WITHOUT_CLASSIFICATION	0.0012899661556608195	DESIGN
the path expression ends at the ]	WITHOUT_CLASSIFICATION	0.9998725287835384	WITHOUT_CLASSIFICATION	1.2747121646167843E-4	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998866801654054	WITHOUT_CLASSIFICATION	1.1331983459456292E-4	DESIGN
NOTICE: no " or . since they are part of (compound) identifiers	WITHOUT_CLASSIFICATION	0.9999024554903865	WITHOUT_CLASSIFICATION	9.754450961351663E-5	DESIGN
cannot instantiate	WITHOUT_CLASSIFICATION	0.9999590681207201	WITHOUT_CLASSIFICATION	4.0931879279848996E-5	DESIGN
start by looking for HQL keywords...	WITHOUT_CLASSIFICATION	0.9997152452521623	WITHOUT_CLASSIFICATION	2.847547478378198E-4	DESIGN
inner joins can be abbreviated to 'join'	WITHOUT_CLASSIFICATION	0.9949346444956362	WITHOUT_CLASSIFICATION	0.00506535550436387	DESIGN
'outer' is optional and is ignored	WITHOUT_CLASSIFICATION	0.999744372237464	WITHOUT_CLASSIFICATION	2.556277625360447E-4	DESIGN
now anything that is not a HQL keyword	WITHOUT_CLASSIFICATION	0.9994629832092282	WITHOUT_CLASSIFICATION	5.37016790771876E-4	DESIGN
process the "old" HQL style where aliases appear _first_ ie. using the IN or IN CLASS constructions	WITHOUT_CLASSIFICATION	0.9999518025152808	WITHOUT_CLASSIFICATION	4.819748471911662E-5	DESIGN
treat it as a classname	WITHOUT_CLASSIFICATION	0.9993341803542629	WITHOUT_CLASSIFICATION	6.658196457371648E-4	DESIGN
treat it as a path expression	WITHOUT_CLASSIFICATION	0.9999052360930927	WITHOUT_CLASSIFICATION	9.476390690723525E-5	DESIGN
starts with the name of a mapped class (new style)	WITHOUT_CLASSIFICATION	0.9992607726391863	WITHOUT_CLASSIFICATION	7.39227360813602E-4	DESIGN
starts with a path expression (new style)	WITHOUT_CLASSIFICATION	0.9998872590977008	WITHOUT_CLASSIFICATION	1.1274090229913254E-4	DESIGN
allow ODMG OQL style: from Person p, p.cars c	WITHOUT_CLASSIFICATION	0.9987164211389303	WITHOUT_CLASSIFICATION	0.0012835788610696137	DESIGN
handle quoted strings	WITHOUT_CLASSIFICATION	0.9979367324489543	WITHOUT_CLASSIFICATION	0.0020632675510456546	DESIGN
Object insertions, updates, and deletions have list semantics because they must happen in the right order so as to respect referential integrity	WITHOUT_CLASSIFICATION	0.9999799833102361	WITHOUT_CLASSIFICATION	2.0016689763886432E-5	DESIGN
"finish off" the join	WITHOUT_CLASSIFICATION	0.9998866801654054	WITHOUT_CLASSIFICATION	1.1331983459456292E-4	DESIGN
ignore whitespace	WITHOUT_CLASSIFICATION	0.9999010930437378	WITHOUT_CLASSIFICATION	9.890695626232077E-5	DESIGN
do replacements	WITHOUT_CLASSIFICATION	0.9993807735823909	WITHOUT_CLASSIFICATION	6.192264176092424E-4	DESIGN
handle HQL2 collection syntax	WITHOUT_CLASSIFICATION	0.996588901222956	WITHOUT_CLASSIFICATION	0.0034110987770441664	DESIGN
uuid.hex is deprecated	WITHOUT_CLASSIFICATION	0.9928061653504916	WITHOUT_CLASSIFICATION	0.007193834649508367	DESIGN
AbstractSelectingDelegate impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
hilo params	WITHOUT_CLASSIFICATION	0.9995749414557892	WITHOUT_CLASSIFICATION	4.2505854421090206E-4	DESIGN
sql = query;	WITHOUT_CLASSIFICATION	0.9999346410939248	WITHOUT_CLASSIFICATION	6.535890607515488E-5	DESIGN
performance opt	WITHOUT_CLASSIFICATION	0.9984035756975397	WITHOUT_CLASSIFICATION	0.0015964243024603276	DESIGN
sql = update;	WITHOUT_CLASSIFICATION	0.9999342423193547	WITHOUT_CLASSIFICATION	6.575768064527572E-5	DESIGN
hilo config	WITHOUT_CLASSIFICATION	0.9993000278846423	WITHOUT_CLASSIFICATION	6.999721153575985E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999272594350057	WITHOUT_CLASSIFICATION	7.274056499435776E-5	DESIGN
don't allow comments on these insert statements as comments totally blow up the Oracle getGeneratedKeys "support" :(	WITHOUT_CLASSIFICATION	0.9978688575014919	WITHOUT_CLASSIFICATION	0.0021311424985081314	DESIGN
abort the save (the object is already saved by a circular cascade)	WITHOUT_CLASSIFICATION	0.9941152426636638	WITHOUT_CLASSIFICATION	0.005884757336336154	DESIGN
throw new IdentifierGenerationException("save associated object first, or disable cascade for inverse association");	WITHOUT_CLASSIFICATION	0.9999224032146056	WITHOUT_CLASSIFICATION	7.759678539444831E-5	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992614147846036	WITHOUT_CLASSIFICATION	7.385852153964194E-4	DESIGN
do nothing to avoid a lazy property initialization	WITHOUT_CLASSIFICATION	0.9995898726471885	WITHOUT_CLASSIFICATION	4.101273528115939E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995191256852746	WITHOUT_CLASSIFICATION	4.8087431472547735E-4	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999272594350057	WITHOUT_CLASSIFICATION	7.274056499435776E-5	DESIGN
do nothing until we hit the rsult set containing the generated id	WITHOUT_CLASSIFICATION	0.9993683680005134	WITHOUT_CLASSIFICATION	6.316319994865835E-4	DESIGN
COLUMN and TABLE should be renamed but it would break the public API	WITHOUT_CLASSIFICATION	0.99328341528991	WITHOUT_CLASSIFICATION	0.0067165847100899385	DESIGN
Loaded entity instances, by EntityKey	WITHOUT_CLASSIFICATION	0.9994714104131844	WITHOUT_CLASSIFICATION	5.285895868155662E-4	DESIGN
if the given name is un-qualified we may neen to qualify it	WITHOUT_CLASSIFICATION	0.9990950010431835	WITHOUT_CLASSIFICATION	9.049989568164649E-4	DESIGN
the default...	WITHOUT_CLASSIFICATION	0.999725642647915	WITHOUT_CLASSIFICATION	2.7435735208501504E-4	DESIGN
unfortunately not really safe to normalize this to 1 as an initial value like we do the others because we would not be able to control this if we are using a sequence...	WITHOUT_CLASSIFICATION	0.9996511106189836	WITHOUT_CLASSIFICATION	3.488893810163752E-4	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992614147846036	WITHOUT_CLASSIFICATION	7.385852153964194E-4	DESIGN
Identity map of CollectionEntry instances, by the collection wrapper	WITHOUT_CLASSIFICATION	0.9999675656487576	WITHOUT_CLASSIFICATION	3.243435124233375E-5	DESIGN
general purpose parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999709804430525	WITHOUT_CLASSIFICATION	2.901955694745078E-5	DESIGN
table-specific parameters ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999166242542726	WITHOUT_CLASSIFICATION	8.337574572730005E-5	DESIGN
Configurable implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996566108999206	WITHOUT_CLASSIFICATION	3.4338910007933885E-4	DESIGN
IdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996566108999206	WITHOUT_CLASSIFICATION	3.4338910007933885E-4	DESIGN
PersistentIdentifierGenerator implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996566108999206	WITHOUT_CLASSIFICATION	3.4338910007933885E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997162551305621	WITHOUT_CLASSIFICATION	2.837448694379334E-4	DESIGN
prepare and execute the insert	WITHOUT_CLASSIFICATION	0.9997162551305621	WITHOUT_CLASSIFICATION	2.837448694379334E-4	DESIGN
fetch the generated id in a separate query	WITHOUT_CLASSIFICATION	0.9977136468551369	WITHOUT_CLASSIFICATION	0.00228635314486314	DESIGN
we just hit the last position	WITHOUT_CLASSIFICATION	0.9993741527490951	WITHOUT_CLASSIFICATION	6.258472509047983E-4	DESIGN
scroll ahead	WITHOUT_CLASSIFICATION	0.9934162233423802	WITHOUT_CLASSIFICATION	0.006583776657619779	DESIGN
scroll backward	WITHOUT_CLASSIFICATION	0.9979031434654373	WITHOUT_CLASSIFICATION	0.002096856534562718	DESIGN
we have not yet hit the last result...	WITHOUT_CLASSIFICATION	0.9985234122161887	WITHOUT_CLASSIFICATION	0.001476587783811228	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995135483917199	WITHOUT_CLASSIFICATION	4.864516082800581E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996396407835858	WITHOUT_CLASSIFICATION	3.60359216414261E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
do this when all the properties are updateable since there is a certain likelihood that the information will already be snapshot-cached.	WITHOUT_CLASSIFICATION	0.9997955749974137	WITHOUT_CLASSIFICATION	2.0442500258635831E-4	DESIGN
Inner classes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998565671063834	WITHOUT_CLASSIFICATION	1.4343289361664434E-4	DESIGN
Constructors ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995135483917199	WITHOUT_CLASSIFICATION	4.864516082800581E-4	DESIGN
State ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996396407835858	WITHOUT_CLASSIFICATION	3.60359216414261E-4	DESIGN
Criteria impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
Caches	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
Generators:	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
cache region is defined by the root-class in the hierarchy...	WITHOUT_CLASSIFICATION	0.9993054012298427	WITHOUT_CLASSIFICATION	6.945987701573882E-4	DESIGN
check if the detached object being merged is the parent	WITHOUT_CLASSIFICATION	0.9995470936068207	WITHOUT_CLASSIFICATION	4.5290639317936156E-4	DESIGN
after all persisters and named queries are registered	WITHOUT_CLASSIFICATION	0.9997563988429184	WITHOUT_CLASSIFICATION	2.4360115708152953E-4	DESIGN
if we get here, it is possible that we have a proxy 'in the way' of the merge map resolution... NOTE: decided to put this here rather than in the above loop as I was nervous about the performance of the loop-in-loop especially considering this is far more likely the 'edge case'	WITHOUT_CLASSIFICATION	0.9978538833056515	WITHOUT_CLASSIFICATION	0.002146116694348417	DESIGN
JNDI + Serialization:	WITHOUT_CLASSIFICATION	0.9998328279855141	WITHOUT_CLASSIFICATION	1.6717201448601416E-4	DESIGN
checking for named queries	WITHOUT_CLASSIFICATION	0.9439515890849283	WITHOUT_CLASSIFICATION	0.05604841091507175	DESIGN
stats	WITHOUT_CLASSIFICATION	0.9996167785581608	WITHOUT_CLASSIFICATION	3.8322144183924466E-4	DESIGN
EntityNotFoundDelegate	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
Check named HQL queries	WITHOUT_CLASSIFICATION	0.9993495705224188	WITHOUT_CLASSIFICATION	6.504294775811901E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.68027188957738	WITHOUT_CLASSIFICATION	0.31972811042262	DESIGN
prevents this session from adding things to cache	WITHOUT_CLASSIFICATION	0.9771503322956488	WITHOUT_CLASSIFICATION	0.022849667704351154	DESIGN
from javax.naming.Referenceable	WITHOUT_CLASSIFICATION	0.9993592576870306	WITHOUT_CLASSIFICATION	6.40742312969373E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9988516776357839	WITHOUT_CLASSIFICATION	0.00114832236421616	DESIGN
for a dynamic-class	WITHOUT_CLASSIFICATION	0.9990607945515924	WITHOUT_CLASSIFICATION	9.392054484075673E-4	DESIGN
test this entity to see if we must query it	WITHOUT_CLASSIFICATION	0.999492537365323	WITHOUT_CLASSIFICATION	5.074626346769779E-4	DESIGN
NOTE EARLY EXIT	WITHOUT_CLASSIFICATION	0.9996071770313483	WITHOUT_CLASSIFICATION	3.928229686516897E-4	DESIGN
for backward-compatability	WITHOUT_CLASSIFICATION	0.9991593249240147	WITHOUT_CLASSIFICATION	8.406750759852131E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9944665243871281	WITHOUT_CLASSIFICATION	0.005533475612871822	DESIGN
to stop the class from being unloaded	WITHOUT_CLASSIFICATION	0.9992127688706134	WITHOUT_CLASSIFICATION	7.872311293865518E-4	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7551069372825451	WITHOUT_CLASSIFICATION	0.24489306271745495	DESIGN
must add to JNDI _after_ adding to HashMaps, because some JNDI servers use serialization	WITHOUT_CLASSIFICATION	0.999212236589646	WITHOUT_CLASSIFICATION	7.877634103541118E-4	DESIGN
Make sure this is a defined parameter and check the incoming value type	WITHOUT_CLASSIFICATION	0.9963168634522669	WITHOUT_CLASSIFICATION	0.0036831365477331558	DESIGN
for each of the defined parameters, make sure its value has been set	WITHOUT_CLASSIFICATION	0.9999650003108308	WITHOUT_CLASSIFICATION	3.499968916916478E-5	DESIGN
we never need to apply locks to the SQL	WITHOUT_CLASSIFICATION	0.9964679905625828	WITHOUT_CLASSIFICATION	0.003532009437417262	DESIGN
inserts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994883879128346	WITHOUT_CLASSIFICATION	5.116120871654556E-4	DESIGN
deletes ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995181843999074	WITHOUT_CLASSIFICATION	4.81815600092694E-4	DESIGN
during deserialization, we need to reconnect all proxies and collections to this session, as well as the EntityEntry and CollectionEntry instances; these associations are transient because serialization is used for different things.	WITHOUT_CLASSIFICATION	0.6868453755072064	DESIGN	0.3131546244927936	WITHOUT_CLASSIFICATION
updates ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997031494720013	WITHOUT_CLASSIFICATION	2.968505279986922E-4	DESIGN
loading ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998986191435768	WITHOUT_CLASSIFICATION	1.0138085642313176E-4	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999179303056812	WITHOUT_CLASSIFICATION	8.206969431880485E-5	DESIGN
final boolean forceCacheRefresh,	WITHOUT_CLASSIFICATION	0.9999179303056812	WITHOUT_CLASSIFICATION	8.206969431880485E-5	DESIGN
first, try to load it from the temp PC associated to this SS	WITHOUT_CLASSIFICATION	0.9998326416945816	WITHOUT_CLASSIFICATION	1.6735830541829698E-4	DESIGN
if the metadata allowed proxy creation and caller did not request forceful eager loading, generate a proxy	WITHOUT_CLASSIFICATION	0.9999977330740334	WITHOUT_CLASSIFICATION	2.266925966631577E-6	DESIGN
otherwise immediately materialize it	WITHOUT_CLASSIFICATION	0.9993991137036955	WITHOUT_CLASSIFICATION	6.008862963043875E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.999789068234426	WITHOUT_CLASSIFICATION	2.1093176557391267E-4	DESIGN
no auto-flushing to support in stateless session	WITHOUT_CLASSIFICATION	0.9980500059305261	WITHOUT_CLASSIFICATION	0.0019499940694738867	DESIGN
after setting values to object, entityMode	WITHOUT_CLASSIFICATION	0.9999715745942065	WITHOUT_CLASSIFICATION	2.8425405793484162E-5	DESIGN
for EJB3	WITHOUT_CLASSIFICATION	0.999595634601061	WITHOUT_CLASSIFICATION	4.04365398938953E-4	DESIGN
just ignore	WITHOUT_CLASSIFICATION	0.9999261421060534	WITHOUT_CLASSIFICATION	7.385789394665156E-5	DESIGN
do a check	WITHOUT_CLASSIFICATION	0.9995867827265834	WITHOUT_CLASSIFICATION	4.132172734165552E-4	DESIGN
saveOrUpdate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
update() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999788325323987	WITHOUT_CLASSIFICATION	2.116746760130894E-4	DESIGN
lock() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
persist() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
persistOnFlush() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
merge() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999777951866478	WITHOUT_CLASSIFICATION	2.2204813352193849E-4	DESIGN
saveOrUpdateCopy() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
delete() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997402100850483	WITHOUT_CLASSIFICATION	2.5978991495173803E-4	DESIGN
load()/get() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
refresh() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
replicate() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
do not auto-flush while outside a transaction	WITHOUT_CLASSIFICATION	0.9857211802438239	WITHOUT_CLASSIFICATION	0.014278819756175969	DESIGN
this is an internal error of some sort...	WITHOUT_CLASSIFICATION	0.9907752097571265	WITHOUT_CLASSIFICATION	0.009224790242873523	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9774251418121981	WITHOUT_CLASSIFICATION	0.02257485818780191	DESIGN
only collections belonging to deleted entities are allowed to be dereferenced in the case of orphan delete	WITHOUT_CLASSIFICATION	0.999996908782207	WITHOUT_CLASSIFICATION	3.091217792943128E-6	DESIGN
if it was previously unreferenced, we need to flush in order to get its state into the database in order to execute query	WITHOUT_CLASSIFICATION	0.9977274430877718	WITHOUT_CLASSIFICATION	0.0022725569122281314	DESIGN
not for internal use:	WITHOUT_CLASSIFICATION	0.9961242047246404	WITHOUT_CLASSIFICATION	0.0038757952753596375	DESIGN
otherwise, we only need to flush if there are in-memory changes to the queried tables	WITHOUT_CLASSIFICATION	0.9979204702319247	WITHOUT_CLASSIFICATION	0.0020795297680752294	DESIGN
might need to run a different filter entirely after the flush because the collection role may have changed	WITHOUT_CLASSIFICATION	0.9795207763854619	WITHOUT_CLASSIFICATION	0.020479223614538127	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9774251418121981	WITHOUT_CLASSIFICATION	0.02257485818780191	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9774251418121981	WITHOUT_CLASSIFICATION	0.02257485818780191	DESIGN
if it is initialized, see if the underlying instance is contained, since we need to account for the fact that it might have been evicted	WITHOUT_CLASSIFICATION	0.9966655658275386	WITHOUT_CLASSIFICATION	0.003334434172461487	DESIGN
basically just an adapted copy of find(CriteriaImpl)	WITHOUT_CLASSIFICATION	0.9995895131386623	WITHOUT_CLASSIFICATION	4.1048686133778956E-4	DESIGN
it is possible for this method to be called during flush processing, so make certain that we do not accidently initialize an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9939402571542971	WITHOUT_CLASSIFICATION	0.0060597428457029295	DESIGN
nothing to do in a stateful session	WITHOUT_CLASSIFICATION	0.9982593850497086	WITHOUT_CLASSIFICATION	0.0017406149502913462	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998598839793477	WITHOUT_CLASSIFICATION	1.4011602065243603E-4	DESIGN
ignore this error for now	WITHOUT_CLASSIFICATION	0.9944665243871281	WITHOUT_CLASSIFICATION	0.005533475612871822	DESIGN
we need to writeObject() on this since interceptor is user defined	WITHOUT_CLASSIFICATION	0.998409355838751	WITHOUT_CLASSIFICATION	0.0015906441612489849	DESIGN
the old-time stand-by...	WITHOUT_CLASSIFICATION	0.9994798203570218	WITHOUT_CLASSIFICATION	5.201796429782979E-4	DESIGN
parameter bind values...	WITHOUT_CLASSIFICATION	0.9976750477995662	WITHOUT_CLASSIFICATION	0.0023249522004339567	DESIGN
Parameter handling code ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.996288310034258	WITHOUT_CLASSIFICATION	0.0037116899657419263	DESIGN
prepend value and type list with null for any positions before the wanted position.	WITHOUT_CLASSIFICATION	0.99986645236976	WITHOUT_CLASSIFICATION	1.335476302399964E-4	DESIGN
Execution methods ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9992345198647418	WITHOUT_CLASSIFICATION	7.654801352582201E-4	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9989158823336965	WITHOUT_CLASSIFICATION	0.0010841176663034587	DESIGN
we have a CGLIB enhanced entity	WITHOUT_CLASSIFICATION	0.9989158823336965	WITHOUT_CLASSIFICATION	0.0010841176663034587	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9989158823336965	WITHOUT_CLASSIFICATION	0.0010841176663034587	DESIGN
we have a Javassist enhanced entity	WITHOUT_CLASSIFICATION	0.9989158823336965	WITHOUT_CLASSIFICATION	0.0010841176663034587	DESIGN
FieldInterceptor impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
subclass accesses ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9981185448997446	WITHOUT_CLASSIFICATION	0.001881455100255409	DESIGN
let's assume that there is only one lazy fetch group, for now!	WITHOUT_CLASSIFICATION	0.9999871379909147	WITHOUT_CLASSIFICATION	1.2862009085405859E-5	DESIGN
FieldHandler impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999553489732442	WITHOUT_CLASSIFICATION	4.465102675580015E-4	DESIGN
should not need to grow beyond the size of the total number of columns in the rs	WITHOUT_CLASSIFICATION	0.8678792909219017	WITHOUT_CLASSIFICATION	0.1321207090780983	DESIGN
should probably no-op commit/rollback here, at least in JTA scenarios	WITHOUT_CLASSIFICATION	0.9562053002718249	WITHOUT_CLASSIFICATION	0.04379469972817498	DESIGN
Base Expectation impls ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996715456806409	WITHOUT_CLASSIFICATION	3.2845431935911044E-4	DESIGN
Various Expectation instances ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996686603369431	WITHOUT_CLASSIFICATION	3.313396630568276E-4	DESIGN
explicitly perform no checking...	WITHOUT_CLASSIFICATION	0.6947120689499099	DESIGN	0.3052879310500903	WITHOUT_CLASSIFICATION
used from testsuite	WITHOUT_CLASSIFICATION	0.9251262690851352	WITHOUT_CLASSIFICATION	0.07487373091486475	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996400153216447	WITHOUT_CLASSIFICATION	3.599846783553026E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
register synch; stats.connect()	WITHOUT_CLASSIFICATION	0.9997373548550033	WITHOUT_CLASSIFICATION	2.6264514499674653E-4	DESIGN
noncritical, swallow and let the other propagate!	WITHOUT_CLASSIFICATION	0.9976023550525399	WITHOUT_CLASSIFICATION	0.002397644947460157	DESIGN
calls executeBatch()	WITHOUT_CLASSIFICATION	0.9982769397070262	WITHOUT_CLASSIFICATION	0.001723060292973714	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998429838911519	WITHOUT_CLASSIFICATION	1.570161088481844E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998429838911519	WITHOUT_CLASSIFICATION	1.570161088481844E-4	DESIGN
no big deal	WITHOUT_CLASSIFICATION	0.9998429838911519	WITHOUT_CLASSIFICATION	1.570161088481844E-4	DESIGN
sybase driver (jConnect) throwing NPE here in certain cases, but we'll just handle the general "unexpected" case	WITHOUT_CLASSIFICATION	0.9996110737437779	WITHOUT_CLASSIFICATION	3.889262562221917E-4	DESIGN
see explanation above...	WITHOUT_CLASSIFICATION	0.9994355958509908	WITHOUT_CLASSIFICATION	5.644041490091119E-4	DESIGN
If we are in the process of releasing, no sense checking for aggressive-release possibility.	WITHOUT_CLASSIFICATION	0.9719027737466983	WITHOUT_CLASSIFICATION	0.028097226253301716	DESIGN
EARLY EXIT!!!!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
ResultSet impl ("overridden") ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995539155815929	WITHOUT_CLASSIFICATION	4.460844184071702E-4	DESIGN
ResultSet impl (delegated) ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995539155815929	WITHOUT_CLASSIFICATION	4.460844184071702E-4	DESIGN
refer to comment in StatefulPersistenceContext.addCollection()	WITHOUT_CLASSIFICATION	0.9999225548622427	WITHOUT_CLASSIFICATION	7.744513775733261E-5	DESIGN
ConnectionManager.Callback implementation ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996566108999206	WITHOUT_CLASSIFICATION	3.4338910007933885E-4	DESIGN
Note : success = false, because we don't know the outcome of the transaction	WITHOUT_CLASSIFICATION	0.99995660469327	WITHOUT_CLASSIFICATION	4.33953067299586E-5	DESIGN
we already have a callback registered; either a local (org.hibernate.Transaction) transaction has accepted callback responsibilities, or we have previously registered a transaction synch.	WITHOUT_CLASSIFICATION	0.9997035795010579	WITHOUT_CLASSIFICATION	2.964204989420135E-4	DESIGN
the configured transaction-factory says it only supports local callback mode, so no sense attempting to register a JTA Synchronization	WITHOUT_CLASSIFICATION	0.9992690348317528	WITHOUT_CLASSIFICATION	7.309651682471792E-4	DESIGN
transactions marked for rollback-only cause some TM impls to throw exceptions	WITHOUT_CLASSIFICATION	0.9942840659524025	WITHOUT_CLASSIFICATION	0.0057159340475975125	DESIGN
serialization ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996267359749185	WITHOUT_CLASSIFICATION	3.7326402508152637E-4	DESIGN
postInitialize() will be called after initialization	WITHOUT_CLASSIFICATION	0.9998678723101418	WITHOUT_CLASSIFICATION	1.3212768985816853E-4	DESIGN
cannot handle single quotes	WITHOUT_CLASSIFICATION	0.9997683927092725	WITHOUT_CLASSIFICATION	2.3160729072744214E-4	DESIGN
todo : for 4.0 private static final Logger log = LoggerFactory.getLogger( SQLStatementLogger.class ); this is the legacy logging 'category'...	WITHOUT_CLASSIFICATION	0.9998825437373082	WITHOUT_CLASSIFICATION	1.17456262691856E-4	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.993951536320878	WITHOUT_CLASSIFICATION	0.006048463679122046	DESIGN
don't even bother trying to read further	WITHOUT_CLASSIFICATION	0.9980429579165988	WITHOUT_CLASSIFICATION	0.0019570420834012204	DESIGN
don't even bother trying to read any further	WITHOUT_CLASSIFICATION	0.9985543832966722	WITHOUT_CLASSIFICATION	0.001445616703327737	DESIGN
position cursor to the last row	WITHOUT_CLASSIFICATION	0.9999298711040844	WITHOUT_CLASSIFICATION	7.01288959156039E-5	DESIGN
sequentially read the result set in reverse until we recognize a change in the key value. At that point, we are pointed at the last physical sequential row for the logical row in which we are interested in processing	WITHOUT_CLASSIFICATION	0.9999979451369574	WITHOUT_CLASSIFICATION	2.054863042668953E-6	DESIGN
Read backwards until we read past the first physical sequential row with the key we are interested in loading	WITHOUT_CLASSIFICATION	0.9999996064916412	WITHOUT_CLASSIFICATION	3.93508358807502E-7	DESIGN
Finally, read ahead one row to position result set cursor at the first physical row we are interested in loading	WITHOUT_CLASSIFICATION	0.9999942575660326	WITHOUT_CLASSIFICATION	5.7424339674663E-6	DESIGN
now get an existing proxy for each row element (if there is one)	WITHOUT_CLASSIFICATION	0.9999907317342286	WITHOUT_CLASSIFICATION	9.268265771385897E-6	DESIGN
force the proxy to resolve itself	WITHOUT_CLASSIFICATION	0.9915332138921333	WITHOUT_CLASSIFICATION	0.008466786107866575	DESIGN
this is equivalent to the old behavior...	WITHOUT_CLASSIFICATION	0.9996965628657731	WITHOUT_CLASSIFICATION	3.034371342269074E-4	DESIGN
if null, owner will be retrieved from session	WITHOUT_CLASSIFICATION	0.9999094646114315	WITHOUT_CLASSIFICATION	9.053538856855084E-5	DESIGN
final String queryString,	WITHOUT_CLASSIFICATION	0.9996208221724989	WITHOUT_CLASSIFICATION	3.791778275010109E-4	DESIGN
if it was a reference to self, don't need to nullify unless we are using native id generation, in which case we definitely need to nullify	WITHOUT_CLASSIFICATION	0.9999834653474026	WITHOUT_CLASSIFICATION	1.6534652597440888E-5	DESIGN
end of array, start filling again from start	WITHOUT_CLASSIFICATION	0.999946685339999	WITHOUT_CLASSIFICATION	5.3314660000934254E-5	DESIGN
in an effort to avoid concurrent-modification-exceptions (from potential recursive calls back through here as a result of the eventual call to PersistentCollection#endRead), we scan the internal loadingCollections map for matches and store those matches in a temp collection. the temp collection is then used to "drive" the #endRead processing.	WITHOUT_CLASSIFICATION	0.9923294118056771	WITHOUT_CLASSIFICATION	0.007670588194322848	DESIGN
we can reuse it for each row	WITHOUT_CLASSIFICATION	0.9997620742874112	WITHOUT_CLASSIFICATION	2.3792571258892322E-4	DESIGN
can't reuse in this case	WITHOUT_CLASSIFICATION	0.9994717381562	WITHOUT_CLASSIFICATION	5.282618437999144E-4	DESIGN
First we need to suspend any current JTA transaction and obtain a JDBC connection	WITHOUT_CLASSIFICATION	0.9933463854530314	WITHOUT_CLASSIFICATION	0.006653614546968515	DESIGN
getResultList(results);	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
if we only returned one entity, query by key is more efficient	WITHOUT_CLASSIFICATION	0.999252530406461	WITHOUT_CLASSIFICATION	7.474695935389674E-4	DESIGN
a collection loaded in the current session can not possibly be the collection belonging to the entity passed to update()	WITHOUT_CLASSIFICATION	0.9976246831928048	WITHOUT_CLASSIFICATION	0.0023753168071952	DESIGN
handle empty collection	WITHOUT_CLASSIFICATION	0.9926672778170604	WITHOUT_CLASSIFICATION	0.007332722182939611	DESIGN
else no collection element, but also no owner	WITHOUT_CLASSIFICATION	0.9999813501480762	WITHOUT_CLASSIFICATION	1.8649851923780778E-5	DESIGN
handle empty collections	WITHOUT_CLASSIFICATION	0.9966544878697696	WITHOUT_CLASSIFICATION	0.00334551213023026	DESIGN
else this is not a collection initializer (and empty collections will be detected by looking for the owner's identifier in the result set)	WITHOUT_CLASSIFICATION	0.9958101557892999	WITHOUT_CLASSIFICATION	0.0041898442107000675	DESIGN
validate() instances of Validatable	WITHOUT_CLASSIFICATION	0.9997743886004868	WITHOUT_CLASSIFICATION	2.2561139951317354E-4	DESIGN
if we know there is exactly 1 row, we can skip. it would be great if we could _always_ skip this; it is a problem for <key-many-to-one>	WITHOUT_CLASSIFICATION	0.8576397550754898	WITHOUT_CLASSIFICATION	0.14236024492451016	DESIGN
remove all collections for the entity from the session-level cache	WITHOUT_CLASSIFICATION	0.98826194428574	WITHOUT_CLASSIFICATION	0.01173805571426007	DESIGN
null version means the object is in the process of being loaded somewhere else in the ResultSet	WITHOUT_CLASSIFICATION	0.9999848190458053	WITHOUT_CLASSIFICATION	1.5180954194770053E-5	DESIGN
problematic for <key-many-to-one>!	WITHOUT_CLASSIFICATION	0.9960229048367881	WITHOUT_CLASSIFICATION	0.003977095163211882	DESIGN
use the id passed in	WITHOUT_CLASSIFICATION	0.9997316501082609	WITHOUT_CLASSIFICATION	2.683498917391283E-4	DESIGN
do nothing	WITHOUT_CLASSIFICATION	0.9997695754039121	WITHOUT_CLASSIFICATION	2.3042459608788442E-4	DESIGN
prefer re-generation of identity!	WITHOUT_CLASSIFICATION	0.9996060527400074	WITHOUT_CLASSIFICATION	3.939472599927392E-4	DESIGN
no point doing this if NONE was requested	WITHOUT_CLASSIFICATION	0.9999788047165533	WITHOUT_CLASSIFICATION	2.119528344670485E-5	DESIGN
If the object is already loaded, return the loaded one	WITHOUT_CLASSIFICATION	0.999916960639833	WITHOUT_CLASSIFICATION	8.303936016698454E-5	DESIGN
its already loaded so don't need to hydrate it	WITHOUT_CLASSIFICATION	0.9992479787778877	WITHOUT_CLASSIFICATION	7.520212221121895E-4	DESIGN
cascade the refresh prior to refreshing this entity	WITHOUT_CLASSIFICATION	0.9989095864577116	WITHOUT_CLASSIFICATION	0.0010904135422884129	DESIGN
the load() which takes an entity does not pass an entityName	WITHOUT_CLASSIFICATION	0.999970861274691	WITHOUT_CLASSIFICATION	2.9138725308981232E-5	DESIGN
we only check the version when _upgrading_ lock modes	WITHOUT_CLASSIFICATION	0.9999773070192728	WITHOUT_CLASSIFICATION	2.2692980727253113E-5	DESIGN
look for a proxy	WITHOUT_CLASSIFICATION	0.9996609583507882	WITHOUT_CLASSIFICATION	3.390416492118261E-4	DESIGN
we need to upgrade the lock mode to the mode requested	WITHOUT_CLASSIFICATION	0.9980824782898566	WITHOUT_CLASSIFICATION	0.0019175217101433395	DESIGN
its the given optional object	WITHOUT_CLASSIFICATION	0.9993903340539992	WITHOUT_CLASSIFICATION	6.096659460007049E-4	DESIGN
instantiate a new instance	WITHOUT_CLASSIFICATION	0.9973471284902355	WITHOUT_CLASSIFICATION	0.0026528715097644535	DESIGN
need to hydrate it.	WITHOUT_CLASSIFICATION	0.9986480608938811	WITHOUT_CLASSIFICATION	0.0013519391061187957	DESIGN
return a newly loaded object	WITHOUT_CLASSIFICATION	0.9982143445499052	WITHOUT_CLASSIFICATION	0.001785655450094755	DESIGN
will be ignored, using the existing Entry instead	WITHOUT_CLASSIFICATION	0.9990652881775675	WITHOUT_CLASSIFICATION	9.347118224325227E-4	DESIGN
key is an entity involved with the operation performed by the listener; value can be either a copy of the entity or the entity itself	WITHOUT_CLASSIFICATION	0.9999938241908913	WITHOUT_CLASSIFICATION	6.175809108707581E-6	DESIGN
materialize associations (and initialize the object) later	WITHOUT_CLASSIFICATION	0.9911293119994599	WITHOUT_CLASSIFICATION	0.008870688000540191	DESIGN
Get the persister for the _subclass_	WITHOUT_CLASSIFICATION	0.9995538163675055	WITHOUT_CLASSIFICATION	4.461836324944904E-4	DESIGN
ok in normal Hibernate usage to delete a detached entity; JPA however forbids it, thus this is a hook for HEM to affect this behavior	WITHOUT_CLASSIFICATION	0.997530050586911	WITHOUT_CLASSIFICATION	0.0024699494130889575	DESIGN
the entry will be removed after the flush, and will no longer override the stale snapshot This is now handled by removeEntity() in EntityDeleteAction persistenceContext.removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.9977755069908929	WITHOUT_CLASSIFICATION	0.0022244930091071123	DESIGN
addInitializedCollection(collection, persister, id);	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
|| oj.getJoinable().consumesCollectionAlias()	WITHOUT_CLASSIFICATION	0.9997225387448148	WITHOUT_CLASSIFICATION	2.774612551852271E-4	DESIGN
here we do not bother with the discriminator.	WITHOUT_CLASSIFICATION	0.8944212858072235	WITHOUT_CLASSIFICATION	0.10557871419277645	DESIGN
Code to handle subclasses of topClass	WITHOUT_CLASSIFICATION	0.9983362174719332	WITHOUT_CLASSIFICATION	0.0016637825280667986	DESIGN
woops we got an instance of another class hierarchy branch	WITHOUT_CLASSIFICATION	0.9995485162561819	WITHOUT_CLASSIFICATION	4.514837438180222E-4	DESIGN
we can go straight to the first required row	WITHOUT_CLASSIFICATION	0.9998961170986105	WITHOUT_CLASSIFICATION	1.0388290138948486E-4	DESIGN
we need to step through the rows one row at a time (slow)	WITHOUT_CLASSIFICATION	0.979032511898343	WITHOUT_CLASSIFICATION	0.020967488101657127	DESIGN
synchronized to avoid multi-thread access issues; defined as method synch to avoid potential deadlock issues due to nature of code.	WITHOUT_CLASSIFICATION	0.9999709906859618	WITHOUT_CLASSIFICATION	2.900931403806829E-5	DESIGN
Allows various loaders (ok mainly the QueryLoader :) to check whether scrolling of their result set should be allowed. By default it is allowed.	WITHOUT_CLASSIFICATION	0.9999159832076235	WITHOUT_CLASSIFICATION	8.40167923764194E-5	DESIGN
before adding to collection!	WITHOUT_CLASSIFICATION	0.9991651714901731	WITHOUT_CLASSIFICATION	8.348285098267656E-4	DESIGN
if the current depth is 0, the root thing being loaded is the many-to-many collection itself. Here, it is alright to use an inner join...	WITHOUT_CLASSIFICATION	0.9982880705485547	WITHOUT_CLASSIFICATION	0.0017119294514453987	DESIGN
operations which cascade as far as the collection also cascade to collection elements	WITHOUT_CLASSIFICATION	0.9999987748929997	WITHOUT_CLASSIFICATION	1.2251070002514001E-6	DESIGN
simple, because we can't have a one-to-one or a collection (or even a property-ref) in a composite-element:	WITHOUT_CLASSIFICATION	0.9997449172301095	WITHOUT_CLASSIFICATION	2.5508276989041933E-4	DESIGN
a composite key	WITHOUT_CLASSIFICATION	0.9992395305823454	WITHOUT_CLASSIFICATION	7.604694176546444E-4	DESIGN
if no batch, use "foo = ? and bar = ?"	WITHOUT_CLASSIFICATION	0.9991781550044082	WITHOUT_CLASSIFICATION	8.218449955918914E-4	DESIGN
it must be a collection fetch	WITHOUT_CLASSIFICATION	0.9647629615230201	WITHOUT_CLASSIFICATION	0.0352370384769799	DESIGN
needed later for many-to-many/filter application	WITHOUT_CLASSIFICATION	0.9981969722657718	WITHOUT_CLASSIFICATION	0.0018030277342281783	DESIGN
&& etype.isReferenceToPrimaryKey()	WITHOUT_CLASSIFICATION	0.9992879258267869	WITHOUT_CLASSIFICATION	7.120741732131102E-4	DESIGN
it might still need to apply a collection ordering based on a many-to-many defined order-by...	WITHOUT_CLASSIFICATION	0.8603753806039225	WITHOUT_CLASSIFICATION	0.13962461939607757	DESIGN
if a composite key, use "( (foo = ? and bar = ?) or (foo = ? and bar = ?) )" for batching TODO: unnecessary for databases with ANSI-style joins	WITHOUT_CLASSIFICATION	0.8498731590832126	DESIGN	0.15012684091678738	WITHOUT_CLASSIFICATION
belong to other persister belong to other persister	WITHOUT_CLASSIFICATION	0.9926311171223806	WITHOUT_CLASSIFICATION	0.007368882877619478	DESIGN
we found it	WITHOUT_CLASSIFICATION	0.9996215591940675	WITHOUT_CLASSIFICATION	3.784408059324571E-4	DESIGN
we can use an inner join for the many-to-many	WITHOUT_CLASSIFICATION	0.9979690576969228	WITHOUT_CLASSIFICATION	0.002030942303077215	DESIGN
disable a join back to this same association	WITHOUT_CLASSIFICATION	0.9965568498753832	WITHOUT_CLASSIFICATION	0.003443150124616953	DESIGN
NOTE: unlike all other Loaders, this one is NOT multithreaded, or cacheable!!	WITHOUT_CLASSIFICATION	0.981983871605275	WITHOUT_CLASSIFICATION	0.01801612839472506	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999530842590669	WITHOUT_CLASSIFICATION	4.69157409331669E-5	DESIGN
root entity comes last	WITHOUT_CLASSIFICATION	0.9992778107862026	WITHOUT_CLASSIFICATION	7.221892137973151E-4	DESIGN
deliberately ignore return value!	WITHOUT_CLASSIFICATION	0.9999536838572693	WITHOUT_CLASSIFICATION	4.631614273054404E-5	DESIGN
alias may be null EARLY EXIT	WITHOUT_CLASSIFICATION	0.9993461327138908	WITHOUT_CLASSIFICATION	6.538672861090959E-4	DESIGN
if it is a compound path	WITHOUT_CLASSIFICATION	0.9997119639177079	WITHOUT_CLASSIFICATION	2.8803608229208756E-4	DESIGN
otherwise assume the parent is the the criteria that created us	WITHOUT_CLASSIFICATION	0.9976009825602372	WITHOUT_CLASSIFICATION	0.0023990174397627182	DESIGN
if its the root criteria, we are done	WITHOUT_CLASSIFICATION	0.9998669740664072	WITHOUT_CLASSIFICATION	1.3302593359275006E-4	DESIGN
otherwise, recurse	WITHOUT_CLASSIFICATION	0.9995215875952977	WITHOUT_CLASSIFICATION	4.784124047021665E-4	DESIGN
the criteria instance	WITHOUT_CLASSIFICATION	0.9984772550735926	WITHOUT_CLASSIFICATION	0.0015227449264073715	DESIGN
the entity name	WITHOUT_CLASSIFICATION	0.9993471377844437	WITHOUT_CLASSIFICATION	6.52862215556268E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996200212578352	WITHOUT_CLASSIFICATION	3.7997874216468534E-4	DESIGN
not found in inner query , try the outer query	WITHOUT_CLASSIFICATION	0.9996200212578352	WITHOUT_CLASSIFICATION	3.7997874216468534E-4	DESIGN
it refers to an alias of a projection	WITHOUT_CLASSIFICATION	0.999929956399634	WITHOUT_CLASSIFICATION	7.004360036595711E-5	DESIGN
should never happen, i think	WITHOUT_CLASSIFICATION	0.9945420958968714	WITHOUT_CLASSIFICATION	0.005457904103128572	DESIGN
Detect discriminator values...	WITHOUT_CLASSIFICATION	0.9992437285233339	WITHOUT_CLASSIFICATION	7.562714766661898E-4	DESIGN
Convert the string value into the proper type.	WITHOUT_CLASSIFICATION	0.995259083279348	WITHOUT_CLASSIFICATION	0.004740916720652048	DESIGN
and the qualifier is not the alias of this criteria -> check to see if we belong to some criteria other than the one that created us	WITHOUT_CLASSIFICATION	0.9991824355106084	WITHOUT_CLASSIFICATION	8.175644893915528E-4	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999393199580805	WITHOUT_CLASSIFICATION	6.068004191949715E-4	DESIGN
Otherwise, this is an ordinary value.	WITHOUT_CLASSIFICATION	0.9995836164966848	WITHOUT_CLASSIFICATION	4.163835033152588E-4	DESIGN
Currently not cachable if autodiscover types is in effect (e.g. "select ...")	WITHOUT_CLASSIFICATION	0.9996753560008517	WITHOUT_CLASSIFICATION	3.246439991483735E-4	DESIGN
private final String[] sqlAliases; private final String[] sqlAliasSuffixes;	WITHOUT_CLASSIFICATION	0.9996403852668815	WITHOUT_CLASSIFICATION	3.5961473311841777E-4	DESIGN
this is only needed (afaict) for ResultTransformer processing...	WITHOUT_CLASSIFICATION	0.9986263924917654	WITHOUT_CLASSIFICATION	0.0013736075082345191	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999095689909213	WITHOUT_CLASSIFICATION	9.043100907862379E-5	DESIGN
build an array with indices equal to the total number of actual returns in the result Hibernate will return for this query (scalars + non-scalars)	WITHOUT_CLASSIFICATION	0.9999924642982604	WITHOUT_CLASSIFICATION	7.535701739568024E-6	DESIGN
replace {....} with corresponding column aliases	WITHOUT_CLASSIFICATION	0.9998047103588313	WITHOUT_CLASSIFICATION	1.952896411687052E-4	DESIGN
No additional open braces found in the string, append the rest of the string in its entirty and quit this loop	WITHOUT_CLASSIFICATION	0.9999887609776581	WITHOUT_CLASSIFICATION	1.1239022341896837E-5	DESIGN
apend everything up until the next encountered open brace	WITHOUT_CLASSIFICATION	0.9995888101216711	WITHOUT_CLASSIFICATION	4.1118987832888316E-4	DESIGN
it is a simple table alias {foo}	WITHOUT_CLASSIFICATION	0.9999909268657036	WITHOUT_CLASSIFICATION	9.073134296476898E-6	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9803987015702902	WITHOUT_CLASSIFICATION	0.019601298429709778	DESIGN
passing through anything we do not know : to support jdbc escape sequences HB-898	WITHOUT_CLASSIFICATION	0.9803987015702902	WITHOUT_CLASSIFICATION	0.019601298429709778	DESIGN
The current alias is referencing the collection to be eagerly fetched	WITHOUT_CLASSIFICATION	0.9999901286312962	WITHOUT_CLASSIFICATION	9.87136870387241E-6	DESIGN
it is a property reference {foo.bar}	WITHOUT_CLASSIFICATION	0.9990612176349941	WITHOUT_CLASSIFICATION	9.387823650058431E-4	DESIGN
Possibly handle :something parameters for the query ?	WITHOUT_CLASSIFICATION	0.9998350041905547	WITHOUT_CLASSIFICATION	1.6499580944528988E-4	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9994422998839372	WITHOUT_CLASSIFICATION	5.577001160627734E-4	DESIGN
private final List persisters = new ArrayList();	WITHOUT_CLASSIFICATION	0.9997422157608955	WITHOUT_CLASSIFICATION	2.5778423910455093E-4	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
NOTE: EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9997904867599114	WITHOUT_CLASSIFICATION	2.0951324008847334E-4	DESIGN
private final List scalarTypes = new ArrayList(); private final List scalarColumnAliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.999946119177115	WITHOUT_CLASSIFICATION	5.388082288507698E-5	DESIGN
Now, process the returns	WITHOUT_CLASSIFICATION	0.9997655812548497	WITHOUT_CLASSIFICATION	2.3441874515032704E-4	DESIGN
private List collectionOwnerAliases = new ArrayList(); private List collectionAliases = new ArrayList(); private List collectionPersisters = new ArrayList(); private List collectionResults = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998338133999716	WITHOUT_CLASSIFICATION	1.6618660002848263E-4	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9973592274256841	WITHOUT_CLASSIFICATION	0.0026407725743159928	DESIGN
already been processed...	WITHOUT_CLASSIFICATION	0.9973592274256841	WITHOUT_CLASSIFICATION	0.0026407725743159928	DESIGN
Make sure the owner alias is known...	WITHOUT_CLASSIFICATION	0.9999694744022763	WITHOUT_CLASSIFICATION	3.052559772361296E-5	DESIGN
first, break down the returns into maps keyed by alias so that role returns can be more easily resolved to their owners	WITHOUT_CLASSIFICATION	0.998753153438635	WITHOUT_CLASSIFICATION	0.0012468465613649398	DESIGN
scalarColumnAliases.add( typeReturn.getColumnAlias() ); scalarTypes.add( typeReturn.getType() );	WITHOUT_CLASSIFICATION	0.9996679636599816	WITHOUT_CLASSIFICATION	3.320363400184368E-4	DESIGN
If this return's alias has not been processed yet, do so b4 further processing of this return	WITHOUT_CLASSIFICATION	0.9999464742039104	WITHOUT_CLASSIFICATION	5.352579608961615E-5	DESIGN
collectionOwnerAliases.add( ownerAlias );	WITHOUT_CLASSIFICATION	0.9996679636599816	WITHOUT_CLASSIFICATION	3.320363400184368E-4	DESIGN
for merging of versioned entities, we consider the version having been changed only when: 1) the two version values are different; AND 2) The target actually represents database state! This second condition is a special case which allows an entity to be merged during the same transaction (though during a seperate operation) in which it was originally persisted/saved	WITHOUT_CLASSIFICATION	0.9999994238820047	WITHOUT_CLASSIFICATION	5.761179952921474E-7	DESIGN
this is the second pass through on a merge op, so here we limit the replacement to associations types (value types were already replaced during the first pass)	WITHOUT_CLASSIFICATION	0.5440697196868962	WITHOUT_CLASSIFICATION	0.4559302803131037	DESIGN
EARLY EXIT	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
cascade-save to collections AFTER the collection owner was saved	WITHOUT_CLASSIFICATION	0.9993820101865324	WITHOUT_CLASSIFICATION	6.179898134676545E-4	DESIGN
Initialize the error handling delegate.	WITHOUT_CLASSIFICATION	0.9975071777543333	WITHOUT_CLASSIFICATION	0.002492822245666658	DESIGN
Use the delegate.	WITHOUT_CLASSIFICATION	0.9996144284072058	WITHOUT_CLASSIFICATION	3.855715927941085E-4	DESIGN
currently only the Hibernate-supplied DbTimestampType is supported here	WITHOUT_CLASSIFICATION	0.9978430185359847	WITHOUT_CLASSIFICATION	0.002156981464015389	DESIGN
This is called when it's time to fully resolve a path expression.	WITHOUT_CLASSIFICATION	0.8695436361088805	WITHOUT_CLASSIFICATION	0.1304563638911195	DESIGN
make a new one	WITHOUT_CLASSIFICATION	0.9987986493950118	WITHOUT_CLASSIFICATION	0.0012013506049881595	DESIGN
not so sure this is even valid subtree. but if it was, it'd represent two unrelated table references...	WITHOUT_CLASSIFICATION	0.9997968482740099	WITHOUT_CLASSIFICATION	2.0315172599001539E-4	DESIGN
(NOT (GT a b) ) => (LE a b)	WITHOUT_CLASSIFICATION	0.9997138614228555	WITHOUT_CLASSIFICATION	2.8613857714456913E-4	DESIGN
private Type[] sqlResultTypes;	WITHOUT_CLASSIFICATION	0.9976554835784961	WITHOUT_CLASSIFICATION	0.0023445164215038262	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995018480290472	WITHOUT_CLASSIFICATION	4.981519709527127E-4	DESIGN
sqlResultTypes = selectClause.getSqlResultTypes();	WITHOUT_CLASSIFICATION	0.9997710261933208	WITHOUT_CLASSIFICATION	2.289738066792782E-4	DESIGN
by default	WITHOUT_CLASSIFICATION	0.9998749673123852	WITHOUT_CLASSIFICATION	1.2503268761472657E-4	DESIGN
This is now handled earlier in this method.	WITHOUT_CLASSIFICATION	0.9679430741427674	WITHOUT_CLASSIFICATION	0.03205692585723263	DESIGN
-- Loader implementation --	WITHOUT_CLASSIFICATION	0.9995515374762068	WITHOUT_CLASSIFICATION	4.4846252379308817E-4	DESIGN
-- Loader overrides --	WITHOUT_CLASSIFICATION	0.999335916148031	WITHOUT_CLASSIFICATION	6.640838519690527E-4	DESIGN
(NOT (IS_NULL a b) ) => (IS_NOT_NULL a b)	WITHOUT_CLASSIFICATION	0.9998210565658173	WITHOUT_CLASSIFICATION	1.7894343418261815E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.999956046104063	WITHOUT_CLASSIFICATION	4.395389593691847E-5	DESIGN
meant to handle dynamic instantiation queries...	WITHOUT_CLASSIFICATION	0.9992998907329438	WITHOUT_CLASSIFICATION	7.001092670562926E-4	DESIGN
--- Query translator methods ---	WITHOUT_CLASSIFICATION	0.9995968063876488	WITHOUT_CLASSIFICATION	4.031936123512177E-4	DESIGN
-- Implementation private methods --	WITHOUT_CLASSIFICATION	0.9982109956875083	WITHOUT_CLASSIFICATION	0.0017890043124918114	DESIGN
deduplicate unique constraints sharing the same columns this is needed by Hibernate Annotations since it creates automagically unique constraints for the user	WITHOUT_CLASSIFICATION	0.9999900513298279	WITHOUT_CLASSIFICATION	9.94867017217628E-6	DESIGN
Try to find out the name of the primary key to create it as identity if the IdentityGenerator is used	WITHOUT_CLASSIFICATION	0.9943761236410859	WITHOUT_CLASSIFICATION	0.005623876358914154	DESIGN
to support dialects that have their own identity data type	WITHOUT_CLASSIFICATION	0.9986899758508052	WITHOUT_CLASSIFICATION	0.0013100241491948055	DESIGN
Prepare the left hand side and get the data type.	WITHOUT_CLASSIFICATION	0.9999987556540063	WITHOUT_CLASSIFICATION	1.2443459937541812E-6	DESIGN
used also for generation of FK names!	WITHOUT_CLASSIFICATION	0.8561546473447512	WITHOUT_CLASSIFICATION	0.14384535265524878	DESIGN
usually useless	WITHOUT_CLASSIFICATION	0.9992065460583486	WITHOUT_CLASSIFICATION	7.934539416514558E-4	DESIGN
added this caching as I noticed that getType() is being called multiple times...	WITHOUT_CLASSIFICATION	0.9933928798911381	WITHOUT_CLASSIFICATION	0.006607120108861896	DESIGN
do not add unique constraint on DB not supporting unique and nullable columns	WITHOUT_CLASSIFICATION	0.9971992436713478	WITHOUT_CLASSIFICATION	0.002800756328652087	DESIGN
for backward compatibility, disable this:	WITHOUT_CLASSIFICATION	0.9999764963935702	WITHOUT_CLASSIFICATION	2.3503606429800838E-5	DESIGN
may be final may be final may be final	WITHOUT_CLASSIFICATION	0.9989627691028559	WITHOUT_CLASSIFICATION	0.0010372308971441987	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9990955479744595	WITHOUT_CLASSIFICATION	9.04452025540491E-4	DESIGN
may be final	WITHOUT_CLASSIFICATION	0.9990955479744595	WITHOUT_CLASSIFICATION	9.04452025540491E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9997019317192856	WITHOUT_CLASSIFICATION	2.9806828071442964E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9957226449412311	WITHOUT_CLASSIFICATION	0.004277355058768892	DESIGN
the root of the incoming property path matched one of the embedded composite identifier properties	WITHOUT_CLASSIFICATION	0.9998290271412019	WITHOUT_CLASSIFICATION	1.709728587980249E-4	DESIGN
ignore it...	WITHOUT_CLASSIFICATION	0.9986299850580452	WITHOUT_CLASSIFICATION	0.001370014941954755	DESIGN
flat recursive algorithm	WITHOUT_CLASSIFICATION	0.9969157475716692	WITHOUT_CLASSIFICATION	0.0030842524283308023	DESIGN
an identifier mapper => getKey will be included in the getNonDuplicatedPropertyIterator() and checked later, so it needs to be excluded	WITHOUT_CLASSIFICATION	0.9996802419192785	WITHOUT_CLASSIFICATION	3.1975808072141535E-4	DESIGN
if the hibernate-mapping did not specify a schema/catalog, use the defaults specified by properties - but note that if the schema/catalog were specified in hibernate-mapping, or as params, they will already be initialized and will override the values set here (they are in identifierGeneratorProperties)	WITHOUT_CLASSIFICATION	0.9983025326828975	WITHOUT_CLASSIFICATION	0.0016974673171024758	DESIGN
pass the entity-name, if not a collection-id	WITHOUT_CLASSIFICATION	0.9998177090001915	WITHOUT_CLASSIFICATION	1.8229099980861482E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9997019317192856	WITHOUT_CLASSIFICATION	2.9806828071442964E-4	DESIGN
Primary key constraint	WITHOUT_CLASSIFICATION	0.9957226449412311	WITHOUT_CLASSIFICATION	0.004277355058768892	DESIGN
pass the column name (a generated id almost always has a single column)	WITHOUT_CLASSIFICATION	0.9999827308193155	WITHOUT_CLASSIFICATION	1.7269180684385453E-5	DESIGN
needed to satisfy KeyValue	WITHOUT_CLASSIFICATION	0.9992230369728337	WITHOUT_CLASSIFICATION	7.769630271662267E-4	DESIGN
empty means no scoping	WITHOUT_CLASSIFICATION	0.999700831784829	WITHOUT_CLASSIFICATION	2.991682151709282E-4	DESIGN
index should be last column listed	WITHOUT_CLASSIFICATION	0.9999608259898694	WITHOUT_CLASSIFICATION	3.917401013072172E-5	DESIGN
if it is a formula index, use the element columns in the PK	WITHOUT_CLASSIFICATION	0.9989698878416391	WITHOUT_CLASSIFICATION	0.0010301121583609846	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns	WITHOUT_CLASSIFICATION	0.9936750895037786	WITHOUT_CLASSIFICATION	0.006324910496221363	DESIGN
ArrayList list = new ArrayList();list.addAll( getKey().getConstraintColumns() );list.addAll( getIndex().getConstraintColumns() );getCollectionTable().createUniqueKey(list);	WITHOUT_CLASSIFICATION	0.9999416448210282	WITHOUT_CLASSIFICATION	5.8355178971775835E-5	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993742571836408	WITHOUT_CLASSIFICATION	6.257428163592414E-4	DESIGN
no foreign key element of for a one-to-many	WITHOUT_CLASSIFICATION	0.9993917651541131	WITHOUT_CLASSIFICATION	6.082348458868801E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.957954524299057	DESIGN	0.04204547570094287	WITHOUT_CLASSIFICATION
the case of a foreign key to something other than the pk is handled in createPropertyRefConstraints	WITHOUT_CLASSIFICATION	0.9997043038694674	WITHOUT_CLASSIFICATION	2.956961305326004E-4	DESIGN
TODO: we could just return all false...	WITHOUT_CLASSIFICATION	0.957954524299057	DESIGN	0.04204547570094287	WITHOUT_CLASSIFICATION
if the property mapping consists of all formulas, make it non-updateable	WITHOUT_CLASSIFICATION	0.9998048918835876	WITHOUT_CLASSIFICATION	1.9510811641240182E-4	DESIGN
columnUpdateability.length==0 ||	WITHOUT_CLASSIFICATION	0.9997225387448148	WITHOUT_CLASSIFICATION	2.774612551852271E-4	DESIGN
if the property mapping consists of all formulas, make it insertable	WITHOUT_CLASSIFICATION	0.9998048918835876	WITHOUT_CLASSIFICATION	1.9510811641240182E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998073545491182	WITHOUT_CLASSIFICATION	1.9264545088182097E-4	DESIGN
expected type is intrinsic here...	WITHOUT_CLASSIFICATION	0.9995352192202981	WITHOUT_CLASSIFICATION	4.647807797019972E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993742571836408	WITHOUT_CLASSIFICATION	6.257428163592414E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993742571836408	WITHOUT_CLASSIFICATION	6.257428163592414E-4	DESIGN
return memberPersister.getPropertyType(propertyName);	WITHOUT_CLASSIFICATION	0.999633931274544	WITHOUT_CLASSIFICATION	3.660687254558717E-4	DESIGN
return memberPersister.toColumns(alias, propertyName);	WITHOUT_CLASSIFICATION	0.9996351513228711	WITHOUT_CLASSIFICATION	3.648486771289445E-4	DESIGN
return memberPersister.getType();	WITHOUT_CLASSIFICATION	0.999633931274544	WITHOUT_CLASSIFICATION	3.660687254558717E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9993791063341732	WITHOUT_CLASSIFICATION	6.208936658267874E-4	DESIGN
return !isOneToMany();	WITHOUT_CLASSIFICATION	0.999414705310449	WITHOUT_CLASSIFICATION	5.852946895509675E-4	DESIGN
instanceof AssociationType;	WITHOUT_CLASSIFICATION	0.9955747902987732	WITHOUT_CLASSIFICATION	0.0044252097012269	DESIGN
we need to determine the best way to know that two joinables represent a single many-to-many...	WITHOUT_CLASSIFICATION	0.6628192767470893	WITHOUT_CLASSIFICATION	0.3371807232529107	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997827425544288	WITHOUT_CLASSIFICATION	2.1725744557125345E-4	DESIGN
public boolean isSubselectLoadable();	WITHOUT_CLASSIFICATION	0.9999149909175535	WITHOUT_CLASSIFICATION	8.50090824464854E-5	DESIGN
KEY	WITHOUT_CLASSIFICATION	0.9996333800739543	WITHOUT_CLASSIFICATION	3.666199260456871E-4	DESIGN
columns	WITHOUT_CLASSIFICATION	0.9997819106963228	WITHOUT_CLASSIFICATION	2.1808930367728482E-4	DESIGN
SQL statements	WITHOUT_CLASSIFICATION	0.9998142861863192	WITHOUT_CLASSIFICATION	1.8571381368082072E-4	DESIGN
extra information about the element type	WITHOUT_CLASSIFICATION	0.9988103101010497	WITHOUT_CLASSIFICATION	0.0011896898989503832	DESIGN
types	WITHOUT_CLASSIFICATION	0.9995853340338562	WITHOUT_CLASSIFICATION	4.146659661438277E-4	DESIGN
custom sql	WITHOUT_CLASSIFICATION	0.9999694485327189	WITHOUT_CLASSIFICATION	3.0551467281156985E-5	DESIGN
private final String unquotedIdentifierColumnName;	WITHOUT_CLASSIFICATION	0.9993255923387487	WITHOUT_CLASSIFICATION	6.744076612513694E-4	DESIGN
dynamic filters specifically for many-to-many inside the collection	WITHOUT_CLASSIFICATION	0.9995757528272774	WITHOUT_CLASSIFICATION	4.242471727227009E-4	DESIGN
dynamic filters for the collection	WITHOUT_CLASSIFICATION	0.9994166576944834	WITHOUT_CLASSIFICATION	5.833423055166415E-4	DESIGN
NativeSQL: collect key column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999496542049129	WITHOUT_CLASSIFICATION	5.034579508711823E-5	DESIGN
unquotedKeyColumnNames = StringHelper.unQuote(keyColumnAliases);	WITHOUT_CLASSIFICATION	0.9997710261933208	WITHOUT_CLASSIFICATION	2.289738066792782E-4	DESIGN
ELEMENT	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
NativeSQL: collect element column and auto-aliases	WITHOUT_CLASSIFICATION	0.9998147397415746	WITHOUT_CLASSIFICATION	1.8526025842522035E-4	DESIGN
INDEX AND ROW SELECT	WITHOUT_CLASSIFICATION	0.9996864003680376	WITHOUT_CLASSIFICATION	3.135996319623991E-4	DESIGN
NativeSQL: collect index column and auto-aliases	WITHOUT_CLASSIFICATION	0.9999916786159195	WITHOUT_CLASSIFICATION	8.321384080484333E-6	DESIGN
unquotedIdentifierColumnName = identifierColumnAlias;	WITHOUT_CLASSIFICATION	0.9997710261933208	WITHOUT_CLASSIFICATION	2.289738066792782E-4	DESIGN
unquotedIdentifierColumnName = null;	WITHOUT_CLASSIFICATION	0.9990208418735073	WITHOUT_CLASSIFICATION	9.791581264927706E-4	DESIGN
GENERATE THE SQL:	WITHOUT_CLASSIFICATION	0.9995637479329081	WITHOUT_CLASSIFICATION	4.3625206709184763E-4	DESIGN
for non-arrays, we don't need to know the element class elementType.returnedClass();	WITHOUT_CLASSIFICATION	0.9702080395001197	WITHOUT_CLASSIFICATION	0.02979196049988037	DESIGN
not all classpersisters implement PropertyMapping!	WITHOUT_CLASSIFICATION	0.9826295913426215	WITHOUT_CLASSIFICATION	0.017370408657378468	DESIGN
Handle any filters applied to this collection	WITHOUT_CLASSIFICATION	0.9690226398083369	WITHOUT_CLASSIFICATION	0.030977360191663156	DESIGN
Handle any filters applied to this collection for many-to-many	WITHOUT_CLASSIFICATION	0.9684623717105688	WITHOUT_CLASSIFICATION	0.03153762828943118	DESIGN
if there is a user-specified loader, return that TODO: filters!?	WITHOUT_CLASSIFICATION	0.7602444956960278	WITHOUT_CLASSIFICATION	0.23975550430397222	DESIGN
Take care of any entities that might have been evicted!	WITHOUT_CLASSIFICATION	0.9963850947909089	WITHOUT_CLASSIFICATION	0.0036149052090912646	DESIGN
strip leading ','	WITHOUT_CLASSIFICATION	0.9997827425544288	WITHOUT_CLASSIFICATION	2.1725744557125345E-4	DESIGN
Run a subquery loader	WITHOUT_CLASSIFICATION	0.9981507478795425	WITHOUT_CLASSIFICATION	0.0018492521204574964	DESIGN
needed by arrays	WITHOUT_CLASSIFICATION	0.9995413136396827	WITHOUT_CLASSIFICATION	4.586863603172537E-4	DESIGN
TODO: something with formulas...	WITHOUT_CLASSIFICATION	0.7270773179666276	DESIGN	0.2729226820333724	WITHOUT_CLASSIFICATION
an assertion	WITHOUT_CLASSIFICATION	0.9996760667825945	WITHOUT_CLASSIFICATION	3.2393321740548537E-4	DESIGN
Remove all the old entries	WITHOUT_CLASSIFICATION	0.9999049241741083	WITHOUT_CLASSIFICATION	9.507582589179712E-5	DESIGN
create all the new entries	WITHOUT_CLASSIFICATION	0.999935204113095	WITHOUT_CLASSIFICATION	6.47958869049418E-5	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9993791063341732	WITHOUT_CLASSIFICATION	6.208936658267874E-4	DESIGN
&& !indexIsFormula	WITHOUT_CLASSIFICATION	0.9993791063341732	WITHOUT_CLASSIFICATION	6.208936658267874E-4	DESIGN
delete all the deleted entries	WITHOUT_CLASSIFICATION	0.9999755587896615	WITHOUT_CLASSIFICATION	2.4441210338503093E-5	DESIGN
insert all the new entries	WITHOUT_CLASSIFICATION	0.9999657677727927	WITHOUT_CLASSIFICATION	3.4232227207351166E-5	DESIGN
==elementType ??	WITHOUT_CLASSIFICATION	0.9978201084716478	WITHOUT_CLASSIFICATION	0.0021798915283522563	DESIGN
update all the modified entries	WITHOUT_CLASSIFICATION	0.9999927432794231	WITHOUT_CLASSIFICATION	7.256720576946283E-6	DESIGN
identifier collections not supported for 1-to-many	WITHOUT_CLASSIFICATION	0.9986373246994268	WITHOUT_CLASSIFICATION	0.0013626753005732384	DESIGN
update removed rows fks to null	WITHOUT_CLASSIFICATION	0.9928408422800628	WITHOUT_CLASSIFICATION	0.00715915771993731	DESIGN
will still be issued when it used to be null	WITHOUT_CLASSIFICATION	0.9281550973628022	WITHOUT_CLASSIFICATION	0.07184490263719776	DESIGN
now update all changed or added rows fks	WITHOUT_CLASSIFICATION	0.9999518483356705	WITHOUT_CLASSIFICATION	4.81516643295783E-5	DESIGN
buf.append( selectFragment( lhsAlias, "" ) )ignore suffix for collection columns!	WITHOUT_CLASSIFICATION	0.9993618570059991	WITHOUT_CLASSIFICATION	6.381429940009244E-4	DESIGN
use suffix for the entity columns	WITHOUT_CLASSIFICATION	0.9992000180953892	WITHOUT_CLASSIFICATION	7.99981904610786E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996284096978189	WITHOUT_CLASSIFICATION	3.715903021810745E-4	DESIGN
private final String rootTableName;	WITHOUT_CLASSIFICATION	0.9993255923387487	WITHOUT_CLASSIFICATION	6.744076612513694E-4	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
Custom SQL	WITHOUT_CLASSIFICATION	0.9997019317192856	WITHOUT_CLASSIFICATION	2.9806828071442964E-4	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996284096978189	WITHOUT_CLASSIFICATION	3.715903021810745E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997153986183351	WITHOUT_CLASSIFICATION	2.8460138166481433E-4	DESIGN
This could also just be true all the time...	WITHOUT_CLASSIFICATION	0.986271209504845	WITHOUT_CLASSIFICATION	0.013728790495154903	DESIGN
chop the last union (all)	WITHOUT_CLASSIFICATION	0.9998101875431764	WITHOUT_CLASSIFICATION	1.8981245682362358E-4	DESIGN
TODO: check this....	WITHOUT_CLASSIFICATION	0.7200330130035496	WITHOUT_CLASSIFICATION	0.27996698699645045	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9993805702873663	WITHOUT_CLASSIFICATION	6.194297126337143E-4	DESIGN
the closure of all properties in the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9998427440484059	WITHOUT_CLASSIFICATION	1.5725595159417707E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9822023375304956	WITHOUT_CLASSIFICATION	0.017797662469504455	DESIGN
subclass discrimination works by assigning particular values to certain combinations of null primary key values in the outer join using an SQL CASE	WITHOUT_CLASSIFICATION	0.9999474571806005	WITHOUT_CLASSIFICATION	5.2542819399484156E-5	DESIGN
MULTITABLES	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998683667731649	WITHOUT_CLASSIFICATION	1.3163322683501058E-4	DESIGN
subclass closure properties	WITHOUT_CLASSIFICATION	0.998564711687179	WITHOUT_CLASSIFICATION	0.0014352883128211245	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
( (Column) model.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997376844892346	WITHOUT_CLASSIFICATION	2.6231551076536804E-4	DESIGN
( (Column) sc.getTable().getPrimaryKey().getColumnIterator().next() ).getName();	WITHOUT_CLASSIFICATION	0.9997376844892346	WITHOUT_CLASSIFICATION	2.6231551076536804E-4	DESIGN
don't need subclass tables, because they can't appear in conditions	WITHOUT_CLASSIFICATION	0.9608752393967535	WITHOUT_CLASSIFICATION	0.039124760603246496	DESIGN
special case where we need to force incloude all subclass joins	WITHOUT_CLASSIFICATION	0.9948342817093084	WITHOUT_CLASSIFICATION	0.005165718290691615	DESIGN
the class hierarchy structure	WITHOUT_CLASSIFICATION	0.9996284096978189	WITHOUT_CLASSIFICATION	3.715903021810745E-4	DESIGN
properties of this class, including inherited properties	WITHOUT_CLASSIFICATION	0.9993805702873663	WITHOUT_CLASSIFICATION	6.194297126337143E-4	DESIGN
the closure of all columns used by the entire hierarchy including subclasses and superclasses of this class	WITHOUT_CLASSIFICATION	0.9822023375304956	WITHOUT_CLASSIFICATION	0.017797662469504455	DESIGN
get em on the second pass!	WITHOUT_CLASSIFICATION	0.9989496289480295	WITHOUT_CLASSIFICATION	0.0010503710519704913	DESIGN
now look up the object we are really interested in! (this lets us correctly handle proxies and multi-row or multi-column queries)	WITHOUT_CLASSIFICATION	0.9994329402484831	WITHOUT_CLASSIFICATION	5.670597515169169E-4	DESIGN
discriminator column	WITHOUT_CLASSIFICATION	0.9999087622205178	WITHOUT_CLASSIFICATION	9.123777948217495E-5	DESIGN
INITIALIZATION:	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
private final Map propertyTableNumbersByName = new HashMap();	WITHOUT_CLASSIFICATION	0.9997097480754542	WITHOUT_CLASSIFICATION	2.9025192454578167E-4	DESIGN
CLASS + TABLE	WITHOUT_CLASSIFICATION	0.9999326173463804	WITHOUT_CLASSIFICATION	6.738265361959622E-5	DESIGN
DISCRIMINATOR	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996061188470382	WITHOUT_CLASSIFICATION	3.938811529617722E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
Execute the SQL:	WITHOUT_CLASSIFICATION	0.9997153986183351	WITHOUT_CLASSIFICATION	2.8460138166481433E-4	DESIGN
JOINS	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
propertyTableNumbersByName.put( prop.getName(), join );	WITHOUT_CLASSIFICATION	0.9998807954793152	WITHOUT_CLASSIFICATION	1.1920452068478798E-4	DESIGN
Access cached SQL	WITHOUT_CLASSIFICATION	0.9998837881648968	WITHOUT_CLASSIFICATION	1.1621183510326863E-4	DESIGN
figure out which tables need to be fetched	WITHOUT_CLASSIFICATION	0.9984818503900882	WITHOUT_CLASSIFICATION	0.0015181496099117878	DESIGN
figure out which columns are needed	WITHOUT_CLASSIFICATION	0.9998842745527907	WITHOUT_CLASSIFICATION	1.157254472092846E-4	DESIGN
figure out which formulas are needed	WITHOUT_CLASSIFICATION	0.9997893447044917	WITHOUT_CLASSIFICATION	2.1065529550832486E-4	DESIGN
render the SQL	WITHOUT_CLASSIFICATION	0.9995891906358881	WITHOUT_CLASSIFICATION	4.1080936411192197E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is Tuplizer-centric ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998073545491182	WITHOUT_CLASSIFICATION	1.9264545088182097E-4	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9894308767055471	WITHOUT_CLASSIFICATION	0.010569123294452925	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
The optional SQL string defined in the where attribute	WITHOUT_CLASSIFICATION	0.9999957894139614	WITHOUT_CLASSIFICATION	4.210586038628977E-6	DESIGN
information about lazy properties of this class	WITHOUT_CLASSIFICATION	0.998883040681684	WITHOUT_CLASSIFICATION	0.0011169593183161031	DESIGN
information about all properties in class hierarchy	WITHOUT_CLASSIFICATION	0.9998677656888763	WITHOUT_CLASSIFICATION	1.3223431112371548E-4	DESIGN
information about all columns/formulas in class hierarchy	WITHOUT_CLASSIFICATION	0.9995175738641981	WITHOUT_CLASSIFICATION	4.8242613580186443E-4	DESIGN
dynamic filters attached to the class-level	WITHOUT_CLASSIFICATION	0.9997382753257443	WITHOUT_CLASSIFICATION	2.6172467425563675E-4	DESIGN
SQL strings	WITHOUT_CLASSIFICATION	0.9996126082385859	WITHOUT_CLASSIFICATION	3.8739176141411893E-4	DESIGN
for objects that came in via update()	WITHOUT_CLASSIFICATION	0.9999364738574367	WITHOUT_CLASSIFICATION	6.352614256335809E-5	DESIGN
PROPERTIES	WITHOUT_CLASSIFICATION	0.9996061188470382	WITHOUT_CLASSIFICATION	3.938811529617722E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
IDENTIFIER	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
VERSION	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
WHERE STRING	WITHOUT_CLASSIFICATION	0.9999047573326338	WITHOUT_CLASSIFICATION	9.52426673662436E-5	DESIGN
SUBCLASS PROPERTY CLOSURE	WITHOUT_CLASSIFICATION	0.9991823532428039	WITHOUT_CLASSIFICATION	8.176467571961786E-4	DESIGN
before add :-)	WITHOUT_CLASSIFICATION	0.9997943219960546	WITHOUT_CLASSIFICATION	2.0567800394553413E-4	DESIGN
Handle any filters applied to the class level	WITHOUT_CLASSIFICATION	0.9965199114209475	WITHOUT_CLASSIFICATION	0.003480088579052527	DESIGN
only one-to-one is lazy fetched	WITHOUT_CLASSIFICATION	0.9998387522058128	WITHOUT_CLASSIFICATION	1.612477941872063E-4	DESIGN
note early exit here:	WITHOUT_CLASSIFICATION	0.9996493619032595	WITHOUT_CLASSIFICATION	3.506380967405223E-4	DESIGN
object have been loaded with setReadOnly(true); HHH-2236	WITHOUT_CLASSIFICATION	0.9994363653014767	WITHOUT_CLASSIFICATION	5.636346985232722E-4	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass!	WITHOUT_CLASSIFICATION	0.9991557595263056	WITHOUT_CLASSIFICATION	8.442404736944438E-4	DESIGN
strip leading ", "	WITHOUT_CLASSIFICATION	0.9998835959276097	WITHOUT_CLASSIFICATION	1.1640407239027901E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999695769321675	WITHOUT_CLASSIFICATION	3.04230678324187E-5	DESIGN
otherwise return the "hydrated" state (ie. associations are not resolved)	WITHOUT_CLASSIFICATION	0.9988000415036348	WITHOUT_CLASSIFICATION	0.0011999584963652593	DESIGN
null owner ok??	WITHOUT_CLASSIFICATION	0.9998589956240702	WITHOUT_CLASSIFICATION	1.4100437592976572E-4	DESIGN
null sql means that the only lazy properties are shared PK one-to-one associations which are handled differently in the Type#nullSafeGet code...	WITHOUT_CLASSIFICATION	0.9999947724100655	WITHOUT_CLASSIFICATION	5.227589934552477E-6	DESIGN
Create a new FROM node for the referenced class.	WITHOUT_CLASSIFICATION	0.9999375745194379	WITHOUT_CLASSIFICATION	6.242548056210934E-5	DESIGN
the difficulty here is exactly what do we update in order to force the version to be incremented in the db...	WITHOUT_CLASSIFICATION	0.5902324067060898	WITHOUT_CLASSIFICATION	0.40976759329391027	DESIGN
performance op to avoid the array search	WITHOUT_CLASSIFICATION	0.9983498040952158	WITHOUT_CLASSIFICATION	0.001650195904784246	DESIGN
properly handle property-ref-based associations	WITHOUT_CLASSIFICATION	0.9971492469201364	WITHOUT_CLASSIFICATION	0.0028507530798635504	DESIGN
Enable for HHH-440, which we don't like:	WITHOUT_CLASSIFICATION	0.9996984142707784	WITHOUT_CLASSIFICATION	3.0158572922154653E-4	DESIGN
ALIASES	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
aliases named identifier ( alias.idname )	WITHOUT_CLASSIFICATION	0.9998731152097848	WITHOUT_CLASSIFICATION	1.2688479021511864E-4	DESIGN
aliases for composite-id's	WITHOUT_CLASSIFICATION	0.9993343692091088	WITHOUT_CLASSIFICATION	6.656307908911285E-4	DESIGN
Fetch embedded identifiers propertynames from the "virtual" identifier component	WITHOUT_CLASSIFICATION	0.9998242209359626	WITHOUT_CLASSIFICATION	1.757790640374617E-4	DESIGN
embedded composite ids ( alias.idname1, alias.idname2 )	WITHOUT_CLASSIFICATION	0.9986425073356933	WITHOUT_CLASSIFICATION	0.001357492664306821	DESIGN
TODO: skip formulas?	WITHOUT_CLASSIFICATION	0.583441081818575	WITHOUT_CLASSIFICATION	0.4165589181814249	DESIGN
don't need filters for the static loaders	WITHOUT_CLASSIFICATION	0.9924173889425936	WITHOUT_CLASSIFICATION	0.00758261105740648	DESIGN
do two passes, for collection property-ref!	WITHOUT_CLASSIFICATION	0.9971397433034723	WITHOUT_CLASSIFICATION	0.0028602566965277914	DESIGN
select the correct row by either pk or rowid	WITHOUT_CLASSIFICATION	0.9999227569463108	WITHOUT_CLASSIFICATION	7.72430536891576E-5	DESIGN
TODO: eventually, rowIdName[j]	WITHOUT_CLASSIFICATION	0.6709992394671579	DESIGN	0.32900076053284216	WITHOUT_CLASSIFICATION
this is a property of the table, which we are updating	WITHOUT_CLASSIFICATION	0.9921208966939997	WITHOUT_CLASSIFICATION	0.007879103306000331	DESIGN
special shortcut for id properties, skip the join! this must only occur at the _end_ of a path expression	WITHOUT_CLASSIFICATION	0.9996351825938679	WITHOUT_CLASSIFICATION	3.6481740613210736E-4	DESIGN
we are using "all" or "dirty" property-based optimistic locking	WITHOUT_CLASSIFICATION	0.999864762635263	WITHOUT_CLASSIFICATION	1.352373647368885E-4	DESIGN
nothing to do; even if the operand is a parameter, no way we could infer an appropriate expected type here	WITHOUT_CLASSIFICATION	0.7509946498918061	WITHOUT_CLASSIFICATION	0.24900535010819397	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9762714387574737	WITHOUT_CLASSIFICATION	0.023728561242526244	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998977299288037	WITHOUT_CLASSIFICATION	1.0227007119623187E-4	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997283945153393	WITHOUT_CLASSIFICATION	2.7160548466069614E-4	DESIGN
more specifically : "? [op] datetime" 1) if the operator is MINUS, the param needs to be of some datetime type 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.98092906829911	WITHOUT_CLASSIFICATION	0.019070931700890078	DESIGN
add normal properties	WITHOUT_CLASSIFICATION	0.9998977299288037	WITHOUT_CLASSIFICATION	1.0227007119623187E-4	DESIGN
this property belongs on the table and is to be inserted	WITHOUT_CLASSIFICATION	0.9762714387574737	WITHOUT_CLASSIFICATION	0.023728561242526244	DESIGN
add the discriminator	WITHOUT_CLASSIFICATION	0.9997283945153393	WITHOUT_CLASSIFICATION	2.7160548466069614E-4	DESIGN
add the primary key	WITHOUT_CLASSIFICATION	0.9999336510401623	WITHOUT_CLASSIFICATION	6.63489598376696E-5	DESIGN
delegate already handles PK columns	WITHOUT_CLASSIFICATION	0.9998247723921785	WITHOUT_CLASSIFICATION	1.752276078214638E-4	DESIGN
we can't batch joined inserts, especially not if it is an identity insert; nor can we batch statements where the expectation is based on an output param	WITHOUT_CLASSIFICATION	0.9999568519630784	WITHOUT_CLASSIFICATION	4.314803692166627E-5	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998586102974881	WITHOUT_CLASSIFICATION	1.413897025119323E-4	DESIGN
Write the values of fields onto the prepared statement - we MUST use the state at the time the insert was issued (cos of foreign key constraints). Not necessarily the object's current state	WITHOUT_CLASSIFICATION	0.998583203519604	WITHOUT_CLASSIFICATION	0.0014167964803959618	DESIGN
TODO : shouldnt inserts be Expectations.NONE?	WITHOUT_CLASSIFICATION	0.5044966123538607	DESIGN	0.4955033876461392	WITHOUT_CLASSIFICATION
don't bother trying to update, we know there is no row there yet	WITHOUT_CLASSIFICATION	0.9975947107586989	WITHOUT_CLASSIFICATION	0.0024052892413010413	DESIGN
if all fields are null, we might need to delete existing row	WITHOUT_CLASSIFICATION	0.9995296181159905	WITHOUT_CLASSIFICATION	4.7038188400946325E-4	DESIGN
there is probably a row there, so try to update if no rows were updated, we will find out	WITHOUT_CLASSIFICATION	0.9958645671000236	WITHOUT_CLASSIFICATION	0.0041354328999764255	DESIGN
note: updates to joined tables can't be batched...	WITHOUT_CLASSIFICATION	0.9995010946528297	WITHOUT_CLASSIFICATION	4.989053471704542E-4	DESIGN
starting index	WITHOUT_CLASSIFICATION	0.999949967766204	WITHOUT_CLASSIFICATION	5.003223379591547E-5	DESIGN
Now write the values of fields onto the prepared statement	WITHOUT_CLASSIFICATION	0.9999012186855489	WITHOUT_CLASSIFICATION	9.878131445108968E-5	DESIGN
Write any appropriate versioning conditional parameters	WITHOUT_CLASSIFICATION	0.9994936763083813	WITHOUT_CLASSIFICATION	5.063236916186832E-4	DESIGN
Render the SQL query	WITHOUT_CLASSIFICATION	0.9998586102974881	WITHOUT_CLASSIFICATION	1.413897025119323E-4	DESIGN
Do the key. The key is immutable so we can use the _current_ object state - not necessarily the state at the time the delete was issued	WITHOUT_CLASSIFICATION	0.9997663939198667	WITHOUT_CLASSIFICATION	2.3360608013331025E-4	DESIGN
We should use the _current_ object state (ie. after any updates that occurred during flush)	WITHOUT_CLASSIFICATION	0.998625914669367	WITHOUT_CLASSIFICATION	0.0013740853306329955	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9926510401981008	WITHOUT_CLASSIFICATION	0.007348959801899208	DESIGN
note: dirtyFields==null means we had no snapshot, and we couldn't get one using select-before-update oldFields==null just means we had no snapshot to begin with (we might have used select-before-update to get the dirtyFields)	WITHOUT_CLASSIFICATION	0.9869605834772611	WITHOUT_CLASSIFICATION	0.013039416522738812	DESIGN
more specifically : "datetime [op] ?" 1) if the operator is MINUS, we really cannot determine the expected type as either another datetime or numeric would be valid 2) if the operator is PLUS, the param needs to be of some numeric type	WITHOUT_CLASSIFICATION	0.9996629788109691	WITHOUT_CLASSIFICATION	3.3702118903077824E-4	DESIGN
For the case of dynamic-update="true", we need to generate the UPDATE SQL	WITHOUT_CLASSIFICATION	0.9999619719045582	WITHOUT_CLASSIFICATION	3.802809544193379E-5	DESIGN
don't need to check laziness (dirty checking algorithm handles that)	WITHOUT_CLASSIFICATION	0.7343593817715869	WITHOUT_CLASSIFICATION	0.2656406182284131	DESIGN
For the case of dynamic-update="false", or no snapshot, we use the static SQL	WITHOUT_CLASSIFICATION	0.9999497984051156	WITHOUT_CLASSIFICATION	5.020159488449771E-5	DESIGN
if not "get", then try "is"	WITHOUT_CLASSIFICATION	0.9987524150961489	WITHOUT_CLASSIFICATION	0.0012475849038511512	DESIGN
Now update only the tables with dirty properties (and the table with the version number)	WITHOUT_CLASSIFICATION	0.9999918029587094	WITHOUT_CLASSIFICATION	8.197041290652197E-6	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999619807016691	WITHOUT_CLASSIFICATION	3.8019298330913646E-5	DESIGN
For the case of dynamic-insert="true", we need to generate the INSERT SQL	WITHOUT_CLASSIFICATION	0.9999619807016691	WITHOUT_CLASSIFICATION	3.8019298330913646E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999907240966813	WITHOUT_CLASSIFICATION	9.275903318696958E-5	DESIGN
For the case of dynamic-insert="false", use the static SQL	WITHOUT_CLASSIFICATION	0.999907240966813	WITHOUT_CLASSIFICATION	9.275903318696958E-5	DESIGN
not supported	WITHOUT_CLASSIFICATION	0.9984900419927498	WITHOUT_CLASSIFICATION	0.0015099580072501899	DESIGN
this property belongs to the table and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.9926510401981008	WITHOUT_CLASSIFICATION	0.007348959801899208	DESIGN
we need to utilize dynamic delete statements	WITHOUT_CLASSIFICATION	0.9994924112715609	WITHOUT_CLASSIFICATION	5.075887284390753E-4	DESIGN
otherwise, utilize the static delete statements	WITHOUT_CLASSIFICATION	0.9998665960133754	WITHOUT_CLASSIFICATION	1.334039866245804E-4	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9973327229496437	WITHOUT_CLASSIFICATION	0.0026672770503562166	DESIGN
just a performance opt!	WITHOUT_CLASSIFICATION	0.9973327229496437	WITHOUT_CLASSIFICATION	0.0026672770503562166	DESIGN
all joins join to the pk of the driving table	WITHOUT_CLASSIFICATION	0.9999789437608859	WITHOUT_CLASSIFICATION	2.1056239114028744E-5	DESIGN
notice that we skip the first table; it is the driving table!	WITHOUT_CLASSIFICATION	0.9997980740865317	WITHOUT_CLASSIFICATION	2.0192591346828692E-4	DESIGN
we can inner join to superclass tables (the row MUST be there) we can never inner join to subclass tables	WITHOUT_CLASSIFICATION	0.9996374603685105	WITHOUT_CLASSIFICATION	3.6253963148945143E-4	DESIGN
skip the driving table	WITHOUT_CLASSIFICATION	0.9998929455436764	WITHOUT_CLASSIFICATION	1.0705445632363198E-4	DESIGN
get 'em in the right order (not that it really matters)	WITHOUT_CLASSIFICATION	0.8591358875901528	WITHOUT_CLASSIFICATION	0.14086411240984714	DESIGN
here, we work under the following assumptions: ------------ valid cases -------------------------------------- 1) datetime + {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) 2) datetime - datetime : always results in a DOUBLE 3) datetime - {something other than datetime} : always results in a datetime ( db will catch invalid conversions ) ------------ invalid cases ------------------------------------ 4) datetime + datetime 5) {something other than datetime} - datetime 6) datetime {any type} 7) datetime / {any type} 8) {any type} / datetime doing so allows us to properly handle parameters as either the left or right side here in the majority of cases	WITHOUT_CLASSIFICATION	0.9999944127482191	WITHOUT_CLASSIFICATION	5.587251780977064E-6	DESIGN
render the where and from parts	WITHOUT_CLASSIFICATION	0.9994090934565966	WITHOUT_CLASSIFICATION	5.909065434033936E-4	DESIGN
we could regerate this inside each called method!	WITHOUT_CLASSIFICATION	0.8283432176284286	WITHOUT_CLASSIFICATION	0.17165678237157145	DESIGN
now render the joins	WITHOUT_CLASSIFICATION	0.9995127516845597	WITHOUT_CLASSIFICATION	4.872483154404389E-4	DESIGN
This will add the new from element to the origin.	WITHOUT_CLASSIFICATION	0.9988457544019189	WITHOUT_CLASSIFICATION	0.0011542455980810976	DESIGN
now render the select clause	WITHOUT_CLASSIFICATION	0.9998203415494955	WITHOUT_CLASSIFICATION	1.7965845050449693E-4	DESIGN
now tie it all together	WITHOUT_CLASSIFICATION	0.9997520725790886	WITHOUT_CLASSIFICATION	2.479274209114473E-4	DESIGN
insert/update/delete SQL	WITHOUT_CLASSIFICATION	0.9993830493827981	WITHOUT_CLASSIFICATION	6.169506172020087E-4	DESIGN
select SQL	WITHOUT_CLASSIFICATION	0.9998829279058521	WITHOUT_CLASSIFICATION	1.1707209414795941E-4	DESIGN
no need to check laziness, dirty checking handles that	WITHOUT_CLASSIFICATION	0.9567954008557911	WITHOUT_CLASSIFICATION	0.04320459914420898	DESIGN
Fully resolve the map reference, create implicit joins.	WITHOUT_CLASSIFICATION	0.998690676835558	WITHOUT_CLASSIFICATION	0.001309323164442047	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994293969293482	WITHOUT_CLASSIFICATION	0.005706030706518011	DESIGN
The basic implementation is to simply use the node's text	WITHOUT_CLASSIFICATION	0.9999840869031579	WITHOUT_CLASSIFICATION	1.59130968421567E-5	DESIGN
for dialects which are known to not support ANSI-SQL row-value-constructor syntax, we should mutate the tree.	WITHOUT_CLASSIFICATION	0.9891680038542169	WITHOUT_CLASSIFICATION	0.01083199614578304	DESIGN
Due to the complexity in initializing the SelectClause, do not generate one here. If it is not found; simply return null... Also, do not cache since it gets generated well after we are created.	WITHOUT_CLASSIFICATION	0.9786012473057633	WITHOUT_CLASSIFICATION	0.02139875269423675	DESIGN
check the version unsaved-value, if appropriate	WITHOUT_CLASSIFICATION	0.999958022434086	WITHOUT_CLASSIFICATION	4.197756591392058E-5	DESIGN
let this take precedence if defined, since it works for assigned identifiers	WITHOUT_CLASSIFICATION	0.9972237266777262	WITHOUT_CLASSIFICATION	0.002776273322273808	DESIGN
check the id unsaved-value	WITHOUT_CLASSIFICATION	0.9998824617825942	WITHOUT_CLASSIFICATION	1.1753821740580683E-4	DESIGN
check to see if it is in the second-level cache	WITHOUT_CLASSIFICATION	0.9996983353986856	WITHOUT_CLASSIFICATION	3.016646013144421E-4	DESIGN
/	WITHOUT_CLASSIFICATION	0.999789068234426	WITHOUT_CLASSIFICATION	2.1093176557391267E-4	DESIGN
For property references generate <tablealias>.<columnname> as <projectionalias>	WITHOUT_CLASSIFICATION	0.9998972845484041	WITHOUT_CLASSIFICATION	1.0271545159590791E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
if there is no resulting row, return null	WITHOUT_CLASSIFICATION	0.9999695769321675	WITHOUT_CLASSIFICATION	3.04230678324187E-5	DESIGN
force immediate execution of the insert	WITHOUT_CLASSIFICATION	0.9998419650018602	WITHOUT_CLASSIFICATION	1.5803499813990944E-4	DESIGN
If this from element is a collection and the path is a collection property (maxIndex, etc.) then generate a sub-query.	WITHOUT_CLASSIFICATION	0.9971657639480317	WITHOUT_CLASSIFICATION	0.002834236051968309	DESIGN
entities ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9993035491193034	WITHOUT_CLASSIFICATION	6.964508806964862E-4	DESIGN
collections ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9995290239823383	WITHOUT_CLASSIFICATION	4.709760176616805E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998979475709385	WITHOUT_CLASSIFICATION	1.0205242906143814E-4	DESIGN
cannot occur	WITHOUT_CLASSIFICATION	0.9998979475709385	WITHOUT_CLASSIFICATION	1.0205242906143814E-4	DESIGN
only carry on if the method has no parameters	WITHOUT_CLASSIFICATION	0.9999908466839716	WITHOUT_CLASSIFICATION	9.153316028306934E-6	DESIGN
try "get"	WITHOUT_CLASSIFICATION	0.9998072106262156	WITHOUT_CLASSIFICATION	1.9278937378433832E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9993804663671013	WITHOUT_CLASSIFICATION	6.195336328987893E-4	DESIGN
do nothing...	WITHOUT_CLASSIFICATION	0.9993804663671013	WITHOUT_CLASSIFICATION	6.195336328987893E-4	DESIGN
should be safe to only ever expect EntityPersister references here	WITHOUT_CLASSIFICATION	0.9982722858089114	WITHOUT_CLASSIFICATION	0.0017277141910886885	DESIGN
this page intentionally left blank :)	WITHOUT_CLASSIFICATION	0.9982177230853935	WITHOUT_CLASSIFICATION	0.0017822769146064736	DESIGN
do not do anything	WITHOUT_CLASSIFICATION	0.9991300716331413	WITHOUT_CLASSIFICATION	8.699283668588095E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998598839793477	WITHOUT_CLASSIFICATION	1.4011602065243603E-4	DESIGN
cant instantiate	WITHOUT_CLASSIFICATION	0.9997784505171411	WITHOUT_CLASSIFICATION	2.2154948285898424E-4	DESIGN
if it is a property of an embedded component, invoke on the "identifier"	WITHOUT_CLASSIFICATION	0.9997065792253846	WITHOUT_CLASSIFICATION	2.9342077461538623E-4	DESIGN
otherwise:	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
skip finalize methods	WITHOUT_CLASSIFICATION	0.9991959498595733	WITHOUT_CLASSIFICATION	8.040501404266302E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995454561751554	WITHOUT_CLASSIFICATION	4.5454382484458913E-4	DESIGN
note: interfaces is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9995454561751554	WITHOUT_CLASSIFICATION	4.5454382484458913E-4	DESIGN
HHH-2481 make sure the callback gets cleared, otherwise the instance stays in a static thread local.	WITHOUT_CLASSIFICATION	0.9297289470694519	WITHOUT_CLASSIFICATION	0.07027105293054817	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9991922313482705	WITHOUT_CLASSIFICATION	8.07768651729607E-4	DESIGN
while constructor is running	WITHOUT_CLASSIFICATION	0.9991922313482705	WITHOUT_CLASSIFICATION	8.07768651729607E-4	DESIGN
note: interface is assumed to already contain HibernateProxy.class	WITHOUT_CLASSIFICATION	0.9993266976083504	WITHOUT_CLASSIFICATION	6.73302391649633E-4	DESIGN
interfaces arguments	WITHOUT_CLASSIFICATION	0.9996881609581789	WITHOUT_CLASSIFICATION	3.1183904182114307E-4	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
Get the caller	WITHOUT_CLASSIFICATION	0.9999174805325305	WITHOUT_CLASSIFICATION	8.251946746949499E-5	DESIGN
Get the caller principals	WITHOUT_CLASSIFICATION	0.9998486503706754	WITHOUT_CLASSIFICATION	1.5134962932457287E-4	DESIGN
private static final Alias DEFAULT_ALIAS = new Alias(10, null);	WITHOUT_CLASSIFICATION	0.9996161624435156	WITHOUT_CLASSIFICATION	3.838375564843788E-4	DESIGN
Needed to bump this up to DotNode, because that is the only thing which currently knows about the property-ref path in the correct format; it is either this, or recurse over the DotNodes constructing the property path just like DotNode does internally	WITHOUT_CLASSIFICATION	0.9880037181086248	WITHOUT_CLASSIFICATION	0.011996281891375344	DESIGN
if the identifier is quoted, remove the quotes	WITHOUT_CLASSIFICATION	0.9992224734359008	WITHOUT_CLASSIFICATION	7.775265640992837E-4	DESIGN
truncate the identifier to the max alias length, less the suffix length	WITHOUT_CLASSIFICATION	0.9999716814440995	WITHOUT_CLASSIFICATION	2.831855590046073E-5	DESIGN
full joins are not supported.. yet!	WITHOUT_CLASSIFICATION	0.9921379252396705	WITHOUT_CLASSIFICATION	0.007862074760329497	DESIGN
null is not considered the same type as Integer. $NON-NLS-1 $NON-NLS-1	WITHOUT_CLASSIFICATION	0.9991349822452527	WITHOUT_CLASSIFICATION	8.650177547473868E-4	DESIGN
the outerJoinsAfterWhere needs to come before where clause to properly handle dynamic filters	WITHOUT_CLASSIFICATION	0.9984861830236864	WITHOUT_CLASSIFICATION	0.0015138169763135704	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996109576218093	WITHOUT_CLASSIFICATION	3.890423781908169E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996109576218093	WITHOUT_CLASSIFICATION	3.890423781908169E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996109576218093	WITHOUT_CLASSIFICATION	3.890423781908169E-4	DESIGN
$NON-NLS-1	WITHOUT_CLASSIFICATION	0.9996109576218093	WITHOUT_CLASSIFICATION	3.890423781908169E-4	DESIGN
strip off any leading 'and' token	WITHOUT_CLASSIFICATION	0.99987782696585	WITHOUT_CLASSIFICATION	1.2217303414991502E-4	DESIGN
if the condition is not already there...	WITHOUT_CLASSIFICATION	0.9989596073198	WITHOUT_CLASSIFICATION	0.0010403926801998956	DESIGN
dontSpace.add("'");	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
for MySQL	WITHOUT_CLASSIFICATION	0.9996723382763951	WITHOUT_CLASSIFICATION	3.2766172360480225E-4	DESIGN
HashMap columnsUnique = new HashMap();	WITHOUT_CLASSIFICATION	0.9998360880758939	WITHOUT_CLASSIFICATION	1.6391192410607235E-4	DESIGN
null caused some problems	WITHOUT_CLASSIFICATION	0.9988002003802948	WITHOUT_CLASSIFICATION	0.0011997996197050983	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
not sure if this would ever be null but wanted to be careful	WITHOUT_CLASSIFICATION	0.999686817084037	WITHOUT_CLASSIFICATION	3.1318291596299605E-4	DESIGN
even on inverse="true"	WITHOUT_CLASSIFICATION	0.9985906892722957	WITHOUT_CLASSIFICATION	0.0014093107277043122	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
If true then execute db updates, otherwise just generate and display updates	WITHOUT_CLASSIFICATION	0.9999564780459917	WITHOUT_CLASSIFICATION	4.352195400825758E-5	DESIGN
we only release the connection	WITHOUT_CLASSIFICATION	0.9949487812056543	WITHOUT_CLASSIFICATION	0.005051218794345675	DESIGN
deprecated option...	WITHOUT_CLASSIFICATION	0.9959510486267246	WITHOUT_CLASSIFICATION	0.004048951373275406	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999312088669621	WITHOUT_CLASSIFICATION	6.879113303797992E-5	DESIGN
actually, this last test is probably unnecessary, since beforeCompletion() doesn't get called during rollback	WITHOUT_CLASSIFICATION	0.9997088341216995	WITHOUT_CLASSIFICATION	2.9116587830051535E-4	DESIGN
this one only really needed for badly-behaved applications! (if the TransactionManager has a Sychronization registered, its a noop) (actually we do need it for downgrading locks)	WITHOUT_CLASSIFICATION	0.9940026393597285	WITHOUT_CLASSIFICATION	0.005997360640271455	DESIGN
Create an DotNode AST for the path and resolve it.	WITHOUT_CLASSIFICATION	0.9998678087636955	WITHOUT_CLASSIFICATION	1.3219123630447572E-4	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999312088669621	WITHOUT_CLASSIFICATION	6.879113303797992E-5	DESIGN
if we could not register a synchronization, do the before/after completion callbacks ourself (but we need to let jdbcContext know that this is what we are going to do, so it doesn't keep trying to register synchronizations)	WITHOUT_CLASSIFICATION	0.9780452844206852	DESIGN	0.02195471557931481	WITHOUT_CLASSIFICATION
swallow it, and continue to roll back JTA transaction	WITHOUT_CLASSIFICATION	0.9885069527689826	WITHOUT_CLASSIFICATION	0.011493047231017411	DESIGN
so the transaction is already rolled back, by JTA spec	WITHOUT_CLASSIFICATION	0.9997641856547462	WITHOUT_CLASSIFICATION	2.3581434525376277E-4	DESIGN
this method is a noop if there is a Synchronization!	WITHOUT_CLASSIFICATION	0.998490510567394	WITHOUT_CLASSIFICATION	0.0015094894326059779	DESIGN
two conditions where we need to transform this to a theta-join syntax: 1) 'elem' is the "root from-element" in correlated subqueries 2) The DotNode.useThetaStyleImplicitJoins has been set to true and 'elem' represents an implicit join	WITHOUT_CLASSIFICATION	0.9994099928127432	WITHOUT_CLASSIFICATION	5.900071872568021E-4	DESIGN
WebSphere, however, is not a sane JEE/JTA container...	WITHOUT_CLASSIFICATION	0.9987436051626386	WITHOUT_CLASSIFICATION	0.0012563948373613557	DESIGN
for sane JEE/JTA containers, the transaction itself functions as its identifier...	WITHOUT_CLASSIFICATION	0.9992351295998633	WITHOUT_CLASSIFICATION	7.64870400136712E-4	DESIGN
swallow, the transaction was finished	WITHOUT_CLASSIFICATION	0.9996934133852579	WITHOUT_CLASSIFICATION	3.0658661474209926E-4	DESIGN
all AliasToEntityMapResultTransformer are considered equal ~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999607766705514	WITHOUT_CLASSIFICATION	3.92233294485344E-5	DESIGN
Create the join element under the from element.	WITHOUT_CLASSIFICATION	0.9997687948206597	WITHOUT_CLASSIFICATION	2.3120517934035738E-4	DESIGN
all DistinctRootEntityResultTransformer are considered equal ~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9999607766705514	WITHOUT_CLASSIFICATION	3.92233294485344E-5	DESIGN
map of EntityMode -> Tuplizer	WITHOUT_CLASSIFICATION	0.9999150768682651	WITHOUT_CLASSIFICATION	8.492313173485779E-5	DESIGN
this is a virtual id property...	WITHOUT_CLASSIFICATION	0.9981271243637932	WITHOUT_CLASSIFICATION	0.0018728756362067509	DESIGN
this one needed only for guessEntityMode()	WITHOUT_CLASSIFICATION	0.9985662001400959	WITHOUT_CLASSIFICATION	0.0014337998599040518	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9993735088289816	WITHOUT_CLASSIFICATION	6.264911710185319E-4	DESIGN
todo : move this to SF per HHH-3517; also see HHH-1907 and ComponentMetamodel	WITHOUT_CLASSIFICATION	0.9186673359818258	WITHOUT_CLASSIFICATION	0.08133266401817417	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998365852944717	WITHOUT_CLASSIFICATION	1.634147055283164E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998095274450823	WITHOUT_CLASSIFICATION	1.9047255491762543E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9994093013078621	WITHOUT_CLASSIFICATION	5.906986921378679E-4	DESIGN
Build the dynamic-map tuplizer...	WITHOUT_CLASSIFICATION	0.9998095274450823	WITHOUT_CLASSIFICATION	1.9047255491762543E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999125953093176	WITHOUT_CLASSIFICATION	8.74046906822721E-5	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999630011059732	WITHOUT_CLASSIFICATION	3.699889402676181E-5	DESIGN
private final SessionFactoryImplementor sessionFactory;	WITHOUT_CLASSIFICATION	0.9995238453041275	WITHOUT_CLASSIFICATION	4.761546958724071E-4	DESIGN
cached for efficiency...	WITHOUT_CLASSIFICATION	0.9996534104100706	WITHOUT_CLASSIFICATION	3.46589589929382E-4	DESIGN
public ComponentMetamodel(Component component, SessionFactoryImplementor sessionFactory) {	WITHOUT_CLASSIFICATION	0.9996619431291792	WITHOUT_CLASSIFICATION	3.3805687082081215E-4	DESIGN
this.sessionFactory = sessionFactory;	WITHOUT_CLASSIFICATION	0.9997710261933208	WITHOUT_CLASSIFICATION	2.289738066792782E-4	DESIGN
it was not embedded, so the argument is just an id	WITHOUT_CLASSIFICATION	0.9999653327120596	WITHOUT_CLASSIFICATION	3.466728794048744E-5	DESIGN
then the pojo tuplizer, using the dynamic-map tuplizer if no pojo representation is available	WITHOUT_CLASSIFICATION	0.9998365852944717	WITHOUT_CLASSIFICATION	1.634147055283164E-4	DESIGN
then dom4j tuplizer, if dom4j representation is available	WITHOUT_CLASSIFICATION	0.9994093013078621	WITHOUT_CLASSIFICATION	5.906986921378679E-4	DESIGN
put the "standard" tuplizers into the tuplizer map first	WITHOUT_CLASSIFICATION	0.9999125953093176	WITHOUT_CLASSIFICATION	8.74046906822721E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.99829806282937	WITHOUT_CLASSIFICATION	0.0017019371706301209	DESIGN
return currentId;	WITHOUT_CLASSIFICATION	0.9996808202228369	WITHOUT_CLASSIFICATION	3.1917977716306025E-4	DESIGN
reset the id	WITHOUT_CLASSIFICATION	0.9998858034491247	WITHOUT_CLASSIFICATION	1.1419655087522905E-4	DESIGN
origin.addDestination( destination ); This was the cause of HHH-242 origin.setType( FROM_FRAGMENT ); Set the parent node type so that the AST is properly formed. The destination node will have all the FROM text. The parent node is a collection join too (voodoo - see JoinProcessor)	WITHOUT_CLASSIFICATION	0.9998490943727445	WITHOUT_CLASSIFICATION	1.509056272554547E-4	DESIGN
reset the version	WITHOUT_CLASSIFICATION	0.9999459845184088	WITHOUT_CLASSIFICATION	5.4015481591250444E-5	DESIGN
the default is to simply not lazy fetch properties for now...	WITHOUT_CLASSIFICATION	0.9916776502598047	WITHOUT_CLASSIFICATION	0.008322349740195264	DESIGN
Add the second join, the one that ends in the destination table.	WITHOUT_CLASSIFICATION	0.9996895323305455	WITHOUT_CLASSIFICATION	3.104676694545136E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994293969293482	WITHOUT_CLASSIFICATION	0.005706030706518011	DESIGN
found a ctor, but it was not publicly accessible so try to request accessibility	WITHOUT_CLASSIFICATION	0.9999630011059732	WITHOUT_CLASSIFICATION	3.699889402676181E-5	DESIGN
determine the id getter and setter methods from the proxy interface (if any) determine all interfaces needed by the resulting proxy	WITHOUT_CLASSIFICATION	0.9999743921189883	WITHOUT_CLASSIFICATION	2.5607881011699525E-5	DESIGN
return getFactory().getSettings().getBytecodeProvider().getProxyFactoryFactory().buildProxyFactory();	WITHOUT_CLASSIFICATION	0.999633931274544	WITHOUT_CLASSIFICATION	3.660687254558717E-4	DESIGN
not final because proxy factory creation can fail	WITHOUT_CLASSIFICATION	0.9999386933447358	WITHOUT_CLASSIFICATION	6.130665526413401E-5	DESIGN
superclass entity-name	WITHOUT_CLASSIFICATION	0.9997147366667933	WITHOUT_CLASSIFICATION	2.852633332067375E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994293969293482	WITHOUT_CLASSIFICATION	0.005706030706518011	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
init the aliases, after initing the constructornode	WITHOUT_CLASSIFICATION	0.9997599471897982	WITHOUT_CLASSIFICATION	2.4005281020176195E-4	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994293969293482	WITHOUT_CLASSIFICATION	0.005706030706518011	DESIGN
legacy behavior (with no abstract attribute specified)	WITHOUT_CLASSIFICATION	0.9992143617564644	WITHOUT_CLASSIFICATION	7.856382435355195E-4	DESIGN
Get ready to start adding nodes.	WITHOUT_CLASSIFICATION	0.9997992242894044	WITHOUT_CLASSIFICATION	2.007757105955466E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
note: this affects the return value!	WITHOUT_CLASSIFICATION	0.9993309070620758	WITHOUT_CLASSIFICATION	6.690929379241492E-4	DESIGN
Need to account for allowable '_' within the variant	WITHOUT_CLASSIFICATION	0.9997694431977067	WITHOUT_CLASSIFICATION	2.3055680229327886E-4	DESIGN
Add the type to the list of returned sqlResultTypes.	WITHOUT_CLASSIFICATION	0.9998306989084228	WITHOUT_CLASSIFICATION	1.6930109157725715E-4	DESIGN
Collection Types:	WITHOUT_CLASSIFICATION	0.9995853179019847	WITHOUT_CLASSIFICATION	4.146820980152041E-4	DESIGN
convenience methods relating to operations across arrays of types...	WITHOUT_CLASSIFICATION	0.9999175465765554	WITHOUT_CLASSIFICATION	8.245342344458627E-5	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997057007822655	WITHOUT_CLASSIFICATION	2.9429921773448293E-4	DESIGN
Blobs are ignored by merge()	WITHOUT_CLASSIFICATION	0.9998680237289891	WITHOUT_CLASSIFICATION	1.319762710108333E-4	DESIGN
value is the entity name	WITHOUT_CLASSIFICATION	0.9994606860665832	WITHOUT_CLASSIFICATION	5.393139334167715E-4	DESIGN
EARLY EXIT!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
generate id select fragment and then property select fragment for each expression, just like generateSelectFragments().	WITHOUT_CLASSIFICATION	0.998361313179784	WITHOUT_CLASSIFICATION	0.0016386868202159038	DESIGN
TODO!	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
xml is the entity name	WITHOUT_CLASSIFICATION	0.9976777128766767	WITHOUT_CLASSIFICATION	0.002322287123323328	DESIGN
special case ... this is the leaf of the containment graph, even though not immutable	WITHOUT_CLASSIFICATION	0.9904788785187258	WITHOUT_CLASSIFICATION	0.009521121481274104	DESIGN
tolerates nulls	WITHOUT_CLASSIFICATION	0.99962974945049	WITHOUT_CLASSIFICATION	3.702505495099833E-4	DESIGN
sqlResultTypeList,	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
metaType is assumed to be single-column type	WITHOUT_CLASSIFICATION	0.9973698609784596	WITHOUT_CLASSIFICATION	0.002630139021540415	DESIGN
Get all the select expressions (that we just generated) and render the select.	WITHOUT_CLASSIFICATION	0.9998194514983847	WITHOUT_CLASSIFICATION	1.80548501615272E-4	DESIGN
Look through the FromElement's children to find any collections of values that should be fetched...	WITHOUT_CLASSIFICATION	0.9990570988936712	WITHOUT_CLASSIFICATION	9.429011063288393E-4	DESIGN
return AssociationType.FOREIGN_KEY_TO_PARENT; this is better but causes a transient object exception...	WITHOUT_CLASSIFICATION	0.7019827214250761	DESIGN	0.2980172785749238	WITHOUT_CLASSIFICATION
Use the lower case function name. Remember whether we're in a SELECT clause or not.	WITHOUT_CLASSIFICATION	0.9991145462282073	WITHOUT_CLASSIFICATION	8.854537717927095E-4	DESIGN
IDENT might be the name of a class.	WITHOUT_CLASSIFICATION	0.9800613288804031	WITHOUT_CLASSIFICATION	0.019938671119596855	DESIGN
TODO!!!	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
st.setTimestamp( index, new Timestamp( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994795147728952	WITHOUT_CLASSIFICATION	5.204852271048105E-4	DESIGN
st.setDate( index, new Date( cal.getTimeInMillis() ), cal ); JDK 1.5 only	WITHOUT_CLASSIFICATION	0.9994795147728952	WITHOUT_CLASSIFICATION	5.204852271048105E-4	DESIGN
both are Timestamps	WITHOUT_CLASSIFICATION	0.9992542448390385	WITHOUT_CLASSIFICATION	7.457551609616155E-4	DESIGN
at least one is a plain old Date	WITHOUT_CLASSIFICATION	0.9993944023138749	WITHOUT_CLASSIFICATION	6.055976861251372E-4	DESIGN
noop	WITHOUT_CLASSIFICATION	0.9996482590098085	WITHOUT_CLASSIFICATION	3.517409901915115E-4	DESIGN
if the corresponding SQL value is NULL, the reader we got is NULL as well	WITHOUT_CLASSIFICATION	0.9999970751138608	WITHOUT_CLASSIFICATION	2.924886139256842E-6	DESIGN
Fetch Reader content up to the end - and put characters in a StringBuffer	WITHOUT_CLASSIFICATION	0.9997804453889261	WITHOUT_CLASSIFICATION	2.1955461107392552E-4	DESIGN
Return StringBuffer content as a large String	WITHOUT_CLASSIFICATION	0.9998771979996771	WITHOUT_CLASSIFICATION	1.2280200032287897E-4	DESIGN
or Types.LONGVARCHAR?	WITHOUT_CLASSIFICATION	0.9996747140074326	WITHOUT_CLASSIFICATION	3.2528599256751687E-4	DESIGN
Not called at runtime so doesn't matter if its slow :)	WITHOUT_CLASSIFICATION	0.9982509953193152	WITHOUT_CLASSIFICATION	0.0017490046806848555	DESIGN
TODO	WITHOUT_CLASSIFICATION	0.7798658362949656	WITHOUT_CLASSIFICATION	0.22013416370503433	DESIGN
Chop off the rest of the tree.	WITHOUT_CLASSIFICATION	0.9997102436296675	WITHOUT_CLASSIFICATION	2.897563703323851E-4	DESIGN
different nullability rules for pk/fk	WITHOUT_CLASSIFICATION	0.9985046829561729	WITHOUT_CLASSIFICATION	0.0014953170438270621	DESIGN
cache this	WITHOUT_CLASSIFICATION	0.9890236866109382	WITHOUT_CLASSIFICATION	0.010976313389061904	DESIGN
only really need new array during semiresolve!	WITHOUT_CLASSIFICATION	0.9992589638200741	WITHOUT_CLASSIFICATION	7.410361799259955E-4	DESIGN
Forcefully remove leading ands from where fragments; the grammar will handle adding them	WITHOUT_CLASSIFICATION	0.9993660949039328	WITHOUT_CLASSIFICATION	6.339050960672683E-4	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
Create a new FILTERS node as a parent of all filters	WITHOUT_CLASSIFICATION	0.9998217280547614	WITHOUT_CLASSIFICATION	1.7827194523851103E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
public Object instantiate(Object parent, SessionImplementor session) throws HibernateException;	WITHOUT_CLASSIFICATION	0.9999646134589059	WITHOUT_CLASSIFICATION	3.538654109405876E-5	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996920778052174	WITHOUT_CLASSIFICATION	3.079221947825162E-4	DESIGN
nothing to do	WITHOUT_CLASSIFICATION	0.9996920778052174	WITHOUT_CLASSIFICATION	3.079221947825162E-4	DESIGN
VersionType impl ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ Note : simply returns null for seed() and next() as the only known application of binary types for versioning is for use with the TIMESTAMP datatype supported by Sybase and SQL Server, which are completely db-generated values...	WITHOUT_CLASSIFICATION	0.9999934510583313	WITHOUT_CLASSIFICATION	6.548941668746723E-6	DESIGN
lobs cannot be compared	WITHOUT_CLASSIFICATION	0.9997057007822655	WITHOUT_CLASSIFICATION	2.9429921773448293E-4	DESIGN
not really necessary, I guess...	WITHOUT_CLASSIFICATION	0.9728972193554538	WITHOUT_CLASSIFICATION	0.027102780644546166	DESIGN
Clobs are ignored by merge() operation	WITHOUT_CLASSIFICATION	0.9999949046732801	WITHOUT_CLASSIFICATION	5.095326719919009E-6	DESIGN
we do not have to worry about queued additions to uninitialized collections, since they can only occur for inverse collections!	WITHOUT_CLASSIFICATION	0.9999213908925478	WITHOUT_CLASSIFICATION	7.86091074522028E-5	DESIGN
collections cannot be compared	WITHOUT_CLASSIFICATION	0.9997314944431038	WITHOUT_CLASSIFICATION	2.685055568960806E-4	DESIGN
remember the uk value	WITHOUT_CLASSIFICATION	0.9998635492404505	WITHOUT_CLASSIFICATION	1.364507595494955E-4	DESIGN
NOOP	WITHOUT_CLASSIFICATION	0.9997601661223798	WITHOUT_CLASSIFICATION	2.3983387762013065E-4	DESIGN
processCollectionProperty(token, q.getCollectionPersister(collectionRole), collectionName);	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
we must use the "remembered" uk value, since it is not available from the EntityEntry during assembly	WITHOUT_CLASSIFICATION	0.9965292490047171	WITHOUT_CLASSIFICATION	0.003470750995283	DESIGN
collections don't dirty an unversioned parent entity	WITHOUT_CLASSIFICATION	0.9940984504804882	WITHOUT_CLASSIFICATION	0.005901549519511832	DESIGN
return false;	WITHOUT_CLASSIFICATION	0.9995318400575292	WITHOUT_CLASSIFICATION	4.681599424708714E-4	DESIGN
This just handles a particular case of component projection, perhaps get rid of it and throw an exception	WITHOUT_CLASSIFICATION	0.9974484903761613	WITHOUT_CLASSIFICATION	0.0025515096238386613	DESIGN
NOTE: we avoid joining to the next table if the named property is just the foreign key value	WITHOUT_CLASSIFICATION	0.9999715059513605	WITHOUT_CLASSIFICATION	2.8494048639522655E-5	DESIGN
the key is the owning entity itself, so get the ID from the key	WITHOUT_CLASSIFICATION	0.9997668594734129	WITHOUT_CLASSIFICATION	2.331405265871219E-4	DESIGN
if the original is a PersistentCollection, and that original was not flagged as dirty, then reset the target's dirty flag here after the copy operation. </p> One thing to be careful of here is a "bare" original collection in which case we should never ever ever reset the dirty flag on the target because we simply do not know...	WITHOUT_CLASSIFICATION	0.9999901518155515	WITHOUT_CLASSIFICATION	9.848184448422127E-6	DESIGN
ignore subselect keywords	WITHOUT_CLASSIFICATION	0.9997261780033951	WITHOUT_CLASSIFICATION	2.738219966049393E-4	DESIGN
copy elements into newly empty target collection	WITHOUT_CLASSIFICATION	0.9997851054361364	WITHOUT_CLASSIFICATION	2.1489456386354015E-4	DESIGN
for a null target, or a target which is the same as the original, we need to put the merged elements in a new collection	WITHOUT_CLASSIFICATION	0.9999906255244293	WITHOUT_CLASSIFICATION	9.37447557079092E-6	DESIGN
by default just use an unanticipated capacity since we don't know how to extract the capacity to use from original here...	WITHOUT_CLASSIFICATION	0.9999499210527003	WITHOUT_CLASSIFICATION	5.007894729968278E-5	DESIGN
get the elements back into the target making sure to handle dirty flag	WITHOUT_CLASSIFICATION	0.9999081420440771	WITHOUT_CLASSIFICATION	9.185795592285376E-5	DESIGN
check if collection is currently being loaded	WITHOUT_CLASSIFICATION	0.9995762059776829	WITHOUT_CLASSIFICATION	4.2379402231713974E-4	DESIGN
check if it is already completely loaded, but unowned	WITHOUT_CLASSIFICATION	0.9999120574677478	WITHOUT_CLASSIFICATION	8.794253225222886E-5	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9825479300874026	WITHOUT_CLASSIFICATION	0.017452069912597453	DESIGN
TODO!!!!!!!	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
create a new collection wrapper, to be initialized later	WITHOUT_CLASSIFICATION	0.9190073551588418	WITHOUT_CLASSIFICATION	0.08099264484115812	DESIGN
Some JDBC drivers erroneously return an empty array here for a null DB value :/	WITHOUT_CLASSIFICATION	0.9998226328838908	WITHOUT_CLASSIFICATION	1.7736711610928153E-4	DESIGN
our column span is the number of columns in the PK	WITHOUT_CLASSIFICATION	0.9999565828661211	WITHOUT_CLASSIFICATION	4.341713387892968E-5	DESIGN
cannot batch fetch by unique key (property-ref associations)	WITHOUT_CLASSIFICATION	0.999943505164644	WITHOUT_CLASSIFICATION	5.6494835356067215E-5	DESIGN
we already know current is not null...	WITHOUT_CLASSIFICATION	0.9955041546108312	WITHOUT_CLASSIFICATION	0.004495845389168845	DESIGN
the ids are fully resolved, so compare them with isDirty(), not isModified()	WITHOUT_CLASSIFICATION	0.9947402571341554	WITHOUT_CLASSIFICATION	0.005259742865844581	DESIGN
the owner of the association is not the owner of the id	WITHOUT_CLASSIFICATION	0.9997758592105356	WITHOUT_CLASSIFICATION	2.241407894645006E-4	DESIGN
----------------------------------------------------------- Constructors	WITHOUT_CLASSIFICATION	0.9995135483917199	WITHOUT_CLASSIFICATION	4.864516082800581E-4	DESIGN
----------------------------------------------------- Instance Variables	WITHOUT_CLASSIFICATION	0.9999984955212247	WITHOUT_CLASSIFICATION	1.5044787752317098E-6	DESIGN
public static JDBCException newJDBCException(String string, SQLException root, String sql) { string = string + " [" + sql + ']'; log.error(string, root); logExceptions(root); return new JDBCException(string, root, sql); } public static JDBCException newJDBCException(String string, SQLException root) { log.error(string, root); logExceptions(root); return new JDBCException(string, root); }	WITHOUT_CLASSIFICATION	0.9999904709301928	WITHOUT_CLASSIFICATION	9.52906980725231E-6	DESIGN
--------------------------------------------------------- Public Methods	WITHOUT_CLASSIFICATION	0.9987452495249445	WITHOUT_CLASSIFICATION	0.001254750475055528	DESIGN
Compare the two maps for equality	WITHOUT_CLASSIFICATION	0.9986900231946777	WITHOUT_CLASSIFICATION	0.0013099768053222334	DESIGN
Simple tests that require no synchronization	WITHOUT_CLASSIFICATION	0.9998590760052198	WITHOUT_CLASSIFICATION	1.4092399478013627E-4	DESIGN
Sybase fail if we don't do that, sigh...	WITHOUT_CLASSIFICATION	0.9996768888274434	WITHOUT_CLASSIFICATION	3.2311117255657754E-4	DESIGN
Handles things like: a and b or c a and ( b or c ) not a and not b not ( a and b ) x between y and z (overloaded "and") x in ( a, b, c ) (overloaded brackets) not not a a is not null (overloaded "not") etc...... and expressions like foo = bar (maps to: foo.id = bar.id) foo.Bar = 'foo' (maps to: foo.bar = 'foo') foo.Bar.Baz = 1.0 (maps to: foo.bar = bar.id and bar.baz = 1.0) 1.0 = foo.Bar.Baz (maps to: bar.baz = 1.0 and foo.Bar = bar.id) foo.Bar.Baz = a.B.C (maps to: bar.Baz = b.C and foo.Bar = bar.id and a.B = b.id) foo.Bar.Baz + a.B.C (maps to: bar.Baz + b.C and foo.Bar = bar.id and a.B = b.id) ( foo.Bar.Baz + 1.0 ) < 2.0 (maps to: ( bar.Baz + 1.0 ) < 2.0 and foo.Bar = bar.id)	WITHOUT_CLASSIFICATION	0.9999829939148301	WITHOUT_CLASSIFICATION	1.7006085169770782E-5	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9969116956078726	WITHOUT_CLASSIFICATION	0.003088304392127278	DESIGN
release the jdk internal caches everytime to ensure this plays nicely with destroyable class-loaders	WITHOUT_CLASSIFICATION	0.9969116956078726	WITHOUT_CLASSIFICATION	0.003088304392127278	DESIGN
try to "pretty print" it	WITHOUT_CLASSIFICATION	0.9996019373125518	WITHOUT_CLASSIFICATION	3.980626874481837E-4	DESIGN
otherwise, just dump it	WITHOUT_CLASSIFICATION	0.9998101677050664	WITHOUT_CLASSIFICATION	1.898322949336321E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999187811535345	WITHOUT_CLASSIFICATION	8.121884646550968E-4	DESIGN
its an interface so we can't really tell anything...	WITHOUT_CLASSIFICATION	0.999187811535345	WITHOUT_CLASSIFICATION	8.121884646550968E-4	DESIGN
use default behavior	WITHOUT_CLASSIFICATION	0.998136115106401	WITHOUT_CLASSIFICATION	0.0018638848935989844	DESIGN
NOTE: early return	WITHOUT_CLASSIFICATION	0.999914611737286	WITHOUT_CLASSIFICATION	8.538826271387748E-5	DESIGN
the MRU cache used to keep hard references to the most recently used query plans; note : LRU here is a bit of a misnomer, it indicates that LRU entries are removed, the actual kept entries are the MRU entries	WITHOUT_CLASSIFICATION	0.9175241238815963	DESIGN	0.08247587611840371	WITHOUT_CLASSIFICATION
we want to be able to just use the defaults, if JNDI environment properties are not supplied so don't put null in anywhere	WITHOUT_CLASSIFICATION	0.9999025076445689	WITHOUT_CLASSIFICATION	9.749235543112389E-5	DESIGN
Clone -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9985256670826191	WITHOUT_CLASSIFICATION	0.0014743329173809254	DESIGN
Serialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995377573649618	WITHOUT_CLASSIFICATION	4.622426350382537E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998906272004343	WITHOUT_CLASSIFICATION	1.0937279956573056E-4	DESIGN
stream closed in the finally	WITHOUT_CLASSIFICATION	0.9998906272004343	WITHOUT_CLASSIFICATION	1.0937279956573056E-4	DESIGN
Deserialize -----------------------------------------------------------------------	WITHOUT_CLASSIFICATION	0.9995377573649618	WITHOUT_CLASSIFICATION	4.622426350382537E-4	DESIGN
static methods only - hide constructor	WITHOUT_CLASSIFICATION	0.9928623469614907	WITHOUT_CLASSIFICATION	0.007137653038509294	DESIGN
&& !('_'==character)	WITHOUT_CLASSIFICATION	0.9993791063341732	WITHOUT_CLASSIFICATION	6.208936658267874E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995525757787947	WITHOUT_CLASSIFICATION	4.474242212052548E-4	DESIGN
returnign null!	WITHOUT_CLASSIFICATION	0.9995525757787947	WITHOUT_CLASSIFICATION	4.474242212052548E-4	DESIGN
includes last '.'	WITHOUT_CLASSIFICATION	0.9999368249602879	WITHOUT_CLASSIFICATION	6.317503971211727E-5	DESIGN
+1 to include the following '.'	WITHOUT_CLASSIFICATION	0.9998175500868465	WITHOUT_CLASSIFICATION	1.82449913153486E-4	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999081274918887	WITHOUT_CLASSIFICATION	9.187250811130565E-4	DESIGN
first time we find match!	WITHOUT_CLASSIFICATION	0.9991706748141469	WITHOUT_CLASSIFICATION	8.293251858531504E-4	DESIGN
entityNames may now include slashes for the representations classname may be an inner class	WITHOUT_CLASSIFICATION	0.9990271641333935	WITHOUT_CLASSIFICATION	9.728358666065381E-4	DESIGN
wrapped iterators	WITHOUT_CLASSIFICATION	0.9964045389987995	WITHOUT_CLASSIFICATION	0.0035954610012004402	DESIGN
index of current iterator in the wrapped iterators array	WITHOUT_CLASSIFICATION	0.999968428007572	WITHOUT_CLASSIFICATION	3.157199242802757E-5	DESIGN
the current iterator	WITHOUT_CLASSIFICATION	0.9999452060523848	WITHOUT_CLASSIFICATION	5.479394761517828E-5	DESIGN
the last used iterator	WITHOUT_CLASSIFICATION	0.9755120813715219	WITHOUT_CLASSIFICATION	0.024487918628478038	DESIGN
it was a boolean expression	WITHOUT_CLASSIFICATION	0.9998820108234633	WITHOUT_CLASSIFICATION	1.1798917653676336E-4	DESIGN
public static Object[] clone(Class elementClass, Object[] array) {Object[] result = (Object[]) Array.newInstance( elementClass, array.length );System.arraycopy(array, 0, result, 0, array.length);return result;}	WITHOUT_CLASSIFICATION	0.9999598225153223	WITHOUT_CLASSIFICATION	4.0177484677664E-5	DESIGN
call this before any Iterator method to make sure that the current Iterator is not exhausted	WITHOUT_CLASSIFICATION	0.9983542620445338	WITHOUT_CLASSIFICATION	0.0016457379554662538	DESIGN
doable if needed	WITHOUT_CLASSIFICATION	0.9997768425691421	WITHOUT_CLASSIFICATION	2.2315743085792278E-4	DESIGN
set last used iterator here, in case the user calls remove before calling hasNext() or next() (although they shouldn't)	WITHOUT_CLASSIFICATION	0.9619155438283746	WITHOUT_CLASSIFICATION	0.03808445617162537	DESIGN
peek ahead	WITHOUT_CLASSIFICATION	0.9989557617883353	WITHOUT_CLASSIFICATION	0.0010442382116645642	DESIGN
if we reach the end of the string w/o finding the matching end, that is an exception	WITHOUT_CLASSIFICATION	0.9998507133141241	WITHOUT_CLASSIFICATION	1.492866858758906E-4	DESIGN
we have a placeholder, spin forward till we find the end	WITHOUT_CLASSIFICATION	0.9994562228146275	WITHOUT_CLASSIFICATION	5.437771853725769E-4	DESIGN
make sure spinning forward did not put us past the end of the buffer...	WITHOUT_CLASSIFICATION	0.9998581850420933	WITHOUT_CLASSIFICATION	1.4181495790659013E-4	DESIGN
First, try to locate this resource through the current context classloader.	WITHOUT_CLASSIFICATION	0.9993716535420004	WITHOUT_CLASSIFICATION	6.283464579996147E-4	DESIGN
Next, try to locate this resource through this class's classloader	WITHOUT_CLASSIFICATION	0.9969504010404642	WITHOUT_CLASSIFICATION	0.003049598959535882	DESIGN
Next, try to locate this resource through the system classloader	WITHOUT_CLASSIFICATION	0.9970785576746064	WITHOUT_CLASSIFICATION	0.0029214423253935895	DESIGN
Anywhere else we should look?	WITHOUT_CLASSIFICATION	0.9960224700968762	WITHOUT_CLASSIFICATION	0.00397752990312384	DESIGN
would need an IdentitySet for this!	WITHOUT_CLASSIFICATION	0.9975635915349835	WITHOUT_CLASSIFICATION	0.00243640846501644	DESIGN
Arrays.asList doesn't do primitive arrays	WITHOUT_CLASSIFICATION	0.9980328470250932	WITHOUT_CLASSIFICATION	0.0019671529749068807	DESIGN
faster?	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
the name of a class	WITHOUT_CLASSIFICATION	0.9991494800070855	WITHOUT_CLASSIFICATION	8.505199929144413E-4	DESIGN
Its the listener class name	WITHOUT_CLASSIFICATION	0.9986746132470121	WITHOUT_CLASSIFICATION	0.0013253867529879348	DESIGN
allow 9,8,7,6,5,4,3,2,1	WITHOUT_CLASSIFICATION	0.9965619518425685	WITHOUT_CLASSIFICATION	0.003438048157431551	DESIGN
default to element set if no elements() specified	WITHOUT_CLASSIFICATION	0.9996483372917573	WITHOUT_CLASSIFICATION	3.5166270824264534E-4	DESIGN
look for the instance by uuid	WITHOUT_CLASSIFICATION	0.9988516776357839	WITHOUT_CLASSIFICATION	0.00114832236421616	DESIGN
in case we were deserialized in a different JVM, look for an instance with the same name (alternatively we could do an actual JNDI lookup here....)	WITHOUT_CLASSIFICATION	0.7551069372825451	WITHOUT_CLASSIFICATION	0.24489306271745495	DESIGN
first, lets determine whether to apply cglib or javassist based instrumentation...	WITHOUT_CLASSIFICATION	0.9998895578701852	WITHOUT_CLASSIFICATION	1.1044212981479097E-4	DESIGN
Make sure we don't override previous set values	WITHOUT_CLASSIFICATION	0.9995164205292042	WITHOUT_CLASSIFICATION	4.835794707958774E-4	DESIGN
entirely optional!!	WITHOUT_CLASSIFICATION	0.9991990525442931	WITHOUT_CLASSIFICATION	8.00947455706956E-4	DESIGN
Its the listener instance (or better be)	WITHOUT_CLASSIFICATION	0.9659099268522428	WITHOUT_CLASSIFICATION	0.03409007314775721	DESIGN
context.unbind(boundName);	WITHOUT_CLASSIFICATION	0.9991747242797349	WITHOUT_CLASSIFICATION	8.252757202651487E-4	DESIGN
readResolveObject	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
cfg.setProperty("hibernate.show_sql", "true");	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
Defensive, convenience methods	WITHOUT_CLASSIFICATION	0.9996014612859153	WITHOUT_CLASSIFICATION	3.985387140846882E-4	DESIGN
Create the SessionFactory from hibernate.cfg.xml	WITHOUT_CLASSIFICATION	0.9998185674039737	WITHOUT_CLASSIFICATION	1.8143259602621103E-4	DESIGN
Make sure you log the exception, as it might be swallowed	WITHOUT_CLASSIFICATION	0.9999475138657529	WITHOUT_CLASSIFICATION	5.2486134247132825E-5	DESIGN
Begin unit of work	WITHOUT_CLASSIFICATION	0.9997242660561885	WITHOUT_CLASSIFICATION	2.7573394381158125E-4	DESIGN
Write HTML header	WITHOUT_CLASSIFICATION	0.9993570187121851	WITHOUT_CLASSIFICATION	6.429812878149176E-4	DESIGN
Handle actions	WITHOUT_CLASSIFICATION	0.9993786404263761	WITHOUT_CLASSIFICATION	6.213595736238016E-4	DESIGN
Print page	WITHOUT_CLASSIFICATION	0.9994006883250505	WITHOUT_CLASSIFICATION	5.993116749496306E-4	DESIGN
Write HTML footer	WITHOUT_CLASSIFICATION	0.9997303805848154	WITHOUT_CLASSIFICATION	2.696194151844987E-4	DESIGN
End unit of work	WITHOUT_CLASSIFICATION	0.9995812339388837	WITHOUT_CLASSIFICATION	4.187660611163541E-4	DESIGN
Start the session to be used for this request	WITHOUT_CLASSIFICATION	0.6621974212740807	WITHOUT_CLASSIFICATION	0.33780257872591934	DESIGN
make the session available to the session factory's "current context"	WITHOUT_CLASSIFICATION	0.9965775817867808	WITHOUT_CLASSIFICATION	0.003422418213219201	DESIGN
pass control along to the rest of the processing chain	WITHOUT_CLASSIFICATION	0.9999850621054492	WITHOUT_CLASSIFICATION	1.4937894550815337E-5	DESIGN
remove session from "current context"	WITHOUT_CLASSIFICATION	0.9939488280754326	WITHOUT_CLASSIFICATION	0.006051171924567402	DESIGN
Eager fetch the collection so we can use it detached	WITHOUT_CLASSIFICATION	0.9966335685103893	WITHOUT_CLASSIFICATION	0.003366431489610726	DESIGN
If we want to handle it bidirectional and detached, we also need to load this collection with an eager outer-join fetch, this time with Criteria and not HQL:	WITHOUT_CLASSIFICATION	0.9455322727671303	WITHOUT_CLASSIFICATION	0.05446772723286968	DESIGN
Event anEvent = (Event) session .createCriteria(Event.class).setFetchMode("participants", FetchMode.JOIN) .add( Expression.eq("id", eventId) ) .uniqueResult(); Eager fetch the colleciton so we can use it detached	WITHOUT_CLASSIFICATION	0.9975930975329913	WITHOUT_CLASSIFICATION	0.0024069024670087553	DESIGN
End of first unit of work	WITHOUT_CLASSIFICATION	0.9995674428547574	WITHOUT_CLASSIFICATION	4.3255714524266054E-4	DESIGN
or bidirectional safety method, setting both sides: aPerson.addToEvent(anEvent);	WITHOUT_CLASSIFICATION	0.9999137702886415	WITHOUT_CLASSIFICATION	8.622971135848591E-5	DESIGN
Begin second unit of work	WITHOUT_CLASSIFICATION	0.9992050270652599	WITHOUT_CLASSIFICATION	7.949729347401094E-4	DESIGN
Reattachment of aPerson	WITHOUT_CLASSIFICATION	0.9993870026714011	WITHOUT_CLASSIFICATION	6.129973285988658E-4	DESIGN
The getEmailAddresses() might trigger a lazy load of the collection	WITHOUT_CLASSIFICATION	0.9985038848579649	WITHOUT_CLASSIFICATION	0.0014961151420351305	DESIGN
We need our tm, so get it now and avoid doing other work if there is a problem	WITHOUT_CLASSIFICATION	0.9996411171826811	WITHOUT_CLASSIFICATION	3.5888281731896157E-4	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999520937710988	WITHOUT_CLASSIFICATION	4.790622890116236E-5	DESIGN
Don't hold the JBC node lock throughout the tx, as that prevents reads and other updates	WITHOUT_CLASSIFICATION	0.9999520937710988	WITHOUT_CLASSIFICATION	4.790622890116236E-5	DESIGN
JBC put a version in the node when it created as part of some internal operation. We are always newer, but if the JBC version is > 1 something odd has happened	WITHOUT_CLASSIFICATION	0.9999991888965509	WITHOUT_CLASSIFICATION	8.111034490803824E-7	DESIGN
swaldman 2006-08-28: define c3p0-style configuration parameters for properties with hibernate-specific overrides to detect and warn about conflicting declarations	WITHOUT_CLASSIFICATION	0.9999659519327591	WITHOUT_CLASSIFICATION	3.4048067241003676E-5	DESIGN
Not null if the Isolation level has been specified in the configuration file. Otherwise, it is left to the Driver's default value.	WITHOUT_CLASSIFICATION	0.99970396097148	WITHOUT_CLASSIFICATION	2.9603902852000917E-4	DESIGN
Configured outside of Hibernate (i.e. Servlet container, or Java Bean Container already has Proxool pools running, and this provider is to just borrow one of these	WITHOUT_CLASSIFICATION	0.9917873608487894	WITHOUT_CLASSIFICATION	0.008212639151210599	DESIGN
If you're closing down the ConnectionProvider chances are an is not a real big deal, just warn	WITHOUT_CLASSIFICATION	0.9999464210283746	WITHOUT_CLASSIFICATION	5.35789716253131E-5	DESIGN
(AS is always optional, for consistency with SQL/OQL)	WITHOUT_CLASSIFICATION	0.9975480258129502	WITHOUT_CLASSIFICATION	0.002451974187049817	DESIGN
process the "new" HQL style where aliases are assigned _after_ the class name or path expression ie. using the AS construction	WITHOUT_CLASSIFICATION	0.9999996105526456	WITHOUT_CLASSIFICATION	3.894473543898291E-7	DESIGN
the loaded owner will be set to null after the collection is removed, so capture its value as the affected owner so it is accessible to both pre- and post- events	WITHOUT_CLASSIFICATION	0.9999973414240414	WITHOUT_CLASSIFICATION	2.6585759585113446E-6	DESIGN
is a primitive type invokespecial	WITHOUT_CLASSIFICATION	0.9982641197310543	WITHOUT_CLASSIFICATION	0.0017358802689456246	DESIGN
array of primitive type do nothing	WITHOUT_CLASSIFICATION	0.9997447332369805	WITHOUT_CLASSIFICATION	2.5526676301946156E-4	DESIGN
handle a path expression or class name that appears at the start, in the "new" HQL style or an alias that appears at the start in the "old" HQL style	WITHOUT_CLASSIFICATION	0.9999643014705492	WITHOUT_CLASSIFICATION	3.56985294508339E-5	DESIGN
handle <=, >=, !=, is not, not between, not in	WITHOUT_CLASSIFICATION	0.9859472541681238	WITHOUT_CLASSIFICATION	0.014052745831876224	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998957061491	WITHOUT_CLASSIFICATION	1.0429385088504504E-7	DESIGN
transfer an explicitly defined entity name handle the lazy attribute	WITHOUT_CLASSIFICATION	0.9988993053764025	WITHOUT_CLASSIFICATION	0.0011006946235975654	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995191256852746	WITHOUT_CLASSIFICATION	4.8087431472547735E-4	DESIGN
keep the behavior consistent even for boundary usages	WITHOUT_CLASSIFICATION	0.9995191256852746	WITHOUT_CLASSIFICATION	4.8087431472547735E-4	DESIGN
get meta's from <joined-subclass>	WITHOUT_CLASSIFICATION	0.999437907327787	WITHOUT_CLASSIFICATION	5.620926722130547E-4	DESIGN
parameters on the property mapping should override parameters in the typedef	WITHOUT_CLASSIFICATION	0.9992056005728586	WITHOUT_CLASSIFICATION	7.943994271414224E-4	DESIGN
fetch="join" overrides default laziness fetch="join" overrides default laziness	WITHOUT_CLASSIFICATION	0.999366193810277	WITHOUT_CLASSIFICATION	6.338061897230699E-4	DESIGN
NOTE SPECIAL CASE: default to join and non-lazy for the "second join" of the many-to-many	WITHOUT_CLASSIFICATION	0.999937890863742	WITHOUT_CLASSIFICATION	6.210913625802353E-5	DESIGN
so we "clock over" on the first invocation	WITHOUT_CLASSIFICATION	0.9999272594350057	WITHOUT_CLASSIFICATION	7.274056499435776E-5	DESIGN
state ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9996340047732097	WITHOUT_CLASSIFICATION	3.6599522679020823E-4	DESIGN
void setComponentTuplizerFactory(ComponentTuplizerFactory componentTuplizerFactory) { this.componentTuplizerFactory = componentTuplizerFactory; }	WITHOUT_CLASSIFICATION	0.9991513012194209	WITHOUT_CLASSIFICATION	8.486987805790586E-4	DESIGN
element index -> id	WITHOUT_CLASSIFICATION	0.9999882173413935	WITHOUT_CLASSIFICATION	1.1782658606553055E-5	DESIGN
note that it might be better to iterate the snapshot but this is safe, assuming the user implements equals() properly, as required by the Set contract!	WITHOUT_CLASSIFICATION	0.8966224254834276	WITHOUT_CLASSIFICATION	0.10337757451657234	DESIGN
collections detect changes made via their public interface and mark themselves as dirty as a performance optimization	WITHOUT_CLASSIFICATION	0.9999652504588439	WITHOUT_CLASSIFICATION	3.474954115611945E-5	DESIGN
essentially, if the real session is closed allow any method call to pass through since the real session will complain by throwing an appropriate exception; NOTE that allowing close() above has the same basic effect, but we capture that there simply to perform the unbind...	WITHOUT_CLASSIFICATION	0.9999973302952657	WITHOUT_CLASSIFICATION	2.669704734343164E-6	DESIGN
The default SQLExceptionConverter for all dialects is based on SQLState since SQLErrorCode is extremely vendor-specific. Specific Dialects may override to return whatever is most appropriate for that vendor.	WITHOUT_CLASSIFICATION	0.9999272323201577	WITHOUT_CLASSIFICATION	7.276767984236229E-5	DESIGN
only necessary for postgre < 7.4 http:anoncvs.postgresql.org/cvsweb.cgi/pgsql/doc/src/sgml/ref/create_sequence.sgml	WITHOUT_CLASSIFICATION	0.9987274703272182	WITHOUT_CLASSIFICATION	0.0012725296727818713	DESIGN
select topic, syntax from information_schema.help where section like 'Function%' order by section, topic see also -> http:www.h2database.com/html/functions.html	WITHOUT_CLASSIFICATION	0.9999866541356691	WITHOUT_CLASSIFICATION	1.3345864330949559E-5	DESIGN
registerColumnType(Types.VARBINARY, "CHARACTER($l)"); registerColumnType(Types.BLOB, "CHARACTER($l)" ); For use prior to CP 11.0 registerColumnType(Types.CLOB, "CHARACTER($l)" );	WITHOUT_CLASSIFICATION	0.999745195560176	WITHOUT_CLASSIFICATION	2.548044398239526E-4	DESIGN
the BLOB type requires a size arguement - this defaults to bytes - no arg defaults to 1 whole byte! other argument mods include K - kilobyte, M - megabyte, G - gigabyte. refer to the PBdevelopers guide for more info.	WITHOUT_CLASSIFICATION	0.7120693287508693	WITHOUT_CLASSIFICATION	0.2879306712491308	DESIGN
We must return a valid RDMS/RSA command from this method to prevent RDMS/RSA from issuing ERROR 400	WITHOUT_CLASSIFICATION	0.9950109319190349	WITHOUT_CLASSIFICATION	0.004989068080965099	DESIGN
Oracle driver reports to support getGeneratedKeys(), but they only support the version taking an array of the names of the columns to be returned (via its RETURNING clause). No other driver seems to support this overloaded version.	WITHOUT_CLASSIFICATION	0.9999770640872089	WITHOUT_CLASSIFICATION	2.293591279118914E-5	DESIGN
add the comment nest the main query in an outer select add the rownnumber bit into the outer query select list	WITHOUT_CLASSIFICATION	0.9999837406305405	WITHOUT_CLASSIFICATION	1.625936945943246E-5	DESIGN
You may still have other ResultSets or update counts left to process here but you can't do it now or the ResultSet you just got will be closed	WITHOUT_CLASSIFICATION	0.9999975368727884	WITHOUT_CLASSIFICATION	2.4631272115245958E-6	DESIGN
Note: For object <-> SQL datatype mappings see: Configuration Manager | Advanced | SQL | System DDL Datatype Mappings TBDregisterColumnType(Types.BINARY, "binary($1)"); changed 08-11-2005, jsl	WITHOUT_CLASSIFICATION	0.9998532115295651	WITHOUT_CLASSIFICATION	1.4678847043489866E-4	DESIGN
TRIM(end_keyword string-expression-1 FROM string-expression-2) use Hibernate implementation "From" is one of the parameters they pass in position ?3 registerFunction( "trim", new SQLFunctionTemplate(Hibernate.STRING, "trim(?1 ?2 from ?3)") );	WITHOUT_CLASSIFICATION	0.9999503695644311	WITHOUT_CLASSIFICATION	4.963043556895667E-5	DESIGN
Whether this dialect has an Identity clause added to the data type or a completely seperate identity data type	WITHOUT_CLASSIFICATION	0.9998534559898111	WITHOUT_CLASSIFICATION	1.4654401018884627E-4	DESIGN
According to both the ANSI-SQL and JPA specs, trim takes a variable number of parameters between 1 and 4. at least one paramer (trimSource) is required. From the SQL spec: <trim function> ::= TRIM <left paren> <trim operands> <right paren> <trim operands> ::= [ [ <trim specification> ] [ <trim character> ] FROM ] <trim source> <trim specification> ::= LEADING | TRAILING | BOTH If <trim specification> is omitted, BOTH is assumed. If <trim character> is omitted, space is assumed	WITHOUT_CLASSIFICATION	0.9999998350919387	WITHOUT_CLASSIFICATION	1.6490806140688103E-7	DESIGN
/ Prepare persisters and link them up with their cache region/access-strategy	WITHOUT_CLASSIFICATION	0.9975714222593646	WITHOUT_CLASSIFICATION	0.002428577740635414	DESIGN
Named Queries:	WITHOUT_CLASSIFICATION	0.9995499018076894	WITHOUT_CLASSIFICATION	4.500981923105585E-4	DESIGN
this will throw an error if there's something wrong.	WITHOUT_CLASSIFICATION	0.68027188957738	WITHOUT_CLASSIFICATION	0.31972811042262	DESIGN
does not handle arrays (thats ok, cos they can't be lazy) or newly instantiated collections, so we can do the cast	WITHOUT_CLASSIFICATION	0.9792787001394805	WITHOUT_CLASSIFICATION	0.02072129986051951	DESIGN
collection deletions are a special case since update() can add deletions of collections not loaded by the session.	WITHOUT_CLASSIFICATION	0.9999807546220568	WITHOUT_CLASSIFICATION	1.9245377943203175E-5	DESIGN
we can do the cast since orphan-delete does not apply to: 1. newly instantiated collections 2. arrays (we can't track orphans for detached arrays)	WITHOUT_CLASSIFICATION	0.9999569601506986	WITHOUT_CLASSIFICATION	4.303984930141889E-5	DESIGN
if the natural-id is marked as non-mutable, it is not retrieved during a normal database-snapshot operation...	WITHOUT_CLASSIFICATION	0.9998551354876792	WITHOUT_CLASSIFICATION	1.4486451232076228E-4	DESIGN
watch out for a case where old is still referenced somewhere in the object graph! (which is a user error)	WITHOUT_CLASSIFICATION	0.9999820857603497	WITHOUT_CLASSIFICATION	1.7914239650277336E-5	DESIGN
slice, to get the columns for this component property	WITHOUT_CLASSIFICATION	0.9996032894701542	WITHOUT_CLASSIFICATION	3.967105298457998E-4	DESIGN
int result = 17; result = 37 result + type.hashCode(); result = 37 result + ( value==null ? 0 : value.hashCode() ); return result;	WITHOUT_CLASSIFICATION	0.9999996168682544	WITHOUT_CLASSIFICATION	3.8313174548086907E-7	DESIGN
The CollectionEntry.isReached() stuff is just to detect any silly users who set up circular or shared references between/to collections.	WITHOUT_CLASSIFICATION	0.9999857474525603	WITHOUT_CLASSIFICATION	1.4252547439663373E-5	DESIGN
detached collection wrappers that get found + reattached during flush shouldn't be ignored	WITHOUT_CLASSIFICATION	0.9992582478424542	WITHOUT_CLASSIFICATION	7.41752157545736E-4	DESIGN
The unique property value represented here may or may not be serializable, so we do an explicit check here in order to generate a better error message	WITHOUT_CLASSIFICATION	0.9691327000364758	WITHOUT_CLASSIFICATION	0.030867299963524164	DESIGN
if the version of a newly instantiated object is not the same as the version seed value, use that as the unsaved-value	WITHOUT_CLASSIFICATION	0.9994887836935898	WITHOUT_CLASSIFICATION	5.112163064101995E-4	DESIGN
ie. we never have to null out a reference to an uninitialized proxy	WITHOUT_CLASSIFICATION	0.9999694831842626	WITHOUT_CLASSIFICATION	3.0516815737407273E-5	DESIGN
ignore this row, the collection is in process of being loaded somewhere further "up" the stack	WITHOUT_CLASSIFICATION	0.9999166846381169	WITHOUT_CLASSIFICATION	8.331536188315385E-5	DESIGN
Entity load contexts ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ currently, not yet used...	WITHOUT_CLASSIFICATION	0.9896244328939438	WITHOUT_CLASSIFICATION	0.010375567106056218	DESIGN
should be ok performance-wise to generate new delegate instances for each request since these are locally stack-scoped. Besides, it makes the code much easier to read than the old TransactionHelper stuff...	WITHOUT_CLASSIFICATION	0.999252305231337	WITHOUT_CLASSIFICATION	7.47694768662975E-4	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9986052065228256	WITHOUT_CLASSIFICATION	0.0013947934771743847	DESIGN
this implementation is supposed to tolerate incorrect unsaved-value mappings, for the purpose of backward-compatibility	WITHOUT_CLASSIFICATION	0.9986052065228256	WITHOUT_CLASSIFICATION	0.0013947934771743847	DESIGN
wrap up any new collections directly referenced by the object or its components	WITHOUT_CLASSIFICATION	0.9999781400464235	WITHOUT_CLASSIFICATION	2.1859953576467644E-5	DESIGN
remove any snapshot, not really for memory management purposes, but rather because it might now be stale, and there is no longer any EntityEntry to take precedence This is now handled by removeEntity() session.getPersistenceContext().removeDatabaseSnapshot(key);	WITHOUT_CLASSIFICATION	0.8805312234808953	WITHOUT_CLASSIFICATION	0.1194687765191047	DESIGN
skip this check for composite-ids relating to dom4j entity-mode; alternatively, we could add a check to make sure the incoming id value is an instance of Element...	WITHOUT_CLASSIFICATION	0.9788040613538306	WITHOUT_CLASSIFICATION	0.021195938646169428	DESIGN
upgrade the lock if necessary: lock(result, lockMode);	WITHOUT_CLASSIFICATION	0.9998794036548401	WITHOUT_CLASSIFICATION	1.2059634515999478E-4	DESIGN
now, any collections that are initialized inside this block do not get updated - they are ignored until the next flush	WITHOUT_CLASSIFICATION	0.8514655072706081	WITHOUT_CLASSIFICATION	0.14853449272939198	DESIGN
we must clone embedded composite identifiers, or we will get back the same instance that we pass in	WITHOUT_CLASSIFICATION	0.9974926207447404	WITHOUT_CLASSIFICATION	0.0025073792552595627	DESIGN
Sub-insertions should occur before containing insertion so Try to do the callback now	WITHOUT_CLASSIFICATION	0.9969388641223476	WITHOUT_CLASSIFICATION	0.003061135877652506	DESIGN
the entity is not associated with the session, so try interceptor and unsaved-value	WITHOUT_CLASSIFICATION	0.9996500944847196	WITHOUT_CLASSIFICATION	3.4990551528031323E-4	DESIGN
scan the query string for class names appearing in the from clause and replace with all persistent implementors of the class/interface, returning multiple query strings (make sure we don't pick up a class in the select clause!)	WITHOUT_CLASSIFICATION	0.9983302326080867	WITHOUT_CLASSIFICATION	0.0016697673919132245	DESIGN
save() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997908847287422	WITHOUT_CLASSIFICATION	2.0911527125774704E-4	DESIGN
evict() operations ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9997772128981013	WITHOUT_CLASSIFICATION	2.2278710189861542E-4	DESIGN
stops flush being called multiple times if this method is recursively called	WITHOUT_CLASSIFICATION	0.9774251418121981	WITHOUT_CLASSIFICATION	0.02257485818780191	DESIGN
if it is an uninitialized proxy, pointing with this session, then when it is accessed, the underlying instance will be "contained"	WITHOUT_CLASSIFICATION	0.9990829261358685	WITHOUT_CLASSIFICATION	9.170738641316525E-4	DESIGN
Generate an explicit join for the root dot node. The implied joins will be collected and passed up to the root dot node.	WITHOUT_CLASSIFICATION	0.9999987045674283	WITHOUT_CLASSIFICATION	1.2954325716119347E-6	DESIGN
A session is considered to contain an entity only if the entity has an entry in the session's persistence context and the entry reports that the entity has not been removed	WITHOUT_CLASSIFICATION	0.9980084416817413	WITHOUT_CLASSIFICATION	0.001991558318258727	DESIGN
Does the collection referenced by this FromElement specify an order-by attribute? If so, attach it to the query's order-by	WITHOUT_CLASSIFICATION	0.9981226314522281	WITHOUT_CLASSIFICATION	0.001877368547771807	DESIGN
... and the token could be an identifer and the error is a mismatched token error ...	WITHOUT_CLASSIFICATION	0.8761772386100749	WITHOUT_CLASSIFICATION	0.12382276138992508	DESIGN
If a where clause was specified in the update/delete query, use it to limit the returned ids here...	WITHOUT_CLASSIFICATION	0.9999569430136418	WITHOUT_CLASSIFICATION	4.3056986358106746E-5	DESIGN
int parameterStart = getWalker().getNumberOfParametersInSetClause(); List allParams = getIdSelectParameterSpecifications(); Iterator whereParams = allParams.subList( parameterStart, allParams.size() ).iterator();	WITHOUT_CLASSIFICATION	0.9999630142408735	WITHOUT_CLASSIFICATION	3.6985759126499745E-5	DESIGN
Default implementation: If this node has a data type, and that data type is not an association, then this is scalar.	WITHOUT_CLASSIFICATION	0.9995374290826476	WITHOUT_CLASSIFICATION	4.625709173522941E-4	DESIGN
Resolve the LHS fully, generate implicit joins. Pass in the property name so that the resolver can discover foreign key (id) properties.	WITHOUT_CLASSIFICATION	0.9996240293584018	WITHOUT_CLASSIFICATION	3.7597064159828605E-4	DESIGN
If the propertyType is null and there isn't a parent, just stop now... there was a problem resolving the node anyway.	WITHOUT_CLASSIFICATION	0.999873405357382	WITHOUT_CLASSIFICATION	1.2659464261797424E-4	DESIGN
We do not look for an existing join on the same path, because it makes sense to join twice on the same collection role	WITHOUT_CLASSIFICATION	0.99904658919652	WITHOUT_CLASSIFICATION	9.534108034799467E-4	DESIGN
our parent is another dot node, meaning we are being further dereferenced. thus we need to generate a join unless the parent refers to the associated entity's PK (because 'our' table would know the FK).	WITHOUT_CLASSIFICATION	0.9995936918443453	WITHOUT_CLASSIFICATION	4.06308155654681E-4	DESIGN
public final Currency getCurrency(int col) throws HibernateException {return (Currency) get(col);}	WITHOUT_CLASSIFICATION	0.9999574502869811	WITHOUT_CLASSIFICATION	4.254971301880722E-5	DESIGN
here, we have two possibilities: 1) the property-name matches the explicitly identifier property name 2) the property-name matches the implicit 'id' property name	WITHOUT_CLASSIFICATION	0.9996113129147144	WITHOUT_CLASSIFICATION	3.886870852855558E-4	DESIGN
Set the unresolved path in this node and the parent. Set the text for the parent.	WITHOUT_CLASSIFICATION	0.9995132317455523	WITHOUT_CLASSIFICATION	4.8676825444759683E-4	DESIGN
Get the first child to be considered. Sub-classes may do this differently in order to skip nodes that are not select expressions (e.g. DISTINCT).	WITHOUT_CLASSIFICATION	0.9988847457371679	WITHOUT_CLASSIFICATION	0.0011152542628320933	DESIGN
If this is an entity and the property is the identifier property, then use getIdentifierType(). Note that the propertyName.equals( propertyPath ) checks whether we have a component key reference, where the component class property name is the same as the entity id property name; if the two are not equal, this is the case and we'd need to "fall through" to using the property mapping.	WITHOUT_CLASSIFICATION	0.9999574513289794	WITHOUT_CLASSIFICATION	4.254867102051817E-5	DESIGN
for a subquery, the alias to use depends on a few things (we already know this is not an overall SELECT): 1) if this FROM_ELEMENT represents a correlation to the outer-most query A) if the outer query represents a multi-table persister, we need to use the given alias in anticipation of one of the multi-table executors being used (as this subquery will actually be used in the "id select" phase of that multi-table executor) B) otherwise, we need to use the persister's table name as the column qualification 2) otherwise (not correlated), use the given alias	WITHOUT_CLASSIFICATION	0.9133030707103386	DESIGN	0.08669692928966147	WITHOUT_CLASSIFICATION
Not a collection? Return the entity property mapping.	WITHOUT_CLASSIFICATION	0.8445038622330102	WITHOUT_CLASSIFICATION	0.1554961377669898	DESIGN
collection of <many-to-any/> mappings... used to circumvent the component-collection check below...	WITHOUT_CLASSIFICATION	0.9680374828801053	WITHOUT_CLASSIFICATION	0.031962517119894736	DESIGN
Otherwise, the destination node was implied by the FROM clause and the FROM clause processor will automatically add it in the right place.	WITHOUT_CLASSIFICATION	0.9999578663009919	WITHOUT_CLASSIFICATION	4.213369900800143E-5	DESIGN
If the first identifier in the path referrs to the class alias (not the class name), then this is a correlated subselect. If it's a correlated sub-select, use the existing table alias. Otherwise generate a new one.	WITHOUT_CLASSIFICATION	0.9825287776544649	WITHOUT_CLASSIFICATION	0.017471222345535078	DESIGN
check to see if our "propPath" actually represents a property on the persister	WITHOUT_CLASSIFICATION	0.9996861440675284	WITHOUT_CLASSIFICATION	3.1385593247160463E-4	DESIGN
An ident node can represent an index expression if the ident represents a naked property ref Note: this makes the assumption (which is currently the case in the hql-sql grammar) that the ident is first resolved itself (addrExpr -> resolve()). The other option, if that changes, is to call resolve from here; but it is currently un-needed overhead.	WITHOUT_CLASSIFICATION	0.999992431989543	WITHOUT_CLASSIFICATION	7.56801045695509E-6	DESIGN
This uses a PathExpressionParser but notice that compound paths are not valid, only bare names and simple paths:	WITHOUT_CLASSIFICATION	0.997828081414107	WITHOUT_CLASSIFICATION	0.0021719185858930464	DESIGN
If this is an implied join in a FROM clause, then use ANSI-style joining, and set the flag on the FromElement that indicates that it was implied in the FROM clause itself.	WITHOUT_CLASSIFICATION	0.9988270510170766	WITHOUT_CLASSIFICATION	0.0011729489829234788	DESIGN
origin.addDestination(destination); Add the query spaces.	WITHOUT_CLASSIFICATION	0.9998494624210297	WITHOUT_CLASSIFICATION	1.505375789702466E-4	DESIGN
For an explicit many-to-many relationship, add a second join from the intermediate (many-to-many) table to the destination table. Also, make sure that the from element's idea of the destination is the destination table.	WITHOUT_CLASSIFICATION	0.9999987419511448	WITHOUT_CLASSIFICATION	1.2580488551682582E-6	DESIGN
Reset the node type, because the rest of the system is expecting FROM_FRAGMENT, all we wanted was for the factory to create the right sub-class. This might get reset again later on anyway to make the SQL generation simpler.	WITHOUT_CLASSIFICATION	0.9270597728510844	WITHOUT_CLASSIFICATION	0.07294022714891556	DESIGN
explicit = true; This is an explict Select. ArrayList sqlResultTypeList = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998892550076655	WITHOUT_CLASSIFICATION	1.1074499233464159E-4	DESIGN
sqlResultTypeList.add( type ); Generate the select expression.	WITHOUT_CLASSIFICATION	0.999511947421823	WITHOUT_CLASSIFICATION	4.8805257817695303E-4	DESIGN
If the expression list has exactly one expression, and the type of the expression is a collection then this might be a collection function, such as index(c) or size(c).	WITHOUT_CLASSIFICATION	0.9985999610347345	WITHOUT_CLASSIFICATION	0.0014000389652654925	DESIGN
Need to parse off the column qualifiers; this is assuming (which is true as of now) that this is only used from update and delete HQL statement parsing	WITHOUT_CLASSIFICATION	0.9890865951470261	WITHOUT_CLASSIFICATION	0.01091340485297394	DESIGN
for regression testing against output from the old parser... found it easiest to simply reorder the FromElements here into ascending order in terms of injecting them into the resulting sql ast in orders relative to those expected by the old parser; this is definitely another of those "only needed for regression purposes". The SyntheticAndFactory, then, simply injects them as it encounters them.	WITHOUT_CLASSIFICATION	0.9999997743853789	WITHOUT_CLASSIFICATION	2.2561462095707174E-7	DESIGN
The uber-rule here is that we need to include subclass joins if the FromElement is in any way dereferenced by a property from the subclass table; otherwise we end up with column references qualified by a non-existent table reference in the resulting SQL...	WITHOUT_CLASSIFICATION	0.9986586455621538	WITHOUT_CLASSIFICATION	0.0013413544378461685	DESIGN
classic translator does not support collection of ordinal param metadata	WITHOUT_CLASSIFICATION	0.9977499832273764	WITHOUT_CLASSIFICATION	0.0022500167726235525	DESIGN
The following variables are stacks that keep information about each subexpression in the list of nested subexpressions we are currently processing.	WITHOUT_CLASSIFICATION	0.9989765031367214	WITHOUT_CLASSIFICATION	0.0010234968632787155	DESIGN
The loop ensures atomicity of the select + update even for no transaction or read committed isolation level	WITHOUT_CLASSIFICATION	0.9999998957061491	WITHOUT_CLASSIFICATION	1.0429385088504504E-7	DESIGN
should not be able to reach last without maxPosition being set unless there are no results	WITHOUT_CLASSIFICATION	0.998817653899014	WITHOUT_CLASSIFICATION	0.0011823461009859385	DESIGN
we found it in the temp PC. Should indicate we are in the midst of processing a result set containing eager fetches via join fetch	WITHOUT_CLASSIFICATION	0.9998707188078352	WITHOUT_CLASSIFICATION	1.2928119216485269E-4	DESIGN
do not use proxiesByKey, since not all proxies that point to this session's instances are in that collection!	WITHOUT_CLASSIFICATION	0.9988116214618936	WITHOUT_CLASSIFICATION	0.0011883785381063261	DESIGN
if there is no TM configured, we will not be able to access the javax.transaction.Transaction object in order to register a synch anyway.	WITHOUT_CLASSIFICATION	0.9995941245180374	WITHOUT_CLASSIFICATION	4.0587548196256755E-4	DESIGN
Since the result set cursor is always left at the first physical row after the "last processed", we need to jump back one position to get the key value we are interested in skipping	WITHOUT_CLASSIFICATION	0.9999966873236064	WITHOUT_CLASSIFICATION	3.3126763935333435E-6	DESIGN
true if this is a query and we are loading multiple instances of the same collection role otherwise this is a CollectionInitializer and we are loading up a single collection or batch	WITHOUT_CLASSIFICATION	0.9997874765064055	WITHOUT_CLASSIFICATION	2.1252349359440748E-4	DESIGN
we don't need to worry about existing version being uninitialized because this block isn't called by a re-entrant load (re-entrant loads _always_ have lock mode NONE)	WITHOUT_CLASSIFICATION	0.9990984893995787	WITHOUT_CLASSIFICATION	9.015106004213254E-4	DESIGN
add temp entry so that the next step is circular-reference safe - only needed because some types don't take proper advantage of two-phase-load (esp. components)	WITHOUT_CLASSIFICATION	0.9998163795523262	WITHOUT_CLASSIFICATION	1.8362044767387107E-4	DESIGN
assume we are in an auto-commit state	WITHOUT_CLASSIFICATION	0.9996400153216447	WITHOUT_CLASSIFICATION	3.599846783553026E-4	DESIGN
log a message about potential connection leaks	WITHOUT_CLASSIFICATION	0.9997039476064762	WITHOUT_CLASSIFICATION	2.960523935238622E-4	DESIGN
ps.close(); just close it; do NOT try to return it to the pool! NOTE: early exit!	WITHOUT_CLASSIFICATION	0.9999956726705251	WITHOUT_CLASSIFICATION	4.3273294748720205E-6	DESIGN
this has been shown to happen occasionally in rare cases when using a transaction manager + transaction-timeout where the timeout calls back through Hibernate's registered transaction synchronization on a separate "reaping" thread. In cases where that reaping thread executes through this block at the same time the main application thread does we can get into situations where these CMEs occur. And though it is not "allowed" per-se, the end result without handling it specifically is infinite looping. So here, we simply break the loop	WITHOUT_CLASSIFICATION	0.9998620796959125	WITHOUT_CLASSIFICATION	1.3792030408763293E-4	DESIGN
unfortunately this stuff can't be cached because it is per-invocation, not constant for the QueryTranslator instance	WITHOUT_CLASSIFICATION	0.9959898299934546	WITHOUT_CLASSIFICATION	0.004010170006545362	DESIGN
can't cache this stuff either (per-invocation) we are given a map of user-alias -> lock mode create a new map of sql-alias -> lock mode	WITHOUT_CLASSIFICATION	0.9988568006620566	WITHOUT_CLASSIFICATION	0.0011431993379434242	DESIGN
don't create a unique key, 'cos some databases don't like a UK on nullable columns getCollectionTable().createUniqueKey( getIdentifier().getConstraintColumns() );	WITHOUT_CLASSIFICATION	0.9959232388002108	WITHOUT_CLASSIFICATION	0.0040767611997892155	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999748386796676	WITHOUT_CLASSIFICATION	2.5161320332400236E-4	DESIGN
isSet = collection.isSet(); isSorted = collection.isSorted();	WITHOUT_CLASSIFICATION	0.9997710261933208	WITHOUT_CLASSIFICATION	2.289738066792782E-4	DESIGN
lists, arrays sets, maps, bags	WITHOUT_CLASSIFICATION	0.9995009330148071	WITHOUT_CLASSIFICATION	4.990669851928827E-4	DESIGN
we finish all the "removes" first to take care of possible unique constraints and so that we can take better advantage of batching	WITHOUT_CLASSIFICATION	0.9977871183737502	WITHOUT_CLASSIFICATION	0.00221288162624973	DESIGN
use a combination of foreign key columns and pk columns, since the ordering of removal and addition is not guaranteed when a child moves from one parent to another	WITHOUT_CLASSIFICATION	0.9994703541452117	WITHOUT_CLASSIFICATION	5.296458547883724E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is persister-centric and/or EntityInfo-centric ~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.999748386796676	WITHOUT_CLASSIFICATION	2.5161320332400236E-4	DESIGN
information about properties of this class, including inherited properties (only really needed for updatable/insertable properties)	WITHOUT_CLASSIFICATION	0.9981932590608951	WITHOUT_CLASSIFICATION	0.0018067409391050416	DESIGN
all this only really needs to consider properties of this class, not its subclasses, but since we are reusing code used for sequential selects, we use the subclass closure	WITHOUT_CLASSIFICATION	0.9900662276454952	DESIGN	0.009933772354504768	WITHOUT_CLASSIFICATION
Here we render the select column list based on the properties defined as being generated. For partial component generation, we currently just re-select the whole component rather than trying to handle the individual generated portions.	WITHOUT_CLASSIFICATION	0.9999954388447797	WITHOUT_CLASSIFICATION	4.561155220306615E-6	DESIGN
this is the root (versioned) table, and we are using version-based optimistic locking; if we are not updating the version, also don't check it (unless this is a "generated" version column)!	WITHOUT_CLASSIFICATION	0.999188039614404	WITHOUT_CLASSIFICATION	8.119603855959816E-4	DESIGN
optimistic-lock="all", include all updatable properties optimistic-lock="dirty", include all properties we are updating this time	WITHOUT_CLASSIFICATION	0.9998433024994755	WITHOUT_CLASSIFICATION	1.5669750052459255E-4	DESIGN
this property belongs to the table, and it is not specifically excluded from optimistic locking by optimistic-lock="false"	WITHOUT_CLASSIFICATION	0.938748746007987	WITHOUT_CLASSIFICATION	0.061251253992013	DESIGN
check to see if the connection is in auto-commit mode (no connection means aggressive connection release outside a JTA transaction context, so MUST be autocommit mode)	WITHOUT_CLASSIFICATION	0.9982094830833796	WITHOUT_CLASSIFICATION	0.0017905169166204478	DESIGN
need to treat this as if it where optimistic-lock="all" (dirty does not make sense); first we need to locate the "loaded" state Note, it potentially could be a proxy, so perform the location the safe way...	WITHOUT_CLASSIFICATION	0.9873932400116776	WITHOUT_CLASSIFICATION	0.012606759988322409	DESIGN
we always assume an instance with a null identifier or no identifier property is unsaved!	WITHOUT_CLASSIFICATION	0.9948851702539109	WITHOUT_CLASSIFICATION	0.005114829746089065	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9959240317710198	WITHOUT_CLASSIFICATION	0.00407596822898014	DESIGN
allow any identifier quoted with backtick only recognizes identifiers beginning with a letter	WITHOUT_CLASSIFICATION	0.998176854024973	WITHOUT_CLASSIFICATION	0.001823145975027078	DESIGN
following doesn't handle (null, not null) but unnecessary since this would mean all rows	WITHOUT_CLASSIFICATION	0.988874642768715	WITHOUT_CLASSIFICATION	0.011125357231285058	DESIGN
IMPL NOTE : due to the delayed population of setters (setters cached for performance), we really cannot pro0perly define equality for this transformer	WITHOUT_CLASSIFICATION	0.9998394710955484	WITHOUT_CLASSIFICATION	1.6052890445159815E-4	DESIGN
we need to dirty check collections, since they can cause an owner version number increment	WITHOUT_CLASSIFICATION	0.9999053005451153	WITHOUT_CLASSIFICATION	9.46994548847521E-5	DESIGN
return the id, so we can use it to reset the proxy id return result;	WITHOUT_CLASSIFICATION	0.9999300780169781	WITHOUT_CLASSIFICATION	6.99219830219234E-5	DESIGN
optimizer = getFactory().getSettings().getBytecodeProvider().getReflectionOptimizer( mappedClass, getterNames, setterNames, propTypes );	WITHOUT_CLASSIFICATION	0.9998527345999106	WITHOUT_CLASSIFICATION	1.4726540008928066E-4	DESIGN
cache the actual id of the object, not the value of the property-ref, which might not be initialized	WITHOUT_CLASSIFICATION	0.9825479300874026	WITHOUT_CLASSIFICATION	0.017452069912597453	DESIGN
We now have the value of the property-ref we reference. However, we need to dig a little deeper, as that property might also be an entity type, in which case we need to resolve its identitifier	WITHOUT_CLASSIFICATION	0.9998769905034708	WITHOUT_CLASSIFICATION	1.2300949652927724E-4	DESIGN
Retrieve the value of the designated column in the current row of this ResultSet object as a java.io.Reader object	WITHOUT_CLASSIFICATION	0.9999798966081445	WITHOUT_CLASSIFICATION	2.010339185549489E-5	DESIGN
not absolutely necessary, but helps for some equals()/hashCode() implementations	WITHOUT_CLASSIFICATION	0.998959439583884	WITHOUT_CLASSIFICATION	0.0010405604161159898	DESIGN
this should be a call to resolve(), not resolveIdentifier(), 'cos it might be a property-ref, and we did not cache the referenced value	WITHOUT_CLASSIFICATION	0.8365456235023104	WITHOUT_CLASSIFICATION	0.16345437649768965	DESIGN
If we have <tt>not-found="ignore"</tt> association mapped to a formula, we always need to dirty check it, so we can update the second-level cache	WITHOUT_CLASSIFICATION	0.9985624922712861	WITHOUT_CLASSIFICATION	0.0014375077287139138	DESIGN
can't just return null here, since that would cause an owning component to become null	WITHOUT_CLASSIFICATION	0.9999974343241889	WITHOUT_CLASSIFICATION	2.5656758111995655E-6	DESIGN
for arrays, replaceElements() may return a different reference, since the array length might not match	WITHOUT_CLASSIFICATION	0.9936856414392465	WITHOUT_CLASSIFICATION	0.006314358560753483	DESIGN
actual cache of the entries. soft references are used for both the keys and the values here since the values pertaining to the MRU entries are kept in a seperate hard reference cache (to avoid their enqueuement/garbage-collection).	WITHOUT_CLASSIFICATION	0.9765005148600838	WITHOUT_CLASSIFICATION	0.02349948513991622	DESIGN
as soon as we encounter our first letter, return the substring from that position	WITHOUT_CLASSIFICATION	0.9999454324469722	WITHOUT_CLASSIFICATION	5.45675530278657E-5	DESIGN
Note : expected in the syntax: type=listenerClass ({sep}type=listenerClass) where {sep} is any whitespace or comma	WITHOUT_CLASSIFICATION	0.9999935659853163	WITHOUT_CLASSIFICATION	6.434014683701472E-6	DESIGN
isTransactionCallbackRegistered denotes whether any Hibernate Transaction has registered as a callback against this JDBCContext; only one such callback is allowed. Directly serializing this value causes problems with JDBCTransaction, or really any Transaction impl where the callback is local to the Transaction instance itself, since that Transaction is not serialized along with the JDBCContext. Thus we handle that fact here explicitly...	WITHOUT_CLASSIFICATION	0.9977381665286523	WITHOUT_CLASSIFICATION	0.0022618334713475985	DESIGN
note that for sequential scrolling, we make the assumption that the first persister element is the "root entity"	WITHOUT_CLASSIFICATION	0.993951536320878	WITHOUT_CLASSIFICATION	0.006048463679122046	DESIGN
We call getKeyFromResultSet() here so that we can know the key value upon which to perform the breaking logic. However, it is also then called from getRowFromResultSet() which is certainly not the most efficient. But the call here is needed, and there currently is no other way without refactoring of the doQuery()/getRowFromResultSet() methods	WITHOUT_CLASSIFICATION	0.8538783571567822	WITHOUT_CLASSIFICATION	0.14612164284321788	DESIGN
This check is needed since processing leaves the cursor after the last physical row for the current logical row; thus if we are after the last physical row, this might be caused by either: 1) scrolling to the last logical row 2) scrolling past the last logical row In the latter scenario, the previous logical row really is the last logical row. In all other cases, we should process back two logical records (the current logic row, plus the previous logical row).	WITHOUT_CLASSIFICATION	0.9865240792274048	WITHOUT_CLASSIFICATION	0.013475920772595127	DESIGN
and perform the load	WITHOUT_CLASSIFICATION	0.9991902830744565	WITHOUT_CLASSIFICATION	8.097169255435079E-4	DESIGN
important: reuse the same event instances for performance!	WITHOUT_CLASSIFICATION	0.9998132020512505	WITHOUT_CLASSIFICATION	1.867979487495638E-4	DESIGN
this is a query and we are loading multiple instances of the same collection role	WITHOUT_CLASSIFICATION	0.9947841336404175	WITHOUT_CLASSIFICATION	0.005215866359582514	DESIGN
we found a collection element in the result set	WITHOUT_CLASSIFICATION	0.998816783771531	WITHOUT_CLASSIFICATION	0.0011832162284689716	DESIGN
we did not find a collection element in the result set, so we ensure that a collection is created with the owner's identifier, since what we have is an empty collection	WITHOUT_CLASSIFICATION	0.9999770588985816	WITHOUT_CLASSIFICATION	2.2941101418427783E-5	DESIGN
this is a collection initializer, so we must create a collection for each of the passed-in keys, to account for the possibility that the collection is empty and has no rows in the result set	WITHOUT_CLASSIFICATION	0.9603341890652529	WITHOUT_CLASSIFICATION	0.0396658109347471	DESIGN
grab its state from the ResultSet and keep it in the Session (but don't yet initialize the object itself) note that we acquire LockMode.READ even if it was not requested	WITHOUT_CLASSIFICATION	0.9991794441842434	WITHOUT_CLASSIFICATION	8.205558157565388E-4	DESIGN
a many-to-many; decrement currentDepth here to allow join across the association table without exceeding MAX_FETCH_DEPTH (i.e. the "currentDepth - 1" bit)	WITHOUT_CLASSIFICATION	0.9961428236430409	WITHOUT_CLASSIFICATION	0.003857176356959155	DESIGN
if not a composite key, use "foo in (?, ?, ?)" for batching if no batch, and not a composite key, use "foo = ?"	WITHOUT_CLASSIFICATION	0.9943887947566753	WITHOUT_CLASSIFICATION	0.005611205243324761	DESIGN
the user visible aliases, which are unknown to the superclass, these are not the actual "physical" SQL aliases	WITHOUT_CLASSIFICATION	0.9999530842590669	WITHOUT_CLASSIFICATION	4.69157409331669E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999289537913875	WITHOUT_CLASSIFICATION	7.104620861251298E-5	DESIGN
first look for a reference to a projection alias	WITHOUT_CLASSIFICATION	0.9999289537913875	WITHOUT_CLASSIFICATION	7.104620861251298E-5	DESIGN
it does not refer to an alias of a projection, look for a property	WITHOUT_CLASSIFICATION	0.999393199580805	WITHOUT_CLASSIFICATION	6.068004191949715E-4	DESIGN
determine if the collection elements are entities...	WITHOUT_CLASSIFICATION	0.9999095689909213	WITHOUT_CLASSIFICATION	9.043100907862379E-5	DESIGN
Let return-propertys override whatever the persister has for aliases.	WITHOUT_CLASSIFICATION	0.9994422998839372	WITHOUT_CLASSIFICATION	5.577001160627734E-4	DESIGN
Translates an AST join type (i.e., the token type) into a JoinFragment.XXX join type. @param astJoinType The AST join type (from HqlSqlTokenTypes or SqlTokenTypes) @return a JoinFragment.XXX join type. @see JoinFragment @see SqlTokenTypes	WITHOUT_CLASSIFICATION	0.9999717488623007	WITHOUT_CLASSIFICATION	2.8251137699413278E-5	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998598839793477	WITHOUT_CLASSIFICATION	1.4011602065243603E-4	DESIGN
ignore	WITHOUT_CLASSIFICATION	0.9998598839793477	WITHOUT_CLASSIFICATION	1.4011602065243603E-4	DESIGN
}	WITHOUT_CLASSIFICATION	0.9993742571836408	WITHOUT_CLASSIFICATION	6.257428163592414E-4	DESIGN
public List getCollectionAliases() { return collectionAliases; } public List getCollectionOwners() { return collectionOwners; } public List getCollectionOwnerAliases() { return collectionOwnerAliases; } public List getCollectionPersisters() { return collectionPersisters; } public Map getAlias2Persister() { return alias2Persister; } public boolean isCollectionInitializer() { return isCollectionInitializer; } public List getPersisters() { return persisters; } public Map getAlias2OwnerAlias() { return alias2OwnerAlias; } public List getScalarTypes() { return scalarTypes; } public List getScalarColumnAliases() { return scalarColumnAliases; } public List getPropertyResults() { return propertyResults; } public List getCollectionPropertyResults() { return collectionResults; } public Map getAlias2Return() { return alias2Return; }	WITHOUT_CLASSIFICATION	0.9999321201106288	WITHOUT_CLASSIFICATION	6.787988937111854E-5	DESIGN
SQLQueryParser parser = new SQLQueryParser( sqlQuery, processor.getAlias2Persister(), processor.getAlias2Return(), aliases, collAliases, collPersisters, suffixes, collSuffixes ); sql = parser.process(); namedParameterBindPoints = parser.getNamedParameters();	WITHOUT_CLASSIFICATION	0.9998541897003155	WITHOUT_CLASSIFICATION	1.45810299684562E-4	DESIGN
include the discriminator and class-level where, but not filters	WITHOUT_CLASSIFICATION	0.9995018480290472	WITHOUT_CLASSIFICATION	4.981519709527127E-4	DESIGN
sqlAliasSuffixes[i] = element.getColumnAliasSuffix();	WITHOUT_CLASSIFICATION	0.9997710261933208	WITHOUT_CLASSIFICATION	2.289738066792782E-4	DESIGN
NONE, because its the requested lock mode, not the actual!	WITHOUT_CLASSIFICATION	0.999956046104063	WITHOUT_CLASSIFICATION	4.395389593691847E-5	DESIGN
at this point we have (drivingSqlAlias) the SQL alias of the driving table corresponding to the given user alias. However, the driving table is not (necessarily) the table against which we want to apply locks. Mainly, the exception case here is joined-subclass hierarchies where we instead want to apply the lock against the root table (for all other strategies, it just happens that driving and root are the same).	WITHOUT_CLASSIFICATION	0.9999890698319888	WITHOUT_CLASSIFICATION	1.0930168011252499E-5	DESIGN
the column doesnt exist at all.	WITHOUT_CLASSIFICATION	0.9999150906117833	WITHOUT_CLASSIFICATION	8.490938821665836E-5	DESIGN
we have a mapped identifier property and the root of the incoming property path matched that identifier property	WITHOUT_CLASSIFICATION	0.999787219769534	WITHOUT_CLASSIFICATION	2.12780230465991E-4	DESIGN
we have an embedded composite identifier	WITHOUT_CLASSIFICATION	0.9987574474585124	WITHOUT_CLASSIFICATION	0.0012425525414876259	DESIGN
both many-to-one and one-to-one are represented as a Property. EntityPersister is relying on this value to determine "lazy fetch groups" in terms of field-level interception. So we need to make sure that we return true here for the case of many-to-one and one-to-one with lazy="no-proxy" impl note - lazy="no-proxy" currently forces both lazy and unwrap to be set to true. The other case we are extremely interested in here is that of lazy="proxy" where lazy is set to true, but unwrap is set to false. thus we use both here under the assumption that this return is really only ever used during persister construction to determine the lazy property/field fetch groupings. If that assertion changes then this check needs to change as well. Partially, this is an issue with the overloading of the term "lazy" here...	WITHOUT_CLASSIFICATION	0.7837363435467397	DESIGN	0.21626365645326023	WITHOUT_CLASSIFICATION
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971506786009	WITHOUT_CLASSIFICATION	1.0284932139916309E-4	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~ stuff that is tuplizer-centric, but is passed a session ~~~~~~~~~~~~~~~~ ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9998971506786009	WITHOUT_CLASSIFICATION	1.0284932139916309E-4	DESIGN
rootTableName = persistentClass.getRootTable().getQualifiedName( factory.getDialect(), factory.getDefaultCatalog(), factory.getDefaultSchema() );	WITHOUT_CLASSIFICATION	0.9998527345999106	WITHOUT_CLASSIFICATION	1.4726540008928066E-4	DESIGN
SUBCLASSES	WITHOUT_CLASSIFICATION	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
Custom sql	WITHOUT_CLASSIFICATION	0.9998683667731649	WITHOUT_CLASSIFICATION	1.3163322683501058E-4	DESIGN
protected void initPropertyPaths(final String path,final Type type,final String[] columns,final String[] formulaTemplates,final Mapping factory)throws MappingException {addFormulaPropertyPath(path, type, formulaTemplates);initPropertyPaths(path, type, columns, formulaTemplates, factory);}	WITHOUT_CLASSIFICATION	0.9986018141142762	WITHOUT_CLASSIFICATION	0.0013981858857237807	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
Custom SQL (would be better if these were private)	WITHOUT_CLASSIFICATION	0.9431484047077154	WITHOUT_CLASSIFICATION	0.056851595292284535	DESIGN
moved up from AbstractEntityPersister ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9894308767055471	WITHOUT_CLASSIFICATION	0.010569123294452925	DESIGN
~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
aliases for identifier ( alias.id ); skip if the entity defines a non-id property named 'id'	WITHOUT_CLASSIFICATION	0.999872207173601	WITHOUT_CLASSIFICATION	1.277928263989147E-4	DESIGN
decide which ResultSet to get the property value from:	WITHOUT_CLASSIFICATION	0.9998291504936148	WITHOUT_CLASSIFICATION	1.7084950638528732E-4	DESIGN
note: it is conceptually possible that a UserType could map null to a non-null value, so the following is arguable:	WITHOUT_CLASSIFICATION	0.9994942693918957	WITHOUT_CLASSIFICATION	5.057306081043735E-4	DESIGN
the contract of EntityTuplizer.determineConcreteSubclassEntityName says that returning null is an indication that the specified entity-name (this.getEntityName) should be used.	WITHOUT_CLASSIFICATION	0.9922912748575092	WITHOUT_CLASSIFICATION	0.007708725142490827	DESIGN
Need to use the identifier type of the collection owner since the incoming is value is actually the owner's id. Using the collection's key type causes problems with property-ref keys...	WITHOUT_CLASSIFICATION	0.9959240317710198	WITHOUT_CLASSIFICATION	0.00407596822898014	DESIGN
cache these since they are stateless this one could even be static...	WITHOUT_CLASSIFICATION	0.7862698098819706	DESIGN	0.21373019011802935	WITHOUT_CLASSIFICATION
"as" is not in KEYWORDS	WITHOUT_CLASSIFICATION	0.9955412552844283	WITHOUT_CLASSIFICATION	0.004458744715571788	DESIGN
--Commented out by Inspection (12/4/04 9:10 AM): public abstract void addCondition(String alias, String[] columns, String condition);	WITHOUT_CLASSIFICATION	0.9999608991813446	WITHOUT_CLASSIFICATION	3.91008186554259E-5	DESIGN
use the id column alias	WITHOUT_CLASSIFICATION	0.9999527902310711	WITHOUT_CLASSIFICATION	4.7209768929022886E-5	DESIGN
private List aliases = new ArrayList();	WITHOUT_CLASSIFICATION	0.9998684350531606	WITHOUT_CLASSIFICATION	1.3156494683933911E-4	DESIGN
columns.add(columnName); aliases.add(tableAlias);	WITHOUT_CLASSIFICATION	0.9994837902851396	WITHOUT_CLASSIFICATION	5.162097148605058E-4	DESIGN
where fragment must be empty!	WITHOUT_CLASSIFICATION	0.9773540744317546	WITHOUT_CLASSIFICATION	0.022645925568245344	DESIGN
revert to traditional hibernate behavior of setting initialPoolSize to minPoolSize unless otherwise specified with a c3p0.-style parameter.	WITHOUT_CLASSIFICATION	0.9995671093842822	WITHOUT_CLASSIFICATION	4.3289061571784976E-4	DESIGN
arbitrary on clause ignored!!	WITHOUT_CLASSIFICATION	0.9997026758311011	WITHOUT_CLASSIFICATION	2.9732416889895235E-4	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9909772795564096	WITHOUT_CLASSIFICATION	0.009022720443590395	DESIGN
might happen with a managed connection	WITHOUT_CLASSIFICATION	0.9909772795564096	WITHOUT_CLASSIFICATION	0.009022720443590395	DESIGN
if an exception occurs during flush, user must call rollback()	WITHOUT_CLASSIFICATION	0.9999312088669621	WITHOUT_CLASSIFICATION	6.879113303797992E-5	DESIGN
Essentially: 1) If we have a local (Hibernate) transaction in progress and it already has the UserTransaction cached, use that UserTransaction to determine the status. 2) If a transaction manager has been located, use that transaction manager to determine the status. 3) Finally, as the last resort, try to lookup the UserTransaction via JNDI and use that to determine the status.	WITHOUT_CLASSIFICATION	0.9999311133785304	WITHOUT_CLASSIFICATION	6.888662146959805E-5	DESIGN
package	WITHOUT_CLASSIFICATION	0.9975014710658405	WITHOUT_CLASSIFICATION	0.0024985289341593843	DESIGN
swallow it (the transaction _was_ successful or successfully rolled back)	WITHOUT_CLASSIFICATION	0.9992174219618108	WITHOUT_CLASSIFICATION	7.825780381892371E-4	DESIGN
ignore it	WITHOUT_CLASSIFICATION	0.9998819531865354	WITHOUT_CLASSIFICATION	1.1804681346460182E-4	DESIGN
we need to dirty check many-to-ones with not-found="ignore" in order to update the cache (not the database), since in this case a null entity reference can lose information	WITHOUT_CLASSIFICATION	0.7937248763790976	WITHOUT_CLASSIFICATION	0.2062751236209025	DESIGN
create our own copy of the user-supplied tuplizer impl map	WITHOUT_CLASSIFICATION	0.9993735088289816	WITHOUT_CLASSIFICATION	6.264911710185319E-4	DESIGN
Regions can get instantiated in the course of normal work (e.g. a named query region will be created the first time the query is executed), so suspend any ongoing tx	WITHOUT_CLASSIFICATION	0.999972678716075	WITHOUT_CLASSIFICATION	2.7321283925026286E-5	DESIGN
then handle any user-defined entity modes...	WITHOUT_CLASSIFICATION	0.99829806282937	WITHOUT_CLASSIFICATION	0.0017019371706301209	DESIGN
Establish the region root node with a non-locking data version	WITHOUT_CLASSIFICATION	0.9999621261139655	WITHOUT_CLASSIFICATION	3.7873886034520664E-5	DESIGN
temporary ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~	WITHOUT_CLASSIFICATION	0.994293969293482	WITHOUT_CLASSIFICATION	0.005706030706518011	DESIGN
NOTE : this is being used from the process of shutting down a SessionFactory. Specific things to consider: (1) this clearing of the region should not propagate to other nodes on the cluster (if any); this is the cache-mode-local option bit... (2) really just trying a best effort to cleanup after ourselves; lock failures, etc are not critical here; this is the fail-silently option bit...	WITHOUT_CLASSIFICATION	0.8634590453885099	DESIGN	0.13654095461149018	WITHOUT_CLASSIFICATION
need to extract the component values and check for subtype replacements...	WITHOUT_CLASSIFICATION	0.9999867406565939	WITHOUT_CLASSIFICATION	1.325934340608583E-5	DESIGN
We ignore minimalPutOverride. JBossCache putForExternalRead is already about as minimal as we can get; it will promptly return if it discovers that the node we want to write to already exists	WITHOUT_CLASSIFICATION	0.9999963063951937	WITHOUT_CLASSIFICATION	3.69360480641024E-6	DESIGN
for now, just "re-flatten" the metamodel since this is temporary stuff anyway (HHH-1907)	WITHOUT_CLASSIFICATION	0.8866087038211613	WITHOUT_CLASSIFICATION	0.11339129617883864	DESIGN
Configure the cache to use our TM	WITHOUT_CLASSIFICATION	0.9976944537812052	WITHOUT_CLASSIFICATION	0.0023055462187947496	DESIGN
This solution would allow us to eliminate the owner arg to disassemble(), but what if the collection was null, and then later had elements added? seems unsafe session.getPersistenceContext().getCollectionEntry( (PersistentCollection) value ).getKey();	WITHOUT_CLASSIFICATION	0.7272172415075672	WITHOUT_CLASSIFICATION	0.2727827584924328	DESIGN
Make sure JBC doesn't look one up	WITHOUT_CLASSIFICATION	0.9988267555276408	WITHOUT_CLASSIFICATION	0.0011732444723591602	DESIGN
some collections are not lazy:	WITHOUT_CLASSIFICATION	0.9949999747858331	WITHOUT_CLASSIFICATION	0.005000025214166877	DESIGN
Here we don't want to suspend the tx. If we do: 1) We might be caching query results that reflect uncommitted changes. No tx == no WL on cache node, so other threads can prematurely see those query results 2) No tx == immediate replication. More overhead, plus we spread issue #1 above around the cluster	WITHOUT_CLASSIFICATION	0.9844010481733229	WITHOUT_CLASSIFICATION	0.015598951826677213	DESIGN
return the (fully resolved) identifier value, but do not resolve to the actual referenced entity instance NOTE: the owner of the association is not really the owner of the id!	WITHOUT_CLASSIFICATION	0.9996054389310851	WITHOUT_CLASSIFICATION	3.945610689149147E-4	DESIGN
Add a zero (or quite low) timeout option so we don't block. Ignore any TimeoutException. Basically we forego caching the query result in order to avoid blocking. Reads are done with suspended tx, so they should not hold the lock for long. Not caching the query result is OK, since any subsequent read will just see the old result with its out-of-date timestamp; that result will be discarded and the db query performed again.	WITHOUT_CLASSIFICATION	0.99999969594222	WITHOUT_CLASSIFICATION	3.040577799123073E-7	DESIGN
Impl note: takes advantage of the fact that an escpaed single quote embedded within a quote-block can really be handled as two seperate quote-blocks for the purposes of this method...	WITHOUT_CLASSIFICATION	0.999081274918887	WITHOUT_CLASSIFICATION	9.187250811130565E-4	DESIGN
We have the JBCWriteMutex, so no other local thread will be trying to write this key. It's possible here some remote thread has come in and changed the values again, but since we are reading the values to write to JBC right now, we know we are writing the latest values; i.e. we don't assume that what we cached in entry.update() above is what we should write to JBC now. Our write could be redundant, i.e. we are writing what some remote thread just came in an wrote. There is a chance that yet another remote thread will update us, and we'll then overwrite that later data in JBC. But, all remote nodes will ignore that change in their localCache; the only place it will live will be in JBC, where it can only effect the initial state transfer values on newly joined nodes (i.e. populateLocalCache()).	WITHOUT_CLASSIFICATION	0.9995339253601668	WITHOUT_CLASSIFICATION	4.66074639833141E-4	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9984424966523668	WITHOUT_CLASSIFICATION	0.0015575033476331497	DESIGN
local cache, so we use synchronization	WITHOUT_CLASSIFICATION	0.9984424966523668	WITHOUT_CLASSIFICATION	0.0015575033476331497	DESIGN
Don't need to lock the cache here, since if someone else inserted the same pk first, the insert would fail	WITHOUT_CLASSIFICATION	0.9999820903303664	WITHOUT_CLASSIFICATION	1.7909669633549854E-5	DESIGN
we need to grab the version value from the entity, otherwise we have issues with generated-version entities that may have multiple actions queued during the same flush	WITHOUT_CLASSIFICATION	0.999159276869018	WITHOUT_CLASSIFICATION	8.407231309820473E-4	DESIGN
we need to obtain the lock before any actions are executed, since this may be an inverse="true" bidirectional association and it is one of the earlier entity actions which actually updates the database (this action is resposible for second-level cache invalidation only)	WITHOUT_CLASSIFICATION	0.9754519872152015	WITHOUT_CLASSIFICATION	0.02454801278479845	DESIGN
postDelete: After actually deleting a row, record the fact that the instance no longer exists on the database (needed for identity-column key generation), and remove it from the session cache	WITHOUT_CLASSIFICATION	0.945922843756688	WITHOUT_CLASSIFICATION	0.054077156243312066	DESIGN
intentionally empty	WITHOUT_CLASSIFICATION	0.9992614147846036	WITHOUT_CLASSIFICATION	7.385852153964194E-4	DESIGN
todo : what else to do here?	DESIGN	0.9919205578021337	WITHOUT_CLASSIFICATION	0.008079442197866164	DESIGN
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.8499561339104702	WITHOUT_CLASSIFICATION	0.15004386608952977	DESIGN
'hibernate.temp.use_jdbc_metadata_defaults' is a temporary magic value. The need for it is intended to be alleviated with future developement, thus it is not defined as an Environment constant... it is used to control whether we should consult the JDBC metadata to determine certain Settings default values; it is useful to not do this when the database may not be available (mainly in tools usage).	DESIGN	0.9989461366886977	DESIGN	0.0010538633113022203	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8406946234593519	DESIGN	0.15930537654064805	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8406946234593519	DESIGN	0.15930537654064805	WITHOUT_CLASSIFICATION
todo : eventually merge this with TreeCache and just add optional opt-lock support there.	DESIGN	0.9964472405399227	WITHOUT_CLASSIFICATION	0.00355275946007718	DESIGN
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999796359937838	WITHOUT_CLASSIFICATION	2.0364006216224303E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9058145304009915	WITHOUT_CLASSIFICATION	0.09418546959900864	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9964980308406741	DESIGN	0.0035019691593259745	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9964980308406741	DESIGN	0.0035019691593259745	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9994687504556672	DESIGN	5.312495443327259E-4	WITHOUT_CLASSIFICATION
FIXME Hacky workaround to JBCACHE-1202	DESIGN	0.9994687504556672	DESIGN	5.312495443327259E-4	WITHOUT_CLASSIFICATION
TODO: I considered validating TS cache config here, but decided to defer unti getTimestampsCacheInstance() in case the cache is never actually used	DESIGN	0.9999855286418485	DESIGN	1.4471358151462737E-5	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9479097295574744	DESIGN	0.052090270442525594	WITHOUT_CLASSIFICATION
TODO Is this a valid operation on a timestamps cache?	DESIGN	0.9479097295574744	DESIGN	0.052090270442525594	WITHOUT_CLASSIFICATION
TODO Why not use the timestamp in a DataVersion?	DESIGN	0.9983350516752525	DESIGN	0.0016649483247475189	WITHOUT_CLASSIFICATION
can happen because of the multiple ways Cache.remove() can be invoked :(	DESIGN	0.9999796359937838	WITHOUT_CLASSIFICATION	2.0364006216224303E-5	DESIGN
work around the "feature" where tree cache is validating the inserted node during the next transaction. no idea...	DESIGN	0.9058145304009915	WITHOUT_CLASSIFICATION	0.09418546959900864	DESIGN
swaldman 2004-02-07: modify to allow null values to signify fall through to c3p0 PoolConfig defaults	DESIGN	0.9995747678262611	WITHOUT_CLASSIFICATION	4.2523217373886037E-4	DESIGN
turn hibernate.c3p0. into c3p0., so c3p0 gets a chance to see all hibernate.c3p0.	DESIGN	0.9775648891316241	WITHOUT_CLASSIFICATION	0.022435110868375942	DESIGN
TODO: this bit actually has to be called after all cascades! but since identity insert is called synchronously, instead of asynchronously as other actions, it isn't	DESIGN	0.9770878310800584	DESIGN	0.02291216891994162	WITHOUT_CLASSIFICATION
TODO: reenable if we also fix the above todo	DESIGN	0.8390480308863492	DESIGN	0.16095196911365084	WITHOUT_CLASSIFICATION
TODO: inefficient if that cache is just going to ignore the updated state!	DESIGN	0.9010915524817247	WITHOUT_CLASSIFICATION	0.09890844751827542	DESIGN
we may be screwed here since the collection action is about to execute and we do not know the final owner key value	DESIGN	0.9953269346487034	WITHOUT_CLASSIFICATION	0.004673065351296621	DESIGN
Create an action that will evict collection and entity regions based on queryspaces (table names). TODO: cache the autodetected information and pass it in instead.	DESIGN	0.5913039943812377	DESIGN	0.40869600561876224	WITHOUT_CLASSIFICATION
todo : what else to do here?	DESIGN	0.9919205578021337	WITHOUT_CLASSIFICATION	0.008079442197866164	DESIGN
todo : modify the class definition if not already transformed...	DESIGN	0.9973652167633812	WITHOUT_CLASSIFICATION	0.002634783236618727	DESIGN
todo : what else to do here?	DESIGN	0.9919205578021337	WITHOUT_CLASSIFICATION	0.008079442197866164	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call start	DESIGN	0.9978497563452612	WITHOUT_CLASSIFICATION	0.0021502436547388135	DESIGN
this is called by SessionFactory irregardless; we just disregard here; could also add a check to SessionFactory to only conditionally call stop	DESIGN	0.9981419317617105	WITHOUT_CLASSIFICATION	0.0018580682382895028	DESIGN
TODO: to handle concurrent writes correctly, this should return a Lock to the client	DESIGN	0.9918439497839233	DESIGN	0.008156050216076731	WITHOUT_CLASSIFICATION
put() has nowait semantics, is this really appropriate? note that it needs to be async replication, never local or sync	DESIGN	0.8499561339104702	WITHOUT_CLASSIFICATION	0.15004386608952977	DESIGN
TODO: to handle concurrent writes correctly, the client should pass in a Lock	DESIGN	0.8478267776938176	DESIGN	0.15217322230618238	WITHOUT_CLASSIFICATION
TODO: assumes all collections disassemble to an array!	DESIGN	0.9394399216496541	WITHOUT_CLASSIFICATION	0.060560078350346054	DESIGN
TODO: reuse the PreLoadEvent	DESIGN	0.6442458475930866	WITHOUT_CLASSIFICATION	0.35575415240691355	DESIGN
todo: this was added to support initializing an entity's EntityEntry snapshot during reattach; this should be refactored to instead expose a method to assemble a EntityEntry based on this state for return.	DESIGN	0.7569753048706415	WITHOUT_CLASSIFICATION	0.24302469512935854	DESIGN
todo : what is the implication of this?	DESIGN	0.9788559937698865	WITHOUT_CLASSIFICATION	0.02114400623011348	DESIGN
use COUNT as the default. This mimics the old behavior, although NONE might be a better option moving forward in the case of callable	DESIGN	0.9527800127298245	WITHOUT_CLASSIFICATION	0.047219987270175456	DESIGN
TODO: joinKeyColumnName & foreignKeyColumnName should be called either here or at a slightly higer level in the stack (to get all the information we need) Right now HbmBinder does not support the	DESIGN	0.987852113971106	DESIGN	0.012147886028893952	WITHOUT_CLASSIFICATION
TODO: suck this into initLaziness!	DESIGN	0.9326084998285656	DESIGN	0.06739150017143437	WITHOUT_CLASSIFICATION
we have to set up the table later!! yuck	DESIGN	0.9998641814802968	WITHOUT_CLASSIFICATION	1.3581851970322545E-4	DESIGN
TODO: better to degrade to lazy="false" if uninstrumented	DESIGN	0.9416550247928711	DESIGN	0.05834497520712898	WITHOUT_CLASSIFICATION
todo : again, how should this work for non-pojo entities?	DESIGN	0.9412377408922157	WITHOUT_CLASSIFICATION	0.05876225910778439	DESIGN
TODO: this is a bit of copy/paste from IndexedCollection.createPrimaryKey()	DESIGN	0.995788288413746	DESIGN	0.004211711586254026	WITHOUT_CLASSIFICATION
This inner class implements a case statement....perhaps im being a bit over-clever here	DESIGN	0.5803961197213751	DESIGN	0.419603880278625	WITHOUT_CLASSIFICATION
TODO: bad implementation, cos it depends upon ordering of mapping doc fixing this requires that Collection/PersistentClass gain access to the Mappings reference from Configuration (or the filterDefinitions map directly) sometime during Configuration.buildSessionFactory (after all the types/filter-defs are known and before building persisters).	DESIGN	0.9768500947691509	DESIGN	0.0231499052308492	WITHOUT_CLASSIFICATION
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9965014622131448	DESIGN	0.003498537786855075	WITHOUT_CLASSIFICATION
hack/workaround as sqlquery impl depend on having a key.	DESIGN	0.9996138926476194	WITHOUT_CLASSIFICATION	3.8610735238065683E-4	DESIGN
FIXME: get the PersistentClass	DESIGN	0.5507910525410292	DESIGN	0.44920894745897066	WITHOUT_CLASSIFICATION
FIXME: get the PersistentClass	DESIGN	0.5507910525410292	DESIGN	0.44920894745897066	WITHOUT_CLASSIFICATION
Icky workaround for MySQL bug:	DESIGN	0.9193656330606544	DESIGN	0.08063436693934557	WITHOUT_CLASSIFICATION
TODO: Somehow add the newly created foreign keys to the internal collection	DESIGN	0.7880338481764247	DESIGN	0.2119661518235753	WITHOUT_CLASSIFICATION
TODO possibly relax that	DESIGN	0.6694628460365064	WITHOUT_CLASSIFICATION	0.3305371539634936	DESIGN
TODO possibly relax that	DESIGN	0.6694628460365064	WITHOUT_CLASSIFICATION	0.3305371539634936	DESIGN
TODO possibly relax that	DESIGN	0.6694628460365064	WITHOUT_CLASSIFICATION	0.3305371539634936	DESIGN
use of a stringbuffer to workaround a JDK bug	DESIGN	0.9965014622131448	DESIGN	0.003498537786855075	WITHOUT_CLASSIFICATION
use a degenerated strategy for backward compatibility	DESIGN	0.9982200713766654	WITHOUT_CLASSIFICATION	0.0017799286233346951	DESIGN
Sets can be just a view of a part of another collection. do we need to copy it to be sure it won't be changing underneath us? ie. this.set.addAll(set);	DESIGN	0.9363632767442039	WITHOUT_CLASSIFICATION	0.063636723255796	DESIGN
note that i parameter is now unused (delete it?)	DESIGN	0.9426035762786784	DESIGN	0.05739642372132164	WITHOUT_CLASSIFICATION
just to help out during the load (ugly, i know)	DESIGN	0.9995084256145547	WITHOUT_CLASSIFICATION	4.915743854453518E-4	DESIGN
TODO : safe to interpret "map.remove(key) == null" as non-dirty?	DESIGN	0.8925812572442811	WITHOUT_CLASSIFICATION	0.10741874275571887	DESIGN
yick! need this for proper serialization/deserialization handling...	DESIGN	0.8931679602279313	WITHOUT_CLASSIFICATION	0.10683203977206869	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8406946234593519	DESIGN	0.15930537654064805	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8406946234593519	DESIGN	0.15930537654064805	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
TODO: get SQL rendering out of this package!	DESIGN	0.8406946234593519	DESIGN	0.15930537654064805	WITHOUT_CLASSIFICATION
TODO : not sure this is correct, could not find docs on how to do this.	DESIGN	0.9998301268867131	DESIGN	1.6987311328692904E-4	WITHOUT_CLASSIFICATION
HSQL has no Blob/Clob support .... but just put these here for now!	DESIGN	0.9993855574845057	WITHOUT_CLASSIFICATION	6.144425154942609E-4	DESIGN
does this need holdlock also? : return tableName + " with (updlock, rowlock, holdlock)";	DESIGN	0.9989286427257317	WITHOUT_CLASSIFICATION	0.001071357274268267	DESIGN
sql-server, at least needed this dropped after use; strange!	DESIGN	0.9984465523197563	WITHOUT_CLASSIFICATION	0.0015534476802436653	DESIGN
todo : is there really any reason to kkeep trying if this fails once?	DESIGN	0.9996643019786311	WITHOUT_CLASSIFICATION	3.3569802136892063E-4	DESIGN
TBD should this be varbinary($1)? registerColumnType(Types.VARBINARY, "binary($1)");	DESIGN	0.9401418416615113	WITHOUT_CLASSIFICATION	0.05985815833848861	DESIGN
is it necessary to register %exact since it can only appear in a where clause?	DESIGN	0.9994467470973902	WITHOUT_CLASSIFICATION	5.532529026097712E-4	DESIGN
xmlforest requires a new kind of function constructor	DESIGN	0.9991034930136403	WITHOUT_CLASSIFICATION	8.965069863597007E-4	DESIGN
Does this dialect support the ALTER TABLE syntax?	DESIGN	0.9648768879687547	WITHOUT_CLASSIFICATION	0.03512311203124533	DESIGN
Do we need to qualify index names with the schema name?	DESIGN	0.9978466093883231	WITHOUT_CLASSIFICATION	0.0021533906116769043	DESIGN
Does this dialect support the UNIQUE column syntax?	DESIGN	0.9894541922433765	WITHOUT_CLASSIFICATION	0.010545807756623478	DESIGN
Does this dialect support check constraints?	DESIGN	0.9692385743306882	WITHOUT_CLASSIFICATION	0.030761425669311823	DESIGN
Do we need to drop constraints before dropping tables in this dialect?	DESIGN	0.9771365397765027	WITHOUT_CLASSIFICATION	0.022863460223497258	DESIGN
Does this dialect support the FOR UPDATE syntax?	DESIGN	0.9513471480888293	WITHOUT_CLASSIFICATION	0.048652851911170795	DESIGN
Does this dialect support the Oracle-style FOR UPDATE NOWAIT syntax?	DESIGN	0.9513471480888293	WITHOUT_CLASSIFICATION	0.048652851911170795	DESIGN
Does this dialect support FOR UPDATE OF, allowing particular rows to be locked?	DESIGN	0.5910379509028401	DESIGN	0.4089620490971601	WITHOUT_CLASSIFICATION
note there is a wierd implementation in the client side	DESIGN	0.9999203263473192	WITHOUT_CLASSIFICATION	7.967365268083113E-5	DESIGN
TODO: never reached, since getTypeName() actually throws an exception!	DESIGN	0.885032443568964	WITHOUT_CLASSIFICATION	0.11496755643103601	DESIGN
todo : should we additionally check the current isolation mode explicitly?	DESIGN	0.9992455947851906	WITHOUT_CLASSIFICATION	7.544052148094297E-4	DESIGN
todo : remove this and just have subclasses use Isolater/IsolatedWork directly...	DESIGN	0.9965900411757737	WITHOUT_CLASSIFICATION	0.003409958824226463	DESIGN
TODO: should orphans really be deleted during lock???	DESIGN	0.9813654837289694	DESIGN	0.01863451627103068	WITHOUT_CLASSIFICATION
orphans should not be deleted during merge??	DESIGN	0.9660026836542462	WITHOUT_CLASSIFICATION	0.03399731634575378	DESIGN
orphans should not be deleted during copy??	DESIGN	0.9660026836542462	WITHOUT_CLASSIFICATION	0.03399731634575378	DESIGN
I suppose?	DESIGN	0.9971968102186699	WITHOUT_CLASSIFICATION	0.002803189781330121	DESIGN
TODO: suck this logic into the collection!	DESIGN	0.8254361461800971	DESIGN	0.17456385381990283	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then get the ID from collection.getOwner()	DESIGN	0.9743455636427515	WITHOUT_CLASSIFICATION	0.025654436357248504	DESIGN
TODO:refactor + make this method private	DESIGN	0.9957120730387495	WITHOUT_CLASSIFICATION	0.004287926961250408	DESIGN
todo : we can actually just determine this from the incoming EntityEntry-s	DESIGN	0.9970843136879313	WITHOUT_CLASSIFICATION	0.002915686312068696	DESIGN
TODO: Should this be an InitializeEntityEventListener??? (watch out for performance!)	DESIGN	0.9932562358321224	DESIGN	0.006743764167877619	WITHOUT_CLASSIFICATION
TODO: better to pass the id in as an argument?	DESIGN	0.8677869364922753	WITHOUT_CLASSIFICATION	0.13221306350772463	DESIGN
todo : potentially look at optimizing these two arrays	DESIGN	0.991743120545511	WITHOUT_CLASSIFICATION	0.008256879454488986	DESIGN
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9999097618396675	DESIGN	9.023816033240805E-5	WITHOUT_CLASSIFICATION
trim done to workaround stupid oracle bug that cant handle whitespaces before a { in a sp	DESIGN	0.9999097618396675	DESIGN	9.023816033240805E-5	WITHOUT_CLASSIFICATION
TODO: temporary	DESIGN	0.9213190600842684	DESIGN	0.07868093991573145	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.961758676730576	DESIGN	0.03824132326942393	WITHOUT_CLASSIFICATION
TODO: not quite sure about the full implications of this!	DESIGN	0.961758676730576	DESIGN	0.03824132326942393	WITHOUT_CLASSIFICATION
TODO: ugly here:	DESIGN	0.9884468470714901	DESIGN	0.011553152928509846	WITHOUT_CLASSIFICATION
this is kinda the best we can do...	DESIGN	0.9660909280352309	WITHOUT_CLASSIFICATION	0.033909071964769236	DESIGN
TODO: this needn't exclude subclasses...	DESIGN	0.7116941805491631	DESIGN	0.28830581945083694	WITHOUT_CLASSIFICATION
todo : need map? the prob is a proper key, right?	DESIGN	0.8326752225675561	DESIGN	0.16732477743244387	WITHOUT_CLASSIFICATION
todo : i'd much rather have this done from #endLoadingCollection(CollectionPersister,LoadingCollectionEntry)...	DESIGN	0.9912262231356216	WITHOUT_CLASSIFICATION	0.008773776864378365	DESIGN
todo : hack!!! NOTE : here we cleanup the load context when we have no more local LCE entries. This "works" for the time being because really only the collection load contexts are implemented. Long term, this cleanup should become part of the "close result set" processing from the (sandbox/jdbc) jdbc-container code.	DESIGN	0.9884524446232121	WITHOUT_CLASSIFICATION	0.01154755537678792	DESIGN
todo : should really move this log statement to CollectionType, where this is used from...	DESIGN	0.9671378475667656	DESIGN	0.03286215243323448	WITHOUT_CLASSIFICATION
TODO : keep seperate notions of QT[] here for shallow/non-shallow queries...	DESIGN	0.6431614143051262	DESIGN	0.3568385856948737	WITHOUT_CLASSIFICATION
TODO : add this info to the translator and aggregate it here...	DESIGN	0.7417579972797816	DESIGN	0.2582420027202183	WITHOUT_CLASSIFICATION
TODO: move into collection type, so we can use polymorphism!	DESIGN	0.9963318879185714	DESIGN	0.0036681120814286597	WITHOUT_CLASSIFICATION
todo : should we check the current isolation mode explicitly?	DESIGN	0.9992455947851906	WITHOUT_CLASSIFICATION	7.544052148094297E-4	DESIGN
TODO: suck into event class	DESIGN	0.8642977841300363	DESIGN	0.13570221586996373	WITHOUT_CLASSIFICATION
do we even really need this? the update will fail anyway....	DESIGN	0.976002440217463	WITHOUT_CLASSIFICATION	0.02399755978253699	DESIGN
hum ... should we cascade anyway? throw an exception? fine like it is?	DESIGN	0.8625417888298018	WITHOUT_CLASSIFICATION	0.13745821117019816	DESIGN
TODO: would it be better to do a refresh from db?	DESIGN	0.986318046483502	DESIGN	0.013681953516497985	WITHOUT_CLASSIFICATION
TODO: we use two visitors here, inefficient!	DESIGN	0.897735649568656	DESIGN	0.10226435043134396	WITHOUT_CLASSIFICATION
this class has no proxies (so do a shortcut)	DESIGN	0.9924299765589617	WITHOUT_CLASSIFICATION	0.0075700234410383755	DESIGN
PostLoad is needed for EJB3 TODO: reuse the PostLoadEvent...	DESIGN	0.7312938763439805	WITHOUT_CLASSIFICATION	0.2687061236560194	DESIGN
TODO: put this stuff back in to read snapshot from the second-level cache (needs some extra work)	DESIGN	0.8734326016289461	DESIGN	0.1265673983710539	WITHOUT_CLASSIFICATION
null or brand new collection this will also (inefficiently) handle arrays, which have no snapshot, so we can't do any better	DESIGN	0.9980518294239656	WITHOUT_CLASSIFICATION	0.0019481705760343792	DESIGN
TODO: is this 100% correct?	DESIGN	0.9964041665067512	DESIGN	0.003595833493248752	WITHOUT_CLASSIFICATION
TODO: iteratively get transient entities and retry merge until one of the following conditions: 1) transientCopyCache.size() == 0 2) transientCopyCache.size() is not decreasing and copyCache.size() is not increasing TODO: find out if retrying can add entities to copyCache (don't think it can...) For now, just retry once; throw TransientObjectException if there are still any transient entities	DESIGN	0.8321592040776463	DESIGN	0.16784079592235374	WITHOUT_CLASSIFICATION
entity name will not be available for non-POJO entities TODO: cache the entity name somewhere so that it is available to this exception	DESIGN	0.9995429313962787	DESIGN	4.570686037212332E-4	WITHOUT_CLASSIFICATION
TODO: we should throw an exception if we really know for sure that this is a detached instance, rather than just assuming throw new StaleObjectStateException(entityName, id);	DESIGN	0.9979740349881444	DESIGN	0.002025965011855679	WITHOUT_CLASSIFICATION
TODO : perhaps we should additionally require that the incoming entity version be equivalent to the defined unsaved-value?	DESIGN	0.9862249224680519	DESIGN	0.013775077531948095	WITHOUT_CLASSIFICATION
perhaps this should be an exception since it is only ever used in the above method?	DESIGN	0.9580071062440659	DESIGN	0.04199289375593396	WITHOUT_CLASSIFICATION
Put a placeholder in entries, so we don't recurse back and try to save() the same object again. QUESTION: should this be done before onSave() is called? likewise, should it be done before onUpdate()?	DESIGN	0.5219162379552327	DESIGN	0.4780837620447674	WITHOUT_CLASSIFICATION
TODO: merge into one method!	DESIGN	0.9428918905014416	DESIGN	0.05710810949855839	WITHOUT_CLASSIFICATION
TODO: refactor to .sql package	DESIGN	0.9750350201028419	DESIGN	0.024964979897158096	WITHOUT_CLASSIFICATION
Provides query splitting methods, which were originally in QueryTranslator. <br> TODO: This will need to be refactored at some point. @author josh	DESIGN	0.9974820192282398	DESIGN	0.0025179807717603158	WITHOUT_CLASSIFICATION
TODO: this is one of the ugliest and most fragile pieces of code in Hibernate....	DESIGN	0.9875982559048614	DESIGN	0.012401744095138565	WITHOUT_CLASSIFICATION
todo : temporary needed because currently persister is the one that creates and renders the join fragments for inheritence hierarchies...	DESIGN	0.9989896729628422	WITHOUT_CLASSIFICATION	0.0010103270371577058	DESIGN
TODO : better way?!?	DESIGN	0.9121058274067005	DESIGN	0.08789417259329942	WITHOUT_CLASSIFICATION
Not possible to simply re-use the versionPropertyNode here as it causes OOM errors due to circularity :(	DESIGN	0.9864624711581986	WITHOUT_CLASSIFICATION	0.013537528841801367	DESIGN
TODO:this is only needed during compilation .. can we eliminate the instvar?	DESIGN	0.9986272649251976	WITHOUT_CLASSIFICATION	0.0013727350748024218	DESIGN
TODO : this is a bit dodgy, come up with a better way to check this (plus see above comment)	DESIGN	0.9997579710089849	DESIGN	2.4202899101522738E-4	WITHOUT_CLASSIFICATION
even here, if only properties mapped to the "base table" are referenced in the set and where clauses, this could be handled by the BasicDelegate. TODO : decide if it is better performance-wise to perform that check, or to simply use the MultiTableUpdateDelegate	DESIGN	0.9999751429900848	DESIGN	2.4857009915197447E-5	WITHOUT_CLASSIFICATION
TODO: switch statements are always evil! We already had bugs because of forgotten token types. Use polymorphism for this!	DESIGN	0.7272467237938925	WITHOUT_CLASSIFICATION	0.2727532762061074	DESIGN
TODO : we really need to be able to deal with component paths here also; this is difficult because the hql-sql grammar expects all those node types to be FromReferenceNodes. One potential fix here would be to convert the IntoClause to just use a FromClause/FromElement combo (as a child of the InsertStatement) and move all this logic into the InsertStatement. That's probably the easiest approach (read: least amount of changes to the grammar and code), but just doesn't feel right as then an insert would contain 2 from-clauses	DESIGN	0.9984944684630216	DESIGN	0.0015055315369783685	WITHOUT_CLASSIFICATION
really there are two situations where it should be ok to allow the insertion into properties defined on a superclass: 1) union-subclass with an abstract root entity 2) discrim-subclass #1 is handled already because of the fact that UnionSubclassPersister alreay always returns 0 for this call... we may want to disallow it for discrim-subclass just for consistency-sake (currently does not work anyway)...	DESIGN	0.7305766276679733	DESIGN	0.26942337233202684	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
implicit joins are always(?) ok to reuse	DESIGN	0.9998719946136877	WITHOUT_CLASSIFICATION	1.280053863122867E-4	DESIGN
TODO : we may also want to check that the types here map to exactly one column/JDBC-type can't think of a situation where arithmetic expression between multi-column mappings makes any sense.	DESIGN	0.624539769286594	DESIGN	0.37546023071340595	WITHOUT_CLASSIFICATION
we do not know either type BLIND GUESS!	DESIGN	0.9883989544281134	WITHOUT_CLASSIFICATION	0.01160104557188663	DESIGN
TODO: used to be exprNoParens! was this needed?	DESIGN	0.9999999231040448	DESIGN	7.689595520946562E-8	WITHOUT_CLASSIFICATION
TODO: Replace this with a more elegant solution.	DESIGN	0.9990729241149049	DESIGN	9.270758850950961E-4	WITHOUT_CLASSIFICATION
TODO: Should this really return null? If not, figure out something better to do here.	DESIGN	0.994852888587556	DESIGN	0.005147111412443953	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of this package!	DESIGN	0.8406946234593519	DESIGN	0.15930537654064805	WITHOUT_CLASSIFICATION
yuck!	DESIGN	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
ignore it; the incoming property could not be found so we cannot be sure what to do here. At the very least, the safest is to simply not apply any dereference toggling...	DESIGN	0.927342843259659	DESIGN	0.07265715674034103	WITHOUT_CLASSIFICATION
TODO : most of below was taken verbatim from DotNode; should either delegate this logic or super-type it	DESIGN	0.6781377031469707	DESIGN	0.32186229685302936	WITHOUT_CLASSIFICATION
otherwise, a trim-specification and/or a trim-character have been specified; we need to decide which options are present and "do the right thing" should leading trim-characters be trimmed? should trailing trim-characters be trimmed? the trim-character the trim-source	DESIGN	0.9954304810306019	WITHOUT_CLASSIFICATION	0.004569518969398003	DESIGN
todo: we should really just collect these from the various SelectExpressions, rather than regenerating here	DESIGN	0.5612988413146891	WITHOUT_CLASSIFICATION	0.43870115868531095	DESIGN
TODO: is this a bit ugly?	DESIGN	0.9973035558398556	DESIGN	0.002696444160144465	WITHOUT_CLASSIFICATION
Need a better way to define the suffixes here...	DESIGN	0.9164012084088573	WITHOUT_CLASSIFICATION	0.08359879159114267	DESIGN
TODO: something much better - look at the type of the other expression! TODO: Have comparisonExpression and/or arithmeticExpression rules complete the resolution of boolean nodes.	DESIGN	0.9981222092003781	DESIGN	0.001877790799621936	WITHOUT_CLASSIFICATION
TODO : what amount of significant digits need to be supported here? - from the DecimalFormat docs: [significant digits] = [minimum integer digits] + [maximum fraction digits]	DESIGN	0.8577211157085192	DESIGN	0.14227888429148083	WITHOUT_CLASSIFICATION
Needed the "clazz_" check to work around union-subclasses TODO : is there a way to tell whether a persister is truly discrim-column based inheritence?	DESIGN	0.990262186468153	DESIGN	0.009737813531847004	WITHOUT_CLASSIFICATION
We should actually rework this class to not implement Parser and just process path expressions in the most convenient way.	DESIGN	0.5598207771233014	WITHOUT_CLASSIFICATION	0.4401792228766986	DESIGN
The class is now way to complex!	DESIGN	0.9993711296611277	WITHOUT_CLASSIFICATION	6.28870338872257E-4	DESIGN
TODO: get SQL rendering out of here	DESIGN	0.8308998040539424	DESIGN	0.16910019594605757	WITHOUT_CLASSIFICATION
TODO: is there a better way?	DESIGN	0.9906108994735258	DESIGN	0.009389100526474231	WITHOUT_CLASSIFICATION
Must be done here because of side-effect! yuck...	DESIGN	0.9973233014237738	WITHOUT_CLASSIFICATION	0.0026766985762261743	DESIGN
name from a super query (a bit inelegant that it shows up here)	DESIGN	0.9899130338176528	WITHOUT_CLASSIFICATION	0.010086966182347216	DESIGN
We should reengineer this class so that, rather than the current ad - hoc linear approach to processing a stream of tokens, we instead build up a tree of expressions.	DESIGN	0.6711963340363032	WITHOUT_CLASSIFICATION	0.32880366596369687	DESIGN
this is ugly here, but needed because its a subquery	DESIGN	0.9780804696863022	WITHOUT_CLASSIFICATION	0.021919530313697734	DESIGN
unhappy about this being public ... is there a better way?	DESIGN	0.8610893729291559	WITHOUT_CLASSIFICATION	0.13891062707084417	DESIGN
Make sure this is a defined parameter and check the incoming value type TODO: what should be the actual exception type here?	DESIGN	0.9998665588269342	DESIGN	1.3344117306584192E-4	WITHOUT_CLASSIFICATION
TODO : this constructor form is only used from constructor directly below us; can it go away?	DESIGN	0.999711432254909	DESIGN	2.8856774509099345E-4	WITHOUT_CLASSIFICATION
TODO: COPY/PASTE FROM SessionImpl, pull up!	DESIGN	0.5314763107867724	WITHOUT_CLASSIFICATION	0.4685236892132276	DESIGN
TODO : should remove this exposure and have all references to the session's batcher use the ConnectionManager.	DESIGN	0.9963655430805404	DESIGN	0.003634456919459656	WITHOUT_CLASSIFICATION
todo : should this get moved to PersistentContext? logically, is PersistentContext the "thing" to which an interceptor gets attached?	DESIGN	0.6591273717285895	WITHOUT_CLASSIFICATION	0.34087262827141046	DESIGN
TODO: what type?	DESIGN	0.895450411508991	DESIGN	0.10454958849100905	WITHOUT_CLASSIFICATION
todo : should seriously consider not allowing a txn to begin from a child session can always route the request to the root session...	DESIGN	0.9696680815746545	WITHOUT_CLASSIFICATION	0.030331918425345425	DESIGN
short-circuit for performance...	DESIGN	0.9994747963399838	WITHOUT_CLASSIFICATION	5.252036600161877E-4	DESIGN
not absolutely necessary, but does help with aggressive release	DESIGN	0.9931518957214586	WITHOUT_CLASSIFICATION	0.006848104278541467	DESIGN
TODO : remove these last two as batcher is no longer managing connections	DESIGN	0.8681135497111775	DESIGN	0.1318864502888226	WITHOUT_CLASSIFICATION
work around a bug in all known connection pools....	DESIGN	0.7172106204368777	WITHOUT_CLASSIFICATION	0.2827893795631223	DESIGN
TODO : make this the factory for "entity mode related" sessions; also means making this the target of transaction-synch and the thing that knows how to cascade things between related sessions At that point, perhaps this thing is a "SessionContext", and ConnectionManager is a "JDBCContext"? A "SessionContext" should live in the impl package...	DESIGN	0.9999869097439579	DESIGN	1.3090256042080507E-5	WITHOUT_CLASSIFICATION
TODO: does this really need to be here? does the collection already have it's own up-to-date snapshot?	DESIGN	0.9999335069321126	DESIGN	6.649306788732994E-5	WITHOUT_CLASSIFICATION
TODO: the i==entitySpan-1 bit depends upon subclass implementation (very bad)	DESIGN	0.9963543025601863	DESIGN	0.003645697439813701	WITHOUT_CLASSIFICATION
This form used from annotations (?). Essentially the same as the above using a resultset-mapping reference, but without cacheMode, readOnly, and comment. FIXME: annotations do not use it, so it can be remove from my POV @deprecated @param query The sql query string @param resultSetRef The result-set-mapping name @param querySpaces Any specified query spaces (used for auto-flushing) @param cacheable Whether the query results are cacheable @param cacheRegion If cacheable, the region into which to store the results @param timeout A JDBC-level timeout to be applied @param fetchSize A JDBC-level fetch-size to be applied @param flushMode The flush mode to use for this query @param parameterTypes parameter type map @param callable Does the query string represent a callable object (i.e., proc)	DESIGN	0.9999983446452846	DESIGN	1.6553547154530568E-6	WITHOUT_CLASSIFICATION
todo : add the notion of enabled filters to the CacheKey to differentiate filtered collections from non-filtered; but CacheKey is currently used for both collections and entities; would ideally need to define two seperate ones; currently this works in conjuction with the check on DefaultInitializeCollectionEventHandler.initializeCollectionFromCache() (which makes sure to not read from cache with enabled filters). EARLY EXIT!!!!!	DESIGN	0.8544148016990031	DESIGN	0.1455851983009969	WITHOUT_CLASSIFICATION
for sets, we should end the collection load after resolving the entities, since we might call hashCode() on the elements TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9998562966137339	DESIGN	1.4370338626622348E-4	WITHOUT_CLASSIFICATION
This is not very nice (and quite slow):	DESIGN	0.9178127026901852	DESIGN	0.08218729730981474	WITHOUT_CLASSIFICATION
use of trim() here is ugly?	DESIGN	0.9898568072106042	WITHOUT_CLASSIFICATION	0.010143192789395844	DESIGN
TODO: this is too conservative; if all preceding joins were also inner joins, we could use an inner join here	DESIGN	0.9996028286127325	DESIGN	3.971713872674355E-4	WITHOUT_CLASSIFICATION
TODO: look at the owning property and check that it isn't lazy (by instrumentation)	DESIGN	0.8615507827719054	DESIGN	0.13844921722809458	WITHOUT_CLASSIFICATION
TODO: inefficient	DESIGN	0.5091240075607919	DESIGN	0.4908759924392082	WITHOUT_CLASSIFICATION
why does this matter?	DESIGN	0.9734111241443265	WITHOUT_CLASSIFICATION	0.02658887585567355	DESIGN
from the collection of associations, locate OJA for the ManyToOne corresponding to this persister to fully define the many-to-many; we need that OJA so that we can use its alias here TODO : is there a better way here?	DESIGN	0.9999782680452242	DESIGN	2.1731954775934867E-5	WITHOUT_CLASSIFICATION
TODO: this class depends directly upon CriteriaImpl, in the impl package ... add a CriteriaImplementor interface	DESIGN	0.9993265745408456	DESIGN	6.734254591543206E-4	WITHOUT_CLASSIFICATION
TODO: add a CriteriaImplementor interface this class depends directly upon CriteriaImpl in the impl package...	DESIGN	0.9901113638821158	DESIGN	0.009888636117884124	WITHOUT_CLASSIFICATION
TODO : not so sure this is needed...	DESIGN	0.7473562704993217	DESIGN	0.25264372950067826	WITHOUT_CLASSIFICATION
meant to handle dynamic instantiation queries...(Copy from QueryLoader)	DESIGN	0.9991310320064648	WITHOUT_CLASSIFICATION	8.689679935352812E-4	DESIGN
TODO: The order in which entities are saved may matter (e.g., a particular transient entity may need to be saved before other transient entities can be saved; Keep retrying the batch of transient entities until either: 1) there are no transient entities left in transientCopyCache or 2) no transient entities were saved in the last batch For now, just run through the transient entities and retry the merge	DESIGN	0.8222112425289996	WITHOUT_CLASSIFICATION	0.1777887574710005	DESIGN
todo: this might really even be moved into the cfg package and used as the basis for all things which are configurable.	DESIGN	0.997594551189788	DESIGN	0.002405448810211872	WITHOUT_CLASSIFICATION
todo : currently expects that the individual with expressions apply to the same sql table join. This may not be the case for joined-subclass where the property values might be coming from different tables in the joined hierarchy. At some point we should expand this to support that capability. However, that has some difficulties: 1) the biggest is how to handle ORs when the individual comparisons are linked to different sql joins. 2) here we would need to track each comparison individually, along with the join alias to which it applies and then pass that information back to the FromElement so it can pass it along to the JoinSequence	DESIGN	0.9492693334327265	WITHOUT_CLASSIFICATION	0.05073066656727351	DESIGN
this function has a template -> restore output, apply the template and write the result out TODO: Downcast to avoid using an interface? Yuck.	DESIGN	0.910466127351739	WITHOUT_CLASSIFICATION	0.08953387264826089	DESIGN
at some point the generate phase needs to be moved out of here, because a single object-level DML might spawn multiple SQL DML command executions. Possible to just move the sql generation for dml stuff, but for consistency-sake probably best to just move responsiblity for the generation phase completely into the delegates (QueryLoader/StatementExecutor) themselves. Also, not sure why QueryLoader currently even has a dependency on this at all; does it need it? Ideally like to see the walker itself given to the delegates directly...	DESIGN	0.9999999549161384	DESIGN	4.508386169239291E-8	WITHOUT_CLASSIFICATION
get the right object from the list ... would it be easier to just call getEntity() ??	DESIGN	0.9911618082652253	WITHOUT_CLASSIFICATION	0.008838191734774747	DESIGN
TODO should we just collect these like with the collections above?	DESIGN	0.9976802598811947	DESIGN	0.002319740118805198	WITHOUT_CLASSIFICATION
todo : better to handle dynamic filters through implicit DynamicFilterParameterSpecification see the discussion there in DynamicFilterParameterSpecification's javadocs as to why it is currently not done that way.	DESIGN	0.7943915240800851	WITHOUT_CLASSIFICATION	0.205608475919915	DESIGN
/ USED ONLY FOR REGRESSION TESTING!!!! todo : obviously get rid of all this junk ;) /	DESIGN	0.9982829416951207	WITHOUT_CLASSIFICATION	0.0017170583048793282	DESIGN
create an index on the key columns??	DESIGN	0.9999869666615636	WITHOUT_CLASSIFICATION	1.303333843641986E-5	DESIGN
TODO: deprecated, remove eventually	DESIGN	0.6872352065427537	DESIGN	0.3127647934572462	WITHOUT_CLASSIFICATION
create an index on the key columns??	DESIGN	0.9999869666615636	WITHOUT_CLASSIFICATION	1.303333843641986E-5	DESIGN
TODO: improve this hack!	DESIGN	0.9905134312800871	DESIGN	0.009486568719913014	WITHOUT_CLASSIFICATION
inheritance cycle detection (paranoid check)	DESIGN	0.998944114279618	WITHOUT_CLASSIFICATION	0.0010558857203820575	DESIGN
TODO: remove use of instanceof!	DESIGN	0.9510733610002222	DESIGN	0.0489266389997778	WITHOUT_CLASSIFICATION
shortcut	DESIGN	0.9997585834830554	WITHOUT_CLASSIFICATION	2.414165169447582E-4	DESIGN
TODO: handle the case of a foreign key to something other than the pk	DESIGN	0.5622177654294787	WITHOUT_CLASSIFICATION	0.43778223457052146	DESIGN
create an index on the key columns??	DESIGN	0.9999869666615636	WITHOUT_CLASSIFICATION	1.303333843641986E-5	DESIGN
todo : remove	DESIGN	0.9986940080446305	WITHOUT_CLASSIFICATION	0.0013059919553695348	DESIGN
todo : remove	DESIGN	0.9986940080446305	WITHOUT_CLASSIFICATION	0.0013059919553695348	DESIGN
todo : remove	DESIGN	0.9986940080446305	WITHOUT_CLASSIFICATION	0.0013059919553695348	DESIGN
todo : throw exception?	DESIGN	0.99912703799389	WITHOUT_CLASSIFICATION	8.729620061099094E-4	DESIGN
todo : throw exception? maybe warn if not the same?	DESIGN	0.9965004592631782	WITHOUT_CLASSIFICATION	0.003499540736821666	DESIGN
TODO: make EntityPersister not depend on SessionFactoryImplementor interface, if possible	DESIGN	0.9682210420288403	DESIGN	0.03177895797115979	WITHOUT_CLASSIFICATION
TODO: is there a more elegant way than downcasting?	DESIGN	0.9816784477104273	DESIGN	0.018321552289572645	WITHOUT_CLASSIFICATION
TODO: encapsulate the protected instance variables!	DESIGN	0.9364009148504621	DESIGN	0.06359908514953799	WITHOUT_CLASSIFICATION
should indicate that we are processing an INSERT/UPDATE/DELETE query with a subquery implied via a collection property function. Here, we need to use the table name itself as the qualification alias. TODO : verify this works for all databases... TODO : is this also the case in non-"indexed" scenarios?	DESIGN	0.9753664441666998	DESIGN	0.024633555833300163	WITHOUT_CLASSIFICATION
TODO: copy/paste from insertRows()	DESIGN	0.6246129378166131	DESIGN	0.3753870621833868	WITHOUT_CLASSIFICATION
TODO: copy/paste from recreate()	DESIGN	0.6246129378166131	DESIGN	0.3753870621833868	WITHOUT_CLASSIFICATION
should this interface extend PropertyMapping?	DESIGN	0.916559273497218	WITHOUT_CLASSIFICATION	0.08344072650278193	DESIGN
ie. the subquery! yuck!	DESIGN	0.9994798203570218	WITHOUT_CLASSIFICATION	5.201796429782979E-4	DESIGN
TODO: move to .sql package!!	DESIGN	0.9663517920759196	DESIGN	0.033648207924080416	WITHOUT_CLASSIFICATION
TODO: code duplication with SingleTableEntityPersister	DESIGN	0.8864291293482206	DESIGN	0.1135708706517794	WITHOUT_CLASSIFICATION
TODO: It would be really, really nice to use this to also model components!	DESIGN	0.9983824905001377	DESIGN	0.0016175094998622675	WITHOUT_CLASSIFICATION
TODO: two hashmap lookups here is one too many...	DESIGN	0.9739780470046197	DESIGN	0.026021952995380373	WITHOUT_CLASSIFICATION
TODO: code duplication with JoinedSubclassEntityPersister	DESIGN	0.8864291293482206	DESIGN	0.1135708706517794	WITHOUT_CLASSIFICATION
perhaps not really necessary...	DESIGN	0.7843913745567107	WITHOUT_CLASSIFICATION	0.21560862544328926	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getIdentiferColumnNames() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9947836933028406	WITHOUT_CLASSIFICATION	0.005216306697159398	DESIGN
NOTE: this assumes something about how propertySelectFragment is implemented by the subclass! was toUnqotedAliasStrings( getdiscriminatorColumnName() ) before - now tried to remove that unqoting and missing aliases..	DESIGN	0.9947836933028406	WITHOUT_CLASSIFICATION	0.005216306697159398	DESIGN
TODO: should we use SELECT .. FOR UPDATE?	DESIGN	0.9891225006601442	DESIGN	0.010877499339855753	WITHOUT_CLASSIFICATION
TODO: optimize this better!	DESIGN	0.8282187195323429	DESIGN	0.17178128046765712	WITHOUT_CLASSIFICATION
TODO: should we allow suffixes on these ?	DESIGN	0.9994056707066699	DESIGN	5.943292933301725E-4	WITHOUT_CLASSIFICATION
This is really ugly, but necessary:	DESIGN	0.99648296331695	WITHOUT_CLASSIFICATION	0.0035170366830500253	DESIGN
ugly little workaround for fact that createUniqueKeyLoaders() does not handle component properties	DESIGN	0.9869931234826717	DESIGN	0.013006876517328424	WITHOUT_CLASSIFICATION
TODO: disable batch loading if lockMode > READ?	DESIGN	0.989397626834127	WITHOUT_CLASSIFICATION	0.010602373165872866	DESIGN
append the SQL to return the generated identifier TODO: suck into Insert	DESIGN	0.5439928228906146	WITHOUT_CLASSIFICATION	0.4560071771093854	DESIGN
TODO: I am not so sure about the exception handling in this bit!	DESIGN	0.9980419874652594	DESIGN	0.0019580125347406162	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9500215122817086	DESIGN	0.04997848771829134	WITHOUT_CLASSIFICATION
TODO: move to .sql package, and refactor with similar things!	DESIGN	0.9816799028119351	DESIGN	0.018320097188064932	WITHOUT_CLASSIFICATION
TODO: implement functionality this might be painful to do here, as the "join post processing" for the subquery has already been performed (meaning that for theta-join dialects, the join conditions have already been moved over to the where clause). A "simple" solution here might to perform "join post processing" once for the entire query (including any subqueries) at one fell swoop	DESIGN	0.9999931778829316	DESIGN	6.822117068441849E-6	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9745525947245953	WITHOUT_CLASSIFICATION	0.025447405275404723	DESIGN
kinda ugly, but needed for collections with a "." node mapping	DESIGN	0.9995193050647608	WITHOUT_CLASSIFICATION	4.806949352390845E-4	DESIGN
is this ok?	DESIGN	0.9963672936811575	WITHOUT_CLASSIFICATION	0.0036327063188426175	DESIGN
TODO: perhaps this should be some other RuntimeException...	DESIGN	0.9999765300484101	DESIGN	2.346995158985394E-5	WITHOUT_CLASSIFICATION
TODO: make this a bit nicer	DESIGN	0.9953978241043127	DESIGN	0.00460217589568741	WITHOUT_CLASSIFICATION
Yuck:	DESIGN	0.998676883650631	WITHOUT_CLASSIFICATION	0.0013231163493689511	DESIGN
TODO: we should provide some way to get keys of collection of statistics to make it easier to retrieve from a GUI perspective	DESIGN	0.9998865373392227	DESIGN	1.134626607772872E-4	WITHOUT_CLASSIFICATION
@return collection removal FIXME: even if isInverse="true"?	DESIGN	0.8584920114057584	DESIGN	0.14150798859424168	WITHOUT_CLASSIFICATION
TODO : will need reference to session factory to fully complete HHH-1907	DESIGN	0.9851458848837763	DESIGN	0.01485411511622382	WITHOUT_CLASSIFICATION
TODO: currently keeps Getters and Setters (instead of PropertyAccessors) because of the way getGetter() and getSetter() are implemented currently; yuck!	DESIGN	0.9015951008066988	DESIGN	0.0984048991933011	WITHOUT_CLASSIFICATION
TODO: redesign how PropertyAccessors are acquired...	DESIGN	0.7877327857569248	DESIGN	0.21226721424307507	WITHOUT_CLASSIFICATION
todo : YUCK!!!	DESIGN	0.9997576495950009	WITHOUT_CLASSIFICATION	2.423504049990606E-4	DESIGN
TODO : YUCK!!! fix after HHH-1907 is complete	DESIGN	0.9842637570748909	DESIGN	0.015736242925109015	WITHOUT_CLASSIFICATION
TODO: need to make the majority of this functionality into a top-level support class for custom impl support	DESIGN	0.9710676041866384	DESIGN	0.02893239581336164	WITHOUT_CLASSIFICATION
TODO: design new lifecycle for ProxyFactory	DESIGN	0.5235772766339636	WITHOUT_CLASSIFICATION	0.47642272336603625	DESIGN
TODO: would be nice to handle proxy classes elegantly!	DESIGN	0.8456445023423178	DESIGN	0.15435549765768222	WITHOUT_CLASSIFICATION
TODO: copy/paste from ManyToOneType	DESIGN	0.6246129378166131	DESIGN	0.3753870621833868	WITHOUT_CLASSIFICATION
TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9938942854829869	DESIGN	0.006105714517013174	WITHOUT_CLASSIFICATION
TODO: this is a bit arbitrary, expose a switch to the user?	DESIGN	0.9950155851070431	DESIGN	0.004984414892956911	WITHOUT_CLASSIFICATION
TODO: implement caching?! proxies?!	DESIGN	0.9362542555749798	DESIGN	0.06374574442502023	WITHOUT_CLASSIFICATION
TODO: is this right??	DESIGN	0.9209900362548281	DESIGN	0.07900996374517184	WITHOUT_CLASSIFICATION
is this really necessary?	DESIGN	0.9706987606217037	WITHOUT_CLASSIFICATION	0.02930123937829626	DESIGN
TODO: move these to a new JoinableType abstract class, extended by EntityType and PersistentCollectionType:	DESIGN	0.996824926229502	DESIGN	0.003175073770497912	WITHOUT_CLASSIFICATION
TODO: this is very suboptimal for some subclasses (namely components), since it does not take advantage of two-phase-load	DESIGN	0.9820527798208978	DESIGN	0.017947220179102167	WITHOUT_CLASSIFICATION
worrying about proxies is perhaps a little bit of overkill here...	DESIGN	0.6375550232723644	DESIGN	0.36244497672763565	WITHOUT_CLASSIFICATION
NOTE VERY HACKISH WORKAROUND!! TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9571629393656851	DESIGN	0.04283706063431486	WITHOUT_CLASSIFICATION
TODO: Fix this so it will work for non-POJO entity mode	DESIGN	0.9565333825067607	DESIGN	0.04346661749323919	WITHOUT_CLASSIFICATION
We would probably refactor to have LogicParser (builds a tree of simple expressions connected by and, or, not), ExpressionParser (translates from OO terms like foo, foo.Bar, foo.Bar.Baz to SQL terms like FOOS.ID, FOOS.BAR_ID, etc) and PathExpressionParser (which does much the same thing it does now)	DESIGN	0.992442207955972	WITHOUT_CLASSIFICATION	0.007557792044027983	DESIGN
TODO: this is a little inefficient, don't need to do a whole deep replaceElements() call	DESIGN	0.9975946679739573	DESIGN	0.0024053320260426303	WITHOUT_CLASSIFICATION
workaround for WebLogic	DESIGN	0.8550544773723071	DESIGN	0.14494552262769295	WITHOUT_CLASSIFICATION
TODO: this dependency is kinda Bad	DESIGN	0.9962578227448506	DESIGN	0.0037421772551494304	WITHOUT_CLASSIFICATION
ick!	DESIGN	0.999603044878989	WITHOUT_CLASSIFICATION	3.9695512101098877E-4	DESIGN
short cut check...	DESIGN	0.9990559320875604	WITHOUT_CLASSIFICATION	9.440679124395008E-4	DESIGN
todo : move to StringHelper?	DESIGN	0.9934371708073814	WITHOUT_CLASSIFICATION	0.006562829192618661	DESIGN
yukky! Don't you have subclasses for that! TODO race conditions can happen here	DESIGN	0.6694218437759596	WITHOUT_CLASSIFICATION	0.33057815622404035	DESIGN
TODO: We probably should have a StatisticsNotPublishedException, to make it clean	DESIGN	0.9994468795704357	DESIGN	5.531204295643936E-4	WITHOUT_CLASSIFICATION
FIXME hack to work around fact that calling Node added = root.addChild( fqn ); doesn't properly set the version on the node	DESIGN	0.9999729710494428	DESIGN	2.702895055722948E-5	WITHOUT_CLASSIFICATION
TODO: I considered validating the presence of the TS cache here, but decided to defer unti getQueryCacheInstance() in case the cache is never actually used	DESIGN	0.9999692283092759	DESIGN	3.0771690724041535E-5	WITHOUT_CLASSIFICATION
need to do that here rather than in the save event listener to let the post insert events to have a id-filled entity when IDENTITY is used (EJB3)	DESIGN	0.958077791271109	DESIGN	0.04192220872889098	WITHOUT_CLASSIFICATION
TODO: simply remove this override if we fix the above todos	DESIGN	0.9987887836455384	DESIGN	0.0012112163544616362	WITHOUT_CLASSIFICATION
This, is used by SessionFactoryImpl to hand to the generated SessionImpl; was the only reason I could see that we cannot just use null as Settings.cacheProvider	DESIGN	0.7668388639263317	WITHOUT_CLASSIFICATION	0.2331611360736682	DESIGN
this is done here 'cos we might only know the type here (ugly!) TODO: improve this a lot:	DESIGN	0.9998980502697864	DESIGN	1.0194973021370234E-4	WITHOUT_CLASSIFICATION
todo : would love to have this work on a notification basis where the successful binding of an entity/subclass would emit a notification which the extendsQueue entries could react to...	DESIGN	0.9951586153781526	WITHOUT_CLASSIFICATION	0.004841384621847292	DESIGN
TODO : not sure the best way to handle this. The non-performant way :	DESIGN	0.7947695114843459	DESIGN	0.20523048851565417	WITHOUT_CLASSIFICATION
would be better to use the element-type to determine whether the old and the new are equal here; the problem being we do not necessarily have access to the element type in all cases	DESIGN	0.5985696213322498	WITHOUT_CLASSIFICATION	0.4014303786677503	DESIGN
This next bit is to allow for both unsaved-value="negative" and for "older" behavior where version number did not get seeded if it was already set in the object TODO: shift it into unsaved-value strategy	DESIGN	0.9999149417318361	DESIGN	8.50582681638542E-5	WITHOUT_CLASSIFICATION
merges don't cascade to uninitialized collections TODO: perhaps this does need to cascade after all....	DESIGN	0.997377767786974	DESIGN	0.002622232213025953	WITHOUT_CLASSIFICATION
TODO: an alternative is to check if the owner has changed; if it hasn't then return collection.getOwner()	DESIGN	0.9834493258450745	WITHOUT_CLASSIFICATION	0.016550674154925595	DESIGN
it is possible that the tree-walking in OuterJoinLoader can get to an association defined by a subclass, in which case the property-ref might refer to a property defined on a subclass of the current class in this case, the table name is not known - this temporary solution assumes that the property-ref refers to a property of the subclass table that the association belongs to (a reasonable guess) TODO: fix this, add: OuterJoinLoadable.getSubclassPropertyTableName(String propertyName)	DESIGN	0.999995230569873	DESIGN	4.769430126978296E-6	WITHOUT_CLASSIFICATION
this only works because collection entries are kept in a sequenced map by persistence context (maybe we should do like entities and keep a separate sequences set...) TODO: calling entrySet on an IdentityMap is SLOW!!	DESIGN	0.9991160406700937	DESIGN	8.839593299063855E-4	WITHOUT_CLASSIFICATION
important, to account for newly saved entities in query todo : some kind of check for new status...	DESIGN	0.99930979496349	WITHOUT_CLASSIFICATION	6.902050365099378E-4	DESIGN
brand new collection TODO: or an array!! we can't lock objects with arrays now??	DESIGN	0.6992828351126763	DESIGN	0.30071716488732375	WITHOUT_CLASSIFICATION
TODO: if object was an uninitialized proxy, this is inefficient, resulting in two SQL selects	DESIGN	0.5128151537456617	WITHOUT_CLASSIFICATION	0.4871848462543384	DESIGN
before cascade! TODO: should this be Session.instantiate(Persister, ...)?	DESIGN	0.9930271183146248	DESIGN	0.00697288168537521	WITHOUT_CLASSIFICATION
TODO : absolutely no usages of this constructor form; can it go away?	DESIGN	0.7177551018871362	DESIGN	0.2822448981128638	WITHOUT_CLASSIFICATION
todo : need to find a clean way to handle the "event source" role a seperate classs responsible for generating/dispatching events just duplicates most of the Session methods... passing around seperate reto interceptor, factory, actionQueue, and persistentContext is not manageable...	DESIGN	0.9941963939034072	DESIGN	0.005803606096592795	WITHOUT_CLASSIFICATION
todo : remove	DESIGN	0.9986940080446305	WITHOUT_CLASSIFICATION	0.0013059919553695348	DESIGN
aliasRefNode.resolve( false, false, aliasRefNode.getText() ); TODO: is it kosher to do it here? TODO: is it kosher to do it here?	DESIGN	0.8531086713706748	DESIGN	0.1468913286293251	WITHOUT_CLASSIFICATION
No explicit select expression; render the id and properties projection lists for every persister in the from clause into a single 'token node'. TODO: the only reason we need this stuff now is collection filters, we should get rid of derived select clause completely!	DESIGN	0.9823261905029165	DESIGN	0.017673809497083578	WITHOUT_CLASSIFICATION
TODO : an optimization here would be to consider cascade deletes and not gen those delete statements; the difficulty is the ordering of the tables here vs the cascade attributes on the persisters -> the table info gotten here should really be self-contained (i.e., a class representation defining all the needed attributes), then we could then get an array of those	DESIGN	0.9990590387784714	DESIGN	9.409612215286515E-4	WITHOUT_CLASSIFICATION
TODO: get SQL rendering out of here, create an AST for the join expressions. Use the SQL generator grammar to generate the SQL text for the index expression.	DESIGN	0.9931820636260025	WITHOUT_CLASSIFICATION	0.0068179363739975215	DESIGN
TODO : this really needs to be delayed unitl after we definitively know all node types where this is currently a problem is parameters for which where we cannot unequivocally resolve an expected type	DESIGN	0.987406154014944	DESIGN	0.012593845985055937	WITHOUT_CLASSIFICATION
TODO: Figure out a better way to get the FROM elements in a proper tree structure. If this is not the destination of a many-to-many, add it as a child of the origin.	DESIGN	0.9983375805756837	DESIGN	0.0016624194243162807	WITHOUT_CLASSIFICATION
work around that crazy issue where the tree contains "empty" FromElements (no text); afaict, this is caused by FromElementFactory.createCollectionJoin()	DESIGN	0.7625105906525311	WITHOUT_CLASSIFICATION	0.23748940934746882	DESIGN
TODO: this class does too many things! we need a different kind of path expression parser for each of the diffferent ways in which path expressions can occur	DESIGN	0.996749930558339	DESIGN	0.0032500694416609847	WITHOUT_CLASSIFICATION
real hacky... used to count the nesting of parentheses	DESIGN	0.9764106863159364	WITHOUT_CLASSIFICATION	0.023589313684063553	DESIGN
TODO : would be really nice to cache the spec on the query-def so as to not have to re-calc the hash; currently not doable though because of the resultset-ref stuff...	DESIGN	0.6823387667406329	DESIGN	0.3176612332593672	WITHOUT_CLASSIFICATION
for arrays, we should end the collection load before resolving the entities, since the actual array instances are not instantiated during loading TODO: or we could do this polymorphically, and have two different operations implemented differently for arrays	DESIGN	0.9955111584706147	DESIGN	0.004488841529385341	WITHOUT_CLASSIFICATION
polymorphism not really handled completely correctly, perhaps...well, actually its ok, assuming that the entity name used in the lookup is the same as the the one used here, which it will be	DESIGN	0.6489980223783555	WITHOUT_CLASSIFICATION	0.3510019776216445	DESIGN
TODO: should "record" how many properties we have reffered to - and if we don't get'em'all we throw an exception! Way better than trial and error ;)	DESIGN	0.9992220487202571	DESIGN	7.779512797427915E-4	WITHOUT_CLASSIFICATION
VERY IMPORTANT!!!! - This class needs to be free of any static references to any CGLIB or Javassist classes. Otherwise, users will always need both on their classpaths no matter which (if either) they use. Another option here would be to remove the Hibernate.isPropertyInitialized() method and have the users go through the SessionFactory to get this information.	DESIGN	0.763572951751339	WITHOUT_CLASSIFICATION	0.23642704824866087	DESIGN
TODO: is it really neceassry to provide Configuration to CollectionPersisters ? Should it not be enough with associated class ? or why does EntityPersister's not get access to configuration ? The only reason I could see that Configuration gets passed to collection persisters is so that they can look up the dom4j node name of the entity element in case no explicit node name was applied at the collection element level. Are you kidding me? Trivial to fix then. Just store and expose the node name on the entity persister (which the collection persister looks up anyway via other means...).	DESIGN	0.9999999675736324	DESIGN	3.2426367601077624E-8	WITHOUT_CLASSIFICATION
for backward compatibility, allow a set with no not-null element columns, using all columns in the row locater SQL TODO: create an implicit not null constraint on all cols?	DESIGN	0.5428925433857462	WITHOUT_CLASSIFICATION	0.45710745661425384	DESIGN
SPACES TODO: i'm not sure, but perhaps we should exclude abstract denormalized tables?	DESIGN	0.9989373330913635	DESIGN	0.0010626669086365578	WITHOUT_CLASSIFICATION
workaround, for backward compatibility of sets with no not-null columns, assume all columns are used in the row locator SQL	DESIGN	0.9998664359852694	WITHOUT_CLASSIFICATION	1.3356401473074646E-4	DESIGN
note that this method could easily be moved up to BasicEntityPersister, if we ever needed to reuse it from other subclasses	DESIGN	0.5063713297212478	WITHOUT_CLASSIFICATION	0.4936286702787522	DESIGN
index += getPropertyColumnSpan( i ); TODO: this is kinda slow...	DESIGN	0.5723081344908527	DESIGN	0.4276918655091474	WITHOUT_CLASSIFICATION
TODO: need some caching scheme? really comes down to decision regarding amount of state (if any) kept on PropertyAccessors	DESIGN	0.8427122271938754	DESIGN	0.1572877728061246	WITHOUT_CLASSIFICATION
TODO: here is why we need to make bytecode provider global :( TODO : again, fix this after HHH-1907 is complete	DESIGN	0.9999999831193241	DESIGN	1.6880675866157396E-8	WITHOUT_CLASSIFICATION
TODO: Yuck! This is not quite good enough, it's a quick hack around the problem of having a to-one association that refers to an embedded component:	DESIGN	0.9999999991712282	DESIGN	8.28771827953104E-10	WITHOUT_CLASSIFICATION
for DOM4J "collections" only TODO: it would be better if this was done at the higher level by Printer	DESIGN	0.9691265920103697	DESIGN	0.030873407989630224	WITHOUT_CLASSIFICATION
would be great to move all this below here into another method that could also be used from the new scrolling stuff. Would need to change the way the max-row stuff is handled (i.e. behind an interface) so that I could do the control breaking at the means to know when to stop	DESIGN	0.9999999754159018	DESIGN	2.4584098275601395E-8	WITHOUT_CLASSIFICATION
TODO: can we always use the "null property" approach for everything?	DESIGN	0.9799997935810666	DESIGN	0.020000206418933363	WITHOUT_CLASSIFICATION
polymorphism comment above	DESIGN	0.9999508391293203	WITHOUT_CLASSIFICATION	4.916087067970789E-5	DESIGN
some messy, complex stuff here, since createCriteria() can take an aliased path, or a path rooted at the creating criteria instance	DESIGN	0.9999965425012268	WITHOUT_CLASSIFICATION	3.4574987732038305E-6	DESIGN
TODO: really bad, evil hack to fix!!!	DESIGN	0.9999994731495363	DESIGN	5.268504636349165E-7	WITHOUT_CLASSIFICATION
ugly hack for cases like "elements(foo.bar.collection)" (multi-part path expression ending in elements or indices)	DESIGN	0.9942623338662101	DESIGN	0.005737666133789865	WITHOUT_CLASSIFICATION
try block is a hack around fact that currently tuplizers are not given the opportunity to resolve a subclass entity name. this allows the (we assume custom) interceptor the ability to influence this decision if we were not able to based on the given entityName	DESIGN	0.9999990158540125	DESIGN	9.841459874758422E-7	WITHOUT_CLASSIFICATION
/ HACK ALERT !!!!!!!!!!!!!!!!!!!!!!!!!!!! Attempt to work around "ghost" ImpliedFromElements that occasionally show up between the actual things being joined. This consistently occurs from index nodes (at least against many-to-many). Not sure if there are other conditions Essentially, look-ahead to the next FromElement that actually writes something to the SQL	DESIGN	0.7474263905684054	DESIGN	0.25257360943159457	WITHOUT_CLASSIFICATION
init the table here instead of earlier, so that we can get a quoted table name TODO: would it be better to simply pass the qualified table name, instead of splitting it up into schema/catalog/table names	DESIGN	0.9656871771025403	DESIGN	0.03431282289745967	WITHOUT_CLASSIFICATION
TODO : would be great to have a Mapping#hasNonIdentifierPropertyNamedId method I don't believe that Mapping#getReferencedPropertyType accounts for the identifier property; so if it returns for a property named 'id', then we should have a non-id field named id	DESIGN	0.9814701788626083	DESIGN	0.01852982113739169	WITHOUT_CLASSIFICATION
TODO: is this really necessary????	DESIGN	0.9500215122817086	DESIGN	0.04997848771829134	WITHOUT_CLASSIFICATION
TODO: ideally we need the construction of PropertyAccessor to take the following: 1) EntityMode 2) EntityMode-specific data (i.e., the classname for pojo entities) 3) Property-specific data based on the EntityMode (i.e., property-name or dom4j-node-name) The easiest way, with the introduction of the new runtime-metamodel classes, would be the the following predicates: 1) PropertyAccessorFactory.getPropertyAccessor() takes references to both a org.hibernate.metadata.EntityModeMetadata and org.hibernate.metadata.Property 2) What is now termed a "PropertyAccessor" stores any values needed from those two pieces of information 3) Code can then simply call PropertyAccess.getGetter() with no parameters; likewise with PropertyAccessor.getSetter()	DESIGN	0.9485668991137584	DESIGN	0.051433100886241714	WITHOUT_CLASSIFICATION
TODO: this is temporary in that the end result will probably not take a Property reference per-se.	DESIGN	0.9978931908849543	DESIGN	0.0021068091150457263	WITHOUT_CLASSIFICATION
todo : this eventually needs to be removed	DESIGN	0.9745525947245953	WITHOUT_CLASSIFICATION	0.025447405275404723	DESIGN
TODO: make this a bit nicer	DESIGN	0.9953978241043127	DESIGN	0.00460217589568741	WITHOUT_CLASSIFICATION
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
todo : we can remove this once the deprecated ctor can be made private...	DESIGN	0.7834957556351975	WITHOUT_CLASSIFICATION	0.21650424436480245	DESIGN
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9964980308406741	DESIGN	0.0035019691593259745	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9964980308406741	DESIGN	0.0035019691593259745	WITHOUT_CLASSIFICATION
FIXME Per the RegionFactory class Javadoc, this constructor version should not be necessary. @param props The configuration properties	DESIGN	0.9964980308406741	DESIGN	0.0035019691593259745	WITHOUT_CLASSIFICATION
TODO : probably better to calculate these and pass them in, as it'll be more performant	DESIGN	0.998419977439589	DESIGN	0.0015800225604109916	WITHOUT_CLASSIFICATION
